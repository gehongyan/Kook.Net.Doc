{
  "api/index.html": {
    "href": "api/index.html",
    "title": "API 文档 | Kook.Net 文档",
    "keywords": "API 文档 用于浏览 Kook.Net 的全部公开 API 信息。 常见实体 Kook.WebSocket KookSocketClient SocketGuild SocketGuildChannel SocketRole SocketGuildUser SocketMessage"
  },
  "api/Kook.ActionGroupModule.html": {
    "href": "api/Kook.ActionGroupModule.html",
    "title": "Class ActionGroupModule | Kook.Net 文档",
    "keywords": "Class ActionGroupModule Represents an action group module that can be used in an ICard . Inheritance Object ActionGroupModule Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class ActionGroupModule : object, IModule, IEquatable<ActionGroupModule> Properties Elements Gets the elements of this module. Declaration public ImmutableArray<ButtonElement> Elements { get; } Property Value ImmutableArray < ButtonElement > An containing the elements of this module. Type Gets the type of the module. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Implements IModule.Type Methods Equals(ActionGroupModule) Determines whether the specified ActionGroupModule is equal to the current ActionGroupModule . Declaration public bool Equals(ActionGroupModule actionGroupModule) Parameters ActionGroupModule actionGroupModule The ActionGroupModule to compare with the current ActionGroupModule . Returns Boolean true if the specified ActionGroupModule is equal to the current ActionGroupModule ; otherwise, false . Equals(Object) Determines whether the specified ActionGroupModule is equal to the current ActionGroupModule . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current ActionGroupModule . Returns Boolean true if the specified ActionGroupModule is equal to the current ActionGroupModule ; otherwise, false . Remarks If the object passes is an ActionGroupModule , Equals(ActionGroupModule) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 Operators Equality(ActionGroupModule, ActionGroupModule) Determines whether the specified ActionGroupModule is equal to the current ActionGroupModule . Declaration public static bool operator ==(ActionGroupModule left, ActionGroupModule right) Parameters ActionGroupModule left ActionGroupModule right Returns Boolean true if the specified ActionGroupModule is equal to the current ActionGroupModule ; otherwise, false . Inequality(ActionGroupModule, ActionGroupModule) Determines whether the specified ActionGroupModule is not equal to the current ActionGroupModule . Declaration public static bool operator !=(ActionGroupModule left, ActionGroupModule right) Parameters ActionGroupModule left ActionGroupModule right Returns Boolean true if the specified ActionGroupModule is not equal to the current ActionGroupModule ; otherwise, false . Extension Methods CardExtensions.ToBuilder(ActionGroupModule)"
  },
  "api/Kook.ActionGroupModuleBuilder.html": {
    "href": "api/Kook.ActionGroupModuleBuilder.html",
    "title": "Class ActionGroupModuleBuilder | Kook.Net 文档",
    "keywords": "Class ActionGroupModuleBuilder Represents a action group module builder for creating an ActionGroupModule . Inheritance Object ActionGroupModuleBuilder Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class ActionGroupModuleBuilder : object, IModuleBuilder, IEquatable<ActionGroupModuleBuilder> Constructors ActionGroupModuleBuilder() Initializes a new instance of the ActionGroupModuleBuilder class. Declaration public ActionGroupModuleBuilder() ActionGroupModuleBuilder(List<ButtonElementBuilder>) Initializes a new instance of the ActionGroupModuleBuilder class. Declaration public ActionGroupModuleBuilder(List<ButtonElementBuilder> elements) Parameters List < ButtonElementBuilder > elements Fields MaxElementCount Returns the maximum number of elements allowed by Kook. Declaration public const int MaxElementCount = null Field Value Int32 Properties Elements Gets or sets the button elements of the action group module. Declaration public List<ButtonElementBuilder> Elements { get; set; } Property Value List < ButtonElementBuilder > A containing the button elements of the action group module. Type Specifies the module type of the IModule this builder creates. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Implements IModuleBuilder.Type Methods AddElement(Action<ButtonElementBuilder>) Adds a button element to the action group module. Declaration public ActionGroupModuleBuilder AddElement(Action<ButtonElementBuilder> action) Parameters Action < ButtonElementBuilder > action The action to add a button element to the action group module. Returns ActionGroupModuleBuilder The current builder. AddElement(ButtonElementBuilder) Adds a button element to the action group module. Declaration public ActionGroupModuleBuilder AddElement(ButtonElementBuilder field) Parameters ButtonElementBuilder field The button element to add. Returns ActionGroupModuleBuilder The current builder. Build() Builds this builder into an ActionGroupModule . Declaration public ActionGroupModule Build() Returns ActionGroupModule An ActionGroupModule representing the built action group module object. Equals(ActionGroupModuleBuilder) Determines whether the specified ActionGroupModuleBuilder is equal to the current ActionGroupModuleBuilder . Declaration public bool Equals(ActionGroupModuleBuilder actionGroupModuleBuilder) Parameters ActionGroupModuleBuilder actionGroupModuleBuilder The ActionGroupModuleBuilder to compare with the current ActionGroupModuleBuilder . Returns Boolean true if the specified ActionGroupModuleBuilder is equal to the current ActionGroupModuleBuilder ; otherwise, false . Equals(Object) Determines whether the specified ActionGroupModuleBuilder is equal to the current ActionGroupModuleBuilder . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current ActionGroupModuleBuilder . Returns Boolean true if the specified ActionGroupModuleBuilder is equal to the current ActionGroupModuleBuilder ; otherwise, false . Remarks If the object passes is an ActionGroupModuleBuilder , Equals(ActionGroupModuleBuilder) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 Operators Equality(ActionGroupModuleBuilder, ActionGroupModuleBuilder) Determines whether the specified ActionGroupModuleBuilder is equal to the current ActionGroupModuleBuilder . Declaration public static bool operator ==(ActionGroupModuleBuilder left, ActionGroupModuleBuilder right) Parameters ActionGroupModuleBuilder left ActionGroupModuleBuilder right Returns Boolean true if the specified ActionGroupModuleBuilder is equal to the current ActionGroupModuleBuilder ; otherwise, false . Inequality(ActionGroupModuleBuilder, ActionGroupModuleBuilder) Determines whether the specified ActionGroupModuleBuilder is not equal to the current ActionGroupModuleBuilder . Declaration public static bool operator !=(ActionGroupModuleBuilder left, ActionGroupModuleBuilder right) Parameters ActionGroupModuleBuilder left ActionGroupModuleBuilder right Returns Boolean true if the specified ActionGroupModuleBuilder is not equal to the current ActionGroupModuleBuilder ; otherwise, false . Explicit Interface Implementations IModuleBuilder.Build() Builds the IModuleBuilder into an IModule . Declaration IModule IModuleBuilder.Build() Returns IModule An IModule representing the built module object. Implements IModuleBuilder.Build()"
  },
  "api/Kook.ActivityType.html": {
    "href": "api/Kook.ActivityType.html",
    "title": "Enum ActivityType | Kook.Net 文档",
    "keywords": "Enum ActivityType Specifies the type of activities. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum ActivityType : int Game Specifies that the activity is a game. Music Specifies that the activity is music."
  },
  "api/Kook.AlphaColor.html": {
    "href": "api/Kook.AlphaColor.html",
    "title": "Struct AlphaColor | Kook.Net 文档",
    "keywords": "Struct AlphaColor Represents a Color with an alpha channel. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct AlphaColor Constructors AlphaColor(Color, Byte) Initializes a AlphaColor struct with the given base color and alpha channel. Declaration public AlphaColor(Color baseColor, byte alpha) Parameters Color baseColor The base color to use. Byte alpha The byte that represents the alpha channel. AlphaColor(Byte, Byte, Byte, Byte) Initializes a AlphaColor struct with the given RGBA bytes. Declaration public AlphaColor(byte r, byte g, byte b, byte a) Parameters Byte r The byte that represents the red color. Byte g The byte that represents the green color. Byte b The byte that represents the blue color. Byte a The byte that represents the alpha channel. Examples The following will create a color that has a value of #607D8BFF . AlphaColor darkGrey = new AlphaColor((byte)0b_01100000, (byte)0b_01111101, (byte)0b_10001011, (byte)0b_11111111); AlphaColor(Int32, Int32, Int32, Int32) Initializes a AlphaColor struct with the given RGBA value. Declaration public AlphaColor(int r, int g, int b, int a) Parameters Int32 r The value that represents the red color. Must be within 0~255. Int32 g The value that represents the green color. Must be within 0~255. Int32 b The value that represents the blue color. Must be within 0~255. Int32 a The value that represents the alpha channel. Must be within 0~255. Examples The following will create a color that has a value of #607D8BFF . AlphaColor darkGrey = new AlphaColor(96, 125, 139, 255); AlphaColor(Single, Single, Single, Single) Initializes a AlphaColor struct with the given RGBA float value. Declaration public AlphaColor(float r, float g, float b, float a) Parameters Single r The value that represents the red color. Must be within 0~1. Single g The value that represents the green color. Must be within 0~1. Single b The value that represents the blue color. Must be within 0~1. Single a The value that represents the alpha channel. Must be within 0~1. Examples The following will create a color that has a value of #607C8CFF . AlphaColor darkGrey = new AlphaColor(0.38f, 0.49f, 0.55f, 1.00f); AlphaColor(UInt64) Initializes a new instance of the AlphaColor struct with the specified raw value. Declaration public AlphaColor(ulong rawValue) Parameters UInt64 rawValue The raw value to use. Fields Default Gets the default user color value. Declaration public static readonly AlphaColor Default Field Value AlphaColor MaxDecimalValue Gets the max decimal value of an color with an alpha channel. Declaration public const ulong MaxDecimalValue = null Field Value UInt64 Properties A Gets the alpha component for this color. Declaration public byte A { get; } Property Value Byte B Gets the blue component for this color. Declaration public byte B { get; } Property Value Byte BaseColor Gets the base color for this color without the alpha channel. Declaration public Color BaseColor { get; } Property Value Color G Gets the green component for this color. Declaration public byte G { get; } Property Value Byte R Gets the red component for this color. Declaration public byte R { get; } Property Value Byte RawValue Gets the raw value for this color. Declaration public ulong RawValue { get; } Property Value UInt64 Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean GetHashCode() Declaration public override int GetHashCode() Returns Int32 ToString() Gets the hexadecimal representation of the color (e.g. #000cccff ). Declaration public override string ToString() Returns String A hexadecimal string of the color. Operators Equality(AlphaColor, AlphaColor) Determines whether the specified AlphaColor is equal to this instance. Declaration public static bool operator ==(AlphaColor lhs, AlphaColor rhs) Parameters AlphaColor lhs AlphaColor rhs Returns Boolean true if the specified AlphaColor is equal to this instance; otherwise, false . Explicit(AlphaColor to Color) Converts the given Kook.Net-defined AlphaColor to a Kook.Net-defined Color . Declaration public static explicit operator Color(AlphaColor color) Parameters AlphaColor color The Kook.Net-defined AlphaColor to convert. Returns Color The Kook.Net-defined Color that represents the given Kook.Net-defined AlphaColor . Remarks warning This conversion will drop the alpha channel of the given AlphaColor . Explicit(System.Drawing.Color to AlphaColor) Converts the given .NET standard to a Kook.Net-defined AlphaColor . Declaration public static explicit operator AlphaColor(System.Drawing.Color color) Parameters System.Drawing.Color color The .NET standard to convert. Returns AlphaColor The Kook.Net-defined AlphaColor that represents the given .NET standard . Implicit(AlphaColor to System.Drawing.Color) Converts the given Kook.Net-defined AlphaColor to a .NET standard . Declaration public static implicit operator System.Drawing.Color(AlphaColor color) Parameters AlphaColor color The Kook.Net-defined AlphaColor to convert. Returns System.Drawing.Color The .NET standard that represents the given Kook.Net-defined AlphaColor . Implicit(AlphaColor to UInt64) Converts the given AlphaColor to its raw value of . Declaration public static implicit operator ulong (AlphaColor color) Parameters AlphaColor color The AlphaColor to convert. Returns UInt64 The raw value of the given AlphaColor . Implicit(Color to AlphaColor) Converts the given Kook.Net-defined Color to a Kook.Net-defined AlphaColor . Declaration public static implicit operator AlphaColor(Color color) Parameters Color color The Kook.Net-defined Color to convert. Returns AlphaColor The Kook.Net-defined AlphaColor that represents the given Kook.Net-defined Color . Implicit(UInt64 to AlphaColor) Converts the given raw value of to a AlphaColor . Declaration public static implicit operator AlphaColor(ulong rawValue) Parameters UInt64 rawValue The raw value of the color. Returns AlphaColor The AlphaColor that represents the given raw value. Inequality(AlphaColor, AlphaColor) Determines whether the specified AlphaColor is not equal to this instance. Declaration public static bool operator !=(AlphaColor lhs, AlphaColor rhs) Parameters AlphaColor lhs AlphaColor rhs Returns Boolean true if the specified AlphaColor is not equal to this instance; otherwise, false ."
  },
  "api/Kook.AsyncEnumerableExtensions.html": {
    "href": "api/Kook.AsyncEnumerableExtensions.html",
    "title": "Class AsyncEnumerableExtensions | Kook.Net 文档",
    "keywords": "Class AsyncEnumerableExtensions An extension class for squashing . Inheritance Object AsyncEnumerableExtensions Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public static class AsyncEnumerableExtensions : object Remarks This set of extension methods will squash an into a single . This is often associated with requests that has a set limit when requesting. Methods Flatten<T>(IAsyncEnumerable<IEnumerable<T>>) Flattens the specified pages into one . Declaration public static IAsyncEnumerable<T> Flatten<T>(this IAsyncEnumerable<IEnumerable<T>> source) Parameters IAsyncEnumerable < IEnumerable <T>> source Returns IAsyncEnumerable <T> Type Parameters T FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) Flattens the specified pages into one asynchronously. Declaration public static Task<IEnumerable<T>> FlattenAsync<T>(this IAsyncEnumerable<IEnumerable<T>> source) Parameters IAsyncEnumerable < IEnumerable <T>> source Returns Task < IEnumerable <T>> Type Parameters T"
  },
  "api/Kook.Attachment.html": {
    "href": "api/Kook.Attachment.html",
    "title": "Class Attachment | Kook.Net 文档",
    "keywords": "Class Attachment Represents a message attachment found in a IUserMessage . Inheritance Object Attachment Namespace : Kook Assembly : Kook.Net.Rest.dll Syntax public class Attachment : object, IAttachment Properties Duration Declaration public TimeSpan? Duration { get; } Property Value Nullable < TimeSpan > Filename Declaration public string Filename { get; } Property Value String FileType Declaration public string FileType { get; } Property Value String Height Declaration public int? Height { get; } Property Value Nullable < Int32 > Size Declaration public int? Size { get; } Property Value Nullable < Int32 > Type Gets the type of the attachment. Declaration public AttachmentType Type { get; } Property Value AttachmentType An AttachmentType representing the type of the attachment. Implements IAttachment.Type Url Declaration public string Url { get; } Property Value String Width Declaration public int? Width { get; } Property Value Nullable < Int32 > Methods ToString() Returns the filename of this attachment. Declaration public override string ToString() Returns String A string containing the filename of this attachment."
  },
  "api/Kook.AttachmentType.html": {
    "href": "api/Kook.AttachmentType.html",
    "title": "Enum AttachmentType | Kook.Net 文档",
    "keywords": "Enum AttachmentType Specifies the type of the attachment. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum AttachmentType : int Audio The attachment is an audio. File The attachment is a file. Image The attachment is an image. Video The attachment is a video."
  },
  "api/Kook.AudioModule.html": {
    "href": "api/Kook.AudioModule.html",
    "title": "Class AudioModule | Kook.Net 文档",
    "keywords": "Class AudioModule Represents an audio module that can be used in an ICard . Inheritance Object AudioModule Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class AudioModule : object, IMediaModule, IModule, IEquatable<AudioModule> Properties Cover Gets the cover of the audio associated with this module. Declaration public string Cover { get; } Property Value String A string representing the cover of the audio associated with this module. Source Gets the source of the media associated with this module. Declaration public string Source { get; } Property Value String A string representing the source of the audio associated with this module. Implements IMediaModule.Source Title Gets the title of the media associated with this module. Declaration public string Title { get; } Property Value String A string representing the title of the media associated with this module. Implements IMediaModule.Title Type Gets the type of the module. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Implements IModule.Type Methods Equals(AudioModule) Determines whether the specified AudioModule is equal to the current AudioModule . Declaration public bool Equals(AudioModule audioModule) Parameters AudioModule audioModule The AudioModule to compare with the current AudioModule . Returns Boolean true if the specified AudioModule is equal to the current AudioModule ; otherwise, false . Equals(Object) Determines whether the specified AudioModule is equal to the current AudioModule . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current AudioModule . Returns Boolean true if the specified AudioModule is equal to the current AudioModule ; otherwise, false . Remarks If the object passes is an AudioModule , Equals(AudioModule) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 Operators Equality(AudioModule, AudioModule) Determines whether the specified AudioModule is equal to the current AudioModule . Declaration public static bool operator ==(AudioModule left, AudioModule right) Parameters AudioModule left AudioModule right Returns Boolean true if the specified AudioModule is equal to the current AudioModule ; otherwise, false . Inequality(AudioModule, AudioModule) Determines whether the specified AudioModule is not equal to the current AudioModule . Declaration public static bool operator !=(AudioModule left, AudioModule right) Parameters AudioModule left AudioModule right Returns Boolean true if the specified AudioModule is not equal to the current AudioModule ; otherwise, false . Extension Methods CardExtensions.ToBuilder(AudioModule)"
  },
  "api/Kook.AudioModuleBuilder.html": {
    "href": "api/Kook.AudioModuleBuilder.html",
    "title": "Class AudioModuleBuilder | Kook.Net 文档",
    "keywords": "Class AudioModuleBuilder Represents a audio module builder for creating an AudioModule . Inheritance Object AudioModuleBuilder Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class AudioModuleBuilder : object, IModuleBuilder, IEquatable<AudioModuleBuilder> Constructors AudioModuleBuilder() Initializes a new instance of the AudioModuleBuilder class. Declaration public AudioModuleBuilder() AudioModuleBuilder(String, String, String) Initializes a new instance of the AudioModuleBuilder class. Declaration public AudioModuleBuilder(string source, string cover = null, string title = null) Parameters String source The source URL of the video. String cover The cover URL of the video. String title The title of the video. Properties Cover Gets or sets the cover URL of the video. Declaration public string Cover { get; set; } Property Value String The cover URL of the video. Source Gets or sets the source URL of the video. Declaration public string Source { get; set; } Property Value String The source URL of the video. Title Gets or sets the title of the video. Declaration public string Title { get; set; } Property Value String The title of the video. Type Specifies the module type of the IModule this builder creates. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Implements IModuleBuilder.Type Methods Build() Builds this builder into an AudioModule . Declaration public AudioModule Build() Returns AudioModule An AudioModule representing the built audio module object. Equals(AudioModuleBuilder) Determines whether the specified AudioModuleBuilder is equal to the current AudioModuleBuilder . Declaration public bool Equals(AudioModuleBuilder audioModuleBuilder) Parameters AudioModuleBuilder audioModuleBuilder The AudioModuleBuilder to compare with the current AudioModuleBuilder . Returns Boolean true if the specified AudioModuleBuilder is equal to the current AudioModuleBuilder ; otherwise, false . Equals(Object) Determines whether the specified AudioModuleBuilder is equal to the current AudioModuleBuilder . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current AudioModuleBuilder . Returns Boolean true if the specified AudioModuleBuilder is equal to the current AudioModuleBuilder ; otherwise, false . Remarks If the object passes is an AudioModuleBuilder , Equals(AudioModuleBuilder) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 WithCover(String) Sets the cover URL of the video. Declaration public AudioModuleBuilder WithCover(string cover) Parameters String cover The cover URL of the video to be set. Returns AudioModuleBuilder The current builder. WithSource(String) Sets the source URL of the video. Declaration public AudioModuleBuilder WithSource(string source) Parameters String source The source URL of the video to be set. Returns AudioModuleBuilder The current builder. WithTitle(String) Sets the title of the video. Declaration public AudioModuleBuilder WithTitle(string title) Parameters String title The title of the video to be set. Returns AudioModuleBuilder The current builder. Operators Equality(AudioModuleBuilder, AudioModuleBuilder) Determines whether the specified AudioModuleBuilder is equal to the current AudioModuleBuilder . Declaration public static bool operator ==(AudioModuleBuilder left, AudioModuleBuilder right) Parameters AudioModuleBuilder left AudioModuleBuilder right Returns Boolean true if the specified AudioModuleBuilder is equal to the current AudioModuleBuilder ; otherwise, false . Inequality(AudioModuleBuilder, AudioModuleBuilder) Determines whether the specified AudioModuleBuilder is not equal to the current AudioModuleBuilder . Declaration public static bool operator !=(AudioModuleBuilder left, AudioModuleBuilder right) Parameters AudioModuleBuilder left AudioModuleBuilder right Returns Boolean true if the specified AudioModuleBuilder is not equal to the current AudioModuleBuilder ; otherwise, false . Explicit Interface Implementations IModuleBuilder.Build() Builds the IModuleBuilder into an IModule . Declaration IModule IModuleBuilder.Build() Returns IModule An IModule representing the built module object. Implements IModuleBuilder.Build()"
  },
  "api/Kook.BadgeStyle.html": {
    "href": "api/Kook.BadgeStyle.html",
    "title": "Enum BadgeStyle | Kook.Net 文档",
    "keywords": "Enum BadgeStyle Specifies the style of badges. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum BadgeStyle : int GuildName The badge contains only the guild name. OnlineAndTotalMemberCount The badge contains the number of both online and all members in the guild. OnlineMemberCount The badge contains the number of online members in the guild."
  },
  "api/Kook.BilibiliVideoEmbed.html": {
    "href": "api/Kook.BilibiliVideoEmbed.html",
    "title": "Struct BilibiliVideoEmbed | Kook.Net 文档",
    "keywords": "Struct BilibiliVideoEmbed Represents an embed in a message that links to a Bilibili video. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct BilibiliVideoEmbed : IEmbed Properties BvNumber A string that represents the Bilibili video number in BV format. Declaration public string BvNumber { get; } Property Value String Cover A string that represents the cover of the Bilibili video. Declaration public string Cover { get; } Property Value String Duration A that represents the duration of the Bilibili video. Declaration public TimeSpan Duration { get; } Property Value TimeSpan IframePath A string that represents the path of the iframe. Declaration public string IframePath { get; } Property Value String OriginUrl A string that represents the origin URL of the Bilibili video. Declaration public string OriginUrl { get; } Property Value String Title A string that represents the title of the Bilibili video. Declaration public string Title { get; } Property Value String Type Gets the type of this embed. Declaration public EmbedType Type { get; } Property Value EmbedType A EmbedType that represents the type of this embed. Implements IEmbed.Type Url Gets the URL of this embed. Declaration public string Url { get; } Property Value String A string that represents the URL of this embed. Implements IEmbed.Url"
  },
  "api/Kook.BoostLevel.html": {
    "href": "api/Kook.BoostLevel.html",
    "title": "Enum BoostLevel | Kook.Net 文档",
    "keywords": "Enum BoostLevel Specifies the boost level of a guild. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum BoostLevel : int Level1 Boost level 1. Level2 Boost level 2. Level3 Boost level 3. Level4 Boost level 4. Level5 Boost level 5. Level6 Boost level 6. None No boost."
  },
  "api/Kook.BoostSubscriptionMetadata.html": {
    "href": "api/Kook.BoostSubscriptionMetadata.html",
    "title": "Class BoostSubscriptionMetadata | Kook.Net 文档",
    "keywords": "Class BoostSubscriptionMetadata A meta data containing boost subscription information. Inheritance Object BoostSubscriptionMetadata Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class BoostSubscriptionMetadata : object Properties Count Gets how many boost packs the user used for this subscription. Declaration public int Count { get; } Property Value Int32 IsValid Gets whether this subscription has not expired. Declaration public bool IsValid { get; } Property Value Boolean Since Gets the date and time when this subscription began. Declaration public DateTimeOffset Since { get; } Property Value DateTimeOffset Until Gets the date and time when this subscription will end or ended. Declaration public DateTimeOffset Until { get; } Property Value DateTimeOffset"
  },
  "api/Kook.ButtonClickEventType.html": {
    "href": "api/Kook.ButtonClickEventType.html",
    "title": "Enum ButtonClickEventType | Kook.Net 文档",
    "keywords": "Enum ButtonClickEventType Specifies the event type fired when a ButtonElement is clicked. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum ButtonClickEventType : int Link The user will be redirected to the specified URL when the button is clicked. None Nothing will happen when the button is clicked. ReturnValue The value of the button's Value property will be submitted."
  },
  "api/Kook.ButtonElement.html": {
    "href": "api/Kook.ButtonElement.html",
    "title": "Class ButtonElement | Kook.Net 文档",
    "keywords": "Class ButtonElement A button element that can be used in an IModule . Inheritance Object ButtonElement Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class ButtonElement : object, IElement, IEquatable<ButtonElement> Properties Click Gets the event type fired when the button is clicked. Declaration public ButtonClickEventType Click { get; } Property Value ButtonClickEventType A ButtonClickEventType value that represents the event type fired when the button is clicked. Text Gets the text element of the button. Declaration public IElement Text { get; } Property Value IElement An IElement value that represents the text element of the button. Theme Gets the theme of the button. Declaration public ButtonTheme Theme { get; } Property Value ButtonTheme A ButtonTheme value that represents the theme of the button. Type Gets the theme of the button. Declaration public ElementType Type { get; } Property Value ElementType An ElementType value that represents the theme of the button. Implements IElement.Type Value Gets the value of the button. Declaration public string Value { get; } Property Value String A string value that represents the value of the button. Methods Equals(ButtonElement) Determines whether the specified ButtonElement is equal to the current ButtonElement . Declaration public bool Equals(ButtonElement buttonElement) Parameters ButtonElement buttonElement The ButtonElement to compare with the current ButtonElement . Returns Boolean true if the specified ButtonElement is equal to the current ButtonElement ; otherwise, false . Equals(Object) Determines whether the specified ButtonElement is equal to the current ButtonElement . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current ButtonElement . Returns Boolean true if the specified ButtonElement is equal to the current ButtonElement ; otherwise, false . Remarks If the object passes is an ButtonElement , Equals(ButtonElement) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 Operators Equality(ButtonElement, ButtonElement) Determines whether the specified ButtonElement is equal to the current ButtonElement . Declaration public static bool operator ==(ButtonElement left, ButtonElement right) Parameters ButtonElement left ButtonElement right Returns Boolean true if the specified ButtonElement is equal to the current ButtonElement ; otherwise, false . Inequality(ButtonElement, ButtonElement) Determines whether the specified ButtonElement is not equal to the current ButtonElement . Declaration public static bool operator !=(ButtonElement left, ButtonElement right) Parameters ButtonElement left ButtonElement right Returns Boolean true if the specified ButtonElement is not equal to the current ButtonElement ; otherwise, false . Extension Methods CardExtensions.ToBuilder(ButtonElement)"
  },
  "api/Kook.ButtonElementBuilder.html": {
    "href": "api/Kook.ButtonElementBuilder.html",
    "title": "Class ButtonElementBuilder | Kook.Net 文档",
    "keywords": "Class ButtonElementBuilder An element builder to build a ButtonElement . Inheritance Object ButtonElementBuilder Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class ButtonElementBuilder : object, IElementBuilder, IEquatable<ButtonElementBuilder> Constructors ButtonElementBuilder() Initializes a new instance of the ButtonElementBuilder class. Declaration public ButtonElementBuilder() ButtonElementBuilder(String, ButtonTheme, String, ButtonClickEventType) Initializes a new instance of the ButtonElementBuilder class. Declaration public ButtonElementBuilder(string text, ButtonTheme theme = ButtonTheme.Primary, string value = null, ButtonClickEventType click = ButtonClickEventType.None) Parameters String text The text of the button. ButtonTheme theme The theme of the button. String value The value of the button. ButtonClickEventType click The type of the click event. Fields MaxButtonTextLength Gets the maximum button text length allowed by Kook. Declaration public const int MaxButtonTextLength = null Field Value Int32 Properties Click Gets or sets the type of the click event. Declaration public ButtonClickEventType Click { get; set; } Property Value ButtonClickEventType A ButtonClickEventType that represents the type of the click event. Text Gets or sets the text element of the button. Declaration public IElementBuilder Text { get; set; } Property Value IElementBuilder An IElementBuilder that represents the text of the button. Remarks This property only takes a PlainTextElementBuilder or a KMarkdownElementBuilder . Theme Gets or sets the theme of the button. Declaration public ButtonTheme Theme { get; set; } Property Value ButtonTheme A ButtonTheme that represents the theme of the button. Type Gets the type of the element that this builder builds. Declaration public ElementType Type { get; } Property Value ElementType An ElementType that represents the type of element that this builder builds. Implements IElementBuilder.Type Value Gets or sets the value of the button. Declaration public string Value { get; set; } Property Value String A string that represents the value of the button. Remarks If the Click is set to ReturnValue , the value of the property will be returned when the button is clicked. Methods Build() Builds the ButtonElementBuilder into a ButtonElement . Declaration public ButtonElement Build() Returns ButtonElement A ButtonElement represents the built element object. Equals(ButtonElementBuilder) Determines whether the specified ButtonElementBuilder is equal to the current ButtonElementBuilder . Declaration public bool Equals(ButtonElementBuilder buttonElementBuilder) Parameters ButtonElementBuilder buttonElementBuilder The ButtonElementBuilder to compare with the current ButtonElementBuilder . Returns Boolean true if the specified ButtonElementBuilder is equal to the current ButtonElementBuilder ; otherwise, false . Equals(Object) Determines whether the specified is equal to the current ButtonElementBuilder . Declaration public override bool Equals(object obj) Parameters Object obj The to compare with the current ButtonElementBuilder . Returns Boolean true if the specified is equal to the current ButtonElementBuilder ; otherwise, false . GetHashCode() Declaration public override int GetHashCode() Returns Int32 WithClick(ButtonClickEventType) Sets the type of the event to be fired when the button is clicked in a ButtonElement . Declaration public ButtonElementBuilder WithClick(ButtonClickEventType click) Parameters ButtonClickEventType click The type of the event to be fired when the button is clicked. Returns ButtonElementBuilder The current builder. WithText(KMarkdownElementBuilder) Sets the text of a ButtonElement . Declaration public ButtonElementBuilder WithText(KMarkdownElementBuilder text) Parameters KMarkdownElementBuilder text The builder of a KMarkdownElement , which will be set as the text of the button. Returns ButtonElementBuilder The current builder. WithText(PlainTextElementBuilder) Sets the text of a ButtonElement . Declaration public ButtonElementBuilder WithText(PlainTextElementBuilder text) Parameters PlainTextElementBuilder text The builder of a PlainTextElement , which will be set as the text of the button. Returns ButtonElementBuilder The current builder. WithText(String, Boolean) Sets the text of a ButtonElement . Declaration public ButtonElementBuilder WithText(string text, bool isKMarkdown = false) Parameters String text A string to be set as the text of the button. Boolean isKMarkdown A bool indicating whether the text is in KMarkdown format; if true , the text will be set as a KMarkdownElement ; if false , the text will be set as a PlainTextElement . Returns ButtonElementBuilder The current builder. WithText<T>(Action<T>) Sets the text of a ButtonElement . Declaration public ButtonElementBuilder WithText<T>(Action<T> action = null) where T : IElementBuilder, new() Parameters Action <T> action The action to create a builder of an IElementBuilder , which will be set as the text of the button. The action must return a PlainTextElementBuilder or a KMarkdownElementBuilder . Returns ButtonElementBuilder The current builder. Type Parameters T WithTheme(ButtonTheme) Sets the theme of a ButtonElement . Declaration public ButtonElementBuilder WithTheme(ButtonTheme theme) Parameters ButtonTheme theme The theme to be set. Returns ButtonElementBuilder The current builder. WithValue(String) Sets the value of a ButtonElement . Declaration public ButtonElementBuilder WithValue(string value) Parameters String value The value to be set. Returns ButtonElementBuilder The current builder. Operators Equality(ButtonElementBuilder, ButtonElementBuilder) Determines whether the specified ButtonElementBuilder is equal to the current ButtonElementBuilder . Declaration public static bool operator ==(ButtonElementBuilder left, ButtonElementBuilder right) Parameters ButtonElementBuilder left ButtonElementBuilder right Returns Boolean true if the specified ButtonElementBuilder is equal to the current ButtonElementBuilder ; otherwise, false . Inequality(ButtonElementBuilder, ButtonElementBuilder) Determines whether the specified ButtonElementBuilder is not equal to the current ButtonElementBuilder . Declaration public static bool operator !=(ButtonElementBuilder left, ButtonElementBuilder right) Parameters ButtonElementBuilder left ButtonElementBuilder right Returns Boolean true if the specified ButtonElementBuilder is not equal to the current ButtonElementBuilder ; otherwise, false . Explicit Interface Implementations IElementBuilder.Build() Builds the IElementBuilder into an IElement . Declaration IElement IElementBuilder.Build() Returns IElement An IElement represents the built element object. Implements IElementBuilder.Build()"
  },
  "api/Kook.ButtonTheme.html": {
    "href": "api/Kook.ButtonTheme.html",
    "title": "Enum ButtonTheme | Kook.Net 文档",
    "keywords": "Enum ButtonTheme Specifies the theme of a ButtonElement . Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum ButtonTheme : int Danger The button is a danger button. Info The button is an info button. Primary The button is a primary button. Secondary The button is a secondary button. Success The button is a success button. Warning The button is a warning button."
  },
  "api/Kook.Cacheable-2.html": {
    "href": "api/Kook.Cacheable-2.html",
    "title": "Struct Cacheable<TEntity, TId> | Kook.Net 文档",
    "keywords": "Struct Cacheable<TEntity, TId> Represents a cached entity. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct Cacheable<TEntity, TId> where TEntity : IEntity<TId> where TId : IEquatable<TId> Type Parameters TEntity The type of entity that is cached. TId The type of this entity's ID. Properties HasValue Gets whether this entity is cached. Declaration public bool HasValue { get; } Property Value Boolean Id Gets the ID of this entity. Declaration public TId Id { get; } Property Value TId Value Gets the entity if it could be pulled from cache. Declaration public TEntity Value { get; } Property Value TEntity Remarks This value is not guaranteed to be set; in cases where the entity cannot be pulled from cache, it is null . Methods DownloadAsync() Downloads this entity to cache. Declaration public Task<TEntity> DownloadAsync() Returns Task <TEntity> A task that represents the asynchronous download operation. The task result contains the downloaded entity. Exceptions HttpException Thrown when used from a user account. GetOrDownloadAsync() Returns the cached entity if it exists; otherwise downloads it. Declaration public Task<TEntity> GetOrDownloadAsync() Returns Task <TEntity> A task that represents the asynchronous operation that attempts to get the entity via cache or to download the entity. The task result contains the downloaded entity. Exceptions HttpException Thrown when used from a user account."
  },
  "api/Kook.Cacheable-4.html": {
    "href": "api/Kook.Cacheable-4.html",
    "title": "Struct Cacheable<TCachedEntity, TDownloadableEntity, TRelationship, TId> | Kook.Net 文档",
    "keywords": "Struct Cacheable<TCachedEntity, TDownloadableEntity, TRelationship, TId> Represents a cached entity that can be downloaded. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct Cacheable<TCachedEntity, TDownloadableEntity, TRelationship, TId> where TCachedEntity : IEntity<TId>, TRelationship where TDownloadableEntity : IEntity<TId>, TRelationship where TId : IEquatable<TId> Type Parameters TCachedEntity The type of entity that is cached. TDownloadableEntity The type of entity that can be downloaded. TRelationship The common type of TCachedEntity and TDownloadableEntity . TId The type of the corresponding entity's ID. Properties HasValue Gets whether this entity is cached. Declaration public bool HasValue { get; } Property Value Boolean Id Gets the ID of this entity. Declaration public TId Id { get; } Property Value TId Value Gets the entity if it could be pulled from cache. Declaration public TCachedEntity Value { get; } Property Value TCachedEntity Remarks This value is not guaranteed to be set; in cases where the entity cannot be pulled from cache, it is null . Methods DownloadAsync() Downloads this entity. Declaration public Task<TDownloadableEntity> DownloadAsync() Returns Task <TDownloadableEntity> A task that represents the asynchronous download operation. The task result contains the downloaded entity. Exceptions HttpException Thrown when used from a user account. GetOrDownloadAsync() Returns the cached entity if it exists; otherwise downloads it. Declaration public Task<TRelationship> GetOrDownloadAsync() Returns Task <TRelationship> A task that represents the asynchronous operation that attempts to get the entity via cache or to download the entity. The task result contains the downloaded entity. Exceptions HttpException Thrown when used from a user account."
  },
  "api/Kook.CacheMode.html": {
    "href": "api/Kook.CacheMode.html",
    "title": "Enum CacheMode | Kook.Net 文档",
    "keywords": "Enum CacheMode Specifies the cache mode that should be used. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum CacheMode : int AllowDownload Allows the object to be downloaded if it does not exist in the current cache. CacheOnly Only allows the object to be pulled from the existing cache."
  },
  "api/Kook.Card.html": {
    "href": "api/Kook.Card.html",
    "title": "Class Card | Kook.Net 文档",
    "keywords": "Class Card Represents a card object seen in an IUserMessage . Inheritance Object Card Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class Card : object, ICard, IEquatable<Card> Properties Color Gets the color of this embed. Declaration public Color? Color { get; } Property Value Nullable < Color > A Color represents a color present on the side of the card, or null if none is set. ModuleCount Gets the number of the modules in this card. Declaration public int ModuleCount { get; } Property Value Int32 An int value that represents how many modules are in this card. Implements ICard.ModuleCount Modules Gets the modules in this card. Declaration public ImmutableArray<IModule> Modules { get; } Property Value ImmutableArray < IModule > An array of the modules of the card. Size Gets the size of this card. Declaration public CardSize Size { get; } Property Value CardSize A CardSize value that represents the size of this card. Theme Gets the theme of this card. Declaration public CardTheme Theme { get; } Property Value CardTheme A CardTheme value that represents the theme of this card. Type Gets the type of the card. Declaration public CardType Type { get; } Property Value CardType A CardType value that represents the type of the card. Implements ICard.Type Methods Equals(Card) Determines whether the specified Card is equal to the current Card . Declaration public bool Equals(Card card) Parameters Card card The Card to compare with the current Card . Returns Boolean true if the specified Card is equal to the current Card ; otherwise, false . Equals(Object) Determines whether the specified object is equal to the current Card . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current Card . Returns Boolean true if the specified Card is equal to the current Card ; otherwise, false . Remarks If the object passes is an Card , Equals(Card) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 Operators Equality(Card, Card) Determines whether the specified Card is equal to the current Card . Declaration public static bool operator ==(Card left, Card right) Parameters Card left Card right Returns Boolean true if the specified Card is equal to the current Card ; otherwise, false . Inequality(Card, Card) Determines whether the specified Card is not equal to the current Card . Declaration public static bool operator !=(Card left, Card right) Parameters Card left Card right Returns Boolean true if the specified Card is not equal to the current Card ; otherwise, false . Extension Methods CardExtensions.ToBuilder(Card)"
  },
  "api/Kook.CardBuilder.html": {
    "href": "api/Kook.CardBuilder.html",
    "title": "Class CardBuilder | Kook.Net 文档",
    "keywords": "Class CardBuilder Represents a builder class for creating a Card . Inheritance Object CardBuilder Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class CardBuilder : object, ICardBuilder, IEquatable<CardBuilder> Constructors CardBuilder() Initializes a new instance of the CardBuilder class. Declaration public CardBuilder() CardBuilder(CardTheme, Nullable<Color>, CardSize, List<IModuleBuilder>) Initializes a new instance of the CardBuilder class with the specified parameters. Declaration public CardBuilder(CardTheme theme, Color? color = null, CardSize size = CardSize.Large, List<IModuleBuilder> modules = null) Parameters CardTheme theme The theme of the card. Nullable < Color > color The color displayed along the left side of the card. CardSize size The size of the card. List < IModuleBuilder > modules The modules in the card. Properties Color Gets or sets the color displayed along the left side of the card. Declaration public Color? Color { get; set; } Property Value Nullable < Color > A Color value that represents the color displayed along the left side of the card. Modules Gets or sets the modules in the card. Declaration public List<IModuleBuilder> Modules { get; set; } Property Value List < IModuleBuilder > A containing the modules in the card. Size Gets or sets the size of the card. Declaration public CardSize Size { get; set; } Property Value CardSize A CardSize value that represents the size of the card. Theme Gets or sets the theme of the card. Declaration public CardTheme Theme { get; set; } Property Value CardTheme A CardTheme value that represents the theme of the card. Type Gets the type of the card. Declaration public CardType Type { get; } Property Value CardType A CardType value that represents the type of the card. Implements ICardBuilder.Type Methods AddModule(IModuleBuilder) Adds a module to the card. Declaration public CardBuilder AddModule(IModuleBuilder module) Parameters IModuleBuilder module An IModuleBuilder that represents the module to be added to the card. Returns CardBuilder The current builder. AddModule<T>(Action<T>) Adds a module to the card. Declaration public CardBuilder AddModule<T>(Action<T> action = null) where T : IModuleBuilder, new() Parameters Action <T> action The action to adds a module to the card. Returns CardBuilder The current builder. Type Parameters T Build() Builds the CardBuilder into a Card . Declaration public Card Build() Returns Card A KMarkdownElement represents the built element object. Equals(CardBuilder) Determines whether the specified CardBuilder is equal to the current CardBuilder . Declaration public bool Equals(CardBuilder cardBuilder) Parameters CardBuilder cardBuilder The CardBuilder to compare with the current CardBuilder . Returns Boolean true if the specified CardBuilder is equal to the current CardBuilder ; otherwise, false . Equals(Object) Determines whether the specified is equal to the current CardBuilder . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current CardBuilder . Returns Boolean true if the specified object is equal to the current CardBuilder ; otherwise, false . GetHashCode() Declaration public override int GetHashCode() Returns Int32 WithColor(Color) Sets the color displayed along the left side of the card. Declaration public CardBuilder WithColor(Color color) Parameters Color color A Color value that represents the color displayed along the left side of the card to be set. Returns CardBuilder The current builder. WithSize(CardSize) Sets the size of the card. Declaration public CardBuilder WithSize(CardSize size) Parameters CardSize size A CardSize value that represents the size of the card to be set. Returns CardBuilder The current builder. WithTheme(CardTheme) Sets the theme of the card. Declaration public CardBuilder WithTheme(CardTheme theme) Parameters CardTheme theme A CardTheme value that represents the theme of the card to be set. Returns CardBuilder The current builder. Operators Equality(CardBuilder, CardBuilder) Determines whether the specified CardBuilder is equal to the current CardBuilder . Declaration public static bool operator ==(CardBuilder left, CardBuilder right) Parameters CardBuilder left CardBuilder right Returns Boolean true if the specified CardBuilder is equal to the current CardBuilder ; otherwise, false . Inequality(CardBuilder, CardBuilder) Determines whether the specified CardBuilder is not equal to the current CardBuilder . Declaration public static bool operator !=(CardBuilder left, CardBuilder right) Parameters CardBuilder left CardBuilder right Returns Boolean true if the specified CardBuilder is not equal to the current CardBuilder ; otherwise, false . Explicit Interface Implementations ICardBuilder.Build() Builds the ICardBuilder into an ICard . Declaration ICard ICardBuilder.Build() Returns ICard An ICard represents the built card object. Implements ICardBuilder.Build()"
  },
  "api/Kook.CardExtensions.html": {
    "href": "api/Kook.CardExtensions.html",
    "title": "Class CardExtensions | Kook.Net 文档",
    "keywords": "Class CardExtensions Provides extension methods for IElement , IModule and ICard . Inheritance Object CardExtensions Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public static class CardExtensions : object Methods ToBuilder(ActionGroupModule) Converts the ActionGroupModule to a ActionGroupModuleBuilder with the same properties. Declaration public static ActionGroupModuleBuilder ToBuilder(this ActionGroupModule entity) Parameters ActionGroupModule entity Returns ActionGroupModuleBuilder ToBuilder(AudioModule) Converts the AudioModule to a AudioModuleBuilder with the same properties. Declaration public static AudioModuleBuilder ToBuilder(this AudioModule entity) Parameters AudioModule entity Returns AudioModuleBuilder ToBuilder(ButtonElement) Converts the ButtonElement to a ButtonElementBuilder with the same properties. Declaration public static ButtonElementBuilder ToBuilder(this ButtonElement entity) Parameters ButtonElement entity Returns ButtonElementBuilder ToBuilder(Card) Converts the Card to a CardBuilder with the same properties. Declaration public static CardBuilder ToBuilder(this Card builder) Parameters Card builder Returns CardBuilder ToBuilder(ContainerModule) Converts the ContainerModule to a ContainerModuleBuilder with the same properties. Declaration public static ContainerModuleBuilder ToBuilder(this ContainerModule entity) Parameters ContainerModule entity Returns ContainerModuleBuilder ToBuilder(ContextModule) Converts the ContextModule to a ContextModuleBuilder with the same properties. Declaration public static ContextModuleBuilder ToBuilder(this ContextModule entity) Parameters ContextModule entity Returns ContextModuleBuilder ToBuilder(CountdownModule) Converts the CountdownModule to a CountdownModuleBuilder with the same properties. Declaration public static CountdownModuleBuilder ToBuilder(this CountdownModule entity) Parameters CountdownModule entity Returns CountdownModuleBuilder ToBuilder(DividerModule) Converts the DividerModule to a DividerModuleBuilder with the same properties. Declaration public static DividerModuleBuilder ToBuilder(this DividerModule entity) Parameters DividerModule entity Returns DividerModuleBuilder ToBuilder(FileModule) Converts the FileModule to a FileModuleBuilder with the same properties. Declaration public static FileModuleBuilder ToBuilder(this FileModule entity) Parameters FileModule entity Returns FileModuleBuilder ToBuilder(HeaderModule) Converts the HeaderModule to a HeaderModuleBuilder with the same properties. Declaration public static HeaderModuleBuilder ToBuilder(this HeaderModule entity) Parameters HeaderModule entity Returns HeaderModuleBuilder ToBuilder(ICard) Converts the ICard to a ICardBuilder with the same properties. Declaration public static ICardBuilder ToBuilder(this ICard builder) Parameters ICard builder Returns ICardBuilder ToBuilder(IElement) Converts the IElement to a IElementBuilder with the same properties. Declaration public static IElementBuilder ToBuilder(this IElement element) Parameters IElement element Returns IElementBuilder ToBuilder(ImageElement) Converts the ImageElement to a ImageElementBuilder with the same properties. Declaration public static ImageElementBuilder ToBuilder(this ImageElement entity) Parameters ImageElement entity Returns ImageElementBuilder ToBuilder(ImageGroupModule) Converts the ImageGroupModule to a ImageGroupModuleBuilder with the same properties. Declaration public static ImageGroupModuleBuilder ToBuilder(this ImageGroupModule entity) Parameters ImageGroupModule entity Returns ImageGroupModuleBuilder ToBuilder(IModule) Converts the IModule to a IModuleBuilder with the same properties. Declaration public static IModuleBuilder ToBuilder(this IModule entity) Parameters IModule entity Returns IModuleBuilder ToBuilder(InviteModule) Converts the InviteModule to a InviteModuleBuilder with the same properties. Declaration public static InviteModuleBuilder ToBuilder(this InviteModule entity) Parameters InviteModule entity Returns InviteModuleBuilder ToBuilder(KMarkdownElement) Converts the KMarkdownElement to a KMarkdownElementBuilder with the same properties. Declaration public static KMarkdownElementBuilder ToBuilder(this KMarkdownElement entity) Parameters KMarkdownElement entity Returns KMarkdownElementBuilder ToBuilder(ParagraphStruct) Converts the ParagraphStruct to a ParagraphStructBuilder with the same properties. Declaration public static ParagraphStructBuilder ToBuilder(this ParagraphStruct entity) Parameters ParagraphStruct entity Returns ParagraphStructBuilder ToBuilder(PlainTextElement) Converts the PlainTextElement to a PlainTextElementBuilder with the same properties. Declaration public static PlainTextElementBuilder ToBuilder(this PlainTextElement entity) Parameters PlainTextElement entity Returns PlainTextElementBuilder ToBuilder(SectionModule) Converts the SectionModule to a SectionModuleBuilder with the same properties. Declaration public static SectionModuleBuilder ToBuilder(this SectionModule entity) Parameters SectionModule entity Returns SectionModuleBuilder ToBuilder(VideoModule) Converts the VideoModule to a VideoModuleBuilder with the same properties. Declaration public static VideoModuleBuilder ToBuilder(this VideoModule entity) Parameters VideoModule entity Returns VideoModuleBuilder"
  },
  "api/Kook.CardSize.html": {
    "href": "api/Kook.CardSize.html",
    "title": "Enum CardSize | Kook.Net 文档",
    "keywords": "Enum CardSize Specifies the size of a card. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum CardSize : int Large The card is a large card. Small The card is a small card."
  },
  "api/Kook.CardTheme.html": {
    "href": "api/Kook.CardTheme.html",
    "title": "Enum CardTheme | Kook.Net 文档",
    "keywords": "Enum CardTheme Specifies the theme of the card. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum CardTheme : uint Danger The card shows like an error message. Info The card shows like an info message. None The card shows like a dark message. Primary The card shows like a regular message. Secondary The card shows like a light message. Success The card shows like a success message. Warning The card shows like a warning message."
  },
  "api/Kook.CardType.html": {
    "href": "api/Kook.CardType.html",
    "title": "Enum CardType | Kook.Net 文档",
    "keywords": "Enum CardType Specifies the type of the card. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum CardType : int Card The card is a normal card."
  },
  "api/Kook.ChannelExtensions.html": {
    "href": "api/Kook.ChannelExtensions.html",
    "title": "Class ChannelExtensions | Kook.Net 文档",
    "keywords": "Class ChannelExtensions Provides extension methods for IChannel . Inheritance Object ChannelExtensions Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public static class ChannelExtensions : object Methods GetChannelType(IChannel) Attempts to get the ChannelType based off of the channel's interfaces. Declaration public static ChannelType? GetChannelType(this IChannel channel) Parameters IChannel channel The channel to get the type of. Returns Nullable < ChannelType > The ChannelType of the channel if found, otherwise null . GetJumpUrl(IChannel) Gets a URL that jumps to the channel. Declaration public static string GetJumpUrl(this IChannel channel) Parameters IChannel channel The channel to jump to. Returns String A string that contains a URL for jumping to the message in chat."
  },
  "api/Kook.ChannelPermission.html": {
    "href": "api/Kook.ChannelPermission.html",
    "title": "Enum ChannelPermission | Kook.Net 文档",
    "keywords": "Enum ChannelPermission Represents a permission can be granted to a channel. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum ChannelPermission : uint AddReactions Allows for the addition of reactions to messages. AttachFiles Allows for uploading images and files. Connect Allows for joining of a voice channel. CreateInvites Allows creation of invites. DeafenMembers Allows for deafening of members in a voice channel. ManageChannels Allows management and editing of channels. ManageMessages Allows for deletion of other users messages. ManageRoles Allows management and editing of roles. ManageVoice Allows for disconnection of members, and moving of members between voice channels. MentionEveryone Allows for using the everyone mention tag to notify all users in a channel, and the online mention tag to notify all online users in a channel. MuteMembers Allows for muting members in a voice channel. PassiveConnect Limits the user to connecting to a voice channel only when the user is invited or moved by others. PlaySoundtrack Allows for playing soundtracks in a voice channel. SendMessages Allows for sending messages in a channel ShareScreen Allows for screen share. Speak Allows for speaking in a voice channel. UseVoiceActivity Allows for speaking in voice a channel without having to press the speaking key. ViewChannel Allows guild members to view a channel, which includes reading messages in text channels."
  },
  "api/Kook.ChannelPermissions.html": {
    "href": "api/Kook.ChannelPermissions.html",
    "title": "Struct ChannelPermissions | Kook.Net 文档",
    "keywords": "Struct ChannelPermissions Represents a set of permissions for a channel. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct ChannelPermissions Constructors ChannelPermissions(Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>) Creates a new ChannelPermissions with the provided permissions. Declaration public ChannelPermissions(bool? createInvites, bool? manageChannels, bool? manageRoles, bool? viewChannel, bool? sendMessages, bool? manageMessages, bool? attachFiles, bool? connect, bool? manageVoice, bool? mentionEveryone, bool? addReactions, bool? passiveConnect, bool? useVoiceActivity, bool? speak, bool? deafenMembers, bool? muteMembers, bool? playSoundtrack, bool? shareScreen) Parameters Nullable < Boolean > createInvites Nullable < Boolean > manageChannels Nullable < Boolean > manageRoles Nullable < Boolean > viewChannel Nullable < Boolean > sendMessages Nullable < Boolean > manageMessages Nullable < Boolean > attachFiles Nullable < Boolean > connect Nullable < Boolean > manageVoice Nullable < Boolean > mentionEveryone Nullable < Boolean > addReactions Nullable < Boolean > passiveConnect Nullable < Boolean > useVoiceActivity Nullable < Boolean > speak Nullable < Boolean > deafenMembers Nullable < Boolean > muteMembers Nullable < Boolean > playSoundtrack Nullable < Boolean > shareScreen ChannelPermissions(UInt64) Creates a new ChannelPermissions with the provided packed value. Declaration public ChannelPermissions(ulong rawValue) Parameters UInt64 rawValue Fields Category Gets a ChannelPermissions that grants all permissions for category channels. Declaration public static readonly ChannelPermissions Category Field Value ChannelPermissions DM Gets a ChannelPermissions that grants all permissions for direct message channels. Declaration public static readonly ChannelPermissions DM Field Value ChannelPermissions None Gets a blank ChannelPermissions that grants no permissions. Declaration public static readonly ChannelPermissions None Field Value ChannelPermissions Text Gets a ChannelPermissions that grants all permissions for text channels. Declaration public static readonly ChannelPermissions Text Field Value ChannelPermissions Voice Gets a ChannelPermissions that grants all permissions for voice channels. Declaration public static readonly ChannelPermissions Voice Field Value ChannelPermissions Properties AddReactions If true , a user may add reactions. Declaration public bool AddReactions { get; } Property Value Boolean AttachFiles If true , a user may send files. Declaration public bool AttachFiles { get; } Property Value Boolean Connect If true , a user may connect to a voice channel. Declaration public bool Connect { get; } Property Value Boolean CreateInvites If true , a user may create invites. Declaration public bool CreateInvites { get; } Property Value Boolean DeafenMembers If true , a user may deafen users. Declaration public bool DeafenMembers { get; } Property Value Boolean ManageChannels If true , a user may view and revoke invites. Declaration public bool ManageChannels { get; } Property Value Boolean ManageMessages If true , a user may delete messages. Declaration public bool ManageMessages { get; } Property Value Boolean ManageRoles If true , a user may adjust roles. Declaration public bool ManageRoles { get; } Property Value Boolean ManageVoice If true , a user may kick other users from voice channels, and move other users between voice channels. Declaration public bool ManageVoice { get; } Property Value Boolean MentionEveryone If true , a user may mention all users. Declaration public bool MentionEveryone { get; } Property Value Boolean MuteMembers If true , a user may mute users. Declaration public bool MuteMembers { get; } Property Value Boolean PassiveConnect If true , a user may connect to a voice channel only when the user is invited or moved by other users. Declaration public bool PassiveConnect { get; } Property Value Boolean PlaySoundtrack If true , a user may play soundtracks in a voice channel. Declaration public bool PlaySoundtrack { get; } Property Value Boolean RawValue Gets a packed value representing all the permissions in this ChannelPermissions . Declaration public ulong RawValue { get; } Property Value UInt64 SendMessages If true , a user may send messages. Declaration public bool SendMessages { get; } Property Value Boolean ShareScreen If true , a user may share screen in a voice channel. Declaration public bool ShareScreen { get; } Property Value Boolean Speak If true , a user may speak in a voice channel. Declaration public bool Speak { get; } Property Value Boolean UseVoiceActivity If true , a user may use voice activation. Declaration public bool UseVoiceActivity { get; } Property Value Boolean ViewChannel If true , a user may view channels. Declaration public bool ViewChannel { get; } Property Value Boolean Methods All(IChannel) Gets a ChannelPermissions that grants all permissions for a given channel type. Declaration public static ChannelPermissions All(IChannel channel) Parameters IChannel channel Returns ChannelPermissions Has(ChannelPermission) Returns a value that indicates if a specific ChannelPermission is enabled in these permissions. Declaration public bool Has(ChannelPermission permission) Parameters ChannelPermission permission The permission value to check for. Returns Boolean true if the permission is enabled, false otherwise. Modify(Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>) Creates a new ChannelPermissions from this one, changing the provided non-null permissions. Declaration public ChannelPermissions Modify(bool? createInvites = null, bool? manageChannels = null, bool? manageRoles = null, bool? viewChannel = null, bool? sendMessages = null, bool? manageMessages = null, bool? attachFiles = null, bool? connect = null, bool? manageVoice = null, bool? mentionEveryone = null, bool? addReactions = null, bool? passiveConnect = null, bool? useVoiceActivity = null, bool? speak = null, bool? deafenMembers = null, bool? muteMembers = null, bool? playSoundtrack = null, bool? shareScreen = null) Parameters Nullable < Boolean > createInvites Nullable < Boolean > manageChannels Nullable < Boolean > manageRoles Nullable < Boolean > viewChannel Nullable < Boolean > sendMessages Nullable < Boolean > manageMessages Nullable < Boolean > attachFiles Nullable < Boolean > connect Nullable < Boolean > manageVoice Nullable < Boolean > mentionEveryone Nullable < Boolean > addReactions Nullable < Boolean > passiveConnect Nullable < Boolean > useVoiceActivity Nullable < Boolean > speak Nullable < Boolean > deafenMembers Nullable < Boolean > muteMembers Nullable < Boolean > playSoundtrack Nullable < Boolean > shareScreen Returns ChannelPermissions ToList() Returns a containing all of the ChannelPermission flags that are enabled. Declaration public List<ChannelPermission> ToList() Returns List < ChannelPermission > A containing ChannelPermission flags. Empty if none are enabled. ToString() Gets the raw value of the permissions. Declaration public override string ToString() Returns String"
  },
  "api/Kook.ChannelType.html": {
    "href": "api/Kook.ChannelType.html",
    "title": "Enum ChannelType | Kook.Net 文档",
    "keywords": "Enum ChannelType Specifies the type of a guild channel. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum ChannelType : int Category Specifies that the channel is a guild category channel. DM Specifies that the channel is a direct message channel. Text Specifies that the channel is a guild text channel. Unspecified Specifies that the type of the channel is unknown. Voice Specifies that the channel is a guild voice channel."
  },
  "api/Kook.ClientType.html": {
    "href": "api/Kook.ClientType.html",
    "title": "Enum ClientType | Kook.Net 文档",
    "keywords": "Enum ClientType Defines the types of clients a user can be active on. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum ClientType : int Android The user is active using the Android application. iOS The user is active using the iOS application. WebSocket The user is active using a WebSocket connection to the server."
  },
  "api/Kook.Color.html": {
    "href": "api/Kook.Color.html",
    "title": "Struct Color | Kook.Net 文档",
    "keywords": "Struct Color Represents a color used in Kook. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct Color Constructors Color(Byte, Byte, Byte) Initializes a Color struct with the given RGB bytes. Declaration public Color(byte r, byte g, byte b) Parameters Byte r The byte that represents the red color. Byte g The byte that represents the green color. Byte b The byte that represents the blue color. Examples The following will create a color that has a value of #607D8B . Color darkGrey = new Color((byte)0b_01100000, (byte)0b_01111101, (byte)0b_10001011); Color(Int32, Int32, Int32) Initializes a Color struct with the given RGB value. Declaration public Color(int r, int g, int b) Parameters Int32 r The value that represents the red color. Must be within 0~255. Int32 g The value that represents the green color. Must be within 0~255. Int32 b The value that represents the blue color. Must be within 0~255. Examples The following will create a color that has a value of #607D8B . Color darkGrey = new Color(96, 125, 139); Color(Single, Single, Single) Initializes a Color struct with the given RGB float value. Declaration public Color(float r, float g, float b) Parameters Single r The value that represents the red color. Must be within 0~1. Single g The value that represents the green color. Must be within 0~1. Single b The value that represents the blue color. Must be within 0~1. Examples The following will create a color that has a value of #607C8C . Color darkGrey = new Color(0.38f, 0.49f, 0.55f); Color(UInt32) Initializes a Color struct with the given raw value. Declaration public Color(uint rawValue) Parameters UInt32 rawValue The raw value of the color (e.g. 0x607D8B ). Examples The following will create a color that has a hex value of #607D8B . Color darkGrey = new Color(0x607D8B); Fields Blue Gets the blue color value. Declaration public static readonly Color Blue Field Value Color A color struct with the hex value of 3498DB. See http://www.color-hex.com/color/3498DB DarkBlue Gets the dark blue color value. Declaration public static readonly Color DarkBlue Field Value Color A color struct with the hex value of 206694. See http://www.color-hex.com/color/206694 DarkerGrey Gets the darker grey color value. Declaration public static readonly Color DarkerGrey Field Value Color A color struct with the hex value of 3A4B53. See http://www.color-hex.com/color/3A4B53 DarkGreen Gets the dark green color value. Declaration public static readonly Color DarkGreen Field Value Color A color struct with the hex value of 1F8B4C. See http://www.color-hex.com/color/1F8B4C DarkGrey Gets the dark grey color value. Declaration public static readonly Color DarkGrey Field Value Color A color struct with the hex value of 607D8B. See http://www.color-hex.com/color/607D8B DarkMagenta Gets the dark magenta color value. Declaration public static readonly Color DarkMagenta Field Value Color A color struct with the hex value of AD1457. See http://www.color-hex.com/color/AD1457 DarkOrange Gets the dark orange color value. Declaration public static readonly Color DarkOrange Field Value Color A color struct with the hex value of A84300. See http://www.color-hex.com/color/A84300 DarkPurple Gets the dark purple color value. Declaration public static readonly Color DarkPurple Field Value Color A color struct with the hex value of 71368A. See http://www.color-hex.com/color/71368A DarkRed Gets the dark red color value. Declaration public static readonly Color DarkRed Field Value Color A color struct with the hex value of 992D22. See http://www.color-hex.com/color/992D22 DarkTeal Gets the dark teal color value. Declaration public static readonly Color DarkTeal Field Value Color A color struct with the hex value of 11806A. See http://www.color-hex.com/color/11806A Default Gets the default user color value. Declaration public static readonly Color Default Field Value Color Gold Gets the gold color value. Declaration public static readonly Color Gold Field Value Color A color struct with the hex value of F1C40F. See http://www.color-hex.com/color/F1C40F Green Gets the green color value. Declaration public static readonly Color Green Field Value Color A color struct with the hex value of 2ECC71. See http://www.color-hex.com/color/2ECC71 Grey Gets the grey color value. Declaration public static readonly Color Grey Field Value Color A color struct with the hex value of 666D71. See http://www.color-hex.com/color/666D71 LightGrey Gets the light grey color value. Declaration public static readonly Color LightGrey Field Value Color A color struct with the hex value of 95A5A6. See http://www.color-hex.com/color/95A5A6 LightOrange Gets the light orange color value. Declaration public static readonly Color LightOrange Field Value Color A color struct with the hex value of C27C0E. See http://www.color-hex.com/color/C27C0E Magenta Gets the magenta color value. Declaration public static readonly Color Magenta Field Value Color A color struct with the hex value of E91E63. See http://www.color-hex.com/color/E91E63 MaxDecimalValue Gets the max decimal value of color. Declaration public const uint MaxDecimalValue = null Field Value UInt32 Orange Gets the orange color value. Declaration public static readonly Color Orange Field Value Color A color struct with the hex value of E67E22. See http://www.color-hex.com/color/E67E22 Purple Gets the purple color value. Declaration public static readonly Color Purple Field Value Color A color struct with the hex value of 9B59B6. See http://www.color-hex.com/color/9B59B6 Red Gets the red color value. Declaration public static readonly Color Red Field Value Color A color struct with the hex value of E74C3C. See http://www.color-hex.com/color/E74C3C Teal Gets the teal color value. Declaration public static readonly Color Teal Field Value Color A color struct with the hex value of 1ABC9C. See http://www.color-hex.com/color/1ABC9C Properties B Gets the blue component for this color. Declaration public byte B { get; } Property Value Byte G Gets the green component for this color. Declaration public byte G { get; } Property Value Byte R Gets the red component for this color. Declaration public byte R { get; } Property Value Byte RawValue Gets the encoded value for this color. Declaration public uint RawValue { get; } Property Value UInt32 Remarks This value is encoded as an unsigned integer value. The most-significant 8 bits contain the red value, the middle 8 bits contain the green value, and the least-significant 8 bits contain the blue value. Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean GetHashCode() Declaration public override int GetHashCode() Returns Int32 ToString() Gets the hexadecimal representation of the color (e.g. #000ccc ). Declaration public override string ToString() Returns String A hexadecimal string of the color. Operators Equality(Color, Color) Determines whether the specified Color is equal to this instance. Declaration public static bool operator ==(Color lhs, Color rhs) Parameters Color lhs Color rhs Returns Boolean true if the specified Color is equal to this instance; otherwise, false . Explicit(System.Drawing.Color to Color) Converts the given .NET standard to a Kook.Net-defined Color . Declaration public static explicit operator Color(System.Drawing.Color color) Parameters System.Drawing.Color color The .NET standard to convert. Returns Color The Kook.Net-defined Color that represents the given .NET standard . Implicit(Color to System.Drawing.Color) Converts the given Kook.Net-defined Color to a .NET standard . Declaration public static implicit operator System.Drawing.Color(Color color) Parameters Color color The Kook.Net-defined Color to convert. Returns System.Drawing.Color The .NET standard that represents the given Kook.Net-defined Color . Implicit(Color to UInt32) Converts the given Color to its raw value of . Declaration public static implicit operator uint (Color color) Parameters Color color The Color to convert. Returns UInt32 The raw value of the given Color . Implicit(UInt32 to Color) Converts the given raw value of to a Color . Declaration public static implicit operator Color(uint rawValue) Parameters UInt32 rawValue The raw value of the color. Returns Color The Color that represents the given raw value. Inequality(Color, Color) Determines whether the specified Color is not equal to this instance. Declaration public static bool operator !=(Color lhs, Color rhs) Parameters Color lhs Color rhs Returns Boolean true if the specified Color is not equal to this instance; otherwise, false ."
  },
  "api/Kook.ColorType.html": {
    "href": "api/Kook.ColorType.html",
    "title": "Enum ColorType | Kook.Net 文档",
    "keywords": "Enum ColorType Represents the type of color a role has. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum ColorType : ushort Gradient The color is a gradient. Solid The color is a solid color."
  },
  "api/Kook.Commands.AliasAttribute.html": {
    "href": "api/Kook.Commands.AliasAttribute.html",
    "title": "Class AliasAttribute | Kook.Net 文档",
    "keywords": "Class AliasAttribute Marks the aliases for a command. Inheritance Object AliasAttribute Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class AliasAttribute : Attribute Remarks This attribute allows a command to have one or multiple aliases. In other words, the base command can have multiple aliases when triggering the command itself, giving the end-user more freedom of choices when giving hot-words to trigger the desired command. See the example for a better illustration. Examples In the following example, the command can be triggered with the base name, \"stats\", or either \"stat\" or \"info\". [Command(\"stats\")] [Alias(\"stat\", \"info\")] public async Task GetStatsAsync(IUser user) { // ...pull stats } Constructors AliasAttribute(String[]) Creates a new AliasAttribute with the given aliases. Declaration public AliasAttribute(params string[] aliases) Parameters String [] aliases Properties Aliases Gets the aliases which have been defined for the command. Declaration public string[] Aliases { get; } Property Value String []"
  },
  "api/Kook.Commands.Builders.CommandBuilder.html": {
    "href": "api/Kook.Commands.Builders.CommandBuilder.html",
    "title": "Class CommandBuilder | Kook.Net 文档",
    "keywords": "Class CommandBuilder Represents a command builder. Inheritance Object CommandBuilder Namespace : Kook.Commands.Builders Assembly : Kook.Net.Commands.dll Syntax public class CommandBuilder : object Properties Aliases Gets the aliases of this command. Declaration public IReadOnlyList<string> Aliases { get; } Property Value IReadOnlyList < String > Attributes Gets the attributes of this command. Declaration public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList < Attribute > IgnoreExtraArgs Gets or sets whether the extra arguments should be ignored. Declaration public bool IgnoreExtraArgs { get; set; } Property Value Boolean Module Gets the module builder that this command builder belongs to. Declaration public ModuleBuilder Module { get; } Property Value ModuleBuilder Name Gets or sets the name of this command. Declaration public string Name { get; set; } Property Value String Parameters Gets the parameters of this command. Declaration public IReadOnlyList<ParameterBuilder> Parameters { get; } Property Value IReadOnlyList < ParameterBuilder > Preconditions Gets the preconditions of this command. Declaration public IReadOnlyList<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList < PreconditionAttribute > PrimaryAlias Gets or sets the primary alias of this command. Declaration public string PrimaryAlias { get; set; } Property Value String Priority Gets or sets the priority of this command. Declaration public int Priority { get; set; } Property Value Int32 Remarks Gets or sets the remarks of this command. Declaration public string Remarks { get; set; } Property Value String RunMode Gets or sets the run mode of this command. Declaration public RunMode RunMode { get; set; } Property Value RunMode Summary Gets or sets the summary of this command. Declaration public string Summary { get; set; } Property Value String Methods AddAliases(String[]) Adds aliases to this command. Declaration public CommandBuilder AddAliases(params string[] aliases) Parameters String [] aliases An array containing the aliases to add. Returns CommandBuilder This command builder. AddAttributes(Attribute[]) Adds attributes to this command. Declaration public CommandBuilder AddAttributes(params Attribute[] attributes) Parameters Attribute [] attributes An array containing the attributes to add. Returns CommandBuilder This command builder. AddParameter(String, Type, Action<ParameterBuilder>) Adds a parameter to this command. Declaration public CommandBuilder AddParameter(string name, Type type, Action<ParameterBuilder> createFunc) Parameters String name The name of the parameter. Type type The type of the parameter. Action < ParameterBuilder > createFunc An action delegate that is invoked to create the parameter. Returns CommandBuilder This command builder. AddParameter<T>(String, Action<ParameterBuilder>) Adds a parameter to this command. Declaration public CommandBuilder AddParameter<T>(string name, Action<ParameterBuilder> createFunc) Parameters String name The name of the parameter. Action < ParameterBuilder > createFunc An action delegate that is invoked to create the parameter. Returns CommandBuilder This command builder. Type Parameters T The type of the parameter. AddPrecondition(PreconditionAttribute) Adds a precondition to this command. Declaration public CommandBuilder AddPrecondition(PreconditionAttribute precondition) Parameters PreconditionAttribute precondition The precondition to add. Returns CommandBuilder This command builder. WithName(String) Sets the name of this command. Declaration public CommandBuilder WithName(string name) Parameters String name The name of this command. Returns CommandBuilder This command builder. WithPriority(Int32) Sets the priority of this command. Declaration public CommandBuilder WithPriority(int priority) Parameters Int32 priority The priority of this command. Returns CommandBuilder This command builder. WithRemarks(String) Sets the remarks of this command. Declaration public CommandBuilder WithRemarks(string remarks) Parameters String remarks The remarks of this command. Returns CommandBuilder This command builder. WithRunMode(RunMode) Sets the run mode of this command. Declaration public CommandBuilder WithRunMode(RunMode runMode) Parameters RunMode runMode The run mode of this command. Returns CommandBuilder This command builder. WithSummary(String) Sets the summary of this command. Declaration public CommandBuilder WithSummary(string summary) Parameters String summary The summary of this command. Returns CommandBuilder This command builder."
  },
  "api/Kook.Commands.Builders.html": {
    "href": "api/Kook.Commands.Builders.html",
    "title": "Namespace Kook.Commands.Builders | Kook.Net 文档",
    "keywords": "Namespace Kook.Commands.Builders Classes CommandBuilder Represents a command builder. ModuleBuilder Represents a module builder. ParameterBuilder Represents a parameter builder."
  },
  "api/Kook.Commands.Builders.ModuleBuilder.html": {
    "href": "api/Kook.Commands.Builders.ModuleBuilder.html",
    "title": "Class ModuleBuilder | Kook.Net 文档",
    "keywords": "Class ModuleBuilder Represents a module builder. Inheritance Object ModuleBuilder Namespace : Kook.Commands.Builders Assembly : Kook.Net.Commands.dll Syntax public class ModuleBuilder : object Properties Aliases Gets a read-only list of aliases that this module builder contains. Declaration public IReadOnlyList<string> Aliases { get; } Property Value IReadOnlyList < String > Attributes Gets a read-only list of attributes that this module builder contains. Declaration public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList < Attribute > Commands Gets a read-only list of commands that this module builder contains. Declaration public IReadOnlyList<CommandBuilder> Commands { get; } Property Value IReadOnlyList < CommandBuilder > Group Gets or sets the group of this module. Declaration public string Group { get; set; } Property Value String Modules Gets a read-only list of submodules that this module builder contains. Declaration public IReadOnlyList<ModuleBuilder> Modules { get; } Property Value IReadOnlyList < ModuleBuilder > Name Gets or sets the name of this module. Declaration public string Name { get; set; } Property Value String Parent Gets the parent module builder that this module builder belongs to. Declaration public ModuleBuilder Parent { get; } Property Value ModuleBuilder Preconditions Gets a read-only list of preconditions that this module builder contains. Declaration public IReadOnlyList<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList < PreconditionAttribute > Remarks Gets or sets the remarks of this module. Declaration public string Remarks { get; set; } Property Value String Service Gets the command service that this module builder belongs to. Declaration public CommandService Service { get; } Property Value CommandService Summary Gets or sets the summary of this module. Declaration public string Summary { get; set; } Property Value String Methods AddAliases(String[]) Adds aliases to this module. Declaration public ModuleBuilder AddAliases(params string[] aliases) Parameters String [] aliases An array of aliases to add to this module. Returns ModuleBuilder This module builder. AddAttributes(Attribute[]) Adds a precondition to this module. Declaration public ModuleBuilder AddAttributes(params Attribute[] attributes) Parameters Attribute [] attributes An array of attributes to add to this module. Returns ModuleBuilder This module builder. AddCommand(String, Func<ICommandContext, Object[], IServiceProvider, CommandInfo, Task>, Action<CommandBuilder>) Adds a command to this module. Declaration public ModuleBuilder AddCommand(string primaryAlias, Func<ICommandContext, object[], IServiceProvider, CommandInfo, Task> callback, Action<CommandBuilder> createFunc) Parameters String primaryAlias The primary alias of this command. Func < ICommandContext , Object [], IServiceProvider , CommandInfo , Task > callback The callback of this command. Action < CommandBuilder > createFunc The function delegate that creates this command. Returns ModuleBuilder This module builder. AddModule(String, Action<ModuleBuilder>) Adds a module to this module. Declaration public ModuleBuilder AddModule(string primaryAlias, Action<ModuleBuilder> createFunc) Parameters String primaryAlias The primary alias of this module. Action < ModuleBuilder > createFunc The function delegate that creates this module. Returns ModuleBuilder This module builder. AddPrecondition(PreconditionAttribute) Adds a precondition to this module. Declaration public ModuleBuilder AddPrecondition(PreconditionAttribute precondition) Parameters PreconditionAttribute precondition The precondition to add to this module. Returns ModuleBuilder This module builder. Build(CommandService, IServiceProvider) Builds this module builder into a module. Declaration public ModuleInfo Build(CommandService service, IServiceProvider services) Parameters CommandService service The command service that this module builder belongs to. IServiceProvider services The service provider that this module builder belongs to. Returns ModuleInfo The built module. WithName(String) Sets the name of this module. Declaration public ModuleBuilder WithName(string name) Parameters String name The name of this module. Returns ModuleBuilder This module builder. WithRemarks(String) Sets the remarks of this module. Declaration public ModuleBuilder WithRemarks(string remarks) Parameters String remarks The remarks of this module. Returns ModuleBuilder This module builder. WithSummary(String) Sets the summary of this module. Declaration public ModuleBuilder WithSummary(string summary) Parameters String summary The summary of this module. Returns ModuleBuilder This module builder."
  },
  "api/Kook.Commands.Builders.ParameterBuilder.html": {
    "href": "api/Kook.Commands.Builders.ParameterBuilder.html",
    "title": "Class ParameterBuilder | Kook.Net 文档",
    "keywords": "Class ParameterBuilder Represents a parameter builder. Inheritance Object ParameterBuilder Namespace : Kook.Commands.Builders Assembly : Kook.Net.Commands.dll Syntax public class ParameterBuilder : object Properties Attributes Gets a read-only collection containing the attributes of this parameter. Declaration public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList < Attribute > Command Gets the command builder that this parameter builder belongs to. Declaration public CommandBuilder Command { get; } Property Value CommandBuilder DefaultValue Gets or sets the default value of this parameter. Declaration public object DefaultValue { get; set; } Property Value Object IsMultiple Gets or sets a value that indicates whether this parameter is a multiple parameter or not. Declaration public bool IsMultiple { get; set; } Property Value Boolean IsOptional Gets or sets a value that indicates whether this parameter is an optional parameter or not. Declaration public bool IsOptional { get; set; } Property Value Boolean IsRemainder Gets or sets a value that indicates whether this parameter is a remainder parameter or not. Declaration public bool IsRemainder { get; set; } Property Value Boolean Name Gets the name of this parameter. Declaration public string Name { get; } Property Value String ParameterType Gets the type of this parameter. Declaration public Type ParameterType { get; } Property Value Type Preconditions Gets a read-only collection containing the preconditions of this parameter. Declaration public IReadOnlyList<ParameterPreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList < ParameterPreconditionAttribute > Summary Gets or sets the summary of this parameter. Declaration public string Summary { get; set; } Property Value String TypeReader Gets the type reader of this parameter. Declaration public TypeReader TypeReader { get; set; } Property Value TypeReader Methods AddAttributes(Attribute[]) Adds attributes to this parameter. Declaration public ParameterBuilder AddAttributes(params Attribute[] attributes) Parameters Attribute [] attributes An array containing the attributes to add. Returns ParameterBuilder This parameter builder. AddPrecondition(ParameterPreconditionAttribute) Adds a precondition to this parameter. Declaration public ParameterBuilder AddPrecondition(ParameterPreconditionAttribute precondition) Parameters ParameterPreconditionAttribute precondition The precondition to add. Returns ParameterBuilder This parameter builder. WithDefault(Object) Sets the default value of this parameter. Declaration public ParameterBuilder WithDefault(object defaultValue) Parameters Object defaultValue The default value of this parameter. Returns ParameterBuilder This parameter builder. WithIsMultiple(Boolean) Sets whether this parameter is a multiple parameter or not. Declaration public ParameterBuilder WithIsMultiple(bool isMultiple) Parameters Boolean isMultiple Whether this parameter is a multiple parameter or not. Returns ParameterBuilder This parameter builder. WithIsOptional(Boolean) Sets whether this parameter is an optional parameter or not. Declaration public ParameterBuilder WithIsOptional(bool isOptional) Parameters Boolean isOptional Whether this parameter is an optional parameter or not. Returns ParameterBuilder This parameter builder. WithIsRemainder(Boolean) Sets whether this parameter is a remainder parameter or not. Declaration public ParameterBuilder WithIsRemainder(bool isRemainder) Parameters Boolean isRemainder Whether this parameter is a remainder parameter or not. Returns ParameterBuilder This parameter builder. WithSummary(String) Sets the summary of this parameter. Declaration public ParameterBuilder WithSummary(string summary) Parameters String summary The summary of this parameter. Returns ParameterBuilder This parameter builder."
  },
  "api/Kook.Commands.ChannelTypeReader-1.html": {
    "href": "api/Kook.Commands.ChannelTypeReader-1.html",
    "title": "Class ChannelTypeReader<T> | Kook.Net 文档",
    "keywords": "Class ChannelTypeReader<T> A TypeReader for parsing objects implementing IChannel . Inheritance Object TypeReader ChannelTypeReader<T> Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class ChannelTypeReader<T> : TypeReader where T : class, IChannel Type Parameters T The type to be checked; must implement IChannel . Remarks This TypeReader is shipped with Kook.Net and is used by default to parse any IChannel implemented object within a command. The TypeReader will attempt to first parse the input by mention, then the identifier, then by name; the highest candidate will be chosen as the final output; otherwise, an erroneous TypeReaderResult is returned. Methods ReadAsync(ICommandContext, String, IServiceProvider) Attempts to parse the input into the desired type. Declaration public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) Parameters ICommandContext context The context of the command. String input The raw input of the command. IServiceProvider services The service collection used for dependency injection. Returns Task < TypeReaderResult > A task that represents the asynchronous parsing operation. The task result contains the parsing result. Overrides TypeReader.ReadAsync(ICommandContext, String, IServiceProvider)"
  },
  "api/Kook.Commands.CommandAttribute.html": {
    "href": "api/Kook.Commands.CommandAttribute.html",
    "title": "Class CommandAttribute | Kook.Net 文档",
    "keywords": "Class CommandAttribute Marks the execution information for a command. Inheritance Object CommandAttribute Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class CommandAttribute : Attribute Constructors CommandAttribute() Declaration public CommandAttribute() CommandAttribute(String) Initializes a new CommandAttribute attribute with the specified name. Declaration public CommandAttribute(string text) Parameters String text The name of the command. CommandAttribute(String, Boolean, String, String[], String) Initializes a new CommandAttribute attribute with the specified name and mode of whether to ignore extra arguments. Declaration public CommandAttribute(string text, bool ignoreExtraArgs, string summary = null, string[] aliases = null, string remarks = null) Parameters String text The name of the command. Boolean ignoreExtraArgs Whether to ignore extra arguments. String summary The summary of the command. String [] aliases The aliases of the command. String remarks The remarks of the command. Properties Aliases Marks the aliases for a command. Declaration public string[] Aliases { get; set; } Property Value String [] Remarks AliasAttribute extends the base value of this if present. IgnoreExtraArgs Indicates whether extra arguments should be ignored for this command. Declaration public bool? IgnoreExtraArgs { get; } Property Value Nullable < Boolean > Remarks Attaches remarks to your commands. Declaration public string Remarks { get; set; } Property Value String Remarks RemainderAttribute overrides the value of this property if present. RunMode Specifies the RunMode of the command. This affects how the command is executed. Declaration public RunMode RunMode { get; set; } Property Value RunMode Summary Attaches a summary to your command. Declaration public string Summary { get; set; } Property Value String Remarks Summary overrides the value of this property if present. Text Gets the text that has been set to be recognized as a command. Declaration public string Text { get; } Property Value String"
  },
  "api/Kook.Commands.CommandContext.html": {
    "href": "api/Kook.Commands.CommandContext.html",
    "title": "Class CommandContext | Kook.Net 文档",
    "keywords": "Class CommandContext The context of a command which may contain the client, user, guild, channel, and message. Inheritance Object CommandContext Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class CommandContext : object, ICommandContext Constructors CommandContext(IKookClient, IUserMessage) Initializes a new CommandContext class with the provided client and message. Declaration public CommandContext(IKookClient client, IUserMessage msg) Parameters IKookClient client The underlying client. IUserMessage msg The underlying message. Properties Channel Gets the IMessageChannel that the command is executed in. Declaration public IMessageChannel Channel { get; } Property Value IMessageChannel Implements ICommandContext.Channel Client Gets the IKookClient that the command is executed with. Declaration public IKookClient Client { get; } Property Value IKookClient Implements ICommandContext.Client Guild Gets the IGuild that the command is executed in. Declaration public IGuild Guild { get; } Property Value IGuild Implements ICommandContext.Guild IsPrivate Indicates whether the channel that the command is executed in is a private channel. Declaration public bool IsPrivate { get; } Property Value Boolean Message Gets the IUserMessage that the command is interpreted from. Declaration public IUserMessage Message { get; } Property Value IUserMessage Implements ICommandContext.Message User Gets the IUser who executed the command. Declaration public IUser User { get; } Property Value IUser Implements ICommandContext.User"
  },
  "api/Kook.Commands.CommandError.html": {
    "href": "api/Kook.Commands.CommandError.html",
    "title": "Enum CommandError | Kook.Net 文档",
    "keywords": "Enum CommandError Defines the type of error a command can throw. Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public enum CommandError : int BadArgCount Thrown when the input text has too few or too many arguments. Exception Thrown when an exception occurs mid-command execution. MultipleMatches Thrown when more than one object is matched by TypeReader . ObjectNotFound Thrown when the object cannot be found by the TypeReader . ParseFailed Thrown when the command fails to be parsed. UnknownCommand Thrown when the command is unknown. UnmetPrecondition Thrown when the command fails to meet a PreconditionAttribute 's conditions. Unsuccessful Thrown when the command is not successfully executed on runtime."
  },
  "api/Kook.Commands.CommandException.html": {
    "href": "api/Kook.Commands.CommandException.html",
    "title": "Class CommandException | Kook.Net 文档",
    "keywords": "Class CommandException The exception that is thrown if another exception occurs during a command execution. Inheritance Object CommandException Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class CommandException : Exception Constructors CommandException(CommandInfo, ICommandContext, Exception) Initializes a new instance of the CommandException class using a command information, a command context, and the exception that interrupted the execution. Declaration public CommandException(CommandInfo command, ICommandContext context, Exception ex) Parameters CommandInfo command The command information. ICommandContext context The context of the command. Exception ex The exception that interrupted the command execution. Properties Command Gets the command that caused the exception. Declaration public CommandInfo Command { get; } Property Value CommandInfo Context Gets the command context of the exception. Declaration public ICommandContext Context { get; } Property Value ICommandContext"
  },
  "api/Kook.Commands.CommandInfo.html": {
    "href": "api/Kook.Commands.CommandInfo.html",
    "title": "Class CommandInfo | Kook.Net 文档",
    "keywords": "Class CommandInfo Provides the information of a command. Inheritance Object CommandInfo Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class CommandInfo : object Remarks This object contains the information of a command. This can include the module of the command, various descriptions regarding the command, and its RunMode . Properties Aliases Gets a list of aliases defined by the AliasAttribute of the command. Declaration public IReadOnlyList<string> Aliases { get; } Property Value IReadOnlyList < String > Attributes Gets a list of attributes of the command. Declaration public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList < Attribute > HasVarArgs Indicates whether the command accepts a params [] for its parameter. Declaration public bool HasVarArgs { get; } Property Value Boolean IgnoreExtraArgs Indicates whether extra arguments should be ignored for this command. Declaration public bool IgnoreExtraArgs { get; } Property Value Boolean Module Gets the module that the command belongs in. Declaration public ModuleInfo Module { get; } Property Value ModuleInfo Name Gets the name of the command. If none is set, the first alias is used. Declaration public string Name { get; } Property Value String Parameters Gets a list of information about the parameters of the command. Declaration public IReadOnlyList<ParameterInfo> Parameters { get; } Property Value IReadOnlyList < ParameterInfo > Preconditions Gets a list of preconditions defined by the PreconditionAttribute of the command. Declaration public IReadOnlyList<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList < PreconditionAttribute > Priority Gets the priority of the command. This is used when there are multiple overloads of the command. Declaration public int Priority { get; } Property Value Int32 Remarks Gets the remarks of the command. Declaration public string Remarks { get; } Property Value String Remarks This field returns the summary of the command. Summary and Remarks can be useful in help commands and various implementation that fetches details of the command for the user. RunMode Gets the RunMode that is being used for the command. Declaration public RunMode RunMode { get; } Property Value RunMode Summary Gets the summary of the command. Declaration public string Summary { get; } Property Value String Remarks This field returns the summary of the command. Summary and Remarks can be useful in help commands and various implementation that fetches details of the command for the user. Methods CheckPreconditionsAsync(ICommandContext, IServiceProvider) Checks the preconditions of the command. Declaration public Task<PreconditionResult> CheckPreconditionsAsync(ICommandContext context, IServiceProvider services = null) Parameters ICommandContext context The context of the command. IServiceProvider services The services to be used for precondition checking. Returns Task < PreconditionResult > A PreconditionResult that indicates whether the precondition check was successful. ExecuteAsync(ICommandContext, IEnumerable<Object>, IEnumerable<Object>, IServiceProvider) Executes the command. Declaration public Task<IResult> ExecuteAsync(ICommandContext context, IEnumerable<object> argList, IEnumerable<object> paramList, IServiceProvider services) Parameters ICommandContext context The context of the command. IEnumerable < Object > argList The arguments of the command. IEnumerable < Object > paramList The parameters of the command. IServiceProvider services The services to be used for execution. Returns Task < IResult > An IResult that indicates whether the execution was successful. ExecuteAsync(ICommandContext, ParseResult, IServiceProvider) Executes the command. Declaration public Task<IResult> ExecuteAsync(ICommandContext context, ParseResult parseResult, IServiceProvider services) Parameters ICommandContext context The context of the command. ParseResult parseResult The result of the parsing. IServiceProvider services The services to be used for execution. Returns Task < IResult > An IResult that indicates whether the execution was successful. ParseAsync(ICommandContext, Int32, SearchResult, PreconditionResult, IServiceProvider) Parses the arguments of the command. Declaration public Task<ParseResult> ParseAsync(ICommandContext context, int startIndex, SearchResult searchResult, PreconditionResult preconditionResult = null, IServiceProvider services = null) Parameters ICommandContext context The context of the command. Int32 startIndex The index to start parsing from. SearchResult searchResult The search result of the command. PreconditionResult preconditionResult The result of the precondition check. IServiceProvider services The services to be used for parsing. Returns Task < ParseResult > A ParseResult that indicates whether the parsing was successful."
  },
  "api/Kook.Commands.CommandMatch.html": {
    "href": "api/Kook.Commands.CommandMatch.html",
    "title": "Struct CommandMatch | Kook.Net 文档",
    "keywords": "Struct CommandMatch Represents a matched command. Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public struct CommandMatch Constructors CommandMatch(CommandInfo, String) Initializes a new instance of the CommandMatch struct. Declaration public CommandMatch(CommandInfo command, string alias) Parameters CommandInfo command The command that matches the search result. String alias The alias of the command. Properties Alias The alias of the command. Declaration public string Alias { get; } Property Value String Command The command that matches the search result. Declaration public CommandInfo Command { get; } Property Value CommandInfo Methods CheckPreconditionsAsync(ICommandContext, IServiceProvider) Checks the preconditions of this command. Declaration public Task<PreconditionResult> CheckPreconditionsAsync(ICommandContext context, IServiceProvider services = null) Parameters ICommandContext context The context of the command. IServiceProvider services The services to use. Returns Task < PreconditionResult > The result of the precondition check. ExecuteAsync(ICommandContext, IEnumerable<Object>, IEnumerable<Object>, IServiceProvider) Executes this command. Declaration public Task<IResult> ExecuteAsync(ICommandContext context, IEnumerable<object> argList, IEnumerable<object> paramList, IServiceProvider services) Parameters ICommandContext context The context of the command. IEnumerable < Object > argList The arguments of the command. IEnumerable < Object > paramList The parameters of the command. IServiceProvider services The services to use. Returns Task < IResult > The result of the execution. ExecuteAsync(ICommandContext, ParseResult, IServiceProvider) Executes this command. Declaration public Task<IResult> ExecuteAsync(ICommandContext context, ParseResult parseResult, IServiceProvider services) Parameters ICommandContext context The context of the command. ParseResult parseResult The result of the parse. IServiceProvider services The services to use. Returns Task < IResult > The result of the execution. ParseAsync(ICommandContext, SearchResult, PreconditionResult, IServiceProvider) Parses this command. Declaration public Task<ParseResult> ParseAsync(ICommandContext context, SearchResult searchResult, PreconditionResult preconditionResult = null, IServiceProvider services = null) Parameters ICommandContext context The context of the command. SearchResult searchResult The search result of the command. PreconditionResult preconditionResult The result of the precondition check. IServiceProvider services The services to use. Returns Task < ParseResult > The result of the parse."
  },
  "api/Kook.Commands.CommandService.html": {
    "href": "api/Kook.Commands.CommandService.html",
    "title": "Class CommandService | Kook.Net 文档",
    "keywords": "Class CommandService Provides a framework for building Kook commands. Inheritance Object CommandService Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class CommandService : IDisposable Remarks The service provides a framework for building Kook commands both dynamically via runtime builders or statically via compile-time modules. To create a command module at compile-time, see ModuleBase (most common); otherwise, see ModuleBuilder . This service also provides several events for monitoring command usages; such as Log for any command-related log events, and CommandExecuted for information about commands that have been successfully executed. Constructors CommandService() Initializes a new CommandService class. Declaration public CommandService() CommandService(CommandServiceConfig) Initializes a new CommandService class with the provided configuration. Declaration public CommandService(CommandServiceConfig config) Parameters CommandServiceConfig config The configuration class. Properties Commands Represents all commands loaded within CommandService . Declaration public IEnumerable<CommandInfo> Commands { get; } Property Value IEnumerable < CommandInfo > Modules Represents all modules loaded within CommandService . Declaration public IEnumerable<ModuleInfo> Modules { get; } Property Value IEnumerable < ModuleInfo > TypeReaders Represents all TypeReader loaded within CommandService . Declaration public ILookup<Type, TypeReader> TypeReaders { get; } Property Value ILookup < Type , TypeReader > Methods AddModuleAsync(Type, IServiceProvider) Adds a command module from a . Declaration public Task<ModuleInfo> AddModuleAsync(Type type, IServiceProvider services) Parameters Type type The type of module. IServiceProvider services The for your dependency injection solution if using one; otherwise, pass null . Returns Task < ModuleInfo > A task that represents the asynchronous operation for adding the module. The task result contains the built module. AddModuleAsync<T>(IServiceProvider) Add a command module from a . Declaration public Task<ModuleInfo> AddModuleAsync<T>(IServiceProvider services) Parameters IServiceProvider services The for your dependency injection solution if using one; otherwise, pass null . Returns Task < ModuleInfo > A task that represents the asynchronous operation for adding the module. The task result contains the built module. Type Parameters T The type of module. Examples The following example registers the module MyModule to commandService . await commandService.AddModuleAsync<MyModule>(serviceProvider); AddModulesAsync(Assembly, IServiceProvider) Add command modules from an . Declaration public Task<IEnumerable<ModuleInfo>> AddModulesAsync(Assembly assembly, IServiceProvider services) Parameters Assembly assembly The containing command modules. IServiceProvider services The for your dependency injection solution if using one; otherwise, pass null . Returns Task < IEnumerable < ModuleInfo >> A task that represents the asynchronous operation for adding the command modules. The task result contains an enumerable collection of modules added. AddTypeReader(Type, TypeReader) Adds a custom TypeReader to this CommandService for the supplied object type. If type is a , a nullable TypeReader for the value type will also be added. If a default TypeReader exists for type , a warning will be logged and the default TypeReader will be replaced. Declaration public void AddTypeReader(Type type, TypeReader reader) Parameters Type type A instance for the type to be read. TypeReader reader An instance of the TypeReader to be added. AddTypeReader(Type, TypeReader, Boolean) Adds a custom TypeReader to this CommandService for the supplied object type. If type is a , a nullable TypeReader for the value type will also be added. Declaration public void AddTypeReader(Type type, TypeReader reader, bool replaceDefault) Parameters Type type A instance for the type to be read. TypeReader reader An instance of the TypeReader to be added. Boolean replaceDefault Defines whether the TypeReader should replace the default one for if it exists. AddTypeReader<T>(TypeReader) Adds a custom TypeReader to this CommandService for the supplied object type. If T is a , a nullable TypeReader will also be added. If a default TypeReader exists for T , a warning will be logged and the default TypeReader will be replaced. Declaration public void AddTypeReader<T>(TypeReader reader) Parameters TypeReader reader An instance of the TypeReader to be added. Type Parameters T The object type to be read by the TypeReader . AddTypeReader<T>(TypeReader, Boolean) Adds a custom TypeReader to this CommandService for the supplied object type. If T is a , a nullable TypeReader will also be added. Declaration public void AddTypeReader<T>(TypeReader reader, bool replaceDefault) Parameters TypeReader reader An instance of the TypeReader to be added. Boolean replaceDefault Defines whether the TypeReader should replace the default one for if it exists. Type Parameters T The object type to be read by the TypeReader . CreateModuleAsync(String, Action<ModuleBuilder>) Creates a new module builder. Declaration public Task<ModuleInfo> CreateModuleAsync(string primaryAlias, Action<ModuleBuilder> buildFunc) Parameters String primaryAlias The primary alias for the module. Action < ModuleBuilder > buildFunc The action delegate to build the module. Returns Task < ModuleInfo > A task that represents the asynchronous operation for creating the module. Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Boolean disposing ExecuteAsync(ICommandContext, Int32, IServiceProvider, MultiMatchHandling) Executes the command. Declaration public Task<IResult> ExecuteAsync(ICommandContext context, int argPos, IServiceProvider services, MultiMatchHandling multiMatchHandling = MultiMatchHandling.Exception) Parameters ICommandContext context The context of the command. Int32 argPos The position of which the command starts at. IServiceProvider services The service to be used in the command's dependency injection. MultiMatchHandling multiMatchHandling The handling mode when multiple command matches are found. Returns Task < IResult > A task that represents the asynchronous execution operation. The task result contains the result of the command execution. ExecuteAsync(ICommandContext, String, IServiceProvider, MultiMatchHandling) Executes the command. Declaration public Task<IResult> ExecuteAsync(ICommandContext context, string input, IServiceProvider services, MultiMatchHandling multiMatchHandling = MultiMatchHandling.Exception) Parameters ICommandContext context The context of the command. String input The command string. IServiceProvider services The service to be used in the command's dependency injection. MultiMatchHandling multiMatchHandling The handling mode when multiple command matches are found. Returns Task < IResult > A task that represents the asynchronous execution operation. The task result contains the result of the command execution. RemoveModuleAsync(ModuleInfo) Removes the command module. Declaration public Task<bool> RemoveModuleAsync(ModuleInfo module) Parameters ModuleInfo module The ModuleInfo to be removed from the service. Returns Task < Boolean > A task that represents the asynchronous removal operation. The task result contains a value that indicates whether the module is successfully removed. RemoveModuleAsync(Type) Removes the command module. Declaration public Task<bool> RemoveModuleAsync(Type type) Parameters Type type The of the module. Returns Task < Boolean > A task that represents the asynchronous removal operation. The task result contains a value that indicates whether the module is successfully removed. RemoveModuleAsync<T>() Removes the command module. Declaration public Task<bool> RemoveModuleAsync<T>() Returns Task < Boolean > A task that represents the asynchronous removal operation. The task result contains a value that indicates whether the module is successfully removed. Type Parameters T The of the module. Search(ICommandContext, Int32) Searches for the command. Declaration public SearchResult Search(ICommandContext context, int argPos) Parameters ICommandContext context The context of the command. Int32 argPos The position of which the command starts at. Returns SearchResult The result containing the matching commands. Search(ICommandContext, String) Searches for the command. Declaration public SearchResult Search(ICommandContext context, string input) Parameters ICommandContext context The context of the command. String input The command string. Returns SearchResult The result containing the matching commands. Search(String) Searches for the command. Declaration public SearchResult Search(string input) Parameters String input The command string. Returns SearchResult The result containing the matching commands. TryRemoveTypeReader(Type, Boolean, out IDictionary<Type, TypeReader>) Removes a type reader from the list of type readers. Declaration public bool TryRemoveTypeReader(Type type, bool isDefaultTypeReader, out IDictionary<Type, TypeReader> readers) Parameters Type type The type to remove the readers from. Boolean isDefaultTypeReader true if the default readers for type should be removed; otherwise false . IDictionary < Type , TypeReader > readers The removed collection of type readers. Returns Boolean true if the remove operation was successful; otherwise false . Remarks Removing a TypeReader from the CommandService will not dereference the TypeReader from the loaded module/command instances. You need to reload the modules for the changes to take effect. ValidateAndGetBestMatch(SearchResult, ICommandContext, IServiceProvider, MultiMatchHandling) Validates and gets the best CommandMatch from a specified SearchResult Declaration public Task<IResult> ValidateAndGetBestMatch(SearchResult matches, ICommandContext context, IServiceProvider provider, MultiMatchHandling multiMatchHandling = MultiMatchHandling.Exception) Parameters SearchResult matches The SearchResult. ICommandContext context The context of the command. IServiceProvider provider The service provider to be used on the command's dependency injection. MultiMatchHandling multiMatchHandling The handling mode when multiple command matches are found. Returns Task < IResult > A task that represents the asynchronous validation operation. The task result contains the result of the command validation as a MatchResult or a SearchResult if no matches were found. Events CommandExecuted Occurs when a command is executed. Declaration public event Func<CommandInfo, ICommandContext, IResult, Task> CommandExecuted Event Type Func < CommandInfo , ICommandContext , IResult , Task > Remarks This event is fired when a command has been executed, successfully or not. When a command fails to execute during parsing or precondition stage, the CommandInfo may not be returned. Log Occurs when a command-related information is received. Declaration public event Func<LogMessage, Task> Log Event Type Func < LogMessage , Task > Extension Methods CommandServiceExtensions.GetExecutableCommandsAsync(CommandService, ICommandContext, IServiceProvider)"
  },
  "api/Kook.Commands.CommandServiceConfig.html": {
    "href": "api/Kook.Commands.CommandServiceConfig.html",
    "title": "Class CommandServiceConfig | Kook.Net 文档",
    "keywords": "Class CommandServiceConfig Represents a configuration class for CommandService . Inheritance Object CommandServiceConfig Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class CommandServiceConfig : object Properties CaseSensitiveCommands Gets or sets whether commands should be case-sensitive. Declaration public bool CaseSensitiveCommands { get; set; } Property Value Boolean DefaultRunMode Gets or sets the default RunMode commands should have, if one is not specified on the Command attribute or builder. Declaration public RunMode DefaultRunMode { get; set; } Property Value RunMode IgnoreExtraArgs Gets or sets a value that indicates whether extra parameters should be ignored. Declaration public bool IgnoreExtraArgs { get; set; } Property Value Boolean LogLevel Gets or sets the minimum log level severity that will be sent to the Log event. Declaration public LogSeverity LogLevel { get; set; } Property Value LogSeverity QuotationMarkAliasMap Collection of aliases for matching pairs of string delimiters. The dictionary stores the opening delimiter as a key, and the matching closing delimiter as the value. If no value is supplied Kook.Commands.QuotationAliasUtils.GetDefaultAliasMap will be used, which contains many regional equivalents. Only values that are specified in this map will be used as string delimiters, so if \" is removed then it won't be used. If this map is set to null or empty, the default delimiter of \" will be used. Declaration public Dictionary<char, char> QuotationMarkAliasMap { get; set; } Property Value Dictionary < Char , Char > Examples QuotationMarkAliasMap = new Dictionary<char, char>() { {'\\\"', '\\\"' }, {'“', '”' }, {'「', '」' }, } SeparatorChar Gets or sets the that separates an argument with another. Declaration public char SeparatorChar { get; set; } Property Value Char ThrowOnError Gets or sets whether Sync commands should push exceptions up to the caller. Declaration public bool ThrowOnError { get; set; } Property Value Boolean"
  },
  "api/Kook.Commands.CommandServiceExtensions.html": {
    "href": "api/Kook.Commands.CommandServiceExtensions.html",
    "title": "Class CommandServiceExtensions | Kook.Net 文档",
    "keywords": "Class CommandServiceExtensions Provides extension methods for the CommandService class. Inheritance Object CommandServiceExtensions Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public static class CommandServiceExtensions : object Methods GetExecutableCommandsAsync(ICollection<CommandInfo>, ICommandContext, IServiceProvider) Returns commands that can be executed under the current context. Declaration public static Task<IReadOnlyCollection<CommandInfo>> GetExecutableCommandsAsync(this ICollection<CommandInfo> commands, ICommandContext context, IServiceProvider provider) Parameters ICollection < CommandInfo > commands The set of commands to be checked against. ICommandContext context The current command context. IServiceProvider provider The service provider used for dependency injection upon precondition check. Returns Task < IReadOnlyCollection < CommandInfo >> A read-only collection of commands that can be executed under the current context. GetExecutableCommandsAsync(CommandService, ICommandContext, IServiceProvider) Returns commands that can be executed under the current context. Declaration public static Task<IReadOnlyCollection<CommandInfo>> GetExecutableCommandsAsync(this CommandService commandService, ICommandContext context, IServiceProvider provider) Parameters CommandService commandService The desired command service class to check against. ICommandContext context The current command context. IServiceProvider provider The service provider used for dependency injection upon precondition check. Returns Task < IReadOnlyCollection < CommandInfo >> A read-only collection of commands that can be executed under the current context. GetExecutableCommandsAsync(ModuleInfo, ICommandContext, IServiceProvider) Returns commands that can be executed under the current context. Declaration public static Task<IReadOnlyCollection<CommandInfo>> GetExecutableCommandsAsync(this ModuleInfo module, ICommandContext context, IServiceProvider provider) Parameters ModuleInfo module The module to be checked against. ICommandContext context The current command context. IServiceProvider provider The service provider used for dependency injection upon precondition check. Returns Task < IReadOnlyCollection < CommandInfo >> A read-only collection of commands that can be executed under the current context."
  },
  "api/Kook.Commands.ContextType.html": {
    "href": "api/Kook.Commands.ContextType.html",
    "title": "Enum ContextType | Kook.Net 文档",
    "keywords": "Enum ContextType Defines the type of command context (i.e. where the command is being executed). Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public enum ContextType : int DM Specifies the command to be executed within a DM. Guild Specifies the command to be executed within a guild."
  },
  "api/Kook.Commands.DontAutoLoadAttribute.html": {
    "href": "api/Kook.Commands.DontAutoLoadAttribute.html",
    "title": "Class DontAutoLoadAttribute | Kook.Net 文档",
    "keywords": "Class DontAutoLoadAttribute Prevents the marked module from being loaded automatically. Inheritance Object DontAutoLoadAttribute Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class DontAutoLoadAttribute : Attribute Remarks This attribute tells CommandService to ignore the marked module from being loaded automatically (e.g. the AddModulesAsync(Assembly, IServiceProvider) method). If a non-public module marked with this attribute is attempted to be loaded manually, the loading process will also fail."
  },
  "api/Kook.Commands.DontInjectAttribute.html": {
    "href": "api/Kook.Commands.DontInjectAttribute.html",
    "title": "Class DontInjectAttribute | Kook.Net 文档",
    "keywords": "Class DontInjectAttribute Prevents the marked property from being injected into a module. Inheritance Object DontInjectAttribute Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class DontInjectAttribute : Attribute Remarks This attribute prevents the marked member from being injected into its parent module. Useful when you have a public property that you do not wish to invoke the library's dependency injection service. Examples In the following example, DatabaseService will not be automatically injected into the module and will not throw an error message if the dependency fails to be resolved. public class MyModule : ModuleBase { [DontInject] public DatabaseService DatabaseService; public MyModule() { DatabaseService = DatabaseFactory.Generate(); } }"
  },
  "api/Kook.Commands.ExecuteResult.html": {
    "href": "api/Kook.Commands.ExecuteResult.html",
    "title": "Struct ExecuteResult | Kook.Net 文档",
    "keywords": "Struct ExecuteResult Contains information of the command's overall execution result. Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public struct ExecuteResult : IResult Properties Error Describes the error type that may have occurred during the operation. Declaration public CommandError? Error { get; } Property Value Nullable < CommandError > A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. Implements IResult.Error ErrorReason Describes the reason for the error. Declaration public string ErrorReason { get; } Property Value String A string containing the error reason. Implements IResult.ErrorReason Exception Gets the exception that may have occurred during the command execution. Declaration public Exception Exception { get; } Property Value Exception IsSuccess Indicates whether the operation was successful or not. Declaration public bool IsSuccess { get; } Property Value Boolean true if the result is positive; otherwise false . Implements IResult.IsSuccess Methods FromError(Exception) Initializes a new ExecuteResult with a specified exception, indicating an unsuccessful execution. Declaration public static ExecuteResult FromError(Exception ex) Parameters Exception ex The exception that caused the command execution to fail. Returns ExecuteResult A ExecuteResult that contains the exception that caused the unsuccessful execution, along with a CommandError of type Exception as well as the exception message as the reason. FromError(CommandError, String) Initializes a new ExecuteResult with a specified CommandError and its reason, indicating an unsuccessful execution. Declaration public static ExecuteResult FromError(CommandError error, string reason) Parameters CommandError error The type of error. String reason The reason behind the error. Returns ExecuteResult A ExecuteResult that contains a CommandError and reason. FromError(IResult) Initializes a new ExecuteResult with a specified result; this may or may not be an successful execution depending on the Error and ErrorReason specified. Declaration public static ExecuteResult FromError(IResult result) Parameters IResult result The result to inherit from. Returns ExecuteResult A ExecuteResult that inherits the IResult error type and reason. FromSuccess() Initializes a new ExecuteResult with no error, indicating a successful execution. Declaration public static ExecuteResult FromSuccess() Returns ExecuteResult A ExecuteResult that does not contain any errors. ToString() Gets a string that indicates the execution result. Declaration public override string ToString() Returns String Success if IsSuccess is true ; otherwise \" Error : ErrorReason \"."
  },
  "api/Kook.Commands.GroupAttribute.html": {
    "href": "api/Kook.Commands.GroupAttribute.html",
    "title": "Class GroupAttribute | Kook.Net 文档",
    "keywords": "Class GroupAttribute Marks the module as a command group. Inheritance Object GroupAttribute Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class GroupAttribute : Attribute Constructors GroupAttribute() Declaration public GroupAttribute() GroupAttribute(String) Initializes a new GroupAttribute with the provided prefix. Declaration public GroupAttribute(string prefix) Parameters String prefix The prefix of the module group. Properties Prefix Gets the prefix set for the module. Declaration public string Prefix { get; } Property Value String"
  },
  "api/Kook.Commands.html": {
    "href": "api/Kook.Commands.html",
    "title": "Namespace Kook.Commands | Kook.Net 文档",
    "keywords": "Namespace Kook.Commands Classes AliasAttribute Marks the aliases for a command. ChannelTypeReader<T> A TypeReader for parsing objects implementing IChannel . CommandAttribute Marks the execution information for a command. CommandContext The context of a command which may contain the client, user, guild, channel, and message. CommandException The exception that is thrown if another exception occurs during a command execution. CommandInfo Provides the information of a command. CommandService Provides a framework for building Kook commands. CommandServiceConfig Represents a configuration class for CommandService . CommandServiceExtensions Provides extension methods for the CommandService class. DontAutoLoadAttribute Prevents the marked module from being loaded automatically. DontInjectAttribute Prevents the marked property from being injected into a module. GroupAttribute Marks the module as a command group. IEnumerableExtensions Provides extension methods for . MatchResult Represents the match result of a command. MessageExtensions Provides extension methods for IUserMessage that relates to commands. MessageTypeReader<T> A TypeReader for parsing objects implementing IMessage . ModuleBase Provides a base class for a command module to inherit from. ModuleBase<T> Provides a base class for a command module to inherit from. ModuleInfo Provides the information of a module. NameAttribute Marks the public name of a command, module, or parameter. NamedArgumentTypeAttribute Instructs the command system to treat command parameters of this type as a collection of named arguments matching to its properties. OverrideTypeReaderAttribute Marks the to be read by the specified TypeReader . ParameterInfo Provides the information of a parameter. ParameterPreconditionAttribute Requires the parameter to pass the specified precondition before execution can begin. PreconditionAttribute Requires the module or class to pass the specified precondition before execution can begin. PreconditionGroupResult Represents the result of a grouped precondition check. PreconditionResult Represents a result type for command preconditions. PriorityAttribute Sets priority of commands. RemainderAttribute Marks the input to not be parsed by the parser. RemarksAttribute Attaches remarks to your commands. RequireBotPermissionAttribute Requires the bot to have a specific permission in the channel a command is invoked in. RequireContextAttribute Requires the command to be invoked in a specified context (e.g. in guild, DM). RequireRoleAttribute Requires the user invoking the command to have a specified role. RequireUserAttribute Requires the command to be invoked by the specified user. RequireUserPermissionAttribute Requires the user invoking the command to have a specified permission. RoleTypeReader<T> A TypeReader for parsing objects implementing IRole . RuntimeResult Represents the runtime result of a command execution. SocketCommandContext Represents a WebSocket-based context of a command. This may include the client, guild, channel, user, and message. SummaryAttribute Attaches a summary to your command. TypeReader Defines a reader class that parses user input into a specified type. UserTypeReader<T> A TypeReader for parsing objects implementing IUser . Structs CommandMatch Represents a matched command. ExecuteResult Contains information of the command's overall execution result. ParseResult Contains information for the parsing result from the command service's parser. SearchResult Represents the result of a command search. TypeReaderResult Represents a parsing result of a type reader. TypeReaderValue Represents a parsing result of a type reader. Interfaces ICommandContext Represents a context of a command. This may include the client, guild, channel, user, and message. IModuleBase Represents a generic module base. IResult Contains information of the result related to a command. Enums CommandError Defines the type of error a command can throw. ContextType Defines the type of command context (i.e. where the command is being executed). MultiMatchHandling Specifies the behavior when multiple matches are found during the command parsing stage. RunMode Specifies the behavior of the command execution workflow."
  },
  "api/Kook.Commands.ICommandContext.html": {
    "href": "api/Kook.Commands.ICommandContext.html",
    "title": "Interface ICommandContext | Kook.Net 文档",
    "keywords": "Interface ICommandContext Represents a context of a command. This may include the client, guild, channel, user, and message. Namespace : Kook.Commands Assembly : Kook.Net.Core.dll Syntax public interface ICommandContext Properties Channel Gets the IMessageChannel that the command is executed in. Declaration IMessageChannel Channel { get; } Property Value IMessageChannel Client Gets the IKookClient that the command is executed with. Declaration IKookClient Client { get; } Property Value IKookClient Guild Gets the IGuild that the command is executed in. Declaration IGuild Guild { get; } Property Value IGuild Message Gets the IUserMessage that the command is interpreted from. Declaration IUserMessage Message { get; } Property Value IUserMessage User Gets the IUser who executed the command. Declaration IUser User { get; } Property Value IUser"
  },
  "api/Kook.Commands.IEnumerableExtensions.html": {
    "href": "api/Kook.Commands.IEnumerableExtensions.html",
    "title": "Class IEnumerableExtensions | Kook.Net 文档",
    "keywords": "Class IEnumerableExtensions Provides extension methods for . Inheritance Object IEnumerableExtensions Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public static class IEnumerableExtensions : object Methods Permutate<TFirst, TSecond, TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>) Generates all possible combinations of elements from two collections and applies a specified function to each combination to produce a result. Declaration public static IEnumerable<TResult> Permutate<TFirst, TSecond, TResult>(this IEnumerable<TFirst> set, IEnumerable<TSecond> others, Func<TFirst, TSecond, TResult> func) Parameters IEnumerable <TFirst> set The first collection of elements to use to generate the combinations. IEnumerable <TSecond> others The second collection of elements to use to generate the combinations. Func <TFirst, TSecond, TResult> func The function to apply to each combination of elements to produce a result. Returns IEnumerable <TResult> An of TResult values generated by applying the specified function to each combination of elements. Type Parameters TFirst The type of elements in the first collection. TSecond The type of elements in the second collection. TResult The type of the results produced by the specified function."
  },
  "api/Kook.Commands.IModuleBase.html": {
    "href": "api/Kook.Commands.IModuleBase.html",
    "title": "Interface IModuleBase | Kook.Net 文档",
    "keywords": "Interface IModuleBase Represents a generic module base. Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public interface IModuleBase Methods AfterExecute(CommandInfo) Executed after a command is ran in this module base. Declaration void AfterExecute(CommandInfo command) Parameters CommandInfo command The command that ran. AfterExecuteAsync(CommandInfo) Executed asynchronously after a command is run in this module base. Declaration Task AfterExecuteAsync(CommandInfo command) Parameters CommandInfo command The command that's about to run. Returns Task BeforeExecute(CommandInfo) Executed before a command is run in this module base. Declaration void BeforeExecute(CommandInfo command) Parameters CommandInfo command The command that's about to run. BeforeExecuteAsync(CommandInfo) Executed asynchronously before a command is run in this module base. Declaration Task BeforeExecuteAsync(CommandInfo command) Parameters CommandInfo command The command thats about to run. Returns Task OnModuleBuilding(CommandService, ModuleBuilder) Executed when this module is building. Declaration void OnModuleBuilding(CommandService commandService, ModuleBuilder builder) Parameters CommandService commandService The command service that is building this module. ModuleBuilder builder The builder constructing this module. SetContext(ICommandContext) Sets the context of this module base. Declaration void SetContext(ICommandContext context) Parameters ICommandContext context The context to set."
  },
  "api/Kook.Commands.IResult.html": {
    "href": "api/Kook.Commands.IResult.html",
    "title": "Interface IResult | Kook.Net 文档",
    "keywords": "Interface IResult Contains information of the result related to a command. Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public interface IResult Properties Error Describes the error type that may have occurred during the operation. Declaration CommandError? Error { get; } Property Value Nullable < CommandError > A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorReason Describes the reason for the error. Declaration string ErrorReason { get; } Property Value String A string containing the error reason. IsSuccess Indicates whether the operation was successful or not. Declaration bool IsSuccess { get; } Property Value Boolean true if the result is positive; otherwise false ."
  },
  "api/Kook.Commands.MatchResult.html": {
    "href": "api/Kook.Commands.MatchResult.html",
    "title": "Class MatchResult | Kook.Net 文档",
    "keywords": "Class MatchResult Represents the match result of a command. Inheritance Object MatchResult Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class MatchResult : object, IResult Properties Error Describes the error type that may have occurred during the operation. Declaration public CommandError? Error { get; } Property Value Nullable < CommandError > A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. Implements IResult.Error ErrorReason Describes the reason for the error. Declaration public string ErrorReason { get; } Property Value String A string containing the error reason. Implements IResult.ErrorReason IsSuccess Indicates whether the operation was successful or not. Declaration public bool IsSuccess { get; } Property Value Boolean true if the result is positive; otherwise false . Implements IResult.IsSuccess Match Gets the command that may have matched during the command execution. Declaration public CommandMatch? Match { get; } Property Value Nullable < CommandMatch > Pipeline Gets on which pipeline stage the command may have matched or failed. Declaration public IResult Pipeline { get; } Property Value IResult Methods FromError(Exception) Creates a failed match result. Declaration public static MatchResult FromError(Exception ex) Parameters Exception ex The exception that occurred. Returns MatchResult The match result. FromError(CommandError, String) Creates a failed match result. Declaration public static MatchResult FromError(CommandError error, string reason) Parameters CommandError error The error that occurred. String reason The reason for the error. Returns MatchResult The match result. FromError(IResult) Creates a failed match result. Declaration public static MatchResult FromError(IResult result) Parameters IResult result The result that failed. Returns MatchResult The match result. FromError(IResult, CommandError, String) Creates a failed match result. Declaration public static MatchResult FromError(IResult pipeline, CommandError error, string reason) Parameters IResult pipeline The pipeline stage on which the command failed. CommandError error The error that occurred. String reason The reason for the error. Returns MatchResult The match result. FromSuccess(CommandMatch, IResult) Creates a successful match result. Declaration public static MatchResult FromSuccess(CommandMatch match, IResult pipeline) Parameters CommandMatch match The command that matched. IResult pipeline The pipeline stage on which the command matched. Returns MatchResult The match result. ToString() Declaration public override string ToString() Returns String"
  },
  "api/Kook.Commands.MessageExtensions.html": {
    "href": "api/Kook.Commands.MessageExtensions.html",
    "title": "Class MessageExtensions | Kook.Net 文档",
    "keywords": "Class MessageExtensions Provides extension methods for IUserMessage that relates to commands. Inheritance Object MessageExtensions Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public static class MessageExtensions : object Methods HasCharPrefix(IUserMessage, Char, ref Int32) Gets whether the message starts with the provided character. Declaration public static bool HasCharPrefix(this IUserMessage msg, char c, ref int argPos) Parameters IUserMessage msg The message to check against. Char c The char prefix. Int32 argPos References where the command starts. Returns Boolean true if the message begins with the char c ; otherwise false . HasMentionPrefix(IUserMessage, IUser, ref Int32) Gets whether the message starts with the user's mention string. Declaration public static bool HasMentionPrefix(this IUserMessage msg, IUser user, ref int argPos) Parameters IUserMessage msg IUser user Int32 argPos Returns Boolean HasStringPrefix(IUserMessage, String, ref Int32, StringComparison) Gets whether the message starts with the provided string. Declaration public static bool HasStringPrefix(this IUserMessage msg, string str, ref int argPos, StringComparison comparisonType = null) Parameters IUserMessage msg String str Int32 argPos StringComparison comparisonType Returns Boolean"
  },
  "api/Kook.Commands.MessageTypeReader-1.html": {
    "href": "api/Kook.Commands.MessageTypeReader-1.html",
    "title": "Class MessageTypeReader<T> | Kook.Net 文档",
    "keywords": "Class MessageTypeReader<T> A TypeReader for parsing objects implementing IMessage . Inheritance Object TypeReader MessageTypeReader<T> Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class MessageTypeReader<T> : TypeReader where T : class, IMessage Type Parameters T The type to be checked; must implement IMessage . Methods ReadAsync(ICommandContext, String, IServiceProvider) Attempts to parse the input into the desired type. Declaration public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) Parameters ICommandContext context The context of the command. String input The raw input of the command. IServiceProvider services The service collection used for dependency injection. Returns Task < TypeReaderResult > A task that represents the asynchronous parsing operation. The task result contains the parsing result. Overrides TypeReader.ReadAsync(ICommandContext, String, IServiceProvider)"
  },
  "api/Kook.Commands.ModuleBase.html": {
    "href": "api/Kook.Commands.ModuleBase.html",
    "title": "Class ModuleBase | Kook.Net 文档",
    "keywords": "Class ModuleBase Provides a base class for a command module to inherit from. Inheritance Object ModuleBase < ICommandContext > ModuleBase Inherited Members ModuleBase<ICommandContext>.Context ModuleBase<ICommandContext>.ReplyFileAsync(String, String, AttachmentType, Boolean, Boolean, RequestOptions) ModuleBase<ICommandContext>.ReplyFileAsync(Stream, String, AttachmentType, Boolean, Boolean, RequestOptions) ModuleBase<ICommandContext>.ReplyFileAsync(FileAttachment, Boolean, Boolean, RequestOptions) ModuleBase<ICommandContext>.ReplyTextAsync(String, Boolean, Boolean, RequestOptions) ModuleBase<ICommandContext>.ReplyCardsAsync(IEnumerable<ICard>, Boolean, Boolean, RequestOptions) ModuleBase<ICommandContext>.ReplyCardAsync(ICard, Boolean, Boolean, RequestOptions) ModuleBase<ICommandContext>.BeforeExecuteAsync(CommandInfo) ModuleBase<ICommandContext>.BeforeExecute(CommandInfo) ModuleBase<ICommandContext>.AfterExecuteAsync(CommandInfo) ModuleBase<ICommandContext>.AfterExecute(CommandInfo) ModuleBase<ICommandContext>.OnModuleBuilding(CommandService, ModuleBuilder) ModuleBase<ICommandContext>.IModuleBase.SetContext(ICommandContext) ModuleBase<ICommandContext>.IModuleBase.BeforeExecuteAsync(CommandInfo) ModuleBase<ICommandContext>.IModuleBase.BeforeExecute(CommandInfo) ModuleBase<ICommandContext>.IModuleBase.AfterExecuteAsync(CommandInfo) ModuleBase<ICommandContext>.IModuleBase.AfterExecute(CommandInfo) ModuleBase<ICommandContext>.IModuleBase.OnModuleBuilding(CommandService, ModuleBuilder) Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public abstract class ModuleBase : ModuleBase<ICommandContext>, IModuleBase"
  },
  "api/Kook.Commands.ModuleBase-1.html": {
    "href": "api/Kook.Commands.ModuleBase-1.html",
    "title": "Class ModuleBase<T> | Kook.Net 文档",
    "keywords": "Class ModuleBase<T> Provides a base class for a command module to inherit from. Inheritance Object ModuleBase<T> ModuleBase Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public abstract class ModuleBase<T> : object, IModuleBase where T : class, ICommandContext Type Parameters T A class that implements ICommandContext . Properties Context The underlying context of the command. Declaration public T Context { get; } Property Value T See Also ICommandContext CommandContext Methods AfterExecute(CommandInfo) The method to execute after executing the command. Declaration protected virtual void AfterExecute(CommandInfo command) Parameters CommandInfo command The CommandInfo of the command to be executed. AfterExecuteAsync(CommandInfo) The method to execute asynchronously after executing the command. Declaration protected virtual Task AfterExecuteAsync(CommandInfo command) Parameters CommandInfo command The CommandInfo of the command to be executed. Returns Task BeforeExecute(CommandInfo) The method to execute before executing the command. Declaration protected virtual void BeforeExecute(CommandInfo command) Parameters CommandInfo command The CommandInfo of the command to be executed. BeforeExecuteAsync(CommandInfo) The method to execute asynchronously before executing the command. Declaration protected virtual Task BeforeExecuteAsync(CommandInfo command) Parameters CommandInfo command The CommandInfo of the command to be executed. Returns Task OnModuleBuilding(CommandService, ModuleBuilder) The method to execute when building the module. Declaration protected virtual void OnModuleBuilding(CommandService commandService, ModuleBuilder builder) Parameters CommandService commandService The CommandService used to create the module. ModuleBuilder builder The builder used to build the module. ReplyCardAsync(ICard, Boolean, Boolean, RequestOptions) Sends a card message to the source channel. Declaration protected virtual Task<Cacheable<IUserMessage, Guid>> ReplyCardAsync(ICard card, bool isQuote = true, bool isEphemeral = false, RequestOptions options = null) Parameters ICard card The card to be sent. Boolean isQuote true if the source message will be quoted in this message; otherwise, false . Boolean isEphemeral true if the message to be sent can be seen only by the command invoker; otherwise, false . RequestOptions options The request options for this async request. Returns Task < Cacheable < IUserMessage , Guid >> ReplyCardsAsync(IEnumerable<ICard>, Boolean, Boolean, RequestOptions) Sends a card message to the source channel. Declaration protected virtual Task<Cacheable<IUserMessage, Guid>> ReplyCardsAsync(IEnumerable<ICard> cards, bool isQuote = true, bool isEphemeral = false, RequestOptions options = null) Parameters IEnumerable < ICard > cards The cards to be sent. Boolean isQuote true if the source message will be quoted in this message; otherwise, false . Boolean isEphemeral true if the message to be sent can be seen only by the command invoker; otherwise, false . RequestOptions options The request options for this async request. Returns Task < Cacheable < IUserMessage , Guid >> ReplyFileAsync(FileAttachment, Boolean, Boolean, RequestOptions) Sends a file to the source channel. Declaration protected virtual Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(FileAttachment attachment, bool isQuote = true, bool isEphemeral = false, RequestOptions options = null) Parameters FileAttachment attachment The attachment containing the file. Boolean isQuote true if the source message will be quoted in this message; otherwise, false . Boolean isEphemeral true if the message to be sent can be seen only by the command invoker; otherwise, false . RequestOptions options The request options for this async request. Returns Task < Cacheable < IUserMessage , Guid >> ReplyFileAsync(Stream, String, AttachmentType, Boolean, Boolean, RequestOptions) Sends a file to the source channel. Declaration protected virtual Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(Stream stream, string fileName = null, AttachmentType type = AttachmentType.File, bool isQuote = true, bool isEphemeral = false, RequestOptions options = null) Parameters Stream stream Stream of the file to be sent. String fileName The name of the file. AttachmentType type The type of the attachment. Boolean isQuote true if the source message will be quoted in this message; otherwise, false . Boolean isEphemeral true if the message to be sent can be seen only by the command invoker; otherwise, false . RequestOptions options The request options for this async request. Returns Task < Cacheable < IUserMessage , Guid >> ReplyFileAsync(String, String, AttachmentType, Boolean, Boolean, RequestOptions) Sends a file to the source channel. Declaration protected virtual Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(string path, string fileName = null, AttachmentType type = AttachmentType.File, bool isQuote = true, bool isEphemeral = false, RequestOptions options = null) Parameters String path The file path of the file. String fileName The name of the file. AttachmentType type The type of the attachment. Boolean isQuote true if the source message will be quoted in this message; otherwise, false . Boolean isEphemeral true if the message to be sent can be seen only by the command invoker; otherwise, false . RequestOptions options The request options for this async request. Returns Task < Cacheable < IUserMessage , Guid >> ReplyTextAsync(String, Boolean, Boolean, RequestOptions) Sends a text message to the source channel. Declaration protected virtual Task<Cacheable<IUserMessage, Guid>> ReplyTextAsync(string message, bool isQuote = true, bool isEphemeral = false, RequestOptions options = null) Parameters String message Contents of the message. Boolean isQuote true if the source message will be quoted in this message; otherwise, false . Boolean isEphemeral true if the message to be sent can be seen only by the command invoker; otherwise, false . RequestOptions options The request options for this async request. Returns Task < Cacheable < IUserMessage , Guid >> Explicit Interface Implementations IModuleBase.AfterExecute(CommandInfo) Declaration void IModuleBase.AfterExecute(CommandInfo command) Parameters CommandInfo command Implements IModuleBase.AfterExecute(CommandInfo) IModuleBase.AfterExecuteAsync(CommandInfo) Declaration Task IModuleBase.AfterExecuteAsync(CommandInfo command) Parameters CommandInfo command Returns Task Implements IModuleBase.AfterExecuteAsync(CommandInfo) IModuleBase.BeforeExecute(CommandInfo) Declaration void IModuleBase.BeforeExecute(CommandInfo command) Parameters CommandInfo command Implements IModuleBase.BeforeExecute(CommandInfo) IModuleBase.BeforeExecuteAsync(CommandInfo) Declaration Task IModuleBase.BeforeExecuteAsync(CommandInfo command) Parameters CommandInfo command Returns Task Implements IModuleBase.BeforeExecuteAsync(CommandInfo) IModuleBase.OnModuleBuilding(CommandService, ModuleBuilder) Declaration void IModuleBase.OnModuleBuilding(CommandService commandService, ModuleBuilder builder) Parameters CommandService commandService ModuleBuilder builder Implements IModuleBase.OnModuleBuilding(CommandService, ModuleBuilder) IModuleBase.SetContext(ICommandContext) Declaration void IModuleBase.SetContext(ICommandContext context) Parameters ICommandContext context Implements IModuleBase.SetContext(ICommandContext)"
  },
  "api/Kook.Commands.ModuleInfo.html": {
    "href": "api/Kook.Commands.ModuleInfo.html",
    "title": "Class ModuleInfo | Kook.Net 文档",
    "keywords": "Class ModuleInfo Provides the information of a module. Inheritance Object ModuleInfo Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class ModuleInfo : object Properties Aliases Gets a read-only list of aliases associated with this module. Declaration public IReadOnlyList<string> Aliases { get; } Property Value IReadOnlyList < String > Attributes Gets a read-only list of attributes that apply to this module. Declaration public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList < Attribute > Commands Gets a read-only list of commands associated with this module. Declaration public IReadOnlyList<CommandInfo> Commands { get; } Property Value IReadOnlyList < CommandInfo > Group Gets the group name (main prefix) of this module. Declaration public string Group { get; } Property Value String IsSubmodule Gets a value that indicates whether this module is a submodule or not. Declaration public bool IsSubmodule { get; } Property Value Boolean Name Gets the name of this module. Declaration public string Name { get; } Property Value String Parent Gets the parent module of this submodule if applicable. Declaration public ModuleInfo Parent { get; } Property Value ModuleInfo Preconditions Gets a read-only list of preconditions that apply to this module. Declaration public IReadOnlyList<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList < PreconditionAttribute > Remarks Gets the remarks of this module. Declaration public string Remarks { get; } Property Value String Service Gets the command service associated with this module. Declaration public CommandService Service { get; } Property Value CommandService Submodules Gets a read-only list of submodules associated with this module. Declaration public IReadOnlyList<ModuleInfo> Submodules { get; } Property Value IReadOnlyList < ModuleInfo > Summary Gets the summary of this module. Declaration public string Summary { get; } Property Value String Extension Methods CommandServiceExtensions.GetExecutableCommandsAsync(ModuleInfo, ICommandContext, IServiceProvider)"
  },
  "api/Kook.Commands.MultiMatchHandling.html": {
    "href": "api/Kook.Commands.MultiMatchHandling.html",
    "title": "Enum MultiMatchHandling | Kook.Net 文档",
    "keywords": "Enum MultiMatchHandling Specifies the behavior when multiple matches are found during the command parsing stage. Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public enum MultiMatchHandling : int Best Indicates that when multiple results are found, the best result should be chosen. Exception Indicates that when multiple results are found, an exception should be thrown."
  },
  "api/Kook.Commands.NameAttribute.html": {
    "href": "api/Kook.Commands.NameAttribute.html",
    "title": "Class NameAttribute | Kook.Net 文档",
    "keywords": "Class NameAttribute Marks the public name of a command, module, or parameter. Inheritance Object NameAttribute Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class NameAttribute : Attribute Constructors NameAttribute(String) Marks the public name of a command, module, or parameter with the provided name. Declaration public NameAttribute(string text) Parameters String text The public name of the object. Properties Text Gets the name of the command. Declaration public string Text { get; } Property Value String"
  },
  "api/Kook.Commands.NamedArgumentTypeAttribute.html": {
    "href": "api/Kook.Commands.NamedArgumentTypeAttribute.html",
    "title": "Class NamedArgumentTypeAttribute | Kook.Net 文档",
    "keywords": "Class NamedArgumentTypeAttribute Instructs the command system to treat command parameters of this type as a collection of named arguments matching to its properties. Inheritance Object NamedArgumentTypeAttribute Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public sealed class NamedArgumentTypeAttribute : Attribute"
  },
  "api/Kook.Commands.OverrideTypeReaderAttribute.html": {
    "href": "api/Kook.Commands.OverrideTypeReaderAttribute.html",
    "title": "Class OverrideTypeReaderAttribute | Kook.Net 文档",
    "keywords": "Class OverrideTypeReaderAttribute Marks the to be read by the specified TypeReader . Inheritance Object OverrideTypeReaderAttribute Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public sealed class OverrideTypeReaderAttribute : Attribute Remarks This attribute will override the TypeReader to be used when parsing for the desired type in the command. This is useful when one wishes to use a particular TypeReader without affecting other commands that are using the same target type. warning If the given type reader does not inherit from TypeReader , an will be thrown. Examples In this example, the will be read by a custom TypeReader , FriendlyTimeSpanTypeReader , instead of the Kook.Commands.TimeSpanTypeReader shipped by Kook.Net. [Command(\"time\")] public Task GetTimeAsync([OverrideTypeReader(typeof(FriendlyTimeSpanTypeReader))]TimeSpan time) => ReplyAsync(time); Constructors OverrideTypeReaderAttribute(Type) Declaration public OverrideTypeReaderAttribute(Type overridenTypeReader) Parameters Type overridenTypeReader The TypeReader to be used with the parameter. Properties TypeReader Gets the specified TypeReader of the parameter. Declaration public Type TypeReader { get; } Property Value Type"
  },
  "api/Kook.Commands.ParameterInfo.html": {
    "href": "api/Kook.Commands.ParameterInfo.html",
    "title": "Class ParameterInfo | Kook.Net 文档",
    "keywords": "Class ParameterInfo Provides the information of a parameter. Inheritance Object ParameterInfo Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class ParameterInfo : object Properties Attributes Gets a read-only list of attributes that apply to this parameter. Declaration public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList < Attribute > Command Gets the command that associates with this parameter. Declaration public CommandInfo Command { get; } Property Value CommandInfo DefaultValue Gets the default value for this optional parameter if applicable. Declaration public object DefaultValue { get; } Property Value Object IsMultiple Gets a value that indicates whether this parameter is a multiple parameter or not. Declaration public bool IsMultiple { get; } Property Value Boolean IsOptional Gets a value that indicates whether this parameter is optional or not. Declaration public bool IsOptional { get; } Property Value Boolean IsRemainder Gets a value that indicates whether this parameter is a remainder parameter or not. Declaration public bool IsRemainder { get; } Property Value Boolean Name Gets the name of this parameter. Declaration public string Name { get; } Property Value String Preconditions Gets a read-only list of precondition that apply to this parameter. Declaration public IReadOnlyList<ParameterPreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList < ParameterPreconditionAttribute > Summary Gets the summary of this parameter. Declaration public string Summary { get; } Property Value String Type Gets the type of the parameter. Declaration public Type Type { get; } Property Value Type Methods CheckPreconditionsAsync(ICommandContext, Object, IServiceProvider) Checks the preconditions of this parameter. Declaration public Task<PreconditionResult> CheckPreconditionsAsync(ICommandContext context, object arg, IServiceProvider services = null) Parameters ICommandContext context The context of the command. Object arg The argument that is being parsed. IServiceProvider services The service provider that is used to resolve services. Returns Task < PreconditionResult > A PreconditionResult that indicates whether the precondition is successful or not. ParseAsync(ICommandContext, String, IServiceProvider) Parses the input string into the desired type. Declaration public Task<TypeReaderResult> ParseAsync(ICommandContext context, string input, IServiceProvider services = null) Parameters ICommandContext context The context of the command. String input The input string. IServiceProvider services The service provider that is used to resolve services. Returns Task < TypeReaderResult > A TypeReaderResult that contains the parsing result. ToString() Declaration public override string ToString() Returns String"
  },
  "api/Kook.Commands.ParameterPreconditionAttribute.html": {
    "href": "api/Kook.Commands.ParameterPreconditionAttribute.html",
    "title": "Class ParameterPreconditionAttribute | Kook.Net 文档",
    "keywords": "Class ParameterPreconditionAttribute Requires the parameter to pass the specified precondition before execution can begin. Inheritance Object ParameterPreconditionAttribute Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public abstract class ParameterPreconditionAttribute : Attribute Methods CheckPermissionsAsync(ICommandContext, ParameterInfo, Object, IServiceProvider) Checks whether the condition is met before execution of the command. Declaration public abstract Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, ParameterInfo parameter, object value, IServiceProvider services) Parameters ICommandContext context The context of the command. ParameterInfo parameter The parameter of the command being checked against. Object value The raw value of the parameter. IServiceProvider services The service collection used for dependency injection. Returns Task < PreconditionResult > See Also PreconditionAttribute"
  },
  "api/Kook.Commands.ParseResult.html": {
    "href": "api/Kook.Commands.ParseResult.html",
    "title": "Struct ParseResult | Kook.Net 文档",
    "keywords": "Struct ParseResult Contains information for the parsing result from the command service's parser. Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public struct ParseResult : IResult Properties ArgValues Gets a read-only collection containing the parsed argument values. Declaration public IReadOnlyList<TypeReaderResult> ArgValues { get; } Property Value IReadOnlyList < TypeReaderResult > Error Describes the error type that may have occurred during the operation. Declaration public CommandError? Error { get; } Property Value Nullable < CommandError > A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. Implements IResult.Error ErrorParameter Provides information about the parameter that caused the parsing error. Declaration public ParameterInfo ErrorParameter { get; } Property Value ParameterInfo A ParameterInfo indicating the parameter info of the error that may have occurred during parsing; null if the parsing was successful or the parsing error is not specific to a single parameter. ErrorReason Describes the reason for the error. Declaration public string ErrorReason { get; } Property Value String A string containing the error reason. Implements IResult.ErrorReason IsSuccess Indicates whether the operation was successful or not. Declaration public bool IsSuccess { get; } Property Value Boolean true if the result is positive; otherwise false . Implements IResult.IsSuccess ParamValues Gets a read-only collection containing the parsed parameter values. Declaration public IReadOnlyList<TypeReaderResult> ParamValues { get; } Property Value IReadOnlyList < TypeReaderResult > Methods FromError(Exception) Creates a failed parsing result. Declaration public static ParseResult FromError(Exception ex) Parameters Exception ex The exception that occurred. Returns ParseResult The parsing result. FromError(CommandError, String) Creates a failed parsing result. Declaration public static ParseResult FromError(CommandError error, string reason) Parameters CommandError error The error that occurred. String reason The reason for the error. Returns ParseResult The parsing result. FromError(CommandError, String, ParameterInfo) Creates a failed parsing result. Declaration public static ParseResult FromError(CommandError error, string reason, ParameterInfo parameterInfo) Parameters CommandError error The error that occurred. String reason The reason for the error. ParameterInfo parameterInfo The parameter info of the error that may have occurred during parsing. Returns ParseResult The parsing result. FromError(IResult) Creates a failed parsing result. Declaration public static ParseResult FromError(IResult result) Parameters IResult result The result that contains the error. Returns ParseResult The parsing result. FromError(IResult, ParameterInfo) Creates a failed parsing result. Declaration public static ParseResult FromError(IResult result, ParameterInfo parameterInfo) Parameters IResult result The result that contains the error. ParameterInfo parameterInfo The parameter info of the error that may have occurred during parsing. Returns ParseResult The parsing result. FromSuccess(IReadOnlyList<TypeReaderResult>, IReadOnlyList<TypeReaderResult>) Creates a successful parsing result. Declaration public static ParseResult FromSuccess(IReadOnlyList<TypeReaderResult> argValues, IReadOnlyList<TypeReaderResult> paramValues) Parameters IReadOnlyList < TypeReaderResult > argValues The parsed argument values. IReadOnlyList < TypeReaderResult > paramValues The parsed parameter values. Returns ParseResult The parsing result. FromSuccess(IReadOnlyList<TypeReaderValue>, IReadOnlyList<TypeReaderValue>) Creates a successful parsing result. Declaration public static ParseResult FromSuccess(IReadOnlyList<TypeReaderValue> argValues, IReadOnlyList<TypeReaderValue> paramValues) Parameters IReadOnlyList < TypeReaderValue > argValues The parsed argument values. IReadOnlyList < TypeReaderValue > paramValues The parsed parameter values. Returns ParseResult The parsing result. ToString() Declaration public override string ToString() Returns String"
  },
  "api/Kook.Commands.PreconditionAttribute.html": {
    "href": "api/Kook.Commands.PreconditionAttribute.html",
    "title": "Class PreconditionAttribute | Kook.Net 文档",
    "keywords": "Class PreconditionAttribute Requires the module or class to pass the specified precondition before execution can begin. Inheritance Object PreconditionAttribute RequireBotPermissionAttribute RequireContextAttribute RequireRoleAttribute RequireUserAttribute RequireUserPermissionAttribute Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public abstract class PreconditionAttribute : Attribute Properties ErrorMessage When overridden in a derived class, uses the supplied string as the error message if the precondition doesn't pass. Setting this for a class that doesn't override this property is a no-op. Declaration public virtual string ErrorMessage { get; set; } Property Value String Group Specifies a group that this precondition belongs to. Declaration public string Group { get; set; } Property Value String Remarks Preconditions of the same group require only one of the preconditions to pass in order to be successful (A || B). Specifying Group = null or not at all will require all preconditions to pass, just like normal (A && B). Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) Checks if the command has the sufficient permission to be executed. Declaration public abstract Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters ICommandContext context The context of the command. CommandInfo command The command being executed. IServiceProvider services The service collection used for dependency injection. Returns Task < PreconditionResult > See Also ParameterPreconditionAttribute"
  },
  "api/Kook.Commands.PreconditionGroupResult.html": {
    "href": "api/Kook.Commands.PreconditionGroupResult.html",
    "title": "Class PreconditionGroupResult | Kook.Net 文档",
    "keywords": "Class PreconditionGroupResult Represents the result of a grouped precondition check. Inheritance Object PreconditionResult PreconditionGroupResult Inherited Members PreconditionResult.Error PreconditionResult.ErrorReason PreconditionResult.IsSuccess PreconditionResult.FromError(String) Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class PreconditionGroupResult : PreconditionResult, IResult Constructors PreconditionGroupResult(Nullable<CommandError>, String, ICollection<PreconditionResult>) Creates a new PreconditionGroupResult with the specified error, reason, and precondition results. Declaration protected PreconditionGroupResult(CommandError? error, string errorReason, ICollection<PreconditionResult> preconditions) Parameters Nullable < CommandError > error The error that occurred. String errorReason The reason for the error. ICollection < PreconditionResult > preconditions The results of the precondition checks. Properties PreconditionResults Gets the results of the precondition checks. Declaration public IReadOnlyCollection<PreconditionResult> PreconditionResults { get; } Property Value IReadOnlyCollection < PreconditionResult > Methods FromError(Exception) Returns a PreconditionResult with an exception. Declaration public static PreconditionGroupResult FromError(Exception ex) Parameters Exception ex The exception that occurred. Returns PreconditionGroupResult FromError(IResult) Returns a PreconditionResult with the specified result. Declaration public static PreconditionGroupResult FromError(IResult result) Parameters IResult result The result of failure. Returns PreconditionGroupResult FromError(String, ICollection<PreconditionResult>) Returns a PreconditionResult with the reason and precondition results. Declaration public static PreconditionGroupResult FromError(string reason, ICollection<PreconditionResult> preconditions) Parameters String reason The reason for the error. ICollection < PreconditionResult > preconditions The results of the precondition checks. Returns PreconditionGroupResult FromSuccess() Returns a PreconditionResult with no errors. Declaration public static PreconditionGroupResult FromSuccess() Returns PreconditionGroupResult ToString() Returns a string indicating whether the PreconditionResult is successful. Declaration public override string ToString() Returns String Overrides PreconditionResult.ToString()"
  },
  "api/Kook.Commands.PreconditionResult.html": {
    "href": "api/Kook.Commands.PreconditionResult.html",
    "title": "Class PreconditionResult | Kook.Net 文档",
    "keywords": "Class PreconditionResult Represents a result type for command preconditions. Inheritance Object PreconditionResult PreconditionGroupResult Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class PreconditionResult : object, IResult Constructors PreconditionResult(Nullable<CommandError>, String) Initializes a new PreconditionResult class with the command error type and reason. Declaration protected PreconditionResult(CommandError? error, string errorReason) Parameters Nullable < CommandError > error The type of failure. String errorReason The reason of failure. Properties Error Describes the error type that may have occurred during the operation. Declaration public CommandError? Error { get; } Property Value Nullable < CommandError > A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. Implements IResult.Error ErrorReason Describes the reason for the error. Declaration public string ErrorReason { get; } Property Value String A string containing the error reason. Implements IResult.ErrorReason IsSuccess Indicates whether the operation was successful or not. Declaration public bool IsSuccess { get; } Property Value Boolean true if the result is positive; otherwise false . Implements IResult.IsSuccess Methods FromError(Exception) Returns a PreconditionResult with an exception. Declaration public static PreconditionResult FromError(Exception ex) Parameters Exception ex The exception that occurred. Returns PreconditionResult FromError(IResult) Returns a PreconditionResult with the specified result type. Declaration public static PreconditionResult FromError(IResult result) Parameters IResult result The result of failure. Returns PreconditionResult FromError(String) Returns a PreconditionResult with UnmetPrecondition and the specified reason. Declaration public static PreconditionResult FromError(string reason) Parameters String reason The reason of failure. Returns PreconditionResult FromSuccess() Returns a PreconditionResult with no errors. Declaration public static PreconditionResult FromSuccess() Returns PreconditionResult ToString() Returns a string indicating whether the PreconditionResult is successful. Declaration public override string ToString() Returns String"
  },
  "api/Kook.Commands.PriorityAttribute.html": {
    "href": "api/Kook.Commands.PriorityAttribute.html",
    "title": "Class PriorityAttribute | Kook.Net 文档",
    "keywords": "Class PriorityAttribute Sets priority of commands. Inheritance Object PriorityAttribute Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class PriorityAttribute : Attribute Constructors PriorityAttribute(Int32) Initializes a new PriorityAttribute attribute with the given priority. Declaration public PriorityAttribute(int priority) Parameters Int32 priority Properties Priority Gets the priority which has been set for the command. Declaration public int Priority { get; } Property Value Int32"
  },
  "api/Kook.Commands.RemainderAttribute.html": {
    "href": "api/Kook.Commands.RemainderAttribute.html",
    "title": "Class RemainderAttribute | Kook.Net 文档",
    "keywords": "Class RemainderAttribute Marks the input to not be parsed by the parser. Inheritance Object RemainderAttribute Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class RemainderAttribute : Attribute"
  },
  "api/Kook.Commands.RemarksAttribute.html": {
    "href": "api/Kook.Commands.RemarksAttribute.html",
    "title": "Class RemarksAttribute | Kook.Net 文档",
    "keywords": "Class RemarksAttribute Attaches remarks to your commands. Inheritance Object RemarksAttribute Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class RemarksAttribute : Attribute Constructors RemarksAttribute(String) Initializes a new RemarksAttribute attribute with the specified remarks. Declaration public RemarksAttribute(string text) Parameters String text Properties Text Gets the remarks of the command. Declaration public string Text { get; } Property Value String"
  },
  "api/Kook.Commands.RequireBotPermissionAttribute.html": {
    "href": "api/Kook.Commands.RequireBotPermissionAttribute.html",
    "title": "Class RequireBotPermissionAttribute | Kook.Net 文档",
    "keywords": "Class RequireBotPermissionAttribute Requires the bot to have a specific permission in the channel a command is invoked in. Inheritance Object PreconditionAttribute RequireBotPermissionAttribute Inherited Members PreconditionAttribute.Group Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class RequireBotPermissionAttribute : PreconditionAttribute Constructors RequireBotPermissionAttribute(ChannelPermission) Requires that the bot account to have a specific ChannelPermission . Declaration public RequireBotPermissionAttribute(ChannelPermission permission) Parameters ChannelPermission permission The ChannelPermission that the bot must have. Multiple permissions can be specified by ORing the permissions together. RequireBotPermissionAttribute(GuildPermission) Requires the bot account to have a specific GuildPermission . Declaration public RequireBotPermissionAttribute(GuildPermission permission) Parameters GuildPermission permission The GuildPermission that the bot must have. Multiple permissions can be specified by ORing the permissions together. Remarks This precondition will always fail if the command is being invoked in a IPrivateChannel . Properties ChannelPermission Gets the specified ChannelPermission of the precondition. Declaration public ChannelPermission? ChannelPermission { get; } Property Value Nullable < ChannelPermission > ErrorMessage When overridden in a derived class, uses the supplied string as the error message if the precondition doesn't pass. Setting this for a class that doesn't override this property is a no-op. Declaration public override string ErrorMessage { get; set; } Property Value String Overrides PreconditionAttribute.ErrorMessage GuildPermission Gets the specified GuildPermission of the precondition. Declaration public GuildPermission? GuildPermission { get; } Property Value Nullable < GuildPermission > NotAGuildErrorMessage Gets or sets the error message if the precondition fails due to being run outside of a Guild channel. Declaration public string NotAGuildErrorMessage { get; set; } Property Value String Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) Checks if the command has the sufficient permission to be executed. Declaration public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters ICommandContext context The context of the command. CommandInfo command The command being executed. IServiceProvider services The service collection used for dependency injection. Returns Task < PreconditionResult > Overrides PreconditionAttribute.CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider)"
  },
  "api/Kook.Commands.RequireContextAttribute.html": {
    "href": "api/Kook.Commands.RequireContextAttribute.html",
    "title": "Class RequireContextAttribute | Kook.Net 文档",
    "keywords": "Class RequireContextAttribute Requires the command to be invoked in a specified context (e.g. in guild, DM). Inheritance Object PreconditionAttribute RequireContextAttribute Inherited Members PreconditionAttribute.Group Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class RequireContextAttribute : PreconditionAttribute Constructors RequireContextAttribute(ContextType) Requires the command to be invoked in the specified context. Declaration public RequireContextAttribute(ContextType contexts) Parameters ContextType contexts The type of context the command can be invoked in. Multiple contexts can be specified by ORing the contexts together. Examples [Command(\"secret\")] [RequireContext(ContextType.DM | ContextType.Group)] public Task PrivateOnlyAsync() { return ReplyAsync(\"shh, this command is a secret\"); } Properties Contexts Gets the context required to execute the command. Declaration public ContextType Contexts { get; } Property Value ContextType ErrorMessage When overridden in a derived class, uses the supplied string as the error message if the precondition doesn't pass. Setting this for a class that doesn't override this property is a no-op. Declaration public override string ErrorMessage { get; set; } Property Value String Overrides PreconditionAttribute.ErrorMessage Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) Checks if the command has the sufficient permission to be executed. Declaration public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters ICommandContext context The context of the command. CommandInfo command The command being executed. IServiceProvider services The service collection used for dependency injection. Returns Task < PreconditionResult > Overrides PreconditionAttribute.CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider)"
  },
  "api/Kook.Commands.RequireRoleAttribute.html": {
    "href": "api/Kook.Commands.RequireRoleAttribute.html",
    "title": "Class RequireRoleAttribute | Kook.Net 文档",
    "keywords": "Class RequireRoleAttribute Requires the user invoking the command to have a specified role. Inheritance Object PreconditionAttribute RequireRoleAttribute Inherited Members PreconditionAttribute.Group PreconditionAttribute.ErrorMessage Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class RequireRoleAttribute : PreconditionAttribute Remarks This precondition will restrict the access of the command or module to a user with the specified role. If the precondition fails to be met, an erroneous PreconditionResult will be returned with the message \"Command can only be run by the specified user.\" For example, you can pass the guild manager role to restrict the command to the guild managers to be able to use it. Constructors RequireRoleAttribute(String) Requires that the user invoking the command to have a specific Role. Declaration public RequireRoleAttribute(string roleName) Parameters String roleName Name of the role that the user must have. RequireRoleAttribute(UInt32) Requires that the user invoking the command to have a specific Role. Declaration public RequireRoleAttribute(uint roleId) Parameters UInt32 roleId Id of the role that the user must have. Properties NotAGuildErrorMessage Gets or sets the error message if the precondition fails due to being run outside of a Guild channel. Declaration public string NotAGuildErrorMessage { get; set; } Property Value String Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) Checks if the command has the sufficient permission to be executed. Declaration public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters ICommandContext context The context of the command. CommandInfo command The command being executed. IServiceProvider services The service collection used for dependency injection. Returns Task < PreconditionResult > Overrides PreconditionAttribute.CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider)"
  },
  "api/Kook.Commands.RequireUserAttribute.html": {
    "href": "api/Kook.Commands.RequireUserAttribute.html",
    "title": "Class RequireUserAttribute | Kook.Net 文档",
    "keywords": "Class RequireUserAttribute Requires the command to be invoked by the specified user. Inheritance Object PreconditionAttribute RequireUserAttribute Inherited Members PreconditionAttribute.Group Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class RequireUserAttribute : PreconditionAttribute Remarks This precondition will restrict the access of the command or module to a specified user. If the precondition fails to be met, an erroneous PreconditionResult will be returned with the message \"Command can only be run by the specified user.\" For example, you can pass the owner of this bot application to restrict the command to the bot owner to be able to use it. Examples The following example restricts the command to a set of sensitive commands that only the specified user should be able to access. [RequireUser(2810246202)] [Group(\"admin\")] public class AdminModule : ModuleBase { [Command(\"exit\")] public async Task ExitAsync() { Environment.Exit(0); } } Constructors RequireUserAttribute(UInt64) Initializes a new RequireUserAttribute attribute with the specified user identifier. Declaration public RequireUserAttribute(ulong userId) Parameters UInt64 userId The identifier of the user. Properties ErrorMessage When overridden in a derived class, uses the supplied string as the error message if the precondition doesn't pass. Setting this for a class that doesn't override this property is a no-op. Declaration public override string ErrorMessage { get; set; } Property Value String Overrides PreconditionAttribute.ErrorMessage Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) Checks if the command has the sufficient permission to be executed. Declaration public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters ICommandContext context The context of the command. CommandInfo command The command being executed. IServiceProvider services The service collection used for dependency injection. Returns Task < PreconditionResult > Overrides PreconditionAttribute.CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider)"
  },
  "api/Kook.Commands.RequireUserPermissionAttribute.html": {
    "href": "api/Kook.Commands.RequireUserPermissionAttribute.html",
    "title": "Class RequireUserPermissionAttribute | Kook.Net 文档",
    "keywords": "Class RequireUserPermissionAttribute Requires the user invoking the command to have a specified permission. Inheritance Object PreconditionAttribute RequireUserPermissionAttribute Inherited Members PreconditionAttribute.Group Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class RequireUserPermissionAttribute : PreconditionAttribute Constructors RequireUserPermissionAttribute(ChannelPermission) Requires that the user invoking the command to have a specific ChannelPermission . Declaration public RequireUserPermissionAttribute(ChannelPermission permission) Parameters ChannelPermission permission The ChannelPermission that the user must have. Multiple permissions can be specified by ORing the permissions together. RequireUserPermissionAttribute(GuildPermission) Requires that the user invoking the command to have a specific GuildPermission . Declaration public RequireUserPermissionAttribute(GuildPermission permission) Parameters GuildPermission permission The GuildPermission that the user must have. Multiple permissions can be specified by ORing the permissions together. Remarks This precondition will always fail if the command is being invoked in a IPrivateChannel . Properties ChannelPermission Gets the specified ChannelPermission of the precondition. Declaration public ChannelPermission? ChannelPermission { get; } Property Value Nullable < ChannelPermission > ErrorMessage When overridden in a derived class, uses the supplied string as the error message if the precondition doesn't pass. Setting this for a class that doesn't override this property is a no-op. Declaration public override string ErrorMessage { get; set; } Property Value String Overrides PreconditionAttribute.ErrorMessage GuildPermission Gets the specified GuildPermission of the precondition. Declaration public GuildPermission? GuildPermission { get; } Property Value Nullable < GuildPermission > NotAGuildErrorMessage Gets or sets the error message if the precondition fails due to being run outside of a Guild channel. Declaration public string NotAGuildErrorMessage { get; set; } Property Value String Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) Checks if the command has the sufficient permission to be executed. Declaration public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters ICommandContext context The context of the command. CommandInfo command The command being executed. IServiceProvider services The service collection used for dependency injection. Returns Task < PreconditionResult > Overrides PreconditionAttribute.CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider)"
  },
  "api/Kook.Commands.RoleTypeReader-1.html": {
    "href": "api/Kook.Commands.RoleTypeReader-1.html",
    "title": "Class RoleTypeReader<T> | Kook.Net 文档",
    "keywords": "Class RoleTypeReader<T> A TypeReader for parsing objects implementing IRole . Inheritance Object TypeReader RoleTypeReader<T> Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class RoleTypeReader<T> : TypeReader where T : class, IRole Type Parameters T The type to be checked; must implement IRole . Methods ReadAsync(ICommandContext, String, IServiceProvider) Attempts to parse the input into the desired type. Declaration public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) Parameters ICommandContext context The context of the command. String input The raw input of the command. IServiceProvider services The service collection used for dependency injection. Returns Task < TypeReaderResult > A task that represents the asynchronous parsing operation. The task result contains the parsing result. Overrides TypeReader.ReadAsync(ICommandContext, String, IServiceProvider)"
  },
  "api/Kook.Commands.RunMode.html": {
    "href": "api/Kook.Commands.RunMode.html",
    "title": "Enum RunMode | Kook.Net 文档",
    "keywords": "Enum RunMode Specifies the behavior of the command execution workflow. Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public enum RunMode : int Async Executes the command on a different thread from the gateway one. Default The default behavior set in CommandServiceConfig . Sync Executes the command on the same thread as gateway one."
  },
  "api/Kook.Commands.RuntimeResult.html": {
    "href": "api/Kook.Commands.RuntimeResult.html",
    "title": "Class RuntimeResult | Kook.Net 文档",
    "keywords": "Class RuntimeResult Represents the runtime result of a command execution. Inheritance Object RuntimeResult Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public abstract class RuntimeResult : object, IResult Constructors RuntimeResult(Nullable<CommandError>, String) Initializes a new RuntimeResult class with the type of error and reason. Declaration protected RuntimeResult(CommandError? error, string reason) Parameters Nullable < CommandError > error The type of failure, or null if none. String reason The reason of failure. Properties Error Describes the error type that may have occurred during the operation. Declaration public CommandError? Error { get; } Property Value Nullable < CommandError > A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. Implements IResult.Error IsSuccess Indicates whether the operation was successful or not. Declaration public bool IsSuccess { get; } Property Value Boolean true if the result is positive; otherwise false . Implements IResult.IsSuccess Reason Describes the execution reason or result. Declaration public string Reason { get; } Property Value String Methods ToString() Declaration public override string ToString() Returns String Explicit Interface Implementations IResult.ErrorReason Describes the reason for the error. Declaration string IResult.ErrorReason { get; } Returns String A string containing the error reason. Implements IResult.ErrorReason"
  },
  "api/Kook.Commands.SearchResult.html": {
    "href": "api/Kook.Commands.SearchResult.html",
    "title": "Struct SearchResult | Kook.Net 文档",
    "keywords": "Struct SearchResult Represents the result of a command search. Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public struct SearchResult : IResult Properties Commands Gets the commands that were found. Declaration public IReadOnlyList<CommandMatch> Commands { get; } Property Value IReadOnlyList < CommandMatch > Error Describes the error type that may have occurred during the operation. Declaration public CommandError? Error { get; } Property Value Nullable < CommandError > A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. Implements IResult.Error ErrorReason Describes the reason for the error. Declaration public string ErrorReason { get; } Property Value String A string containing the error reason. Implements IResult.ErrorReason IsSuccess Indicates whether the operation was successful or not. Declaration public bool IsSuccess { get; } Property Value Boolean true if the result is positive; otherwise false . Implements IResult.IsSuccess Text Gets the text that was searched in. Declaration public string Text { get; } Property Value String Methods FromError(Exception) Returns a SearchResult with an exception. Declaration public static SearchResult FromError(Exception ex) Parameters Exception ex The exception that occurred. Returns SearchResult FromError(CommandError, String) Returns a SearchResult with a CommandError . Declaration public static SearchResult FromError(CommandError error, string reason) Parameters CommandError error The type of failure. String reason The reason of failure. Returns SearchResult FromError(IResult) Returns a SearchResult with the specified result type. Declaration public static SearchResult FromError(IResult result) Parameters IResult result The result of failure. Returns SearchResult FromSuccess(String, IReadOnlyList<CommandMatch>) Returns a SearchResult with no errors. Declaration public static SearchResult FromSuccess(string text, IReadOnlyList<CommandMatch> commands) Parameters String text The text that was searched in. IReadOnlyList < CommandMatch > commands The commands that were found. Returns SearchResult ToString() Declaration public override string ToString() Returns String"
  },
  "api/Kook.Commands.SocketCommandContext.html": {
    "href": "api/Kook.Commands.SocketCommandContext.html",
    "title": "Class SocketCommandContext | Kook.Net 文档",
    "keywords": "Class SocketCommandContext Represents a WebSocket-based context of a command. This may include the client, guild, channel, user, and message. Inheritance Object SocketCommandContext Namespace : Kook.Commands Assembly : Kook.Net.WebSocket.dll Syntax public class SocketCommandContext : object, ICommandContext Constructors SocketCommandContext(KookSocketClient, SocketUserMessage) Initializes a new SocketCommandContext class with the provided client and message. Declaration public SocketCommandContext(KookSocketClient client, SocketUserMessage msg) Parameters KookSocketClient client The underlying client. SocketUserMessage msg The underlying message. Properties Channel Gets the ISocketMessageChannel that the command is executed in. Declaration public ISocketMessageChannel Channel { get; } Property Value ISocketMessageChannel Client Gets the KookSocketClient that the command is executed with. Declaration public KookSocketClient Client { get; } Property Value KookSocketClient Guild Gets the SocketGuild that the command is executed in. Declaration public SocketGuild Guild { get; } Property Value SocketGuild IsPrivate Indicates whether the channel that the command is executed in is a private channel. Declaration public bool IsPrivate { get; } Property Value Boolean Message Gets the SocketUserMessage that the command is interpreted from. Declaration public SocketUserMessage Message { get; } Property Value SocketUserMessage User Gets the SocketUser who executed the command. Declaration public SocketUser User { get; } Property Value SocketUser Explicit Interface Implementations ICommandContext.Channel Gets the IMessageChannel that the command is executed in. Declaration IMessageChannel ICommandContext.Channel { get; } Returns IMessageChannel Implements ICommandContext.Channel ICommandContext.Client Gets the IKookClient that the command is executed with. Declaration IKookClient ICommandContext.Client { get; } Returns IKookClient Implements ICommandContext.Client ICommandContext.Guild Gets the IGuild that the command is executed in. Declaration IGuild ICommandContext.Guild { get; } Returns IGuild Implements ICommandContext.Guild ICommandContext.Message Gets the IUserMessage that the command is interpreted from. Declaration IUserMessage ICommandContext.Message { get; } Returns IUserMessage Implements ICommandContext.Message ICommandContext.User Gets the IUser who executed the command. Declaration IUser ICommandContext.User { get; } Returns IUser Implements ICommandContext.User"
  },
  "api/Kook.Commands.SummaryAttribute.html": {
    "href": "api/Kook.Commands.SummaryAttribute.html",
    "title": "Class SummaryAttribute | Kook.Net 文档",
    "keywords": "Class SummaryAttribute Attaches a summary to your command. Inheritance Object SummaryAttribute Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class SummaryAttribute : Attribute Constructors SummaryAttribute(String) Initializes a new SummaryAttribute attribute with the specified summary. Declaration public SummaryAttribute(string text) Parameters String text Properties Text Gets the summary of the command. Declaration public string Text { get; } Property Value String"
  },
  "api/Kook.Commands.TypeReader.html": {
    "href": "api/Kook.Commands.TypeReader.html",
    "title": "Class TypeReader | Kook.Net 文档",
    "keywords": "Class TypeReader Defines a reader class that parses user input into a specified type. Inheritance Object TypeReader ChannelTypeReader<T> MessageTypeReader<T> RoleTypeReader<T> UserTypeReader<T> Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public abstract class TypeReader : object Methods ReadAsync(ICommandContext, String, IServiceProvider) Attempts to parse the input into the desired type. Declaration public abstract Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) Parameters ICommandContext context The context of the command. String input The raw input of the command. IServiceProvider services The service collection used for dependency injection. Returns Task < TypeReaderResult > A task that represents the asynchronous parsing operation. The task result contains the parsing result."
  },
  "api/Kook.Commands.TypeReaderResult.html": {
    "href": "api/Kook.Commands.TypeReaderResult.html",
    "title": "Struct TypeReaderResult | Kook.Net 文档",
    "keywords": "Struct TypeReaderResult Represents a parsing result of a type reader. Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public struct TypeReaderResult : IResult Properties BestMatch Declaration public object BestMatch { get; } Property Value Object Error Describes the error type that may have occurred during the operation. Declaration public CommandError? Error { get; } Property Value Nullable < CommandError > A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. Implements IResult.Error ErrorReason Describes the reason for the error. Declaration public string ErrorReason { get; } Property Value String A string containing the error reason. Implements IResult.ErrorReason IsSuccess Indicates whether the operation was successful or not. Declaration public bool IsSuccess { get; } Property Value Boolean true if the result is positive; otherwise false . Implements IResult.IsSuccess Values Gets the parsed values. Declaration public IReadOnlyCollection<TypeReaderValue> Values { get; } Property Value IReadOnlyCollection < TypeReaderValue > Methods FromError(Exception) Returns a TypeReaderResult with an exception. Declaration public static TypeReaderResult FromError(Exception ex) Parameters Exception ex The exception that occurred. Returns TypeReaderResult FromError(CommandError, String) Returns a TypeReaderResult with a specified error. Declaration public static TypeReaderResult FromError(CommandError error, string reason) Parameters CommandError error The error. String reason The reason for the error. Returns TypeReaderResult FromError(IResult) Returns a TypeReaderResult with an specified result. Declaration public static TypeReaderResult FromError(IResult result) Parameters IResult result The result. Returns TypeReaderResult FromSuccess(IReadOnlyCollection<TypeReaderValue>) Returns a TypeReaderResult with no errors. Declaration public static TypeReaderResult FromSuccess(IReadOnlyCollection<TypeReaderValue> values) Parameters IReadOnlyCollection < TypeReaderValue > values The parsed values. Returns TypeReaderResult FromSuccess(TypeReaderValue) Returns a TypeReaderResult with no errors. Declaration public static TypeReaderResult FromSuccess(TypeReaderValue value) Parameters TypeReaderValue value The parsed value. Returns TypeReaderResult FromSuccess(Object) Returns a TypeReaderResult with no errors. Declaration public static TypeReaderResult FromSuccess(object value) Parameters Object value The parsed value. Returns TypeReaderResult ToString() Declaration public override string ToString() Returns String"
  },
  "api/Kook.Commands.TypeReaderValue.html": {
    "href": "api/Kook.Commands.TypeReaderValue.html",
    "title": "Struct TypeReaderValue | Kook.Net 文档",
    "keywords": "Struct TypeReaderValue Represents a parsing result of a type reader. Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public struct TypeReaderValue Constructors TypeReaderValue(Object, Single) Initializes a new instance of the TypeReaderValue struct. Declaration public TypeReaderValue(object value, float score) Parameters Object value The parsed value. Single score The confidence score of the parsing. Properties Score Gets the confidence score of the parsing. Declaration public float Score { get; } Property Value Single Value Gets the parsed value. Declaration public object Value { get; } Property Value Object Methods ToString() Declaration public override string ToString() Returns String"
  },
  "api/Kook.Commands.UserTypeReader-1.html": {
    "href": "api/Kook.Commands.UserTypeReader-1.html",
    "title": "Class UserTypeReader<T> | Kook.Net 文档",
    "keywords": "Class UserTypeReader<T> A TypeReader for parsing objects implementing IUser . Inheritance Object TypeReader UserTypeReader<T> Namespace : Kook.Commands Assembly : Kook.Net.Commands.dll Syntax public class UserTypeReader<T> : TypeReader where T : class, IUser Type Parameters T The type to be checked; must implement IUser . Methods ReadAsync(ICommandContext, String, IServiceProvider) Attempts to parse the input into the desired type. Declaration public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) Parameters ICommandContext context The context of the command. String input The raw input of the command. IServiceProvider services The service collection used for dependency injection. Returns Task < TypeReaderResult > A task that represents the asynchronous parsing operation. The task result contains the parsing result. Overrides TypeReader.ReadAsync(ICommandContext, String, IServiceProvider)"
  },
  "api/Kook.ConnectionState.html": {
    "href": "api/Kook.ConnectionState.html",
    "title": "Enum ConnectionState | Kook.Net 文档",
    "keywords": "Enum ConnectionState Specifies the connection state of a client. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum ConnectionState : byte Connected The client has established a connection to Kook. Connecting The client is connecting to Kook. Disconnected The client has disconnected from Kook. Disconnecting The client is disconnecting from Kook."
  },
  "api/Kook.ContainerModule.html": {
    "href": "api/Kook.ContainerModule.html",
    "title": "Class ContainerModule | Kook.Net 文档",
    "keywords": "Class ContainerModule Represents a container module that can be used in an ICard . Inheritance Object ContainerModule Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class ContainerModule : object, IModule, IEquatable<ContainerModule> Properties Elements Gets the elements in this container module. Declaration public ImmutableArray<ImageElement> Elements { get; } Property Value ImmutableArray < ImageElement > An representing the elements in this container module. Type Gets the type of the module. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Implements IModule.Type Methods Equals(ContainerModule) Determines whether the specified ContainerModule is equal to the current ContainerModule . Declaration public bool Equals(ContainerModule containerModule) Parameters ContainerModule containerModule The ContainerModule to compare with the current ContainerModule . Returns Boolean true if the specified ContainerModule is equal to the current ContainerModule ; otherwise, false . Equals(Object) Determines whether the specified ContainerModule is equal to the current ContainerModule . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current ContainerModule . Returns Boolean true if the specified ContainerModule is equal to the current ContainerModule ; otherwise, false . Remarks If the object passes is an ContainerModule , Equals(ContainerModule) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 Operators Equality(ContainerModule, ContainerModule) Determines whether the specified ContainerModule is equal to the current ContainerModule . Declaration public static bool operator ==(ContainerModule left, ContainerModule right) Parameters ContainerModule left ContainerModule right Returns Boolean true if the specified ContainerModule is equal to the current ContainerModule ; otherwise, false . Inequality(ContainerModule, ContainerModule) Determines whether the specified ContainerModule is not equal to the current ContainerModule . Declaration public static bool operator !=(ContainerModule left, ContainerModule right) Parameters ContainerModule left ContainerModule right Returns Boolean true if the specified ContainerModule is not equal to the current ContainerModule ; otherwise, false . Extension Methods CardExtensions.ToBuilder(ContainerModule)"
  },
  "api/Kook.ContainerModuleBuilder.html": {
    "href": "api/Kook.ContainerModuleBuilder.html",
    "title": "Class ContainerModuleBuilder | Kook.Net 文档",
    "keywords": "Class ContainerModuleBuilder Represents a container module builder for creating a ContainerModule . Inheritance Object ContainerModuleBuilder Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class ContainerModuleBuilder : object, IModuleBuilder, IEquatable<ContainerModuleBuilder> Constructors ContainerModuleBuilder() Initializes a new instance of the ContainerModuleBuilder class. Declaration public ContainerModuleBuilder() ContainerModuleBuilder(List<ImageElementBuilder>) Initializes a new instance of the ContainerModuleBuilder class. Declaration public ContainerModuleBuilder(List<ImageElementBuilder> elements) Parameters List < ImageElementBuilder > elements Fields MaxElementCount Returns the maximum number of elements allowed by Kook. Declaration public const int MaxElementCount = null Field Value Int32 Properties Elements Gets or sets the image elements in the container module. Declaration public List<ImageElementBuilder> Elements { get; set; } Property Value List < ImageElementBuilder > A containing the image elements in this image container module. Type Specifies the module type of the IModule this builder creates. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Implements IModuleBuilder.Type Methods AddElement(Action<ImageElementBuilder>) Adds an image element to the container module. Declaration public ContainerModuleBuilder AddElement(Action<ImageElementBuilder> action) Parameters Action < ImageElementBuilder > action The action to add an image element to the container module. Returns ContainerModuleBuilder The current builder. AddElement(ImageElementBuilder) Adds an image element to the container module. Declaration public ContainerModuleBuilder AddElement(ImageElementBuilder field) Parameters ImageElementBuilder field The image element to add. Returns ContainerModuleBuilder The current builder. Build() Builds this builder into a ContainerModule . Declaration public ContainerModule Build() Returns ContainerModule A ContainerModule representing the built container module object. Equals(ContainerModuleBuilder) Determines whether the specified ContainerModuleBuilder is equal to the current ContainerModuleBuilder . Declaration public bool Equals(ContainerModuleBuilder containerModuleBuilder) Parameters ContainerModuleBuilder containerModuleBuilder The ContainerModuleBuilder to compare with the current ContainerModuleBuilder . Returns Boolean true if the specified ContainerModuleBuilder is equal to the current ContainerModuleBuilder ; otherwise, false . Equals(Object) Determines whether the specified ContainerModuleBuilder is equal to the current ContainerModuleBuilder . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current ContainerModuleBuilder . Returns Boolean true if the specified ContainerModuleBuilder is equal to the current ContainerModuleBuilder ; otherwise, false . Remarks If the object passes is an ContainerModuleBuilder , Equals(ContainerModuleBuilder) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 Operators Equality(ContainerModuleBuilder, ContainerModuleBuilder) Determines whether the specified ContainerModuleBuilder is equal to the current ContainerModuleBuilder . Declaration public static bool operator ==(ContainerModuleBuilder left, ContainerModuleBuilder right) Parameters ContainerModuleBuilder left ContainerModuleBuilder right Returns Boolean true if the specified ContainerModuleBuilder is equal to the current ContainerModuleBuilder ; otherwise, false . Inequality(ContainerModuleBuilder, ContainerModuleBuilder) Determines whether the specified ContainerModuleBuilder is not equal to the current ContainerModuleBuilder . Declaration public static bool operator !=(ContainerModuleBuilder left, ContainerModuleBuilder right) Parameters ContainerModuleBuilder left ContainerModuleBuilder right Returns Boolean true if the specified ContainerModuleBuilder is not equal to the current ContainerModuleBuilder ; otherwise, false . Explicit Interface Implementations IModuleBuilder.Build() Builds the IModuleBuilder into an IModule . Declaration IModule IModuleBuilder.Build() Returns IModule An IModule representing the built module object. Implements IModuleBuilder.Build()"
  },
  "api/Kook.ContextModule.html": {
    "href": "api/Kook.ContextModule.html",
    "title": "Class ContextModule | Kook.Net 文档",
    "keywords": "Class ContextModule Represents a context module that can be used in an ICard . Inheritance Object ContextModule Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class ContextModule : object, IModule, IEquatable<ContextModule> Properties Elements Gets the elements in this context module. Declaration public ImmutableArray<IElement> Elements { get; } Property Value ImmutableArray < IElement > An representing the elements in this context module. Type Gets the type of the module. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Implements IModule.Type Methods Equals(ContextModule) Determines whether the specified ContextModule is equal to the current ContextModule . Declaration public bool Equals(ContextModule contextModule) Parameters ContextModule contextModule The ContextModule to compare with the current ContextModule . Returns Boolean true if the specified ContextModule is equal to the current ContextModule ; otherwise, false . Equals(Object) Determines whether the specified ContextModule is equal to the current ContextModule . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current ContextModule . Returns Boolean true if the specified ContextModule is equal to the current ContextModule ; otherwise, false . Remarks If the object passes is an ContextModule , Equals(ContextModule) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 Operators Equality(ContextModule, ContextModule) Determines whether the specified ContextModule is equal to the current ContextModule . Declaration public static bool operator ==(ContextModule left, ContextModule right) Parameters ContextModule left ContextModule right Returns Boolean true if the specified ContextModule is equal to the current ContextModule ; otherwise, false . Inequality(ContextModule, ContextModule) Determines whether the specified ContextModule is not equal to the current ContextModule . Declaration public static bool operator !=(ContextModule left, ContextModule right) Parameters ContextModule left ContextModule right Returns Boolean true if the specified ContextModule is not equal to the current ContextModule ; otherwise, false . Extension Methods CardExtensions.ToBuilder(ContextModule)"
  },
  "api/Kook.ContextModuleBuilder.html": {
    "href": "api/Kook.ContextModuleBuilder.html",
    "title": "Class ContextModuleBuilder | Kook.Net 文档",
    "keywords": "Class ContextModuleBuilder Represents a context module builder for creating a ContextModule . Inheritance Object ContextModuleBuilder Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class ContextModuleBuilder : object, IModuleBuilder, IEquatable<ContextModuleBuilder> Constructors ContextModuleBuilder() Initializes a new instance of the ContextModuleBuilder class. Declaration public ContextModuleBuilder() ContextModuleBuilder(List<IElementBuilder>) Initializes a new instance of the ContextModuleBuilder class. Declaration public ContextModuleBuilder(List<IElementBuilder> elements) Parameters List < IElementBuilder > elements Fields MaxElementCount Returns the maximum number of elements allowed by Kook. Declaration public const int MaxElementCount = null Field Value Int32 Properties Elements Gets or sets the elements of the context module. Declaration public List<IElementBuilder> Elements { get; set; } Property Value List < IElementBuilder > Type Specifies the module type of the IModule this builder creates. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Implements IModuleBuilder.Type Methods AddElement(ImageElementBuilder) Adds an image element to the context module. Declaration public ContextModuleBuilder AddElement(ImageElementBuilder field) Parameters ImageElementBuilder field The image element to add. Returns ContextModuleBuilder The current builder. AddElement(KMarkdownElementBuilder) Adds a KMarkdown element to the context module. Declaration public ContextModuleBuilder AddElement(KMarkdownElementBuilder field) Parameters KMarkdownElementBuilder field The KMarkdown element to add. Returns ContextModuleBuilder The current builder. AddElement(PlainTextElementBuilder) Adds a PlainText element to the context module. Declaration public ContextModuleBuilder AddElement(PlainTextElementBuilder field) Parameters PlainTextElementBuilder field The PlainText element to add. Returns ContextModuleBuilder The current builder. AddElement<T>(Action<T>) Adds an element to the context module. Declaration public ContextModuleBuilder AddElement<T>(Action<T> action = null) where T : IElementBuilder, new() Parameters Action <T> action The action to add an element to the context module. Returns ContextModuleBuilder The current builder. Type Parameters T Build() Builds this builder into a ContextModule . Declaration public ContextModule Build() Returns ContextModule A ContextModule representing the built context module object. Equals(ContextModuleBuilder) Determines whether the specified ContextModuleBuilder is equal to the current ContextModuleBuilder . Declaration public bool Equals(ContextModuleBuilder contextModuleBuilder) Parameters ContextModuleBuilder contextModuleBuilder The ContextModuleBuilder to compare with the current ContextModuleBuilder . Returns Boolean true if the specified ContextModuleBuilder is equal to the current ContextModuleBuilder ; otherwise, false . Equals(Object) Determines whether the specified ContextModuleBuilder is equal to the current ContextModuleBuilder . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current ContextModuleBuilder . Returns Boolean true if the specified ContextModuleBuilder is equal to the current ContextModuleBuilder ; otherwise, false . Remarks If the object passes is an ContextModuleBuilder , Equals(ContextModuleBuilder) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 Operators Equality(ContextModuleBuilder, ContextModuleBuilder) Determines whether the specified ContextModuleBuilder is equal to the current ContextModuleBuilder . Declaration public static bool operator ==(ContextModuleBuilder left, ContextModuleBuilder right) Parameters ContextModuleBuilder left ContextModuleBuilder right Returns Boolean true if the specified ContextModuleBuilder is equal to the current ContextModuleBuilder ; otherwise, false . Inequality(ContextModuleBuilder, ContextModuleBuilder) Determines whether the specified ContextModuleBuilder is not equal to the current ContextModuleBuilder . Declaration public static bool operator !=(ContextModuleBuilder left, ContextModuleBuilder right) Parameters ContextModuleBuilder left ContextModuleBuilder right Returns Boolean true if the specified ContextModuleBuilder is not equal to the current ContextModuleBuilder ; otherwise, false . Explicit Interface Implementations IModuleBuilder.Build() Builds the IModuleBuilder into an IModule . Declaration IModule IModuleBuilder.Build() Returns IModule An IModule representing the built module object. Implements IModuleBuilder.Build()"
  },
  "api/Kook.CountdownMode.html": {
    "href": "api/Kook.CountdownMode.html",
    "title": "Enum CountdownMode | Kook.Net 文档",
    "keywords": "Enum CountdownMode Specifies the display mode for the countdown timer. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum CountdownMode : int Day The timer will display the time in days, hours, minutes and seconds. Hour The timer will display the time in hours, minutes and seconds. Second The timer will display the time in seconds."
  },
  "api/Kook.CountdownModule.html": {
    "href": "api/Kook.CountdownModule.html",
    "title": "Class CountdownModule | Kook.Net 文档",
    "keywords": "Class CountdownModule Represents a countdown module that can be used in an ICard . Inheritance Object CountdownModule Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class CountdownModule : object, IModule, IEquatable<CountdownModule> Properties EndTime Gets the end time of the countdown. Declaration public DateTimeOffset EndTime { get; } Property Value DateTimeOffset The end time of the countdown. Mode Gets the mode of the countdown. Declaration public CountdownMode Mode { get; } Property Value CountdownMode A CountdownMode value that represents the mode of the countdown. StartTime Gets the start time of the countdown. Declaration public DateTimeOffset? StartTime { get; } Property Value Nullable < DateTimeOffset > The start time of the countdown. Type Gets the type of the module. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Implements IModule.Type Methods Equals(CountdownModule) Determines whether the specified CountdownModule is equal to the current CountdownModule . Declaration public bool Equals(CountdownModule countdownModule) Parameters CountdownModule countdownModule The CountdownModule to compare with the current CountdownModule . Returns Boolean true if the specified CountdownModule is equal to the current CountdownModule ; otherwise, false . Equals(Object) Determines whether the specified CountdownModule is equal to the current CountdownModule . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current CountdownModule . Returns Boolean true if the specified CountdownModule is equal to the current CountdownModule ; otherwise, false . Remarks If the object passes is an CountdownModule , Equals(CountdownModule) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 Operators Equality(CountdownModule, CountdownModule) Determines whether the specified CountdownModule is equal to the current CountdownModule . Declaration public static bool operator ==(CountdownModule left, CountdownModule right) Parameters CountdownModule left CountdownModule right Returns Boolean true if the specified CountdownModule is equal to the current CountdownModule ; otherwise, false . Inequality(CountdownModule, CountdownModule) Determines whether the specified CountdownModule is not equal to the current CountdownModule . Declaration public static bool operator !=(CountdownModule left, CountdownModule right) Parameters CountdownModule left CountdownModule right Returns Boolean true if the specified CountdownModule is not equal to the current CountdownModule ; otherwise, false . Extension Methods CardExtensions.ToBuilder(CountdownModule)"
  },
  "api/Kook.CountdownModuleBuilder.html": {
    "href": "api/Kook.CountdownModuleBuilder.html",
    "title": "Class CountdownModuleBuilder | Kook.Net 文档",
    "keywords": "Class CountdownModuleBuilder Represents a countdown module builder for creating a CountdownModule . Inheritance Object CountdownModuleBuilder Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class CountdownModuleBuilder : object, IModuleBuilder, IEquatable<CountdownModuleBuilder> Constructors CountdownModuleBuilder() Initializes a new instance of the CountdownModuleBuilder class. Declaration public CountdownModuleBuilder() CountdownModuleBuilder(CountdownMode, DateTimeOffset, Nullable<DateTimeOffset>) Initializes a new instance of the CountdownModuleBuilder class. Declaration public CountdownModuleBuilder(CountdownMode mode, DateTimeOffset endTime, DateTimeOffset? startTime = null) Parameters CountdownMode mode DateTimeOffset endTime Nullable < DateTimeOffset > startTime Properties EndTime Gets or sets the ending time of the countdown. Declaration public DateTimeOffset EndTime { get; set; } Property Value DateTimeOffset The time at which the countdown ends. Mode Gets or sets how the countdown should be displayed. Declaration public CountdownMode Mode { get; set; } Property Value CountdownMode A CountdownMode representing how the countdown should be displayed. StartTime Gets or sets the beginning time of the countdown. Declaration public DateTimeOffset? StartTime { get; set; } Property Value Nullable < DateTimeOffset > The time at which the countdown begins. Type Specifies the module type of the IModule this builder creates. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Implements IModuleBuilder.Type Methods Build() Builds this builder into a CountdownModule . Declaration public CountdownModule Build() Returns CountdownModule A CountdownModule representing the built countdown module object. Equals(CountdownModuleBuilder) Determines whether the specified CountdownModuleBuilder is equal to the current CountdownModuleBuilder . Declaration public bool Equals(CountdownModuleBuilder countdownModuleBuilder) Parameters CountdownModuleBuilder countdownModuleBuilder The CountdownModuleBuilder to compare with the current CountdownModuleBuilder . Returns Boolean true if the specified CountdownModuleBuilder is equal to the current CountdownModuleBuilder ; otherwise, false . Equals(Object) Determines whether the specified CountdownModuleBuilder is equal to the current CountdownModuleBuilder . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current CountdownModuleBuilder . Returns Boolean true if the specified CountdownModuleBuilder is equal to the current CountdownModuleBuilder ; otherwise, false . Remarks If the object passes is an CountdownModuleBuilder , Equals(CountdownModuleBuilder) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 WithEndTime(DateTimeOffset) Sets the beginning time of the countdown. Declaration public CountdownModuleBuilder WithEndTime(DateTimeOffset endTime) Parameters DateTimeOffset endTime The time at which the countdown ends. Returns CountdownModuleBuilder The current builder. WithMode(CountdownMode) Sets how the countdown should be displayed. Declaration public CountdownModuleBuilder WithMode(CountdownMode mode) Parameters CountdownMode mode A CountdownMode representing how the countdown should be displayed. Returns CountdownModuleBuilder The current builder. WithStartTime(DateTimeOffset) Sets the beginning time of the countdown. Declaration public CountdownModuleBuilder WithStartTime(DateTimeOffset startTime) Parameters DateTimeOffset startTime The time at which the countdown begins. Returns CountdownModuleBuilder The current builder. Operators Equality(CountdownModuleBuilder, CountdownModuleBuilder) Determines whether the specified CountdownModuleBuilder is equal to the current CountdownModuleBuilder . Declaration public static bool operator ==(CountdownModuleBuilder left, CountdownModuleBuilder right) Parameters CountdownModuleBuilder left CountdownModuleBuilder right Returns Boolean true if the specified CountdownModuleBuilder is equal to the current CountdownModuleBuilder ; otherwise, false . Inequality(CountdownModuleBuilder, CountdownModuleBuilder) Determines whether the specified CountdownModuleBuilder is not equal to the current CountdownModuleBuilder . Declaration public static bool operator !=(CountdownModuleBuilder left, CountdownModuleBuilder right) Parameters CountdownModuleBuilder left CountdownModuleBuilder right Returns Boolean true if the specified CountdownModuleBuilder is not equal to the current CountdownModuleBuilder ; otherwise, false . Explicit Interface Implementations IModuleBuilder.Build() Builds the IModuleBuilder into an IModule . Declaration IModule IModuleBuilder.Build() Returns IModule An IModule representing the built module object. Implements IModuleBuilder.Build()"
  },
  "api/Kook.CreateAttachmentMode.html": {
    "href": "api/Kook.CreateAttachmentMode.html",
    "title": "Enum CreateAttachmentMode | Kook.Net 文档",
    "keywords": "Enum CreateAttachmentMode Indicates that how the FileAttachment will be operated to attache files. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum CreateAttachmentMode : int AssetUri The FileAttachment will be created via a pointing to a file on KOOK asset OSS. FilePath The FileAttachment will be created via a local file path. Stream The FileAttachment will be created via a Stream ."
  },
  "api/Kook.CreateCategoryChannelProperties.html": {
    "href": "api/Kook.CreateCategoryChannelProperties.html",
    "title": "Class CreateCategoryChannelProperties | Kook.Net 文档",
    "keywords": "Class CreateCategoryChannelProperties Provides properties that are used to create an ICategoryChannel with the specified properties. Inheritance Object CreateGuildChannelProperties CreateCategoryChannelProperties Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class CreateCategoryChannelProperties : CreateGuildChannelProperties"
  },
  "api/Kook.CreateGuildChannelProperties.html": {
    "href": "api/Kook.CreateGuildChannelProperties.html",
    "title": "Class CreateGuildChannelProperties | Kook.Net 文档",
    "keywords": "Class CreateGuildChannelProperties Properties that are used to create an IGuildChannel with the specified properties. Inheritance Object CreateGuildChannelProperties CreateCategoryChannelProperties CreateTextChannelProperties CreateVoiceChannelProperties Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class CreateGuildChannelProperties : object"
  },
  "api/Kook.CreateTextChannelProperties.html": {
    "href": "api/Kook.CreateTextChannelProperties.html",
    "title": "Class CreateTextChannelProperties | Kook.Net 文档",
    "keywords": "Class CreateTextChannelProperties Provides properties that are used to create an ITextChannel with the specified properties. Inheritance Object CreateGuildChannelProperties CreateTextChannelProperties Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class CreateTextChannelProperties : CreateGuildChannelProperties Properties CategoryId Gets or sets the category ID for this channel. Declaration public ulong? CategoryId { get; set; } Property Value Nullable < UInt64 > Remarks Setting this value to a category's identifier will set this channel's parent to the specified channel; setting this value to null will leave this channel alone from any parents. Topic Gets or sets the topic of the channel. Declaration public string Topic { get; set; } Property Value String Remarks Setting this value to any string other than null or will set the channel topic or description to the desired value."
  },
  "api/Kook.CreateVoiceChannelProperties.html": {
    "href": "api/Kook.CreateVoiceChannelProperties.html",
    "title": "Class CreateVoiceChannelProperties | Kook.Net 文档",
    "keywords": "Class CreateVoiceChannelProperties Provides properties that are used to create an IVoiceChannel with the specified properties. Inheritance Object CreateGuildChannelProperties CreateVoiceChannelProperties Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class CreateVoiceChannelProperties : CreateGuildChannelProperties Properties CategoryId Gets or sets the category ID for this channel. Declaration public ulong? CategoryId { get; set; } Property Value Nullable < UInt64 > Remarks Setting this value to a category's identifier will set this channel's parent to the specified channel; setting this value to null will leave this channel alone from any parents. UserLimit Gets or sets the maximum number of users that can be present in a channel, or null if none. Declaration public int? UserLimit { get; set; } Property Value Nullable < Int32 > VoiceQuality Gets or sets the voice quality that the clients in this voice channel are requested to use. Declaration public VoiceQuality? VoiceQuality { get; set; } Property Value Nullable < VoiceQuality >"
  },
  "api/Kook.Direction.html": {
    "href": "api/Kook.Direction.html",
    "title": "Enum Direction | Kook.Net 文档",
    "keywords": "Enum Direction Specifies the direction of where message(s) should be retrieved from. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum Direction : int Remarks This enum is used to specify the direction for retrieving messages. important At the time of writing, Around is not yet implemented into GetMessagesAsync(Int32, CacheMode, RequestOptions) . Attempting to use the method with Around will throw a . After The message(s) should be retrieved after a message. Around The message(s) should be retrieved around a message. Before The message(s) should be retrieved before a message. Unspecified How the message(s) should be retrieved is unspecified."
  },
  "api/Kook.DividerModule.html": {
    "href": "api/Kook.DividerModule.html",
    "title": "Class DividerModule | Kook.Net 文档",
    "keywords": "Class DividerModule A divider module that can be used in an ICard . Inheritance Object DividerModule Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class DividerModule : object, IModule, IEquatable<DividerModule> Properties Type Gets the type of the module. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Implements IModule.Type Methods Equals(DividerModule) Determines whether the specified DividerModule is equal to the current DividerModule . Declaration public bool Equals(DividerModule dividerModule) Parameters DividerModule dividerModule The DividerModule to compare with the current DividerModule . Returns Boolean true if the specified DividerModule is equal to the current DividerModule ; otherwise, false . Equals(Object) Determines whether the specified DividerModule is equal to the current DividerModule . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current DividerModule . Returns Boolean true if the specified DividerModule is equal to the current DividerModule ; otherwise, false . Remarks If the object passes is an DividerModule , Equals(DividerModule) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 Operators Equality(DividerModule, DividerModule) Determines whether the specified DividerModule is equal to the current DividerModule . Declaration public static bool operator ==(DividerModule left, DividerModule right) Parameters DividerModule left DividerModule right Returns Boolean true if the specified DividerModule is equal to the current DividerModule ; otherwise, false . Inequality(DividerModule, DividerModule) Determines whether the specified DividerModule is not equal to the current DividerModule . Declaration public static bool operator !=(DividerModule left, DividerModule right) Parameters DividerModule left DividerModule right Returns Boolean true if the specified DividerModule is not equal to the current DividerModule ; otherwise, false . Extension Methods CardExtensions.ToBuilder(DividerModule)"
  },
  "api/Kook.DividerModuleBuilder.html": {
    "href": "api/Kook.DividerModuleBuilder.html",
    "title": "Class DividerModuleBuilder | Kook.Net 文档",
    "keywords": "Class DividerModuleBuilder Represents a divider module builder for creating a DividerModule . Inheritance Object DividerModuleBuilder Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class DividerModuleBuilder : object, IModuleBuilder, IEquatable<DividerModuleBuilder> Properties Type Specifies the module type of the IModule this builder creates. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Implements IModuleBuilder.Type Methods Build() Builds this builder into a DividerModule . Declaration public DividerModule Build() Returns DividerModule A DividerModule representing the built divider module object. Equals(DividerModuleBuilder) Determines whether the specified DividerModuleBuilder is equal to the current DividerModuleBuilder . Declaration public bool Equals(DividerModuleBuilder dividerModuleBuilder) Parameters DividerModuleBuilder dividerModuleBuilder The DividerModuleBuilder to compare with the current DividerModuleBuilder . Returns Boolean true if the specified DividerModuleBuilder is equal to the current DividerModuleBuilder ; otherwise, false . Equals(Object) Determines whether the specified DividerModuleBuilder is equal to the current DividerModuleBuilder . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current DividerModuleBuilder . Returns Boolean true if the specified DividerModuleBuilder is equal to the current DividerModuleBuilder ; otherwise, false . Remarks If the object passes is an DividerModuleBuilder , Equals(DividerModuleBuilder) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 Operators Equality(DividerModuleBuilder, DividerModuleBuilder) Determines whether the specified DividerModuleBuilder is equal to the current DividerModuleBuilder . Declaration public static bool operator ==(DividerModuleBuilder left, DividerModuleBuilder right) Parameters DividerModuleBuilder left DividerModuleBuilder right Returns Boolean true if the specified DividerModuleBuilder is equal to the current DividerModuleBuilder ; otherwise, false . Inequality(DividerModuleBuilder, DividerModuleBuilder) Determines whether the specified DividerModuleBuilder is not equal to the current DividerModuleBuilder . Declaration public static bool operator !=(DividerModuleBuilder left, DividerModuleBuilder right) Parameters DividerModuleBuilder left DividerModuleBuilder right Returns Boolean true if the specified DividerModuleBuilder is not equal to the current DividerModuleBuilder ; otherwise, false . Explicit Interface Implementations IModuleBuilder.Build() Builds the IModuleBuilder into an IModule . Declaration IModule IModuleBuilder.Build() Returns IModule An IModule representing the built module object. Implements IModuleBuilder.Build()"
  },
  "api/Kook.ElementType.html": {
    "href": "api/Kook.ElementType.html",
    "title": "Enum ElementType | Kook.Net 文档",
    "keywords": "Enum ElementType Specifies the type of an IElement . Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum ElementType : int Button The element is a button element. Image The element is an image element. KMarkdown The element is a KMarkdown element. Paragraph The element is a paragraph struct. PlainText The element is a plain text element."
  },
  "api/Kook.EmbedType.html": {
    "href": "api/Kook.EmbedType.html",
    "title": "Enum EmbedType | Kook.Net 文档",
    "keywords": "Enum EmbedType Represents the type of an embed. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum EmbedType : int BilibiliVideo Represents an embed that is a Bilibili video. Image Represents an embed that is an image. Link Represents an embed that is a link. NotImplemented Represents an embed that is not implemented."
  },
  "api/Kook.Emoji.html": {
    "href": "api/Kook.Emoji.html",
    "title": "Class Emoji | Kook.Net 文档",
    "keywords": "Class Emoji A Unicode emoji. Inheritance Object Emoji Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class Emoji : object, IEmote, IEntity<string> Constructors Emoji(String) Initializes a new Emoji class with the provided Unicode. Declaration public Emoji(string unicode) Parameters String unicode The pure UTF-8 encoding of an emoji. Properties Id Gets the unique identifier for this object. Declaration public string Id { get; } Property Value String Implements IEntity<TId>.Id Name Gets the display name or Unicode representation of this emote. Declaration public string Name { get; } Property Value String A string representing the display name or the Unicode representation (e.g. 🤔 ) of this emote. Implements IEmote.Name Methods Equals(Object) Determines whether the specified emoji is equal to the current one. Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current object. Returns Boolean GetHashCode() Declaration public override int GetHashCode() Returns Int32 Parse(String) Parse an Emoji from its raw format. Declaration public static Emoji Parse(string emojiStr) Parameters String emojiStr The raw encoding of an emoji. For example: ❤️ or ❤ Returns Emoji ToString() Gets the Unicode representation of this emoji. Declaration public override string ToString() Returns String A string that resolves to Name . TryParse(String, out Emoji) Tries to parse an Emoji from its raw format. Declaration public static bool TryParse(string text, out Emoji result) Parameters String text The raw encoding of an emoji. For example: :heart: or ❤ Emoji result An emoji. Returns Boolean Operators Implicit(String to Emoji) Parses the given string into an Emoji . Declaration public static implicit operator Emoji(string s) Parameters String s The string to parse. Returns Emoji The parsed Emoji . See Also Parse(String)"
  },
  "api/Kook.EmojiType.html": {
    "href": "api/Kook.EmojiType.html",
    "title": "Enum EmojiType | Kook.Net 文档",
    "keywords": "Enum EmojiType Specifies the type of an emoji. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum EmojiType : int Animated The emoji is animated. Static The emoji is static."
  },
  "api/Kook.Emote.html": {
    "href": "api/Kook.Emote.html",
    "title": "Class Emote | Kook.Net 文档",
    "keywords": "Class Emote Represents a guild emote. Inheritance Object Emote GuildEmote Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class Emote : object, IEmote, IEntity<string> Properties Animated Gets whether this emote is animated. Declaration public bool? Animated { get; } Property Value Nullable < Boolean > Id Gets the identifier of this emote. Declaration public string Id { get; } Property Value String Implements IEntity<TId>.Id Name Gets the name of this emote. Declaration public string Name { get; } Property Value String Implements IEmote.Name Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean GetHashCode() Declaration public override int GetHashCode() Returns Int32 Parse(String, TagMode) Parses an Emote from its raw format. Declaration public static Emote Parse(string text, TagMode tagMode) Parameters String text The raw encoding of an emote; for example, [:emotename:1991895624896587/hbCFVWhu923k03k] when tagMode is TagMode.PlainText , or (emj)emotename(emj)[1991895624896587/hbCFVWhu923k03k] when tagMode is TagMode.KMarkdown . TagMode tagMode Returns Emote An emote. ToKMarkdownString() Gets a string representation of the emote in KMarkdown format. Declaration public string ToKMarkdownString() Returns String ToPlainTextString() Gets a string representation of the emote in plain text format. Declaration public string ToPlainTextString() Returns String ToString() Returns the raw representation of the emote. Declaration public override string ToString() Returns String A string representing the raw presentation of the emote (e.g. [:thonkang:282745590985523200] ). TryParse(String, out Emote, TagMode) Tries to parse an Emote from its raw format. Declaration public static bool TryParse(string text, out Emote result, TagMode tagMode) Parameters String text The raw encoding of an emote; for example, [:emotename:1991895624896587/hbCFVWhu923k03k] when tagMode is TagMode.PlainText , or (emj)emotename(emj)[1991895624896587/hbCFVWhu923k03k] when tagMode is TagMode.KMarkdown . Emote result An emote. TagMode tagMode Returns Boolean"
  },
  "api/Kook.FileAttachment.html": {
    "href": "api/Kook.FileAttachment.html",
    "title": "Struct FileAttachment | Kook.Net 文档",
    "keywords": "Struct FileAttachment Represents a file attachment. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct FileAttachment : IDisposable Constructors FileAttachment(Stream, String, AttachmentType) Creates a file attachment from a stream. Declaration public FileAttachment(Stream stream, string fileName, AttachmentType type = AttachmentType.File) Parameters Stream stream The stream to create the attachment from. String fileName The name of the attachment. AttachmentType type The type of the attachment. FileAttachment(String, String, AttachmentType) Create the file attachment from a file path. Declaration public FileAttachment(string path, string fileName = null, AttachmentType type = AttachmentType.File) Parameters String path The path to the file. String fileName The name of the attachment. AttachmentType type The type of the attachment. Remarks This file path is NOT validated and is passed directly into a . FileAttachment(Uri, String, AttachmentType) Create the file attachment from a URI. Declaration public FileAttachment(Uri uri, string fileName, AttachmentType type = AttachmentType.File) Parameters Uri uri The URI of the file. String fileName The name of the attachment. AttachmentType type The type of the attachment. Remarks This URI path will be validated before being passed into REST API. If the resource the URI points to is not stored on KOOK OSS, this constructor will throw an exception. Under this circumstance, please create asset in advance. See Also Kook.Utils.UrlValidation.ValidateKookAssetUrl(System.String) Properties FileName Gets the filename. Declaration public string FileName { get; } Property Value String Mode Gets how this attachment will be operated. Declaration public CreateAttachmentMode Mode { get; } Property Value CreateAttachmentMode Stream Gets the stream containing the file content. Declaration public Stream Stream { get; } Property Value Stream Type Gets the type of this attachment. Declaration public AttachmentType Type { get; } Property Value AttachmentType Uri Gets the URI of the file. Declaration public Uri Uri { get; } Property Value Uri Methods Dispose() Declaration public void Dispose()"
  },
  "api/Kook.FileModule.html": {
    "href": "api/Kook.FileModule.html",
    "title": "Class FileModule | Kook.Net 文档",
    "keywords": "Class FileModule A file module that can be used in an ICard . Inheritance Object FileModule Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class FileModule : object, IMediaModule, IModule, IEquatable<FileModule> Properties Source Gets the source of the media associated with this module. Declaration public string Source { get; } Property Value String A string representing the source of the audio associated with this module. Implements IMediaModule.Source Title Gets the title of the media associated with this module. Declaration public string Title { get; } Property Value String A string representing the title of the media associated with this module. Implements IMediaModule.Title Type Gets the type of the module. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Implements IModule.Type Methods Equals(FileModule) Determines whether the specified FileModule is equal to the current FileModule . Declaration public bool Equals(FileModule fileModule) Parameters FileModule fileModule The FileModule to compare with the current FileModule . Returns Boolean true if the specified FileModule is equal to the current FileModule ; otherwise, false . Equals(Object) Determines whether the specified FileModule is equal to the current FileModule . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current FileModule . Returns Boolean true if the specified FileModule is equal to the current FileModule ; otherwise, false . Remarks If the object passes is an FileModule , Equals(FileModule) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 Operators Equality(FileModule, FileModule) Determines whether the specified FileModule is equal to the current FileModule . Declaration public static bool operator ==(FileModule left, FileModule right) Parameters FileModule left FileModule right Returns Boolean true if the specified FileModule is equal to the current FileModule ; otherwise, false . Inequality(FileModule, FileModule) Determines whether the specified FileModule is not equal to the current FileModule . Declaration public static bool operator !=(FileModule left, FileModule right) Parameters FileModule left FileModule right Returns Boolean true if the specified FileModule is not equal to the current FileModule ; otherwise, false . Extension Methods CardExtensions.ToBuilder(FileModule)"
  },
  "api/Kook.FileModuleBuilder.html": {
    "href": "api/Kook.FileModuleBuilder.html",
    "title": "Class FileModuleBuilder | Kook.Net 文档",
    "keywords": "Class FileModuleBuilder Represents a file module builder for creating a FileModule . Inheritance Object FileModuleBuilder Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class FileModuleBuilder : object, IModuleBuilder, IEquatable<FileModuleBuilder> Constructors FileModuleBuilder() Initializes a new instance of the FileModuleBuilder class. Declaration public FileModuleBuilder() FileModuleBuilder(String, String) Initializes a new instance of the FileModuleBuilder class. Declaration public FileModuleBuilder(string source, string title = null) Parameters String source The source URL of the file. String title The title of the file. Properties Source Gets or sets the source URL of the file. Declaration public string Source { get; set; } Property Value String The source URL of the file. Title Gets or sets the title of the file. Declaration public string Title { get; set; } Property Value String The title of the file. Type Specifies the module type of the IModule this builder creates. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Implements IModuleBuilder.Type Methods Build() Builds this builder into a FileModule . Declaration public FileModule Build() Returns FileModule A FileModule representing the built file module object. Equals(FileModuleBuilder) Determines whether the specified FileModuleBuilder is equal to the current FileModuleBuilder . Declaration public bool Equals(FileModuleBuilder fileModuleBuilder) Parameters FileModuleBuilder fileModuleBuilder The FileModuleBuilder to compare with the current FileModuleBuilder . Returns Boolean true if the specified FileModuleBuilder is equal to the current FileModuleBuilder ; otherwise, false . Equals(Object) Determines whether the specified FileModuleBuilder is equal to the current FileModuleBuilder . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current FileModuleBuilder . Returns Boolean true if the specified FileModuleBuilder is equal to the current FileModuleBuilder ; otherwise, false . Remarks If the object passes is an FileModuleBuilder , Equals(FileModuleBuilder) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 WithSource(String) Sets the source URL of the file. Declaration public FileModuleBuilder WithSource(string source) Parameters String source The source URL of the file to be set. Returns FileModuleBuilder The current builder. WithTitle(String) Sets the title of the file. Declaration public FileModuleBuilder WithTitle(string title) Parameters String title The title of the file to be set. Returns FileModuleBuilder The current builder. Operators Equality(FileModuleBuilder, FileModuleBuilder) Determines whether the specified FileModuleBuilder is equal to the current FileModuleBuilder . Declaration public static bool operator ==(FileModuleBuilder left, FileModuleBuilder right) Parameters FileModuleBuilder left FileModuleBuilder right Returns Boolean true if the specified FileModuleBuilder is equal to the current FileModuleBuilder ; otherwise, false . Inequality(FileModuleBuilder, FileModuleBuilder) Determines whether the specified FileModuleBuilder is not equal to the current FileModuleBuilder . Declaration public static bool operator !=(FileModuleBuilder left, FileModuleBuilder right) Parameters FileModuleBuilder left FileModuleBuilder right Returns Boolean true if the specified FileModuleBuilder is not equal to the current FileModuleBuilder ; otherwise, false . Explicit Interface Implementations IModuleBuilder.Build() Builds the IModuleBuilder into an IModule . Declaration IModule IModuleBuilder.Build() Returns IModule An IModule representing the built module object. Implements IModuleBuilder.Build()"
  },
  "api/Kook.Format.html": {
    "href": "api/Kook.Format.html",
    "title": "Class Format | Kook.Net 文档",
    "keywords": "Class Format A helper class for formatting characters. Inheritance Object Format Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public static class Format : object Methods Bold(String, Boolean) Returns a markdown-formatted string with bold formatting. Declaration public static string Bold(this string text, bool sanitize = true) Parameters String text The text to format. Boolean sanitize Whether to sanitize the text. Returns String Gets the formatted text. Remarks Set sanitize to true will sanitize the text by replacing all occurrences of * with * . BoldItalics(String, Boolean) Returns a markdown-formatted string with bold italics formatting. Declaration public static string BoldItalics(this string text, bool sanitize = true) Parameters String text The text to format. Boolean sanitize Whether to sanitize the text. Returns String Gets the formatted text. Remarks Set sanitize to true will sanitize the text by replacing all occurrences of * with * . Colorize(String, TextTheme, Boolean) Returns a markdown-formatted string colored with the specified TextTheme . Declaration public static string Colorize(this string text, TextTheme theme, bool sanitize = true) Parameters String text The text to colorize. TextTheme theme The theme to colorize the text with. Boolean sanitize Whether to sanitize the text. Returns String Gets the colorized text. Remarks warning Colored text is only supported in cards. Italics(String, Boolean) Returns a markdown-formatted string with italics formatting. Declaration public static string Italics(this string text, bool sanitize = true) Parameters String text The text to format. Boolean sanitize Whether to sanitize the text. Returns String Gets the formatted text. Remarks Set sanitize to true will sanitize the text by replacing all occurrences of * with * . Quote(String, Boolean) Formats a string as split quotes seperated by multiple new lines. Declaration public static string Quote(this string text, bool sanitize = true) Parameters String text The text to format. Boolean sanitize Whether to sanitize the text. Returns String Gets the formatted quote text. Remarks warning Due to the mechanism of the KOOK KMarkdown renderer, this method recognizes multiple text blocks based on two or more consecutive line breaks, and formats each block as a quote. For each text block, a greater than sign ( > ) and a space is inserted at the beginning of the string, and a zero-width joiner ( \\u200d ) is inserted when the beginning of the block is a whitespace character, to ensure proper display of the quote. When the user copies the text inside the quote, they will not copy this special character. However, if you obtain the message text from the server through message-related APIs, it will contain the special character inserted by this method. An additional line break is also appended at the end of the block to correct any missing line breaks caused by the quote formatting. The appended line break is consistent with the style of the nearby line breaks. To quote the entire text as a whole, use instead. Set sanitize to true will sanitize the text by replacing all occurrences of > with > . Sanitize(String, String[]) Sanitizes the string, safely escaping any Markdown sequences. Declaration public static string Sanitize(this string text, params string[] sensitiveCharacters) Parameters String text The text to sanitize. String [] sensitiveCharacters The characters to sanitize. Returns String Gets the sanitized text. Remarks If no sensitive characters are specified, the default sensitive characters are used. The default sensitive characters are: </code>, * , ~ , ` , : , - , ] , ) , > . Strikethrough(String, Boolean) Returns a markdown-formatted string with strike-through formatting. Declaration public static string Strikethrough(this string text, bool sanitize = true) Parameters String text The text to format. Boolean sanitize Whether to sanitize the text. Returns String Gets the formatted text. Remarks Set sanitize to true will sanitize the text by replacing all occurrences of ~ with ~ . Url(String, String, Boolean) Returns a markdown-formatted URL. Declaration public static string Url(this string text, string url, bool sanitize = true) Parameters String text The text to format. String url The URL to format. Boolean sanitize Whether to sanitize the text and URL. Returns String Gets the formatted URL. Remarks Set sanitize to true will sanitize the text by replacing all occurrences of [ and ] with [ and ] , and the URL by replacing all occurrences of ( and ) with ( and ) . Url(String, Uri, Boolean) Returns a markdown-formatted URL. Declaration public static string Url(this string text, Uri url, bool sanitize = true) Parameters String text The text to format. Uri url Boolean sanitize Whether to sanitize the text and URL. Returns String Gets the formatted URL. Remarks Set sanitize to true will sanitize the text by replacing all occurrences of [ and ] with [ and ] , and the URL by replacing all occurrences of ( and ) with ( and ) ."
  },
  "api/Kook.FriendState.html": {
    "href": "api/Kook.FriendState.html",
    "title": "Enum FriendState | Kook.Net 文档",
    "keywords": "Enum FriendState Represents a state of a friend relationship with the current user. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum FriendState : int Accepted Represents an accepted friend request, where the user has been added to the current user's friend list. Blocked Represents a blocked friend status, where the user has been blocked by the current user. Pending Represents a pending friend request that has not been accepted yet."
  },
  "api/Kook.GameCreationSource.html": {
    "href": "api/Kook.GameCreationSource.html",
    "title": "Enum GameCreationSource | Kook.Net 文档",
    "keywords": "Enum GameCreationSource Represents the creation source of a game. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum GameCreationSource : int SelfUser Represents that the game was created by the current user. System Represents that the game was created by the system by default."
  },
  "api/Kook.GameProperties.html": {
    "href": "api/Kook.GameProperties.html",
    "title": "Class GameProperties | Kook.Net 文档",
    "keywords": "Class GameProperties Properties that are used to modify an IGame with the specified changes. Inheritance Object GameProperties Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class GameProperties : object Properties IconUrl Gets or sets the icon URL of the game. Declaration public string IconUrl { get; set; } Property Value String Name Gets or sets the name of the game. Declaration public string Name { get; set; } Property Value String See Also ModifyAsync(Action<GameProperties>, RequestOptions)"
  },
  "api/Kook.GameType.html": {
    "href": "api/Kook.GameType.html",
    "title": "Enum GameType | Kook.Net 文档",
    "keywords": "Enum GameType Specifies the type of games. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum GameType : int Game Specifies that the game is just a game. Process Specifies that the game is a process. VirtualUploader Specifies that the game is a virtual uploader."
  },
  "api/Kook.GradientColor.html": {
    "href": "api/Kook.GradientColor.html",
    "title": "Struct GradientColor | Kook.Net 文档",
    "keywords": "Struct GradientColor Represents a gradient color. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct GradientColor Constructors GradientColor(Color, Color) Initializes a new instance of GradientColor . Declaration public GradientColor(Color left, Color right) Parameters Color left The left color of the gradient. Color right The right color of the gradient. Properties Left The left color of the gradient. Declaration public Color Left { get; } Property Value Color Right The right color of the gradient. Declaration public Color Right { get; } Property Value Color Operators Implicit(GradientColor to (Color Left, Color Right)) Converts the GradientColor to a tuple of Color . Declaration public static implicit operator (Color Left, Color Right)(GradientColor gradient) Parameters GradientColor gradient The gradient color to convert. Returns ValueTuple < Color , Color > The tuple of Color . Implicit((Color Left, Color Right) to GradientColor) Converts the tuple of Color to a GradientColor . Declaration public static implicit operator GradientColor((Color Left, Color Right) gradient) Parameters ValueTuple < Color , Color > gradient The tuple of Color to convert. Returns GradientColor The GradientColor ."
  },
  "api/Kook.GuildEmote.html": {
    "href": "api/Kook.GuildEmote.html",
    "title": "Class GuildEmote | Kook.Net 文档",
    "keywords": "Class GuildEmote An image-based emote that is attached to a guild. Inheritance Object Emote GuildEmote Inherited Members Emote.Id Emote.Name Emote.Animated Emote.Equals(Object) Emote.GetHashCode() Emote.Parse(String, TagMode) Emote.TryParse(String, Emote, TagMode) Emote.ToKMarkdownString() Emote.ToPlainTextString() Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class GuildEmote : Emote, IEmote, IEntity<string> Properties CreatorId Gets the user who created this emote. Declaration public ulong? CreatorId { get; } Property Value Nullable < UInt64 > An representing the user who created this emote; null if unknown. GuildId The ID of the guild this emote is attached to. Declaration public ulong GuildId { get; } Property Value UInt64 A ulong that identifies the guild this emote is attached to. Methods ToString() Gets the raw representation of the emote. Declaration public override string ToString() Returns String A string representing the raw presentation of the emote. Overrides Emote.ToString()"
  },
  "api/Kook.GuildFeature.html": {
    "href": "api/Kook.GuildFeature.html",
    "title": "Enum GuildFeature | Kook.Net 文档",
    "keywords": "Enum GuildFeature Represents a feature of a guild. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum GuildFeature : uint KeyAccount The guild is a key account guild. None The guild has no features. Official The guild is an official KOOK guild. Partner The guild is a partner guild."
  },
  "api/Kook.GuildFeatures.html": {
    "href": "api/Kook.GuildFeatures.html",
    "title": "Class GuildFeatures | Kook.Net 文档",
    "keywords": "Class GuildFeatures Represents a collection of features of a guild. Inheritance Object GuildFeatures Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class GuildFeatures : object Properties IsKeyAccount Gets whether or not the guild is a key account guild. Declaration public bool IsKeyAccount { get; } Property Value Boolean IsOfficial Gets whether or not the guild is an official KOOK guild. Declaration public bool IsOfficial { get; } Property Value Boolean IsPartner Gets whether or not the guild is a partner guild. Declaration public bool IsPartner { get; } Property Value Boolean RawValues Gets a collection of string s representing the raw values of the features. Declaration public IReadOnlyCollection<string> RawValues { get; } Property Value IReadOnlyCollection < String > Remarks Features that are not contained in GuildFeature can be found here. Value Gets the flags of recognized features for this guild. Declaration public GuildFeature Value { get; } Property Value GuildFeature Methods HasFeature(GuildFeature) Returns whether or not this guild has a feature. Declaration public bool HasFeature(GuildFeature feature) Parameters GuildFeature feature The feature(s) to check for. Returns Boolean true if this guild has the provided feature(s), otherwise false . HasFeature(String) Returns whether or not this guild has a feature. Declaration public bool HasFeature(string feature) Parameters String feature The feature to check for. Returns Boolean true if this guild has the provided feature, otherwise false ."
  },
  "api/Kook.GuildPermission.html": {
    "href": "api/Kook.GuildPermission.html",
    "title": "Enum GuildPermission | Kook.Net 文档",
    "keywords": "Enum GuildPermission Represents a permission can be granted to a guild. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum GuildPermission : uint AddReactions Allows for the addition of reactions to messages. Administrator Allows all permissions and bypasses channel permission overwrites. AttachFiles Allows for uploading images and files. BanMembers Allows banning members. ChangeNickname Allows for modification of own nickname. Connect Allows for joining of a voice channel. CreateInvites Allows creation of invites. DeafenMembers Allows for deafening of members in a voice channel. FollowReactions Allows for following of added reactions to messages. KickMembers Allows kicking members. ManageChannels Allows management and editing of channels. ManageEmojis Allows management and editing of emojis and stickers. ManageGuild Allows management and editing of guild. ManageInvites Allows for management of invites. ManageMessages Allows for deletion of other users messages. ManageNicknames Allows for modification of other users nicknames. ManageRoles Allows management and editing of roles. ManageVoice Allows for disconnection of members, and moving of members between voice channels. MentionEveryone Allows for using the everyone mention tag to notify all users in a channel, and the online mention tag to notify all online users in a channel. MuteMembers Allows for muting members in a voice channel. OnlyPushToTalk Limits the user to speaking in a voice channel only when pressing the speaking key. PassiveConnect Limits the user to connecting to a voice channel only when the user is invited or moved by others. PlaySoundtrack Allows for playing soundtracks in a voice channel. SendMessages Allows for sending messages in a channel ShareScreen Allows for screen share. Speak Allows for speaking in a voice channel. UseVoiceActivity Allows for speaking in voice a channel without having to press the speaking key. ViewAuditLog Allows for viewing of audit logs. ViewChannel Allows guild members to view a channel, which includes reading messages in text channels."
  },
  "api/Kook.GuildPermissions.html": {
    "href": "api/Kook.GuildPermissions.html",
    "title": "Struct GuildPermissions | Kook.Net 文档",
    "keywords": "Struct GuildPermissions Represents a set of permissions for a guild. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct GuildPermissions Constructors GuildPermissions(Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean) Creates a new GuildPermissions structure with the provided permissions. Declaration public GuildPermissions(bool administrator = false, bool manageGuild = false, bool viewAuditLog = false, bool createInvites = false, bool manageInvites = false, bool manageChannels = false, bool kickMembers = false, bool banMembers = false, bool manageEmojis = false, bool changeNickname = false, bool manageRoles = false, bool viewChannel = false, bool sendMessages = false, bool manageMessages = false, bool attachFiles = false, bool connect = false, bool manageVoice = false, bool mentionEveryone = false, bool addReactions = false, bool followReactions = false, bool passiveConnect = false, bool onlyPushToTalk = false, bool useVoiceActivity = false, bool speak = false, bool deafenMembers = false, bool muteMembers = false, bool manageNicknames = false, bool playSoundtrack = false, bool shareScreen = false) Parameters Boolean administrator Boolean manageGuild Boolean viewAuditLog Boolean createInvites Boolean manageInvites Boolean manageChannels Boolean kickMembers Boolean banMembers Boolean manageEmojis Boolean changeNickname Boolean manageRoles Boolean viewChannel Boolean sendMessages Boolean manageMessages Boolean attachFiles Boolean connect Boolean manageVoice Boolean mentionEveryone Boolean addReactions Boolean followReactions Boolean passiveConnect Boolean onlyPushToTalk Boolean useVoiceActivity Boolean speak Boolean deafenMembers Boolean muteMembers Boolean manageNicknames Boolean playSoundtrack Boolean shareScreen GuildPermissions(String) Creates a new GuildPermissions with the provided packed value after converting to ulong. Declaration public GuildPermissions(string rawValue) Parameters String rawValue GuildPermissions(UInt64) Creates a new GuildPermissions with the provided packed value. Declaration public GuildPermissions(ulong rawValue) Parameters UInt64 rawValue Fields All Gets a GuildPermissions that grants all guild permissions. Declaration public static readonly GuildPermissions All Field Value GuildPermissions None Gets a blank GuildPermissions that grants no permissions. Declaration public static readonly GuildPermissions None Field Value GuildPermissions Properties AddReactions If true , a user may add reactions. Declaration public bool AddReactions { get; } Property Value Boolean Administrator If true , a user is granted all permissions, and cannot have them revoked via channel permissions. Declaration public bool Administrator { get; } Property Value Boolean AttachFiles If true , a user may send files. Declaration public bool AttachFiles { get; } Property Value Boolean BanMembers If true , a user may ban users from the guild. Declaration public bool BanMembers { get; } Property Value Boolean ChangeNickname If true , a user may change their own nickname. Declaration public bool ChangeNickname { get; } Property Value Boolean Connect If true , a user may connect to a voice channel. Declaration public bool Connect { get; } Property Value Boolean CreateInvites If true , a user may create invites. Declaration public bool CreateInvites { get; } Property Value Boolean DeafenMembers If true , a user may deafen users. Declaration public bool DeafenMembers { get; } Property Value Boolean FollowReactions If true , a user may follow added reactions. Declaration public bool FollowReactions { get; } Property Value Boolean KickMembers If true , a user may kick users from the guild. Declaration public bool KickMembers { get; } Property Value Boolean ManageChannels If true , a user may create, delete and modify channels. Declaration public bool ManageChannels { get; } Property Value Boolean ManageEmojis If true , a user may edit the emojis for this guild. Declaration public bool ManageEmojis { get; } Property Value Boolean ManageGuild If true , a user may adjust guild properties. Declaration public bool ManageGuild { get; } Property Value Boolean ManageInvites If true , a user may view and revoke invites. Declaration public bool ManageInvites { get; } Property Value Boolean ManageMessages If true , a user may delete messages. Declaration public bool ManageMessages { get; } Property Value Boolean ManageNicknames If true , a user may change the nickname of other users. Declaration public bool ManageNicknames { get; } Property Value Boolean ManageRoles If true , a user may adjust roles. Declaration public bool ManageRoles { get; } Property Value Boolean ManageVoice If true , a user may kick other users from voice channels, and move other users between voice channels. Declaration public bool ManageVoice { get; } Property Value Boolean MentionEveryone If true , a user may mention all users. Declaration public bool MentionEveryone { get; } Property Value Boolean MuteMembers If true , a user may mute users. Declaration public bool MuteMembers { get; } Property Value Boolean OnlyPushToTalk If true , a user may speak only via push-to-talk. Declaration public bool OnlyPushToTalk { get; } Property Value Boolean PassiveConnect If true , a user may connect to a voice channel only when the user is invited or moved by other users. Declaration public bool PassiveConnect { get; } Property Value Boolean PlaySoundtrack If true , a user may play soundtracks in a voice channel. Declaration public bool PlaySoundtrack { get; } Property Value Boolean RawValue Gets a packed value representing all the permissions in this GuildPermissions . Declaration public ulong RawValue { get; } Property Value UInt64 SendMessages If true , a user may send messages. Declaration public bool SendMessages { get; } Property Value Boolean ShareScreen If true , a user may share screen in a voice channel. Declaration public bool ShareScreen { get; } Property Value Boolean Speak If true , a user may speak in a voice channel. Declaration public bool Speak { get; } Property Value Boolean UseVoiceActivity If true , a user may use voice activation. Declaration public bool UseVoiceActivity { get; } Property Value Boolean ViewAuditLog If true , a user may view the audit log. Declaration public bool ViewAuditLog { get; } Property Value Boolean ViewChannel If true , a user may view channels. Declaration public bool ViewChannel { get; } Property Value Boolean Methods Has(GuildPermission) Returns a value that indicates if a specific GuildPermission is enabled in these permissions. Declaration public bool Has(GuildPermission permission) Parameters GuildPermission permission The permission value to check for. Returns Boolean true if the permission is enabled, false otherwise. Modify(Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>) Creates a new GuildPermissions from this one, changing the provided non-null permissions. Declaration public GuildPermissions Modify(bool? administrator = null, bool? manageGuild = null, bool? viewAuditLog = null, bool? createInvites = null, bool? manageInvites = null, bool? manageChannels = null, bool? kickMembers = null, bool? banMembers = null, bool? manageEmojis = null, bool? changeNickname = null, bool? manageRoles = null, bool? viewChannel = null, bool? sendMessages = null, bool? manageMessages = null, bool? attachFiles = null, bool? connect = null, bool? manageVoice = null, bool? mentionEveryone = null, bool? addReactions = null, bool? followReactions = null, bool? passiveConnect = null, bool? onlyPushToTalk = null, bool? useVoiceActivity = null, bool? speak = null, bool? deafenMembers = null, bool? muteMembers = null, bool? manageNicknames = null, bool? playSoundtrack = null, bool? shareScreen = null) Parameters Nullable < Boolean > administrator Nullable < Boolean > manageGuild Nullable < Boolean > viewAuditLog Nullable < Boolean > createInvites Nullable < Boolean > manageInvites Nullable < Boolean > manageChannels Nullable < Boolean > kickMembers Nullable < Boolean > banMembers Nullable < Boolean > manageEmojis Nullable < Boolean > changeNickname Nullable < Boolean > manageRoles Nullable < Boolean > viewChannel Nullable < Boolean > sendMessages Nullable < Boolean > manageMessages Nullable < Boolean > attachFiles Nullable < Boolean > connect Nullable < Boolean > manageVoice Nullable < Boolean > mentionEveryone Nullable < Boolean > addReactions Nullable < Boolean > followReactions Nullable < Boolean > passiveConnect Nullable < Boolean > onlyPushToTalk Nullable < Boolean > useVoiceActivity Nullable < Boolean > speak Nullable < Boolean > deafenMembers Nullable < Boolean > muteMembers Nullable < Boolean > manageNicknames Nullable < Boolean > playSoundtrack Nullable < Boolean > shareScreen Returns GuildPermissions ToList() Returns a containing all of the GuildPermission flags that are enabled. Declaration public List<GuildPermission> ToList() Returns List < GuildPermission > A containing GuildPermission flags. Empty if none are enabled. ToString() Gets the raw value of the permissions. Declaration public override string ToString() Returns String"
  },
  "api/Kook.GuildProperties.html": {
    "href": "api/Kook.GuildProperties.html",
    "title": "Class GuildProperties | Kook.Net 文档",
    "keywords": "Class GuildProperties Provides properties that are used to modify an with the specified changes. Inheritance Object GuildProperties Namespace : Kook Assembly : Kook.Net.Experimental.dll Syntax public class GuildProperties : object Remarks warning This entity is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future. Properties DefaultChannel Gets or sets the default channel. Declaration public ITextChannel DefaultChannel { get; set; } Property Value ITextChannel An which is the default channel; null if nothing changes. To clear the manually assigned default channel, set DefaultChannelId to 0 instead. DefaultChannelId Gets or sets the ID of the default channel. Declaration public ulong? DefaultChannelId { get; set; } Property Value Nullable < UInt64 > An ulong representing the identifier of the default channel. null if nothing changes. 0 if set to none. EnableOpen Gets or sets whether the guild is open. Declaration public bool? EnableOpen { get; set; } Property Value Nullable < Boolean > GuildId Gets or sets the identifier of the guild to modify. Declaration public ulong GuildId { get; set; } Property Value UInt64 Region Gets or sets the region for the guild's voice connections. Declaration public IVoiceRegion Region { get; set; } Property Value IVoiceRegion RegionId Gets or sets the ID of the region for the guild's voice connections. Declaration public string RegionId { get; set; } Property Value String WelcomeChannel Gets or sets the welcome channel. Declaration public ITextChannel WelcomeChannel { get; set; } Property Value ITextChannel An where welcome messages are sent; null if nothing changes. To clear the welcome channel, set WelcomeChannelId to 0 instead. WelcomeChannelId Gets or sets the ID of welcome channel. Declaration public ulong? WelcomeChannelId { get; set; } Property Value Nullable < UInt64 > An ulong representing the identifier of the channel where welcome messages are sent; null if nothing changes. 0 if set to none. WidgetChannel Gets the channel assigned to the widget of this guild. Declaration public ITextChannel WidgetChannel { get; set; } Property Value ITextChannel An assigned to the widget found within the widget settings of this guild; null if nothing changes; To clear the widget channel, set WidgetChannelId to 0 instead. WidgetChannelId Gets the ID of the channel assigned to the widget of this guild. Declaration public ulong? WidgetChannelId { get; set; } Property Value Nullable < UInt64 > A ulong representing the identifier of the channel assigned to the widget found within the widget settings of this guild; null if nothing changes; 0 if set to none."
  },
  "api/Kook.HeaderModule.html": {
    "href": "api/Kook.HeaderModule.html",
    "title": "Class HeaderModule | Kook.Net 文档",
    "keywords": "Class HeaderModule Represents a header module in an ICard . Inheritance Object HeaderModule Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class HeaderModule : object, IModule, IEquatable<HeaderModule> Properties Text Gets the text element of the header. Declaration public PlainTextElement Text { get; } Property Value PlainTextElement A PlainTextElement representing the text of the header. Type Gets the type of the module. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Implements IModule.Type Methods Equals(HeaderModule) Determines whether the specified HeaderModule is equal to the current HeaderModule . Declaration public bool Equals(HeaderModule headerModule) Parameters HeaderModule headerModule The HeaderModule to compare with the current HeaderModule . Returns Boolean true if the specified HeaderModule is equal to the current HeaderModule ; otherwise, false . Equals(Object) Determines whether the specified HeaderModule is equal to the current HeaderModule . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current HeaderModule . Returns Boolean true if the specified HeaderModule is equal to the current HeaderModule ; otherwise, false . Remarks If the object passes is an HeaderModule , Equals(HeaderModule) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 ToString() Declaration public override string ToString() Returns String Operators Equality(HeaderModule, HeaderModule) Determines whether the specified HeaderModule is equal to the current HeaderModule . Declaration public static bool operator ==(HeaderModule left, HeaderModule right) Parameters HeaderModule left HeaderModule right Returns Boolean true if the specified HeaderModule is equal to the current HeaderModule ; otherwise, false . Inequality(HeaderModule, HeaderModule) Determines whether the specified HeaderModule is not equal to the current HeaderModule . Declaration public static bool operator !=(HeaderModule left, HeaderModule right) Parameters HeaderModule left HeaderModule right Returns Boolean true if the specified HeaderModule is not equal to the current HeaderModule ; otherwise, false . Extension Methods CardExtensions.ToBuilder(HeaderModule)"
  },
  "api/Kook.HeaderModuleBuilder.html": {
    "href": "api/Kook.HeaderModuleBuilder.html",
    "title": "Class HeaderModuleBuilder | Kook.Net 文档",
    "keywords": "Class HeaderModuleBuilder Represents a header module builder for creating a HeaderModule . Inheritance Object HeaderModuleBuilder Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class HeaderModuleBuilder : object, IModuleBuilder, IEquatable<HeaderModuleBuilder> Constructors HeaderModuleBuilder() Initializes a new instance of the HeaderModuleBuilder class. Declaration public HeaderModuleBuilder() HeaderModuleBuilder(PlainTextElementBuilder) Initializes a new instance of the HeaderModuleBuilder class. Declaration public HeaderModuleBuilder(PlainTextElementBuilder text) Parameters PlainTextElementBuilder text The text to be set for the header. HeaderModuleBuilder(String) Initializes a new instance of the HeaderModuleBuilder class. Declaration public HeaderModuleBuilder(string text) Parameters String text The text to be set for the header. Fields MaxTitleContentLength Gets the maximum content length for header allowed by Kook. Declaration public const int MaxTitleContentLength = null Field Value Int32 Properties Text Gets or sets the text of the header. Declaration public PlainTextElementBuilder Text { get; set; } Property Value PlainTextElementBuilder A PlainTextElementBuilder representing the text of the header. Type Specifies the module type of the IModule this builder creates. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Implements IModuleBuilder.Type Methods Build() Builds this builder into a HeaderModule . Declaration public HeaderModule Build() Returns HeaderModule A HeaderModule representing the built header module object. Equals(HeaderModuleBuilder) Determines whether the specified HeaderModuleBuilder is equal to the current HeaderModuleBuilder . Declaration public bool Equals(HeaderModuleBuilder headerModuleBuilder) Parameters HeaderModuleBuilder headerModuleBuilder The HeaderModuleBuilder to compare with the current HeaderModuleBuilder . Returns Boolean true if the specified HeaderModuleBuilder is equal to the current HeaderModuleBuilder ; otherwise, false . Equals(Object) Determines whether the specified HeaderModuleBuilder is equal to the current HeaderModuleBuilder . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current HeaderModule . Returns Boolean true if the specified HeaderModuleBuilder is equal to the current HeaderModuleBuilder ; otherwise, false . Remarks If the object passes is an HeaderModuleBuilder , Equals(HeaderModuleBuilder) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 WithText(Action<PlainTextElementBuilder>) Sets the text of the header. Declaration public HeaderModuleBuilder WithText(Action<PlainTextElementBuilder> action) Parameters Action < PlainTextElementBuilder > action The action to set the text of the header. Returns HeaderModuleBuilder The current builder. WithText(PlainTextElementBuilder) Sets the text of the header. Declaration public HeaderModuleBuilder WithText(PlainTextElementBuilder text) Parameters PlainTextElementBuilder text The text to be set for the header. Returns HeaderModuleBuilder The current builder. WithText(String) Sets the text of the header. Declaration public HeaderModuleBuilder WithText(string text) Parameters String text The text to be set for the header. Returns HeaderModuleBuilder The current builder. Operators Equality(HeaderModuleBuilder, HeaderModuleBuilder) Determines whether the specified HeaderModuleBuilder is equal to the current HeaderModuleBuilder . Declaration public static bool operator ==(HeaderModuleBuilder left, HeaderModuleBuilder right) Parameters HeaderModuleBuilder left HeaderModuleBuilder right Returns Boolean true if the specified HeaderModuleBuilder is equal to the current HeaderModuleBuilder ; otherwise, false . Implicit(String to HeaderModuleBuilder) Initialized a new instance of the HeaderModuleBuilder class with the specified text . Declaration public static implicit operator HeaderModuleBuilder(string text) Parameters String text The text to be set for the header. Returns HeaderModuleBuilder An HeaderModuleBuilder object that is initialized with the specified text . Inequality(HeaderModuleBuilder, HeaderModuleBuilder) Determines whether the specified HeaderModuleBuilder is not equal to the current HeaderModuleBuilder . Declaration public static bool operator !=(HeaderModuleBuilder left, HeaderModuleBuilder right) Parameters HeaderModuleBuilder left HeaderModuleBuilder right Returns Boolean true if the specified HeaderModuleBuilder is not equal to the current HeaderModuleBuilder ; otherwise, false . Explicit Interface Implementations IModuleBuilder.Build() Builds the IModuleBuilder into an IModule . Declaration IModule IModuleBuilder.Build() Returns IModule An IModule representing the built module object. Implements IModuleBuilder.Build()"
  },
  "api/Kook.html": {
    "href": "api/Kook.html",
    "title": "Namespace Kook | Kook.Net 文档",
    "keywords": "Namespace Kook Classes ActionGroupModule Represents an action group module that can be used in an ICard . ActionGroupModuleBuilder Represents a action group module builder for creating an ActionGroupModule . AsyncEnumerableExtensions An extension class for squashing . Attachment Represents a message attachment found in a IUserMessage . AudioModule Represents an audio module that can be used in an ICard . AudioModuleBuilder Represents a audio module builder for creating an AudioModule . BoostSubscriptionMetadata A meta data containing boost subscription information. ButtonElement A button element that can be used in an IModule . ButtonElementBuilder An element builder to build a ButtonElement . Card Represents a card object seen in an IUserMessage . CardBuilder Represents a builder class for creating a Card . CardExtensions Provides extension methods for IElement , IModule and ICard . ChannelExtensions Provides extension methods for IChannel . ContainerModule Represents a container module that can be used in an ICard . ContainerModuleBuilder Represents a container module builder for creating a ContainerModule . ContextModule Represents a context module that can be used in an ICard . ContextModuleBuilder Represents a context module builder for creating a ContextModule . CountdownModule Represents a countdown module that can be used in an ICard . CountdownModuleBuilder Represents a countdown module builder for creating a CountdownModule . CreateCategoryChannelProperties Provides properties that are used to create an ICategoryChannel with the specified properties. CreateGuildChannelProperties Properties that are used to create an IGuildChannel with the specified properties. CreateTextChannelProperties Provides properties that are used to create an ITextChannel with the specified properties. CreateVoiceChannelProperties Provides properties that are used to create an IVoiceChannel with the specified properties. DividerModule A divider module that can be used in an ICard . DividerModuleBuilder Represents a divider module builder for creating a DividerModule . Emoji A Unicode emoji. Emote Represents a guild emote. FileModule A file module that can be used in an ICard . FileModuleBuilder Represents a file module builder for creating a FileModule . Format A helper class for formatting characters. GameProperties Properties that are used to modify an IGame with the specified changes. GuildEmote An image-based emote that is attached to a guild. GuildFeatures Represents a collection of features of a guild. GuildProperties Provides properties that are used to modify an with the specified changes. HeaderModule Represents a header module in an ICard . HeaderModuleBuilder Represents a header module builder for creating a HeaderModule . ImageElement An image element that can be used in an IModule . ImageElementBuilder An element builder to build an ImageElement . ImageGroupModule Represents an image group module that can be used in an ICard . ImageGroupModuleBuilder Representing an image group module builder for create an ImageGroupModule . IntimacyImage Represents a single image of an intimacy. IntimacyProperties Properties that are used to modify an IIntimacy with the specified changes. InviteModule An invite module that can be used in an ICard . InviteModuleBuilder Represents a invite module builder for creating an InviteModule . KMarkdownElement A KMarkdown element that can be used in an IModule . KMarkdownElementBuilder An element builder to build a KMarkdownElement . KookConfig Defines various behaviors of Kook.Net. MentionUtils Provides a series of helper methods for parsing mentions. MessageExtensions Provides extension methods for IMessage . MessageProperties Properties that are used to modify an IUserMessage with the specified changes. ModifyGuildChannelProperties Properties that are used to modify an IGuildChannel with the specified properties. ModifyTextChannelProperties Provides properties that are used to modify an ITextChannel with the specified properties. ModifyVoiceChannelProperties Provides properties that are used to modify an IVoiceChannel with the specified properties. Music Represents a music activity. Nameplate Representing a nameplate an IUser can have. ParagraphStruct A paragraph struct that can be used in modules. ParagraphStructBuilder An element builder to build a ParagraphStruct . PlainTextElement A plain text element that can be used in an IModule . PlainTextElementBuilder An element builder to build a PlainTextElement . Preconditions Provides methods to check preconditions. Quote Represents a generic message quote. RequestOptions Represents options that should be used when sending a request. RolePermissionOverwrite Represent a permission object for a role. RoleProperties Properties that are used to modify an IRole with the specified changes. SearchGuildMemberProperties Properties that are used to search for a IGuildUser in a IGuild . SectionModule Represents a section module in card. SectionModuleBuilder Represents a section module builder for creating a SectionModule . Tag<T> Represents a tag found in IMessage . TokenUtils Provides a series of helper methods for handling Kook login tokens. UserExtensions An extension class for various Kook user objects. UserPermissionOverwrite Represent a permission object for a user. UserTag Representing a tag an IUser can have. VideoModule Represents a video module in an ICard . VideoModuleBuilder Represents a video module builder for creating a VideoModule . Structs AlphaColor Represents a Color with an alpha channel. BilibiliVideoEmbed Represents an embed in a message that links to a Bilibili video. Cacheable<TEntity, TId> Represents a cached entity. Cacheable<TCachedEntity, TDownloadableEntity, TRelationship, TId> Represents a cached entity that can be downloaded. ChannelPermissions Represents a set of permissions for a channel. Color Represents a color used in Kook. FileAttachment Represents a file attachment. GradientColor Represents a gradient color. GuildPermissions Represents a set of permissions for a guild. Image An image that will be uploaded to Kook. ImageAnimationPokeResource Represents an image animation poke resource. ImageEmbed Represents an image embed. KookError Represents an error with a property. KookJsonError Represents a generic parsed json error received from Kook after performing a rest request. LinkEmbed Represents a link embed. LogMessage Provides a message object used for logging purposes. NotImplementedEmbed Represents a unimplemented embed. NotImplementedPokeResource Represents a poke resource that is not implemented to be resolved yet. OverwritePermissions Represents a container for a series of overwrite permissions. PokeIcon Represents an icon of an IPoke . PokeLabel Represents the label of a IPoke . PokeQuality Represents the quality of a IPoke . ReactionMetadata A metadata containing reaction information. Interfaces IActivity A user's activity status. IAttachment Represents a message attachment found in a IUserMessage . IAudioChannel Represents a generic audio channel. IBan Represents a generic ban object. ICard Represents a generic card. ICardBuilder Represents a generic card builder for creating a ICard . ICategoryChannel Represents a generic category channel. IChannel Represents a generic channel. IDeletable Determines whether the object is deletable or not. IDMChannel Represents a generic direct-message channel. IElement A generic element used in modules. IElementBuilder A generic builder for creating an IElement . IEmbed Represents a generic embed. IEmote Represents a general container for any type of emote in a message. IEntity<TId> Represents a generic entity that has a unique identifier. IFriendRequest Represents a generic friend request. IGame Represents a generic game object. IGuild Represents a generic guild/server. IGuildChannel Represents a generic guild channel. IGuildUser Represents a generic guild user. IIntimacy Represents a generic intimacy. IInvite Represents a generic invite. IKookClient Represents a generic Kook client. IMediaModule A generic media module that can be used in an ICard . IMentionable Determines whether the object is mentionable or not. IMessage Represents a message object. IMessageChannel Represents a channel that can send and receive messages. IModule Represents a generic module that can be used in an ICard . IModuleBuilder A generic module builder for creating an IModule . INestedChannel Represents a type of guild channel that can be nested within a category. IPermissionOverwrite<TTarget> Represents a generic permission overwrite. IPoke Represents a generic poke. IPokeAction Represents a single generic poke action. IPokeResource Represents a generic poke resource. IPresence Represents the user's presence status. This may include their online status and their activity. IPrivateChannel Represents a generic channel that is private to selected recipients. IQuote Represents a generic message quote. IRateLimitInfo Represents a generic ratelimit info. IReaction Represents a generic reaction object. IRecommendInfo Represents a generic recommendation information. IRole Represents a generic role object to be given to a guild user. ISelfUser Represents the logged-in Kook user. ISystemMessage Represents a generic message sent by the system. ITag Gets a generic tag found in messages. ITextChannel Represents a generic channel in a guild that can send and receive messages. IUpdateable Defines whether the object is updateable or not. IUser Represents a generic user. IUserMessage Represents a generic message sent by a user. IVoiceChannel Represents a generic voice channel in a guild. IVoiceRegion Represents a region of which the user connects to when using voice. IVoiceState Represents a user's voice connection status. Enums ActivityType Specifies the type of activities. AttachmentType Specifies the type of the attachment. BadgeStyle Specifies the style of badges. BoostLevel Specifies the boost level of a guild. ButtonClickEventType Specifies the event type fired when a ButtonElement is clicked. ButtonTheme Specifies the theme of a ButtonElement . CacheMode Specifies the cache mode that should be used. CardSize Specifies the size of a card. CardTheme Specifies the theme of the card. CardType Specifies the type of the card. ChannelPermission Represents a permission can be granted to a channel. ChannelType Specifies the type of a guild channel. ClientType Defines the types of clients a user can be active on. ColorType Represents the type of color a role has. ConnectionState Specifies the connection state of a client. CountdownMode Specifies the display mode for the countdown timer. CreateAttachmentMode Indicates that how the FileAttachment will be operated to attache files. Direction Specifies the direction of where message(s) should be retrieved from. ElementType Specifies the type of an IElement . EmbedType Represents the type of an embed. EmojiType Specifies the type of an emoji. FriendState Represents a state of a friend relationship with the current user. GameCreationSource Represents the creation source of a game. GameType Specifies the type of games. GuildFeature Represents a feature of a guild. GuildPermission Represents a permission can be granted to a guild. ImageSize Specifies the size of the image in ImageElement . InviteMaxAge Specifies the time in second after which an IInvite will be expired. InviteMaxUses Specifies the number of uses after which an IInvite will be expired. KookErrorCode Represents a set of json error codes received by Kook. LoginState Specifies the state of the client's login status. LogSeverity Specifies the severity of the log message. MessageSource Specifies the source of the Kook message. MessageType Represents the type of a message. ModuleType Specifies the type of an IModule . MusicProvider Specifies the provider of music. NotifyType Specifies that how the guild should notify the user. PermValue Specifies the permission value. PokeResourceType Represents the type of a IPokeResource . RequestFriendSource Represents a source from which a friend request is sent. RetryMode Specifies how a request should act in the case of an error. RoleType Represents the type of a role. SectionAccessoryMode Specifies the accessory position relative to the text element. SlowModeInterval Specifies the slow-mode ratelimit in seconds for an ITextChannel . SortMode Specifies the sorting mode. SystemMessageType Gets the type of a ISystemMessage TagHandling Specifies the handling type the tag should use. TagMode Represents the mode to parse tags. TagType Specifies the type of Kook tag. TextTheme Represents text themes used in Colorize(String, TextTheme, Boolean) . TokenType Specifies the type of token to use with the client. VoiceQuality Specifies the voice quality of an IVoiceChannel ."
  },
  "api/Kook.IActivity.html": {
    "href": "api/Kook.IActivity.html",
    "title": "Interface IActivity | Kook.Net 文档",
    "keywords": "Interface IActivity A user's activity status. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IActivity"
  },
  "api/Kook.IAttachment.html": {
    "href": "api/Kook.IAttachment.html",
    "title": "Interface IAttachment | Kook.Net 文档",
    "keywords": "Interface IAttachment Represents a message attachment found in a IUserMessage . Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IAttachment Properties Duration Gets the duration of the attachment. Declaration TimeSpan? Duration { get; } Property Value Nullable < TimeSpan > Remarks A timespan representing the duration of the attachment; null if the duration is unknown or not applicable. Filename Gets the filename of this attachment. Declaration string Filename { get; } Property Value String A string containing the full filename of this attachment. FileType Gets the file type of the attachment. Declaration string FileType { get; } Property Value String A string representing the file type of the attachment; null if the file type is unknown or not applicable. Height Gets the height of the attachment. Declaration int? Height { get; } Property Value Nullable < Int32 > An int representing the height of the attachment; null if the height is unknown or not applicable. Size Gets the file size of the attachment. Declaration int? Size { get; } Property Value Nullable < Int32 > An int representing the file size of the attachment; null if the file size is unknown or not applicable. Type Gets the type of the attachment. Declaration AttachmentType Type { get; } Property Value AttachmentType An AttachmentType representing the type of the attachment. Url Gets the URL of the attachment. Declaration string Url { get; } Property Value String A string representing the URL of the attachment. Width Gets the width of the attachment. Declaration int? Width { get; } Property Value Nullable < Int32 > An int representing the width of the attachment; null if the width is unknown or not applicable."
  },
  "api/Kook.IAudioChannel.html": {
    "href": "api/Kook.IAudioChannel.html",
    "title": "Interface IAudioChannel | Kook.Net 文档",
    "keywords": "Interface IAudioChannel Represents a generic audio channel. Inherited Members IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions) IEntity<UInt64>.Id Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IAudioChannel : IChannel, IEntity<ulong> Properties IsVoiceRegionOverwritten Gets whether the voice region of this audio channel is overwritten. Declaration bool? IsVoiceRegionOverwritten { get; } Property Value Nullable < Boolean > ServerUrl Gets the server url that clients should connect to to join this voice channel. Declaration string ServerUrl { get; } Property Value String A string representing the url that clients should connect to to join this voice channel. VoiceRegion Gets the voice region for this audio channel. Declaration string VoiceRegion { get; } Property Value String Remarks warning This property may be empty if the voice channel is created before this feature was released. Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel)"
  },
  "api/Kook.IBan.html": {
    "href": "api/Kook.IBan.html",
    "title": "Interface IBan | Kook.Net 文档",
    "keywords": "Interface IBan Represents a generic ban object. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IBan Properties CreatedAt Gets the time when the ban was issued. Declaration DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTime object that represents the time when the ban was issued. Reason Gets the reason why the user is banned if specified. Declaration string Reason { get; } Property Value String A string containing the reason behind the ban; null if none is specified. User Gets the banned user. Declaration IUser User { get; } Property Value IUser A user that was banned."
  },
  "api/Kook.ICard.html": {
    "href": "api/Kook.ICard.html",
    "title": "Interface ICard | Kook.Net 文档",
    "keywords": "Interface ICard Represents a generic card. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface ICard Properties ModuleCount Gets the number of the modules in this card. Declaration int ModuleCount { get; } Property Value Int32 An int value that represents how many modules are in this card. Type Gets the type of the card. Declaration CardType Type { get; } Property Value CardType A CardType value that represents the type of the card. Extension Methods CardExtensions.ToBuilder(ICard)"
  },
  "api/Kook.ICardBuilder.html": {
    "href": "api/Kook.ICardBuilder.html",
    "title": "Interface ICardBuilder | Kook.Net 文档",
    "keywords": "Interface ICardBuilder Represents a generic card builder for creating a ICard . Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface ICardBuilder Properties Type Gets the type of the ICard this builder creates. Declaration CardType Type { get; } Property Value CardType Methods Build() Builds the ICardBuilder into an ICard . Declaration ICard Build() Returns ICard An ICard represents the built card object."
  },
  "api/Kook.ICategoryChannel.html": {
    "href": "api/Kook.ICategoryChannel.html",
    "title": "Interface ICategoryChannel | Kook.Net 文档",
    "keywords": "Interface ICategoryChannel Represents a generic category channel. Inherited Members IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.Position IGuildChannel.Type IGuildChannel.CreatorId IGuildChannel.RolePermissionOverwrites IGuildChannel.UserPermissionOverwrites IGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) IGuildChannel.GetCreatorAsync(CacheMode, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions) IChannel.Name IEntity<UInt64>.Id IDeletable.DeleteAsync(RequestOptions) Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface ICategoryChannel : IGuildChannel, IChannel, IEntity<ulong>, IDeletable Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel)"
  },
  "api/Kook.IChannel.html": {
    "href": "api/Kook.IChannel.html",
    "title": "Interface IChannel | Kook.Net 文档",
    "keywords": "Interface IChannel Represents a generic channel. Inherited Members IEntity<UInt64>.Id Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IChannel : IEntity<ulong> Properties Name Gets the name of this channel. Declaration string Name { get; } Property Value String A string containing the name of this channel. Methods GetUserAsync(UInt64, CacheMode, RequestOptions) Gets a user in this channel. Declaration Task<IUser> GetUserAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters UInt64 id The identifier of the user (e.g. 168693960628371456 ). CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IUser > A task that represents the asynchronous get operation. The task result contains a user object that represents the found user; null if none is found. GetUsersAsync(CacheMode, RequestOptions) Gets a collection of users that are able to view the channel or are currently in this channel. Declaration IAsyncEnumerable<IReadOnlyCollection<IUser>> GetUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < IUser >> Paged collection of users. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. This method will attempt to fetch all users that is able to view this channel or is currently in this channel. The library will attempt to split up the requests according to and MaxUsersPerBatch . In other words, if there are 3000 users, and the MaxUsersPerBatch constant is 50 , the request will be split into 60 individual requests; thus returning 60 individual asynchronous responses, hence the need of flattening. Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel)"
  },
  "api/Kook.IDeletable.html": {
    "href": "api/Kook.IDeletable.html",
    "title": "Interface IDeletable | Kook.Net 文档",
    "keywords": "Interface IDeletable Determines whether the object is deletable or not. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IDeletable Methods DeleteAsync(RequestOptions) Deletes this object and all its children. Declaration Task DeleteAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task"
  },
  "api/Kook.IDMChannel.html": {
    "href": "api/Kook.IDMChannel.html",
    "title": "Interface IDMChannel | Kook.Net 文档",
    "keywords": "Interface IDMChannel Represents a generic direct-message channel. Inherited Members IMessageChannel.SendFileAsync(String, String, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(Stream, String, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(FileAttachment, IQuote, IUser, RequestOptions) IMessageChannel.SendTextAsync(String, IQuote, IUser, RequestOptions) IMessageChannel.SendCardAsync(ICard, IQuote, IUser, RequestOptions) IMessageChannel.SendCardsAsync(IEnumerable<ICard>, IQuote, IUser, RequestOptions) IMessageChannel.GetMessageAsync(Guid, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(Int32, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(Guid, Direction, Int32, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions) IMessageChannel.DeleteMessageAsync(Guid, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) IMessageChannel.ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions) IPrivateChannel.Recipients IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions) Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IDMChannel : IMessageChannel, IPrivateChannel, IChannel, IEntity<ulong>, IEntity<Guid> Properties ChatCode Gets the chat code of the direct-message channel. Declaration Guid ChatCode { get; } Property Value Guid A that represents the chat code of the direct-message channel. Id Gets the unique identifier of this direct-message channel. Declaration Guid Id { get; } Property Value Guid A that represents this direct-message channel's unique identifier. Recipient Gets the recipient of all messages in this channel. Declaration IUser Recipient { get; } Property Value IUser A user object that represents the other user in this channel. Methods CloseAsync(RequestOptions) Closes this private channel, removing it from your channel list. Declaration Task CloseAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous close operation. SendCardAsync(ICard, IQuote, RequestOptions) Sends a card message to this message channel. Declaration Task<Cacheable<IUserMessage, Guid>> SendCardAsync(ICard card, IQuote quote = null, RequestOptions options = null) Parameters ICard card IQuote quote RequestOptions options Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendCardsAsync(IEnumerable<ICard>, IQuote, RequestOptions) Sends a card message to this message channel. Declaration Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(IEnumerable<ICard> cards, IQuote quote = null, RequestOptions options = null) Parameters IEnumerable < ICard > cards IQuote quote RequestOptions options Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendFileAsync(FileAttachment, IQuote, RequestOptions) Sends a file to this message channel. Declaration Task<Cacheable<IUserMessage, Guid>> SendFileAsync(FileAttachment attachment, IQuote quote = null, RequestOptions options = null) Parameters FileAttachment attachment IQuote quote RequestOptions options Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendFileAsync(Stream, String, AttachmentType, IQuote, RequestOptions) Sends a file to this message channel. Declaration Task<Cacheable<IUserMessage, Guid>> SendFileAsync(Stream stream, string fileName = null, AttachmentType type = AttachmentType.File, IQuote quote = null, RequestOptions options = null) Parameters Stream stream String fileName AttachmentType type IQuote quote RequestOptions options Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendFileAsync(String, String, AttachmentType, IQuote, RequestOptions) Sends a file to this message channel. Declaration Task<Cacheable<IUserMessage, Guid>> SendFileAsync(string path, string fileName = null, AttachmentType type = AttachmentType.File, IQuote quote = null, RequestOptions options = null) Parameters String path String fileName AttachmentType type IQuote quote RequestOptions options Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendTextAsync(String, IQuote, RequestOptions) Sends a text message to this message channel. Declaration Task<Cacheable<IUserMessage, Guid>> SendTextAsync(string text, IQuote quote = null, RequestOptions options = null) Parameters String text IQuote quote RequestOptions options Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel)"
  },
  "api/Kook.IElement.html": {
    "href": "api/Kook.IElement.html",
    "title": "Interface IElement | Kook.Net 文档",
    "keywords": "Interface IElement A generic element used in modules. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IElement Properties Type Gets the type of this element. Declaration ElementType Type { get; } Property Value ElementType Extension Methods CardExtensions.ToBuilder(IElement)"
  },
  "api/Kook.IElementBuilder.html": {
    "href": "api/Kook.IElementBuilder.html",
    "title": "Interface IElementBuilder | Kook.Net 文档",
    "keywords": "Interface IElementBuilder A generic builder for creating an IElement . Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IElementBuilder Properties Type Specifies the type of the element to be created. Declaration ElementType Type { get; } Property Value ElementType An ElementType that specifies the type of the element to be created. Methods Build() Builds the IElementBuilder into an IElement . Declaration IElement Build() Returns IElement An IElement represents the built element object."
  },
  "api/Kook.IEmbed.html": {
    "href": "api/Kook.IEmbed.html",
    "title": "Interface IEmbed | Kook.Net 文档",
    "keywords": "Interface IEmbed Represents a generic embed. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IEmbed Properties Type Gets the type of this embed. Declaration EmbedType Type { get; } Property Value EmbedType A EmbedType that represents the type of this embed. Url Gets the URL of this embed. Declaration string Url { get; } Property Value String A string that represents the URL of this embed. See Also Embeds"
  },
  "api/Kook.IEmote.html": {
    "href": "api/Kook.IEmote.html",
    "title": "Interface IEmote | Kook.Net 文档",
    "keywords": "Interface IEmote Represents a general container for any type of emote in a message. Inherited Members IEntity<String>.Id Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IEmote : IEntity<string> Properties Name Gets the display name or Unicode representation of this emote. Declaration string Name { get; } Property Value String A string representing the display name or the Unicode representation (e.g. 🤔 ) of this emote."
  },
  "api/Kook.IEntity-1.html": {
    "href": "api/Kook.IEntity-1.html",
    "title": "Interface IEntity<TId> | Kook.Net 文档",
    "keywords": "Interface IEntity<TId> Represents a generic entity that has a unique identifier. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IEntity<TId> where TId : IEquatable<TId> Type Parameters TId The type of the unique identifier. Properties Id Gets the unique identifier for this object. Declaration TId Id { get; } Property Value TId"
  },
  "api/Kook.IFriendRequest.html": {
    "href": "api/Kook.IFriendRequest.html",
    "title": "Interface IFriendRequest | Kook.Net 文档",
    "keywords": "Interface IFriendRequest Represents a generic friend request. Inherited Members IEntity<UInt64>.Id Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IFriendRequest : IEntity<ulong> Properties User Gets the user who sent this friend request. Declaration IUser User { get; } Property Value IUser Methods AcceptAsync(RequestOptions) Accepts this friend request. Declaration Task AcceptAsync(RequestOptions options = null) Parameters RequestOptions options The options to use when accepting this friend request. Returns Task A task that represents the asynchronous accept operation. DeclineAsync(RequestOptions) Declines this friend request. Declaration Task DeclineAsync(RequestOptions options = null) Parameters RequestOptions options The options to use when declining this friend request. Returns Task A task that represents the asynchronous decline operation."
  },
  "api/Kook.IGame.html": {
    "href": "api/Kook.IGame.html",
    "title": "Interface IGame | Kook.Net 文档",
    "keywords": "Interface IGame Represents a generic game object. Inherited Members IEntity<Int32>.Id IDeletable.DeleteAsync(RequestOptions) Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IGame : IActivity, IEntity<int>, IDeletable Properties GameType Gets the type of the game. Declaration GameType GameType { get; } Property Value GameType The type of the game. Icon Gets the URL of the game's icon. Declaration string Icon { get; } Property Value String A string representing the URL of the game's icon. Name Gets the name of the game. Declaration string Name { get; } Property Value String A string containing the name of the game. Options Gets the additional information about the game. Declaration string Options { get; } Property Value String A string containing the additional information about the game. ProcessNames Gets the process names of the game. Declaration IReadOnlyCollection<string> ProcessNames { get; } Property Value IReadOnlyCollection < String > An containing the process names of the game. ProductNames Gets the product names of the game. Declaration IReadOnlyCollection<string> ProductNames { get; } Property Value IReadOnlyCollection < String > An containing the product names of the game. RequireAdminPrivilege Gets whether the Kook client needs administrator privileges to detect the game. Declaration bool RequireAdminPrivilege { get; } Property Value Boolean true if the Kook client needs administrator privileges to detect the game; otherwise, false . Methods ModifyAsync(Action<GameProperties>, RequestOptions) Modifies this game. Declaration Task<IGame> ModifyAsync(Action<GameProperties> func, RequestOptions options = null) Parameters Action < GameProperties > func A delegate containing the properties to modify the game with. RequestOptions options The options to be used when sending the request. Returns Task < IGame > A task that represents the asynchronous modification operation. Remarks This method modifies this game with the specified properties. To see an example of this method and what properties are available, please refer to GameProperties ."
  },
  "api/Kook.IGuild.html": {
    "href": "api/Kook.IGuild.html",
    "title": "Interface IGuild | Kook.Net 文档",
    "keywords": "Interface IGuild Represents a generic guild/server. Inherited Members IEntity<UInt64>.Id Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IGuild : IEntity<ulong> Properties Available Determines if this guild is currently connected and ready to be used. Declaration bool Available { get; } Property Value Boolean true if this guild is currently connected and ready to be used; otherwise false . Remarks note This property only applies to a WebSocket-based client. This boolean is used to determine if the guild is currently connected to the WebSocket and is ready to be used/accessed. Banner Gets the URL of this guild's banner image. Declaration string Banner { get; } Property Value String A URL pointing to the guild's banner image; null if none is set. BoostLevel Gets the level of guild boosting in this guild. Declaration BoostLevel BoostLevel { get; } Property Value BoostLevel The level of guild boosting in this guild. BoostSubscriptionCount Gets the number of boost subscribers of this guild. Declaration int BoostSubscriptionCount { get; } Property Value Int32 The number of boost subscribers of this guild. BufferBoostSubscriptionCount Gets the number of boost subscribers who activates buffer of this guild. Declaration int BufferBoostSubscriptionCount { get; } Property Value Int32 The number of boost subscribers who activates buffer of this guild. DefaultChannelId Gets the default channel ID for this guild. Declaration ulong? DefaultChannelId { get; } Property Value Nullable < UInt64 > A ulong representing the default channel ID for this guild. Emotes Gets a collection of all custom emotes for this guild. Declaration IReadOnlyCollection<GuildEmote> Emotes { get; } Property Value IReadOnlyCollection < GuildEmote > A read-only collection of all custom emotes for this guild. See Also GetEmotesAsync(RequestOptions) EveryoneRole Gets the built-in role containing all users in this guild. Declaration IRole EveryoneRole { get; } Property Value IRole A role object that represents an @everyone role in this guild. Features Gets the features of this guild. Declaration GuildFeatures Features { get; } Property Value GuildFeatures An array of string representing the features of this guild. Icon Gets the URL of this guild's icon. Declaration string Icon { get; } Property Value String A URL pointing to the guild's icon; null if none is set. IsOpenEnabled Gets whether this guild is public. Declaration bool IsOpenEnabled { get; } Property Value Boolean true if this guild is public; false otherwise. MaxBitrate Gets the max bitrate for voice channels in this guild. Declaration int MaxBitrate { get; } Property Value Int32 A representing the maximum bitrate value allowed by Kook in this guild. MaxUploadLimit Gets the upload limit in bytes for this guild. This number is dependent on the guild's boost status. Declaration ulong MaxUploadLimit { get; } Property Value UInt64 Name Gets the name of this guild. Declaration string Name { get; } Property Value String A string containing the name of this guild. NotifyType Gets the default notification type for this guild. Declaration NotifyType NotifyType { get; } Property Value NotifyType A NotifyType representing the default notification type for this guild. OpenId Gets the open ID for this guild. Declaration uint? OpenId { get; } Property Value Nullable < UInt32 > A uint representing the open ID for this guild; this property should be null if IsOpenEnabled is false . OwnerId Gets the ID of the user that owns this guild. Declaration ulong OwnerId { get; } Property Value UInt64 A ulong representing the identifier of the user that owns this guild. RecommendInfo Gets the recommendation information for this guild. Declaration IRecommendInfo RecommendInfo { get; } Property Value IRecommendInfo A recommendation object that represents the recommendation information for this guild; null if the guild does not have a recommendation. Region Gets the default voice region for this guild. Declaration string Region { get; } Property Value String A string representing the default voice region for this guild. Roles Gets a collection of all roles in this guild. Declaration IReadOnlyCollection<IRole> Roles { get; } Property Value IReadOnlyCollection < IRole > A read-only collection of roles found within this guild. Topic Gets the topic for the guild. Declaration string Topic { get; } Property Value String The description for the guild; null if none is set. WelcomeChannelId Gets the welcome channel ID for this guild. Declaration ulong? WelcomeChannelId { get; } Property Value Nullable < UInt64 > A ulong representing the welcome channel ID for this guild. Methods AddBanAsync(IUser, Int32, String, RequestOptions) Bans the user from this guild and optionally prunes their recent messages. Declaration Task AddBanAsync(IUser user, int pruneDays = 0, string reason = null, RequestOptions options = null) Parameters IUser user The user to ban. Int32 pruneDays The number of days to remove messages from this user for, and this number must be between [0, 7]. String reason The reason of the ban to be written in the audit log. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous add operation for the ban. AddBanAsync(UInt64, Int32, String, RequestOptions) Bans the user from this guild and optionally prunes their recent messages. Declaration Task AddBanAsync(ulong userId, int pruneDays = 0, string reason = null, RequestOptions options = null) Parameters UInt64 userId The identifier of the user to ban. Int32 pruneDays The number of days to remove messages from this user for, and this number must be between [0, 7]. String reason The reason of the ban to be written in the audit log. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous add operation for the ban. CreateCategoryChannelAsync(String, Action<CreateCategoryChannelProperties>, RequestOptions) Creates a new channel category in this guild. Declaration Task<ICategoryChannel> CreateCategoryChannelAsync(string name, Action<CreateCategoryChannelProperties> func = null, RequestOptions options = null) Parameters String name The new name for the category. Action < CreateCategoryChannelProperties > func The delegate containing the properties to be applied to the channel upon its creation. RequestOptions options The options to be used when sending the request. Returns Task < ICategoryChannel > A task that represents the asynchronous creation operation. The task result contains the newly created category channel. CreateEmoteAsync(String, Image, RequestOptions) Creates a new GuildEmote in this guild. Declaration Task<GuildEmote> CreateEmoteAsync(string name, Image image, RequestOptions options = null) Parameters String name The name of the guild emote. Image image The image of the new emote. RequestOptions options The options to be used when sending the request. Returns Task < GuildEmote > A task that represents the asynchronous creation operation. The task result contains the created emote. CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions) Creates a new invite to this channel. Declaration Task<IInvite> CreateInviteAsync(InviteMaxAge maxAge = default(InviteMaxAge), InviteMaxUses maxUses = default(InviteMaxUses), RequestOptions options = null) Parameters InviteMaxAge maxAge The time until the invite expires. Set to InviteMaxAge.NeverExpires to never expire. InviteMaxUses maxUses The max amount of times this invite may be used. Set to InviteMaxUses.Unlimited to have unlimited uses. RequestOptions options The options to be used when sending the request. Returns Task < IInvite > A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, RequestOptions) Creates a new invite to this channel. Declaration Task<IInvite> CreateInviteAsync(int? maxAge, int? maxUses = null, RequestOptions options = null) Parameters Nullable < Int32 > maxAge The time (in seconds) until the invite expires. Set to null to never expire. Nullable < Int32 > maxUses The max amount of times this invite may be used. Set to null to have unlimited uses. RequestOptions options The options to be used when sending the request. Returns Task < IInvite > A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateRoleAsync(String, RequestOptions) Creates a new role with the provided name. Declaration Task<IRole> CreateRoleAsync(string name, RequestOptions options = null) Parameters String name The new name for the role. RequestOptions options The options to be used when sending the request. Returns Task < IRole > A task that represents the asynchronous creation operation. The task result contains the newly created role. CreateTextChannelAsync(String, Action<CreateTextChannelProperties>, RequestOptions) Creates a new text channel in this guild. Declaration Task<ITextChannel> CreateTextChannelAsync(string name, Action<CreateTextChannelProperties> func = null, RequestOptions options = null) Parameters String name The new name for the text channel. Action < CreateTextChannelProperties > func The delegate containing the properties to be applied to the channel upon its creation. RequestOptions options The options to be used when sending the request. Returns Task < ITextChannel > A task that represents the asynchronous creation operation. The task result contains the newly created text channel. CreateVoiceChannelAsync(String, Action<CreateVoiceChannelProperties>, RequestOptions) Creates a new voice channel in this guild. Declaration Task<IVoiceChannel> CreateVoiceChannelAsync(string name, Action<CreateVoiceChannelProperties> func = null, RequestOptions options = null) Parameters String name The new name for the voice channel. Action < CreateVoiceChannelProperties > func The delegate containing the properties to be applied to the channel upon its creation. RequestOptions options The options to be used when sending the request. Returns Task < IVoiceChannel > A task that represents the asynchronous creation operation. The task result contains the newly created voice channel. DeleteEmoteAsync(GuildEmote, RequestOptions) Deletes an existing GuildEmote from this guild. Declaration Task DeleteEmoteAsync(GuildEmote emote, RequestOptions options = null) Parameters GuildEmote emote The emote to delete. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DownloadBoostSubscriptionsAsync(RequestOptions) Downloads all boost subscriptions for this guild. Declaration Task DownloadBoostSubscriptionsAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous download operation. Remarks This method downloads all boost subscriptions for this guild through the Gateway and caches them. To download all boost subscriptions, the current user must has the ManageGuild permission. DownloadUsersAsync(RequestOptions) Downloads all users for this guild if the current list is incomplete. Declaration Task DownloadUsersAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous download operation. Remarks This method downloads all users found within this guild through the Gateway and caches them. DownloadVoiceStatesAsync(RequestOptions) Downloads all voice states for this guild. Declaration Task DownloadVoiceStatesAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous download operation. Remarks This method downloads all voice states for this guild through the Gateway and caches them. GetActiveBoostSubscriptionsAsync(RequestOptions) Gets subscriptions which are not expired for this guild. Declaration Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> GetActiveBoostSubscriptionsAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < ImmutableDictionary < IUser , IReadOnlyCollection < BoostSubscriptionMetadata >>> A task that represents the asynchronous retrieval operation. The task result contains a collection of BoostSubscriptionMetadata which are not expired, each representing the subscriptions information. GetBadgeAsync(BadgeStyle, RequestOptions) Gets a badge which is associated with this guild. Declaration Task<Stream> GetBadgeAsync(BadgeStyle style = default(BadgeStyle), RequestOptions options = null) Parameters BadgeStyle style The BadgeStyle that specifies the style of the badge. RequestOptions options The options to be used when sending the request. Returns Task < Stream > A task that represents the asynchronous get operation. The task result contains the stream of the badge associated with this guild. GetBanAsync(IUser, RequestOptions) Gets a ban object for a banned user. Declaration Task<IBan> GetBanAsync(IUser user, RequestOptions options = null) Parameters IUser user The banned user. RequestOptions options The options to be used when sending the request. Returns Task < IBan > A task that represents the asynchronous get operation. The task result contains a ban object, which contains the user information and the reason for the ban; null if the ban entry cannot be found. GetBanAsync(UInt64, RequestOptions) Gets a ban object for a banned user. Declaration Task<IBan> GetBanAsync(ulong userId, RequestOptions options = null) Parameters UInt64 userId The identifier for the banned user. RequestOptions options The options to be used when sending the request. Returns Task < IBan > A task that represents the asynchronous get operation. The task result contains a ban object, which contains the user information and the reason for the ban; null if the ban entry cannot be found. GetBansAsync(RequestOptions) Gets a collection of all users banned in this guild. Declaration Task<IReadOnlyCollection<IBan>> GetBansAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < IBan >> A task that represents the asynchronous get operation. The task result contains a read-only collection of ban objects that this guild currently possesses, with each object containing the user banned and reason behind the ban. GetBoostSubscriptionsAsync(RequestOptions) Gets all subscriptions for this guild. Declaration Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> GetBoostSubscriptionsAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < ImmutableDictionary < IUser , IReadOnlyCollection < BoostSubscriptionMetadata >>> A task that represents the asynchronous retrieval operation. The task result contains a collection of BoostSubscriptionMetadata , each representing the subscriptions information. GetCategoryChannelsAsync(CacheMode, RequestOptions) Gets a collection of all category channels in this guild. Declaration Task<IReadOnlyCollection<ICategoryChannel>> GetCategoryChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < ICategoryChannel >> A task that represents the asynchronous get operation. The task result contains a read-only collection of category channels found within this guild. GetChannelAsync(UInt64, CacheMode, RequestOptions) Gets a channel in this guild. Declaration Task<IGuildChannel> GetChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters UInt64 id The identifier for the channel. CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IGuildChannel > A task that represents the asynchronous get operation. The task result contains the generic channel associated with the specified id ; null if none is found. GetChannelsAsync(CacheMode, RequestOptions) Gets a collection of all channels in this guild. Declaration Task<IReadOnlyCollection<IGuildChannel>> GetChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < IGuildChannel >> A task that represents the asynchronous get operation. The task result contains a read-only collection of generic channels found within this guild. GetCurrentUserAsync(CacheMode, RequestOptions) Gets the current user for this guild. Declaration Task<IGuildUser> GetCurrentUserAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IGuildUser > A task that represents the asynchronous get operation. The task result contains the currently logged-in user within this guild. GetDefaultChannelAsync(CacheMode, RequestOptions) Gets the default text channel for this guild. Declaration Task<ITextChannel> GetDefaultChannelAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < ITextChannel > A task that represents the asynchronous get operation. The task result contains the default text channel for this guild; null if none is found. GetEmoteAsync(String, RequestOptions) Gets a specific emote from this guild. Declaration Task<GuildEmote> GetEmoteAsync(string id, RequestOptions options = null) Parameters String id The identifier for the guild emote. RequestOptions options The options to be used when sending the request. Returns Task < GuildEmote > A task that represents the asynchronous get operation. The task result contains the emote found with the specified id ; null if none is found. GetEmotesAsync(RequestOptions) Gets a collection of emotes from this guild. Declaration Task<IReadOnlyCollection<GuildEmote>> GetEmotesAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < GuildEmote >> A task that represents the asynchronous get operation. The task result contains a read-only collection of emotes found within the guild. GetInvitesAsync(RequestOptions) Gets a collection of all invites in this guild. Declaration Task<IReadOnlyCollection<IInvite>> GetInvitesAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < IInvite >> A task that represents the asynchronous get operation. The task result contains a read-only collection of invite, each representing information for an invite found within this guild. GetOwnerAsync(CacheMode, RequestOptions) Gets the owner of this guild. Declaration Task<IGuildUser> GetOwnerAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IGuildUser > A task that represents the asynchronous get operation. The task result contains the owner of this guild. GetRole(UInt32) Gets a role in this guild. Declaration IRole GetRole(uint id) Parameters UInt32 id The identifier for the role. Returns IRole A role that is associated with the specified id ; null if none is found. GetTextChannelAsync(UInt64, CacheMode, RequestOptions) Gets a text channel in this guild. Declaration Task<ITextChannel> GetTextChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters UInt64 id The identifier for the text channel. CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < ITextChannel > A task that represents the asynchronous get operation. The task result contains the text channel associated with the specified id ; null if none is found. GetTextChannelsAsync(CacheMode, RequestOptions) Gets a collection of all text channels in this guild. Declaration Task<IReadOnlyCollection<ITextChannel>> GetTextChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < ITextChannel >> A task that represents the asynchronous get operation. The task result contains a read-only collection of message channels found within this guild. GetUserAsync(UInt64, CacheMode, RequestOptions) Gets a user from this guild. Declaration Task<IGuildUser> GetUserAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters UInt64 id The identifier of the user. CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IGuildUser > A task that represents the asynchronous get operation. The task result contains the guild user associated with the specified id ; null if none is found. Remarks This method retrieves a user found within this guild. note This may return null in the WebSocket implementation due to incomplete user collection in large guilds. GetUsersAsync(CacheMode, RequestOptions) Gets a collection of all users in this guild. Declaration Task<IReadOnlyCollection<IGuildUser>> GetUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < IGuildUser >> A task that represents the asynchronous get operation. The task result contains a collection of guild users found within this guild. Remarks This method retrieves all users found within this guild. GetVoiceChannelAsync(UInt64, CacheMode, RequestOptions) Gets a voice channel in this guild. Declaration Task<IVoiceChannel> GetVoiceChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters UInt64 id The identifier for the voice channel. CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IVoiceChannel > A task that represents the asynchronous get operation. The task result contains the voice channel associated with the specified id ; null if none is found. GetVoiceChannelsAsync(CacheMode, RequestOptions) Gets a collection of all voice channels in this guild. Declaration Task<IReadOnlyCollection<IVoiceChannel>> GetVoiceChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < IVoiceChannel >> A task that represents the asynchronous get operation. The task result contains a read-only collection of voice channels found within this guild. GetWelcomeChannelAsync(CacheMode, RequestOptions) Gets the welcome text channel for this guild. Declaration Task<ITextChannel> GetWelcomeChannelAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < ITextChannel > A task that represents the asynchronous get operation. The task result contains the welcome text channel for this guild; null if none is found. LeaveAsync(RequestOptions) Leaves this guild. Declaration Task LeaveAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous leave operation. Remarks This method will make the currently logged-in user leave the guild. note If the user is the owner of this guild, use DeleteAsync(RequestOptions) instead. ModifyEmoteNameAsync(GuildEmote, String, RequestOptions) Modifies an existing GuildEmote in this guild. Declaration Task ModifyEmoteNameAsync(GuildEmote emote, string name, RequestOptions options = null) Parameters GuildEmote emote The emote to be modified. String name The new name of the emote. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. The task result contains the modified emote. MoveUsersAsync(IEnumerable<IGuildUser>, IVoiceChannel, RequestOptions) Moves the user to the voice channel. Declaration Task MoveUsersAsync(IEnumerable<IGuildUser> users, IVoiceChannel targetChannel, RequestOptions options = null) Parameters IEnumerable < IGuildUser > users The users to move. IVoiceChannel targetChannel the channel where the user gets moved to. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for moving a user. RemoveBanAsync(IUser, RequestOptions) Unbans the user if they are currently banned. Declaration Task RemoveBanAsync(IUser user, RequestOptions options = null) Parameters IUser user The user to be unbanned. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation for the ban. RemoveBanAsync(UInt64, RequestOptions) Unbans the user if they are currently banned. Declaration Task RemoveBanAsync(ulong userId, RequestOptions options = null) Parameters UInt64 userId The identifier of the user to be unbanned. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation for the ban. SearchUsersAsync(Action<SearchGuildMemberProperties>, Int32, CacheMode, RequestOptions) Gets a collection of users in this guild that the name or nickname contains the provided string at func . Declaration IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> SearchUsersAsync(Action<SearchGuildMemberProperties> func, int limit = null, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters Action < SearchGuildMemberProperties > func A delegate containing the properties to search users with. Int32 limit The maximum number of users to be gotten. CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < IGuildUser >> A task that represents the asynchronous get operation. The task result contains a collection of guild users that matches the properties with the provided at func . Remarks The limit can not be higher than MaxUsersPerBatch ."
  },
  "api/Kook.IGuildChannel.html": {
    "href": "api/Kook.IGuildChannel.html",
    "title": "Interface IGuildChannel | Kook.Net 文档",
    "keywords": "Interface IGuildChannel Represents a generic guild channel. Inherited Members IChannel.Name IEntity<UInt64>.Id IDeletable.DeleteAsync(RequestOptions) Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IGuildChannel : IChannel, IEntity<ulong>, IDeletable Properties CreatorId Gets the identifier of the user who created this channel. Declaration ulong CreatorId { get; } Property Value UInt64 A ulong representing the identifier of the user who created this channel. Guild Gets the guild associated with this channel. Declaration IGuild Guild { get; } Property Value IGuild A guild object that this channel belongs to. GuildId Gets the guild ID associated with this channel. Declaration ulong GuildId { get; } Property Value UInt64 An ulong representing the guild identifier for the guild that this channel belongs to. Position Gets the position of this channel. Declaration int? Position { get; } Property Value Nullable < Int32 > An int representing the position of this channel in the guild's channel list relative to others of the same type. RolePermissionOverwrites Gets a collection of permission overwrites for roles for this channel. Declaration IReadOnlyCollection<RolePermissionOverwrite> RolePermissionOverwrites { get; } Property Value IReadOnlyCollection < RolePermissionOverwrite > A collection of overwrites for roles associated with this channel. Type Gets the type of this channel. Declaration ChannelType Type { get; } Property Value ChannelType A ChannelType representing the type of this channel. UserPermissionOverwrites Gets a collection of permission overwrites for users for this channel. Declaration IReadOnlyCollection<UserPermissionOverwrite> UserPermissionOverwrites { get; } Property Value IReadOnlyCollection < UserPermissionOverwrite > A collection of overwrites for users associated with this channel. Methods AddPermissionOverwriteAsync(IGuildUser, RequestOptions) Adds the permission overwrite for the given user. Declaration Task AddPermissionOverwriteAsync(IGuildUser user, RequestOptions options = null) Parameters IGuildUser user The user to add the overwrite to. RequestOptions options The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. AddPermissionOverwriteAsync(IRole, RequestOptions) Adds the permission overwrite for the given role. Declaration Task AddPermissionOverwriteAsync(IRole role, RequestOptions options = null) Parameters IRole role The role to add the overwrite to. RequestOptions options The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. GetCreatorAsync(CacheMode, RequestOptions) Gets the creator of this channel. Declaration Task<IUser> GetCreatorAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IUser > A task that represents the asynchronous get operation. The task result contains the creator of this channel. GetPermissionOverwrite(IRole) Gets the permission overwrite for a specific role. Declaration OverwritePermissions? GetPermissionOverwrite(IRole role) Parameters IRole role The role to get the overwrite from. Returns Nullable < OverwritePermissions > An overwrite object for the targeted role; null if none is set. GetPermissionOverwrite(IUser) Gets the permission overwrite for a specific user. Declaration OverwritePermissions? GetPermissionOverwrite(IUser user) Parameters IUser user The user to get the overwrite from. Returns Nullable < OverwritePermissions > An overwrite object for the targeted user; null if none is set. GetUserAsync(UInt64, CacheMode, RequestOptions) Gets a user in this channel. Declaration Task<IGuildUser> GetUserAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters UInt64 id The identifier of the user. CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IGuildUser > A task representing the asynchronous get operation. The task result contains a guild user object that represents the user; null if none is found. GetUsersAsync(CacheMode, RequestOptions) Gets a collection of users that are able to view the channel or are currently in this channel. Declaration IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> GetUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < IGuildUser >> Paged collection of users. Remarks This method follows the same behavior as described in GetUsersAsync(CacheMode, RequestOptions) . Please visit its documentation for more details on this method. ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) Modifies this guild channel. Declaration Task ModifyAsync(Action<ModifyGuildChannelProperties> func, RequestOptions options = null) Parameters Action < ModifyGuildChannelProperties > func The delegate containing the properties to modify the channel with. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies the current guild channel with the specified properties. To see an example of this method and what properties are available, please refer to ModifyGuildChannelProperties . ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) Updates the permission overwrite for the given user. Declaration Task ModifyPermissionOverwriteAsync(IGuildUser user, Func<OverwritePermissions, OverwritePermissions> func, RequestOptions options = null) Parameters IGuildUser user The user to add the overwrite to. Func < OverwritePermissions , OverwritePermissions > func A delegate containing the values to modify the permission overwrite with. RequestOptions options The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) Updates the permission overwrite for the given role. Declaration Task ModifyPermissionOverwriteAsync(IRole role, Func<OverwritePermissions, OverwritePermissions> func, RequestOptions options = null) Parameters IRole role The role to add the overwrite to. Func < OverwritePermissions , OverwritePermissions > func A delegate containing the values to modify the permission overwrite with. RequestOptions options The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) Removes the permission overwrite for the given user, if one exists. Declaration Task RemovePermissionOverwriteAsync(IGuildUser user, RequestOptions options = null) Parameters IGuildUser user The user to remove the overwrite from. RequestOptions options The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. RemovePermissionOverwriteAsync(IRole, RequestOptions) Removes the permission overwrite for the given role, if one exists. Declaration Task RemovePermissionOverwriteAsync(IRole role, RequestOptions options = null) Parameters IRole role The role to remove the overwrite from. RequestOptions options The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel)"
  },
  "api/Kook.IGuildUser.html": {
    "href": "api/Kook.IGuildUser.html",
    "title": "Interface IGuildUser | Kook.Net 文档",
    "keywords": "Interface IGuildUser Represents a generic guild user. Inherited Members IUser.Username IUser.IdentifyNumber IUser.IdentifyNumberValue IUser.IsBot IUser.IsBanned IUser.HasBuff IUser.HasAnnualBuff IUser.Avatar IUser.BuffAvatar IUser.Banner IUser.IsDenoiseEnabled IUser.UserTag IUser.Nameplates IUser.IsSystemUser IUser.CreateDMChannelAsync(RequestOptions) IUser.GetIntimacyAsync(RequestOptions) IUser.UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) IUser.BlockAsync(RequestOptions) IUser.UnblockAsync(RequestOptions) IUser.RequestFriendAsync(RequestOptions) IUser.RemoveFriendAsync(RequestOptions) IEntity<UInt64>.Id IMentionable.PlainTextMention IMentionable.KMarkdownMention IPresence.IsOnline IPresence.ActiveClient IVoiceState.IsDeafened IVoiceState.IsMuted IVoiceState.VoiceChannel Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IGuildUser : IUser, IEntity<ulong>, IMentionable, IPresence, IVoiceState Properties ActiveAt Gets when this user was activated. Declaration DateTimeOffset ActiveAt { get; } Property Value DateTimeOffset The time of which the user was activated. Color Gets the color the user's displayed name is being displayed in. Declaration Color Color { get; } Property Value Color A Color struct representing the color the user's display name is being displayed in. Remarks warning At present, the color of a role may be a solid color or a gradient. See ColorType , which is guaranteed due to the fact that the guild's user list API endpoint returns the color type and the gradient color information if exists. However, the value of this property is fetched from the guild's user list API endpoint, which does not return the color type and the gradient color information. Hence, the value of this property may be incorrect if the color of a role is a gradient. DisplayName Gets the displayed name for this user. Declaration string DisplayName { get; } Property Value String A string representing the display name of the user; If the nickname is null, this will be the username. Guild Gets the guild for this user. Declaration IGuild Guild { get; } Property Value IGuild A guild object that this user belongs to. GuildId Gets the ID of the guild for this user. Declaration ulong GuildId { get; } Property Value UInt64 An ulong representing the identifier of the guild that this user belongs to. GuildPermissions Gets the guild-level permissions for this user. Declaration GuildPermissions GuildPermissions { get; } Property Value GuildPermissions A GuildPermissions structure for this user, representing what permissions this user has in the guild. IsMobileVerified Gets whether the mobile number has been verified for this user. Declaration bool IsMobileVerified { get; } Property Value Boolean true if the mobile number has been verified; false otherwise. IsOwner Gets whether this user owns the current guild. Declaration bool? IsOwner { get; } Property Value Nullable < Boolean > true if this user owns the current guild; false otherwise. JoinedAt Gets when this user joined the guild. Declaration DateTimeOffset JoinedAt { get; } Property Value DateTimeOffset The time of which the user has joined the guild. Nickname Gets the nickname for this user. Declaration string Nickname { get; } Property Value String A string representing the nickname of the user; null if none is set. RoleIds Gets a collection of IDs for the roles that this user currently possesses in the guild. Declaration IReadOnlyCollection<uint> RoleIds { get; } Property Value IReadOnlyCollection < UInt32 > A read-only collection of uint , each representing an identifier for a role that this user possesses. Remarks This property returns a read-only collection of the identifiers of the roles that this user possesses. For WebSocket users, a Roles property can be found in place of this property. Due to the REST implementation, only a collection of identifiers can be retrieved instead of the full role objects. Methods AddRoleAsync(IRole, RequestOptions) Adds the specified role to this user in the guild. Declaration Task AddRoleAsync(IRole role, RequestOptions options = null) Parameters IRole role The role to be added to the user. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRoleAsync(UInt32, RequestOptions) Adds the specified role to this user in the guild. Declaration Task AddRoleAsync(uint roleId, RequestOptions options = null) Parameters UInt32 roleId The role to be added to the user. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRolesAsync(IEnumerable<IRole>, RequestOptions) Adds the specified roles to this user in the guild. Declaration Task AddRolesAsync(IEnumerable<IRole> roles, RequestOptions options = null) Parameters IEnumerable < IRole > roles The roles to be added to the user. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRolesAsync(IEnumerable<UInt32>, RequestOptions) Adds the specified roleIds to this user in the guild. Declaration Task AddRolesAsync(IEnumerable<uint> roleIds, RequestOptions options = null) Parameters IEnumerable < UInt32 > roleIds The roles to be added to the user. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. DeafenAsync(RequestOptions) Deafen this user in this guild. Declaration Task DeafenAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous deafening operation. GetBoostSubscriptionsAsync(RequestOptions) Gets all subscriptions of this user for this guild. Declaration Task<IReadOnlyCollection<BoostSubscriptionMetadata>> GetBoostSubscriptionsAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < BoostSubscriptionMetadata >> A task that represents the asynchronous retrieval operation. The task result contains a collection of BoostSubscriptionMetadata , each representing the subscriptions information. GetConnectedVoiceChannelsAsync(RequestOptions) Gets a collection of voice channels a user. Declaration Task<IReadOnlyCollection<IVoiceChannel>> GetConnectedVoiceChannelsAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < IVoiceChannel >> A task that represents the asynchronous get operation. The task result contains a collection of voice channels the user is connected to. GetPermissions(IGuildChannel) Gets the level permissions granted to this user to a given channel. Declaration ChannelPermissions GetPermissions(IGuildChannel channel) Parameters IGuildChannel channel The channel to get the permission from. Returns ChannelPermissions A ChannelPermissions structure representing the permissions that a user has in the specified channel. KickAsync(RequestOptions) Kicks this user from this guild. Declaration Task KickAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous kick operation. ModifyNicknameAsync(String, RequestOptions) Modifies this user's nickname in this guild. Declaration Task ModifyNicknameAsync(string name, RequestOptions options = null) Parameters String name The nickname to modify the user with. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies the nickname of current guild user. warning The KOOK API will clear the nickname if the nickname is set to the same as the username at present. Hence either setting the nickname to the same as the username or setting the nickname to null will clear the nickname. MuteAsync(RequestOptions) Mute this user in this guild. Declaration Task MuteAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous muting operation. RemoveRoleAsync(IRole, RequestOptions) Removes the specified role from this user in the guild. Declaration Task RemoveRoleAsync(IRole role, RequestOptions options = null) Parameters IRole role The role to be removed from the user. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRoleAsync(UInt32, RequestOptions) Removes the specified roleId from this user in the guild. Declaration Task RemoveRoleAsync(uint roleId, RequestOptions options = null) Parameters UInt32 roleId The role to be removed from the user. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRolesAsync(IEnumerable<IRole>, RequestOptions) Removes the specified roles from this user in the guild. Declaration Task RemoveRolesAsync(IEnumerable<IRole> roles, RequestOptions options = null) Parameters IEnumerable < IRole > roles The roles to be removed from the user. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRolesAsync(IEnumerable<UInt32>, RequestOptions) Removes the specified roleIds from this user in the guild. Declaration Task RemoveRolesAsync(IEnumerable<uint> roleIds, RequestOptions options = null) Parameters IEnumerable < UInt32 > roleIds The roles to be removed from the user. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. UndeafenAsync(RequestOptions) Undeafen this user in this guild. Declaration Task UndeafenAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous undeafening operation. UnmuteAsync(RequestOptions) Unmute this user in this guild. Declaration Task UnmuteAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous unmuting operation. Extension Methods UserExtensions.SendFileAsync(IUser, String, String, AttachmentType, IQuote, RequestOptions) UserExtensions.SendFileAsync(IUser, Stream, String, AttachmentType, IQuote, RequestOptions) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote, RequestOptions) UserExtensions.SendTextAsync(IUser, String, IQuote, RequestOptions) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote, RequestOptions) UserExtensions.SendCardAsync(IUser, ICard, IQuote, RequestOptions) UserExtensions.BanAsync(IGuildUser, Int32, String, RequestOptions)"
  },
  "api/Kook.IIntimacy.html": {
    "href": "api/Kook.IIntimacy.html",
    "title": "Interface IIntimacy | Kook.Net 文档",
    "keywords": "Interface IIntimacy Represents a generic intimacy. Inherited Members IEntity<UInt64>.Id Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IIntimacy : IEntity<ulong> Properties Images Gets the images associated with this intimacy. Declaration IReadOnlyCollection<IntimacyImage> Images { get; } Property Value IReadOnlyCollection < IntimacyImage > An containing the images associated with this intimacy. LastModifyAt Gets the time at which this intimacy was modified last time. Declaration DateTimeOffset LastModifyAt { get; } Property Value DateTimeOffset A time at which this intimacy was modified last time. LastReadAt Gets the time at which the user read the message. Declaration DateTimeOffset LastReadAt { get; } Property Value DateTimeOffset A time at which the user read the message. Score Gets the score associated with this intimacy. Declaration int Score { get; } Property Value Int32 A int representing the score associated with this intimacy. SocialInfo Gets the social information associated with this intimacy. Declaration string SocialInfo { get; } Property Value String A string representing the social information associated with this intimacy. User Gets the user associated with this intimacy. Declaration IUser User { get; } Property Value IUser An IUser representing the user associated with this intimacy. Methods UpdateAsync(Action<IntimacyProperties>, RequestOptions) Updates the intimacy information with this user. Declaration Task UpdateAsync(Action<IntimacyProperties> func, RequestOptions options) Parameters Action < IntimacyProperties > func A delegate containing the properties to modify the IIntimacy with. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for updating the intimacy information."
  },
  "api/Kook.IInvite.html": {
    "href": "api/Kook.IInvite.html",
    "title": "Interface IInvite | Kook.Net 文档",
    "keywords": "Interface IInvite Represents a generic invite. Inherited Members IEntity<UInt32>.Id IDeletable.DeleteAsync(RequestOptions) Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IInvite : IEntity<uint>, IDeletable Properties Channel Gets the channel this invite is linked to. Declaration IChannel Channel { get; } Property Value IChannel A generic channel that the invite points to. ChannelId Gets the ID of the channel this invite is linked to. Declaration ulong? ChannelId { get; } Property Value Nullable < UInt64 > A ulong representing the channel identifier that the invite points to. ChannelName Gets the name of the channel this invite is linked to. Declaration string ChannelName { get; } Property Value String A string containing the name of the channel that the invite points to. ChannelType Gets the type of the channel this invite is linked to. Declaration ChannelType ChannelType { get; } Property Value ChannelType Code Gets the unique identifier for this invite. Declaration string Code { get; } Property Value String A string containing the invite code (e.g. wEAF5t ). ExpiresAt Gets the time at which this invite will expire. Declaration DateTimeOffset? ExpiresAt { get; } Property Value Nullable < DateTimeOffset > A representing the time until this invite expires; null if this invite never expires. Guild Gets the guild this invite is linked to. Declaration IGuild Guild { get; } Property Value IGuild A guild object representing the guild that the invite points to. GuildId Gets the ID of the guild this invite is linked to. Declaration ulong? GuildId { get; } Property Value Nullable < UInt64 > A ulong representing the guild identifier that the invite points to. GuildName Gets the name of the guild this invite is linked to. Declaration string GuildName { get; } Property Value String A string containing the name of the guild that the invite points to. Inviter Gets the user that created this invite. Declaration IUser Inviter { get; } Property Value IUser A user that created this invite. MaxAge Gets the time span until the invite expires. Declaration TimeSpan? MaxAge { get; } Property Value Nullable < TimeSpan > A representing the time span until this invite expires; null if this invite never expires. MaxUses Gets the max number of uses this invite may have. Declaration int? MaxUses { get; } Property Value Nullable < Int32 > An int representing the number of uses this invite may be accepted until it is removed from the guild; null if none is set. RemainingUses Gets the number of times this invite still remains. Declaration int? RemainingUses { get; } Property Value Nullable < Int32 > An int representing the number of times this invite still remains; null if none is set. Url Gets the URL used to accept this invite using Code . Declaration string Url { get; } Property Value String A string containing the full invite URL (e.g. https://kaihei.co/wEAF5t ). Uses Gets the number of times this invite has been used. Declaration int? Uses { get; } Property Value Nullable < Int32 > An int representing the number of times this invite has been used; null if none is set."
  },
  "api/Kook.IKookClient.html": {
    "href": "api/Kook.IKookClient.html",
    "title": "Interface IKookClient | Kook.Net 文档",
    "keywords": "Interface IKookClient Represents a generic Kook client. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IKookClient : IDisposable Properties ConnectionState Gets the current state of connection. Declaration ConnectionState ConnectionState { get; } Property Value ConnectionState CurrentUser Gets the currently logged-in user. Declaration ISelfUser CurrentUser { get; } Property Value ISelfUser TokenType Gets the token type of the logged-in user. Declaration TokenType TokenType { get; } Property Value TokenType Methods GetBlockedUsersAsync(CacheMode, RequestOptions) Gets blocked users. Declaration Task<IReadOnlyCollection<IUser>> GetBlockedUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < IUser >> A task that represents the asynchronous get operation. The task result contains a collection of users that are blocked by the current user. GetChannelAsync(UInt64, CacheMode, RequestOptions) Gets a generic channel. Declaration Task<IChannel> GetChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters UInt64 id The identifier of the channel. CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IChannel > A task that represents the asynchronous get operation. The task result contains the channel associated with the identifier; null when the channel cannot be found. GetDMChannelAsync(Guid, CacheMode, RequestOptions) Gets a direct message channel. Declaration Task<IDMChannel> GetDMChannelAsync(Guid chatCode, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters Guid chatCode The identifier of the channel. CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IDMChannel > A task that represents the asynchronous get operation. The task result contains a read-only collection of direct-message channels that the user currently partakes in. GetDMChannelsAsync(CacheMode, RequestOptions) Gets a collection of direct message channels opened in this session. Declaration Task<IReadOnlyCollection<IDMChannel>> GetDMChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < IDMChannel >> A task that represents the asynchronous get operation. The task result contains a read-only collection of direct-message channels that the user currently partakes in. Remarks This method returns a collection of currently opened direct message channels. warning This method will not return previously opened DM channels outside of the current session! If you have just started the client, this may return an empty collection. GetFriendRequestsAsync(CacheMode, RequestOptions) Gets friend requests. Declaration Task<IReadOnlyCollection<IFriendRequest>> GetFriendRequestsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < IFriendRequest >> A task that represents the asynchronous get operation. The task result contains a collection of users that requested to be friends with the current user. GetFriendsAsync(CacheMode, RequestOptions) Gets friends. Declaration Task<IReadOnlyCollection<IUser>> GetFriendsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < IUser >> A task that represents the asynchronous get operation. The task result contains a collection of users that are friends with the current user. GetGuildAsync(UInt64, CacheMode, RequestOptions) Gets a guild. Declaration Task<IGuild> GetGuildAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters UInt64 id The guild identifier. CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IGuild > A task that represents the asynchronous get operation. The task result contains the guild associated with the identifier; null when the guild cannot be found. GetGuildsAsync(CacheMode, RequestOptions) Gets a collection of guilds that the user is currently in. Declaration Task<IReadOnlyCollection<IGuild>> GetGuildsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < IGuild >> A task that represents the asynchronous get operation. The task result contains a read-only collection of guilds that the current user is in. GetUserAsync(String, String, RequestOptions) Gets a user. Declaration Task<IUser> GetUserAsync(string username, string identifyNumber, RequestOptions options = null) Parameters String username The name of the user (e.g. Still ). String identifyNumber The identify value of the user (e.g. 2876 ). RequestOptions options The options to be used when sending the request. Returns Task < IUser > A task that represents the asynchronous get operation. The task result contains the user associated with the name and the identifyNumber; null if the user is not found. GetUserAsync(UInt64, CacheMode, RequestOptions) Gets a user. Declaration Task<IUser> GetUserAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters UInt64 id The identifier of the user. CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IUser > A task that represents the asynchronous get operation. The task result contains the user associated with the identifier; null if the user is not found. StartAsync() Starts the connection between Kook and the client.. Declaration Task StartAsync() Returns Task A task that represents the asynchronous start operation. Remarks This method will initialize the connection between the client and Kook. important This method will immediately return after it is called, as it will initialize the connection on another thread. StopAsync() Stops the connection between Kook and the client. Declaration Task StopAsync() Returns Task A task that represents the asynchronous stop operation."
  },
  "api/Kook.Image.html": {
    "href": "api/Kook.Image.html",
    "title": "Struct Image | Kook.Net 文档",
    "keywords": "Struct Image An image that will be uploaded to Kook. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct Image : IDisposable Constructors Image(Stream) Create the image with a . Declaration public Image(Stream stream) Parameters Stream stream The to create the image with. Note that this must be some type of stream with the contents of a file in it. Image(String) Create the image from a file path. Declaration public Image(string path) Parameters String path The path to the file. Remarks This file path is NOT validated and is passed directly into a . Properties Stream Gets the stream to be uploaded to Kook. Declaration public Stream Stream { get; } Property Value Stream Methods Dispose() Declaration public void Dispose()"
  },
  "api/Kook.ImageAnimationPokeResource.html": {
    "href": "api/Kook.ImageAnimationPokeResource.html",
    "title": "Struct ImageAnimationPokeResource | Kook.Net 文档",
    "keywords": "Struct ImageAnimationPokeResource Represents an image animation poke resource. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct ImageAnimationPokeResource : IPokeResource Properties Duration Gets how long this animation animation should last filling the full screen. Declaration public TimeSpan Duration { get; } Property Value TimeSpan Height Gets the height of the image animation. Declaration public int Height { get; } Property Value Int32 Percent // TODO: To be documented. Declaration public double Percent { get; } Property Value Double Resources Gets the resources of the image animation. Declaration public IReadOnlyDictionary<string, string> Resources { get; } Property Value IReadOnlyDictionary < String , String > Type Gets the type of the poke resource. Declaration public PokeResourceType Type { get; } Property Value PokeResourceType Implements IPokeResource.Type Width Gets the width of the image animation. Declaration public int Width { get; } Property Value Int32"
  },
  "api/Kook.ImageElement.html": {
    "href": "api/Kook.ImageElement.html",
    "title": "Class ImageElement | Kook.Net 文档",
    "keywords": "Class ImageElement An image element that can be used in an IModule . Inheritance Object ImageElement Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class ImageElement : object, IElement, IEquatable<ImageElement> Properties Alternative Gets the alternative text of the image. Declaration public string Alternative { get; } Property Value String A string that represents the alternative text of the image. Circle Gets a value indicating whether the image should be rendered as a circle. Declaration public bool? Circle { get; } Property Value Nullable < Boolean > true if the image should be rendered as a circle; otherwise, false ; or null if whether the image should be rendered as a circle is not specified. Size Gets the size of the image. Declaration public ImageSize? Size { get; } Property Value Nullable < ImageSize > An ImageSize that represents the size of the image; or null if the size is not specified. Source Gets the source of the image. Declaration public string Source { get; } Property Value String A string that represents the source of the image. Type Gets the type of the element. Declaration public ElementType Type { get; } Property Value ElementType An ElementType value that represents the theme of the button. Implements IElement.Type Methods Equals(ImageElement) Determines whether the specified ImageElement is equal to the current ImageElement . Declaration public bool Equals(ImageElement imageElement) Parameters ImageElement imageElement The ImageElement to compare with the current ImageElement . Returns Boolean true if the specified ImageElement is equal to the current ImageElement ; otherwise, false . Equals(Object) Determines whether the specified ImageElement is equal to the current ImageElement . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current ImageElement . Returns Boolean true if the specified ImageElement is equal to the current ImageElement ; otherwise, false . Remarks If the object passes is an ImageElement , Equals(ImageElement) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 Operators Equality(ImageElement, ImageElement) Determines whether the specified ImageElement is equal to the current ImageElement . Declaration public static bool operator ==(ImageElement left, ImageElement right) Parameters ImageElement left ImageElement right Returns Boolean true if the specified ImageElement is equal to the current ImageElement ; otherwise, false . Inequality(ImageElement, ImageElement) Determines whether the specified ImageElement is not equal to the current ImageElement . Declaration public static bool operator !=(ImageElement left, ImageElement right) Parameters ImageElement left ImageElement right Returns Boolean true if the specified ImageElement is not equal to the current ImageElement ; otherwise, false . Extension Methods CardExtensions.ToBuilder(ImageElement)"
  },
  "api/Kook.ImageElementBuilder.html": {
    "href": "api/Kook.ImageElementBuilder.html",
    "title": "Class ImageElementBuilder | Kook.Net 文档",
    "keywords": "Class ImageElementBuilder An element builder to build an ImageElement . Inheritance Object ImageElementBuilder Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class ImageElementBuilder : object, IElementBuilder, IEquatable<ImageElementBuilder> Constructors ImageElementBuilder() Initialized a new instance of the ImageElementBuilder class. Declaration public ImageElementBuilder() ImageElementBuilder(String, String, Nullable<ImageSize>, Nullable<Boolean>) Initialized a new instance of the ImageElementBuilder class. Declaration public ImageElementBuilder(string source, string alternative = null, ImageSize? size = null, bool? circle = null) Parameters String source The source of the image. String alternative The alternative text of the image. Nullable < ImageSize > size The size of the image. Nullable < Boolean > circle Whether the image should be rendered as a circle. Fields MaxAlternativeLength Gets the maximum image alternative text length allowed by Kook. Declaration public const int MaxAlternativeLength = null Field Value Int32 Properties Alternative Gets or sets the alternative text of an ImageElementBuilder . Declaration public string Alternative { get; set; } Property Value String A string that represents the alternative text of the ImageElementBuilder . Circle Gets or sets whether the image should be rendered as a circle. Declaration public bool? Circle { get; set; } Property Value Nullable < Boolean > true if the image should be rendered as a circle; otherwise, false ; or null if whether the image should be rendered as a circle is not specified. Size Gets or sets the size of the image of an ImageElementBuilder . Declaration public ImageSize? Size { get; set; } Property Value Nullable < ImageSize > An ImageSize that represents the size of the image of the ImageElementBuilder ; null if the size is not specified. Source Gets or sets the source of an ImageElementBuilder . Declaration public string Source { get; set; } Property Value String A string that represents the source of the ImageElementBuilder . Type Gets the type of the element that this builder builds. Declaration public ElementType Type { get; } Property Value ElementType An ElementType that represents the type of element that this builder builds. Implements IElementBuilder.Type Methods Build() Builds the ImageElementBuilder into an ImageElement . Declaration public ImageElement Build() Returns ImageElement An ImageElement represents the built element object. Equals(ImageElementBuilder) Determines whether the specified ImageElementBuilder is equal to the current ImageElementBuilder . Declaration public bool Equals(ImageElementBuilder imageElementBuilder) Parameters ImageElementBuilder imageElementBuilder The ImageElementBuilder to compare with the current ImageElementBuilder . Returns Boolean true if the specified ImageElementBuilder is equal to the current ImageElementBuilder ; otherwise, false . Equals(Object) Determines whether the specified is equal to the current ImageElementBuilder . Declaration public override bool Equals(object obj) Parameters Object obj The to compare with the current ImageElementBuilder . Returns Boolean true if the specified is equal to the current ImageElementBuilder ; otherwise, false . GetHashCode() Declaration public override int GetHashCode() Returns Int32 WithAlternative(String) Sets the alternative text of an ImageElementBuilder . Declaration public ImageElementBuilder WithAlternative(string alternative) Parameters String alternative The alternative text to be set. Returns ImageElementBuilder The current builder. WithCircle(Boolean) Sets whether the image should be rendered as a circle. Declaration public ImageElementBuilder WithCircle(bool circle) Parameters Boolean circle true if the image should be rendered as a circle; otherwise, false . Returns ImageElementBuilder The current builder. WithSize(ImageSize) Sets the size of the image of an ImageElementBuilder . Declaration public ImageElementBuilder WithSize(ImageSize size) Parameters ImageSize size The size to be set. Returns ImageElementBuilder The current builder. WithSource(String) Sets the source of an ImageElementBuilder . Declaration public ImageElementBuilder WithSource(string source) Parameters String source The source to be set. Returns ImageElementBuilder The current builder. Operators Equality(ImageElementBuilder, ImageElementBuilder) Determines whether the specified ImageElementBuilder is equal to the current ImageElementBuilder . Declaration public static bool operator ==(ImageElementBuilder left, ImageElementBuilder right) Parameters ImageElementBuilder left ImageElementBuilder right Returns Boolean true if the specified ImageElementBuilder is equal to the current ImageElementBuilder ; otherwise, false . Implicit(String to ImageElementBuilder) Initialized a new instance of the ImageElementBuilder class with the specified content. Declaration public static implicit operator ImageElementBuilder(string source) Parameters String source The content of the ImageElement . Returns ImageElementBuilder An ImageElementBuilder object that is initialized with the specified image source. Inequality(ImageElementBuilder, ImageElementBuilder) Determines whether the specified ImageElementBuilder is not equal to the current ImageElementBuilder . Declaration public static bool operator !=(ImageElementBuilder left, ImageElementBuilder right) Parameters ImageElementBuilder left ImageElementBuilder right Returns Boolean true if the specified ImageElementBuilder is not equal to the current ImageElementBuilder ; otherwise, false . Explicit Interface Implementations IElementBuilder.Build() Builds the IElementBuilder into an IElement . Declaration IElement IElementBuilder.Build() Returns IElement An IElement represents the built element object. Implements IElementBuilder.Build()"
  },
  "api/Kook.ImageEmbed.html": {
    "href": "api/Kook.ImageEmbed.html",
    "title": "Struct ImageEmbed | Kook.Net 文档",
    "keywords": "Struct ImageEmbed Represents an image embed. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct ImageEmbed : IEmbed Properties OriginUrl Gets the original URL of the image. Declaration public string OriginUrl { get; } Property Value String A string representing the original URL of the image. Type Gets the type of this embed. Declaration public EmbedType Type { get; } Property Value EmbedType A EmbedType that represents the type of this embed. Implements IEmbed.Type Url Gets the URL of this embed. Declaration public string Url { get; } Property Value String A string that represents the URL of this embed. Implements IEmbed.Url"
  },
  "api/Kook.ImageGroupModule.html": {
    "href": "api/Kook.ImageGroupModule.html",
    "title": "Class ImageGroupModule | Kook.Net 文档",
    "keywords": "Class ImageGroupModule Represents an image group module that can be used in an ICard . Inheritance Object ImageGroupModule Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class ImageGroupModule : object, IModule, IEquatable<ImageGroupModule> Properties Elements Gets the image elements in this image group module. Declaration public ImmutableArray<ImageElement> Elements { get; } Property Value ImmutableArray < ImageElement > An representing the images in this image group module. Type Gets the type of the module. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Implements IModule.Type Methods Equals(ImageGroupModule) Determines whether the specified ImageGroupModule is equal to the current ImageGroupModule . Declaration public bool Equals(ImageGroupModule imageGroupModule) Parameters ImageGroupModule imageGroupModule The ImageGroupModule to compare with the current ImageGroupModule . Returns Boolean true if the specified ImageGroupModule is equal to the current ImageGroupModule ; otherwise, false . Equals(Object) Determines whether the specified ImageGroupModule is equal to the current ImageGroupModule . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current ImageGroupModule . Returns Boolean true if the specified ImageGroupModule is equal to the current ImageGroupModule ; otherwise, false . Remarks If the object passes is an ImageGroupModule , Equals(ImageGroupModule) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 Operators Equality(ImageGroupModule, ImageGroupModule) Determines whether the specified ImageGroupModule is equal to the current ImageGroupModule . Declaration public static bool operator ==(ImageGroupModule left, ImageGroupModule right) Parameters ImageGroupModule left ImageGroupModule right Returns Boolean true if the specified ImageGroupModule is equal to the current ImageGroupModule ; Inequality(ImageGroupModule, ImageGroupModule) Determines whether the specified ImageGroupModule is not equal to the current ImageGroupModule . Declaration public static bool operator !=(ImageGroupModule left, ImageGroupModule right) Parameters ImageGroupModule left ImageGroupModule right Returns Boolean true if the specified ImageGroupModule is not equal to the current ImageGroupModule ; Extension Methods CardExtensions.ToBuilder(ImageGroupModule)"
  },
  "api/Kook.ImageGroupModuleBuilder.html": {
    "href": "api/Kook.ImageGroupModuleBuilder.html",
    "title": "Class ImageGroupModuleBuilder | Kook.Net 文档",
    "keywords": "Class ImageGroupModuleBuilder Representing an image group module builder for create an ImageGroupModule . Inheritance Object ImageGroupModuleBuilder Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class ImageGroupModuleBuilder : object, IModuleBuilder, IEquatable<ImageGroupModuleBuilder> Constructors ImageGroupModuleBuilder() Initializes a new instance of the ImageGroupModuleBuilder class. Declaration public ImageGroupModuleBuilder() ImageGroupModuleBuilder(List<ImageElementBuilder>) Initializes a new instance of the ImageGroupModuleBuilder class. Declaration public ImageGroupModuleBuilder(List<ImageElementBuilder> elements) Parameters List < ImageElementBuilder > elements Fields MaxElementCount Returns the maximum number of elements allowed by Kook. Declaration public const int MaxElementCount = null Field Value Int32 Properties Elements Gets or sets the elements of the image group. Declaration public List<ImageElementBuilder> Elements { get; set; } Property Value List < ImageElementBuilder > An ImageElementBuilder containing the elements of the image group. Type Specifies the module type of the IModule this builder creates. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Implements IModuleBuilder.Type Methods AddElement(Action<ImageElementBuilder>) Adds an image element to the image group. Declaration public ImageGroupModuleBuilder AddElement(Action<ImageElementBuilder> action) Parameters Action < ImageElementBuilder > action The action to add an image element to the image group. Returns ImageGroupModuleBuilder The current builder. AddElement(ImageElementBuilder) Adds an image element to the image group. Declaration public ImageGroupModuleBuilder AddElement(ImageElementBuilder field) Parameters ImageElementBuilder field The image element to add. Returns ImageGroupModuleBuilder The current builder. Build() Builds this builder into an ImageGroupModule . Declaration public ImageGroupModule Build() Returns ImageGroupModule An ImageGroupModule representing the built image group module object. Equals(ImageGroupModuleBuilder) Determines whether the specified ImageGroupModuleBuilder is equal to the current ImageGroupModuleBuilder . Declaration public bool Equals(ImageGroupModuleBuilder imageGroupModuleBuilder) Parameters ImageGroupModuleBuilder imageGroupModuleBuilder The ImageGroupModuleBuilder to compare with the current ImageGroupModuleBuilder . Returns Boolean true if the specified ImageGroupModuleBuilder is equal to the current ImageGroupModuleBuilder ; otherwise, false . Equals(Object) Determines whether the specified ImageGroupModuleBuilder is equal to the current ImageGroupModuleBuilder . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current ImageGroupModuleBuilder . Returns Boolean true if the specified ImageGroupModuleBuilder is equal to the current ImageGroupModuleBuilder ; otherwise, false . Remarks If the object passes is an ImageGroupModuleBuilder , Equals(ImageGroupModuleBuilder) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 Operators Equality(ImageGroupModuleBuilder, ImageGroupModuleBuilder) Determines whether the specified ImageGroupModuleBuilder is equal to the current ImageGroupModuleBuilder . Declaration public static bool operator ==(ImageGroupModuleBuilder left, ImageGroupModuleBuilder right) Parameters ImageGroupModuleBuilder left ImageGroupModuleBuilder right Returns Boolean true if the specified ImageGroupModuleBuilder is equal to the current ImageGroupModuleBuilder ; otherwise, false . Inequality(ImageGroupModuleBuilder, ImageGroupModuleBuilder) Determines whether the specified ImageGroupModuleBuilder is not equal to the current ImageGroupModuleBuilder . Declaration public static bool operator !=(ImageGroupModuleBuilder left, ImageGroupModuleBuilder right) Parameters ImageGroupModuleBuilder left ImageGroupModuleBuilder right Returns Boolean true if the specified ImageGroupModuleBuilder is not equal to the current ImageGroupModuleBuilder ; otherwise, false . Explicit Interface Implementations IModuleBuilder.Build() Builds the IModuleBuilder into an IModule . Declaration IModule IModuleBuilder.Build() Returns IModule An IModule representing the built module object. Implements IModuleBuilder.Build()"
  },
  "api/Kook.ImageSize.html": {
    "href": "api/Kook.ImageSize.html",
    "title": "Enum ImageSize | Kook.Net 文档",
    "keywords": "Enum ImageSize Specifies the size of the image in ImageElement . Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum ImageSize : int Large The image is displayed at large size. Small The image is displayed at small size."
  },
  "api/Kook.IMediaModule.html": {
    "href": "api/Kook.IMediaModule.html",
    "title": "Interface IMediaModule | Kook.Net 文档",
    "keywords": "Interface IMediaModule A generic media module that can be used in an ICard . Inherited Members IModule.Type Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IMediaModule : IModule Properties Source Gets the source of the media associated with this module. Declaration string Source { get; } Property Value String A string representing the source of the audio associated with this module. Title Gets the title of the media associated with this module. Declaration string Title { get; } Property Value String A string representing the title of the media associated with this module. Extension Methods CardExtensions.ToBuilder(IModule)"
  },
  "api/Kook.IMentionable.html": {
    "href": "api/Kook.IMentionable.html",
    "title": "Interface IMentionable | Kook.Net 文档",
    "keywords": "Interface IMentionable Determines whether the object is mentionable or not. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IMentionable Properties KMarkdownMention Returns a special string used to mention this object in KMarkdown formatted text. Declaration string KMarkdownMention { get; } Property Value String A string that is recognized by Kook as a mention in KMarkdown formatted text. PlainTextMention Returns a special string used to mention this object in plain text formatted text. Declaration string PlainTextMention { get; } Property Value String A string that is recognized by Kook as a mention in plain text formatted text."
  },
  "api/Kook.IMessage.html": {
    "href": "api/Kook.IMessage.html",
    "title": "Interface IMessage | Kook.Net 文档",
    "keywords": "Interface IMessage Represents a message object. Inherited Members IEntity<Guid>.Id IDeletable.DeleteAsync(RequestOptions) Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IMessage : IEntity<Guid>, IDeletable Properties Attachments Gets the attachment included in this message. Declaration IReadOnlyCollection<IAttachment> Attachments { get; } Property Value IReadOnlyCollection < IAttachment > The attachment included in this message; Author Gets the author of this message. Declaration IUser Author { get; } Property Value IUser Cards Gets all cards included in this message. Declaration IReadOnlyCollection<ICard> Cards { get; } Property Value IReadOnlyCollection < ICard > A read-only collection of card objects. Channel Gets the source channel of the message. Declaration IMessageChannel Channel { get; } Property Value IMessageChannel CleanContent Gets the clean content for this message. Declaration string CleanContent { get; } Property Value String A string that contains the body of the message stripped of mentions, markdown, emojis and pings; note that this field may be empty or the original code if the message is not a text based message. Content Gets the content for this message. Declaration string Content { get; } Property Value String A string that contains the body of the message; note that this field may be empty or the original code if the message is not a text based message. EditedTimestamp Gets the time of this message's last edit. Declaration DateTimeOffset? EditedTimestamp { get; } Property Value Nullable < DateTimeOffset > Time of when the message was last edited; null if the message is never edited. Embeds Gets all embeds included in this message. Declaration IReadOnlyCollection<IEmbed> Embeds { get; } Property Value IReadOnlyCollection < IEmbed > A read-only collection of embed objects. IsPinned Gets the value that indicates whether this message is pinned. Declaration bool? IsPinned { get; } Property Value Nullable < Boolean > true if this message was added to its channel's pinned messages; otherwise false . MentionedEveryone Gets the value that indicates whether this message mentioned everyone. Declaration bool? MentionedEveryone { get; } Property Value Nullable < Boolean > true if this message mentioned everyone; otherwise false . MentionedHere Gets the value that indicates whether this message mentioned online users. Declaration bool? MentionedHere { get; } Property Value Nullable < Boolean > true if this message mentioned online users; otherwise false . MentionedRoleIds Gets the IDs of roles mentioned in this message. Declaration IReadOnlyCollection<uint> MentionedRoleIds { get; } Property Value IReadOnlyCollection < UInt32 > A read-only collection of role IDs. MentionedUserIds Gets the IDs of users mentioned in this message. Declaration IReadOnlyCollection<ulong> MentionedUserIds { get; } Property Value IReadOnlyCollection < UInt64 > A read-only collection of user IDs. Pokes Gets all poke actions included in this message. Declaration IReadOnlyCollection<IPokeAction> Pokes { get; } Property Value IReadOnlyCollection < IPokeAction > A read-only collection of poke actions objects. Reactions Gets all reactions included in this message. Declaration IReadOnlyDictionary<IEmote, ReactionMetadata> Reactions { get; } Property Value IReadOnlyDictionary < IEmote , ReactionMetadata > Source Gets the source type of this message. Declaration MessageSource Source { get; } Property Value MessageSource Tags Gets all tags included in this message's content. Declaration IReadOnlyCollection<ITag> Tags { get; } Property Value IReadOnlyCollection < ITag > Timestamp Gets the time this message was sent. Declaration DateTimeOffset Timestamp { get; } Property Value DateTimeOffset Time of when the message was sent. Type Gets the type of this message. Declaration MessageType Type { get; } Property Value MessageType Methods AddReactionAsync(IEmote, RequestOptions) Adds a reaction to this message. Declaration Task AddReactionAsync(IEmote emote, RequestOptions options = null) Parameters IEmote emote The emoji used to react to this message. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for adding a reaction to this message. See Also IEmote GetReactionUsersAsync(IEmote, RequestOptions) Gets all users that reacted to a message with a given emote. Declaration Task<IReadOnlyCollection<IUser>> GetReactionUsersAsync(IEmote emote, RequestOptions options = null) Parameters IEmote emote The emoji that represents the reaction that you wish to get. RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < IUser >> Collection of users. RemoveReactionAsync(IEmote, IUser, RequestOptions) Removes a reaction from message. Declaration Task RemoveReactionAsync(IEmote emote, IUser user, RequestOptions options = null) Parameters IEmote emote The emoji used to react to this message. IUser user The user that added the emoji. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for removing a reaction to this message. See Also IEmote RemoveReactionAsync(IEmote, UInt64, RequestOptions) Removes a reaction from message. Declaration Task RemoveReactionAsync(IEmote emote, ulong userId, RequestOptions options = null) Parameters IEmote emote The emoji used to react to this message. UInt64 userId The ID of the user that added the emoji. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for removing a reaction to this message. See Also IEmote Extension Methods MessageExtensions.GetJumpUrl(IMessage)"
  },
  "api/Kook.IMessageChannel.html": {
    "href": "api/Kook.IMessageChannel.html",
    "title": "Interface IMessageChannel | Kook.Net 文档",
    "keywords": "Interface IMessageChannel Represents a channel that can send and receive messages. Inherited Members IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions) IEntity<UInt64>.Id Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IMessageChannel : IChannel, IEntity<ulong> Methods DeleteMessageAsync(Guid, RequestOptions) Deletes a message. Declaration Task DeleteMessageAsync(Guid messageId, RequestOptions options = null) Parameters Guid messageId The identifier of the message that would be removed. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DeleteMessageAsync(IMessage, RequestOptions) Deletes a message based on the provided message in this channel. Declaration Task DeleteMessageAsync(IMessage message, RequestOptions options = null) Parameters IMessage message The message that would be removed. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. GetMessageAsync(Guid, CacheMode, RequestOptions) Gets a message from this message channel. Declaration Task<IMessage> GetMessageAsync(Guid id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters Guid id The identifier of the message. CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IMessage > A task that represents an asynchronous get operation for retrieving the message. The task result contains the retrieved message; null if no message is found with the specified identifier. GetMessagesAsync(Guid, Direction, Int32, CacheMode, RequestOptions) Gets a collection of messages in this channel. Declaration IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = null, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters Guid referenceMessageId The ID of the starting message to get the messages from. Direction dir The direction of the messages to be gotten from. Int32 limit The numbers of message to be gotten from. CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < IMessage >> Paged collection of messages. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. warning Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! This method will attempt to fetch the number of messages specified under limit around the message referenceMessageId depending on the dir . The library will attempt to split up the requests according to your limit and MaxMessagesPerBatch . In other words, should the user request 500 messages, and the MaxMessagesPerBatch constant is 100 , the request will be split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need of flattening. GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions) Gets a collection of messages in this channel. Declaration IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = null, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters IMessage referenceMessage The starting message to get the messages from. Direction dir The direction of the messages to be gotten from. Int32 limit The numbers of message to be gotten from. CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < IMessage >> Paged collection of messages. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. warning Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! This method will attempt to fetch the number of messages specified under limit around the message referenceMessage depending on the dir . The library will attempt to split up the requests according to your limit and MaxMessagesPerBatch . In other words, should the user request 500 messages, and the MaxMessagesPerBatch constant is 100 , the request will be split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need of flattening. GetMessagesAsync(Int32, CacheMode, RequestOptions) Gets the last N messages from this message channel. Declaration IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(int limit = null, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters Int32 limit The numbers of message to be gotten from. CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < IMessage >> Paged collection of messages. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. warning Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! This method will attempt to fetch the number of messages specified under limit . The library will attempt to split up the requests according to your limit and MaxMessagesPerBatch . In other words, should the user request 500 messages, and the MaxMessagesPerBatch constant is 100 , the request will be split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need of flattening. ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions) Modifies a message. Declaration Task ModifyMessageAsync(Guid messageId, Action<MessageProperties> func, RequestOptions options = null) Parameters Guid messageId The identifier of the message that would be changed. Action < MessageProperties > func A delegate containing the properties to modify the message with. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties . SendCardAsync(ICard, IQuote, IUser, RequestOptions) Sends a card message to this message channel. Declaration Task<Cacheable<IUserMessage, Guid>> SendCardAsync(ICard card, IQuote quote = null, IUser ephemeralUser = null, RequestOptions options = null) Parameters ICard card The card to be sent. IQuote quote The message quote to be included. Used to reply to specific messages. IUser ephemeralUser The user only who can see the message. Leave null to let everyone see the message. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendCardsAsync(IEnumerable<ICard>, IQuote, IUser, RequestOptions) Sends a card message to this message channel. Declaration Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(IEnumerable<ICard> cards, IQuote quote = null, IUser ephemeralUser = null, RequestOptions options = null) Parameters IEnumerable < ICard > cards The cards to be sent. IQuote quote The message quote to be included. Used to reply to specific messages. IUser ephemeralUser The user only who can see the message. Leave null to let everyone see the message. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendFileAsync(FileAttachment, IQuote, IUser, RequestOptions) Sends a file to this message channel. Declaration Task<Cacheable<IUserMessage, Guid>> SendFileAsync(FileAttachment attachment, IQuote quote = null, IUser ephemeralUser = null, RequestOptions options = null) Parameters FileAttachment attachment The attachment containing the file. IQuote quote The message quote to be included. Used to reply to specific messages. IUser ephemeralUser The user only who can see the message. Leave null to let everyone see the message. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendFileAsync(Stream, String, AttachmentType, IQuote, IUser, RequestOptions) Sends a file to this message channel. Declaration Task<Cacheable<IUserMessage, Guid>> SendFileAsync(Stream stream, string fileName, AttachmentType type = AttachmentType.File, IQuote quote = null, IUser ephemeralUser = null, RequestOptions options = null) Parameters Stream stream The stream of the file. String fileName The name of the file. AttachmentType type The type of the file. IQuote quote The message quote to be included. Used to reply to specific messages. IUser ephemeralUser The user only who can see the message. Leave null to let everyone see the message. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendFileAsync(String, String, AttachmentType, IQuote, IUser, RequestOptions) Sends a file to this message channel. Declaration Task<Cacheable<IUserMessage, Guid>> SendFileAsync(string path, string fileName = null, AttachmentType type = AttachmentType.File, IQuote quote = null, IUser ephemeralUser = null, RequestOptions options = null) Parameters String path The file path of the file. String fileName The name of the file. AttachmentType type The type of the file. IQuote quote The message quote to be included. Used to reply to specific messages. IUser ephemeralUser The user only who can see the message. Leave null to let everyone see the message. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendTextAsync(String, IQuote, IUser, RequestOptions) Sends a text message to this message channel. Declaration Task<Cacheable<IUserMessage, Guid>> SendTextAsync(string text, IQuote quote = null, IUser ephemeralUser = null, RequestOptions options = null) Parameters String text The message to be sent. IQuote quote The message quote to be included. Used to reply to specific messages. IUser ephemeralUser The user only who can see the message. Leave null to let everyone see the message. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel)"
  },
  "api/Kook.IModule.html": {
    "href": "api/Kook.IModule.html",
    "title": "Interface IModule | Kook.Net 文档",
    "keywords": "Interface IModule Represents a generic module that can be used in an ICard . Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IModule Properties Type Gets the type of the module. Declaration ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Extension Methods CardExtensions.ToBuilder(IModule)"
  },
  "api/Kook.IModuleBuilder.html": {
    "href": "api/Kook.IModuleBuilder.html",
    "title": "Interface IModuleBuilder | Kook.Net 文档",
    "keywords": "Interface IModuleBuilder A generic module builder for creating an IModule . Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IModuleBuilder Properties Type Specifies the module type of the IModule this builder creates. Declaration ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Methods Build() Builds the IModuleBuilder into an IModule . Declaration IModule Build() Returns IModule An IModule representing the built module object."
  },
  "api/Kook.INestedChannel.html": {
    "href": "api/Kook.INestedChannel.html",
    "title": "Interface INestedChannel | Kook.Net 文档",
    "keywords": "Interface INestedChannel Represents a type of guild channel that can be nested within a category. Inherited Members IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.Position IGuildChannel.Type IGuildChannel.CreatorId IGuildChannel.RolePermissionOverwrites IGuildChannel.UserPermissionOverwrites IGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) IGuildChannel.GetCreatorAsync(CacheMode, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions) IChannel.Name IEntity<UInt64>.Id IDeletable.DeleteAsync(RequestOptions) Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface INestedChannel : IGuildChannel, IChannel, IEntity<ulong>, IDeletable Properties CategoryId Gets the parent (category) ID of this channel in the guild's channel list. Declaration ulong? CategoryId { get; } Property Value Nullable < UInt64 > A ulong representing the identifier of the parent of this channel; null if none is set. IsPermissionSynced Specifies whether the permissions of this channel is synchronized with its parent channel. Declaration bool? IsPermissionSynced { get; } Property Value Nullable < Boolean > A bool indicating whether the permissions of this channel is synchronized with its parent channel. Methods CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions) Creates a new invite to this channel. Declaration Task<IInvite> CreateInviteAsync(InviteMaxAge maxAge = default(InviteMaxAge), InviteMaxUses maxUses = default(InviteMaxUses), RequestOptions options = null) Parameters InviteMaxAge maxAge The time until the invite expires. Set to InviteMaxAge.NeverExpires to never expire. InviteMaxUses maxUses The max amount of times this invite may be used. Set to InviteMaxUses.Unlimited to have unlimited uses. RequestOptions options The options to be used when sending the request. Returns Task < IInvite > A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, RequestOptions) Creates a new invite to this channel. Declaration Task<IInvite> CreateInviteAsync(int? maxAge, int? maxUses = null, RequestOptions options = null) Parameters Nullable < Int32 > maxAge The time (in seconds) until the invite expires. Set to null to never expire. Nullable < Int32 > maxUses The max amount of times this invite may be used. Set to null to have unlimited uses. RequestOptions options The options to be used when sending the request. Returns Task < IInvite > A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. GetCategoryAsync(CacheMode, RequestOptions) Gets the parent (category) channel of this channel. Declaration Task<ICategoryChannel> GetCategoryAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < ICategoryChannel > A task that represents the asynchronous get operation. The task result contains the category channel representing the parent of this channel; null if none is set. GetInvitesAsync(RequestOptions) Gets a collection of all invites from this guild channel. Declaration Task<IReadOnlyCollection<IInvite>> GetInvitesAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < IInvite >> A task that represents the asynchronous get operation. The task result contains a read-only collection of invite, each representing information for an invite found within this guild. SyncPermissionsAsync(RequestOptions) Syncs the permissions of this nested channel with its parent's. Declaration Task SyncPermissionsAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for syncing channel permissions with its parent's. Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel)"
  },
  "api/Kook.IntimacyImage.html": {
    "href": "api/Kook.IntimacyImage.html",
    "title": "Class IntimacyImage | Kook.Net 文档",
    "keywords": "Class IntimacyImage Represents a single image of an intimacy. Inheritance Object IntimacyImage Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class IntimacyImage : object Properties Id Gets the ID of the image of an intimacy. Declaration public uint Id { get; } Property Value UInt32 An int representing the ID of the image of an intimacy. Url Gets the URL of the image of an intimacy. Declaration public string Url { get; } Property Value String A string representing the URL of the image of an intimacy."
  },
  "api/Kook.IntimacyProperties.html": {
    "href": "api/Kook.IntimacyProperties.html",
    "title": "Class IntimacyProperties | Kook.Net 文档",
    "keywords": "Class IntimacyProperties Properties that are used to modify an IIntimacy with the specified changes. Inheritance Object IntimacyProperties Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class IntimacyProperties : object Properties ImageId The ID of the image to be updated on the IIntimacy . Declaration public uint ImageId { get; set; } Property Value UInt32 Score The score to be set on the IIntimacy . Declaration public int Score { get; set; } Property Value Int32 SocialInfo The social information to be set on the IIntimacy . Declaration public string SocialInfo { get; set; } Property Value String See Also UpdateAsync(Action<IntimacyProperties>, RequestOptions)"
  },
  "api/Kook.InviteMaxAge.html": {
    "href": "api/Kook.InviteMaxAge.html",
    "title": "Enum InviteMaxAge | Kook.Net 文档",
    "keywords": "Enum InviteMaxAge Specifies the time in second after which an IInvite will be expired. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum InviteMaxAge : int _1800 The invite will expire after half an hour (1800 seconds). _21600 The invite will expire after 6 hours (21600 seconds). _3600 The invite will expire after one hour (3600 seconds). _43200 The invite will expire after half a day (43200 seconds). _604800 The invite will expire after one week (604800 seconds). _86400 The invite will expire after one day (86400 seconds). NeverExpires The invite will never expire."
  },
  "api/Kook.InviteMaxUses.html": {
    "href": "api/Kook.InviteMaxUses.html",
    "title": "Enum InviteMaxUses | Kook.Net 文档",
    "keywords": "Enum InviteMaxUses Specifies the number of uses after which an IInvite will be expired. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum InviteMaxUses : int _1 This IInvite can be used only once. _10 This IInvite can be used for 10 times. _100 This IInvite can be used for 100 times. _25 This IInvite can be used for 25 times. _5 This IInvite can be used for 5 times. _50 This IInvite can be used for 50 times. Unlimited This IInvite can be used for unlimited times."
  },
  "api/Kook.InviteModule.html": {
    "href": "api/Kook.InviteModule.html",
    "title": "Class InviteModule | Kook.Net 文档",
    "keywords": "Class InviteModule An invite module that can be used in an ICard . Inheritance Object InviteModule Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class InviteModule : object, IModule, IEquatable<InviteModule> Properties Code Gets the invite code. Declaration public string Code { get; } Property Value String Type Gets the type of the module. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Implements IModule.Type Methods Equals(InviteModule) Determines whether the specified InviteModule is equal to the current InviteModule . Declaration public bool Equals(InviteModule inviteModule) Parameters InviteModule inviteModule The InviteModule to compare with the current InviteModule . Returns Boolean true if the specified InviteModule is equal to the current InviteModule ; otherwise, false . Equals(Object) Determines whether the specified InviteModule is equal to the current InviteModule . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current InviteModule . Returns Boolean true if the specified InviteModule is equal to the current InviteModule ; otherwise, false . Remarks If the object passes is an InviteModule , Equals(InviteModule) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 Operators Equality(InviteModule, InviteModule) Determines whether the specified InviteModule is equal to the current InviteModule . Declaration public static bool operator ==(InviteModule left, InviteModule right) Parameters InviteModule left InviteModule right Returns Boolean true if the specified InviteModule is equal to the current InviteModule ; Inequality(InviteModule, InviteModule) Determines whether the specified InviteModule is not equal to the current InviteModule . Declaration public static bool operator !=(InviteModule left, InviteModule right) Parameters InviteModule left InviteModule right Returns Boolean true if the specified InviteModule is not equal to the current InviteModule ; Extension Methods CardExtensions.ToBuilder(InviteModule)"
  },
  "api/Kook.InviteModuleBuilder.html": {
    "href": "api/Kook.InviteModuleBuilder.html",
    "title": "Class InviteModuleBuilder | Kook.Net 文档",
    "keywords": "Class InviteModuleBuilder Represents a invite module builder for creating an InviteModule . Inheritance Object InviteModuleBuilder Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class InviteModuleBuilder : object, IModuleBuilder, IEquatable<InviteModuleBuilder> Constructors InviteModuleBuilder() Initializes a new instance of the InviteModuleBuilder class. Declaration public InviteModuleBuilder() InviteModuleBuilder(String) Initializes a new instance of the InviteModuleBuilder class. Declaration public InviteModuleBuilder(string code) Parameters String code Properties Code Gets or sets the code of the invite. Declaration public string Code { get; set; } Property Value String A string representing the code of the invite. Type Specifies the module type of the IModule this builder creates. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Implements IModuleBuilder.Type Methods Build() Builds this builder into an InviteModule . Declaration public InviteModule Build() Returns InviteModule An InviteModule representing the built invite module object. Equals(InviteModuleBuilder) Determines whether the specified InviteModuleBuilder is equal to the current InviteModuleBuilder . Declaration public bool Equals(InviteModuleBuilder inviteModuleBuilder) Parameters InviteModuleBuilder inviteModuleBuilder The InviteModuleBuilder to compare with the current InviteModuleBuilder . Returns Boolean true if the specified InviteModuleBuilder is equal to the current InviteModuleBuilder ; otherwise, false . Equals(Object) Determines whether the specified InviteModuleBuilder is equal to the current InviteModuleBuilder . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current InviteModuleBuilder . Returns Boolean true if the specified InviteModuleBuilder is equal to the current InviteModuleBuilder ; otherwise, false . Remarks If the object passes is an InviteModuleBuilder , Equals(InviteModuleBuilder) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 WithCode(String) Sets the code of the invite. Declaration public InviteModuleBuilder WithCode(string code) Parameters String code The code of the invite to be set. Returns InviteModuleBuilder The current builder. Operators Equality(InviteModuleBuilder, InviteModuleBuilder) Determines whether the specified InviteModuleBuilder is equal to the current InviteModuleBuilder . Declaration public static bool operator ==(InviteModuleBuilder left, InviteModuleBuilder right) Parameters InviteModuleBuilder left InviteModuleBuilder right Returns Boolean true if the specified InviteModuleBuilder is equal to the current InviteModuleBuilder ; otherwise, false . Implicit(String to InviteModuleBuilder) Initialized a new instance of the InviteModuleBuilder class with the specified code . Declaration public static implicit operator InviteModuleBuilder(string code) Parameters String code The code representing the invite. Returns InviteModuleBuilder An InviteModuleBuilder object that is initialized with the specified code . Inequality(InviteModuleBuilder, InviteModuleBuilder) Determines whether the specified InviteModuleBuilder is not equal to the current InviteModuleBuilder . Declaration public static bool operator !=(InviteModuleBuilder left, InviteModuleBuilder right) Parameters InviteModuleBuilder left InviteModuleBuilder right Returns Boolean true if the specified InviteModuleBuilder is not equal to the current InviteModuleBuilder ; otherwise, false . Explicit Interface Implementations IModuleBuilder.Build() Builds the IModuleBuilder into an IModule . Declaration IModule IModuleBuilder.Build() Returns IModule An IModule representing the built module object. Implements IModuleBuilder.Build()"
  },
  "api/Kook.IPermissionOverwrite-1.html": {
    "href": "api/Kook.IPermissionOverwrite-1.html",
    "title": "Interface IPermissionOverwrite<TTarget> | Kook.Net 文档",
    "keywords": "Interface IPermissionOverwrite<TTarget> Represents a generic permission overwrite. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IPermissionOverwrite<TTarget> Type Parameters TTarget The type of the target. Properties Permissions Gets the overwritten permission. Declaration OverwritePermissions Permissions { get; } Property Value OverwritePermissions Target Gets the target of this overwrite. Declaration TTarget Target { get; } Property Value TTarget"
  },
  "api/Kook.IPoke.html": {
    "href": "api/Kook.IPoke.html",
    "title": "Interface IPoke | Kook.Net 文档",
    "keywords": "Interface IPoke Represents a generic poke. Inherited Members IEntity<UInt32>.Id Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IPoke : IEntity<uint> Properties Categories Gets the categories of the poke. Declaration IReadOnlyCollection<string> Categories { get; } Property Value IReadOnlyCollection < String > Cooldown Gets how long a user needs to wait before they can use the poke again. Declaration TimeSpan Cooldown { get; } Property Value TimeSpan Description Gets the description of the poke. Declaration string Description { get; } Property Value String Icon Gets the icon resources of the poke. Declaration PokeIcon Icon { get; } Property Value PokeIcon Label Gets the label of the poke. Declaration PokeLabel Label { get; } Property Value PokeLabel MessageScenarios Gets how the poke can be used and displayed in message contexts. Declaration IReadOnlyDictionary<string, string> MessageScenarios { get; } Property Value IReadOnlyDictionary < String , String > Name Gets the name of the poke. Declaration string Name { get; } Property Value String Quality Gets the quality of the poke. Declaration PokeQuality Quality { get; } Property Value PokeQuality Resource Gets the resource of the poke. Declaration IPokeResource Resource { get; } Property Value IPokeResource"
  },
  "api/Kook.IPokeAction.html": {
    "href": "api/Kook.IPokeAction.html",
    "title": "Interface IPokeAction | Kook.Net 文档",
    "keywords": "Interface IPokeAction Represents a single generic poke action. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IPokeAction Properties Operator Gets the user who performed the action. Declaration IUser Operator { get; } Property Value IUser Poke Gets the poke this action is associated with. Declaration IPoke Poke { get; } Property Value IPoke Targets Gets the users who were poked by the action. Declaration IReadOnlyCollection<IUser> Targets { get; } Property Value IReadOnlyCollection < IUser >"
  },
  "api/Kook.IPokeResource.html": {
    "href": "api/Kook.IPokeResource.html",
    "title": "Interface IPokeResource | Kook.Net 文档",
    "keywords": "Interface IPokeResource Represents a generic poke resource. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IPokeResource Properties Type Gets the type of the poke resource. Declaration PokeResourceType Type { get; } Property Value PokeResourceType"
  },
  "api/Kook.IPresence.html": {
    "href": "api/Kook.IPresence.html",
    "title": "Interface IPresence | Kook.Net 文档",
    "keywords": "Interface IPresence Represents the user's presence status. This may include their online status and their activity. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IPresence Properties ActiveClient Gets the type of the client where this user is currently active. Declaration ClientType? ActiveClient { get; } Property Value Nullable < ClientType > IsOnline Gets the current status of this user. Declaration bool? IsOnline { get; } Property Value Nullable < Boolean >"
  },
  "api/Kook.IPrivateChannel.html": {
    "href": "api/Kook.IPrivateChannel.html",
    "title": "Interface IPrivateChannel | Kook.Net 文档",
    "keywords": "Interface IPrivateChannel Represents a generic channel that is private to selected recipients. Inherited Members IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions) IEntity<UInt64>.Id Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IPrivateChannel : IChannel, IEntity<ulong> Properties Recipients Gets the users that can access this channel. Declaration IReadOnlyCollection<IUser> Recipients { get; } Property Value IReadOnlyCollection < IUser > A read-only collection of users that can access this channel. Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel)"
  },
  "api/Kook.IQuote.html": {
    "href": "api/Kook.IQuote.html",
    "title": "Interface IQuote | Kook.Net 文档",
    "keywords": "Interface IQuote Represents a generic message quote. Inherited Members IEntity<String>.Id Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IQuote : IEntity<string> Properties Author Gets the author of this message. Declaration IUser Author { get; } Property Value IUser Content Gets the content of the message this quote refers to. Declaration string Content { get; } Property Value String A string that contains the body of the message; note that this field may be empty or the original code if the message is not a text based message. CreateAt Gets the time this message was sent. Declaration DateTimeOffset CreateAt { get; } Property Value DateTimeOffset Time of when the message was sent. QuotedMessageId Gets the identifier of the message this quote refers to. Declaration Guid QuotedMessageId { get; } Property Value Guid Type Gets the type of the message this quote refers to. Declaration MessageType Type { get; } Property Value MessageType"
  },
  "api/Kook.IRateLimitInfo.html": {
    "href": "api/Kook.IRateLimitInfo.html",
    "title": "Interface IRateLimitInfo | Kook.Net 文档",
    "keywords": "Interface IRateLimitInfo Represents a generic ratelimit info. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IRateLimitInfo Properties Bucket Gets a unique string denoting the rate limit being encountered (non-inclusive of major parameters in the route path). Declaration string Bucket { get; } Property Value String Endpoint Gets the endpoint that this ratelimit info came from. Declaration string Endpoint { get; } Property Value String IsGlobal Gets whether or not this ratelimit info is global. Declaration bool IsGlobal { get; } Property Value Boolean Lag Gets the amount of lag for the request. This is used to denote the precise time of when the ratelimit expires. Declaration TimeSpan? Lag { get; } Property Value Nullable < TimeSpan > Limit Gets the number of requests that can be made. Declaration int? Limit { get; } Property Value Nullable < Int32 > Remaining Gets the number of remaining requests that can be made. Declaration int? Remaining { get; } Property Value Nullable < Int32 > ResetAfter Gets the absolute time when this ratelimit resets. Declaration TimeSpan? ResetAfter { get; } Property Value Nullable < TimeSpan >"
  },
  "api/Kook.IReaction.html": {
    "href": "api/Kook.IReaction.html",
    "title": "Interface IReaction | Kook.Net 文档",
    "keywords": "Interface IReaction Represents a generic reaction object. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IReaction Properties Emote The IEmote used in the reaction. Declaration IEmote Emote { get; } Property Value IEmote"
  },
  "api/Kook.IRecommendInfo.html": {
    "href": "api/Kook.IRecommendInfo.html",
    "title": "Interface IRecommendInfo | Kook.Net 文档",
    "keywords": "Interface IRecommendInfo Represents a generic recommendation information. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IRecommendInfo Properties AuditStatus TODO: To be documented. Declaration int AuditStatus { get; } Property Value Int32 Banner Gets the banner URL of the recommended guild. Declaration string Banner { get; } Property Value String A string representing the banner URL of the recommended guild. BoostLevel Gets the boost level of the recommended guild. Declaration BoostLevel BoostLevel { get; } Property Value BoostLevel A BoostLevel representing the boost level of the recommended guild. CustomId TODO: To be documented. Declaration string CustomId { get; } Property Value String DaysBeforeModify Gets the number of days need to be waited before the recommendation information can be modified again. Declaration int DaysBeforeModify { get; } Property Value Int32 An representing the number of days need to be waited before the recommendation information can be modified again. DefaultChannelId Gets the default channel ID of the recommended guild. Declaration ulong DefaultChannelId { get; } Property Value UInt64 A ulong representing the default channel ID of the recommended guild. Description Gets the description of the recommended guild. Declaration string Description { get; } Property Value String A string representing the description of the recommended guild. Features Gets the features of the recommended guild. Declaration GuildFeatures Features { get; } Property Value GuildFeatures GuildId Gets the ID of the recommended guild. Declaration ulong GuildId { get; } Property Value UInt64 A ulong representing the ID of the recommended guild. Icon Gets the icon URL of the recommended guild. Declaration string Icon { get; } Property Value String A string representing the icon URL of the recommended guild. IsOfficialPartner Gets whether the recommended guild is an official partner. Declaration bool IsOfficialPartner { get; } Property Value Boolean A bool representing whether the recommended guild is an official partner. Name Gets the name of the recommended guild. Declaration string Name { get; } Property Value String A string representing the name of the recommended guild. OpenId Gets the open ID for the recommended guild. Declaration uint OpenId { get; } Property Value UInt32 Sort TODO: To be documented. Declaration int Sort { get; } Property Value Int32 Status Gets the status of the recommended guild. Declaration int Status { get; } Property Value Int32 A int representing the status of the recommended guild. Tag Gets the tag of the recommended guild. Declaration string Tag { get; } Property Value String A string representing the tag of the recommended guild."
  },
  "api/Kook.IRole.html": {
    "href": "api/Kook.IRole.html",
    "title": "Interface IRole | Kook.Net 文档",
    "keywords": "Interface IRole Represents a generic role object to be given to a guild user. Inherited Members IEntity<UInt32>.Id IDeletable.DeleteAsync(RequestOptions) IMentionable.PlainTextMention IMentionable.KMarkdownMention Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IRole : IEntity<uint>, IDeletable, IMentionable, IComparable<IRole> Properties Color Gets the color given to users of this role. Declaration Color Color { get; } Property Value Color A Color struct representing the color of this role. ColorType Gets the type of the color given to users of this role. Declaration ColorType ColorType { get; } Property Value ColorType A ColorType struct representing the color type of this role. GradientColor Gets the gradient color given to users of this role. Declaration GradientColor? GradientColor { get; } Property Value Nullable < GradientColor > A GradientColor struct representing the gradient color of this role; null if the role does not have a gradient color. Guild Gets the guild that owns this role. Declaration IGuild Guild { get; } Property Value IGuild A guild representing the parent guild of this role. IsHoisted Gets a value that indicates whether the role can be separated in the user list. Declaration bool IsHoisted { get; } Property Value Boolean true if users of this role are separated in the user list; otherwise false . IsMentionable Gets a value that indicates whether the role is mentionable. Declaration bool IsMentionable { get; } Property Value Boolean true if this role may be mentioned in messages; otherwise false . Name Gets the name of this role. Declaration string Name { get; } Property Value String A string containing the name of this role. Permissions Gets the permissions granted to members of this role. Declaration GuildPermissions Permissions { get; } Property Value GuildPermissions A GuildPermissions struct that this role possesses. Position Gets this role's position relative to other roles in the same guild. Declaration int Position { get; } Property Value Int32 An representing the position of the role in the role list of the guild. Type Gets the type of this role. Declaration RoleType? Type { get; } Property Value Nullable < RoleType > A RoleType representing the type of this role. Methods GetUsersAsync(CacheMode, RequestOptions) Gets a collection of users with this role. Declaration IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> GetUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < IGuildUser >> Paged collection of users with this role. ModifyAsync(Action<RoleProperties>, RequestOptions) Modifies this role. Declaration Task ModifyAsync(Action<RoleProperties> func, RequestOptions options = null) Parameters Action < RoleProperties > func A delegate containing the properties to modify the role with. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies this role with the specified properties. To see an example of this method and what properties are available, please refer to RoleProperties ."
  },
  "api/Kook.ISelfUser.html": {
    "href": "api/Kook.ISelfUser.html",
    "title": "Interface ISelfUser | Kook.Net 文档",
    "keywords": "Interface ISelfUser Represents the logged-in Kook user. Inherited Members IUser.Username IUser.IdentifyNumber IUser.IdentifyNumberValue IUser.IsBot IUser.IsBanned IUser.HasBuff IUser.HasAnnualBuff IUser.Avatar IUser.BuffAvatar IUser.Banner IUser.IsDenoiseEnabled IUser.UserTag IUser.Nameplates IUser.IsSystemUser IUser.CreateDMChannelAsync(RequestOptions) IUser.GetIntimacyAsync(RequestOptions) IUser.UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) IUser.BlockAsync(RequestOptions) IUser.UnblockAsync(RequestOptions) IUser.RequestFriendAsync(RequestOptions) IUser.RemoveFriendAsync(RequestOptions) IEntity<UInt64>.Id IMentionable.PlainTextMention IMentionable.KMarkdownMention IPresence.IsOnline IPresence.ActiveClient Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface ISelfUser : IUser, IEntity<ulong>, IMentionable, IPresence Properties InvitedCount TODO: To be documented. Declaration int InvitedCount { get; } Property Value Int32 IsMobileVerified Gets whether the mobile number of the logged-in user is verified. Declaration bool IsMobileVerified { get; } Property Value Boolean Mobile Gets the mobile number of the logged-in user. Declaration string Mobile { get; } Property Value String MobilePrefix Gets the mobile prefix of the logged-in user. Declaration string MobilePrefix { get; } Property Value String Methods StartPlayingAsync(IGame, RequestOptions) Starts a new game activity. After this operation, a game activity will be displayed on the currently connected user's profile. Declaration Task StartPlayingAsync(IGame game, RequestOptions options = null) Parameters IGame game The game to be played. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for starting a game activity. StartPlayingAsync(Music, RequestOptions) Starts a new music activity. After this operation, a music activity will be displayed on the currently connected user's profile. Declaration Task StartPlayingAsync(Music music, RequestOptions options = null) Parameters Music music The music being listened to be showed. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for starting a music activity. StopPlayingAsync(ActivityType, RequestOptions) Stops an activity. After this operation, the activity on the currently connected user's profile will disappear. Declaration Task StopPlayingAsync(ActivityType type, RequestOptions options = null) Parameters ActivityType type The type of the activity to stop RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for stopping an activity. Extension Methods UserExtensions.SendFileAsync(IUser, String, String, AttachmentType, IQuote, RequestOptions) UserExtensions.SendFileAsync(IUser, Stream, String, AttachmentType, IQuote, RequestOptions) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote, RequestOptions) UserExtensions.SendTextAsync(IUser, String, IQuote, RequestOptions) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote, RequestOptions) UserExtensions.SendCardAsync(IUser, ICard, IQuote, RequestOptions)"
  },
  "api/Kook.ISystemMessage.html": {
    "href": "api/Kook.ISystemMessage.html",
    "title": "Interface ISystemMessage | Kook.Net 文档",
    "keywords": "Interface ISystemMessage Represents a generic message sent by the system. Inherited Members IMessage.Type IMessage.Source IMessage.IsPinned IMessage.Channel IMessage.Author IMessage.Content IMessage.CleanContent IMessage.Timestamp IMessage.EditedTimestamp IMessage.MentionedUserIds IMessage.MentionedRoleIds IMessage.MentionedEveryone IMessage.MentionedHere IMessage.Tags IMessage.Attachments IMessage.Cards IMessage.Embeds IMessage.Pokes IMessage.Reactions IMessage.AddReactionAsync(IEmote, RequestOptions) IMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) IMessage.RemoveReactionAsync(IEmote, UInt64, RequestOptions) IMessage.GetReactionUsersAsync(IEmote, RequestOptions) IEntity<Guid>.Id IDeletable.DeleteAsync(RequestOptions) Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface ISystemMessage : IMessage, IEntity<Guid>, IDeletable Properties SystemMessageType Gets the type of the system message. Declaration SystemMessageType SystemMessageType { get; } Property Value SystemMessageType Remarks warning Because the data from Kook does not describe the type of the message in detail, this property is not implemented yet. Accessing this property will always result in an exception at present. Extension Methods MessageExtensions.GetJumpUrl(IMessage)"
  },
  "api/Kook.ITag.html": {
    "href": "api/Kook.ITag.html",
    "title": "Interface ITag | Kook.Net 文档",
    "keywords": "Interface ITag Gets a generic tag found in messages. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface ITag Properties Index Gets position of the tag in the message. Declaration int Index { get; } Property Value Int32 Key Gets the key of the tag. Declaration dynamic Key { get; } Property Value Object Length Gets the length of the tag. Declaration int Length { get; } Property Value Int32 Type Gets the type of the tag. Declaration TagType Type { get; } Property Value TagType Value Gets the value of the tag. Declaration object Value { get; } Property Value Object See Also Tags"
  },
  "api/Kook.ITextChannel.html": {
    "href": "api/Kook.ITextChannel.html",
    "title": "Interface ITextChannel | Kook.Net 文档",
    "keywords": "Interface ITextChannel Represents a generic channel in a guild that can send and receive messages. Inherited Members INestedChannel.CategoryId INestedChannel.IsPermissionSynced INestedChannel.SyncPermissionsAsync(RequestOptions) INestedChannel.GetCategoryAsync(CacheMode, RequestOptions) INestedChannel.GetInvitesAsync(RequestOptions) INestedChannel.CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions) INestedChannel.CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, RequestOptions) IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.Position IGuildChannel.Type IGuildChannel.CreatorId IGuildChannel.RolePermissionOverwrites IGuildChannel.UserPermissionOverwrites IGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) IGuildChannel.GetCreatorAsync(CacheMode, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions) IDeletable.DeleteAsync(RequestOptions) IMentionable.PlainTextMention IMentionable.KMarkdownMention IMessageChannel.SendFileAsync(String, String, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(Stream, String, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(FileAttachment, IQuote, IUser, RequestOptions) IMessageChannel.SendTextAsync(String, IQuote, IUser, RequestOptions) IMessageChannel.SendCardAsync(ICard, IQuote, IUser, RequestOptions) IMessageChannel.SendCardsAsync(IEnumerable<ICard>, IQuote, IUser, RequestOptions) IMessageChannel.GetMessageAsync(Guid, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(Int32, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(Guid, Direction, Int32, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions) IMessageChannel.DeleteMessageAsync(Guid, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) IMessageChannel.ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions) IChannel.Name IEntity<UInt64>.Id Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface ITextChannel : INestedChannel, IGuildChannel, IDeletable, IMentionable, IMessageChannel, IChannel, IEntity<ulong> Properties SlowModeInterval Gets the current slow-mode delay for this channel. Declaration int SlowModeInterval { get; } Property Value Int32 An int representing the time in seconds required before the user can send another message; 0 if disabled. Topic Gets the current topic for this text channel. Declaration string Topic { get; } Property Value String A string representing the topic set in the channel; null if none is set. Methods GetPinnedMessagesAsync(RequestOptions) Gets a collection of pinned messages in this channel. Declaration Task<IReadOnlyCollection<IMessage>> GetPinnedMessagesAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < IMessage >> A task that represents the asynchronous get operation for retrieving pinned messages in this channel. The task result contains a collection of messages found in the pinned messages. ModifyAsync(Action<ModifyTextChannelProperties>, RequestOptions) Modifies this text channel. Declaration Task ModifyAsync(Action<ModifyTextChannelProperties> func, RequestOptions options = null) Parameters Action < ModifyTextChannelProperties > func The delegate containing the properties to modify the channel with. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. See Also ModifyTextChannelProperties Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel)"
  },
  "api/Kook.IUpdateable.html": {
    "href": "api/Kook.IUpdateable.html",
    "title": "Interface IUpdateable | Kook.Net 文档",
    "keywords": "Interface IUpdateable Defines whether the object is updateable or not. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IUpdateable Methods UpdateAsync(RequestOptions) Updates this object's properties with its current state. Declaration Task UpdateAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task A task that represents an asynchronous reloading operation. Remarks warning This method will fetch the latest data from REST API, and replace the current object's properties with the new data."
  },
  "api/Kook.IUser.html": {
    "href": "api/Kook.IUser.html",
    "title": "Interface IUser | Kook.Net 文档",
    "keywords": "Interface IUser Represents a generic user. Inherited Members IEntity<UInt64>.Id IMentionable.PlainTextMention IMentionable.KMarkdownMention IPresence.IsOnline IPresence.ActiveClient Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IUser : IEntity<ulong>, IMentionable, IPresence Properties Avatar Gets the link to this user's avatar. Declaration string Avatar { get; } Property Value String Banner Gets the link to this user's banner. Declaration string Banner { get; } Property Value String BuffAvatar Gets the link to this user's BUFF avatar. Declaration string BuffAvatar { get; } Property Value String HasAnnualBuff Gets whether this user's BUFF subscription is annual; null if unknown. Declaration bool? HasAnnualBuff { get; } Property Value Nullable < Boolean > HasBuff Gets whether this user has subscribed to BUFF; null if unknown. Declaration bool? HasBuff { get; } Property Value Nullable < Boolean > IdentifyNumber Gets the per-username unique ID for this user. Declaration string IdentifyNumber { get; } Property Value String IdentifyNumberValue Gets the per-username unique ID for this user. Declaration ushort? IdentifyNumberValue { get; } Property Value Nullable < UInt16 > IsBanned Gets whether this user is banned; null if unknown. Declaration bool? IsBanned { get; } Property Value Nullable < Boolean > IsBot Gets whether this user is a bot; null if unknown. Declaration bool? IsBot { get; } Property Value Nullable < Boolean > IsDenoiseEnabled Gets whether this user enabled denoise feature; null if unknown. Declaration bool? IsDenoiseEnabled { get; } Property Value Nullable < Boolean > IsSystemUser Gets whether this user is a system user. Declaration bool? IsSystemUser { get; } Property Value Nullable < Boolean > Nameplates Gets the nameplates this user has. Declaration IReadOnlyCollection<Nameplate> Nameplates { get; } Property Value IReadOnlyCollection < Nameplate > Username Gets the username for this user. Declaration string Username { get; } Property Value String UserTag Get the tag this user has. Declaration UserTag UserTag { get; } Property Value UserTag Methods BlockAsync(RequestOptions) Gets the friend state with this user. Declaration Task BlockAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for getting the friend state. CreateDMChannelAsync(RequestOptions) Creates the direct message channel of this user. Declaration Task<IDMChannel> CreateDMChannelAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IDMChannel > A task that represents the asynchronous operation for getting or creating a DM channel. The task result contains the DM channel associated with this user. Remarks This method is used to obtain or create a channel used to send a direct message. warning In event that the current user cannot send a message to the target user, a channel can and will still be created by Kook. However, attempting to send a message will yield a HttpException with a 403 as its HttpCode . There are currently no official workarounds by Kook. GetIntimacyAsync(RequestOptions) Gets the intimacy information with this user. Declaration Task<IIntimacy> GetIntimacyAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IIntimacy > A task that represents the asynchronous operation for getting the intimacy information. The task result contains the intimacy information associated with this user. RemoveFriendAsync(RequestOptions) Gets the friend state with this user. Declaration Task RemoveFriendAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for getting the friend state. RequestFriendAsync(RequestOptions) Sends a friend request to this user. Declaration Task RequestFriendAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for sending the friend request. UnblockAsync(RequestOptions) Gets the friend state with this user. Declaration Task UnblockAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for getting the friend state. UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) Updates the intimacy information with this user. Declaration Task UpdateIntimacyAsync(Action<IntimacyProperties> func, RequestOptions options = null) Parameters Action < IntimacyProperties > func A delegate containing the properties to modify the IIntimacy with. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for updating the intimacy information. Extension Methods UserExtensions.SendFileAsync(IUser, String, String, AttachmentType, IQuote, RequestOptions) UserExtensions.SendFileAsync(IUser, Stream, String, AttachmentType, IQuote, RequestOptions) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote, RequestOptions) UserExtensions.SendTextAsync(IUser, String, IQuote, RequestOptions) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote, RequestOptions) UserExtensions.SendCardAsync(IUser, ICard, IQuote, RequestOptions)"
  },
  "api/Kook.IUserMessage.html": {
    "href": "api/Kook.IUserMessage.html",
    "title": "Interface IUserMessage | Kook.Net 文档",
    "keywords": "Interface IUserMessage Represents a generic message sent by a user. Inherited Members IMessage.Type IMessage.Source IMessage.IsPinned IMessage.Channel IMessage.Author IMessage.Content IMessage.CleanContent IMessage.Timestamp IMessage.EditedTimestamp IMessage.MentionedUserIds IMessage.MentionedRoleIds IMessage.MentionedEveryone IMessage.MentionedHere IMessage.Tags IMessage.Attachments IMessage.Cards IMessage.Embeds IMessage.Pokes IMessage.Reactions IMessage.AddReactionAsync(IEmote, RequestOptions) IMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) IMessage.RemoveReactionAsync(IEmote, UInt64, RequestOptions) IMessage.GetReactionUsersAsync(IEmote, RequestOptions) IEntity<Guid>.Id IDeletable.DeleteAsync(RequestOptions) Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IUserMessage : IMessage, IEntity<Guid>, IDeletable Properties Quote Gets the message quote. Declaration IQuote Quote { get; } Property Value IQuote The message quote. Methods ModifyAsync(Action<MessageProperties>, RequestOptions) Modifies this message. Declaration Task ModifyAsync(Action<MessageProperties> func, RequestOptions options = null) Parameters Action < MessageProperties > func A delegate containing the properties to modify the message with. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties . Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) Transforms this message's text into a human-readable form by resolving its tags. Declaration string Resolve(TagHandling userHandling = default(TagHandling), TagHandling channelHandling = default(TagHandling), TagHandling roleHandling = default(TagHandling), TagHandling everyoneHandling = default(TagHandling), TagHandling emojiHandling = default(TagHandling)) Parameters TagHandling userHandling Determines how the user tag should be handled. TagHandling channelHandling Determines how the channel tag should be handled. TagHandling roleHandling Determines how the role tag should be handled. TagHandling everyoneHandling Determines how the @everyone tag should be handled. TagHandling emojiHandling Determines how the emoji tag should be handled. Returns String Extension Methods MessageExtensions.HasCharPrefix(IUserMessage, Char, ref Int32) MessageExtensions.HasStringPrefix(IUserMessage, String, ref Int32, StringComparison) MessageExtensions.HasMentionPrefix(IUserMessage, IUser, ref Int32) MessageExtensions.GetJumpUrl(IMessage) MessageExtensions.AddReactionsAsync(IUserMessage, IEnumerable<IEmote>, RequestOptions) MessageExtensions.RemoveReactionsAsync(IUserMessage, IUser, IEnumerable<IEmote>, RequestOptions) MessageExtensions.ReplyFileAsync(IUserMessage, String, String, AttachmentType, Boolean, Boolean, RequestOptions) MessageExtensions.ReplyFileAsync(IUserMessage, Stream, String, AttachmentType, Boolean, Boolean, RequestOptions) MessageExtensions.ReplyFileAsync(IUserMessage, FileAttachment, Boolean, Boolean, RequestOptions) MessageExtensions.ReplyTextAsync(IUserMessage, String, Boolean, Boolean, RequestOptions) MessageExtensions.ReplyCardsAsync(IUserMessage, IEnumerable<ICard>, Boolean, Boolean, RequestOptions) MessageExtensions.ReplyCardAsync(IUserMessage, ICard, Boolean, Boolean, RequestOptions)"
  },
  "api/Kook.IVoiceChannel.html": {
    "href": "api/Kook.IVoiceChannel.html",
    "title": "Interface IVoiceChannel | Kook.Net 文档",
    "keywords": "Interface IVoiceChannel Represents a generic voice channel in a guild. Inherited Members INestedChannel.CategoryId INestedChannel.IsPermissionSynced INestedChannel.SyncPermissionsAsync(RequestOptions) INestedChannel.GetCategoryAsync(CacheMode, RequestOptions) INestedChannel.GetInvitesAsync(RequestOptions) INestedChannel.CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions) INestedChannel.CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, RequestOptions) IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.Position IGuildChannel.Type IGuildChannel.CreatorId IGuildChannel.RolePermissionOverwrites IGuildChannel.UserPermissionOverwrites IGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) IGuildChannel.GetCreatorAsync(CacheMode, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions) IDeletable.DeleteAsync(RequestOptions) IAudioChannel.IsVoiceRegionOverwritten IAudioChannel.VoiceRegion IAudioChannel.ServerUrl IChannel.Name IEntity<UInt64>.Id IMentionable.PlainTextMention IMentionable.KMarkdownMention Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IVoiceChannel : INestedChannel, IGuildChannel, IDeletable, IAudioChannel, IChannel, IEntity<ulong>, IMentionable Properties HasPassword Gets whether this voice channel is locked by a password. Declaration bool HasPassword { get; } Property Value Boolean A bool representing whether this voice channel is locked by a password. UserLimit Gets the max number of users allowed to be connected to this channel at once. Declaration int? UserLimit { get; } Property Value Nullable < Int32 > An int representing the maximum number of users that are allowed to be connected to this channel at once; null if a limit is not set. VoiceQuality Gets the voice quality that the clients in this voice channel are requested to use. Declaration VoiceQuality? VoiceQuality { get; } Property Value Nullable < VoiceQuality > A VoiceQuality representing the voice quality that this voice channel defines and requests the client(s) to use. Methods GetConnectedUsersAsync(CacheMode, RequestOptions) Gets the users connected to this voice channel. Declaration Task<IReadOnlyCollection<IUser>> GetConnectedUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < IUser >> A task that represents the asynchronous get operation. The task result contains a collection of IGuildUser s that are connected to this voice channel. ModifyAsync(Action<ModifyVoiceChannelProperties>, RequestOptions) Modifies this voice channel. Declaration Task ModifyAsync(Action<ModifyVoiceChannelProperties> func, RequestOptions options = null) Parameters Action < ModifyVoiceChannelProperties > func The properties to modify the channel with. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. See Also ModifyVoiceChannelProperties Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel)"
  },
  "api/Kook.IVoiceRegion.html": {
    "href": "api/Kook.IVoiceRegion.html",
    "title": "Interface IVoiceRegion | Kook.Net 文档",
    "keywords": "Interface IVoiceRegion Represents a region of which the user connects to when using voice. Namespace : Kook Assembly : Kook.Net.Experimental.dll Syntax public interface IVoiceRegion Remarks warning This entity is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future. Properties Crowding Gets the crowding of this voice region. Declaration decimal Crowding { get; } Property Value Decimal A decimal between 0.0 and 1.0 that represents the crowding of this voice region. Id Gets the unique identifier for this voice region. Declaration string Id { get; } Property Value String A string that represents the identifier for this voice region (e.g. eu-central ). MinimumBoostLevel Gets the minimum boost level required to use this voice region. Declaration BoostLevel MinimumBoostLevel { get; } Property Value BoostLevel A that represents the minimum boost level required to use this voice region. Name Gets the name of this voice region. Declaration string Name { get; } Property Value String A string that represents the human-readable name of this voice region (e.g. Central Europe )."
  },
  "api/Kook.IVoiceState.html": {
    "href": "api/Kook.IVoiceState.html",
    "title": "Interface IVoiceState | Kook.Net 文档",
    "keywords": "Interface IVoiceState Represents a user's voice connection status. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public interface IVoiceState Properties IsDeafened Gets a value that indicates whether this user is deafened by the guild. Declaration bool? IsDeafened { get; } Property Value Nullable < Boolean > true if the user is deafened (i.e. not permitted to listen to or speak to others) by the guild; otherwise false ; null if unknown. IsMuted Gets a value that indicates whether this user is muted (i.e. not permitted to speak via voice) by the guild. Declaration bool? IsMuted { get; } Property Value Nullable < Boolean > true if this user is muted by the guild; otherwise false ; null if unknown. VoiceChannel Gets the voice channel this user is currently in. Declaration IVoiceChannel VoiceChannel { get; } Property Value IVoiceChannel A generic voice channel object representing the voice channel that the user is currently in; null if none."
  },
  "api/Kook.KMarkdownElement.html": {
    "href": "api/Kook.KMarkdownElement.html",
    "title": "Class KMarkdownElement | Kook.Net 文档",
    "keywords": "Class KMarkdownElement A KMarkdown element that can be used in an IModule . Inheritance Object KMarkdownElement Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class KMarkdownElement : object, IElement, IEquatable<KMarkdownElement> Properties Content Gets the KMarkdown content of the element. Declaration public string Content { get; } Property Value String A string that represents the KMarkdown content of the element. Type Gets the type of the element. Declaration public ElementType Type { get; } Property Value ElementType An ElementType value that represents the theme of the button. Implements IElement.Type Methods Equals(KMarkdownElement) Determines whether the specified KMarkdownElement is equal to the current KMarkdownElement . Declaration public bool Equals(KMarkdownElement kMarkdownElement) Parameters KMarkdownElement kMarkdownElement The KMarkdownElement to compare with the current KMarkdownElement . Returns Boolean true if the specified KMarkdownElement is equal to the current KMarkdownElement ; otherwise, false . Equals(Object) Determines whether the specified KMarkdownElement is equal to the current KMarkdownElement . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current KMarkdownElement . Returns Boolean true if the specified KMarkdownElement is equal to the current KMarkdownElement ; otherwise, false . Remarks If the object passes is an KMarkdownElement , Equals(KMarkdownElement) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 ToString() Declaration public override string ToString() Returns String Operators Equality(KMarkdownElement, KMarkdownElement) Determines whether the specified KMarkdownElement is equal to the current KMarkdownElement . Declaration public static bool operator ==(KMarkdownElement left, KMarkdownElement right) Parameters KMarkdownElement left KMarkdownElement right Returns Boolean true if the specified KMarkdownElement is equal to the current KMarkdownElement ; otherwise, false . Inequality(KMarkdownElement, KMarkdownElement) Determines whether the specified KMarkdownElement is not equal to the current KMarkdownElement . Declaration public static bool operator !=(KMarkdownElement left, KMarkdownElement right) Parameters KMarkdownElement left KMarkdownElement right Returns Boolean true if the specified KMarkdownElement is not equal to the current KMarkdownElement ; otherwise, false . Extension Methods CardExtensions.ToBuilder(KMarkdownElement)"
  },
  "api/Kook.KMarkdownElementBuilder.html": {
    "href": "api/Kook.KMarkdownElementBuilder.html",
    "title": "Class KMarkdownElementBuilder | Kook.Net 文档",
    "keywords": "Class KMarkdownElementBuilder An element builder to build a KMarkdownElement . Inheritance Object KMarkdownElementBuilder Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class KMarkdownElementBuilder : object, IElementBuilder, IEquatable<KMarkdownElementBuilder> Constructors KMarkdownElementBuilder() Initializes a new instance of the KMarkdownElementBuilder class. Declaration public KMarkdownElementBuilder() KMarkdownElementBuilder(String) Initializes a new instance of the KMarkdownElementBuilder class. Declaration public KMarkdownElementBuilder(string content) Parameters String content Fields MaxKMarkdownLength Gets the maximum KMarkdown length allowed by Kook. Declaration public const int MaxKMarkdownLength = null Field Value Int32 Properties Content Gets or sets the content of a KMarkdownElementBuilder . Declaration public string Content { get; set; } Property Value String The content of the KMarkdownElementBuilder . Type Gets the type of the element that this builder builds. Declaration public ElementType Type { get; } Property Value ElementType An ElementType that represents the type of element that this builder builds. Implements IElementBuilder.Type Methods Build() Builds the KMarkdownElementBuilder into a KMarkdownElement . Declaration public KMarkdownElement Build() Returns KMarkdownElement A KMarkdownElement represents the built element object. Equals(KMarkdownElementBuilder) Determines whether the specified KMarkdownElementBuilder is equal to the current KMarkdownElementBuilder . Declaration public bool Equals(KMarkdownElementBuilder kMarkdownElementBuilder) Parameters KMarkdownElementBuilder kMarkdownElementBuilder The KMarkdownElementBuilder to compare with the current KMarkdownElementBuilder . Returns Boolean true if the specified KMarkdownElementBuilder is equal to the current KMarkdownElementBuilder ; otherwise, false . Equals(Object) Determines whether the specified is equal to the current KMarkdownElementBuilder . Declaration public override bool Equals(object obj) Parameters Object obj The to compare with the current KMarkdownElementBuilder . Returns Boolean true if the specified is equal to the current KMarkdownElementBuilder ; otherwise, false . GetHashCode() Declaration public override int GetHashCode() Returns Int32 WithContent(String) Sets the content of a KMarkdownElementBuilder . Declaration public KMarkdownElementBuilder WithContent(string content) Parameters String content The text to be set as the content. Returns KMarkdownElementBuilder The current builder. Operators Equality(KMarkdownElementBuilder, KMarkdownElementBuilder) Determines whether the specified KMarkdownElementBuilder is equal to the current KMarkdownElementBuilder . Declaration public static bool operator ==(KMarkdownElementBuilder left, KMarkdownElementBuilder right) Parameters KMarkdownElementBuilder left KMarkdownElementBuilder right Returns Boolean true if the specified KMarkdownElementBuilder is equal to the current KMarkdownElementBuilder ; otherwise, false . Implicit(String to KMarkdownElementBuilder) Initialized a new instance of the KMarkdownElementBuilder class with the specified content. Declaration public static implicit operator KMarkdownElementBuilder(string content) Parameters String content The content of the KMarkdownElement . Returns KMarkdownElementBuilder A KMarkdownElementBuilder object that is initialized with the specified content. Inequality(KMarkdownElementBuilder, KMarkdownElementBuilder) Determines whether the specified KMarkdownElementBuilder is not equal to the current KMarkdownElementBuilder . Declaration public static bool operator !=(KMarkdownElementBuilder left, KMarkdownElementBuilder right) Parameters KMarkdownElementBuilder left KMarkdownElementBuilder right Returns Boolean true if the specified KMarkdownElementBuilder is not equal to the current KMarkdownElementBuilder ; otherwise, false . Explicit Interface Implementations IElementBuilder.Build() Builds the IElementBuilder into an IElement . Declaration IElement IElementBuilder.Build() Returns IElement An IElement represents the built element object. Implements IElementBuilder.Build()"
  },
  "api/Kook.KookConfig.html": {
    "href": "api/Kook.KookConfig.html",
    "title": "Class KookConfig | Kook.Net 文档",
    "keywords": "Class KookConfig Defines various behaviors of Kook.Net. Inheritance Object KookConfig KookRestConfig Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class KookConfig : object Fields APIUrl Returns the base Kook API URL. Declaration public static readonly string APIUrl Field Value String The Kook API URL using APIVersion . APIVersion Returns the API version Kook.Net uses. Declaration public const int APIVersion = null Field Value Int32 An int representing the API version that Kook.Net uses to communicate with Kook. A list of available API version can be seen on the official Kook API documentation . BoostPackDuration Returns the duration of a Kook boost pack. Declaration public static readonly TimeSpan BoostPackDuration Field Value TimeSpan DefaultRequestTimeout Returns the default timeout for requests. Declaration public const int DefaultRequestTimeout = null Field Value Int32 The amount of time it takes in milliseconds before a request is timed out. MaxIntimacyScore Returns the max value for a Kook intimacy score. Declaration public const int MaxIntimacyScore = null Field Value Int32 The maximum value of an intimacy score allowed by Kook. MaxItemsPerBatchByDefault Returns the max items allowed to be in a request by default. Declaration public const int MaxItemsPerBatchByDefault = null Field Value Int32 The maximum number of items that can be gotten per-batch by default. MaxMessageSize Returns the max length for a Kook message. Declaration public const int MaxMessageSize = null Field Value Int32 The maximum length of a message allowed by Kook. Remarks warning The accurate value of this property is not known. It is set to int.MaxValue at current so that it does not work. MaxMessagesPerBatch Returns the max messages allowed to be in a request. Declaration public const int MaxMessagesPerBatch = null Field Value Int32 The maximum number of messages that can be gotten per-batch. MaxNicknameSize Returns the max length for a Kook guild nickname. Declaration public const int MaxNicknameSize = null Field Value Int32 The maximum length of a nickname allowed by Kook. MaxUsersPerBatch Returns the max users allowed to be in a request. Declaration public const int MaxUsersPerBatch = null Field Value Int32 The maximum number of users that can be gotten per-batch. MinIntimacyScore Returns the min value for a Kook intimacy score. Declaration public const int MinIntimacyScore = null Field Value Int32 The minimum value of an intimacy score allowed by Kook. MinNicknameSize Returns the min length for a Kook guild nickname. Declaration public const int MinNicknameSize = null Field Value Int32 The minimum length of a nickname allowed by Kook. Properties AcceptLanguage Gets the accept language that Kook.Net uses in its clients. Declaration public string AcceptLanguage { get; set; } Property Value String The accept language used in each Kook.Net request. DefaultRatelimitCallback Gets or sets the default callback for rate limits. Declaration public Func<IRateLimitInfo, Task> DefaultRatelimitCallback { get; set; } Property Value Func < IRateLimitInfo , Task > Remarks This property is mutually exclusive with RatelimitCallback . DefaultRetryMode Gets or sets how a request should act in the case of an error, by default. Declaration public RetryMode DefaultRetryMode { get; set; } Property Value RetryMode The currently set RetryMode . FormatUsersInBidirectionalUnicode Gets or sets if the Rest/Socket user override formats the string in respect to bidirectional unicode. Declaration public bool FormatUsersInBidirectionalUnicode { get; set; } Property Value Boolean Remarks By default, the returned value will be \"?Discord?#1234\", to work with bidirectional usernames. If set to false , this value will be \"Discord#1234\". LogLevel Gets or sets the minimum log level severity that will be sent to the Log event. Declaration public LogSeverity LogLevel { get; set; } Property Value LogSeverity The currently set LogSeverity for logging level. UserAgent Gets the user agent that Kook.Net uses in its clients. Declaration public static string UserAgent { get; } Property Value String The user agent used in each Kook.Net request. Version Gets the Kook.Net version, including the build number. Declaration public static string Version { get; } Property Value String A string containing the detailed version information, including its build number; Unknown when the version fails to be fetched."
  },
  "api/Kook.KookError.html": {
    "href": "api/Kook.KookError.html",
    "title": "Struct KookError | Kook.Net 文档",
    "keywords": "Struct KookError Represents an error with a property. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct KookError Properties Code Gets the code of the error. Declaration public string Code { get; } Property Value String Message Gets the message describing what went wrong. Declaration public string Message { get; } Property Value String"
  },
  "api/Kook.KookErrorCode.html": {
    "href": "api/Kook.KookErrorCode.html",
    "title": "Enum KookErrorCode | Kook.Net 文档",
    "keywords": "Enum KookErrorCode Represents a set of json error codes received by Kook. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum KookErrorCode : int GeneralError The operation failed due to an unspecified error. HasBeenFriend The operation failed because the user has become a friend of the current user. InvalidAuthenticationToken The operation failed due to an invalid authentication token. InvalidSequenceNumber The KOOK gateway requested a reconnect due to an invalid sequence number. MissingArgument The operation failed due to an missing argument. MissingPermissions The operation failed due to missing permissions. MissingResumeArgument The KOOK gateway requested a reconnect due to missing resume arguments. RequestEntityTooLarge The operation failed because the request was too large. RequestFriendTooFast The operation failed because the current user has requested to be friends with the user too fast. SessionExpired The KOOK gateway requested a reconnect because the session has expired. Success The operation was successful. TokenExpired The operation failed because the authentication token has expired. TokenVerificationFailed The operation failed because the authentication token verification failed."
  },
  "api/Kook.KookJsonError.html": {
    "href": "api/Kook.KookJsonError.html",
    "title": "Struct KookJsonError | Kook.Net 文档",
    "keywords": "Struct KookJsonError Represents a generic parsed json error received from Kook after performing a rest request. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct KookJsonError Properties Errors Gets a collection of errors associated with the specific property at the path. Declaration public IReadOnlyCollection<KookError> Errors { get; } Property Value IReadOnlyCollection < KookError > Path Gets the json path of the error. Declaration public string Path { get; } Property Value String"
  },
  "api/Kook.LinkEmbed.html": {
    "href": "api/Kook.LinkEmbed.html",
    "title": "Struct LinkEmbed | Kook.Net 文档",
    "keywords": "Struct LinkEmbed Represents a link embed. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct LinkEmbed : IEmbed Properties Color Gets the color displayed along the left side of the card. Declaration public Color Color { get; } Property Value Color A string representing the color displayed along the left side of the card. Description Gets the description of the website the link directs to. Declaration public string Description { get; } Property Value String A string representing the description of the website the link directs to. Image Gets the URL of the image related to the website the link directs to. Declaration public string Image { get; } Property Value String A string representing the URL of the image related to the website the link directs to. SiteName Gets the name of the website the link directs to. Declaration public string SiteName { get; } Property Value String A string representing the name of the website the link directs to. Title Gets the title of the website the link directs to. Declaration public string Title { get; } Property Value String A string representing the title of the website the link directs to. Type Gets the type of this embed. Declaration public EmbedType Type { get; } Property Value EmbedType A EmbedType that represents the type of this embed. Implements IEmbed.Type Url Gets the URL of this embed. Declaration public string Url { get; } Property Value String A string that represents the URL of this embed. Implements IEmbed.Url"
  },
  "api/Kook.LoginState.html": {
    "href": "api/Kook.LoginState.html",
    "title": "Enum LoginState | Kook.Net 文档",
    "keywords": "Enum LoginState Specifies the state of the client's login status. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum LoginState : byte LoggedIn The client is currently logged in. LoggedOut The client is currently logged out. LoggingIn The client is currently logging in. LoggingOut The client is currently logging out."
  },
  "api/Kook.LogMessage.html": {
    "href": "api/Kook.LogMessage.html",
    "title": "Struct LogMessage | Kook.Net 文档",
    "keywords": "Struct LogMessage Provides a message object used for logging purposes. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct LogMessage Constructors LogMessage(LogSeverity, String, String, Exception) Initializes a new LogMessage struct with the severity, source, message of the event, and optionally, an exception. Declaration public LogMessage(LogSeverity severity, string source, string message, Exception exception = null) Parameters LogSeverity severity The severity of the event. String source The source of the event. String message The message of the event. Exception exception The exception of the event. Properties Exception Gets the exception of this log entry. Declaration public Exception Exception { get; } Property Value Exception A Exception object associated with an incident; otherwise null . Message Gets the message of this log entry. Declaration public string Message { get; } Property Value String A string containing the message of this log entry. Severity Gets the severity of the log entry. Declaration public LogSeverity Severity { get; } Property Value LogSeverity A LogSeverity enum to indicate the severeness of the incident or event. Source Gets the source of the log entry. Declaration public string Source { get; } Property Value String A string representing the source of the log entry. Methods ToString() Returns a string representation of this log message. Declaration public override string ToString() Returns String A string representation of this log message. ToString(StringBuilder, Boolean, Boolean, DateTimeKind, Nullable<Int32>) Returns a string representation of this log message. Declaration public string ToString(StringBuilder builder = null, bool fullException = true, bool prependTimestamp = true, DateTimeKind timestampKind = null, int? padSource) Parameters StringBuilder builder The string builder to use. Boolean fullException Whether to include the full exception in the string. Boolean prependTimestamp Whether to prepend the timestamp to the string. DateTimeKind timestampKind The kind of timestamp to use. Nullable < Int32 > padSource The amount of padding to use for the source. Returns String A string representation of this log message."
  },
  "api/Kook.LogSeverity.html": {
    "href": "api/Kook.LogSeverity.html",
    "title": "Enum LogSeverity | Kook.Net 文档",
    "keywords": "Enum LogSeverity Specifies the severity of the log message. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum LogSeverity : int Critical Logs that contain the most severe level of error. This type of error indicate that immediate attention may be required. Debug Logs that contain the most detailed messages. Error Logs that highlight when the flow of execution is stopped due to a failure. Info Logs that track the general flow of the application. Verbose Logs that are used for interactive investigation during development. Warning Logs that highlight an abnormal activity in the flow of execution."
  },
  "api/Kook.MentionUtils.html": {
    "href": "api/Kook.MentionUtils.html",
    "title": "Class MentionUtils | Kook.Net 文档",
    "keywords": "Class MentionUtils Provides a series of helper methods for parsing mentions. Inheritance Object MentionUtils Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public static class MentionUtils : object Methods KMarkdownMentionChannel(UInt64) Returns a KMarkdown formatted mention string based on the channel ID. Declaration public static string KMarkdownMentionChannel(ulong id) Parameters UInt64 id Returns String A channel mention string formatted to KMarkdown. KMarkdownMentionRole(UInt32) Returns a KMarkdown formatted mention string based on the role ID. Declaration public static string KMarkdownMentionRole(uint id) Parameters UInt32 id Returns String A role mention string formatted to KMarkdown. KMarkdownMentionUser(UInt64) Returns a KMarkdown formatted mention string based on the user ID. Declaration public static string KMarkdownMentionUser(ulong id) Parameters UInt64 id Returns String A user mention string formatted to KMarkdown. ParseChannel(String, TagMode) Parses a provided channel mention string. Declaration public static ulong ParseChannel(string text, TagMode tagMode) Parameters String text TagMode tagMode Returns UInt64 ParseRole(String, TagMode) Parses a provided role mention string. Declaration public static ulong ParseRole(string text, TagMode tagMode) Parameters String text TagMode tagMode Returns UInt64 ParseUser(String, TagMode) Parses a provided user mention string. Declaration public static ulong ParseUser(string text, TagMode tagMode) Parameters String text The user mention. TagMode tagMode Returns UInt64 PlainTextMentionChannel(UInt64) Returns a plain text formatted mention string based on the channel ID. Declaration public static string PlainTextMentionChannel(ulong id) Parameters UInt64 id Returns String A channel mention string formatted to plain text. PlainTextMentionRole(UInt32) Returns a plain text formatted mention string based on the role ID. Declaration public static string PlainTextMentionRole(uint id) Parameters UInt32 id Returns String A role mention string formatted to plain text. PlainTextMentionUser(String, UInt64) Returns a plain text formatted mention string based on the user ID. Declaration public static string PlainTextMentionUser(string username, ulong id) Parameters String username UInt64 id Returns String A user mention string formatted to plain text. TryParseChannel(String, out UInt64, TagMode) Tries to parse a provided channel mention string. Declaration public static bool TryParseChannel(string text, out ulong channelId, TagMode tagMode) Parameters String text UInt64 channelId TagMode tagMode Returns Boolean TryParseRole(String, out UInt32, TagMode) Tries to parse a provided role mention string. Declaration public static bool TryParseRole(string text, out uint roleId, TagMode tagMode) Parameters String text UInt32 roleId TagMode tagMode Returns Boolean TryParseUser(String, out UInt64, TagMode) Tries to parse a provided user mention string. Declaration public static bool TryParseUser(string text, out ulong userId, TagMode tagMode) Parameters String text The user mention. UInt64 userId The UserId of the user. TagMode tagMode Parse as PlainText or KMarkdown. Returns Boolean"
  },
  "api/Kook.MessageExtensions.html": {
    "href": "api/Kook.MessageExtensions.html",
    "title": "Class MessageExtensions | Kook.Net 文档",
    "keywords": "Class MessageExtensions Provides extension methods for IMessage . Inheritance Object MessageExtensions Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public static class MessageExtensions : object Methods AddReactionsAsync(IUserMessage, IEnumerable<IEmote>, RequestOptions) Add multiple reactions to a message. Declaration public static Task AddReactionsAsync(this IUserMessage msg, IEnumerable<IEmote> reactions, RequestOptions options = null) Parameters IUserMessage msg The message to add reactions to. IEnumerable < IEmote > reactions An array of reactions to add to the message. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for adding a reaction to this message. Remarks This method does not bulk add reactions! It will send a request for each reaction included. Examples IEmote A = new Emoji(\"🅰\"); IEmote B = new Emoji(\"🅱\"); await msg.AddReactionsAsync(new[] { A, B }); See Also AddReactionAsync ( IEmote , RequestOptions ) IEmote GetJumpUrl(IMessage) Gets a URL that jumps to the message. Declaration public static string GetJumpUrl(this IMessage msg) Parameters IMessage msg The message to jump to. Returns String A string that contains a URL for jumping to the message in chat. RemoveReactionsAsync(IUserMessage, IUser, IEnumerable<IEmote>, RequestOptions) Remove multiple reactions from a message. Declaration public static Task RemoveReactionsAsync(this IUserMessage msg, IUser user, IEnumerable<IEmote> reactions, RequestOptions options = null) Parameters IUserMessage msg The message to remove reactions from. IUser user The user who removed the reaction. IEnumerable < IEmote > reactions An array of reactions to remove from the message. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for removing a reaction to this message. Remarks This method does not bulk remove reactions! It will send a request for each reaction included. Examples await msg.RemoveReactionsAsync(currentUser, new[] { A, B }); See Also RemoveReactionAsync ( IEmote , IUser , RequestOptions ) IEmote ReplyCardAsync(IUserMessage, ICard, Boolean, Boolean, RequestOptions) Sends a card message to the source channel. Declaration public static Task<Cacheable<IUserMessage, Guid>> ReplyCardAsync(this IUserMessage message, ICard card, bool isQuote = false, bool isEphemeral = false, RequestOptions options = null) Parameters IUserMessage message The message that is being replied on. ICard card The card to be sent. Boolean isQuote true if the source message will be quoted in this message; otherwise, false . Boolean isEphemeral true if the message to be sent can be seen only by the command invoker; otherwise, false . RequestOptions options The request options for this async request. Returns Task < Cacheable < IUserMessage , Guid >> ReplyCardsAsync(IUserMessage, IEnumerable<ICard>, Boolean, Boolean, RequestOptions) Sends a card message to the source channel. Declaration public static Task<Cacheable<IUserMessage, Guid>> ReplyCardsAsync(this IUserMessage message, IEnumerable<ICard> cards, bool isQuote = false, bool isEphemeral = false, RequestOptions options = null) Parameters IUserMessage message The message that is being replied on. IEnumerable < ICard > cards The cards to be sent. Boolean isQuote true if the source message will be quoted in this message; otherwise, false . Boolean isEphemeral true if the message to be sent can be seen only by the command invoker; otherwise, false . RequestOptions options The request options for this async request. Returns Task < Cacheable < IUserMessage , Guid >> ReplyFileAsync(IUserMessage, FileAttachment, Boolean, Boolean, RequestOptions) Sends an inline reply of file that references a message. Declaration public static Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(this IUserMessage message, FileAttachment attachment, bool isQuote = false, bool isEphemeral = false, RequestOptions options = null) Parameters IUserMessage message The message that is being replied on. FileAttachment attachment The attachment containing the file. Boolean isQuote true if the source message will be quoted in this message; otherwise, false . Boolean isEphemeral true if the message to be sent can be seen only by the command invoker; otherwise, false . RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> ReplyFileAsync(IUserMessage, Stream, String, AttachmentType, Boolean, Boolean, RequestOptions) Sends an inline reply of file that references a message. Declaration public static Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(this IUserMessage message, Stream stream, string fileName = null, AttachmentType type = AttachmentType.File, bool isQuote = false, bool isEphemeral = false, RequestOptions options = null) Parameters IUserMessage message The message that is being replied on. Stream stream Stream of the file to be sent. String fileName The name of the file. AttachmentType type The type of the file. Boolean isQuote true if the source message will be quoted in this message; otherwise, false . Boolean isEphemeral true if the message to be sent can be seen only by the command invoker; otherwise, false . RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> ReplyFileAsync(IUserMessage, String, String, AttachmentType, Boolean, Boolean, RequestOptions) Sends an inline reply of file that references a message. Declaration public static Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(this IUserMessage message, string path, string fileName = null, AttachmentType type = AttachmentType.File, bool isQuote = false, bool isEphemeral = false, RequestOptions options = null) Parameters IUserMessage message The message that is being replied on. String path The file path of the file. String fileName The name of the file. AttachmentType type The type of the file. Boolean isQuote true if the source message will be quoted in this message; otherwise, false . Boolean isEphemeral true if the message to be sent can be seen only by the command invoker; otherwise, false . RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> ReplyTextAsync(IUserMessage, String, Boolean, Boolean, RequestOptions) Sends an inline reply of text that references a message. Declaration public static Task<Cacheable<IUserMessage, Guid>> ReplyTextAsync(this IUserMessage message, string content, bool isQuote = false, bool isEphemeral = false, RequestOptions options = null) Parameters IUserMessage message The message that is being replied on. String content Contents of the message. Boolean isQuote true if the source message will be quoted in this message; otherwise, false . Boolean isEphemeral true if the message to be sent can be seen only by the command invoker; otherwise, false . RequestOptions options The request options for this async request. Returns Task < Cacheable < IUserMessage , Guid >>"
  },
  "api/Kook.MessageProperties.html": {
    "href": "api/Kook.MessageProperties.html",
    "title": "Class MessageProperties | Kook.Net 文档",
    "keywords": "Class MessageProperties Properties that are used to modify an IUserMessage with the specified changes. Inheritance Object MessageProperties Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class MessageProperties : object Properties Cards Gets or sets the cards of the message. Declaration public IEnumerable<ICard> Cards { get; set; } Property Value IEnumerable < ICard > Content Gets or sets the content of the message. Declaration public string Content { get; set; } Property Value String Remarks This must be less than the constant defined by MaxMessageSize . EphemeralUser Gets or sets the only user that can see this message. Declaration public IUser EphemeralUser { get; set; } Property Value IUser Quote Gets or sets the quote of the message. Declaration public IQuote Quote { get; set; } Property Value IQuote See Also ModifyAsync(Action<MessageProperties>, RequestOptions)"
  },
  "api/Kook.MessageSource.html": {
    "href": "api/Kook.MessageSource.html",
    "title": "Enum MessageSource | Kook.Net 文档",
    "keywords": "Enum MessageSource Specifies the source of the Kook message. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum MessageSource : int Bot The message is sent by a bot. System The message is sent by the system. User The message is sent by a user."
  },
  "api/Kook.MessageType.html": {
    "href": "api/Kook.MessageType.html",
    "title": "Enum MessageType | Kook.Net 文档",
    "keywords": "Enum MessageType Represents the type of a message. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum MessageType : int Audio Represents that the type of the message contains a voice message. Card Represents that the type of the message contains cards. File Represents that the type of the message contains a file. Image Represents that the type of the message contains an image. KMarkdown Represents that the type of the message contains a KMarkdown message. Poke Represents that the type of the message contains a poke action. System Represents that the type of the message originates from KOOK system. Text Represents that the type of the message contains plain text. Video Represents that the type of the message contains a video."
  },
  "api/Kook.ModifyGuildChannelProperties.html": {
    "href": "api/Kook.ModifyGuildChannelProperties.html",
    "title": "Class ModifyGuildChannelProperties | Kook.Net 文档",
    "keywords": "Class ModifyGuildChannelProperties Properties that are used to modify an IGuildChannel with the specified properties. Inheritance Object ModifyGuildChannelProperties ModifyTextChannelProperties ModifyVoiceChannelProperties Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class ModifyGuildChannelProperties : object Properties CategoryId Gets or sets the category ID for this channel. Declaration public ulong? CategoryId { get; set; } Property Value Nullable < UInt64 > Remarks Setting this value to a category's identifier will change this channel's parent to the specified channel; setting this value to 0 will detach this channel from its parent if one is set; if this is null , the parent of this channel will not be modified. Name Gets or sets the channel to this name to be modified. Declaration public string Name { get; set; } Property Value String Remarks This property defines the new name for this channel; if this is null , the name will not be modified. Position Moves the channel to the following position. This property is one-based. Declaration public int? Position { get; set; } Property Value Nullable < Int32 > Remarks If this is null , the position will not be modified."
  },
  "api/Kook.ModifyTextChannelProperties.html": {
    "href": "api/Kook.ModifyTextChannelProperties.html",
    "title": "Class ModifyTextChannelProperties | Kook.Net 文档",
    "keywords": "Class ModifyTextChannelProperties Provides properties that are used to modify an ITextChannel with the specified properties. Inheritance Object ModifyGuildChannelProperties ModifyTextChannelProperties Inherited Members ModifyGuildChannelProperties.Name ModifyGuildChannelProperties.Position ModifyGuildChannelProperties.CategoryId Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class ModifyTextChannelProperties : ModifyGuildChannelProperties Properties SlowModeInterval Gets or sets the slow-mode ratelimit in seconds for this channel. Declaration public SlowModeInterval? SlowModeInterval { get; set; } Property Value Nullable < SlowModeInterval > Remarks Setting this value will require each user to wait before sending another message; setting this value to None will disable slow-mode for this channel; if this value is set to null , the slow-mode interval will not be modified. note Users with ManageMessages or ManageChannels will be exempt from slow-mode. Topic Gets or sets the topic of the channel. Declaration public string Topic { get; set; } Property Value String Remarks Setting this value to any string other than null or will set the channel topic or description to the desired value."
  },
  "api/Kook.ModifyVoiceChannelProperties.html": {
    "href": "api/Kook.ModifyVoiceChannelProperties.html",
    "title": "Class ModifyVoiceChannelProperties | Kook.Net 文档",
    "keywords": "Class ModifyVoiceChannelProperties Provides properties that are used to modify an IVoiceChannel with the specified properties. Inheritance Object ModifyGuildChannelProperties ModifyVoiceChannelProperties Inherited Members ModifyGuildChannelProperties.Name ModifyGuildChannelProperties.Position ModifyGuildChannelProperties.CategoryId Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class ModifyVoiceChannelProperties : ModifyGuildChannelProperties Properties OverwriteVoiceRegion Gets or sets a value that indicates whether the voice region of the channel is overwritten; null if not set. Declaration public bool? OverwriteVoiceRegion { get; set; } Property Value Nullable < Boolean > Password Gets or sets the password of the channel, or empty string to clear the password; null if not set. Declaration public string Password { get; set; } Property Value String UserLimit Gets or sets the maximum number of users that can be present in a channel, or 0 if none; null if not set. Declaration public int? UserLimit { get; set; } Property Value Nullable < Int32 > VoiceQuality Gets or sets the voice quality that the clients in this voice channel are requested to use; null if not set. Declaration public VoiceQuality? VoiceQuality { get; set; } Property Value Nullable < VoiceQuality > Remarks warning This property cannot be set to the quality equivalent or higher than _128kbps via Kook REST API because of the server-side limitation despite of the fact that the voice channel exists in a boosted guild. VoiceRegion Gets or sets the voice region of the channel; null if not set. Declaration public string VoiceRegion { get; set; } Property Value String"
  },
  "api/Kook.ModuleType.html": {
    "href": "api/Kook.ModuleType.html",
    "title": "Enum ModuleType | Kook.Net 文档",
    "keywords": "Enum ModuleType Specifies the type of an IModule . Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum ModuleType : int ActionGroup An ActionGroupModule . Audio An AudioModule . Container A ContainerModule . Context A ContextModule . Countdown A CountdownModule . Divider A DividerModule . File A FileModule . Header A HeaderModule . ImageGroup An ImageGroupModule . Invite An InviteModule . Section A SectionModule . Video A VideoModule ."
  },
  "api/Kook.Music.html": {
    "href": "api/Kook.Music.html",
    "title": "Class Music | Kook.Net 文档",
    "keywords": "Class Music Represents a music activity. Inheritance Object Music Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class Music : object Properties Name Gets or sets the music ID. Declaration public string Name { get; set; } Property Value String Provider Gets or sets the music provider. Declaration public MusicProvider Provider { get; set; } Property Value MusicProvider Singer Gets or sets the singer. Declaration public string Singer { get; set; } Property Value String"
  },
  "api/Kook.MusicProvider.html": {
    "href": "api/Kook.MusicProvider.html",
    "title": "Enum MusicProvider | Kook.Net 文档",
    "keywords": "Enum MusicProvider Specifies the provider of music. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum MusicProvider : int KuGouMusic Specifies that the music provider is KuGou. NetEaseCloudMusic Specifies that the music provider is NetEase. TencentMusic Specifies that the music provider is Tencent QQ. Unspecified Specifies that the music provider is unspecified."
  },
  "api/Kook.Nameplate.html": {
    "href": "api/Kook.Nameplate.html",
    "title": "Class Nameplate | Kook.Net 文档",
    "keywords": "Class Nameplate Representing a nameplate an IUser can have. Inheritance Object Nameplate Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class Nameplate : IEquatable<Nameplate> Properties Icon Gets the resource uri of the icon of the nameplate given to user. Declaration public string Icon { get; } Property Value String Name Gets the name of the nameplate given to user. Declaration public string Name { get; } Property Value String Tips Gets the tips of the nameplate given to user. Declaration public string Tips { get; } Property Value String Type Gets the type of the nameplate given to user. Declaration public int Type { get; } Property Value Int32 Methods Create(String, Int32, String, String) Initializes a new instance of the Nameplate class. Declaration public static Nameplate Create(string name, int type, string icon, string tips) Parameters String name The name of the nameplate given to user. Int32 type The type of the nameplate given to user. String icon The resource uri of the icon of the nameplate given to user. String tips The tips of the nameplate given to user. Returns Nameplate A Nameplate representing the given parameters. Equals(Nameplate) Declaration public bool Equals(Nameplate other) Parameters Nameplate other Returns Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean GetHashCode() Declaration public override int GetHashCode() Returns Int32"
  },
  "api/Kook.Net.BucketId.html": {
    "href": "api/Kook.Net.BucketId.html",
    "title": "Class BucketId | Kook.Net 文档",
    "keywords": "Class BucketId Represents a ratelimit bucket. Inheritance Object BucketId Namespace : Kook.Net Assembly : Kook.Net.Core.dll Syntax public class BucketId : IEquatable<BucketId> Properties BucketHash Gets the hash of this bucket. Declaration public string BucketHash { get; } Property Value String Remarks The hash is provided by Kook to group ratelimits. Endpoint Gets the endpoint that is going to be requested if available. Declaration public string Endpoint { get; } Property Value String HttpMethod Gets the http method used to make the request if available. Declaration public HttpMethod HttpMethod { get; } Property Value HttpMethod IsHashBucket Gets if this bucket is a hash type. Declaration public bool IsHashBucket { get; } Property Value Boolean MajorParameters Gets the major parameters of the route. Declaration public IOrderedEnumerable<KeyValuePair<string, string>> MajorParameters { get; } Property Value IOrderedEnumerable < KeyValuePair < String , String >> Methods Create(HttpMethod, String, Dictionary<String, String>) Creates a new BucketId based on the HttpMethod and Endpoint . Declaration public static BucketId Create(HttpMethod httpMethod, string endpoint, Dictionary<string, string> majorParams) Parameters HttpMethod httpMethod Http method used to make the request. String endpoint Endpoint that is going to receive requests. Dictionary < String , String > majorParams Major parameters of the route of this endpoint. Returns BucketId A BucketId based on the HttpMethod and the Endpoint with the provided data. Create(String, BucketId) Creates a new BucketId based on a BucketHash and a previous BucketId . Declaration public static BucketId Create(string hash, BucketId oldBucket) Parameters String hash Bucket hash provided by Kook. BucketId oldBucket BucketId that is going to be upgraded to a hash type. Returns BucketId A BucketId based on the BucketHash and MajorParameters . Equals(BucketId) Declaration public bool Equals(BucketId other) Parameters BucketId other Returns Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean GetBucketHash() Gets the string that will define this bucket as a hash based one. Declaration public string GetBucketHash() Returns String A string that defines this bucket as a hash based one. GetHashCode() Declaration public override int GetHashCode() Returns Int32 GetUniqueEndpoint() Gets the string that will define this bucket as an endpoint based one. Declaration public string GetUniqueEndpoint() Returns String A string that defines this bucket as an endpoint based one. ToString() Declaration public override string ToString() Returns String"
  },
  "api/Kook.Net.html": {
    "href": "api/Kook.Net.html",
    "title": "Namespace Kook.Net | Kook.Net 文档",
    "keywords": "Namespace Kook.Net Classes BucketId Represents a ratelimit bucket. HttpException The exception that is thrown if an error occurs while processing an Kook HTTP request. RateLimitedException The exception that is thrown when the user is being rate limited by Kook. WebSocketClosedException The exception that is thrown when the WebSocket session is closed by Kook. Structs RateLimitInfo Represents a REST-Based ratelimit info. Interfaces IRequest Represents a generic request to be sent to Kook."
  },
  "api/Kook.Net.HttpException.html": {
    "href": "api/Kook.Net.HttpException.html",
    "title": "Class HttpException | Kook.Net 文档",
    "keywords": "Class HttpException The exception that is thrown if an error occurs while processing an Kook HTTP request. Inheritance Object HttpException Namespace : Kook.Net Assembly : Kook.Net.Core.dll Syntax public class HttpException : Exception Constructors HttpException(HttpStatusCode, IRequest, Nullable<KookErrorCode>, String, KookJsonError[]) Initializes a new instance of the HttpException class. Declaration public HttpException(HttpStatusCode httpCode, IRequest request, KookErrorCode? kookCode = null, string reason = null, KookJsonError[] errors = null) Parameters HttpStatusCode httpCode The HTTP status code returned. IRequest request The request that was sent prior to the exception. Nullable < KookErrorCode > kookCode The Kook status code returned. String reason The reason behind the exception. KookJsonError [] errors A collection of json errors describing what went wrong with the request. Properties Errors Gets a collection of json errors describing what went wrong with the request. Declaration public IReadOnlyCollection<KookJsonError> Errors { get; } Property Value IReadOnlyCollection < KookJsonError > HttpCode Gets the HTTP status code returned by Kook. Declaration public HttpStatusCode HttpCode { get; } Property Value HttpStatusCode An HTTP status code from Kook. KookCode Gets the JSON error code returned by Kook. Declaration public KookErrorCode? KookCode { get; } Property Value Nullable < KookErrorCode > A JSON error code from Kook, or null if none. Reason Gets the reason of the exception. Declaration public string Reason { get; } Property Value String Request Gets the request object used to send the request. Declaration public IRequest Request { get; } Property Value IRequest"
  },
  "api/Kook.Net.IRequest.html": {
    "href": "api/Kook.Net.IRequest.html",
    "title": "Interface IRequest | Kook.Net 文档",
    "keywords": "Interface IRequest Represents a generic request to be sent to Kook. Namespace : Kook.Net Assembly : Kook.Net.Core.dll Syntax public interface IRequest Properties Options Gets the options to be used when sending the request. Declaration RequestOptions Options { get; } Property Value RequestOptions TimeoutAt Gets how long the request should wait before timing out. Declaration DateTimeOffset? TimeoutAt { get; } Property Value Nullable < DateTimeOffset >"
  },
  "api/Kook.Net.RateLimitedException.html": {
    "href": "api/Kook.Net.RateLimitedException.html",
    "title": "Class RateLimitedException | Kook.Net 文档",
    "keywords": "Class RateLimitedException The exception that is thrown when the user is being rate limited by Kook. Inheritance Object RateLimitedException Namespace : Kook.Net Assembly : Kook.Net.Core.dll Syntax public class RateLimitedException : TimeoutException Constructors RateLimitedException(IRequest) Initializes a new instance of the RateLimitedException class using the request sent. Declaration public RateLimitedException(IRequest request) Parameters IRequest request Properties Request Gets the request object used to send the request. Declaration public IRequest Request { get; } Property Value IRequest"
  },
  "api/Kook.Net.RateLimitInfo.html": {
    "href": "api/Kook.Net.RateLimitInfo.html",
    "title": "Struct RateLimitInfo | Kook.Net 文档",
    "keywords": "Struct RateLimitInfo Represents a REST-Based ratelimit info. Namespace : Kook.Net Assembly : Kook.Net.Rest.dll Syntax public struct RateLimitInfo : IRateLimitInfo Properties Bucket Declaration public string Bucket { get; } Property Value String Endpoint Declaration public string Endpoint { get; } Property Value String IsGlobal Declaration public bool IsGlobal { get; } Property Value Boolean Lag Declaration public TimeSpan? Lag { get; } Property Value Nullable < TimeSpan > Limit Declaration public int? Limit { get; } Property Value Nullable < Int32 > Remaining Declaration public int? Remaining { get; } Property Value Nullable < Int32 > ResetAfter Declaration public TimeSpan? ResetAfter { get; } Property Value Nullable < TimeSpan >"
  },
  "api/Kook.Net.Rest.DefaultRestClientProvider.html": {
    "href": "api/Kook.Net.Rest.DefaultRestClientProvider.html",
    "title": "Class DefaultRestClientProvider | Kook.Net 文档",
    "keywords": "Class DefaultRestClientProvider Represents a default RestClientProvider that creates Kook.Net.Rest.DefaultRestClient instances. Inheritance Object DefaultRestClientProvider Namespace : Kook.Net.Rest Assembly : Kook.Net.Rest.dll Syntax public static class DefaultRestClientProvider : object Fields Instance Gets a RestClientProvider delegate that creates IRestClient instances. Declaration public static readonly RestClientProvider Instance Field Value RestClientProvider Methods Create(Boolean) Creates a delegate that creates a new Kook.Net.Rest.DefaultRestClient instance. Declaration public static RestClientProvider Create(bool useProxy = false) Parameters Boolean useProxy Whether to use the system proxy. Returns RestClientProvider A delegate that creates a new Kook.Net.Rest.DefaultRestClient instance."
  },
  "api/Kook.Net.Rest.html": {
    "href": "api/Kook.Net.Rest.html",
    "title": "Namespace Kook.Net.Rest | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Rest Classes DefaultRestClientProvider Represents a default RestClientProvider that creates Kook.Net.Rest.DefaultRestClient instances. Structs RestResponse Represents a REST response. Interfaces IRestClient Represents a generic REST-based client. Delegates RestClientProvider Represents a delegate that provides a IRestClient instance."
  },
  "api/Kook.Net.Rest.IRestClient.html": {
    "href": "api/Kook.Net.Rest.IRestClient.html",
    "title": "Interface IRestClient | Kook.Net 文档",
    "keywords": "Interface IRestClient Represents a generic REST-based client. Namespace : Kook.Net.Rest Assembly : Kook.Net.Core.dll Syntax public interface IRestClient : IDisposable Methods SendAsync(HttpMethod, String, CancellationToken, String, IEnumerable<KeyValuePair<String, IEnumerable<String>>>) Sends a REST request. Declaration Task<RestResponse> SendAsync(HttpMethod method, string endpoint, CancellationToken cancelToken, string reason = null, IEnumerable<KeyValuePair<string, IEnumerable<string>>> requestHeaders = null) Parameters HttpMethod method The method used to send this request (see ). String endpoint The endpoint to send this request to. CancellationToken cancelToken The cancellation token used to cancel the task. String reason The audit log reason. IEnumerable < KeyValuePair < String , IEnumerable < String >>> requestHeaders Additional headers to be sent with the request. Returns Task < RestResponse > A task that represents an asynchronous send operation. The task result contains the REST response of the request. SendAsync(HttpMethod, String, IReadOnlyDictionary<String, Object>, CancellationToken, String, IEnumerable<KeyValuePair<String, IEnumerable<String>>>) Sends a REST request with multipart parameters. Declaration Task<RestResponse> SendAsync(HttpMethod method, string endpoint, IReadOnlyDictionary<string, object> multipartParams, CancellationToken cancelToken, string reason = null, IEnumerable<KeyValuePair<string, IEnumerable<string>>> requestHeaders = null) Parameters HttpMethod method The method used to send this request (see ). String endpoint The endpoint to send this request to. IReadOnlyDictionary < String , Object > multipartParams The multipart parameters. CancellationToken cancelToken The cancellation token used to cancel the task. String reason The audit log reason. IEnumerable < KeyValuePair < String , IEnumerable < String >>> requestHeaders Additional headers to be sent with the request. Returns Task < RestResponse > A task that represents an asynchronous send operation. The task result contains the REST response of the request. SendAsync(HttpMethod, String, String, CancellationToken, String, IEnumerable<KeyValuePair<String, IEnumerable<String>>>) Sends a REST request with a JSON body. Declaration Task<RestResponse> SendAsync(HttpMethod method, string endpoint, string json, CancellationToken cancelToken, string reason = null, IEnumerable<KeyValuePair<string, IEnumerable<string>>> requestHeaders = null) Parameters HttpMethod method The method used to send this request (see ). String endpoint The endpoint to send this request to. String json The JSON body of the request. CancellationToken cancelToken The cancellation token used to cancel the task. String reason The audit log reason. IEnumerable < KeyValuePair < String , IEnumerable < String >>> requestHeaders Additional headers to be sent with the request. Returns Task < RestResponse > A task that represents an asynchronous send operation. The task result contains the REST response of the request. SetCancelToken(CancellationToken) Sets the cancellation token for this client. Declaration void SetCancelToken(CancellationToken cancelToken) Parameters CancellationToken cancelToken The cancellation token. SetHeader(String, String) Sets the HTTP header of this client for all requests. Declaration void SetHeader(string key, string value) Parameters String key The field name of the header. String value The value of the header."
  },
  "api/Kook.Net.Rest.RestClientProvider.html": {
    "href": "api/Kook.Net.Rest.RestClientProvider.html",
    "title": "Delegate RestClientProvider | Kook.Net 文档",
    "keywords": "Delegate RestClientProvider Represents a delegate that provides a IRestClient instance. Namespace : Kook.Net.Rest Assembly : Kook.Net.Core.dll Syntax public delegate IRestClient RestClientProvider(string baseUrl); Parameters String baseUrl Returns IRestClient"
  },
  "api/Kook.Net.Rest.RestResponse.html": {
    "href": "api/Kook.Net.Rest.RestResponse.html",
    "title": "Struct RestResponse | Kook.Net 文档",
    "keywords": "Struct RestResponse Represents a REST response. Namespace : Kook.Net.Rest Assembly : Kook.Net.Core.dll Syntax public struct RestResponse Properties Headers Gets the headers of the response. Declaration public Dictionary<string, string> Headers { get; } Property Value Dictionary < String , String > MediaTypeHeader Gets the media type header of the response. Declaration public MediaTypeHeaderValue MediaTypeHeader { get; } Property Value MediaTypeHeaderValue StatusCode Gets the status code of the response. Declaration public HttpStatusCode StatusCode { get; } Property Value HttpStatusCode Stream Gets the stream of the response. Declaration public Stream Stream { get; } Property Value Stream"
  },
  "api/Kook.Net.Udp.DefaultUdpSocketProvider.html": {
    "href": "api/Kook.Net.Udp.DefaultUdpSocketProvider.html",
    "title": "Class DefaultUdpSocketProvider | Kook.Net 文档",
    "keywords": "Class DefaultUdpSocketProvider Represents a delegate that provides a IUdpSocket instance. Inheritance Object DefaultUdpSocketProvider Namespace : Kook.Net.Udp Assembly : Kook.Net.WebSocket.dll Syntax public static class DefaultUdpSocketProvider : object Fields Instance A delegate that creates a default UdpSocketProvider instance. Declaration public static readonly UdpSocketProvider Instance Field Value UdpSocketProvider"
  },
  "api/Kook.Net.Udp.html": {
    "href": "api/Kook.Net.Udp.html",
    "title": "Namespace Kook.Net.Udp | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Udp Classes DefaultUdpSocketProvider Represents a delegate that provides a IUdpSocket instance. Interfaces IUdpSocket Represents a generic UDP socket. Delegates UdpSocketProvider Represents a delegate that provides a new IUdpSocket instance."
  },
  "api/Kook.Net.Udp.IUdpSocket.html": {
    "href": "api/Kook.Net.Udp.IUdpSocket.html",
    "title": "Interface IUdpSocket | Kook.Net 文档",
    "keywords": "Interface IUdpSocket Represents a generic UDP socket. Namespace : Kook.Net.Udp Assembly : Kook.Net.Core.dll Syntax public interface IUdpSocket : IDisposable Properties Port Gets the port of the socket. Declaration ushort Port { get; } Property Value UInt16 Methods SendAsync(Byte[], Int32, Int32) Sends a datagram. Declaration Task SendAsync(byte[] data, int index, int count) Parameters Byte [] data The data to send. Int32 index The index of the data to start sending from. Int32 count The number of bytes to send. Returns Task A task that represents the asynchronous operation. SetCancelToken(CancellationToken) Sets the cancellation token. Declaration void SetCancelToken(CancellationToken cancelToken) Parameters CancellationToken cancelToken The cancellation token. SetDestination(String, Int32) Sets the destination of the socket. Declaration void SetDestination(string ip, int port) Parameters String ip The IP address of the destination. Int32 port The port of the destination. StartAsync() Starts the socket. Declaration Task StartAsync() Returns Task A task that represents the asynchronous operation. StopAsync() Stops the socket. Declaration Task StopAsync() Returns Task A task that represents the asynchronous operation. Events ReceivedDatagram Fired when a datagram is received. Declaration event Func<byte[], int, int, Task> ReceivedDatagram Event Type Func < Byte [], Int32 , Int32 , Task >"
  },
  "api/Kook.Net.Udp.UdpSocketProvider.html": {
    "href": "api/Kook.Net.Udp.UdpSocketProvider.html",
    "title": "Delegate UdpSocketProvider | Kook.Net 文档",
    "keywords": "Delegate UdpSocketProvider Represents a delegate that provides a new IUdpSocket instance. Namespace : Kook.Net.Udp Assembly : Kook.Net.Core.dll Syntax public delegate IUdpSocket UdpSocketProvider(); Returns IUdpSocket"
  },
  "api/Kook.Net.WebSocketClosedException.html": {
    "href": "api/Kook.Net.WebSocketClosedException.html",
    "title": "Class WebSocketClosedException | Kook.Net 文档",
    "keywords": "Class WebSocketClosedException The exception that is thrown when the WebSocket session is closed by Kook. Inheritance Object WebSocketClosedException Namespace : Kook.Net Assembly : Kook.Net.Core.dll Syntax public class WebSocketClosedException : Exception Constructors WebSocketClosedException(Int32, String) Initializes a new instance of the WebSocketClosedException using a Kook close code and an optional reason. Declaration public WebSocketClosedException(int closeCode, string reason = null) Parameters Int32 closeCode String reason Properties CloseCode Gets the close code sent by Kook. Declaration public int CloseCode { get; } Property Value Int32 A close code from Kook. Reason Gets the reason of the interruption. Declaration public string Reason { get; } Property Value String"
  },
  "api/Kook.Net.WebSockets.DefaultWebSocketProvider.html": {
    "href": "api/Kook.Net.WebSockets.DefaultWebSocketProvider.html",
    "title": "Class DefaultWebSocketProvider | Kook.Net 文档",
    "keywords": "Class DefaultWebSocketProvider Represents a default WebSocketProvider that creates Kook.Net.WebSockets.DefaultWebSocketClient instances. Inheritance Object DefaultWebSocketProvider Namespace : Kook.Net.WebSockets Assembly : Kook.Net.WebSocket.dll Syntax public static class DefaultWebSocketProvider : object Fields Instance A delegate that creates a default WebSocketProvider instance. Declaration public static readonly WebSocketProvider Instance Field Value WebSocketProvider Methods Create(IWebProxy) Creates a delegate that creates a new Kook.Net.WebSockets.DefaultWebSocketClient instance. Declaration public static WebSocketProvider Create(IWebProxy proxy = null) Parameters IWebProxy proxy The proxy to use. Returns WebSocketProvider A delegate that creates a new Kook.Net.WebSockets.DefaultWebSocketClient instance."
  },
  "api/Kook.Net.WebSockets.html": {
    "href": "api/Kook.Net.WebSockets.html",
    "title": "Namespace Kook.Net.WebSockets | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.WebSockets Classes DefaultWebSocketProvider Represents a default WebSocketProvider that creates Kook.Net.WebSockets.DefaultWebSocketClient instances. Interfaces IWebSocketClient Represents a generic WebSocket client. Delegates WebSocketProvider Represents a delegate that provides a new IWebSocketClient instance."
  },
  "api/Kook.Net.WebSockets.IWebSocketClient.html": {
    "href": "api/Kook.Net.WebSockets.IWebSocketClient.html",
    "title": "Interface IWebSocketClient | Kook.Net 文档",
    "keywords": "Interface IWebSocketClient Represents a generic WebSocket client. Namespace : Kook.Net.WebSockets Assembly : Kook.Net.Core.dll Syntax public interface IWebSocketClient : IDisposable Methods ConnectAsync(String) Connects to the specified host. Declaration Task ConnectAsync(string host) Parameters String host The host to connect to. Returns Task A task that represents an asynchronous connect operation. DisconnectAsync(Int32) Disconnects from the host. Declaration Task DisconnectAsync(int closeCode = 1000) Parameters Int32 closeCode The close code to be sent to the host. Returns Task A task that represents an asynchronous disconnect operation. SendAsync(Byte[], Int32, Int32, Boolean) Sends a message to the host. Declaration Task SendAsync(byte[] data, int index, int count, bool isText) Parameters Byte [] data The data to be sent. Int32 index The index of the data to start sending from. Int32 count The amount of data to send. Boolean isText Whether the data is text or binary. Returns Task A task that represents an asynchronous send operation. SetCancelToken(CancellationToken) Sets the cancellation token for this client. Declaration void SetCancelToken(CancellationToken cancelToken) Parameters CancellationToken cancelToken The cancellation token to be used. SetHeader(String, String) Sets a header to be sent with the future requests. Declaration void SetHeader(string key, string value) Parameters String key The field name of the header. String value The value of the header. Events BinaryMessage Fired when a binary message is received. Declaration event Func<byte[], int, int, Task> BinaryMessage Event Type Func < Byte [], Int32 , Int32 , Task > Closed Fired when the WebSocket connection is closed. Declaration event Func<Exception, Task> Closed Event Type Func < Exception , Task > TextMessage Fired when a text message is received. Declaration event Func<string, Task> TextMessage Event Type Func < String , Task >"
  },
  "api/Kook.Net.WebSockets.WebSocketProvider.html": {
    "href": "api/Kook.Net.WebSockets.WebSocketProvider.html",
    "title": "Delegate WebSocketProvider | Kook.Net 文档",
    "keywords": "Delegate WebSocketProvider Represents a delegate that provides a new IWebSocketClient instance. Namespace : Kook.Net.WebSockets Assembly : Kook.Net.Core.dll Syntax public delegate IWebSocketClient WebSocketProvider(); Returns IWebSocketClient"
  },
  "api/Kook.NotifyType.html": {
    "href": "api/Kook.NotifyType.html",
    "title": "Enum NotifyType | Kook.Net 文档",
    "keywords": "Enum NotifyType Specifies that how the guild should notify the user. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum NotifyType : int AcceptAll Notifies the user of all messages. Default Notifies the user as the default behavior of the guild. Muted ]Never notifies the user. OnlyMentioned Notifies the user of the messages which mention the user."
  },
  "api/Kook.NotImplementedEmbed.html": {
    "href": "api/Kook.NotImplementedEmbed.html",
    "title": "Struct NotImplementedEmbed | Kook.Net 文档",
    "keywords": "Struct NotImplementedEmbed Represents a unimplemented embed. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct NotImplementedEmbed : IEmbed Properties JsonNode Gets the raw JSON of the embed. Declaration public JsonNode JsonNode { get; } Property Value JsonNode A JsonNode representing the raw JSON of the embed. RawType Gets the type of the embed. Declaration public string RawType { get; } Property Value String A string representing the type of the embed. Remarks This value originally came from the type field of the JsonNode . Type Gets the type of this embed. Declaration public EmbedType Type { get; } Property Value EmbedType A EmbedType that represents the type of this embed. Implements IEmbed.Type Url Gets the URL of this embed. Declaration public string Url { get; } Property Value String A string that represents the URL of this embed. Implements IEmbed.Url Methods Resolve<T>(Func<NotImplementedEmbed, T>) Resolves the embed to a concrete type via delegate. Declaration public T Resolve<T>(Func<NotImplementedEmbed, T> resolvingFunc) where T : IEmbed Parameters Func < NotImplementedEmbed , T> resolvingFunc The resolving function to use when resolves the embed. Returns T A T representing the resolved embed. Type Parameters T The concrete type to deserialize the embed to. Resolve<T>(JsonSerializerOptions) Resolves the embed to a concrete type via JSON deserialization. Declaration public T Resolve<T>(JsonSerializerOptions options = null) where T : IEmbed Parameters JsonSerializerOptions options The options to use when deserializing the embed. Returns T A T representing the resolved embed. Type Parameters T The concrete type to deserialize the embed to."
  },
  "api/Kook.NotImplementedPokeResource.html": {
    "href": "api/Kook.NotImplementedPokeResource.html",
    "title": "Struct NotImplementedPokeResource | Kook.Net 文档",
    "keywords": "Struct NotImplementedPokeResource Represents a poke resource that is not implemented to be resolved yet. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct NotImplementedPokeResource : IPokeResource Properties JsonNode Gets the raw JSON of the embed. Declaration public JsonNode JsonNode { get; } Property Value JsonNode A JsonNode representing the raw JSON of the embed. RawType Gets the type of the poke resource. Declaration public string RawType { get; } Property Value String A string representing the type of the poke resource. Remarks This value originally came from the type field of the JsonNode . Type Gets the type of the poke resource. Declaration public PokeResourceType Type { get; } Property Value PokeResourceType Implements IPokeResource.Type Methods Resolve<T>(Func<NotImplementedPokeResource, T>) Resolves the embed to a concrete type via delegate. Declaration public T Resolve<T>(Func<NotImplementedPokeResource, T> resolvingFunc) where T : IPokeResource Parameters Func < NotImplementedPokeResource , T> resolvingFunc The resolving function to use when resolves the embed. Returns T A T representing the resolved embed. Type Parameters T The concrete type to deserialize the embed to. Resolve<T>(JsonSerializerOptions) Resolves the embed to a concrete type via JSON deserialization. Declaration public T Resolve<T>(JsonSerializerOptions options = null) where T : IPokeResource Parameters JsonSerializerOptions options The options to use when deserializing the embed. Returns T A T representing the resolved embed. Type Parameters T The concrete type to deserialize the embed to."
  },
  "api/Kook.OverwritePermissions.html": {
    "href": "api/Kook.OverwritePermissions.html",
    "title": "Struct OverwritePermissions | Kook.Net 文档",
    "keywords": "Struct OverwritePermissions Represents a container for a series of overwrite permissions. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct OverwritePermissions Constructors OverwritePermissions(PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue) Initializes a new ChannelPermissions struct with the provided permissions. Declaration public OverwritePermissions(PermValue createInvites = PermValue.Inherit, PermValue manageChannels = PermValue.Inherit, PermValue manageRoles = PermValue.Inherit, PermValue viewChannel = PermValue.Inherit, PermValue sendMessages = PermValue.Inherit, PermValue manageMessages = PermValue.Inherit, PermValue attachFiles = PermValue.Inherit, PermValue connect = PermValue.Inherit, PermValue manageVoice = PermValue.Inherit, PermValue mentionEveryone = PermValue.Inherit, PermValue addReactions = PermValue.Inherit, PermValue passiveConnect = PermValue.Inherit, PermValue useVoiceActivity = PermValue.Inherit, PermValue speak = PermValue.Inherit, PermValue deafenMembers = PermValue.Inherit, PermValue muteMembers = PermValue.Inherit, PermValue playSoundtrack = PermValue.Inherit, PermValue shareScreen = PermValue.Inherit) Parameters PermValue createInvites PermValue manageChannels PermValue manageRoles PermValue viewChannel PermValue sendMessages PermValue manageMessages PermValue attachFiles PermValue connect PermValue manageVoice PermValue mentionEveryone PermValue addReactions PermValue passiveConnect PermValue useVoiceActivity PermValue speak PermValue deafenMembers PermValue muteMembers PermValue playSoundtrack PermValue shareScreen OverwritePermissions(String, String) Creates a new OverwritePermissions with the provided allow and deny packed values after converting to ulong. Declaration public OverwritePermissions(string allowValue, string denyValue) Parameters String allowValue String denyValue OverwritePermissions(UInt64, UInt64) Creates a new OverwritePermissions with the provided allow and deny packed values. Declaration public OverwritePermissions(ulong allowValue, ulong denyValue) Parameters UInt64 allowValue UInt64 denyValue Properties AddReactions If Allowed, a user may add reactions. Declaration public PermValue AddReactions { get; } Property Value PermValue AllowValue Gets a packed value representing all the allowed permissions in this OverwritePermissions . Declaration public ulong AllowValue { get; } Property Value UInt64 AttachFiles If Allowed, a user may send files. Declaration public PermValue AttachFiles { get; } Property Value PermValue Connect If Allowed, a user may connect to a voice channel. Declaration public PermValue Connect { get; } Property Value PermValue CreateInvites If Allowed, a user may create invites. Declaration public PermValue CreateInvites { get; } Property Value PermValue DeafenMembers If Allowed, a user may deafen users. Declaration public PermValue DeafenMembers { get; } Property Value PermValue DenyValue Gets a packed value representing all the denied permissions in this OverwritePermissions . Declaration public ulong DenyValue { get; } Property Value UInt64 InheritAll Gets a blank OverwritePermissions that inherits all permissions. Declaration public static OverwritePermissions InheritAll { get; } Property Value OverwritePermissions ManageChannels If Allowed, a user may create, delete and modify channels. Declaration public PermValue ManageChannels { get; } Property Value PermValue ManageMessages If Allowed, a user may delete messages. Declaration public PermValue ManageMessages { get; } Property Value PermValue ManageRoles If Allowed, a user may adjust roles. Declaration public PermValue ManageRoles { get; } Property Value PermValue ManageVoice If Allowed, a user may kick other users from voice channels, and move other users between voice channels. Declaration public PermValue ManageVoice { get; } Property Value PermValue MentionEveryone If Allowed, a user may mention all users. Declaration public PermValue MentionEveryone { get; } Property Value PermValue MuteMembers If Allowed, a user may mute users. Declaration public PermValue MuteMembers { get; } Property Value PermValue PassiveConnect If Allowed, a user may connect to a voice channel only when the user is invited or moved by other users. Declaration public PermValue PassiveConnect { get; } Property Value PermValue PlaySoundtrack If Allowed, a user may play soundtracks in a voice channel. Declaration public PermValue PlaySoundtrack { get; } Property Value PermValue SendMessages If Allowed, a user may send messages. Declaration public PermValue SendMessages { get; } Property Value PermValue ShareScreen If Allowed, a user may share screen in a voice channel. Declaration public PermValue ShareScreen { get; } Property Value PermValue Speak If Allowed, a user may speak in a voice channel. Declaration public PermValue Speak { get; } Property Value PermValue UseVoiceActivity If Allowed, a user may use voice activation. Declaration public PermValue UseVoiceActivity { get; } Property Value PermValue ViewChannel If Allowed, a user may view channels. Declaration public PermValue ViewChannel { get; } Property Value PermValue Methods AllowAll(IChannel) Gets a OverwritePermissions that grants all permissions for the given channel. Declaration public static OverwritePermissions AllowAll(IChannel channel) Parameters IChannel channel Returns OverwritePermissions DenyAll(IChannel) Gets a OverwritePermissions that denies all permissions for the given channel. Declaration public static OverwritePermissions DenyAll(IChannel channel) Parameters IChannel channel Returns OverwritePermissions Modify(Nullable<PermValue>, Nullable<PermValue>, Nullable<PermValue>, Nullable<PermValue>, Nullable<PermValue>, Nullable<PermValue>, Nullable<PermValue>, Nullable<PermValue>, Nullable<PermValue>, Nullable<PermValue>, Nullable<PermValue>, Nullable<PermValue>, Nullable<PermValue>, Nullable<PermValue>, Nullable<PermValue>, Nullable<PermValue>, Nullable<PermValue>, Nullable<PermValue>) Initializes a new OverwritePermissions from the current one, changing the provided non-null permissions. Declaration public OverwritePermissions Modify(PermValue? createInvites = null, PermValue? manageChannels = null, PermValue? manageRoles = null, PermValue? viewChannel = null, PermValue? sendMessages = null, PermValue? manageMessages = null, PermValue? attachFiles = null, PermValue? connect = null, PermValue? manageVoice = null, PermValue? mentionEveryone = null, PermValue? addReactions = null, PermValue? passiveConnect = null, PermValue? useVoiceActivity = null, PermValue? speak = null, PermValue? deafenMembers = null, PermValue? muteMembers = null, PermValue? playSoundtrack = null, PermValue? shareScreen = null) Parameters Nullable < PermValue > createInvites Nullable < PermValue > manageChannels Nullable < PermValue > manageRoles Nullable < PermValue > viewChannel Nullable < PermValue > sendMessages Nullable < PermValue > manageMessages Nullable < PermValue > attachFiles Nullable < PermValue > connect Nullable < PermValue > manageVoice Nullable < PermValue > mentionEveryone Nullable < PermValue > addReactions Nullable < PermValue > passiveConnect Nullable < PermValue > useVoiceActivity Nullable < PermValue > speak Nullable < PermValue > deafenMembers Nullable < PermValue > muteMembers Nullable < PermValue > playSoundtrack Nullable < PermValue > shareScreen Returns OverwritePermissions ToAllowList() Creates a of all the ChannelPermission values that are allowed. Declaration public List<ChannelPermission> ToAllowList() Returns List < ChannelPermission > A of all allowed ChannelPermission flags. If none, the list will be empty. ToDenyList() Creates a of all the ChannelPermission values that are denied. Declaration public List<ChannelPermission> ToDenyList() Returns List < ChannelPermission > A of all denied ChannelPermission flags. If none, the list will be empty. ToString() Declaration public override string ToString() Returns String"
  },
  "api/Kook.ParagraphStruct.html": {
    "href": "api/Kook.ParagraphStruct.html",
    "title": "Class ParagraphStruct | Kook.Net 文档",
    "keywords": "Class ParagraphStruct A paragraph struct that can be used in modules. Inheritance Object ParagraphStruct Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class ParagraphStruct : object, IElement, IEquatable<ParagraphStruct> Properties ColumnCount Gets the number of columns in the paragraph. Declaration public int ColumnCount { get; } Property Value Int32 An int value that represents the number of columns in the paragraph. Fields Gets the fields in the paragraph. Declaration public ImmutableArray<IElement> Fields { get; } Property Value ImmutableArray < IElement > An array that contains the fields in the paragraph. Type Gets the type of the element. Declaration public ElementType Type { get; } Property Value ElementType An ElementType value that represents the theme of the button. Implements IElement.Type Methods Equals(ParagraphStruct) Determines whether the specified ParagraphStruct is equal to the current ParagraphStruct . Declaration public bool Equals(ParagraphStruct paragraphStruct) Parameters ParagraphStruct paragraphStruct The ParagraphStruct to compare with the current ParagraphStruct . Returns Boolean true if the specified ParagraphStruct is equal to the current ParagraphStruct ; otherwise, false . Equals(Object) Determines whether the specified ParagraphStruct is equal to the current ParagraphStruct . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current ParagraphStruct . Returns Boolean true if the specified ParagraphStruct is equal to the current ParagraphStruct ; otherwise, false . Remarks If the object passes is an ParagraphStruct , Equals(ParagraphStruct) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 Operators Equality(ParagraphStruct, ParagraphStruct) Determines whether the specified ParagraphStruct is equal to the current ParagraphStruct . Declaration public static bool operator ==(ParagraphStruct left, ParagraphStruct right) Parameters ParagraphStruct left ParagraphStruct right Returns Boolean true if the specified ParagraphStruct is equal to the current ParagraphStruct ; otherwise, false . Inequality(ParagraphStruct, ParagraphStruct) Determines whether the specified ParagraphStruct is not equal to the current ParagraphStruct . Declaration public static bool operator !=(ParagraphStruct left, ParagraphStruct right) Parameters ParagraphStruct left ParagraphStruct right Returns Boolean true if the specified ParagraphStruct is not equal to the current ParagraphStruct ; otherwise, false . Extension Methods CardExtensions.ToBuilder(ParagraphStruct)"
  },
  "api/Kook.ParagraphStructBuilder.html": {
    "href": "api/Kook.ParagraphStructBuilder.html",
    "title": "Class ParagraphStructBuilder | Kook.Net 文档",
    "keywords": "Class ParagraphStructBuilder An element builder to build a ParagraphStruct . Inheritance Object ParagraphStructBuilder Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class ParagraphStructBuilder : object, IElementBuilder, IEquatable<ParagraphStructBuilder> Constructors ParagraphStructBuilder() Initializes a new ParagraphStructBuilder class. Declaration public ParagraphStructBuilder() ParagraphStructBuilder(Int32, List<IElementBuilder>) Initializes a new ParagraphStructBuilder class. Declaration public ParagraphStructBuilder(int columnCount, List<IElementBuilder> fields = null) Parameters Int32 columnCount List < IElementBuilder > fields Fields MaxColumnCount Returns the maximum number of columns allowed by Kook. Declaration public const int MaxColumnCount = null Field Value Int32 MaxFieldCount Returns the maximum number of fields allowed by Kook. Declaration public const int MaxFieldCount = null Field Value Int32 MinColumnCount Returns the minimum number of columns allowed by Kook. Declaration public const int MinColumnCount = null Field Value Int32 Properties ColumnCount Gets or sets the number of columns of the paragraph. Declaration public int ColumnCount { get; set; } Property Value Int32 An int that represents the number of columns of the paragraph. Fields Gets or sets the fields of the paragraph. Declaration public List<IElementBuilder> Fields { get; set; } Property Value List < IElementBuilder > A that represents the fields of the paragraph. Type Gets the type of the element that this builder builds. Declaration public ElementType Type { get; } Property Value ElementType An ElementType that represents the type of element that this builder builds. Implements IElementBuilder.Type Methods AddField(KMarkdownElementBuilder) Adds a field to the paragraph. Declaration public ParagraphStructBuilder AddField(KMarkdownElementBuilder field) Parameters KMarkdownElementBuilder field A KMarkdownElementBuilder that represents the field to add. Returns ParagraphStructBuilder The current builder. AddField(PlainTextElementBuilder) Adds a field to the paragraph. Declaration public ParagraphStructBuilder AddField(PlainTextElementBuilder field) Parameters PlainTextElementBuilder field A PlainTextElementBuilder that represents the field to add. Returns ParagraphStructBuilder The current builder. AddField<T>(Action<T>) Adds a field to the paragraph. Declaration public ParagraphStructBuilder AddField<T>(Action<T> action = null) where T : IElementBuilder, new() Parameters Action <T> action The action to create a builder of a KMarkdownElement , which will be added to the paragraph. Returns ParagraphStructBuilder The current builder. Type Parameters T Build() Builds the ParagraphStructBuilder into a ParagraphStruct . Declaration public ParagraphStruct Build() Returns ParagraphStruct A ParagraphStruct represents the built element object. Equals(ParagraphStructBuilder) Determines whether the specified ParagraphStructBuilder is equal to the current ParagraphStructBuilder . Declaration public bool Equals(ParagraphStructBuilder paragraphStructBuilder) Parameters ParagraphStructBuilder paragraphStructBuilder The ParagraphStructBuilder to compare with the current ParagraphStructBuilder . Returns Boolean true if the specified ParagraphStructBuilder is equal to the current ParagraphStructBuilder ; otherwise, false . Equals(Object) Determines whether the specified is equal to the current ParagraphStructBuilder . Declaration public override bool Equals(object obj) Parameters Object obj The to compare with the current ParagraphStructBuilder . Returns Boolean true if the specified is equal to the current ParagraphStructBuilder ; otherwise, false . GetHashCode() Declaration public override int GetHashCode() Returns Int32 WithColumnCount(Int32) Sets the number of columns of the paragraph. Declaration public ParagraphStructBuilder WithColumnCount(int count) Parameters Int32 count An int that represents the number of columns of the paragraph. Returns ParagraphStructBuilder The current builder. Operators Equality(ParagraphStructBuilder, ParagraphStructBuilder) Determines whether the specified ParagraphStructBuilder is equal to the current ParagraphStructBuilder . Declaration public static bool operator ==(ParagraphStructBuilder left, ParagraphStructBuilder right) Parameters ParagraphStructBuilder left ParagraphStructBuilder right Returns Boolean true if the specified ParagraphStructBuilder is equal to the current ParagraphStructBuilder ; otherwise, false . Inequality(ParagraphStructBuilder, ParagraphStructBuilder) Determines whether the specified ParagraphStructBuilder is not equal to the current ParagraphStructBuilder . Declaration public static bool operator !=(ParagraphStructBuilder left, ParagraphStructBuilder right) Parameters ParagraphStructBuilder left ParagraphStructBuilder right Returns Boolean true if the specified ParagraphStructBuilder is not equal to the current ParagraphStructBuilder ; otherwise, false . Explicit Interface Implementations IElementBuilder.Build() Builds the IElementBuilder into an IElement . Declaration IElement IElementBuilder.Build() Returns IElement An IElement represents the built element object. Implements IElementBuilder.Build()"
  },
  "api/Kook.PermValue.html": {
    "href": "api/Kook.PermValue.html",
    "title": "Enum PermValue | Kook.Net 文档",
    "keywords": "Enum PermValue Specifies the permission value. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum PermValue : int Allow Allows this permission. Deny Denies this permission. Inherit Inherits the permission settings."
  },
  "api/Kook.PlainTextElement.html": {
    "href": "api/Kook.PlainTextElement.html",
    "title": "Class PlainTextElement | Kook.Net 文档",
    "keywords": "Class PlainTextElement A plain text element that can be used in an IModule . Inheritance Object PlainTextElement Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class PlainTextElement : object, IElement, IEquatable<PlainTextElement> Properties Content Gets the KMarkdown content of the element. Declaration public string Content { get; } Property Value String A string that represents the KMarkdown content of the element. Emoji Gets whether the shortcuts should be translated into emojis. Declaration public bool Emoji { get; } Property Value Boolean A boolean value that indicates whether the shortcuts should be translated into emojis. true if the shortcuts should be translated into emojis; false if the text should be displayed as is. Type Gets the type of the element. Declaration public ElementType Type { get; } Property Value ElementType An ElementType value that represents the theme of the button. Implements IElement.Type Methods Equals(PlainTextElement) Determines whether the specified PlainTextElement is equal to the current PlainTextElement . Declaration public bool Equals(PlainTextElement plainTextElement) Parameters PlainTextElement plainTextElement The PlainTextElement to compare with the current PlainTextElement . Returns Boolean true if the specified PlainTextElement is equal to the current PlainTextElement ; otherwise, false . Equals(Object) Determines whether the specified PlainTextElement is equal to the current PlainTextElement . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current PlainTextElement . Returns Boolean true if the specified PlainTextElement is equal to the current PlainTextElement ; otherwise, false . Remarks If the object passes is an PlainTextElement , Equals(PlainTextElement) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 ToString() Declaration public override string ToString() Returns String Operators Equality(PlainTextElement, PlainTextElement) Determines whether the specified PlainTextElement is equal to the current PlainTextElement . Declaration public static bool operator ==(PlainTextElement left, PlainTextElement right) Parameters PlainTextElement left PlainTextElement right Returns Boolean true if the specified PlainTextElement is equal to the current PlainTextElement ; otherwise, false . Inequality(PlainTextElement, PlainTextElement) Determines whether the specified PlainTextElement is not equal to the current PlainTextElement . Declaration public static bool operator !=(PlainTextElement left, PlainTextElement right) Parameters PlainTextElement left PlainTextElement right Returns Boolean true if the specified PlainTextElement is not equal to the current PlainTextElement ; otherwise, false . Extension Methods CardExtensions.ToBuilder(PlainTextElement)"
  },
  "api/Kook.PlainTextElementBuilder.html": {
    "href": "api/Kook.PlainTextElementBuilder.html",
    "title": "Class PlainTextElementBuilder | Kook.Net 文档",
    "keywords": "Class PlainTextElementBuilder An element builder to build a PlainTextElement . Inheritance Object PlainTextElementBuilder Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class PlainTextElementBuilder : object, IElementBuilder, IEquatable<PlainTextElementBuilder> Constructors PlainTextElementBuilder() Initializes a new instance of the PlainTextElementBuilder class. Declaration public PlainTextElementBuilder() PlainTextElementBuilder(String, Boolean) Initializes a new instance of the PlainTextElementBuilder class. Declaration public PlainTextElementBuilder(string content, bool emoji = true) Parameters String content The content of the PlainTextElement . Boolean emoji A boolean value that indicates whether the shortcuts should be translated into emojis. Fields MaxPlainTextLength Gets the maximum plain text length allowed by Kook. Declaration public const int MaxPlainTextLength = null Field Value Int32 An int that represents the maximum plain text length allowed by Kook. Properties Content Gets or sets the content of a PlainTextElement . Declaration public string Content { get; set; } Property Value String The content of the PlainTextElement . Emoji Gets whether the shortcuts should be translated into emojis. Declaration public bool Emoji { get; set; } Property Value Boolean A boolean value that indicates whether the shortcuts should be translated into emojis. true if the shortcuts should be translated into emojis; false if the text should be displayed as is. Type Gets the type of the element that this builder builds. Declaration public ElementType Type { get; } Property Value ElementType An ElementType that represents the type of element that this builder builds. Implements IElementBuilder.Type Methods Build() Builds the PlainTextElementBuilder into a PlainTextElement . Declaration public PlainTextElement Build() Returns PlainTextElement A PlainTextElement represents the built element object. Equals(PlainTextElementBuilder) Determines whether the specified PlainTextElementBuilder is equal to the current PlainTextElementBuilder . Declaration public bool Equals(PlainTextElementBuilder plainTextElementBuilder) Parameters PlainTextElementBuilder plainTextElementBuilder The PlainTextElementBuilder to compare with the current PlainTextElementBuilder . Returns Boolean true if the specified PlainTextElementBuilder is equal to the current PlainTextElementBuilder ; otherwise, false . Equals(Object) Determines whether the specified is equal to the current PlainTextElementBuilder . Declaration public override bool Equals(object obj) Parameters Object obj The to compare with the current PlainTextElementBuilder . Returns Boolean GetHashCode() Declaration public override int GetHashCode() Returns Int32 WithContent(String) Sets the content of a PlainTextElement . Declaration public PlainTextElementBuilder WithContent(string content) Parameters String content The text to be set as the content. Returns PlainTextElementBuilder The current builder. WithEmoji(Boolean) Sets whether the shortcuts should be translated into emojis. Declaration public PlainTextElementBuilder WithEmoji(bool emoji) Parameters Boolean emoji A boolean value that indicates whether the shortcuts should be translated into emojis. true if the shortcuts should be translated into emojis; false if the text should be displayed as is. Returns PlainTextElementBuilder The current builder. Operators Equality(PlainTextElementBuilder, PlainTextElementBuilder) Determines whether the specified PlainTextElementBuilder is equal to the current PlainTextElementBuilder . Declaration public static bool operator ==(PlainTextElementBuilder left, PlainTextElementBuilder right) Parameters PlainTextElementBuilder left PlainTextElementBuilder right Returns Boolean true if the specified PlainTextElementBuilder is equal to the current PlainTextElementBuilder ; otherwise, false . Implicit(String to PlainTextElementBuilder) Initialized a new instance of the PlainTextElementBuilder class with the specified content. Declaration public static implicit operator PlainTextElementBuilder(string content) Parameters String content The content of the PlainTextElement . Returns PlainTextElementBuilder A PlainTextElementBuilder object that is initialized with the specified content. Inequality(PlainTextElementBuilder, PlainTextElementBuilder) Determines whether the specified PlainTextElementBuilder is not equal to the current PlainTextElementBuilder . Declaration public static bool operator !=(PlainTextElementBuilder left, PlainTextElementBuilder right) Parameters PlainTextElementBuilder left PlainTextElementBuilder right Returns Boolean true if the specified PlainTextElementBuilder is not equal to the current PlainTextElementBuilder ; otherwise, false . Explicit Interface Implementations IElementBuilder.Build() Builds the IElementBuilder into an IElement . Declaration IElement IElementBuilder.Build() Returns IElement An IElement represents the built element object. Implements IElementBuilder.Build()"
  },
  "api/Kook.PokeIcon.html": {
    "href": "api/Kook.PokeIcon.html",
    "title": "Struct PokeIcon | Kook.Net 文档",
    "keywords": "Struct PokeIcon Represents an icon of an IPoke . Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct PokeIcon Properties Resource Gets the resource uri of the icon. Declaration public string Resource { get; } Property Value String ResourceExpired Gets the resource uri of the icon when the IPoke is expired. Declaration public string ResourceExpired { get; } Property Value String"
  },
  "api/Kook.PokeLabel.html": {
    "href": "api/Kook.PokeLabel.html",
    "title": "Struct PokeLabel | Kook.Net 文档",
    "keywords": "Struct PokeLabel Represents the label of a IPoke . Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct PokeLabel : IEntity<uint> Properties Id Gets the ID of the poke action label. Declaration public uint Id { get; } Property Value UInt32 Implements IEntity<TId>.Id Name Gets the name of the poke action label. Declaration public string Name { get; } Property Value String"
  },
  "api/Kook.PokeQuality.html": {
    "href": "api/Kook.PokeQuality.html",
    "title": "Struct PokeQuality | Kook.Net 文档",
    "keywords": "Struct PokeQuality Represents the quality of a IPoke . Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct PokeQuality : IEntity<uint> Properties Color Gets the color of the PokeQuality . Declaration public Color Color { get; } Property Value Color Id Gets the identifier of the PokeQuality . Declaration public uint Id { get; } Property Value UInt32 Implements IEntity<TId>.Id Resources Gets the resources of the PokeQuality . Declaration public IReadOnlyDictionary<string, string> Resources { get; } Property Value IReadOnlyDictionary < String , String >"
  },
  "api/Kook.PokeResourceType.html": {
    "href": "api/Kook.PokeResourceType.html",
    "title": "Enum PokeResourceType | Kook.Net 文档",
    "keywords": "Enum PokeResourceType Represents the type of a IPokeResource . Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum PokeResourceType : int ImageAnimation Represents a resource that is an image. NotImplemented Represents a resource that is not implemented."
  },
  "api/Kook.Preconditions.html": {
    "href": "api/Kook.Preconditions.html",
    "title": "Class Preconditions | Kook.Net 文档",
    "keywords": "Class Preconditions Provides methods to check preconditions. Inheritance Object Preconditions Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public static class Preconditions : object Methods AtLeast(Byte, Byte, String, String) Declaration public static void AtLeast(byte obj, byte value, string name, string msg = null) Parameters Byte obj Byte value String name String msg AtLeast(Int16, Int16, String, String) Declaration public static void AtLeast(short obj, short value, string name, string msg = null) Parameters Int16 obj Int16 value String name String msg AtLeast(Int32, Int32, String, String) Declaration public static void AtLeast(int obj, int value, string name, string msg = null) Parameters Int32 obj Int32 value String name String msg AtLeast(Int64, Int64, String, String) Declaration public static void AtLeast(long obj, long value, string name, string msg = null) Parameters Int64 obj Int64 value String name String msg AtLeast(Nullable<Byte>, Byte, String, String) Declaration public static void AtLeast(byte? obj, byte value, string name, string msg = null) Parameters Nullable < Byte > obj Byte value String name String msg AtLeast(Nullable<Int16>, Int16, String, String) Declaration public static void AtLeast(short? obj, short value, string name, string msg = null) Parameters Nullable < Int16 > obj Int16 value String name String msg AtLeast(Nullable<Int32>, Int32, String, String) Declaration public static void AtLeast(int? obj, int value, string name, string msg = null) Parameters Nullable < Int32 > obj Int32 value String name String msg AtLeast(Nullable<Int64>, Int64, String, String) Declaration public static void AtLeast(long? obj, long value, string name, string msg = null) Parameters Nullable < Int64 > obj Int64 value String name String msg AtLeast(Nullable<SByte>, SByte, String, String) Declaration public static void AtLeast(sbyte? obj, sbyte value, string name, string msg = null) Parameters Nullable < SByte > obj SByte value String name String msg AtLeast(Nullable<UInt16>, UInt16, String, String) Declaration public static void AtLeast(ushort? obj, ushort value, string name, string msg = null) Parameters Nullable < UInt16 > obj UInt16 value String name String msg AtLeast(Nullable<UInt32>, UInt32, String, String) Declaration public static void AtLeast(uint? obj, uint value, string name, string msg = null) Parameters Nullable < UInt32 > obj UInt32 value String name String msg AtLeast(Nullable<UInt64>, UInt64, String, String) Declaration public static void AtLeast(ulong? obj, ulong value, string name, string msg = null) Parameters Nullable < UInt64 > obj UInt64 value String name String msg AtLeast(SByte, SByte, String, String) Declaration public static void AtLeast(sbyte obj, sbyte value, string name, string msg = null) Parameters SByte obj SByte value String name String msg AtLeast(UInt16, UInt16, String, String) Declaration public static void AtLeast(ushort obj, ushort value, string name, string msg = null) Parameters UInt16 obj UInt16 value String name String msg AtLeast(UInt32, UInt32, String, String) Declaration public static void AtLeast(uint obj, uint value, string name, string msg = null) Parameters UInt32 obj UInt32 value String name String msg AtLeast(UInt64, UInt64, String, String) Declaration public static void AtLeast(ulong obj, ulong value, string name, string msg = null) Parameters UInt64 obj UInt64 value String name String msg AtMost(Byte, Byte, String, String) Declaration public static void AtMost(byte obj, byte value, string name, string msg = null) Parameters Byte obj Byte value String name String msg AtMost(Int16, Int16, String, String) Declaration public static void AtMost(short obj, short value, string name, string msg = null) Parameters Int16 obj Int16 value String name String msg AtMost(Int32, Int32, String, String) Declaration public static void AtMost(int obj, int value, string name, string msg = null) Parameters Int32 obj Int32 value String name String msg AtMost(Int64, Int64, String, String) Declaration public static void AtMost(long obj, long value, string name, string msg = null) Parameters Int64 obj Int64 value String name String msg AtMost(Nullable<Byte>, Byte, String, String) Declaration public static void AtMost(byte? obj, byte value, string name, string msg = null) Parameters Nullable < Byte > obj Byte value String name String msg AtMost(Nullable<Int16>, Int16, String, String) Declaration public static void AtMost(short? obj, short value, string name, string msg = null) Parameters Nullable < Int16 > obj Int16 value String name String msg AtMost(Nullable<Int32>, Int32, String, String) Declaration public static void AtMost(int? obj, int value, string name, string msg = null) Parameters Nullable < Int32 > obj Int32 value String name String msg AtMost(Nullable<Int64>, Int64, String, String) Declaration public static void AtMost(long? obj, long value, string name, string msg = null) Parameters Nullable < Int64 > obj Int64 value String name String msg AtMost(Nullable<SByte>, SByte, String, String) Declaration public static void AtMost(sbyte? obj, sbyte value, string name, string msg = null) Parameters Nullable < SByte > obj SByte value String name String msg AtMost(Nullable<UInt16>, UInt16, String, String) Declaration public static void AtMost(ushort? obj, ushort value, string name, string msg = null) Parameters Nullable < UInt16 > obj UInt16 value String name String msg AtMost(Nullable<UInt32>, UInt32, String, String) Declaration public static void AtMost(uint? obj, uint value, string name, string msg = null) Parameters Nullable < UInt32 > obj UInt32 value String name String msg AtMost(Nullable<UInt64>, UInt64, String, String) Declaration public static void AtMost(ulong? obj, ulong value, string name, string msg = null) Parameters Nullable < UInt64 > obj UInt64 value String name String msg AtMost(SByte, SByte, String, String) Declaration public static void AtMost(sbyte obj, sbyte value, string name, string msg = null) Parameters SByte obj SByte value String name String msg AtMost(UInt16, UInt16, String, String) Declaration public static void AtMost(ushort obj, ushort value, string name, string msg = null) Parameters UInt16 obj UInt16 value String name String msg AtMost(UInt32, UInt32, String, String) Declaration public static void AtMost(uint obj, uint value, string name, string msg = null) Parameters UInt32 obj UInt32 value String name String msg AtMost(UInt64, UInt64, String, String) Declaration public static void AtMost(ulong obj, ulong value, string name, string msg = null) Parameters UInt64 obj UInt64 value String name String msg GreaterThan(Byte, Byte, String, String) Declaration public static void GreaterThan(byte obj, byte value, string name, string msg = null) Parameters Byte obj Byte value String name String msg GreaterThan(Int16, Int16, String, String) Declaration public static void GreaterThan(short obj, short value, string name, string msg = null) Parameters Int16 obj Int16 value String name String msg GreaterThan(Int32, Int32, String, String) Declaration public static void GreaterThan(int obj, int value, string name, string msg = null) Parameters Int32 obj Int32 value String name String msg GreaterThan(Int64, Int64, String, String) Declaration public static void GreaterThan(long obj, long value, string name, string msg = null) Parameters Int64 obj Int64 value String name String msg GreaterThan(Nullable<Byte>, Byte, String, String) Declaration public static void GreaterThan(byte? obj, byte value, string name, string msg = null) Parameters Nullable < Byte > obj Byte value String name String msg GreaterThan(Nullable<Int16>, Int16, String, String) Declaration public static void GreaterThan(short? obj, short value, string name, string msg = null) Parameters Nullable < Int16 > obj Int16 value String name String msg GreaterThan(Nullable<Int32>, Int32, String, String) Declaration public static void GreaterThan(int? obj, int value, string name, string msg = null) Parameters Nullable < Int32 > obj Int32 value String name String msg GreaterThan(Nullable<Int64>, Int64, String, String) Declaration public static void GreaterThan(long? obj, long value, string name, string msg = null) Parameters Nullable < Int64 > obj Int64 value String name String msg GreaterThan(Nullable<SByte>, SByte, String, String) Declaration public static void GreaterThan(sbyte? obj, sbyte value, string name, string msg = null) Parameters Nullable < SByte > obj SByte value String name String msg GreaterThan(Nullable<UInt16>, UInt16, String, String) Declaration public static void GreaterThan(ushort? obj, ushort value, string name, string msg = null) Parameters Nullable < UInt16 > obj UInt16 value String name String msg GreaterThan(Nullable<UInt32>, UInt32, String, String) Declaration public static void GreaterThan(uint? obj, uint value, string name, string msg = null) Parameters Nullable < UInt32 > obj UInt32 value String name String msg GreaterThan(Nullable<UInt64>, UInt64, String, String) Declaration public static void GreaterThan(ulong? obj, ulong value, string name, string msg = null) Parameters Nullable < UInt64 > obj UInt64 value String name String msg GreaterThan(SByte, SByte, String, String) Declaration public static void GreaterThan(sbyte obj, sbyte value, string name, string msg = null) Parameters SByte obj SByte value String name String msg GreaterThan(UInt16, UInt16, String, String) Declaration public static void GreaterThan(ushort obj, ushort value, string name, string msg = null) Parameters UInt16 obj UInt16 value String name String msg GreaterThan(UInt32, UInt32, String, String) Declaration public static void GreaterThan(uint obj, uint value, string name, string msg = null) Parameters UInt32 obj UInt32 value String name String msg GreaterThan(UInt64, UInt64, String, String) Declaration public static void GreaterThan(ulong obj, ulong value, string name, string msg = null) Parameters UInt64 obj UInt64 value String name String msg LessThan(Byte, Byte, String, String) Declaration public static void LessThan(byte obj, byte value, string name, string msg = null) Parameters Byte obj Byte value String name String msg LessThan(Int16, Int16, String, String) Declaration public static void LessThan(short obj, short value, string name, string msg = null) Parameters Int16 obj Int16 value String name String msg LessThan(Int32, Int32, String, String) Declaration public static void LessThan(int obj, int value, string name, string msg = null) Parameters Int32 obj Int32 value String name String msg LessThan(Int64, Int64, String, String) Declaration public static void LessThan(long obj, long value, string name, string msg = null) Parameters Int64 obj Int64 value String name String msg LessThan(Nullable<Byte>, Byte, String, String) Declaration public static void LessThan(byte? obj, byte value, string name, string msg = null) Parameters Nullable < Byte > obj Byte value String name String msg LessThan(Nullable<Int16>, Int16, String, String) Declaration public static void LessThan(short? obj, short value, string name, string msg = null) Parameters Nullable < Int16 > obj Int16 value String name String msg LessThan(Nullable<Int32>, Int32, String, String) Declaration public static void LessThan(int? obj, int value, string name, string msg = null) Parameters Nullable < Int32 > obj Int32 value String name String msg LessThan(Nullable<Int64>, Int64, String, String) Declaration public static void LessThan(long? obj, long value, string name, string msg = null) Parameters Nullable < Int64 > obj Int64 value String name String msg LessThan(Nullable<SByte>, SByte, String, String) Declaration public static void LessThan(sbyte? obj, sbyte value, string name, string msg = null) Parameters Nullable < SByte > obj SByte value String name String msg LessThan(Nullable<UInt16>, UInt16, String, String) Declaration public static void LessThan(ushort? obj, ushort value, string name, string msg = null) Parameters Nullable < UInt16 > obj UInt16 value String name String msg LessThan(Nullable<UInt32>, UInt32, String, String) Declaration public static void LessThan(uint? obj, uint value, string name, string msg = null) Parameters Nullable < UInt32 > obj UInt32 value String name String msg LessThan(Nullable<UInt64>, UInt64, String, String) Declaration public static void LessThan(ulong? obj, ulong value, string name, string msg = null) Parameters Nullable < UInt64 > obj UInt64 value String name String msg LessThan(SByte, SByte, String, String) Declaration public static void LessThan(sbyte obj, sbyte value, string name, string msg = null) Parameters SByte obj SByte value String name String msg LessThan(UInt16, UInt16, String, String) Declaration public static void LessThan(ushort obj, ushort value, string name, string msg = null) Parameters UInt16 obj UInt16 value String name String msg LessThan(UInt32, UInt32, String, String) Declaration public static void LessThan(uint obj, uint value, string name, string msg = null) Parameters UInt32 obj UInt32 value String name String msg LessThan(UInt64, UInt64, String, String) Declaration public static void LessThan(ulong obj, ulong value, string name, string msg = null) Parameters UInt64 obj UInt64 value String name String msg NotEmpty(String, String, String) Declaration public static void NotEmpty(string obj, string name, string msg = null) Parameters String obj String name String msg NotEqual(Guid, Guid, String, String) Declaration public static void NotEqual(Guid obj, Guid value, string name, string msg = null) Parameters Guid obj Guid value String name String msg NotEqual(Byte, Byte, String, String) Declaration public static void NotEqual(byte obj, byte value, string name, string msg = null) Parameters Byte obj Byte value String name String msg NotEqual(Int16, Int16, String, String) Declaration public static void NotEqual(short obj, short value, string name, string msg = null) Parameters Int16 obj Int16 value String name String msg NotEqual(Int32, Int32, String, String) Declaration public static void NotEqual(int obj, int value, string name, string msg = null) Parameters Int32 obj Int32 value String name String msg NotEqual(Int64, Int64, String, String) Declaration public static void NotEqual(long obj, long value, string name, string msg = null) Parameters Int64 obj Int64 value String name String msg NotEqual(Nullable<Guid>, Guid, String, String) Declaration public static void NotEqual(Guid? obj, Guid value, string name, string msg = null) Parameters Nullable < Guid > obj Guid value String name String msg NotEqual(Nullable<Byte>, Byte, String, String) Declaration public static void NotEqual(byte? obj, byte value, string name, string msg = null) Parameters Nullable < Byte > obj Byte value String name String msg NotEqual(Nullable<Int16>, Int16, String, String) Declaration public static void NotEqual(short? obj, short value, string name, string msg = null) Parameters Nullable < Int16 > obj Int16 value String name String msg NotEqual(Nullable<Int32>, Int32, String, String) Declaration public static void NotEqual(int? obj, int value, string name, string msg = null) Parameters Nullable < Int32 > obj Int32 value String name String msg NotEqual(Nullable<Int64>, Int64, String, String) Declaration public static void NotEqual(long? obj, long value, string name, string msg = null) Parameters Nullable < Int64 > obj Int64 value String name String msg NotEqual(Nullable<SByte>, SByte, String, String) Declaration public static void NotEqual(sbyte? obj, sbyte value, string name, string msg = null) Parameters Nullable < SByte > obj SByte value String name String msg NotEqual(Nullable<UInt16>, UInt16, String, String) Declaration public static void NotEqual(ushort? obj, ushort value, string name, string msg = null) Parameters Nullable < UInt16 > obj UInt16 value String name String msg NotEqual(Nullable<UInt32>, UInt32, String, String) Declaration public static void NotEqual(uint? obj, uint value, string name, string msg = null) Parameters Nullable < UInt32 > obj UInt32 value String name String msg NotEqual(Nullable<UInt64>, UInt64, String, String) Declaration public static void NotEqual(ulong? obj, ulong value, string name, string msg = null) Parameters Nullable < UInt64 > obj UInt64 value String name String msg NotEqual(SByte, SByte, String, String) Declaration public static void NotEqual(sbyte obj, sbyte value, string name, string msg = null) Parameters SByte obj SByte value String name String msg NotEqual(UInt16, UInt16, String, String) Declaration public static void NotEqual(ushort obj, ushort value, string name, string msg = null) Parameters UInt16 obj UInt16 value String name String msg NotEqual(UInt32, UInt32, String, String) Declaration public static void NotEqual(uint obj, uint value, string name, string msg = null) Parameters UInt32 obj UInt32 value String name String msg NotEqual(UInt64, UInt64, String, String) Declaration public static void NotEqual(ulong obj, ulong value, string name, string msg = null) Parameters UInt64 obj UInt64 value String name String msg NotNull<T>(T, String, String) Declaration public static void NotNull<T>(T obj, string name, string msg = null) where T : class Parameters T obj String name String msg Type Parameters T NotNullOrEmpty(String, String, String) Declaration public static void NotNullOrEmpty(string obj, string name, string msg = null) Parameters String obj String name String msg NotNullOrWhitespace(String, String, String) Declaration public static void NotNullOrWhitespace(string obj, string name, string msg = null) Parameters String obj String name String msg"
  },
  "api/Kook.Quote.html": {
    "href": "api/Kook.Quote.html",
    "title": "Class Quote | Kook.Net 文档",
    "keywords": "Class Quote Represents a generic message quote. Inheritance Object Quote Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class Quote : object, IQuote, IEntity<string> Constructors Quote(Guid) Initializes a new instance of the Quote class. Declaration public Quote(Guid quotedMessageId) Parameters Guid quotedMessageId The quoted message identifier. Properties Author Gets the author of this message. Declaration public IUser Author { get; } Property Value IUser Implements IQuote.Author Content Gets the content of the message this quote refers to. Declaration public string Content { get; } Property Value String A string that contains the body of the message; note that this field may be empty or the original code if the message is not a text based message. Implements IQuote.Content CreateAt Gets the time this message was sent. Declaration public DateTimeOffset CreateAt { get; } Property Value DateTimeOffset Time of when the message was sent. Implements IQuote.CreateAt Empty Gets an empty quote whose quoted message is null. Declaration public static Quote Empty { get; } Property Value Quote Remarks Used to delete a quote when modifying a message. Id Gets the unique identifier for this object. Declaration public string Id { get; } Property Value String Implements IEntity<TId>.Id QuotedMessageId Gets the identifier of the message this quote refers to. Declaration public Guid QuotedMessageId { get; } Property Value Guid Implements IQuote.QuotedMessageId Type Gets the type of the message this quote refers to. Declaration public MessageType Type { get; } Property Value MessageType Implements IQuote.Type"
  },
  "api/Kook.ReactionMetadata.html": {
    "href": "api/Kook.ReactionMetadata.html",
    "title": "Struct ReactionMetadata | Kook.Net 文档",
    "keywords": "Struct ReactionMetadata A metadata containing reaction information. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public struct ReactionMetadata Properties IsMe Gets a value that indicates whether the current user has reacted to this. Declaration public bool IsMe { get; } Property Value Boolean true if the user has reacted to the message; otherwise false . ReactionCount Gets the number of reactions. Declaration public int ReactionCount { get; } Property Value Int32 An int representing the number of this reactions that has been added to this message."
  },
  "api/Kook.RequestFriendSource.html": {
    "href": "api/Kook.RequestFriendSource.html",
    "title": "Enum RequestFriendSource | Kook.Net 文档",
    "keywords": "Enum RequestFriendSource Represents a source from which a friend request is sent. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum RequestFriendSource : int FullQualification Represents the friend request is sent via the user's full qualification, such as username#1234 . Guild Represents the friend request is sent via a guild where the user and the current user are in."
  },
  "api/Kook.RequestOptions.html": {
    "href": "api/Kook.RequestOptions.html",
    "title": "Class RequestOptions | Kook.Net 文档",
    "keywords": "Class RequestOptions Represents options that should be used when sending a request. Inheritance Object RequestOptions Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class RequestOptions : object Constructors RequestOptions() Initializes a new RequestOptions class with the default request timeout set in KookConfig . Declaration public RequestOptions() Properties AuditLogReason Gets or sets the reason for this action in the guild's audit log. Declaration public string AuditLogReason { get; set; } Property Value String Remarks Gets or sets the reason that will be written to the guild's audit log if applicable. This may not apply to all actions. CancelToken Gets or sets the cancellation token for this request. Declaration public CancellationToken CancelToken { get; set; } Property Value CancellationToken A for this request. Default Creates a new RequestOptions class with its default settings. Declaration public static RequestOptions Default { get; } Property Value RequestOptions RatelimitCallback Gets or sets the callback to execute regarding ratelimits for this request. Declaration public Func<IRateLimitInfo, Task> RatelimitCallback { get; set; } Property Value Func < IRateLimitInfo , Task > RetryMode Gets or sets the retry behavior when the request fails. Declaration public RetryMode? RetryMode { get; set; } Property Value Nullable < RetryMode > Timeout Gets or sets the maximum time to wait for this request to complete. Declaration public int? Timeout { get; set; } Property Value Nullable < Int32 > An int in milliseconds for when the request times out. Remarks Gets or set the max time, in milliseconds, to wait for this request to complete. If null , a request will not time out. If a rate limit has been triggered for this request's bucket and will not be unpaused in time, this request will fail immediately. Methods Clone() Memberwise clones this RequestOptions object. Declaration public RequestOptions Clone() Returns RequestOptions A cloned RequestOptions object."
  },
  "api/Kook.Rest.BaseKookClient.html": {
    "href": "api/Kook.Rest.BaseKookClient.html",
    "title": "Class BaseKookClient | Kook.Net 文档",
    "keywords": "Class BaseKookClient Represents a client that can connect to the Kook API. Inheritance Object BaseKookClient KookRestClient BaseSocketClient Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public abstract class BaseKookClient : object, IKookClient, IDisposable Properties CurrentUser Gets the logged-in user. Declaration public ISelfUser CurrentUser { get; protected set; } Property Value ISelfUser LoginState Gets the login state of the client. Declaration public LoginState LoginState { get; } Property Value LoginState TokenType Gets the token type of the logged-in user. Declaration public TokenType TokenType { get; } Property Value TokenType Implements IKookClient.TokenType Methods Dispose() Declaration public void Dispose() LoginAsync(TokenType, String, Boolean) Logs in to the Kook API. Declaration public Task LoginAsync(TokenType tokenType, string token, bool validateToken = true) Parameters TokenType tokenType The type of token to use. String token The token to use. Boolean validateToken Whether to validate the token before logging in. Returns Task LogoutAsync() Logs out from the Kook API. Declaration public Task LogoutAsync() Returns Task Events Log Fired when a log message is sent. Declaration public event Func<LogMessage, Task> Log Event Type Func < LogMessage , Task > LoggedIn Fired when the client has logged in. Declaration public event Func<Task> LoggedIn Event Type Func < Task > LoggedOut Fired when the client has logged out. Declaration public event Func<Task> LoggedOut Event Type Func < Task > Explicit Interface Implementations IKookClient.ConnectionState Gets the current state of connection. Declaration ConnectionState IKookClient.ConnectionState { get; } Returns ConnectionState Implements IKookClient.ConnectionState IKookClient.CurrentUser Gets the currently logged-in user. Declaration ISelfUser IKookClient.CurrentUser { get; } Returns ISelfUser Implements IKookClient.CurrentUser"
  },
  "api/Kook.Rest.CardJsonExtension.html": {
    "href": "api/Kook.Rest.CardJsonExtension.html",
    "title": "Class CardJsonExtension | Kook.Net 文档",
    "keywords": "Class CardJsonExtension Provides extension methods for Card and CardBuilder . Inheritance Object CardJsonExtension Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public static class CardJsonExtension : object"
  },
  "api/Kook.Rest.html": {
    "href": "api/Kook.Rest.html",
    "title": "Namespace Kook.Rest | Kook.Net 文档",
    "keywords": "Namespace Kook.Rest Classes BaseKookClient Represents a client that can connect to the Kook API. CardJsonExtension Provides extension methods for Card and CardBuilder . KookRestClient Represents a REST-based KOOK client. KookRestClientExperimentalExtensions Provides extension methods of experimental functionalities for s. KookRestConfig Represents a configuration class for KookRestClient . Poke Represents a poke in messages. RecommendInfo Represents a recommendation information for a guild. RestBan Represents a REST-based ban object. RestCategoryChannel Represents a REST-based category channel. RestChannel Represents a generic REST-based channel. RestDMChannel Represents a REST-based direct-message channel. RestEntity<T> Represents a generic REST-based entity. RestFriendRequest Represents a REST-based friend request. RestGame Represents a game object. RestGuild Represents a REST-based guild/server. RestGuildChannel Represents a REST-based guild channel in a guild. RestGuildExperimentalExtensions Provides extension methods of experimental functionalities for s. RestGuildUser Represents a REST-based guild user. RestIntimacy Gets the intimacy information associated with the specified user. RestInvite Represents a REST-based invite. RestMessage Represents a REST-based message. RestPokeAction Represents a single REST-based poke action. RestPresence Represents the REST user's presence status. This may include their online status and their activity. RestReaction Represents a single REST-based reaction. RestRole Represents a REST-based role. RestSelfUser Represents the logged-in REST-based user. RestSystemMessage Represents a REST-based system message. RestTextChannel Represents a REST-based channel in a guild that can send and receive messages. RestTextChannelExperimentalExtensions Provides extension methods of experimental functionalities for s. RestUser Represents a REST-based user. RestUserMessage Represents a REST-based message sent by a user. RestVoiceChannel Represents a REST-based voice channel in a guild. RestVoiceChannelExperimentalExtensions Provides extension methods of experimental functionalities for s. RestVoiceRegion Represents a REST-based voice region. Interfaces IRestAudioChannel Represents a generic REST-based audio channel. IRestMessageChannel Represents a REST-based channel that can send and receive messages. IRestPrivateChannel Represents a REST-based channel that is private to select recipients."
  },
  "api/Kook.Rest.IRestAudioChannel.html": {
    "href": "api/Kook.Rest.IRestAudioChannel.html",
    "title": "Interface IRestAudioChannel | Kook.Net 文档",
    "keywords": "Interface IRestAudioChannel Represents a generic REST-based audio channel. Inherited Members IAudioChannel.IsVoiceRegionOverwritten IAudioChannel.VoiceRegion IAudioChannel.ServerUrl IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions) IEntity<UInt64>.Id Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public interface IRestAudioChannel : IAudioChannel, IChannel, IEntity<ulong>"
  },
  "api/Kook.Rest.IRestMessageChannel.html": {
    "href": "api/Kook.Rest.IRestMessageChannel.html",
    "title": "Interface IRestMessageChannel | Kook.Net 文档",
    "keywords": "Interface IRestMessageChannel Represents a REST-based channel that can send and receive messages. Inherited Members IMessageChannel.SendFileAsync(String, String, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(Stream, String, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(FileAttachment, IQuote, IUser, RequestOptions) IMessageChannel.SendTextAsync(String, IQuote, IUser, RequestOptions) IMessageChannel.SendCardAsync(ICard, IQuote, IUser, RequestOptions) Kook.IMessageChannel.SendCardsAsync(IEnumerable<>, Kook.IQuote, Kook.IUser, Kook.RequestOptions) IMessageChannel.GetMessageAsync(Guid, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(Int32, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(Guid, Direction, Int32, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions) IMessageChannel.DeleteMessageAsync(Guid, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) Kook.IMessageChannel.ModifyMessageAsync(Guid, Action<>, Kook.RequestOptions) IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions) IEntity<UInt64>.Id Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public interface IRestMessageChannel : IMessageChannel, IChannel, IEntity<ulong> Methods GetMessageAsync(Guid, RequestOptions) Gets a message from this message channel. Declaration Task<RestMessage> GetMessageAsync(Guid id, RequestOptions options = null) Parameters Guid id The identifier of the message. RequestOptions options The options to be used when sending the request. Returns Task < RestMessage > A task that represents an asynchronous get operation for retrieving the message. The task result contains the retrieved message; null if no message is found with the specified identifier. Remarks This method follows the same behavior as described in . Please visit its documentation for more details on this method. GetMessagesAsync(Guid, Direction, Int32, RequestOptions) Gets a collection of messages in this channel. Declaration IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = null, RequestOptions options = null) Parameters Guid referenceMessageId The ID of the starting message to get the messages from. Direction dir The direction of the messages to be gotten from. Int32 limit The numbers of message to be gotten from. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < RestMessage >> Paged collection of messages. Remarks This method follows the same behavior as described in . Please visit its documentation for more details on this method. GetMessagesAsync(IMessage, Direction, Int32, RequestOptions) Gets a collection of messages in this channel. Declaration IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = null, RequestOptions options = null) Parameters IMessage referenceMessage The starting message to get the messages from. Direction dir The direction of the messages to be gotten from. Int32 limit The numbers of message to be gotten from. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < RestMessage >> Paged collection of messages. Remarks This method follows the same behavior as described in . Please visit its documentation for more details on this method. GetMessagesAsync(Int32, RequestOptions) Gets the last N messages from this message channel. Declaration IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(int limit = null, RequestOptions options = null) Parameters Int32 limit The numbers of message to be gotten from. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < RestMessage >> Paged collection of messages. Remarks This method follows the same behavior as described in . Please visit its documentation for more details on this method."
  },
  "api/Kook.Rest.IRestPrivateChannel.html": {
    "href": "api/Kook.Rest.IRestPrivateChannel.html",
    "title": "Interface IRestPrivateChannel | Kook.Net 文档",
    "keywords": "Interface IRestPrivateChannel Represents a REST-based channel that is private to select recipients. Inherited Members IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions) IEntity<UInt64>.Id Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public interface IRestPrivateChannel : IPrivateChannel, IChannel, IEntity<ulong> Properties Recipients Users that can access this channel. Declaration IReadOnlyCollection<RestUser> Recipients { get; } Property Value IReadOnlyCollection < RestUser >"
  },
  "api/Kook.Rest.KookRestClient.html": {
    "href": "api/Kook.Rest.KookRestClient.html",
    "title": "Class KookRestClient | Kook.Net 文档",
    "keywords": "Class KookRestClient Represents a REST-based KOOK client. Inheritance Object BaseKookClient KookRestClient KookSocketRestClient Inherited Members BaseKookClient.Log BaseKookClient.LoggedIn BaseKookClient.LoggedOut BaseKookClient.LoginState BaseKookClient.TokenType BaseKookClient.Dispose() BaseKookClient.LoginAsync(TokenType, String, Boolean) BaseKookClient.LogoutAsync() BaseKookClient.IKookClient.ConnectionState BaseKookClient.IKookClient.CurrentUser Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class KookRestClient : BaseKookClient, IKookClient, IDisposable Constructors KookRestClient() Initializes a new REST-based KOOK client with the default configuration. Declaration public KookRestClient() KookRestClient(KookRestConfig) Initializes a new REST-based KOOK client with the specified configuration. Declaration public KookRestClient(KookRestConfig config) Parameters KookRestConfig config The configuration to use. Properties CurrentUser Gets the logged-in user. Declaration public RestSelfUser CurrentUser { get; } Property Value RestSelfUser Methods AddDirectMessageReactionAsync(Guid, IEmote, RequestOptions) Adds a reaction to a direct message. Declaration public Task AddDirectMessageReactionAsync(Guid messageId, IEmote emote, RequestOptions options = null) Parameters Guid messageId The identifier of the direct message. IEmote emote The emoji used to react to the message. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for adding a reaction to the direct message. See Also IEmote AddReactionAsync(Guid, IEmote, RequestOptions) Adds a reaction to a message. Declaration public Task AddReactionAsync(Guid messageId, IEmote emote, RequestOptions options = null) Parameters Guid messageId The identifier of the message. IEmote emote The emoji used to react to the message. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for adding a reaction to the message. See Also IEmote AddRoleAsync(UInt64, UInt64, UInt32) Adds the specified role to this user in the guild. Declaration public Task AddRoleAsync(ulong guildId, ulong userId, uint roleId) Parameters UInt64 guildId The guild where the role and user are located. UInt64 userId The user to add the role to. UInt32 roleId The role to be added to the user. Returns Task A task that represents the asynchronous role addition operation. CreateAssetAsync(Stream, String, RequestOptions) Creates an asset from a stream. Declaration public Task<string> CreateAssetAsync(Stream stream, string fileName, RequestOptions options = null) Parameters Stream stream The stream to the file. String fileName The name of the file. RequestOptions options The options to be used when sending the request. Returns Task < String > The asset resource URI of the uploaded file. CreateAssetAsync(String, String, RequestOptions) Creates an asset from a file path. Declaration public Task<string> CreateAssetAsync(string path, string fileName, RequestOptions options = null) Parameters String path The path to the file. String fileName The name of the file. RequestOptions options The options to be used when sending the request. Returns Task < String > The asset resource URI of the uploaded file. CreateGameAsync(String, String, String, RequestOptions) Creates game information. Declaration public Task<RestGame> CreateGameAsync(string name, string processName, string iconUrl, RequestOptions options = null) Parameters String name The name of the game. String processName The process name of the game. String iconUrl The icon URI of the game. RequestOptions options The options to be used when sending the request. Returns Task < RestGame > GetBlockedUsersAsync(RequestOptions) Gets blocked users. Declaration public Task<IReadOnlyCollection<RestUser>> GetBlockedUsersAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < RestUser >> A task that represents the asynchronous get operation. The task result contains a collection of users that are blocked by the current user. GetChannelAsync(UInt64, RequestOptions) Gets a generic channel. Declaration public Task<RestChannel> GetChannelAsync(ulong id, RequestOptions options = null) Parameters UInt64 id The identifier of the channel. RequestOptions options The options to be used when sending the request. Returns Task < RestChannel > A task that represents the asynchronous get operation. The task result contains the channel associated with the identifier; null when the channel cannot be found. GetDMChannelAsync(Guid, RequestOptions) Gets a direct message channel. Declaration public Task<RestDMChannel> GetDMChannelAsync(Guid chatCode, RequestOptions options = null) Parameters Guid chatCode The identifier of the channel. RequestOptions options The options to be used when sending the request. Returns Task < RestDMChannel > A task that represents the asynchronous get operation. The task result contains a read-only collection of direct-message channels that the user currently partakes in. GetDMChannelsAsync(RequestOptions) Gets a collection of direct message channels opened in this session. Declaration public Task<IReadOnlyCollection<RestDMChannel>> GetDMChannelsAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < RestDMChannel >> A task that represents the asynchronous get operation. The task result contains a read-only collection of direct-message channels that the user currently partakes in. Remarks This method returns a collection of currently opened direct message channels. warning This method will not return previously opened DM channels outside of the current session! If you have just started the client, this may return an empty collection. GetFriendRequestsAsync(RequestOptions) Gets friend requests. Declaration public Task<IReadOnlyCollection<RestFriendRequest>> GetFriendRequestsAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < RestFriendRequest >> A task that represents the asynchronous get operation. The task result contains a collection of friend requests that the current user has received. GetFriendsAsync(RequestOptions) Gets friends. Declaration public Task<IReadOnlyCollection<RestUser>> GetFriendsAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < RestUser >> A task that represents the asynchronous get operation. The task result contains a collection of users that are friends with the current user. GetGamesAsync(Nullable<GameCreationSource>, RequestOptions) Gets games information. Declaration public IAsyncEnumerable<IReadOnlyCollection<RestGame>> GetGamesAsync(GameCreationSource? source = null, RequestOptions options = null) Parameters Nullable < GameCreationSource > source Specifies whether to return games information created by the current user or by the system by default; null to return all games information. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < RestGame >> A collection of games information. GetGuildAsync(UInt64, RequestOptions) Gets a guild. Declaration public Task<RestGuild> GetGuildAsync(ulong id, RequestOptions options = null) Parameters UInt64 id The guild identifier. RequestOptions options The options to be used when sending the request. Returns Task < RestGuild > A task that represents the asynchronous get operation. The task result contains the guild associated with the identifier; null when the guild cannot be found. GetGuildsAsync(RequestOptions) Gets a collection of guilds that the user is currently in. Declaration public Task<IReadOnlyCollection<RestGuild>> GetGuildsAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < RestGuild >> A task that represents the asynchronous get operation. The task result contains a read-only collection of guilds that the current user is in. GetGuildUserAsync(UInt64, UInt64, RequestOptions) Gets a user from a guild. Declaration public Task<RestGuildUser> GetGuildUserAsync(ulong guildId, ulong id, RequestOptions options = null) Parameters UInt64 guildId The identifier of the guild where the user is located. UInt64 id The identifier of the user (e.g. 168693960628371456 ). RequestOptions options The options to be used when sending the request. Returns Task < RestGuildUser > A task that represents the asynchronous get operation. The task result contains the user from a guild associated with the identifier; null if the user is not found in the guild. GetUserAsync(UInt64, RequestOptions) Gets a user. Declaration public Task<RestUser> GetUserAsync(ulong id, RequestOptions options = null) Parameters UInt64 id The identifier of the user (e.g. 168693960628371456 ). RequestOptions options The options to be used when sending the request. Returns Task < RestUser > A task that represents the asynchronous get operation. The task result contains the user associated with the identifier; null if the user is not found. RemoveDirectMessageReactionAsync(Guid, UInt64, IEmote, RequestOptions) Removes a reaction from a direct message. Declaration public Task RemoveDirectMessageReactionAsync(Guid messageId, ulong userId, IEmote emote, RequestOptions options = null) Parameters Guid messageId The identifier of the direct message. UInt64 userId The identifier of the user who added the reaction. IEmote emote The emoji used to remove from the message. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for removing a reaction from the direct message. See Also IEmote RemoveReactionAsync(Guid, UInt64, IEmote, RequestOptions) Removes a reaction from a message. Declaration public Task RemoveReactionAsync(Guid messageId, ulong userId, IEmote emote, RequestOptions options = null) Parameters Guid messageId The identifier of the message. UInt64 userId The identifier of the user who added the reaction. IEmote emote The emoji used to remove from the message. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for removing a reaction from the message. See Also IEmote RemoveRoleAsync(UInt64, UInt64, UInt32) Removes the specified roleId from this user in the guild. Declaration public Task RemoveRoleAsync(ulong guildId, ulong userId, uint roleId) Parameters UInt64 guildId The guild where the role and user are located. UInt64 userId The user to remove the role from. UInt32 roleId The role to be removed from the user. Returns Task A task that represents the asynchronous role removal operation."
  },
  "api/Kook.Rest.KookRestClientExperimentalExtensions.html": {
    "href": "api/Kook.Rest.KookRestClientExperimentalExtensions.html",
    "title": "Class KookRestClientExperimentalExtensions | Kook.Net 文档",
    "keywords": "Class KookRestClientExperimentalExtensions Provides extension methods of experimental functionalities for s. Inheritance Object KookRestClientExperimentalExtensions Namespace : Kook.Rest Assembly : Kook.Net.Experimental.dll Syntax public static class KookRestClientExperimentalExtensions : object Methods CreateGuildAsync(KookRestClient, String, IVoiceRegion, Stream, Nullable<Int32>, RequestOptions) Creates a guild for the logged-in user. Declaration public static Task<RestGuild> CreateGuildAsync(this KookRestClient client, string name, IVoiceRegion region = null, Stream icon = null, int? templateId = null, RequestOptions options = null) Parameters KookRestClient client The KOOK rest client instance. String name The name of the new guild. IVoiceRegion region The voice region to create the guild with. Stream icon The icon of the new guild. Nullable < Int32 > templateId The identifier of the guild template to be used to create the new guild. RequestOptions options The options to be used when sending the request. Returns Task < RestGuild > A task that represents the asynchronous creation operation. The task result contains the created guild. Remarks This method creates a new guild on behalf of the logged-in user. warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future. GetAdminGuildsAsync(KookRestClient, RequestOptions) Gets a collection of guilds where the current user has the permission. Declaration public static Task<IReadOnlyCollection<RestGuild>> GetAdminGuildsAsync(this KookRestClient client, RequestOptions options = null) Parameters KookRestClient client The KOOK rest client instance. RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < RestGuild >> A task that represents the asynchronous get operation. The task result contains a read-only collection of guilds where the current user has the permission. GetVoiceRegionAsync(KookRestClient, String, RequestOptions) Gets a voice region. Declaration public static Task<RestVoiceRegion> GetVoiceRegionAsync(this KookRestClient client, string id, RequestOptions options = null) Parameters KookRestClient client The KOOK rest client instance. String id The identifier of the voice region (e.g. eu-central ). RequestOptions options The options to be used when sending the request. Returns Task < RestVoiceRegion > A task that represents the asynchronous get operation. The task result contains the voice region associated with the identifier; null if the voice region is not found. Remarks warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future. GetVoiceRegionsAsync(KookRestClient, RequestOptions) Gets a collection of the available voice regions. Declaration public static Task<IReadOnlyCollection<RestVoiceRegion>> GetVoiceRegionsAsync(this KookRestClient client, RequestOptions options = null) Parameters KookRestClient client The KOOK rest client instance. RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < RestVoiceRegion >> A task that represents the asynchronous get operation. The task result contains a read-only collection with all of the available voice regions in this session. Remarks warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future. ValidateCardAsync(KookRestClient, ICard, RequestOptions) Validates a card. Declaration public static Task ValidateCardAsync(this KookRestClient client, ICard card, RequestOptions options = null) Parameters KookRestClient client The KOOK rest client instance. ICard card The card to be validated. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous validation operation. ValidateCardsAsync(KookRestClient, IEnumerable<ICard>, RequestOptions) Validates a collection of cards. Declaration public static Task ValidateCardsAsync(this KookRestClient client, IEnumerable<ICard> cards, RequestOptions options = null) Parameters KookRestClient client The KOOK rest client instance. IEnumerable < ICard > cards The cards to be validated. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous validation operation. ValidateCardsAsync(KookRestClient, String, RequestOptions) Validates a collection of cards. Declaration public static Task ValidateCardsAsync(this KookRestClient client, string cardsJson, RequestOptions options = null) Parameters KookRestClient client The KOOK rest client instance. String cardsJson The JSON representation of the cards to be validated. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous validation operation."
  },
  "api/Kook.Rest.KookRestConfig.html": {
    "href": "api/Kook.Rest.KookRestConfig.html",
    "title": "Class KookRestConfig | Kook.Net 文档",
    "keywords": "Class KookRestConfig Represents a configuration class for KookRestClient . Inheritance Object KookConfig KookRestConfig KookSocketConfig Inherited Members KookConfig.APIVersion KookConfig.Version KookConfig.UserAgent KookConfig.AcceptLanguage KookConfig.APIUrl KookConfig.DefaultRequestTimeout KookConfig.MaxMessageSize KookConfig.MaxUsersPerBatch KookConfig.MaxMessagesPerBatch KookConfig.MaxItemsPerBatchByDefault KookConfig.MinNicknameSize KookConfig.MaxNicknameSize KookConfig.MinIntimacyScore KookConfig.MaxIntimacyScore KookConfig.BoostPackDuration KookConfig.DefaultRetryMode KookConfig.DefaultRatelimitCallback KookConfig.LogLevel KookConfig.FormatUsersInBidirectionalUnicode Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class KookRestConfig : KookConfig Properties RestClientProvider Gets or sets the RestClientProvider to use. Declaration public RestClientProvider RestClientProvider { get; set; } Property Value RestClientProvider"
  },
  "api/Kook.Rest.Poke.html": {
    "href": "api/Kook.Rest.Poke.html",
    "title": "Class Poke | Kook.Net 文档",
    "keywords": "Class Poke Represents a poke in messages. Inheritance Object Poke Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class Poke : object, IPoke, IEntity<uint> Properties Categories Declaration public IReadOnlyCollection<string> Categories { get; } Property Value IReadOnlyCollection < String > Cooldown Declaration public TimeSpan Cooldown { get; } Property Value TimeSpan Description Declaration public string Description { get; } Property Value String Icon Gets the icon resources of the poke. Declaration public PokeIcon Icon { get; } Property Value PokeIcon Implements IPoke.Icon Id Declaration public uint Id { get; } Property Value UInt32 Label Gets the label of the poke. Declaration public PokeLabel Label { get; } Property Value PokeLabel Implements IPoke.Label MessageScenarios Declaration public IReadOnlyDictionary<string, string> MessageScenarios { get; } Property Value IReadOnlyDictionary < String , String > Name Declaration public string Name { get; } Property Value String Quality Gets the quality of the poke. Declaration public PokeQuality Quality { get; } Property Value PokeQuality Implements IPoke.Quality Resource Gets the resource of the poke. Declaration public IPokeResource Resource { get; } Property Value IPokeResource Implements IPoke.Resource Methods ToString() Returns the name of the poke. Declaration public override string ToString() Returns String A string containing the name of the poke."
  },
  "api/Kook.Rest.RecommendInfo.html": {
    "href": "api/Kook.Rest.RecommendInfo.html",
    "title": "Class RecommendInfo | Kook.Net 文档",
    "keywords": "Class RecommendInfo Represents a recommendation information for a guild. Inheritance Object RecommendInfo Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RecommendInfo : object, IRecommendInfo Properties AuditStatus Declaration public int AuditStatus { get; } Property Value Int32 Banner Declaration public string Banner { get; } Property Value String BoostLevel Gets the boost level of the recommended guild. Declaration public BoostLevel BoostLevel { get; } Property Value BoostLevel A BoostLevel representing the boost level of the recommended guild. Implements IRecommendInfo.BoostLevel CustomId Declaration public string CustomId { get; } Property Value String DaysBeforeModify Declaration public int DaysBeforeModify { get; } Property Value Int32 DefaultChannelId Declaration public ulong DefaultChannelId { get; } Property Value UInt64 Description Declaration public string Description { get; } Property Value String Features Gets the features of the recommended guild. Declaration public GuildFeatures Features { get; } Property Value GuildFeatures Implements IRecommendInfo.Features GuildId Declaration public ulong GuildId { get; } Property Value UInt64 Icon Declaration public string Icon { get; } Property Value String IsOfficialPartner Declaration public bool IsOfficialPartner { get; } Property Value Boolean Name Declaration public string Name { get; } Property Value String OpenId Declaration public uint OpenId { get; } Property Value UInt32 Sort Declaration public int Sort { get; } Property Value Int32 Status Declaration public int Status { get; } Property Value Int32 Tag Declaration public string Tag { get; } Property Value String"
  },
  "api/Kook.Rest.RestBan.html": {
    "href": "api/Kook.Rest.RestBan.html",
    "title": "Class RestBan | Kook.Net 文档",
    "keywords": "Class RestBan Represents a REST-based ban object. Inheritance Object RestBan Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RestBan : object, IBan Properties CreatedAt Declaration public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset Reason Declaration public string Reason { get; } Property Value String User Gets the banned user. Declaration public RestUser User { get; } Property Value RestUser A generic RestUser object that was banned. Methods ToString() Gets the name of the banned user. Declaration public override string ToString() Returns String A string containing the name of the user that was banned. Explicit Interface Implementations IBan.User Gets the banned user. Declaration IUser IBan.User { get; } Returns IUser A user that was banned. Implements IBan.User"
  },
  "api/Kook.Rest.RestCategoryChannel.html": {
    "href": "api/Kook.Rest.RestCategoryChannel.html",
    "title": "Class RestCategoryChannel | Kook.Net 文档",
    "keywords": "Class RestCategoryChannel Represents a REST-based category channel. Inheritance Object RestEntity < UInt64 > RestChannel RestGuildChannel RestCategoryChannel Inherited Members RestGuildChannel.RolePermissionOverwrites RestGuildChannel.UserPermissionOverwrites RestGuildChannel.Type RestGuildChannel.Name RestGuildChannel.Position RestGuildChannel.GuildId RestGuildChannel.CreatorId RestGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) RestGuildChannel.GetCreatorAsync(RequestOptions) RestGuildChannel.DeleteAsync(RequestOptions) RestGuildChannel.UpdateAsync(RequestOptions) RestGuildChannel.GetPermissionOverwrite(IUser) RestGuildChannel.GetPermissionOverwrite(IRole) RestGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) RestGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) RestGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) RestGuildChannel.ToString() RestGuildChannel.IGuildChannel.Guild RestEntity<UInt64>.Id Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RestCategoryChannel : RestGuildChannel, IEntity<ulong>, IUpdateable, ICategoryChannel, IGuildChannel, IChannel, IEntity<ulong>, IDeletable"
  },
  "api/Kook.Rest.RestChannel.html": {
    "href": "api/Kook.Rest.RestChannel.html",
    "title": "Class RestChannel | Kook.Net 文档",
    "keywords": "Class RestChannel Represents a generic REST-based channel. Inheritance Object RestEntity < UInt64 > RestChannel RestDMChannel RestGuildChannel Inherited Members RestEntity<UInt64>.Id Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RestChannel : RestEntity<ulong>, IEntity<ulong>, IChannel, IEntity<ulong>, IUpdateable Methods UpdateAsync(RequestOptions) Declaration public virtual Task UpdateAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task"
  },
  "api/Kook.Rest.RestDMChannel.html": {
    "href": "api/Kook.Rest.RestDMChannel.html",
    "title": "Class RestDMChannel | Kook.Net 文档",
    "keywords": "Class RestDMChannel Represents a REST-based direct-message channel. Inheritance Object RestEntity < UInt64 > RestChannel RestDMChannel Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RestDMChannel : RestChannel, IEntity<ulong>, IUpdateable, IDMChannel, IEntity<Guid>, IRestPrivateChannel, IPrivateChannel, IRestMessageChannel, IMessageChannel, IChannel, IEntity<ulong> Properties ChatCode Declaration public Guid ChatCode { get; } Property Value Guid Remarks This property is the same as Id . CurrentUser Gets the current logged-in user. Declaration public RestUser CurrentUser { get; } Property Value RestUser Id Get the identifier of the DM channel. Declaration public Guid Id { get; } Property Value Guid Remarks This property is the same as ChatCode . Recipient Gets the recipient of the channel. Declaration public RestUser Recipient { get; } Property Value RestUser Users Gets a collection that is the current logged-in user and the recipient. Declaration public IReadOnlyCollection<RestUser> Users { get; } Property Value IReadOnlyCollection < RestUser > Methods CloseAsync(RequestOptions) Declaration public Task CloseAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task DeleteMessageAsync(Guid, RequestOptions) Declaration public Task DeleteMessageAsync(Guid messageId, RequestOptions options = null) Parameters Guid messageId RequestOptions options Returns Task DeleteMessageAsync(IMessage, RequestOptions) Declaration public Task DeleteMessageAsync(IMessage message, RequestOptions options = null) Parameters IMessage message RequestOptions options Returns Task GetMessageAsync(Guid, RequestOptions) Gets a message from this message channel. Declaration public Task<RestMessage> GetMessageAsync(Guid id, RequestOptions options = null) Parameters Guid id The identifier of the message. RequestOptions options The options to be used when sending the request. Returns Task < RestMessage > A task that represents an asynchronous get operation for retrieving the message. The task result contains the retrieved message; null if no message is found with the specified identifier. Implements IRestMessageChannel.GetMessageAsync(Guid, RequestOptions) Remarks This method follows the same behavior as described in . Please visit its documentation for more details on this method. GetMessagesAsync(Guid, Direction, Int32, RequestOptions) Gets a collection of messages in this channel. Declaration public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = null, RequestOptions options = null) Parameters Guid referenceMessageId The ID of the starting message to get the messages from. Direction dir The direction of the messages to be gotten from. Int32 limit The numbers of message to be gotten from. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < RestMessage >> Paged collection of messages. Implements IRestMessageChannel.GetMessagesAsync(Guid, Direction, Int32, RequestOptions) Remarks This method follows the same behavior as described in . Please visit its documentation for more details on this method. GetMessagesAsync(IMessage, Direction, Int32, RequestOptions) Gets a collection of messages in this channel. Declaration public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = null, RequestOptions options = null) Parameters IMessage referenceMessage The starting message to get the messages from. Direction dir The direction of the messages to be gotten from. Int32 limit The numbers of message to be gotten from. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < RestMessage >> Paged collection of messages. Implements IRestMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, RequestOptions) Remarks This method follows the same behavior as described in . Please visit its documentation for more details on this method. GetMessagesAsync(Int32, RequestOptions) Gets the last N messages from this message channel. Declaration public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(int limit = null, RequestOptions options = null) Parameters Int32 limit The numbers of message to be gotten from. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < RestMessage >> Paged collection of messages. Implements IRestMessageChannel.GetMessagesAsync(Int32, RequestOptions) Remarks This method follows the same behavior as described in . Please visit its documentation for more details on this method. GetUser(UInt64) Gets a user in this channel from the provided id . Declaration public RestUser GetUser(ulong id) Parameters UInt64 id The identifier of the user. Returns RestUser A RestUser object that is a recipient of this channel; otherwise null . ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions) Declaration public Task ModifyMessageAsync(Guid messageId, Action<MessageProperties> func, RequestOptions options = null) Parameters Guid messageId Action < MessageProperties > func RequestOptions options Returns Task SendCardAsync(ICard, IQuote, RequestOptions) Sends a card message to this message channel. Declaration public Task<Cacheable<IUserMessage, Guid>> SendCardAsync(ICard card, IQuote quote = null, RequestOptions options = null) Parameters ICard card The card to be sent. IQuote quote The message quote to be included. Used to reply to specific messages. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendCardsAsync(IEnumerable<ICard>, IQuote, RequestOptions) Sends a card message to this message channel. Declaration public Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(IEnumerable<ICard> cards, IQuote quote = null, RequestOptions options = null) Parameters IEnumerable < ICard > cards The cards to be sent. IQuote quote The message quote to be included. Used to reply to specific messages. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendFileAsync(FileAttachment, IQuote, RequestOptions) Sends a file to this message channel. Declaration public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(FileAttachment attachment, IQuote quote = null, RequestOptions options = null) Parameters FileAttachment attachment The attachment containing the file. IQuote quote The message quote to be included. Used to reply to specific messages. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendFileAsync(Stream, String, AttachmentType, IQuote, RequestOptions) Sends a file to this message channel. Declaration public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(Stream stream, string fileName = null, AttachmentType type = AttachmentType.File, IQuote quote = null, RequestOptions options = null) Parameters Stream stream The stream of the file. String fileName The name of the file. AttachmentType type The type of the file. IQuote quote The message quote to be included. Used to reply to specific messages. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendFileAsync(String, String, AttachmentType, IQuote, RequestOptions) Sends a file to this message channel. Declaration public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(string path, string fileName = null, AttachmentType type = AttachmentType.File, IQuote quote = null, RequestOptions options = null) Parameters String path The file path of the file. String fileName The name of the file. AttachmentType type The type of the file. IQuote quote The message quote to be included. Used to reply to specific messages. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendTextAsync(String, IQuote, RequestOptions) Sends a text message to this message channel. Declaration public Task<Cacheable<IUserMessage, Guid>> SendTextAsync(string text, IQuote quote = null, RequestOptions options = null) Parameters String text The message to be sent. IQuote quote The message quote to be included. Used to reply to specific messages. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. ToString() Gets a string that represents the Username#IdentifyNumber of the recipient. Declaration public override string ToString() Returns String A string that resolves to the Recipient of this channel. UpdateAsync(RequestOptions) Declaration public override Task UpdateAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task Overrides RestChannel.UpdateAsync(RequestOptions) Explicit Interface Implementations IDMChannel.Recipient Gets the recipient of all messages in this channel. Declaration IUser IDMChannel.Recipient { get; } Returns IUser A user object that represents the other user in this channel. Implements IDMChannel.Recipient IRestPrivateChannel.Recipients Users that can access this channel. Declaration IReadOnlyCollection<RestUser> IRestPrivateChannel.Recipients { get; } Returns IReadOnlyCollection < RestUser > Implements IRestPrivateChannel.Recipients"
  },
  "api/Kook.Rest.RestEntity-1.html": {
    "href": "api/Kook.Rest.RestEntity-1.html",
    "title": "Class RestEntity<T> | Kook.Net 文档",
    "keywords": "Class RestEntity<T> Represents a generic REST-based entity. Inheritance Object RestEntity<T> RestChannel RestFriendRequest RestGame RestGuild RestIntimacy RestInvite RestMessage RestRole RestUser Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public abstract class RestEntity<T> : object, IEntity<T> where T : IEquatable<T> Type Parameters T Properties Id Gets the unique identifier for this object. Declaration public T Id { get; } Property Value T Implements IEntity<TId>.Id"
  },
  "api/Kook.Rest.RestFriendRequest.html": {
    "href": "api/Kook.Rest.RestFriendRequest.html",
    "title": "Class RestFriendRequest | Kook.Net 文档",
    "keywords": "Class RestFriendRequest Represents a REST-based friend request. Inheritance Object RestEntity < UInt64 > RestFriendRequest Inherited Members RestEntity<UInt64>.Id Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RestFriendRequest : RestEntity<ulong>, IEntity<ulong>, IFriendRequest, IEntity<ulong> Properties User Gets the user who sent this friend request. Declaration public IUser User { get; } Property Value IUser Implements IFriendRequest.User Methods AcceptAsync(RequestOptions) Declaration public Task AcceptAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task DeclineAsync(RequestOptions) Declaration public Task DeclineAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task"
  },
  "api/Kook.Rest.RestGame.html": {
    "href": "api/Kook.Rest.RestGame.html",
    "title": "Class RestGame | Kook.Net 文档",
    "keywords": "Class RestGame Represents a game object. Inheritance Object RestEntity < Int32 > RestGame Inherited Members RestEntity<Int32>.Id Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RestGame : RestEntity<int>, IEntity<int>, IGame, IActivity, IEntity<int>, IDeletable Properties GameType Gets the type of the game. Declaration public GameType GameType { get; } Property Value GameType The type of the game. Implements IGame.GameType Icon Declaration public string Icon { get; } Property Value String Name Declaration public string Name { get; } Property Value String Options Declaration public string Options { get; } Property Value String ProcessNames Declaration public IReadOnlyCollection<string> ProcessNames { get; } Property Value IReadOnlyCollection < String > ProductNames Declaration public IReadOnlyCollection<string> ProductNames { get; } Property Value IReadOnlyCollection < String > RequireAdminPrivilege Declaration public bool RequireAdminPrivilege { get; } Property Value Boolean Methods DeleteAsync(RequestOptions) Declaration public Task DeleteAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task ModifyAsync(Action<GameProperties>, RequestOptions) Declaration public Task<RestGame> ModifyAsync(Action<GameProperties> func, RequestOptions options = null) Parameters Action < GameProperties > func RequestOptions options Returns Task < RestGame >"
  },
  "api/Kook.Rest.RestGuild.html": {
    "href": "api/Kook.Rest.RestGuild.html",
    "title": "Class RestGuild | Kook.Net 文档",
    "keywords": "Class RestGuild Represents a REST-based guild/server. Inheritance Object RestEntity < UInt64 > RestGuild Inherited Members RestEntity<UInt64>.Id Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RestGuild : RestEntity<ulong>, IEntity<ulong>, IGuild, IEntity<ulong>, IUpdateable Properties AutoDeleteTime TODO: To be documented. Declaration public string AutoDeleteTime { get; } Property Value String Banner Declaration public string Banner { get; } Property Value String BoostLevel Gets the level of guild boosting in this guild. Declaration public BoostLevel BoostLevel { get; } Property Value BoostLevel The level of guild boosting in this guild. Implements IGuild.BoostLevel BoostSubscriptionCount Declaration public int BoostSubscriptionCount { get; } Property Value Int32 BufferBoostSubscriptionCount Declaration public int BufferBoostSubscriptionCount { get; } Property Value Int32 CategoryChannels Gets a collection of all stage channels in this guild. Declaration public IReadOnlyCollection<RestCategoryChannel> CategoryChannels { get; } Property Value IReadOnlyCollection < RestCategoryChannel > A read-only collection of stage channels found within this guild. Channels Gets a collection of all channels in this guild. Declaration public IReadOnlyCollection<RestGuildChannel> Channels { get; } Property Value IReadOnlyCollection < RestGuildChannel > CurrentUserDisplayName Gets the display name of the current user in this guild. Declaration public string CurrentUserDisplayName { get; } Property Value String CurrentUserNickname Gets the nickname of the current user in this guild. Declaration public string CurrentUserNickname { get; } Property Value String CurrentUserRoles Gets the roles of the current user in this guild. Declaration public IReadOnlyCollection<RestRole> CurrentUserRoles { get; } Property Value IReadOnlyCollection < RestRole > DefaultChannelId Declaration public ulong? DefaultChannelId { get; } Property Value Nullable < UInt64 > Emotes Gets a collection of all custom emotes for this guild. Declaration public IReadOnlyCollection<GuildEmote> Emotes { get; } Property Value IReadOnlyCollection < GuildEmote > A read-only collection of all custom emotes for this guild. Remarks warning This property may contain no elements if the current guild is fetched via GetGuildAsync(UInt64, RequestOptions) . In this case, you must use GetEmoteAsync(String, RequestOptions) to retrieve all emotes. See Also GetEmotesAsync(RequestOptions) EveryoneRole Gets the built-in role containing all users in this guild. Declaration public RestRole EveryoneRole { get; } Property Value RestRole Features Gets the features of this guild. Declaration public GuildFeatures Features { get; } Property Value GuildFeatures An array of objects representing the features of this guild. Implements IGuild.Features Remarks important What this property represents is not well investigated. Icon Declaration public string Icon { get; } Property Value String IsOpenEnabled Declaration public bool IsOpenEnabled { get; } Property Value Boolean MaxBitrate Declaration public int MaxBitrate { get; } Property Value Int32 MaxUploadLimit Declaration public ulong MaxUploadLimit { get; } Property Value UInt64 Name Declaration public string Name { get; } Property Value String NotifyType Gets the default notification type for this guild. Declaration public NotifyType NotifyType { get; } Property Value NotifyType A NotifyType representing the default notification type for this guild. Implements IGuild.NotifyType OpenId Declaration public uint? OpenId { get; } Property Value Nullable < UInt32 > OwnerId Declaration public ulong OwnerId { get; } Property Value UInt64 RecommendInfo Gets the recommendation information for this guild. Declaration public RecommendInfo RecommendInfo { get; } Property Value RecommendInfo A recommendation object that represents the recommendation information for this guild; null if the guild does not have a recommendation. Region Declaration public string Region { get; } Property Value String Roles Gets a collection of all roles in this guild. Declaration public IReadOnlyCollection<RestRole> Roles { get; } Property Value IReadOnlyCollection < RestRole > Status TODO: To be documented. Declaration public int Status { get; } Property Value Int32 TextChannels Gets a collection of all text channels in this guild. Declaration public IReadOnlyCollection<RestTextChannel> TextChannels { get; } Property Value IReadOnlyCollection < RestTextChannel > A read-only collection of message channels found within this guild. Topic Declaration public string Topic { get; } Property Value String VoiceChannels Gets a collection of all voice channels in this guild. Declaration public IReadOnlyCollection<RestVoiceChannel> VoiceChannels { get; } Property Value IReadOnlyCollection < RestVoiceChannel > A read-only collection of voice channels found within this guild. WelcomeChannelId Declaration public ulong? WelcomeChannelId { get; } Property Value Nullable < UInt64 > Methods AddBanAsync(IUser, Int32, String, RequestOptions) Declaration public Task AddBanAsync(IUser user, int pruneDays = 0, string reason = null, RequestOptions options = null) Parameters IUser user Int32 pruneDays String reason RequestOptions options Returns Task AddBanAsync(UInt64, Int32, String, RequestOptions) Declaration public Task AddBanAsync(ulong userId, int pruneDays = 0, string reason = null, RequestOptions options = null) Parameters UInt64 userId Int32 pruneDays String reason RequestOptions options Returns Task CreateCategoryChannelAsync(String, Action<CreateCategoryChannelProperties>, RequestOptions) Creates a category channel with the provided name. Declaration public Task<RestCategoryChannel> CreateCategoryChannelAsync(string name, Action<CreateCategoryChannelProperties> func = null, RequestOptions options = null) Parameters String name The name of the new channel. Action < CreateCategoryChannelProperties > func The delegate containing the properties to be applied to the channel upon its creation. RequestOptions options The options to be used when sending the request. Returns Task < RestCategoryChannel > The created category channel. CreateEmoteAsync(String, Image, RequestOptions) Declaration public Task<GuildEmote> CreateEmoteAsync(string name, Image image, RequestOptions options = null) Parameters String name Image image RequestOptions options Returns Task < GuildEmote > CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions) Declaration public Task<IInvite> CreateInviteAsync(InviteMaxAge maxAge = default(InviteMaxAge), InviteMaxUses maxUses = default(InviteMaxUses), RequestOptions options = null) Parameters InviteMaxAge maxAge InviteMaxUses maxUses RequestOptions options Returns Task < IInvite > CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, RequestOptions) Declaration public Task<IInvite> CreateInviteAsync(int? maxAge, int? maxUses = null, RequestOptions options = null) Parameters Nullable < Int32 > maxAge Nullable < Int32 > maxUses RequestOptions options Returns Task < IInvite > CreateRoleAsync(String, RequestOptions) Creates a new role with the provided name. Declaration public Task<RestRole> CreateRoleAsync(string name, RequestOptions options = null) Parameters String name The new name for the role. RequestOptions options The options to be used when sending the request. Returns Task < RestRole > A task that represents the asynchronous creation operation. The task result contains the newly created role. CreateTextChannelAsync(String, Action<CreateTextChannelProperties>, RequestOptions) Creates a new text channel in this guild. Declaration public Task<RestTextChannel> CreateTextChannelAsync(string name, Action<CreateTextChannelProperties> func = null, RequestOptions options = null) Parameters String name The new name for the text channel. Action < CreateTextChannelProperties > func The delegate containing the properties to be applied to the channel upon its creation. RequestOptions options The options to be used when sending the request. Returns Task < RestTextChannel > A task that represents the asynchronous creation operation. The task result contains the newly created text channel. CreateVoiceChannelAsync(String, Action<CreateVoiceChannelProperties>, RequestOptions) Creates a voice channel with the provided name. Declaration public Task<RestVoiceChannel> CreateVoiceChannelAsync(string name, Action<CreateVoiceChannelProperties> func = null, RequestOptions options = null) Parameters String name The name of the new channel. Action < CreateVoiceChannelProperties > func The delegate containing the properties to be applied to the channel upon its creation. RequestOptions options The options to be used when sending the request. Returns Task < RestVoiceChannel > The created voice channel. DeleteEmoteAsync(GuildEmote, RequestOptions) Declaration public Task DeleteEmoteAsync(GuildEmote emote, RequestOptions options = null) Parameters GuildEmote emote RequestOptions options Returns Task GetActiveBoostSubscriptionsAsync(RequestOptions) Declaration public Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> GetActiveBoostSubscriptionsAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task < ImmutableDictionary < IUser , IReadOnlyCollection < BoostSubscriptionMetadata >>> GetBadgeAsync(BadgeStyle, RequestOptions) Declaration public Task<Stream> GetBadgeAsync(BadgeStyle style = default(BadgeStyle), RequestOptions options = null) Parameters BadgeStyle style RequestOptions options Returns Task < Stream > GetBanAsync(IUser, RequestOptions) Gets a ban object for a banned user. Declaration public Task<RestBan> GetBanAsync(IUser user, RequestOptions options = null) Parameters IUser user The banned user. RequestOptions options The options to be used when sending the request. Returns Task < RestBan > A task that represents the asynchronous get operation. The task result contains a ban object, which contains the user information and the reason for the ban; null if the ban entry cannot be found. GetBanAsync(UInt64, RequestOptions) Gets a ban object for a banned user. Declaration public Task<RestBan> GetBanAsync(ulong userId, RequestOptions options = null) Parameters UInt64 userId The identifier for the banned user. RequestOptions options The options to be used when sending the request. Returns Task < RestBan > A task that represents the asynchronous get operation. The task result contains a ban object, which contains the user information and the reason for the ban; null if the ban entry cannot be found. GetBansAsync(RequestOptions) Gets a collection of all users banned in this guild. Declaration public Task<IReadOnlyCollection<RestBan>> GetBansAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < RestBan >> A task that represents the asynchronous get operation. The task result contains a read-only collection of ban objects that this guild currently possesses, with each object containing the user banned and reason behind the ban. GetBoostSubscriptionsAsync(RequestOptions) Declaration public Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> GetBoostSubscriptionsAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task < ImmutableDictionary < IUser , IReadOnlyCollection < BoostSubscriptionMetadata >>> GetCategoryChannelAsync(UInt64, RequestOptions) Gets a category channel in this guild. Declaration public Task<RestCategoryChannel> GetCategoryChannelAsync(ulong id, RequestOptions options = null) Parameters UInt64 id The identifier for the category channel. RequestOptions options The options to be used when sending the request. Returns Task < RestCategoryChannel > A task that represents the asynchronous get operation. The task result contains the category channel associated with the specified id ; null if none is found. GetCategoryChannelsAsync(RequestOptions) Gets a collection of all category channels in this guild. Declaration public Task<IReadOnlyCollection<RestCategoryChannel>> GetCategoryChannelsAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < RestCategoryChannel >> A task that represents the asynchronous get operation. The task result contains a read-only collection of category channels found within this guild. GetChannelAsync(UInt64, RequestOptions) Gets a channel in this guild. Declaration public Task<RestGuildChannel> GetChannelAsync(ulong id, RequestOptions options = null) Parameters UInt64 id The identifier for the channel. RequestOptions options The options to be used when sending the request. Returns Task < RestGuildChannel > A task that represents the asynchronous get operation. The task result contains the generic channel associated with the specified id ; null if none is found. GetChannelsAsync(RequestOptions) Gets a collection of all channels in this guild. Declaration public Task<IReadOnlyCollection<RestGuildChannel>> GetChannelsAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < RestGuildChannel >> A task that represents the asynchronous get operation. The task result contains a read-only collection of generic channels found within this guild. GetCurrentUserAsync(RequestOptions) Gets the current user for this guild. Declaration public Task<RestGuildUser> GetCurrentUserAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < RestGuildUser > A task that represents the asynchronous get operation. The task result contains the currently logged-in user within this guild. GetDefaultChannelAsync(RequestOptions) Gets the default text channel in this guild. Declaration public Task<RestTextChannel> GetDefaultChannelAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < RestTextChannel > A task that represents the asynchronous get operation. The task result contains the default text channel of this guild; null if none is found. GetEmoteAsync(String, RequestOptions) Declaration public Task<GuildEmote> GetEmoteAsync(string id, RequestOptions options = null) Parameters String id RequestOptions options Returns Task < GuildEmote > GetEmotesAsync(RequestOptions) Declaration public Task<IReadOnlyCollection<GuildEmote>> GetEmotesAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task < IReadOnlyCollection < GuildEmote >> GetInvitesAsync(RequestOptions) Declaration public Task<IReadOnlyCollection<IInvite>> GetInvitesAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task < IReadOnlyCollection < IInvite >> GetOwnerAsync(RequestOptions) Gets the owner of this guild. Declaration public Task<RestGuildUser> GetOwnerAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < RestGuildUser > A task that represents the asynchronous get operation. The task result contains the owner of this guild. GetRole(UInt32) Gets a role in this guild. Declaration public RestRole GetRole(uint id) Parameters UInt32 id The identifier for the role. Returns RestRole A role that is associated with the specified id ; null if none is found. GetTextChannelAsync(UInt64, RequestOptions) Gets a text channel in this guild. Declaration public Task<RestTextChannel> GetTextChannelAsync(ulong id, RequestOptions options = null) Parameters UInt64 id The identifier for the text channel. RequestOptions options The options to be used when sending the request. Returns Task < RestTextChannel > A task that represents the asynchronous get operation. The task result contains the text channel associated with the specified id ; null if none is found. GetTextChannelsAsync(RequestOptions) Gets a collection of all text channels in this guild. Declaration public Task<IReadOnlyCollection<RestTextChannel>> GetTextChannelsAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < RestTextChannel >> A task that represents the asynchronous get operation. The task result contains a read-only collection of message channels found within this guild. GetUserAsync(UInt64, RequestOptions) Gets a user from this guild. Declaration public Task<RestGuildUser> GetUserAsync(ulong id, RequestOptions options = null) Parameters UInt64 id The identifier of the user. RequestOptions options The options to be used when sending the request. Returns Task < RestGuildUser > A task that represents the asynchronous get operation. The task result contains the guild user associated with the specified id ; null if none is found. Remarks This method retrieves a user found within this guild. GetUsersAsync(RequestOptions) Gets a collection of all users in this guild. Declaration public IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> GetUsersAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < RestGuildUser >> A task that represents the asynchronous get operation. The task result contains a collection of guild users found within this guild. Remarks This method retrieves all users found within this guild. GetVoiceChannelAsync(UInt64, RequestOptions) Gets a voice channel in this guild. Declaration public Task<RestVoiceChannel> GetVoiceChannelAsync(ulong id, RequestOptions options = null) Parameters UInt64 id The identifier for the voice channel. RequestOptions options The options to be used when sending the request. Returns Task < RestVoiceChannel > A task that represents the asynchronous get operation. The task result contains the voice channel associated with the specified id ; null if none is found. GetVoiceChannelsAsync(RequestOptions) Gets a collection of all voice channels in this guild. Declaration public Task<IReadOnlyCollection<RestVoiceChannel>> GetVoiceChannelsAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < RestVoiceChannel >> A task that represents the asynchronous get operation. The task result contains a read-only collection of voice channels found within this guild. GetWelcomeChannelAsync(RequestOptions) Gets the welcome text channel in this guild. Declaration public Task<RestTextChannel> GetWelcomeChannelAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < RestTextChannel > A task that represents the asynchronous get operation. The task result contains the welcome text channel of this guild; null if none is found. LeaveAsync(RequestOptions) Declaration public Task LeaveAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task ModifyEmoteNameAsync(GuildEmote, String, RequestOptions) Declaration public Task ModifyEmoteNameAsync(GuildEmote emote, string name, RequestOptions options = null) Parameters GuildEmote emote String name RequestOptions options Returns Task MoveUsersAsync(IEnumerable<IGuildUser>, IVoiceChannel, RequestOptions) Declaration public Task MoveUsersAsync(IEnumerable<IGuildUser> users, IVoiceChannel targetChannel, RequestOptions options = null) Parameters IEnumerable < IGuildUser > users IVoiceChannel targetChannel RequestOptions options Returns Task RemoveBanAsync(IUser, RequestOptions) Declaration public Task RemoveBanAsync(IUser user, RequestOptions options = null) Parameters IUser user RequestOptions options Returns Task RemoveBanAsync(UInt64, RequestOptions) Declaration public Task RemoveBanAsync(ulong userId, RequestOptions options = null) Parameters UInt64 userId RequestOptions options Returns Task SearchUsersAsync(Action<SearchGuildMemberProperties>, Int32, RequestOptions) Gets a collection of users in this guild that the name or nickname contains the provided string at func . Declaration public IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> SearchUsersAsync(Action<SearchGuildMemberProperties> func, int limit = null, RequestOptions options = null) Parameters Action < SearchGuildMemberProperties > func A delegate containing the properties to search users with. Int32 limit The maximum number of users to be gotten. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < RestGuildUser >> A task that represents the asynchronous get operation. The task result contains a collection of guild users that matches the properties with the provided at func . Remarks The limit can not be higher than MaxUsersPerBatch . ToString() Returns the name of the guild. Declaration public override string ToString() Returns String The name of the guild. UpdateAsync(RequestOptions) Declaration public Task UpdateAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task Explicit Interface Implementations IGuild.EveryoneRole Gets the built-in role containing all users in this guild. Declaration IRole IGuild.EveryoneRole { get; } Returns IRole A role object that represents an @everyone role in this guild. Implements IGuild.EveryoneRole IGuild.RecommendInfo Gets the recommendation information for this guild. Declaration IRecommendInfo IGuild.RecommendInfo { get; } Returns IRecommendInfo A recommendation object that represents the recommendation information for this guild; null if the guild does not have a recommendation. Implements IGuild.RecommendInfo"
  },
  "api/Kook.Rest.RestGuildChannel.html": {
    "href": "api/Kook.Rest.RestGuildChannel.html",
    "title": "Class RestGuildChannel | Kook.Net 文档",
    "keywords": "Class RestGuildChannel Represents a REST-based guild channel in a guild. Inheritance Object RestEntity < UInt64 > RestChannel RestGuildChannel RestCategoryChannel RestTextChannel RestVoiceChannel Inherited Members RestEntity<UInt64>.Id Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RestGuildChannel : RestChannel, IEntity<ulong>, IUpdateable, IGuildChannel, IChannel, IEntity<ulong>, IDeletable Properties CreatorId Declaration public ulong CreatorId { get; } Property Value UInt64 GuildId Declaration public ulong GuildId { get; } Property Value UInt64 Name Declaration public string Name { get; } Property Value String Position Declaration public int? Position { get; } Property Value Nullable < Int32 > RolePermissionOverwrites Declaration public virtual IReadOnlyCollection<RolePermissionOverwrite> RolePermissionOverwrites { get; } Property Value IReadOnlyCollection < RolePermissionOverwrite > Type Gets the type of this channel. Declaration public ChannelType Type { get; } Property Value ChannelType A ChannelType representing the type of this channel. Implements IGuildChannel.Type UserPermissionOverwrites Declaration public virtual IReadOnlyCollection<UserPermissionOverwrite> UserPermissionOverwrites { get; } Property Value IReadOnlyCollection < UserPermissionOverwrite > Methods AddPermissionOverwriteAsync(IGuildUser, RequestOptions) Adds the permission overwrite for the given user. Declaration public Task AddPermissionOverwriteAsync(IGuildUser user, RequestOptions options = null) Parameters IGuildUser user The user to add the overwrite to. RequestOptions options The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. AddPermissionOverwriteAsync(IRole, RequestOptions) Adds the permission overwrite for the given role. Declaration public Task AddPermissionOverwriteAsync(IRole role, RequestOptions options = null) Parameters IRole role The role to add the overwrite to. RequestOptions options The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. DeleteAsync(RequestOptions) Declaration public Task DeleteAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task GetCreatorAsync(RequestOptions) Gets the creator of this channel. Declaration public Task<RestUser> GetCreatorAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < RestUser > A task that represents the asynchronous get operation. The task result contains the creator of this channel. Remarks This method will try to get the user as a global user. To get the creator as a guild member, you will need to get the user through .\"/> GetPermissionOverwrite(IRole) Gets the permission overwrite for a specific role. Declaration public OverwritePermissions? GetPermissionOverwrite(IRole role) Parameters IRole role The role to get the overwrite from. Returns Nullable < OverwritePermissions > An overwrite object for the targeted role; null if none is set. GetPermissionOverwrite(IUser) Gets the permission overwrite for a specific user. Declaration public OverwritePermissions? GetPermissionOverwrite(IUser user) Parameters IUser user The user to get the overwrite from. Returns Nullable < OverwritePermissions > An overwrite object for the targeted user; null if none is set. ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) Declaration public Task ModifyAsync(Action<ModifyGuildChannelProperties> func, RequestOptions options = null) Parameters Action < ModifyGuildChannelProperties > func RequestOptions options Returns Task ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) Updates the permission overwrite for the given user, if one exists. Declaration public Task ModifyPermissionOverwriteAsync(IGuildUser user, Func<OverwritePermissions, OverwritePermissions> func, RequestOptions options = null) Parameters IGuildUser user The user to modify the overwrite for. Func < OverwritePermissions , OverwritePermissions > func A delegate containing the values to modify the permission overwrite with. RequestOptions options The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) Updates the permission overwrite for the given role, if one exists. Declaration public Task ModifyPermissionOverwriteAsync(IRole role, Func<OverwritePermissions, OverwritePermissions> func, RequestOptions options = null) Parameters IRole role The role to remove the overwrite for. Func < OverwritePermissions , OverwritePermissions > func A delegate containing the values to modify the permission overwrite with. RequestOptions options The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) Removes the permission overwrite for the given user, if one exists. Declaration public Task RemovePermissionOverwriteAsync(IGuildUser user, RequestOptions options = null) Parameters IGuildUser user The user to remove the overwrite from. RequestOptions options The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. RemovePermissionOverwriteAsync(IRole, RequestOptions) Removes the permission overwrite for the given role, if one exists. Declaration public Task RemovePermissionOverwriteAsync(IRole role, RequestOptions options = null) Parameters IRole role The role to remove the overwrite from. RequestOptions options The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. ToString() Gets the name of this channel. Declaration public override string ToString() Returns String A string that is the name of this channel. UpdateAsync(RequestOptions) Declaration public override Task UpdateAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task Overrides RestChannel.UpdateAsync(RequestOptions) Explicit Interface Implementations IGuildChannel.Guild Gets the guild associated with this channel. Declaration IGuild IGuildChannel.Guild { get; } Returns IGuild A guild object that this channel belongs to. Implements IGuildChannel.Guild"
  },
  "api/Kook.Rest.RestGuildExperimentalExtensions.html": {
    "href": "api/Kook.Rest.RestGuildExperimentalExtensions.html",
    "title": "Class RestGuildExperimentalExtensions | Kook.Net 文档",
    "keywords": "Class RestGuildExperimentalExtensions Provides extension methods of experimental functionalities for s. Inheritance Object RestGuildExperimentalExtensions Namespace : Kook.Rest Assembly : Kook.Net.Experimental.dll Syntax public static class RestGuildExperimentalExtensions : object Methods DeleteAsync(RestGuild, RequestOptions) Deletes this guild. Declaration public static Task DeleteAsync(this RestGuild guild, RequestOptions options = null) Parameters RestGuild guild The guild to delete. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous deletion operation. Remarks warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future. ModifyAsync(RestGuild, Action<GuildProperties>, RequestOptions) Modifies this guild. Declaration public static Task ModifyAsync(this RestGuild guild, Action<GuildProperties> func, RequestOptions options = null) Parameters RestGuild guild The guild to modify. Action < GuildProperties > func The delegate containing the properties to modify the guild with. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation."
  },
  "api/Kook.Rest.RestGuildUser.html": {
    "href": "api/Kook.Rest.RestGuildUser.html",
    "title": "Class RestGuildUser | Kook.Net 文档",
    "keywords": "Class RestGuildUser Represents a REST-based guild user. Inheritance Object RestEntity < UInt64 > RestUser RestGuildUser Inherited Members RestUser.Username RestUser.IdentifyNumberValue RestUser.IsBot RestUser.IsBanned RestUser.HasBuff RestUser.HasAnnualBuff RestUser.Avatar RestUser.BuffAvatar RestUser.Banner RestUser.IsDenoiseEnabled RestUser.UserTag RestUser.Nameplates RestUser.IsSystemUser RestUser.IdentifyNumber RestUser.KMarkdownMention RestUser.IsOnline RestUser.ActiveClient RestUser.CreateDMChannelAsync(RequestOptions) RestUser.GetIntimacyAsync(RequestOptions) RestUser.UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) RestUser.BlockAsync(RequestOptions) RestUser.UnblockAsync(RequestOptions) RestUser.RemoveFriendAsync(RequestOptions) RestUser.ToString() RestEntity<UInt64>.Id Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RestGuildUser : RestUser, IEntity<ulong>, IUpdateable, IGuildUser, IUser, IEntity<ulong>, IMentionable, IPresence, IVoiceState Properties ActiveAt Declaration public DateTimeOffset ActiveAt { get; } Property Value DateTimeOffset Color Gets the color the user's displayed name is being displayed in. Declaration public Color Color { get; } Property Value Color A Color struct representing the color the user's display name is being displayed in. Implements IGuildUser.Color Remarks warning At present, the color of a role may be a solid color or a gradient. See ColorType , which is guaranteed due to the fact that the guild's user list API endpoint returns the color type and the gradient color information if exists. However, the value of this property is fetched from the guild's user list API endpoint, which does not return the color type and the gradient color information. Hence, the value of this property may be incorrect if the color of a role is a gradient. DisplayName Declaration public string DisplayName { get; } Property Value String GuildId Declaration public ulong GuildId { get; } Property Value UInt64 GuildPermissions Gets the guild-level permissions for this user. Declaration public GuildPermissions GuildPermissions { get; } Property Value GuildPermissions A GuildPermissions structure for this user, representing what permissions this user has in the guild. Implements IGuildUser.GuildPermissions IsMobileVerified Declaration public bool IsMobileVerified { get; } Property Value Boolean IsOwner Declaration public bool? IsOwner { get; } Property Value Nullable < Boolean > JoinedAt Declaration public DateTimeOffset JoinedAt { get; } Property Value DateTimeOffset Nickname Declaration public string Nickname { get; } Property Value String PlainTextMention Declaration public string PlainTextMention { get; } Property Value String RoleIds Declaration public IReadOnlyCollection<uint> RoleIds { get; } Property Value IReadOnlyCollection < UInt32 > Methods AddRoleAsync(IRole, RequestOptions) Declaration public Task AddRoleAsync(IRole role, RequestOptions options = null) Parameters IRole role RequestOptions options Returns Task AddRoleAsync(UInt32, RequestOptions) Declaration public Task AddRoleAsync(uint roleId, RequestOptions options = null) Parameters UInt32 roleId RequestOptions options Returns Task AddRolesAsync(IEnumerable<IRole>, RequestOptions) Declaration public Task AddRolesAsync(IEnumerable<IRole> roles, RequestOptions options = null) Parameters IEnumerable < IRole > roles RequestOptions options Returns Task AddRolesAsync(IEnumerable<UInt32>, RequestOptions) Declaration public Task AddRolesAsync(IEnumerable<uint> roleIds, RequestOptions options = null) Parameters IEnumerable < UInt32 > roleIds RequestOptions options Returns Task DeafenAsync(RequestOptions) Declaration public Task DeafenAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task GetBoostSubscriptionsAsync(RequestOptions) Declaration public Task<IReadOnlyCollection<BoostSubscriptionMetadata>> GetBoostSubscriptionsAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task < IReadOnlyCollection < BoostSubscriptionMetadata >> GetConnectedVoiceChannelsAsync(RequestOptions) Declaration public Task<IReadOnlyCollection<IVoiceChannel>> GetConnectedVoiceChannelsAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task < IReadOnlyCollection < IVoiceChannel >> GetPermissions(IGuildChannel) Gets the level permissions granted to this user to a given channel. Declaration public ChannelPermissions GetPermissions(IGuildChannel channel) Parameters IGuildChannel channel The channel to get the permission from. Returns ChannelPermissions A ChannelPermissions structure representing the permissions that a user has in the specified channel. Implements IGuildUser.GetPermissions(IGuildChannel) KickAsync(RequestOptions) Declaration public Task KickAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task ModifyNicknameAsync(String, RequestOptions) Declaration public Task ModifyNicknameAsync(string name, RequestOptions options = null) Parameters String name RequestOptions options Returns Task MuteAsync(RequestOptions) Declaration public Task MuteAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task RemoveRoleAsync(IRole, RequestOptions) Declaration public Task RemoveRoleAsync(IRole role, RequestOptions options = null) Parameters IRole role RequestOptions options Returns Task RemoveRoleAsync(UInt32, RequestOptions) Declaration public Task RemoveRoleAsync(uint roleId, RequestOptions options = null) Parameters UInt32 roleId RequestOptions options Returns Task RemoveRolesAsync(IEnumerable<IRole>, RequestOptions) Declaration public Task RemoveRolesAsync(IEnumerable<IRole> roles, RequestOptions options = null) Parameters IEnumerable < IRole > roles RequestOptions options Returns Task RemoveRolesAsync(IEnumerable<UInt32>, RequestOptions) Declaration public Task RemoveRolesAsync(IEnumerable<uint> roleIds, RequestOptions options = null) Parameters IEnumerable < UInt32 > roleIds RequestOptions options Returns Task RequestFriendAsync(RequestOptions) Declaration public override Task RequestFriendAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task Overrides RestUser.RequestFriendAsync(RequestOptions) UndeafenAsync(RequestOptions) Declaration public Task UndeafenAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task UnmuteAsync(RequestOptions) Declaration public Task UnmuteAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task UpdateAsync(RequestOptions) Declaration public override Task UpdateAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task Overrides RestUser.UpdateAsync(RequestOptions) Explicit Interface Implementations IGuildUser.Guild Gets the guild for this user. Declaration IGuild IGuildUser.Guild { get; } Returns IGuild A guild object that this user belongs to. Implements IGuildUser.Guild IVoiceState.VoiceChannel Gets the voice channel this user is currently in. Declaration IVoiceChannel IVoiceState.VoiceChannel { get; } Returns IVoiceChannel A generic voice channel object representing the voice channel that the user is currently in; null if none. Implements IVoiceState.VoiceChannel"
  },
  "api/Kook.Rest.RestIntimacy.html": {
    "href": "api/Kook.Rest.RestIntimacy.html",
    "title": "Class RestIntimacy | Kook.Net 文档",
    "keywords": "Class RestIntimacy Gets the intimacy information associated with the specified user. Inheritance Object RestEntity < UInt64 > RestIntimacy Inherited Members RestEntity<UInt64>.Id Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RestIntimacy : RestEntity<ulong>, IEntity<ulong>, IIntimacy, IEntity<ulong> Properties Images Declaration public IReadOnlyCollection<IntimacyImage> Images { get; } Property Value IReadOnlyCollection < IntimacyImage > LastModifyAt Declaration public DateTimeOffset LastModifyAt { get; } Property Value DateTimeOffset LastReadAt Declaration public DateTimeOffset LastReadAt { get; } Property Value DateTimeOffset Score Declaration public int Score { get; } Property Value Int32 SocialInfo Declaration public string SocialInfo { get; } Property Value String User Gets the user associated with this intimacy. Declaration public IUser User { get; } Property Value IUser An IUser representing the user associated with this intimacy. Implements IIntimacy.User Methods UpdateAsync(Action<IntimacyProperties>, RequestOptions) Declaration public Task UpdateAsync(Action<IntimacyProperties> func, RequestOptions options = null) Parameters Action < IntimacyProperties > func RequestOptions options Returns Task"
  },
  "api/Kook.Rest.RestInvite.html": {
    "href": "api/Kook.Rest.RestInvite.html",
    "title": "Class RestInvite | Kook.Net 文档",
    "keywords": "Class RestInvite Represents a REST-based invite. Inheritance Object RestEntity < UInt32 > RestInvite Inherited Members RestEntity<UInt32>.Id Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RestInvite : RestEntity<uint>, IEntity<uint>, IInvite, IEntity<uint>, IDeletable, IUpdateable Properties ChannelId Declaration public ulong? ChannelId { get; } Property Value Nullable < UInt64 > ChannelName Declaration public string ChannelName { get; } Property Value String ChannelType Gets the type of the channel this invite is linked to. Declaration public ChannelType ChannelType { get; } Property Value ChannelType Implements IInvite.ChannelType Code Declaration public string Code { get; } Property Value String ExpiresAt Declaration public DateTimeOffset? ExpiresAt { get; } Property Value Nullable < DateTimeOffset > GuildId Declaration public ulong? GuildId { get; } Property Value Nullable < UInt64 > GuildName Declaration public string GuildName { get; } Property Value String Inviter Gets the user that created this invite. Declaration public IUser Inviter { get; } Property Value IUser A user that created this invite. Implements IInvite.Inviter MaxAge Declaration public TimeSpan? MaxAge { get; } Property Value Nullable < TimeSpan > MaxUses Declaration public int? MaxUses { get; } Property Value Nullable < Int32 > RemainingUses Declaration public int? RemainingUses { get; } Property Value Nullable < Int32 > Url Declaration public string Url { get; } Property Value String Uses Declaration public int? Uses { get; } Property Value Nullable < Int32 > Methods DeleteAsync(RequestOptions) Declaration public Task DeleteAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task ToString() Gets the URL of the invite. Declaration public override string ToString() Returns String A string that resolves to the Url of the invite. UpdateAsync(RequestOptions) Declaration public Task UpdateAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task Explicit Interface Implementations IInvite.Channel Gets the channel this invite is linked to. Declaration IChannel IInvite.Channel { get; } Returns IChannel A generic channel that the invite points to. Implements IInvite.Channel IInvite.Guild Gets the guild this invite is linked to. Declaration IGuild IInvite.Guild { get; } Returns IGuild A guild object representing the guild that the invite points to. Implements IInvite.Guild"
  },
  "api/Kook.Rest.RestMessage.html": {
    "href": "api/Kook.Rest.RestMessage.html",
    "title": "Class RestMessage | Kook.Net 文档",
    "keywords": "Class RestMessage Represents a REST-based message. Inheritance Object RestEntity < Guid > RestMessage RestSystemMessage RestUserMessage Inherited Members RestEntity<Guid>.Id Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public abstract class RestMessage : RestEntity<Guid>, IEntity<Guid>, IMessage, IEntity<Guid>, IDeletable, IUpdateable Properties Attachments Gets the attachment included in this message. Declaration public virtual IReadOnlyCollection<Attachment> Attachments { get; } Property Value IReadOnlyCollection < Attachment > The attachment included in this message; Author Gets the Author of the message. Declaration public IUser Author { get; } Property Value IUser Cards Gets a collection of the ICard 's on the message. Declaration public virtual IReadOnlyCollection<ICard> Cards { get; } Property Value IReadOnlyCollection < ICard > Channel Gets the source channel of the message. Declaration public IMessageChannel Channel { get; } Property Value IMessageChannel Implements IMessage.Channel CleanContent Declaration public string CleanContent { get; } Property Value String Content Declaration public string Content { get; protected set; } Property Value String EditedTimestamp Declaration public DateTimeOffset? EditedTimestamp { get; } Property Value Nullable < DateTimeOffset > Embeds Gets a collection of the IEmbed 's on the message. Declaration public virtual IReadOnlyCollection<IEmbed> Embeds { get; } Property Value IReadOnlyCollection < IEmbed > IsPinned Declaration public virtual bool? IsPinned { get; } Property Value Nullable < Boolean > MentionedEveryone Declaration public virtual bool? MentionedEveryone { get; } Property Value Nullable < Boolean > MentionedHere Declaration public virtual bool? MentionedHere { get; } Property Value Nullable < Boolean > MentionedRoleIds Declaration public virtual IReadOnlyCollection<uint> MentionedRoleIds { get; } Property Value IReadOnlyCollection < UInt32 > MentionedUsers Gets a collection of the mentioned users in the message. Declaration public IReadOnlyCollection<RestUser> MentionedUsers { get; } Property Value IReadOnlyCollection < RestUser > Pokes Gets a collection of the RestPokeAction 's on the message. Declaration public virtual IReadOnlyCollection<RestPokeAction> Pokes { get; } Property Value IReadOnlyCollection < RestPokeAction > Reactions Declaration public IReadOnlyDictionary<IEmote, ReactionMetadata> Reactions { get; } Property Value IReadOnlyDictionary < IEmote , ReactionMetadata > Source Gets the source type of this message. Declaration public MessageSource Source { get; } Property Value MessageSource Implements IMessage.Source Tags Declaration public virtual IReadOnlyCollection<ITag> Tags { get; } Property Value IReadOnlyCollection < ITag > Timestamp Declaration public DateTimeOffset Timestamp { get; } Property Value DateTimeOffset Type Gets the type of this message. Declaration public MessageType Type { get; } Property Value MessageType Implements IMessage.Type Methods AddReactionAsync(IEmote, RequestOptions) Declaration public Task AddReactionAsync(IEmote emote, RequestOptions options = null) Parameters IEmote emote RequestOptions options Returns Task DeleteAsync(RequestOptions) Declaration public Task DeleteAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task GetReactionUsersAsync(IEmote, RequestOptions) Declaration public Task<IReadOnlyCollection<IUser>> GetReactionUsersAsync(IEmote emote, RequestOptions options = null) Parameters IEmote emote RequestOptions options Returns Task < IReadOnlyCollection < IUser >> RemoveReactionAsync(IEmote, IUser, RequestOptions) Declaration public Task RemoveReactionAsync(IEmote emote, IUser user, RequestOptions options = null) Parameters IEmote emote IUser user RequestOptions options Returns Task RemoveReactionAsync(IEmote, UInt64, RequestOptions) Declaration public Task RemoveReactionAsync(IEmote emote, ulong userId, RequestOptions options = null) Parameters IEmote emote UInt64 userId RequestOptions options Returns Task ToString() Gets the Content of the message. Declaration public override string ToString() Returns String A string that is the Content of the message. UpdateAsync(RequestOptions) Declaration public Task UpdateAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task Explicit Interface Implementations IMessage.Author Declaration IUser IMessage.Author { get; } Returns IUser Implements IMessage.Author"
  },
  "api/Kook.Rest.RestPokeAction.html": {
    "href": "api/Kook.Rest.RestPokeAction.html",
    "title": "Class RestPokeAction | Kook.Net 文档",
    "keywords": "Class RestPokeAction Represents a single REST-based poke action. Inheritance Object RestPokeAction Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RestPokeAction : object, IPokeAction Properties Operator Gets the user who performed the action. Declaration public IUser Operator { get; } Property Value IUser Poke Gets the poke this action is associated with. Declaration public Poke Poke { get; } Property Value Poke Targets Gets the users who were poked by the action. Declaration public IReadOnlyCollection<IUser> Targets { get; } Property Value IReadOnlyCollection < IUser > Explicit Interface Implementations IPokeAction.Operator Gets the user who performed the action. Declaration IUser IPokeAction.Operator { get; } Returns IUser Implements IPokeAction.Operator IPokeAction.Poke Gets the poke this action is associated with. Declaration IPoke IPokeAction.Poke { get; } Returns IPoke Implements IPokeAction.Poke"
  },
  "api/Kook.Rest.RestPresence.html": {
    "href": "api/Kook.Rest.RestPresence.html",
    "title": "Class RestPresence | Kook.Net 文档",
    "keywords": "Class RestPresence Represents the REST user's presence status. This may include their online status and their activity. Inheritance Object RestPresence Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RestPresence : object, IPresence Properties ActiveClient Declaration public ClientType? ActiveClient { get; } Property Value Nullable < ClientType > IsOnline Declaration public bool? IsOnline { get; } Property Value Nullable < Boolean >"
  },
  "api/Kook.Rest.RestReaction.html": {
    "href": "api/Kook.Rest.RestReaction.html",
    "title": "Class RestReaction | Kook.Net 文档",
    "keywords": "Class RestReaction Represents a single REST-based reaction. Inheritance Object RestReaction Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RestReaction : object, IReaction Properties Count Gets the number of reactions added. Declaration public int Count { get; } Property Value Int32 Emote The IEmote used in the reaction. Declaration public IEmote Emote { get; } Property Value IEmote Implements IReaction.Emote Me Gets whether the reactions is added by the user. Declaration public bool Me { get; } Property Value Boolean"
  },
  "api/Kook.Rest.RestRole.html": {
    "href": "api/Kook.Rest.RestRole.html",
    "title": "Class RestRole | Kook.Net 文档",
    "keywords": "Class RestRole Represents a REST-based role. Inheritance Object RestEntity < UInt32 > RestRole Inherited Members RestEntity<UInt32>.Id Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RestRole : RestEntity<uint>, IEntity<uint>, IRole, IEntity<uint>, IDeletable, IMentionable, IComparable<IRole> Properties Color Gets the color given to users of this role. Declaration public Color Color { get; } Property Value Color A Color struct representing the color of this role. Implements IRole.Color ColorType Gets the type of the color given to users of this role. Declaration public ColorType ColorType { get; } Property Value ColorType A ColorType struct representing the color type of this role. Implements IRole.ColorType GradientColor Declaration public GradientColor? GradientColor { get; } Property Value Nullable < GradientColor > IsEveryone Returns a value that determines if the role is an @everyone role. Declaration public bool IsEveryone { get; } Property Value Boolean true if the role is @everyone; otherwise false . IsHoisted Declaration public bool IsHoisted { get; } Property Value Boolean IsMentionable Declaration public bool IsMentionable { get; } Property Value Boolean KMarkdownMention Declaration public string KMarkdownMention { get; } Property Value String Name Declaration public string Name { get; } Property Value String Permissions Gets the permissions granted to members of this role. Declaration public GuildPermissions Permissions { get; } Property Value GuildPermissions A GuildPermissions struct that this role possesses. Implements IRole.Permissions PlainTextMention Declaration public string PlainTextMention { get; } Property Value String Position Declaration public int Position { get; } Property Value Int32 Type Declaration public RoleType? Type { get; } Property Value Nullable < RoleType > Methods CompareTo(IRole) Declaration public int CompareTo(IRole role) Parameters IRole role Returns Int32 DeleteAsync(RequestOptions) Declaration public Task DeleteAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task GetUsersAsync(RequestOptions) Gets a collection of users with this role. Declaration public IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> GetUsersAsync(RequestOptions options = null) Parameters RequestOptions options Returns IAsyncEnumerable < IReadOnlyCollection < IGuildUser >> Paged collection of users with this role. ModifyAsync(Action<RoleProperties>, RequestOptions) Declaration public Task ModifyAsync(Action<RoleProperties> func, RequestOptions options = null) Parameters Action < RoleProperties > func RequestOptions options Returns Task ToString() Gets the name of the role. Declaration public override string ToString() Returns String A string that is the name of the role. Explicit Interface Implementations IRole.Guild Gets the guild that owns this role. Declaration IGuild IRole.Guild { get; } Returns IGuild A guild representing the parent guild of this role. Implements IRole.Guild"
  },
  "api/Kook.Rest.RestSelfUser.html": {
    "href": "api/Kook.Rest.RestSelfUser.html",
    "title": "Class RestSelfUser | Kook.Net 文档",
    "keywords": "Class RestSelfUser Represents the logged-in REST-based user. Inheritance Object RestEntity < UInt64 > RestUser RestSelfUser Inherited Members RestUser.Username RestUser.IdentifyNumberValue RestUser.IsBot RestUser.IsBanned RestUser.HasBuff RestUser.HasAnnualBuff RestUser.Avatar RestUser.BuffAvatar RestUser.Banner RestUser.IsDenoiseEnabled RestUser.UserTag RestUser.Nameplates RestUser.IsSystemUser RestUser.IdentifyNumber RestUser.KMarkdownMention RestUser.PlainTextMention RestUser.IsOnline RestUser.ActiveClient RestUser.CreateDMChannelAsync(RequestOptions) RestUser.GetIntimacyAsync(RequestOptions) RestUser.UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) RestUser.BlockAsync(RequestOptions) RestUser.UnblockAsync(RequestOptions) RestUser.RequestFriendAsync(RequestOptions) RestUser.RemoveFriendAsync(RequestOptions) RestUser.ToString() RestEntity<UInt64>.Id Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RestSelfUser : RestUser, IEntity<ulong>, IUpdateable, ISelfUser, IUser, IEntity<ulong>, IMentionable, IPresence Properties InvitedCount Declaration public int InvitedCount { get; } Property Value Int32 IsMobileVerified Declaration public bool IsMobileVerified { get; } Property Value Boolean Mobile Declaration public string Mobile { get; } Property Value String MobilePrefix Declaration public string MobilePrefix { get; } Property Value String Methods StartPlayingAsync(IGame, RequestOptions) Declaration public Task StartPlayingAsync(IGame game, RequestOptions options = null) Parameters IGame game RequestOptions options Returns Task StartPlayingAsync(Music, RequestOptions) Declaration public Task StartPlayingAsync(Music music, RequestOptions options = null) Parameters Music music RequestOptions options Returns Task StopPlayingAsync(ActivityType, RequestOptions) Declaration public Task StopPlayingAsync(ActivityType type, RequestOptions options = null) Parameters ActivityType type RequestOptions options Returns Task UpdateAsync(RequestOptions) Declaration public override Task UpdateAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task Overrides RestUser.UpdateAsync(RequestOptions)"
  },
  "api/Kook.Rest.RestSystemMessage.html": {
    "href": "api/Kook.Rest.RestSystemMessage.html",
    "title": "Class RestSystemMessage | Kook.Net 文档",
    "keywords": "Class RestSystemMessage Represents a REST-based system message. Inheritance Object RestEntity < Guid > RestMessage RestSystemMessage Inherited Members RestMessage.Type RestMessage.Channel RestMessage.Author RestMessage.Source RestMessage.Content RestMessage.CleanContent RestMessage.Attachments RestMessage.Timestamp RestMessage.EditedTimestamp RestMessage.MentionedEveryone RestMessage.MentionedHere RestMessage.Cards RestMessage.Embeds RestMessage.Pokes RestMessage.MentionedRoleIds RestMessage.MentionedUsers RestMessage.Tags RestMessage.IsPinned RestMessage.ToString() RestMessage.Reactions RestMessage.DeleteAsync(RequestOptions) RestMessage.UpdateAsync(RequestOptions) RestMessage.AddReactionAsync(IEmote, RequestOptions) RestMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) RestMessage.RemoveReactionAsync(IEmote, UInt64, RequestOptions) RestMessage.GetReactionUsersAsync(IEmote, RequestOptions) RestMessage.IMessage.Author RestEntity<Guid>.Id Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RestSystemMessage : RestMessage, IEntity<Guid>, IUpdateable, ISystemMessage, IMessage, IEntity<Guid>, IDeletable Properties SystemMessageType Gets the type of the system message. Declaration public SystemMessageType SystemMessageType { get; } Property Value SystemMessageType Implements ISystemMessage.SystemMessageType Remarks warning Because the data from Kook does not describe the type of the message in detail, this property is not implemented yet. Accessing this property will always result in an exception at present."
  },
  "api/Kook.Rest.RestTextChannel.html": {
    "href": "api/Kook.Rest.RestTextChannel.html",
    "title": "Class RestTextChannel | Kook.Net 文档",
    "keywords": "Class RestTextChannel Represents a REST-based channel in a guild that can send and receive messages. Inheritance Object RestEntity < UInt64 > RestChannel RestGuildChannel RestTextChannel Inherited Members RestGuildChannel.RolePermissionOverwrites RestGuildChannel.UserPermissionOverwrites RestGuildChannel.Type RestGuildChannel.Name RestGuildChannel.Position RestGuildChannel.GuildId RestGuildChannel.CreatorId RestGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) RestGuildChannel.GetCreatorAsync(RequestOptions) RestGuildChannel.DeleteAsync(RequestOptions) RestGuildChannel.UpdateAsync(RequestOptions) RestGuildChannel.GetPermissionOverwrite(IUser) RestGuildChannel.GetPermissionOverwrite(IRole) RestGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) RestGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) RestGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) RestGuildChannel.ToString() RestGuildChannel.IGuildChannel.Guild RestEntity<UInt64>.Id Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RestTextChannel : RestGuildChannel, IEntity<ulong>, IUpdateable, IRestMessageChannel, ITextChannel, INestedChannel, IGuildChannel, IDeletable, IMentionable, IMessageChannel, IChannel, IEntity<ulong> Properties CategoryId Declaration public ulong? CategoryId { get; } Property Value Nullable < UInt64 > IsPermissionSynced Declaration public bool? IsPermissionSynced { get; } Property Value Nullable < Boolean > KMarkdownMention Declaration public string KMarkdownMention { get; } Property Value String PlainTextMention Declaration public string PlainTextMention { get; } Property Value String SlowModeInterval Declaration public virtual int SlowModeInterval { get; } Property Value Int32 Topic Declaration public string Topic { get; } Property Value String Methods CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions) Declaration public Task<IInvite> CreateInviteAsync(InviteMaxAge maxAge = default(InviteMaxAge), InviteMaxUses maxUses = default(InviteMaxUses), RequestOptions options = null) Parameters InviteMaxAge maxAge InviteMaxUses maxUses RequestOptions options Returns Task < IInvite > CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, RequestOptions) Declaration public Task<IInvite> CreateInviteAsync(int? maxAge, int? maxUses = null, RequestOptions options = null) Parameters Nullable < Int32 > maxAge Nullable < Int32 > maxUses RequestOptions options Returns Task < IInvite > DeleteMessageAsync(Guid, RequestOptions) Declaration public Task DeleteMessageAsync(Guid messageId, RequestOptions options = null) Parameters Guid messageId RequestOptions options Returns Task DeleteMessageAsync(IMessage, RequestOptions) Declaration public Task DeleteMessageAsync(IMessage message, RequestOptions options = null) Parameters IMessage message RequestOptions options Returns Task GetCategoryAsync(RequestOptions) Gets the parent (category) channel of this channel. Declaration public Task<ICategoryChannel> GetCategoryAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < ICategoryChannel > A task that represents the asynchronous get operation. The task result contains the category channel representing the parent of this channel; null if none is set. GetInvitesAsync(RequestOptions) Declaration public Task<IReadOnlyCollection<IInvite>> GetInvitesAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task < IReadOnlyCollection < IInvite >> GetMessageAsync(Guid, RequestOptions) Gets a message from this message channel. Declaration public Task<RestMessage> GetMessageAsync(Guid id, RequestOptions options = null) Parameters Guid id The identifier of the message. RequestOptions options The options to be used when sending the request. Returns Task < RestMessage > A task that represents an asynchronous get operation for retrieving the message. The task result contains the retrieved message; null if no message is found with the specified identifier. Implements IRestMessageChannel.GetMessageAsync(Guid, RequestOptions) Remarks This method follows the same behavior as described in . Please visit its documentation for more details on this method. GetMessagesAsync(Guid, Direction, Int32, RequestOptions) Gets a collection of messages in this channel. Declaration public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = null, RequestOptions options = null) Parameters Guid referenceMessageId The ID of the starting message to get the messages from. Direction dir The direction of the messages to be gotten from. Int32 limit The numbers of message to be gotten from. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < RestMessage >> Paged collection of messages. Implements IRestMessageChannel.GetMessagesAsync(Guid, Direction, Int32, RequestOptions) Remarks This method follows the same behavior as described in . Please visit its documentation for more details on this method. GetMessagesAsync(IMessage, Direction, Int32, RequestOptions) Gets a collection of messages in this channel. Declaration public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = null, RequestOptions options = null) Parameters IMessage referenceMessage The starting message to get the messages from. Direction dir The direction of the messages to be gotten from. Int32 limit The numbers of message to be gotten from. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < RestMessage >> Paged collection of messages. Implements IRestMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, RequestOptions) Remarks This method follows the same behavior as described in . Please visit its documentation for more details on this method. GetMessagesAsync(Int32, RequestOptions) Gets the last N messages from this message channel. Declaration public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(int limit = null, RequestOptions options = null) Parameters Int32 limit The numbers of message to be gotten from. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < RestMessage >> Paged collection of messages. Implements IRestMessageChannel.GetMessagesAsync(Int32, RequestOptions) Remarks This method follows the same behavior as described in . Please visit its documentation for more details on this method. GetPinnedMessagesAsync(RequestOptions) Gets a collection of pinned messages in this channel. Declaration public Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < RestMessage >> A task that represents the asynchronous get operation for retrieving pinned messages in this channel. The task result contains a collection of messages found in the pinned messages. GetUserAsync(UInt64, RequestOptions) Gets a user in this channel. Declaration public Task<RestGuildUser> GetUserAsync(ulong id, RequestOptions options = null) Parameters UInt64 id The identifier of the user. RequestOptions options The options to be used when sending the request. Returns Task < RestGuildUser > A task representing the asynchronous get operation. The task result contains a guild user object that represents the user; null if none is found. GetUsersAsync(RequestOptions) Gets a collection of users that are able to view the channel. Declaration public IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> GetUsersAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < RestGuildUser >> A paged collection containing a collection of guild users that can access this channel. Flattening the paginated response into a collection of users with Kook.AsyncEnumerableExtensions.FlattenAsync``1(IAsyncEnumerable{`0}) is required if you wish to access the users. ModifyAsync(Action<ModifyTextChannelProperties>, RequestOptions) Declaration public virtual Task ModifyAsync(Action<ModifyTextChannelProperties> func, RequestOptions options = null) Parameters Action < ModifyTextChannelProperties > func RequestOptions options Returns Task ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions) Declaration public Task ModifyMessageAsync(Guid messageId, Action<MessageProperties> func, RequestOptions options = null) Parameters Guid messageId Action < MessageProperties > func RequestOptions options Returns Task SendCardAsync(ICard, Quote, IUser, RequestOptions) Sends a card message to this message channel. Declaration public Task<Cacheable<IUserMessage, Guid>> SendCardAsync(ICard card, Quote quote = null, IUser ephemeralUser = null, RequestOptions options = null) Parameters ICard card The card to be sent. Quote quote IUser ephemeralUser The user only who can see the message. Leave null to let everyone see the message. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendCardsAsync(IEnumerable<ICard>, Quote, IUser, RequestOptions) Declaration public Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(IEnumerable<ICard> cards, Quote quote = null, IUser ephemeralUser = null, RequestOptions options = null) Parameters IEnumerable < ICard > cards Quote quote IUser ephemeralUser RequestOptions options Returns Task < Cacheable < IUserMessage , Guid >> SendFileAsync(FileAttachment, Quote, IUser, RequestOptions) Sends a file to this message channel. Declaration public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(FileAttachment attachment, Quote quote = null, IUser ephemeralUser = null, RequestOptions options = null) Parameters FileAttachment attachment The attachment containing the file. Quote quote IUser ephemeralUser The user only who can see the message. Leave null to let everyone see the message. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendFileAsync(Stream, String, AttachmentType, Quote, IUser, RequestOptions) Declaration public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(Stream stream, string fileName = null, AttachmentType type = AttachmentType.File, Quote quote = null, IUser ephemeralUser = null, RequestOptions options = null) Parameters Stream stream String fileName AttachmentType type Quote quote IUser ephemeralUser RequestOptions options Returns Task < Cacheable < IUserMessage , Guid >> SendFileAsync(String, String, AttachmentType, Quote, IUser, RequestOptions) Declaration public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(string path, string fileName = null, AttachmentType type = AttachmentType.File, Quote quote = null, IUser ephemeralUser = null, RequestOptions options = null) Parameters String path String fileName AttachmentType type Quote quote IUser ephemeralUser RequestOptions options Returns Task < Cacheable < IUserMessage , Guid >> SendTextAsync(String, Quote, IUser, RequestOptions) Declaration public Task<Cacheable<IUserMessage, Guid>> SendTextAsync(string text, Quote quote = null, IUser ephemeralUser = null, RequestOptions options = null) Parameters String text Quote quote IUser ephemeralUser RequestOptions options Returns Task < Cacheable < IUserMessage , Guid >> SyncPermissionsAsync(RequestOptions) Declaration public Task SyncPermissionsAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task"
  },
  "api/Kook.Rest.RestTextChannelExperimentalExtensions.html": {
    "href": "api/Kook.Rest.RestTextChannelExperimentalExtensions.html",
    "title": "Class RestTextChannelExperimentalExtensions | Kook.Net 文档",
    "keywords": "Class RestTextChannelExperimentalExtensions Provides extension methods of experimental functionalities for s. Inheritance Object RestTextChannelExperimentalExtensions Namespace : Kook.Rest Assembly : Kook.Net.Experimental.dll Syntax public static class RestTextChannelExperimentalExtensions : object Methods SyncPermissionsAsync(RestTextChannel, RequestOptions) Syncs the permissions of this nested channel with its parent's. Declaration public static Task SyncPermissionsAsync(this RestTextChannel channel, RequestOptions options = null) Parameters RestTextChannel channel The nested channel whose permissions will be synced. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for syncing channel permissions with its parent's. Remarks warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future."
  },
  "api/Kook.Rest.RestUser.html": {
    "href": "api/Kook.Rest.RestUser.html",
    "title": "Class RestUser | Kook.Net 文档",
    "keywords": "Class RestUser Represents a REST-based user. Inheritance Object RestEntity < UInt64 > RestUser RestGuildUser RestSelfUser Inherited Members RestEntity<UInt64>.Id Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RestUser : RestEntity<ulong>, IEntity<ulong>, IUser, IEntity<ulong>, IMentionable, IPresence, IUpdateable Properties ActiveClient Declaration public ClientType? ActiveClient { get; } Property Value Nullable < ClientType > Avatar Declaration public string Avatar { get; } Property Value String Banner Declaration public string Banner { get; } Property Value String BuffAvatar Declaration public string BuffAvatar { get; } Property Value String HasAnnualBuff Declaration public bool? HasAnnualBuff { get; } Property Value Nullable < Boolean > HasBuff Declaration public bool? HasBuff { get; } Property Value Nullable < Boolean > IdentifyNumber Declaration public string IdentifyNumber { get; } Property Value String IdentifyNumberValue Declaration public ushort? IdentifyNumberValue { get; } Property Value Nullable < UInt16 > IsBanned Declaration public bool? IsBanned { get; } Property Value Nullable < Boolean > IsBot Declaration public bool? IsBot { get; } Property Value Nullable < Boolean > IsDenoiseEnabled Declaration public bool? IsDenoiseEnabled { get; } Property Value Nullable < Boolean > IsOnline Declaration public bool? IsOnline { get; } Property Value Nullable < Boolean > IsSystemUser Declaration public bool? IsSystemUser { get; } Property Value Nullable < Boolean > KMarkdownMention Declaration public string KMarkdownMention { get; } Property Value String Nameplates Declaration public IReadOnlyCollection<Nameplate> Nameplates { get; } Property Value IReadOnlyCollection < Nameplate > PlainTextMention Declaration public string PlainTextMention { get; } Property Value String Username Declaration public string Username { get; } Property Value String UserTag Get the tag this user has. Declaration public UserTag UserTag { get; } Property Value UserTag Implements IUser.UserTag Methods BlockAsync(RequestOptions) Declaration public Task BlockAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task CreateDMChannelAsync(RequestOptions) Creates a direct message channel to this user. Declaration public Task<RestDMChannel> CreateDMChannelAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < RestDMChannel > A task that represents the asynchronous get operation. The task result contains a rest DM channel where the user is the recipient. GetIntimacyAsync(RequestOptions) Gets the intimacy information with this user. Declaration public Task<RestIntimacy> GetIntimacyAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < RestIntimacy > A task that represents the asynchronous operation for getting the intimacy information. The task result contains the intimacy information associated with this user. RemoveFriendAsync(RequestOptions) Declaration public Task RemoveFriendAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task RequestFriendAsync(RequestOptions) Declaration public virtual Task RequestFriendAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task ToString() Gets the Username#IdentifyNumber of the user. Declaration public override string ToString() Returns String A string that resolves to Username#IdentifyNumber of the user. UnblockAsync(RequestOptions) Declaration public Task UnblockAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task UpdateAsync(RequestOptions) Declaration public virtual Task UpdateAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) Declaration public Task UpdateIntimacyAsync(Action<IntimacyProperties> func, RequestOptions options = null) Parameters Action < IntimacyProperties > func RequestOptions options Returns Task"
  },
  "api/Kook.Rest.RestUserMessage.html": {
    "href": "api/Kook.Rest.RestUserMessage.html",
    "title": "Class RestUserMessage | Kook.Net 文档",
    "keywords": "Class RestUserMessage Represents a REST-based message sent by a user. Inheritance Object RestEntity < Guid > RestMessage RestUserMessage Inherited Members RestMessage.Type RestMessage.Channel RestMessage.Author RestMessage.Source RestMessage.Content RestMessage.CleanContent RestMessage.Timestamp RestMessage.EditedTimestamp RestMessage.MentionedUsers RestMessage.ToString() RestMessage.Reactions RestMessage.DeleteAsync(RequestOptions) RestMessage.UpdateAsync(RequestOptions) RestMessage.AddReactionAsync(IEmote, RequestOptions) RestMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) RestMessage.RemoveReactionAsync(IEmote, UInt64, RequestOptions) RestMessage.GetReactionUsersAsync(IEmote, RequestOptions) RestMessage.IMessage.Author RestEntity<Guid>.Id Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RestUserMessage : RestMessage, IEntity<Guid>, IUpdateable, IUserMessage, IMessage, IEntity<Guid>, IDeletable Properties Attachments Gets the attachment included in this message. Declaration public override IReadOnlyCollection<Attachment> Attachments { get; } Property Value IReadOnlyCollection < Attachment > The attachment included in this message; Overrides RestMessage.Attachments Cards Gets a collection of the ICard 's on the message. Declaration public override IReadOnlyCollection<ICard> Cards { get; } Property Value IReadOnlyCollection < ICard > Overrides RestMessage.Cards Embeds Gets a collection of the IEmbed 's on the message. Declaration public override IReadOnlyCollection<IEmbed> Embeds { get; } Property Value IReadOnlyCollection < IEmbed > Overrides RestMessage.Embeds IsPinned Gets the value that indicates whether this message is pinned. Declaration public bool? IsPinned { get; } Property Value Nullable < Boolean > true if this message was added to its channel's pinned messages; otherwise false . MentionedChannels Gets a collection of the mentioned channels in the message. Declaration public IReadOnlyCollection<RestGuildChannel> MentionedChannels { get; } Property Value IReadOnlyCollection < RestGuildChannel > MentionedEveryone Declaration public override bool? MentionedEveryone { get; } Property Value Nullable < Boolean > Overrides RestMessage.MentionedEveryone MentionedHere Declaration public override bool? MentionedHere { get; } Property Value Nullable < Boolean > Overrides RestMessage.MentionedHere MentionedRoleIds Declaration public override IReadOnlyCollection<uint> MentionedRoleIds { get; } Property Value IReadOnlyCollection < UInt32 > Overrides RestMessage.MentionedRoleIds MentionedRoles Gets a collection of the mentioned roles in the message. Declaration public IReadOnlyCollection<RestRole> MentionedRoles { get; } Property Value IReadOnlyCollection < RestRole > Pokes Gets a collection of the RestPokeAction 's on the message. Declaration public override IReadOnlyCollection<RestPokeAction> Pokes { get; } Property Value IReadOnlyCollection < RestPokeAction > Overrides RestMessage.Pokes Quote Gets the message quote. Declaration public Quote Quote { get; } Property Value Quote The message quote. Tags Declaration public override IReadOnlyCollection<ITag> Tags { get; } Property Value IReadOnlyCollection < ITag > Overrides RestMessage.Tags Methods ModifyAsync(Action<MessageProperties>, RequestOptions) Declaration public Task ModifyAsync(Action<MessageProperties> func, RequestOptions options = null) Parameters Action < MessageProperties > func RequestOptions options Returns Task Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) Declaration public string Resolve(TagHandling userHandling = default(TagHandling), TagHandling channelHandling = default(TagHandling), TagHandling roleHandling = default(TagHandling), TagHandling everyoneHandling = default(TagHandling), TagHandling emojiHandling = default(TagHandling)) Parameters TagHandling userHandling TagHandling channelHandling TagHandling roleHandling TagHandling everyoneHandling TagHandling emojiHandling Returns String Resolve(Int32, TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) Transforms this message's text into a human-readable form by resolving its tags. Declaration public string Resolve(int startIndex, TagHandling userHandling = default(TagHandling), TagHandling channelHandling = default(TagHandling), TagHandling roleHandling = default(TagHandling), TagHandling everyoneHandling = default(TagHandling), TagHandling emojiHandling = default(TagHandling)) Parameters Int32 startIndex The zero-based index at which to begin the resolving for the specified value. TagHandling userHandling Determines how the user tag should be handled. TagHandling channelHandling Determines how the channel tag should be handled. TagHandling roleHandling Determines how the role tag should be handled. TagHandling everyoneHandling Determines how the @everyone tag should be handled. TagHandling emojiHandling Determines how the emoji tag should be handled. Returns String Explicit Interface Implementations IUserMessage.Quote Gets the message quote. Declaration IQuote IUserMessage.Quote { get; } Returns IQuote The message quote. Implements IUserMessage.Quote"
  },
  "api/Kook.Rest.RestVoiceChannel.html": {
    "href": "api/Kook.Rest.RestVoiceChannel.html",
    "title": "Class RestVoiceChannel | Kook.Net 文档",
    "keywords": "Class RestVoiceChannel Represents a REST-based voice channel in a guild. Inheritance Object RestEntity < UInt64 > RestChannel RestGuildChannel RestVoiceChannel Inherited Members RestGuildChannel.RolePermissionOverwrites RestGuildChannel.UserPermissionOverwrites RestGuildChannel.Type RestGuildChannel.Name RestGuildChannel.Position RestGuildChannel.GuildId RestGuildChannel.CreatorId RestGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) RestGuildChannel.GetCreatorAsync(RequestOptions) RestGuildChannel.DeleteAsync(RequestOptions) RestGuildChannel.UpdateAsync(RequestOptions) RestGuildChannel.GetPermissionOverwrite(IUser) RestGuildChannel.GetPermissionOverwrite(IRole) RestGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) RestGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) RestGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) RestGuildChannel.ToString() RestGuildChannel.IGuildChannel.Guild RestEntity<UInt64>.Id Namespace : Kook.Rest Assembly : Kook.Net.Rest.dll Syntax public class RestVoiceChannel : RestGuildChannel, IEntity<ulong>, IUpdateable, IVoiceChannel, INestedChannel, IGuildChannel, IDeletable, IMentionable, IRestAudioChannel, IAudioChannel, IChannel, IEntity<ulong> Properties CategoryId Declaration public ulong? CategoryId { get; } Property Value Nullable < UInt64 > HasPassword Declaration public bool HasPassword { get; } Property Value Boolean IsPermissionSynced Declaration public bool? IsPermissionSynced { get; } Property Value Nullable < Boolean > IsVoiceRegionOverwritten Declaration public bool? IsVoiceRegionOverwritten { get; } Property Value Nullable < Boolean > KMarkdownMention Declaration public string KMarkdownMention { get; } Property Value String PlainTextMention Declaration public string PlainTextMention { get; } Property Value String ServerUrl Declaration public string ServerUrl { get; } Property Value String UserLimit Declaration public int? UserLimit { get; } Property Value Nullable < Int32 > VoiceQuality Declaration public VoiceQuality? VoiceQuality { get; } Property Value Nullable < VoiceQuality > VoiceRegion Declaration public string VoiceRegion { get; } Property Value String Methods CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions) Declaration public Task<IInvite> CreateInviteAsync(InviteMaxAge maxAge = default(InviteMaxAge), InviteMaxUses maxUses = default(InviteMaxUses), RequestOptions options = null) Parameters InviteMaxAge maxAge InviteMaxUses maxUses RequestOptions options Returns Task < IInvite > CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, RequestOptions) Declaration public Task<IInvite> CreateInviteAsync(int? maxAge, int? maxUses = null, RequestOptions options = null) Parameters Nullable < Int32 > maxAge Nullable < Int32 > maxUses RequestOptions options Returns Task < IInvite > GetCategoryAsync(RequestOptions) Gets the parent (category) channel of this channel. Declaration public Task<ICategoryChannel> GetCategoryAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < ICategoryChannel > A task that represents the asynchronous get operation. The task result contains the category channel representing the parent of this channel; null if none is set. GetConnectedUsersAsync(RequestOptions) Gets the users connected to this voice channel. Declaration public Task<IReadOnlyCollection<IUser>> GetConnectedUsersAsync(RequestOptions options) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < IUser >> A task that represents the asynchronous get operation. The task result contains a collection of users. GetInvitesAsync(RequestOptions) Declaration public Task<IReadOnlyCollection<IInvite>> GetInvitesAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task < IReadOnlyCollection < IInvite >> ModifyAsync(Action<ModifyVoiceChannelProperties>, RequestOptions) Declaration public Task ModifyAsync(Action<ModifyVoiceChannelProperties> func, RequestOptions options = null) Parameters Action < ModifyVoiceChannelProperties > func RequestOptions options Returns Task SyncPermissionsAsync(RequestOptions) Declaration public Task SyncPermissionsAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task"
  },
  "api/Kook.Rest.RestVoiceChannelExperimentalExtensions.html": {
    "href": "api/Kook.Rest.RestVoiceChannelExperimentalExtensions.html",
    "title": "Class RestVoiceChannelExperimentalExtensions | Kook.Net 文档",
    "keywords": "Class RestVoiceChannelExperimentalExtensions Provides extension methods of experimental functionalities for s. Inheritance Object RestVoiceChannelExperimentalExtensions Namespace : Kook.Rest Assembly : Kook.Net.Experimental.dll Syntax public static class RestVoiceChannelExperimentalExtensions : object Methods DisconnectUserAsync(RestVoiceChannel, IGuildUser, RequestOptions) Disconnects the specified user from the voice channel. Declaration public static Task DisconnectUserAsync(this RestVoiceChannel channel, IGuildUser user, RequestOptions options = null) Parameters RestVoiceChannel channel The voice channel where the use is connected to. IGuildUser user The user to disconnect. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for disconnecting the user from the voice channel. Remarks warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future. SyncPermissionsAsync(RestVoiceChannel, RequestOptions) Syncs the permissions of this nested channel with its parent's. Declaration public static Task SyncPermissionsAsync(this RestVoiceChannel channel, RequestOptions options = null) Parameters RestVoiceChannel channel The nested channel whose permissions will be synced. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for syncing channel permissions with its parent's. Remarks warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future."
  },
  "api/Kook.Rest.RestVoiceRegion.html": {
    "href": "api/Kook.Rest.RestVoiceRegion.html",
    "title": "Class RestVoiceRegion | Kook.Net 文档",
    "keywords": "Class RestVoiceRegion Represents a REST-based voice region. Inheritance Object RestVoiceRegion Namespace : Kook.Rest Assembly : Kook.Net.Experimental.dll Syntax public class RestVoiceRegion : RestEntity<string>, IVoiceRegion Remarks warning This entity is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future. Properties Crowding Gets the crowding of this voice region. Declaration public decimal Crowding { get; } Property Value Decimal A decimal between 0.0 and 1.0 that represents the crowding of this voice region. Implements IVoiceRegion.Crowding MinimumBoostLevel Gets the minimum boost level required to use this voice region. Declaration public BoostLevel MinimumBoostLevel { get; set; } Property Value BoostLevel A that represents the minimum boost level required to use this voice region. Implements IVoiceRegion.MinimumBoostLevel Name Gets the name of this voice region. Declaration public string Name { get; } Property Value String A string that represents the human-readable name of this voice region (e.g. Central Europe ). Implements IVoiceRegion.Name Methods ToString() Declaration public override string ToString() Returns String"
  },
  "api/Kook.RetryMode.html": {
    "href": "api/Kook.RetryMode.html",
    "title": "Enum RetryMode | Kook.Net 文档",
    "keywords": "Enum RetryMode Specifies how a request should act in the case of an error. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum RetryMode : int AlwaysFail If a request fails, an exception is thrown immediately. AlwaysRetry Continuously retry a request until it times out, its cancel token is triggered, or the server responds with a non-502 error. Retry502 Retry if a request failed due to an HTTP error 502. RetryRatelimit Retry if a request failed due to a rate-limit. RetryTimeouts Retry if a request timed out."
  },
  "api/Kook.RolePermissionOverwrite.html": {
    "href": "api/Kook.RolePermissionOverwrite.html",
    "title": "Class RolePermissionOverwrite | Kook.Net 文档",
    "keywords": "Class RolePermissionOverwrite Represent a permission object for a role. Inheritance Object RolePermissionOverwrite Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class RolePermissionOverwrite : object, IPermissionOverwrite<uint> Constructors RolePermissionOverwrite(UInt32, OverwritePermissions) Initializes a new RolePermissionOverwrite with provided ID of the role and modified permissions. Declaration public RolePermissionOverwrite(uint targetId, OverwritePermissions permissions) Parameters UInt32 targetId OverwritePermissions permissions Properties Permissions Gets the permissions associated with this overwrite entry for a role. Declaration public OverwritePermissions Permissions { get; } Property Value OverwritePermissions Implements IPermissionOverwrite<TTarget>.Permissions Target Gets the identifier for the role this overwrite is targeting. Declaration public uint Target { get; } Property Value UInt32 Implements IPermissionOverwrite<TTarget>.Target"
  },
  "api/Kook.RoleProperties.html": {
    "href": "api/Kook.RoleProperties.html",
    "title": "Class RoleProperties | Kook.Net 文档",
    "keywords": "Class RoleProperties Properties that are used to modify an IRole with the specified changes. Inheritance Object RoleProperties Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class RoleProperties : object Properties Color Gets or sets the color of the role. Declaration public Color? Color { get; set; } Property Value Nullable < Color > Remarks This value may not be set if the role is an @everyone role. Hoist Gets or sets whether or not this role should be displayed independently in the user list. Declaration public bool? Hoist { get; set; } Property Value Nullable < Boolean > Remarks This value may not be set if the role is an @everyone role. Mentionable Gets or sets whether or not this role can be mentioned. Declaration public bool? Mentionable { get; set; } Property Value Nullable < Boolean > Remarks This value may not be set if the role is an @everyone role. Name Gets or sets the name of the role. Declaration public string Name { get; set; } Property Value String Remarks This value may not be set if the role is an @everyone role. Permissions Gets or sets the role's GuildPermission . Declaration public GuildPermissions? Permissions { get; set; } Property Value Nullable < GuildPermissions > See Also ModifyAsync(Action<RoleProperties>, RequestOptions)"
  },
  "api/Kook.RoleType.html": {
    "href": "api/Kook.RoleType.html",
    "title": "Enum RoleType | Kook.Net 文档",
    "keywords": "Enum RoleType Represents the type of a role. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum RoleType : ushort Booster Represents the role representing a booster. BotSpecified Represents the role was created by system when a bot joined the guild. Everyone Represents tht role is the default everyone role. UserCreated Represents the role was created by a user."
  },
  "api/Kook.SearchGuildMemberProperties.html": {
    "href": "api/Kook.SearchGuildMemberProperties.html",
    "title": "Class SearchGuildMemberProperties | Kook.Net 文档",
    "keywords": "Class SearchGuildMemberProperties Properties that are used to search for a IGuildUser in a IGuild . Inheritance Object SearchGuildMemberProperties Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class SearchGuildMemberProperties : object Properties IsMobileVerified Gets or sets whether the user must have his/her mobile verified to be searched for; null to not search via a verified status. Declaration public bool? IsMobileVerified { get; set; } Property Value Nullable < Boolean > RoleId Gets or sets the ID of the role the user must have to be searched for; null to not search via a role. Declaration public uint? RoleId { get; set; } Property Value Nullable < UInt32 > SearchName Gets or sets the name of the user to be searched for; null to not search via a name. Declaration public string SearchName { get; set; } Property Value String SortedByActiveTime Gets or sets whether and how the searching results should be sorted by the activating time of the user; null to not sort by active time. Declaration public SortMode? SortedByActiveTime { get; set; } Property Value Nullable < SortMode > SortedByJoinTime Gets or sets whether and how the searching results should be sorted by the joining time of the user; null to not sort by joining time. Declaration public SortMode? SortedByJoinTime { get; set; } Property Value Nullable < SortMode > See Also SearchUsersAsync(Action<SearchGuildMemberProperties>, Int32, CacheMode, RequestOptions)"
  },
  "api/Kook.SectionAccessoryMode.html": {
    "href": "api/Kook.SectionAccessoryMode.html",
    "title": "Enum SectionAccessoryMode | Kook.Net 文档",
    "keywords": "Enum SectionAccessoryMode Specifies the accessory position relative to the text element. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum SectionAccessoryMode : int Left The accessory is positioned to the left of the text element. Right The accessory is positioned to the right of the text element. Unspecified How the accessory is positioned relative to the text element is not specified."
  },
  "api/Kook.SectionModule.html": {
    "href": "api/Kook.SectionModule.html",
    "title": "Class SectionModule | Kook.Net 文档",
    "keywords": "Class SectionModule Represents a section module in card. Inheritance Object SectionModule Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class SectionModule : object, IModule, IEquatable<SectionModule> Properties Accessory Gets the accessory of the section. Declaration public IElement Accessory { get; } Property Value IElement An IElement representing the accessory of the section. Mode Specifies that the Accessory is to the left or right of Text . Declaration public SectionAccessoryMode Mode { get; } Property Value SectionAccessoryMode Left if the Accessory is to the left of Text , Right if the Accessory is to the right of Text , Unspecified if how the Accessory is positioned is not specified. Text Gets the text of the section. Declaration public IElement Text { get; } Property Value IElement An IElement representing the text of the section. Type Gets the type of the module. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Implements IModule.Type Methods Equals(SectionModule) Determines whether the specified SectionModule is equal to the current SectionModule . Declaration public bool Equals(SectionModule sectionModule) Parameters SectionModule sectionModule The SectionModule to compare with the current SectionModule . Returns Boolean true if the specified SectionModule is equal to the current SectionModule ; otherwise, false . Equals(Object) Determines whether the specified SectionModule is equal to the current SectionModule . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current SectionModule . Returns Boolean true if the specified SectionModule is equal to the current SectionModule ; otherwise, false . Remarks If the object passes is an SectionModule , Equals(SectionModule) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 Operators Equality(SectionModule, SectionModule) Determines whether the specified SectionModule is equal to the current SectionModule . Declaration public static bool operator ==(SectionModule left, SectionModule right) Parameters SectionModule left SectionModule right Returns Boolean true if the specified SectionModule is equal to the current SectionModule ; otherwise, false . Inequality(SectionModule, SectionModule) Determines whether the specified SectionModule is not equal to the current SectionModule . Declaration public static bool operator !=(SectionModule left, SectionModule right) Parameters SectionModule left SectionModule right Returns Boolean true if the specified SectionModule is not equal to the current SectionModule ; otherwise, false . Extension Methods CardExtensions.ToBuilder(SectionModule)"
  },
  "api/Kook.SectionModuleBuilder.html": {
    "href": "api/Kook.SectionModuleBuilder.html",
    "title": "Class SectionModuleBuilder | Kook.Net 文档",
    "keywords": "Class SectionModuleBuilder Represents a section module builder for creating a SectionModule . Inheritance Object SectionModuleBuilder Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class SectionModuleBuilder : object, IModuleBuilder, IEquatable<SectionModuleBuilder> Constructors SectionModuleBuilder() Initializes a new instance of the SectionModuleBuilder class. Declaration public SectionModuleBuilder() SectionModuleBuilder(IElementBuilder, SectionAccessoryMode, IElementBuilder) Initializes a new instance of the SectionModuleBuilder class. Declaration public SectionModuleBuilder(IElementBuilder text, SectionAccessoryMode mode = SectionAccessoryMode.Unspecified, IElementBuilder accessory = null) Parameters IElementBuilder text SectionAccessoryMode mode IElementBuilder accessory SectionModuleBuilder(String, Boolean, SectionAccessoryMode, IElementBuilder) Initializes a new instance of the SectionModuleBuilder class. Declaration public SectionModuleBuilder(string text, bool isKMarkdown = false, SectionAccessoryMode mode = SectionAccessoryMode.Unspecified, IElementBuilder accessory = null) Parameters String text Boolean isKMarkdown SectionAccessoryMode mode IElementBuilder accessory Properties Accessory Gets or sets the accessory of the section. Declaration public IElementBuilder Accessory { get; set; } Property Value IElementBuilder An IElementBuilder representing the accessory of the section. Mode Gets or sets how the Accessory is positioned relative to the Text . Declaration public SectionAccessoryMode Mode { get; set; } Property Value SectionAccessoryMode A SectionAccessoryMode representing how the Accessory is positioned relative to the Text . Text Gets or sets the text of the section. Declaration public IElementBuilder Text { get; set; } Property Value IElementBuilder An IElementBuilder representing the text of the section. Type Specifies the module type of the IModule this builder creates. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Implements IModuleBuilder.Type Methods Build() Builds this builder into a SectionModule . Declaration public SectionModule Build() Returns SectionModule A SectionModule representing the built section module object. Equals(SectionModuleBuilder) Determines whether the specified SectionModuleBuilder is equal to the current SectionModuleBuilder . Declaration public bool Equals(SectionModuleBuilder sectionModuleBuilder) Parameters SectionModuleBuilder sectionModuleBuilder The SectionModuleBuilder to compare with the current SectionModuleBuilder . Returns Boolean true if the specified SectionModuleBuilder is equal to the current SectionModuleBuilder ; otherwise, false . Equals(Object) Determines whether the specified SectionModuleBuilder is equal to the current SectionModuleBuilder . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current SectionModuleBuilder . Returns Boolean true if the specified SectionModuleBuilder is equal to the current SectionModuleBuilder ; otherwise, false . Remarks If the object passes is an SectionModuleBuilder , Equals(SectionModuleBuilder) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 WithAccessory(ButtonElementBuilder) Sets the accessory of the section. Declaration public SectionModuleBuilder WithAccessory(ButtonElementBuilder accessory) Parameters ButtonElementBuilder accessory The accessory to be set for the section. Returns SectionModuleBuilder The current builder. WithAccessory(ImageElementBuilder) Sets the accessory of the section. Declaration public SectionModuleBuilder WithAccessory(ImageElementBuilder accessory) Parameters ImageElementBuilder accessory The accessory to be set for the section. Returns SectionModuleBuilder The current builder. WithAccessory<T>(Action<T>) Sets the accessory of the section. Declaration public SectionModuleBuilder WithAccessory<T>(Action<T> action = null) where T : IElementBuilder, new() Parameters Action <T> action The action to set the accessory of the section. Returns SectionModuleBuilder The current builder. Type Parameters T WithMode(SectionAccessoryMode) Sets how the Accessory is positioned relative to the Text . Declaration public SectionModuleBuilder WithMode(SectionAccessoryMode mode) Parameters SectionAccessoryMode mode How the Accessory is positioned relative to the Text . Returns SectionModuleBuilder The current builder. WithText(KMarkdownElementBuilder) Sets the text of the section. Declaration public SectionModuleBuilder WithText(KMarkdownElementBuilder text) Parameters KMarkdownElementBuilder text The text to be set for the section. Returns SectionModuleBuilder The current builder. WithText(ParagraphStructBuilder) Sets the text of the section. Declaration public SectionModuleBuilder WithText(ParagraphStructBuilder text) Parameters ParagraphStructBuilder text The text to be set for the section. Returns SectionModuleBuilder The current builder. WithText(PlainTextElementBuilder) Sets the text of the section. Declaration public SectionModuleBuilder WithText(PlainTextElementBuilder text) Parameters PlainTextElementBuilder text The text to be set for the section. Returns SectionModuleBuilder The current builder. WithText(String, Boolean) Sets the text of the section. Declaration public SectionModuleBuilder WithText(string text, bool isKMarkdown = false) Parameters String text The text to be set for the section. Boolean isKMarkdown A bool indicating whether the text is in KMarkdown format; if true , the text will be set as a KMarkdownElement ; if false , the text will be set as a PlainTextElement . Returns SectionModuleBuilder The current builder. WithText<T>(Action<T>) Sets the text of the section. Declaration public SectionModuleBuilder WithText<T>(Action<T> action = null) where T : IElementBuilder, new() Parameters Action <T> action The action to set the text of the section. Returns SectionModuleBuilder The current builder. Type Parameters T Operators Equality(SectionModuleBuilder, SectionModuleBuilder) Determines whether the specified SectionModuleBuilder is equal to the current SectionModuleBuilder . Declaration public static bool operator ==(SectionModuleBuilder left, SectionModuleBuilder right) Parameters SectionModuleBuilder left SectionModuleBuilder right Returns Boolean true if the specified SectionModuleBuilder is equal to the current SectionModuleBuilder ; otherwise, false . Inequality(SectionModuleBuilder, SectionModuleBuilder) Determines whether the specified SectionModuleBuilder is not equal to the current SectionModuleBuilder . Declaration public static bool operator !=(SectionModuleBuilder left, SectionModuleBuilder right) Parameters SectionModuleBuilder left SectionModuleBuilder right Returns Boolean true if the specified SectionModuleBuilder is not equal to the current SectionModuleBuilder ; otherwise, false . Explicit Interface Implementations IModuleBuilder.Build() Builds the IModuleBuilder into an IModule . Declaration IModule IModuleBuilder.Build() Returns IModule An IModule representing the built module object. Implements IModuleBuilder.Build()"
  },
  "api/Kook.SlowModeInterval.html": {
    "href": "api/Kook.SlowModeInterval.html",
    "title": "Enum SlowModeInterval | Kook.Net 文档",
    "keywords": "Enum SlowModeInterval Specifies the slow-mode ratelimit in seconds for an ITextChannel . Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum SlowModeInterval : int _10 Each user needs to wait for 10 seconds before sending another message. _120 Each user needs to wait for 2 minutes (120 seconds) before sending another message. _15 Each user needs to wait for 15 seconds before sending another message. _1800 Each user needs to wait for 30 minutes (1800 seconds) before sending another message. _21600 Each user needs to wait for 6 hours (21600 seconds) before sending another message. _30 Each user needs to wait for 30 seconds before sending another message. _300 Each user needs to wait for 5 minutes (300 seconds) before sending another message. _3600 Each user needs to wait for 1 hour (3600 seconds) before sending another message. _5 Each user needs to wait for 5 seconds before sending another message. _60 Each user needs to wait for 1 minute (60 seconds) before sending another message. _600 Each user needs to wait for 10 minutes (600 seconds) before sending another message. _7200 Each user needs to wait for 2 hours (7200 seconds) before sending another message. _900 Each user needs to wait for 15 minutes (900 seconds) before sending another message. None Slow-mode is disabled."
  },
  "api/Kook.SortMode.html": {
    "href": "api/Kook.SortMode.html",
    "title": "Enum SortMode | Kook.Net 文档",
    "keywords": "Enum SortMode Specifies the sorting mode. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum SortMode : int Ascending The items are sorted in ascending order. Descending The items are sorted in descending order."
  },
  "api/Kook.SystemMessageType.html": {
    "href": "api/Kook.SystemMessageType.html",
    "title": "Enum SystemMessageType | Kook.Net 文档",
    "keywords": "Enum SystemMessageType Gets the type of a ISystemMessage Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum SystemMessageType : int"
  },
  "api/Kook.Tag-1.html": {
    "href": "api/Kook.Tag-1.html",
    "title": "Class Tag<T> | Kook.Net 文档",
    "keywords": "Class Tag<T> Represents a tag found in IMessage . Inheritance Object Tag<T> Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class Tag<T> : object, ITag Type Parameters T Properties Index Gets position of the tag in the message. Declaration public int Index { get; } Property Value Int32 Implements ITag.Index Key Gets the key of the tag. Declaration public dynamic Key { get; } Property Value Object Implements ITag.Key Length Gets the length of the tag. Declaration public int Length { get; } Property Value Int32 Implements ITag.Length Type Gets the type of the tag. Declaration public TagType Type { get; } Property Value TagType Implements ITag.Type Value Gets the value of the tag. Declaration public T Value { get; } Property Value T Remarks When Type is HereMention , this property returns the same entity as EveryoneRole for convenience. because there is no actual entities representing a group of online users. Methods ToString() Declaration public override string ToString() Returns String Explicit Interface Implementations ITag.Value Gets the value of the tag. Declaration object ITag.Value { get; } Returns Object Implements ITag.Value"
  },
  "api/Kook.TagHandling.html": {
    "href": "api/Kook.TagHandling.html",
    "title": "Enum TagHandling | Kook.Net 文档",
    "keywords": "Enum TagHandling Specifies the handling type the tag should use. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum TagHandling : int FullName Resolves to username with identify number value. (e.g. &lt;@53905483156684800> -> @Voltana#8252). FullNameNoPrefix Resolves to username with identify number value without mention prefix. (e.g. &lt;@53905483156684800> -> Voltana#8252). Ignore Tag handling is ignored (e.g. &lt;@53905483156684800> -> &lt;@53905483156684800>). Name Resolves to username (e.g. &lt;@53905483156684800> -> @Voltana). NameNoPrefix Resolves to username without mention prefix (e.g. &lt;@53905483156684800> -> Voltana). Remove Removes the tag entirely. Sanitize Sanitizes the tag (e.g. &lt;@53905483156684800> -> &lt;@53905483156684800> (w/ nbsp))."
  },
  "api/Kook.TagMode.html": {
    "href": "api/Kook.TagMode.html",
    "title": "Enum TagMode | Kook.Net 文档",
    "keywords": "Enum TagMode Represents the mode to parse tags. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum TagMode : int KMarkdown Parse tags as KMarkdown. PlainText Parse tags as plain text."
  },
  "api/Kook.TagType.html": {
    "href": "api/Kook.TagType.html",
    "title": "Enum TagType | Kook.Net 文档",
    "keywords": "Enum TagType Specifies the type of Kook tag. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum TagType : int ChannelMention The object is a channel mention. Emoji The object is an emoji. EveryoneMention The object is an everyone mention. HereMention The object is a here mention. RoleMention The object is a role mention. UserMention The object is an user mention."
  },
  "api/Kook.TextTheme.html": {
    "href": "api/Kook.TextTheme.html",
    "title": "Enum TextTheme | Kook.Net 文档",
    "keywords": "Enum TextTheme Represents text themes used in Colorize(String, TextTheme, Boolean) . Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum TextTheme : ushort Remarks warning The text themes of KMarkdown are currently only supported in card messages. KMarkdown messages theming is not supported yet. warning The color of the text themes vary on different platforms. It is recommended to test your card messages on different platforms to ensure that the text themes are displayed correctly. Body Represents a body theme. Danger Represents a danger theme. Info Represents an info theme. Pink Represents a pink theme. Primary Represents a primary theme. Purple Represents a purple theme. Secondary Represents a secondary theme. Success Represents a success theme. Tips Represents a tips theme. Warning Represents a warning theme."
  },
  "api/Kook.TokenType.html": {
    "href": "api/Kook.TokenType.html",
    "title": "Enum TokenType | Kook.Net 文档",
    "keywords": "Enum TokenType Specifies the type of token to use with the client. Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum TokenType : int Bearer An OAuth2 token type. Bot A bot token type."
  },
  "api/Kook.TokenUtils.html": {
    "href": "api/Kook.TokenUtils.html",
    "title": "Class TokenUtils | Kook.Net 文档",
    "keywords": "Class TokenUtils Provides a series of helper methods for handling Kook login tokens. Inheritance Object TokenUtils Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public static class TokenUtils : object Methods ValidateToken(TokenType, String) Checks the validity of the supplied token of a specific type. Declaration public static void ValidateToken(TokenType tokenType, string token) Parameters TokenType tokenType The type of token to validate. String token The token value to validate."
  },
  "api/Kook.UserExtensions.html": {
    "href": "api/Kook.UserExtensions.html",
    "title": "Class UserExtensions | Kook.Net 文档",
    "keywords": "Class UserExtensions An extension class for various Kook user objects. Inheritance Object UserExtensions Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public static class UserExtensions : object Methods BanAsync(IGuildUser, Int32, String, RequestOptions) Bans the user from the guild and optionally prunes their recent messages. Declaration public static Task BanAsync(this IGuildUser user, int pruneDays = 0, string reason = null, RequestOptions options = null) Parameters IGuildUser user The user to ban. Int32 pruneDays The number of days to remove messages from this user for - must be between [0, 7] String reason The reason of the ban to be written in the audit log. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for banning a user. SendCardAsync(IUser, ICard, IQuote, RequestOptions) Sends a card message message via DM. Declaration public static Task<Cacheable<IUserMessage, Guid>> SendCardAsync(this IUser user, ICard card, IQuote quote = null, RequestOptions options = null) Parameters IUser user The user to send the DM to. ICard card The card to be sent. IQuote quote The message quote to be included. Used to reply to specific messages. RequestOptions options The request options for this async request. Returns Task < Cacheable < IUserMessage , Guid >> SendCardsAsync(IUser, IEnumerable<ICard>, IQuote, RequestOptions) Sends a card message message via DM. Declaration public static Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(this IUser user, IEnumerable<ICard> cards, IQuote quote = null, RequestOptions options = null) Parameters IUser user The user to send the DM to. IEnumerable < ICard > cards The cards to be sent. IQuote quote The message quote to be included. Used to reply to specific messages. RequestOptions options The request options for this async request. Returns Task < Cacheable < IUserMessage , Guid >> SendFileAsync(IUser, FileAttachment, IQuote, RequestOptions) Sends a file via DM. Declaration public static Task<Cacheable<IUserMessage, Guid>> SendFileAsync(this IUser user, FileAttachment attachment, IQuote quote = null, RequestOptions options = null) Parameters IUser user The user to send the DM to. FileAttachment attachment The attachment containing the file. IQuote quote The message quote to be included. Used to reply to specific messages. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> SendFileAsync(IUser, Stream, String, AttachmentType, IQuote, RequestOptions) Sends a file via DM. Declaration public static Task<Cacheable<IUserMessage, Guid>> SendFileAsync(this IUser user, Stream stream, string fileName = null, AttachmentType type = AttachmentType.File, IQuote quote = null, RequestOptions options = null) Parameters IUser user The user to send the DM to. Stream stream The stream of the file. String fileName The name of the file. AttachmentType type The type of the file. IQuote quote The message quote to be included. Used to reply to specific messages. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> SendFileAsync(IUser, String, String, AttachmentType, IQuote, RequestOptions) Sends a file via DM. Declaration public static Task<Cacheable<IUserMessage, Guid>> SendFileAsync(this IUser user, string path, string fileName = null, AttachmentType type = AttachmentType.File, IQuote quote = null, RequestOptions options = null) Parameters IUser user The user to send the DM to. String path The file path of the file. String fileName The name of the file. AttachmentType type The type of the file. IQuote quote The message quote to be included. Used to reply to specific messages. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> SendTextAsync(IUser, String, IQuote, RequestOptions) Sends a text message via DM. Declaration public static Task<Cacheable<IUserMessage, Guid>> SendTextAsync(this IUser user, string content, IQuote quote = null, RequestOptions options = null) Parameters IUser user The user to send the DM to. String content The KMarkdown content to be sent. IQuote quote The message quote to be included. Used to reply to specific messages. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >>"
  },
  "api/Kook.UserPermissionOverwrite.html": {
    "href": "api/Kook.UserPermissionOverwrite.html",
    "title": "Class UserPermissionOverwrite | Kook.Net 文档",
    "keywords": "Class UserPermissionOverwrite Represent a permission object for a user. Inheritance Object UserPermissionOverwrite Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class UserPermissionOverwrite : object, IPermissionOverwrite<IUser> Constructors UserPermissionOverwrite(IUser, OverwritePermissions) Initializes a new UserPermissionOverwrite with provided user information and modified permissions. Declaration public UserPermissionOverwrite(IUser target, OverwritePermissions permissions) Parameters IUser target OverwritePermissions permissions Properties Permissions Gets the permissions associated with this overwrite entry for a user. Declaration public OverwritePermissions Permissions { get; } Property Value OverwritePermissions Implements IPermissionOverwrite<TTarget>.Permissions Target Gets the user this overwrite is targeting. Declaration public IUser Target { get; } Property Value IUser Implements IPermissionOverwrite<TTarget>.Target"
  },
  "api/Kook.UserTag.html": {
    "href": "api/Kook.UserTag.html",
    "title": "Class UserTag | Kook.Net 文档",
    "keywords": "Class UserTag Representing a tag an IUser can have. Inheritance Object UserTag Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class UserTag : IEquatable<UserTag> Properties BackgroundColor Gets the background color of the tag given to user. Declaration public AlphaColor BackgroundColor { get; } Property Value AlphaColor A AlphaColor struct representing the background color of this tag. Color Gets the color of the tag given to user. Declaration public Color Color { get; } Property Value Color A Color struct representing the color of this tag. Text Gets the text of the tag given to user. Declaration public string Text { get; } Property Value String A string representing the text of this tag. Methods Create(Color, AlphaColor, String) Initializes a new instance of the UserTag class. Declaration public static UserTag Create(Color color, AlphaColor backgroundColor, string text) Parameters Color color The color of the tag given to user. AlphaColor backgroundColor The background color of the tag given to user. String text The text of the tag given to user. Returns UserTag A UserTag representing the given parameters. Equals(UserTag) Declaration public bool Equals(UserTag other) Parameters UserTag other Returns Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean GetHashCode() Declaration public override int GetHashCode() Returns Int32"
  },
  "api/Kook.VideoModule.html": {
    "href": "api/Kook.VideoModule.html",
    "title": "Class VideoModule | Kook.Net 文档",
    "keywords": "Class VideoModule Represents a video module in an ICard . Inheritance Object VideoModule Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class VideoModule : object, IMediaModule, IModule, IEquatable<VideoModule> Properties Source Gets the source of the media associated with this module. Declaration public string Source { get; } Property Value String A string representing the source of the audio associated with this module. Implements IMediaModule.Source Title Gets the title of the media associated with this module. Declaration public string Title { get; } Property Value String A string representing the title of the media associated with this module. Implements IMediaModule.Title Type Gets the type of the module. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Implements IModule.Type Methods Equals(VideoModule) Determines whether the specified VideoModule is equal to the current VideoModule . Declaration public bool Equals(VideoModule videoModule) Parameters VideoModule videoModule The VideoModule to compare with the current VideoModule . Returns Boolean true if the specified VideoModule is equal to the current VideoModule ; otherwise, false . Equals(Object) Determines whether the specified VideoModule is equal to the current VideoModule . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current VideoModule . Returns Boolean true if the specified VideoModule is equal to the current VideoModule ; otherwise, false . Remarks If the object passes is an VideoModule , Equals(VideoModule) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 Operators Equality(VideoModule, VideoModule) Determines whether the specified VideoModule is equal to the current VideoModule . Declaration public static bool operator ==(VideoModule left, VideoModule right) Parameters VideoModule left VideoModule right Returns Boolean true if the specified VideoModule is equal to the current VideoModule ; otherwise, false . Inequality(VideoModule, VideoModule) Determines whether the specified VideoModule is not equal to the current VideoModule . Declaration public static bool operator !=(VideoModule left, VideoModule right) Parameters VideoModule left VideoModule right Returns Boolean true if the specified VideoModule is not equal to the current VideoModule ; otherwise, false . Extension Methods CardExtensions.ToBuilder(VideoModule)"
  },
  "api/Kook.VideoModuleBuilder.html": {
    "href": "api/Kook.VideoModuleBuilder.html",
    "title": "Class VideoModuleBuilder | Kook.Net 文档",
    "keywords": "Class VideoModuleBuilder Represents a video module builder for creating a VideoModule . Inheritance Object VideoModuleBuilder Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public class VideoModuleBuilder : object, IModuleBuilder, IEquatable<VideoModuleBuilder> Constructors VideoModuleBuilder() Initializes a new instance of the VideoModuleBuilder class. Declaration public VideoModuleBuilder() VideoModuleBuilder(String, String) Initializes a new instance of the VideoModuleBuilder class. Declaration public VideoModuleBuilder(string source, string title = null) Parameters String source The source URL of the video. String title The title of the video. Properties Source Gets or sets the source URL of the video. Declaration public string Source { get; set; } Property Value String The source URL of the video. Title Gets or sets the title of the video. Declaration public string Title { get; set; } Property Value String The title of the video. Type Specifies the module type of the IModule this builder creates. Declaration public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Implements IModuleBuilder.Type Methods Build() Builds this builder into a VideoModule . Declaration public VideoModule Build() Returns VideoModule A VideoModule representing the built video module object. Equals(VideoModuleBuilder) Determines whether the specified VideoModuleBuilder is equal to the current VideoModuleBuilder . Declaration public bool Equals(VideoModuleBuilder videoModuleBuilder) Parameters VideoModuleBuilder videoModuleBuilder The VideoModuleBuilder to compare with the current VideoModuleBuilder . Returns Boolean true if the specified VideoModuleBuilder is equal to the current VideoModuleBuilder ; otherwise, false . Equals(Object) Determines whether the specified VideoModuleBuilder is equal to the current VideoModuleBuilder . Declaration public override bool Equals(object obj) Parameters Object obj The object to compare with the current VideoModuleBuilder . Returns Boolean true if the specified VideoModuleBuilder is equal to the current VideoModuleBuilder ; otherwise, false . Remarks If the object passes is an VideoModuleBuilder , Equals(VideoModuleBuilder) will be called to compare the 2 instances. GetHashCode() Declaration public override int GetHashCode() Returns Int32 WithSource(String) Sets the source URL of the video. Declaration public VideoModuleBuilder WithSource(string source) Parameters String source The source URL of the video to be set. Returns VideoModuleBuilder The current builder. WithTitle(String) Sets the title of the video. Declaration public VideoModuleBuilder WithTitle(string title) Parameters String title The title of the video to be set. Returns VideoModuleBuilder The current builder. Operators Equality(VideoModuleBuilder, VideoModuleBuilder) Determines whether the specified VideoModuleBuilder is equal to the current VideoModuleBuilder . Declaration public static bool operator ==(VideoModuleBuilder left, VideoModuleBuilder right) Parameters VideoModuleBuilder left VideoModuleBuilder right Returns Boolean true if the specified VideoModuleBuilder is equal to the current VideoModuleBuilder ; otherwise, false . Inequality(VideoModuleBuilder, VideoModuleBuilder) Determines whether the specified VideoModuleBuilder is not equal to the current VideoModuleBuilder . Declaration public static bool operator !=(VideoModuleBuilder left, VideoModuleBuilder right) Parameters VideoModuleBuilder left VideoModuleBuilder right Returns Boolean true if the specified VideoModuleBuilder is not equal to the current VideoModuleBuilder ; otherwise, false . Explicit Interface Implementations IModuleBuilder.Build() Builds the IModuleBuilder into an IModule . Declaration IModule IModuleBuilder.Build() Returns IModule An IModule representing the built module object. Implements IModuleBuilder.Build()"
  },
  "api/Kook.VoiceQuality.html": {
    "href": "api/Kook.VoiceQuality.html",
    "title": "Enum VoiceQuality | Kook.Net 文档",
    "keywords": "Enum VoiceQuality Specifies the voice quality of an IVoiceChannel . Namespace : Kook Assembly : Kook.Net.Core.dll Syntax public enum VoiceQuality : int _128kbps Equivalent to approximately 128 kbps. _18kbps Equivalent to approximately 18 kbps. _192kbps Equivalent to approximately 192 kbps. _256kbps Equivalent to approximately 256 kbps. _320kbps Equivalent to approximately 320 kbps. _48kbps Equivalent to approximately is 48 kbps. _96kbps Equivalent to approximately is 96 kbps."
  },
  "api/Kook.WebSocket.BaseSocketClient.html": {
    "href": "api/Kook.WebSocket.BaseSocketClient.html",
    "title": "Class BaseSocketClient | Kook.Net 文档",
    "keywords": "Class BaseSocketClient Represents an abstract base class for WebSocket-based clients. Inheritance Object BaseKookClient BaseSocketClient KookSocketClient Inherited Members BaseKookClient.Log BaseKookClient.LoggedIn BaseKookClient.LoggedOut BaseKookClient.LoginState BaseKookClient.TokenType BaseKookClient.Dispose() BaseKookClient.LoginAsync(TokenType, String, Boolean) BaseKookClient.LogoutAsync() BaseKookClient.IKookClient.ConnectionState BaseKookClient.IKookClient.CurrentUser Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public abstract class BaseSocketClient : BaseKookClient, IKookClient, IDisposable Fields _baseConfig Gets the configuration used by this client. Declaration protected readonly KookSocketConfig _baseConfig Field Value KookSocketConfig Properties CurrentUser Gets the current logged-in user. Declaration public virtual SocketSelfUser CurrentUser { get; protected set; } Property Value SocketSelfUser Guilds Gets a collection of guilds that the user is currently in. Declaration public abstract IReadOnlyCollection<SocketGuild> Guilds { get; } Property Value IReadOnlyCollection < SocketGuild > A read-only collection of guilds that the current user is in. Latency Gets the estimated round-trip latency, in milliseconds, to the gateway server. Declaration public abstract int Latency { get; protected set; } Property Value Int32 An int that represents the round-trip latency to the WebSocket server. Please note that this value does not represent a \"true\" latency for operations such as sending a message. Rest Provides access to a REST-only client with a shared state from this client. Declaration public abstract KookSocketRestClient Rest { get; } Property Value KookSocketRestClient Methods DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>, RequestOptions) Downloads all boost subscriptions for the specified guilds. Declaration public abstract Task DownloadBoostSubscriptionsAsync(IEnumerable<IGuild> guilds = null, RequestOptions options = null) Parameters IEnumerable < IGuild > guilds The guilds to download the boost subscriptions for. If null , all available guilds will be downloaded. To download all boost subscriptions, the current user must has the ManageGuild permission. RequestOptions options The options to be used when sending the request. Returns Task DownloadUsersAsync(IEnumerable<IGuild>, RequestOptions) Attempts to download users into the user cache for the selected guilds. Declaration public abstract Task DownloadUsersAsync(IEnumerable<IGuild> guilds = null, RequestOptions options = null) Parameters IEnumerable < IGuild > guilds The guilds to download the members from. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous download operation. DownloadVoiceStatesAsync(IEnumerable<IGuild>, RequestOptions) Downloads all voice states for the specified guilds. Declaration public abstract Task DownloadVoiceStatesAsync(IEnumerable<IGuild> guilds = null, RequestOptions options = null) Parameters IEnumerable < IGuild > guilds The guilds to download the voice states for. If null , all available guilds will be downloaded. RequestOptions options The options to be used when sending the request. Returns Task GetChannel(UInt64) Gets a channel. Declaration public abstract SocketChannel GetChannel(ulong id) Parameters UInt64 id The identifier of the channel. Returns SocketChannel A generic WebSocket-based channel object (voice, text, category, etc.) associated with the identifier; null when the channel cannot be found. GetDMChannel(Guid) Gets a channel. Declaration public abstract SocketDMChannel GetDMChannel(Guid chatCode) Parameters Guid chatCode The chat code of the direct-message channel. Returns SocketDMChannel A generic WebSocket-based channel object (voice, text, category, etc.) associated with the identifier; null when the channel cannot be found. GetDMChannel(UInt64) Gets a channel. Declaration public abstract SocketDMChannel GetDMChannel(ulong userId) Parameters UInt64 userId The user identifier of the direct-message channel. Returns SocketDMChannel A generic WebSocket-based channel object (voice, text, category, etc.) associated with the identifier; null when the channel cannot be found. GetGuild(UInt64) Gets a guild. Declaration public abstract SocketGuild GetGuild(ulong id) Parameters UInt64 id The guild identifier. Returns SocketGuild A WebSocket-based guild associated with the identifier; null when the guild cannot be found. GetUser(String, String) Gets a user. Declaration public abstract SocketUser GetUser(string username, string identifyNumber) Parameters String username The name of the user. String identifyNumber The identify value of the user. Returns SocketUser A generic WebSocket-based user; null when the user cannot be found. Remarks This method gets the user present in the WebSocket cache with the given condition. warning Sometimes a user may return null due to Kook not sending offline users in large guilds (i.e. guild with 100+ members) actively. To download users on startup and to see more information about this subject, see AlwaysDownloadUsers . note This method does not attempt to fetch users that the logged-in user does not have access to (i.e. users who don't share mutual guild(s) with the current user). If you wish to get a user that you do not have access to, consider using the REST implementation of . GetUser(UInt64) Gets a generic user. Declaration public abstract SocketUser GetUser(ulong id) Parameters UInt64 id The user ID. Returns SocketUser A generic WebSocket-based user; null when the user cannot be found. Remarks This method gets the user present in the WebSocket cache with the given condition. warning Sometimes a user may return null due to Kook not sending offline users in large guilds (i.e. guild with 100+ members) actively. To download users on startup and to see more information about this subject, see AlwaysDownloadUsers . note This method does not attempt to fetch users that the logged-in user does not have access to (i.e. users who don't share mutual guild(s) with the current user). If you wish to get a user that you do not have access to, consider using the REST implementation of . StartAsync() Starts the WebSocket connection. Declaration public abstract Task StartAsync() Returns Task A task that represents the asynchronous start operation. StopAsync() Stops the WebSocket connection. Declaration public abstract Task StopAsync() Returns Task A task that represents the asynchronous stop operation. Events ChannelCreated Fired when a channel is created. Declaration public event Func<SocketChannel, Task> ChannelCreated Event Type Func < SocketChannel , Task > Remarks This event is fired when a generic channel has been created. The event handler must return a and accept a SocketChannel as its parameter. The newly created channel is passed into the event handler parameter. The given channel type may include, but not limited to, Private Channels (DM, Group), Guild Channels (Text, Voice, Category); see the derived classes of SocketChannel for more details. ChannelDestroyed Fired when a channel is destroyed. Declaration public event Func<SocketChannel, Task> ChannelDestroyed Event Type Func < SocketChannel , Task > Remarks This event is fired when a generic channel has been destroyed. The event handler must return a and accept a SocketChannel as its parameter. The destroyed channel is passed into the event handler parameter. The given channel type may include, but not limited to, Private Channels (DM, Group), Guild Channels (Text, Voice, Category); see the derived classes of SocketChannel for more details. ChannelUpdated Fired when a channel is updated. Declaration public event Func<SocketChannel, SocketChannel, Task> ChannelUpdated Event Type Func < SocketChannel , SocketChannel , Task > Remarks This event is fired when a generic channel has been updated. The event handler must return a and accept 2 SocketChannel as its parameters. The original (prior to update) channel is passed into the first SocketChannel , while the updated channel is passed into the second. The given channel type may include, but not limited to, Private Channels (DM, Group), Guild Channels (Text, Voice, Category); see the derived classes of SocketChannel for more details. CurrentUserUpdated Fired when the connected account is updated. Declaration public event Func<SocketSelfUser, SocketSelfUser, Task> CurrentUserUpdated Event Type Func < SocketSelfUser , SocketSelfUser , Task > Remarks This event is fired when the connected account is updated. The event handler must return a and accept a SocketSelfUser , and a SocketSelfUser as its parameter. The current user before the update is passed into the event handler parameter as SocketSelfUser . The current user after the update is passed into the event handler parameter as SocketSelfUser . DirectMessageButtonClicked Fired when a button is clicked in a direct card message. Declaration public event Func<string, Cacheable<SocketUser, ulong>, Cacheable<IMessage, Guid>, SocketDMChannel, Task> DirectMessageButtonClicked Event Type Func < String , Cacheable < SocketUser , UInt64 >, Cacheable < IMessage , Guid >, SocketDMChannel , Task > Remarks This event is fired when a button is clicked in a direct card message. The event handler must return a and accept a string , a Cacheable<TEntity, TId> , a Cacheable<TEntity, TId> , and a SocketTextChannel as its parameter. The button value is passed into the event handler parameter as string . The users who clicked the button is passed into the event handler parameter as Cacheable<TEntity, TId> , which contains a SocketUser when the user presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user is preserved in the . If caching is enabled via KookSocketConfig , the Cacheable<TEntity, TId> entity will contain the direct card message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the The channel where the button is clicked is passed into the event handler parameter as SocketTextChannel . DirectMessageDeleted Fired when a direct message is deleted. Declaration public event Func<Cacheable<IMessage, Guid>, Cacheable<SocketUser, ulong>, Cacheable<SocketDMChannel, Guid>, Task> DirectMessageDeleted Event Type Func < Cacheable < IMessage , Guid >, Cacheable < SocketUser , UInt64 >, Cacheable < SocketDMChannel , Guid >, Task > Remarks This event is fired when a direct message is deleted. The event handler must return a and accept a Cacheable<TEntity, TId> , a Cacheable<TEntity, TId> , and a Cacheable<TEntity, TId> as its parameters. important It is not possible to retrieve the direct message via DownloadAsync() ; the original direct message cannot be retrieved by Kook after the message has been deleted. If caching is enabled via KookSocketConfig , the Cacheable<TEntity, TId> entity will contain the deleted direct message; otherwise, in event that the message cannot be retrieved, the ID of the direct message is preserved in the . The user that originally sent this direct message is passed into the event handler parameter as Cacheable<TEntity, TId> , which contains a SocketGuildUser when the guild member presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member is preserved in the . If a direct message was sent by the current user to this user, or the recipient had sent a message before in current session, the Cacheable<TEntity, TId> entity will contains the direct message channel; otherwise, the direct message channel has not been created yet, and the as chat code will be preserved. DirectMessageReceived Fired when a direct message is received. Declaration public event Func<SocketMessage, SocketUser, SocketDMChannel, Task> DirectMessageReceived Event Type Func < SocketMessage , SocketUser , SocketDMChannel , Task > Remarks This event is fired when a direct message is received. The event handler must return a and accept a SocketMessage , a SocketUser , and a SocketDMChannel as its parameters. The message that is sent to the client is passed into the event handler parameter as SocketMessage . This message may be a system message (i.e. SocketSystemMessage ) or a user message (i.e. SocketUserMessage . See the derived classes of SocketMessage for more details. The user that sent this direct message is passed into the event handler parameter as SocketUser . The source direct channel of the removed message will be passed into the SocketTextChannel parameter. DirectMessageUpdated Fired when a message is updated. Declaration public event Func<Cacheable<IMessage, Guid>, Cacheable<SocketMessage, Guid>, Cacheable<SocketUser, ulong>, Cacheable<SocketDMChannel, Guid>, Task> DirectMessageUpdated Event Type Func < Cacheable < IMessage , Guid >, Cacheable < SocketMessage , Guid >, Cacheable < SocketUser , UInt64 >, Cacheable < SocketDMChannel , Guid >, Task > Remarks This event is fired when a direct message is updated. The event handler must return a and accept a Cacheable<TEntity, TId> , a Cacheable<TEntity, TId> , a Cacheable<TEntity, TId> , and a Cacheable<TEntity, TId> as its parameters. important It is not possible to retrieve the direct message via DownloadAsync() ; the original direct message cannot be retrieved by Kook after the message has been updated. If caching is enabled via KookSocketConfig , the Cacheable<TEntity, TId> entity will contain the updated direct message; otherwise, in event that the message cannot be retrieved, the ID of the direct message is preserved in the . The user that originally sent this direct message is passed into the event handler parameter as Cacheable<TEntity, TId> , which contains a SocketGuildUser when the guild member presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member is preserved in the . If a direct message was sent by the current user to this user, or the recipient had sent a message before in current session, the Cacheable<TEntity, TId> entity will contains the direct message channel; otherwise, the direct message channel has not been created yet, and the as chat code will be preserved. DirectReactionAdded Fired when a reaction is added to a direct message. Declaration public event Func<Cacheable<IMessage, Guid>, Cacheable<IDMChannel, Guid>, Cacheable<SocketUser, ulong>, SocketReaction, Task> DirectReactionAdded Event Type Func < Cacheable < IMessage , Guid >, Cacheable < IDMChannel , Guid >, Cacheable < SocketUser , UInt64 >, SocketReaction , Task > Remarks This event is fired when a reaction is added to a user message in a private channel. The event handler must return a and accept a Cacheable<TEntity, TId> , a Cacheable<TEntity, TId> , a Cacheable<TEntity, TId> , and a SocketReaction as its parameter. If caching is enabled via KookSocketConfig , the Cacheable<TEntity, TId> entity will contain the original message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the . If a direct message was sent by the current user to this user, or the recipient had sent a message before in current session, the Cacheable<TEntity, TId> entity will contains the direct message channel; otherwise, the direct message channel has not been created yet, and the as chat code will be preserved. The user who removed the reaction will be passed into the Cacheable<TEntity, TId> . The reaction that was added will be passed into the SocketReaction parameter. note When fetching the reaction from this event, a user may not be provided under User . Please see the documentation of the property for more information. DirectReactionRemoved Fired when a reaction is removed from a message. Declaration public event Func<Cacheable<IMessage, Guid>, Cacheable<IDMChannel, Guid>, Cacheable<SocketUser, ulong>, SocketReaction, Task> DirectReactionRemoved Event Type Func < Cacheable < IMessage , Guid >, Cacheable < IDMChannel , Guid >, Cacheable < SocketUser , UInt64 >, SocketReaction , Task > Remarks This event is fired when a reaction is removed from a user message in a private channel. The event handler must return a and accept a Cacheable<TEntity, TId> , a Cacheable<TEntity, TId> , a Cacheable<TEntity, TId> , and a SocketReaction as its parameter. If caching is enabled via KookSocketConfig , the Cacheable<TEntity, TId> entity will contain the original message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the . If a direct message was sent by the current user to this user, or the recipient had sent a message before in current session, the Cacheable<TEntity, TId> entity will contains the direct message channel; otherwise, the direct message channel has not been created yet, and the as chat code will be preserved. The user who added the reaction will be passed into the Cacheable<TEntity, TId> . The reaction that was added will be passed into the SocketReaction parameter. note When fetching the reaction from this event, a user may not be provided under User . Please see the documentation of the property for more information. EmoteCreated Fired when an emote is created. Declaration public event Func<GuildEmote, SocketGuild, Task> EmoteCreated Event Type Func < GuildEmote , SocketGuild , Task > Remarks This event is fired when an emote is created. The event handler must return a and accept a GuildEmote and a SocketGuild as its parameter. The emote that is created is passed into the event handler parameter as GuildEmote . The guild where the emote is created is passed into the event handler parameter as SocketGuild . EmoteDeleted Fired when a emote is deleted. Declaration public event Func<GuildEmote, SocketGuild, Task> EmoteDeleted Event Type Func < GuildEmote , SocketGuild , Task > Remarks This event is fired when an emote is deleted. The event handler must return a and accept a GuildEmote and a SocketGuild as its parameter. The emote that is deleted is passed into the event handler parameter as GuildEmote . The guild where the emote is deleted is passed into the event handler parameter as SocketGuild . EmoteUpdated Fired when a emote is updated. Declaration public event Func<GuildEmote, GuildEmote, SocketGuild, Task> EmoteUpdated Event Type Func < GuildEmote , GuildEmote , SocketGuild , Task > Remarks This event is fired when an emote is updated. The event handler must return a and accept a GuildEmote , a GuildEmote and a SocketGuild as its parameter. The original emote entity is passed into the event handler parameter as GuildEmote . The updated emote entity is passed into the event handler parameter as GuildEmote . The guild where the emote is updated is passed into the event handler parameter as SocketGuild . GuildAvailable Fired when a guild becomes available. Declaration public event Func<SocketGuild, Task> GuildAvailable Event Type Func < SocketGuild , Task > Remarks This event is fired when a guild becomes available. The event handler must return a and accept a SocketGuild as its parameter. The guild that becomes available is passed into the event handler parameter as SocketGuild . GuildMemberOffline Fired when a guild member is offline. Declaration public event Func<IReadOnlyCollection<Cacheable<SocketGuildUser, ulong>>, DateTimeOffset, Task> GuildMemberOffline Event Type Func < IReadOnlyCollection < Cacheable < SocketGuildUser , UInt64 >>, DateTimeOffset , Task > Remarks This event is fired when a guild member is offline. The event handler must return a and accept a Cacheable<TEntity, TId> , and a as its parameter. The guild member that is offline is passed into the event handler parameter as Cacheable<TEntity, TId> , which contains the original SocketGuildUser when the guild member presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member is preserved in the . The time when the guild member is offline is passed into the event handler parameter as . GuildMemberOnline Fired when a guild member is online. Declaration public event Func<IReadOnlyCollection<Cacheable<SocketGuildUser, ulong>>, DateTimeOffset, Task> GuildMemberOnline Event Type Func < IReadOnlyCollection < Cacheable < SocketGuildUser , UInt64 >>, DateTimeOffset , Task > Remarks This event is fired when a guild member is online. The event handler must return a and accept a Cacheable<TEntity, TId> , and a as its parameter. The guild member that is online is passed into the event handler parameter as Cacheable<TEntity, TId> , which contains the original SocketGuildUser when the guild member presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member is preserved in the . The time when the guild member is online is passed into the event handler parameter as . GuildMemberUpdated Fired when a guild member is updated. Declaration public event Func<Cacheable<SocketGuildUser, ulong>, Cacheable<SocketGuildUser, ulong>, Task> GuildMemberUpdated Event Type Func < Cacheable < SocketGuildUser , UInt64 >, Cacheable < SocketGuildUser , UInt64 >, Task > Remarks This event is fired when a guild member is updated. The event handler must return a and accept a Cacheable<TEntity, TId> , and a Cacheable<TEntity, TId> as its parameter. important It is not possible to retrieve the guild member via DownloadAsync() ; the original guild member cannot be retrieved by Kook after the guild member has been updated. The guild member that is updated is passed into the event handler parameter as Cacheable<TEntity, TId> , which contains the original SocketGuildUser when the guild member presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member is preserved in the . The guild member that is updated is passed into the event handler parameter as Cacheable<TEntity, TId> , which contains a SocketGuildUser when the guild member presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member is preserved in the . GuildUnavailable Fired when a guild becomes unavailable. Declaration public event Func<SocketGuild, Task> GuildUnavailable Event Type Func < SocketGuild , Task > Remarks This event is fired when a guild becomes unavailable. The event handler must return a and accept a SocketGuild as its parameter. The guild that becomes unavailable is passed into the event handler parameter as SocketGuild . GuildUpdated Fired when a guild is updated. Declaration public event Func<SocketGuild, SocketGuild, Task> GuildUpdated Event Type Func < SocketGuild , SocketGuild , Task > Remarks This event is fired when a guild is updated. The event handler must return a and accept a SocketGuild , and a SocketGuild as its parameter. The guild before the update is passed into the event handler parameter as SocketGuild . The guild after the update is passed into the event handler parameter as SocketGuild . JoinedGuild Fired when the connected account joins a guild. Declaration public event Func<SocketGuild, Task> JoinedGuild Event Type Func < SocketGuild , Task > Remarks This event is fired when the connected account joins a guild. The event handler must return a and accept a SocketGuild as its parameter. The guild where the account joins is passed into the event handler parameter as SocketGuild . LeftGuild Fired when the connected account leaves a guild. Declaration public event Func<SocketGuild, Task> LeftGuild Event Type Func < SocketGuild , Task > Remarks This event is fired when the connected account leaves a guild. The event handler must return a and accept a SocketGuild as its parameter. important This parameter must be accessed within the current thread context. After waiting for completion of the task in this asynchronous event, the object passed to it will be disposed. The guild where the account leaves is passed into the event handler parameter as SocketGuild . MessageButtonClicked Fired when a button is clicked in a card message. Declaration public event Func<string, Cacheable<SocketGuildUser, ulong>, Cacheable<IMessage, Guid>, SocketTextChannel, Task> MessageButtonClicked Event Type Func < String , Cacheable < SocketGuildUser , UInt64 >, Cacheable < IMessage , Guid >, SocketTextChannel , Task > Remarks This event is fired when a button is clicked in a card message. The event handler must return a and accept a string , a Cacheable<TEntity, TId> , a Cacheable<TEntity, TId> , a SocketTextChannel , and a SocketGuild as its parameter. The button value is passed into the event handler parameter as string . The users who clicked the button is passed into the event handler parameter as Cacheable<TEntity, TId> , which contains a SocketUser when the user presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user is preserved in the . If caching is enabled via KookSocketConfig , the Cacheable<TEntity, TId> entity will contain the card message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the The channel where the button is clicked is passed into the event handler parameter as SocketTextChannel . MessageDeleted Fired when a message is deleted. Declaration public event Func<Cacheable<IMessage, Guid>, SocketTextChannel, Task> MessageDeleted Event Type Func < Cacheable < IMessage , Guid >, SocketTextChannel , Task > Remarks This event is fired when a message is deleted. The event handler must return a and accept a Cacheable<TEntity, TId> , and a SocketTextChannel as its parameter. important It is not possible to retrieve the message via DownloadAsync() ; the message cannot be retrieved by Kook after the message has been deleted. If caching is enabled via KookSocketConfig , the Cacheable<TEntity, TId> entity will contain the deleted message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the . The source channel of the removed message will be passed into the SocketTextChannel parameter. MessagePinned Fired when a message is pinned. Declaration public event Func<Cacheable<SocketMessage, Guid>, Cacheable<SocketMessage, Guid>, SocketTextChannel, Cacheable<SocketGuildUser, ulong>, Task> MessagePinned Event Type Func < Cacheable < SocketMessage , Guid >, Cacheable < SocketMessage , Guid >, SocketTextChannel , Cacheable < SocketGuildUser , UInt64 >, Task > Remarks This event is fired when a message is pinned. The event handler must return a and accept a Cacheable<TEntity, TId> , SocketMessage , and SocketTextChannel as its parameters. important It is not possible to retrieve the message via DownloadAsync() ; the original message cannot be retrieved by Kook after the message has been updated. If caching is enabled via KookSocketConfig , the Cacheable<TEntity, TId> entity will contain the original message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the . If caching is enabled via KookSocketConfig , the Cacheable<TEntity, TId> entity will contain the pinned message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the . The source channel of the updated message will be passed into the SocketTextChannel parameter. The guild member that pinned this message is passed into the event handler parameter as Cacheable<TEntity, TId> , which contains a SocketGuildUser when the guild member presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member is preserved in the . MessageReceived Fired when a message is received. Declaration public event Func<SocketMessage, SocketGuildUser, SocketTextChannel, Task> MessageReceived Event Type Func < SocketMessage , SocketGuildUser , SocketTextChannel , Task > Remarks This event is fired when a message is received. The event handler must return a and accept a SocketMessage , a SocketGuildUser , and a SocketTextChannel as its parameter. The message that is sent to the client is passed into the event handler parameter as SocketMessage . This message may be a system message (i.e. SocketSystemMessage ) or a user message (i.e. SocketUserMessage . See the derived classes of SocketMessage for more details. The guild member that sent this message is passed into the event handler parameter as SocketGuildUser . The source channel of the removed message will be passed into the SocketTextChannel parameter. MessageUnpinned Fired when a message is unpinned. Declaration public event Func<Cacheable<SocketMessage, Guid>, Cacheable<SocketMessage, Guid>, SocketTextChannel, Cacheable<SocketGuildUser, ulong>, Task> MessageUnpinned Event Type Func < Cacheable < SocketMessage , Guid >, Cacheable < SocketMessage , Guid >, SocketTextChannel , Cacheable < SocketGuildUser , UInt64 >, Task > Remarks This event is fired when a message is unpinned. The event handler must return a and accept a Cacheable<TEntity, TId> , SocketMessage , and SocketTextChannel as its parameters. important It is not possible to retrieve the message via DownloadAsync() ; the original message cannot be retrieved by Kook after the message has been updated. If caching is enabled via KookSocketConfig , the Cacheable<TEntity, TId> entity will contain the original message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the . If caching is enabled via KookSocketConfig , the Cacheable<TEntity, TId> entity will contain the unpinned message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the . The source channel of the updated message will be passed into the SocketTextChannel parameter. The guild member that unpinned this message is passed into the event handler parameter as Cacheable<TEntity, TId> , which contains a SocketGuildUser when the guild member presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member is preserved in the . MessageUpdated Fired when a message is updated. Declaration public event Func<Cacheable<SocketMessage, Guid>, Cacheable<SocketMessage, Guid>, SocketTextChannel, Task> MessageUpdated Event Type Func < Cacheable < SocketMessage , Guid >, Cacheable < SocketMessage , Guid >, SocketTextChannel , Task > Remarks This event is fired when a message is updated. The event handler must return a and accept a Cacheable<TEntity, TId> , a Cacheable<TEntity, TId> , and SocketTextChannel as its parameters. important It is not possible to retrieve the message via DownloadAsync() ; the original message cannot be retrieved by Kook after the message has been updated. If caching is enabled via KookSocketConfig , the Cacheable<TEntity, TId> entity will contain the original message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the . If caching is enabled via KookSocketConfig , the Cacheable<TEntity, TId> entity will contain the updated message; otherwise, in event that the entire message entity cannot be retrieved, the ID of the message is preserved in the . The source channel of the updated message will be passed into the SocketTextChannel parameter. ReactionAdded Fired when a reaction is added to a channel message. Declaration public event Func<Cacheable<IMessage, Guid>, SocketTextChannel, Cacheable<SocketGuildUser, ulong>, SocketReaction, Task> ReactionAdded Event Type Func < Cacheable < IMessage , Guid >, SocketTextChannel , Cacheable < SocketGuildUser , UInt64 >, SocketReaction , Task > Remarks This event is fired when a reaction is added to a message in a channel. The event handler must return a and accept a Cacheable<TEntity, TId> , an SocketTextChannel , a Cacheable<TEntity, TId> , and a SocketReaction as its parameter. If caching is enabled via KookSocketConfig , the Cacheable<TEntity, TId> entity will contain the original message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the The source channel of the reaction addition will be passed into the SocketTextChannel parameter. The user who added the reaction will be passed into the Cacheable<TEntity, TId> . The reaction that was added will be passed into the SocketReaction parameter. note When fetching the reaction from this event, a user may not be provided under User . Please see the documentation of the property for more information. ReactionRemoved Fired when a reaction is removed from a message. Declaration public event Func<Cacheable<IMessage, Guid>, SocketTextChannel, Cacheable<SocketGuildUser, ulong>, SocketReaction, Task> ReactionRemoved Event Type Func < Cacheable < IMessage , Guid >, SocketTextChannel , Cacheable < SocketGuildUser , UInt64 >, SocketReaction , Task > Remarks This event is fired when a reaction is removed from a message in a channel. The event handler must return a and accept a Cacheable<TEntity, TId> , an SocketTextChannel , a Cacheable<TEntity, TId> , and a SocketReaction as its parameter. If caching is enabled via KookSocketConfig , the Cacheable<TEntity, TId> entity will contain the original message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the The source channel of the reaction addition will be passed into the SocketTextChannel parameter. The user who removed the reaction will be passed into the Cacheable<TEntity, TId> . The reaction that was removed will be passed into the SocketReaction parameter. note When fetching the reaction from this event, a user may not be provided under User . Please see the documentation of the property for more information. RoleCreated Fired when a role is created. Declaration public event Func<SocketRole, Task> RoleCreated Event Type Func < SocketRole , Task > Remarks This event is fired when a role is created. The event handler must return a and accept a SocketRole as its parameter. The role that is created is passed into the event handler parameter as SocketRole . RoleDeleted Fired when a role is deleted. Declaration public event Func<SocketRole, Task> RoleDeleted Event Type Func < SocketRole , Task > Remarks This event is fired when a role is deleted. The event handler must return a and accept a SocketRole as its parameter. The role that is deleted is passed into the event handler parameter as SocketRole . RoleUpdated Fired when a role is updated. Declaration public event Func<SocketRole, SocketRole, Task> RoleUpdated Event Type Func < SocketRole , SocketRole , Task > Remarks This event is fired when a role is deleted. The event handler must return a and accept a SocketRole and a SocketRole as its parameter. The original role entity is passed into the event handler parameter as SocketRole . The updated role entity is passed into the event handler parameter as SocketRole . UserBanned Fired when a user is banned from a guild. Declaration public event Func<IReadOnlyCollection<Cacheable<SocketUser, ulong>>, Cacheable<SocketUser, ulong>, SocketGuild, string, Task> UserBanned Event Type Func < IReadOnlyCollection < Cacheable < SocketUser , UInt64 >>, Cacheable < SocketUser , UInt64 >, SocketGuild , String , Task > Remarks This event is fired when a user is banned. The event handler must return a and accept an , a SocketMessage , a string and a SocketGuild as its parameter. important It is not possible to retrieve the user via DownloadAsync() ; the original user cannot be retrieved by Kook after the user has been banned. The users that are banned are passed into the event handler parameter as , where T is Cacheable<TEntity, TId> , each of which contains a SocketUser when the user presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user is preserved in the . The users who operated the bans is passed into the event handler parameter as Cacheable<TEntity, TId> , which contains a SocketUser when the user presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user is preserved in the . The guild where the banning action takes place is passed in the event handler parameter as SocketGuild . The reason of the ban is passed into the event handler parameter as string . UserConnected Fired when a user connected to a voice channel. Declaration public event Func<Cacheable<SocketGuildUser, ulong>, SocketVoiceChannel, DateTimeOffset, Task> UserConnected Event Type Func < Cacheable < SocketGuildUser , UInt64 >, SocketVoiceChannel , DateTimeOffset , Task > Remarks This event is fired when a user connected to a voice channel. The event handler must return a and accept a Cacheable<TEntity, TId> , a SocketVoiceChannel , a SocketGuild , and a as its parameter. The user that connected to a voice channel is passed into the event handler parameter as Cacheable<TEntity, TId> , which contains the original SocketGuildUser when the user presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user is preserved in the . The voice channel that the user connected to is passed into the event handler parameter as SocketVoiceChannel . The time when the user is offline is passed into the event handler parameter as . UserDisconnected Fired when a user disconnected to a voice channel. Declaration public event Func<Cacheable<SocketGuildUser, ulong>, SocketVoiceChannel, DateTimeOffset, Task> UserDisconnected Event Type Func < Cacheable < SocketGuildUser , UInt64 >, SocketVoiceChannel , DateTimeOffset , Task > Remarks This event is fired when a user disconnected to a voice channel. The event handler must return a and accept a Cacheable<TEntity, TId> , a SocketVoiceChannel , a SocketGuild , and a as its parameter. The user that disconnected to a voice channel is passed into the event handler parameter as Cacheable<TEntity, TId> , which contains the original SocketGuildUser when the user presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user is preserved in the . The voice channel that the user disconnected to is passed into the event handler parameter as SocketVoiceChannel . The time when the user is offline is passed into the event handler parameter as . UserJoined Fired when a user joins a guild. Declaration public event Func<SocketGuildUser, DateTimeOffset, Task> UserJoined Event Type Func < SocketGuildUser , DateTimeOffset , Task > Remarks warning It is reported that this event will not be fired if a guild contains more than 2000 members. This event is fired when a user joins a guild. The event handler must return a and accept a SocketGuildUser and a as its parameters. The joined user will be passed into the SocketGuildUser parameter. The time at which the user joined the guild will be passed into the parameter. UserLeft Fired when a user leaves a guild. Declaration public event Func<SocketGuild, Cacheable<SocketUser, ulong>, DateTimeOffset, Task> UserLeft Event Type Func < SocketGuild , Cacheable < SocketUser , UInt64 >, DateTimeOffset , Task > Remarks warning It is reported that this event will not be fired if a guild contains more than 2000 members. This event is fired when a user leaves a guild. The event handler must return a and accept a SocketGuildUser and a as its parameters. If the left user presents in the cache, the Cacheable<TEntity, TId> entity will contain the left user; otherwise, in event that the user cannot be retrieved, the ID of the left user is preserved in the . The time at which the user left the guild will be passed into the parameter. UserUnbanned Fired when a user is unbanned from a guild. Declaration public event Func<IReadOnlyCollection<Cacheable<SocketUser, ulong>>, Cacheable<SocketUser, ulong>, SocketGuild, Task> UserUnbanned Event Type Func < IReadOnlyCollection < Cacheable < SocketUser , UInt64 >>, Cacheable < SocketUser , UInt64 >, SocketGuild , Task > Remarks This event is fired when a user is unbanned. The event handler must return a and accept an , a SocketMessage and a SocketGuild as its parameter. important It is not possible to retrieve the user via DownloadAsync() ; the original user cannot be retrieved by Kook after the user has been unbanned. The users that are unbanned are passed into the event handler parameter as , where T is Cacheable<TEntity, TId> , each of which contains a SocketUser when the user presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user is preserved in the . The users who operated the unbans is passed into the event handler parameter as Cacheable<TEntity, TId> , which contains a SocketUser when the user presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user is preserved in the . The guild where the unbanning action takes place is passed in the event handler parameter as SocketGuild . UserUpdated Fired when a user is updated. Declaration public event Func<Cacheable<SocketUser, ulong>, Cacheable<SocketUser, ulong>, Task> UserUpdated Event Type Func < Cacheable < SocketUser , UInt64 >, Cacheable < SocketUser , UInt64 >, Task > Remarks This event is fired when a user is updated. The event handler must return a and accept a Cacheable<TEntity, TId> , and a Cacheable<TEntity, TId> as its parameter. important It is not possible to retrieve the user via DownloadAsync() ; the original user cannot be retrieved by Kook after the user has been updated. The user that is updated is passed into the event handler parameter as Cacheable<TEntity, TId> , which contains the original SocketUser when the user presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user is preserved in the . The user that is updated is passed into the event handler parameter as Cacheable<TEntity, TId> , which contains a SocketUser when the user presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user is preserved in the ."
  },
  "api/Kook.WebSocket.BaseSocketClientExperimentalExtensions.html": {
    "href": "api/Kook.WebSocket.BaseSocketClientExperimentalExtensions.html",
    "title": "Class BaseSocketClientExperimentalExtensions | Kook.Net 文档",
    "keywords": "Class BaseSocketClientExperimentalExtensions Provides extension methods of experimental functionalities for s. Inheritance Object BaseSocketClientExperimentalExtensions Namespace : Kook.WebSocket Assembly : Kook.Net.Experimental.dll Syntax public static class BaseSocketClientExperimentalExtensions : object Methods CreateGuildAsync(BaseSocketClient, String, IVoiceRegion, Stream, Nullable<Int32>, RequestOptions) Creates a guild for the logged-in user. Declaration public static Task<RestGuild> CreateGuildAsync(this BaseSocketClient client, string name, IVoiceRegion region = null, Stream icon = null, int? templateId = null, RequestOptions options = null) Parameters BaseSocketClient client The KOOK rest client instance. String name The name of the new guild. IVoiceRegion region The voice region to create the guild with. Stream icon The icon of the new guild. Nullable < Int32 > templateId The identifier of the guild template to be used to create the new guild. RequestOptions options The options to be used when sending the request. Returns Task < RestGuild > A task that represents the asynchronous creation operation. The task result contains the created guild. Remarks This method creates a new guild on behalf of the logged-in user. warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable,and may be changed or removed in the future."
  },
  "api/Kook.WebSocket.GatewayReconnectException.html": {
    "href": "api/Kook.WebSocket.GatewayReconnectException.html",
    "title": "Class GatewayReconnectException | Kook.Net 文档",
    "keywords": "Class GatewayReconnectException The exception thrown when the gateway client has been requested to reconnect. Inheritance Object GatewayReconnectException Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public class GatewayReconnectException : Exception Constructors GatewayReconnectException(String) Initializes a new instance of the GatewayReconnectException class with the reconnection message. Declaration public GatewayReconnectException(string message) Parameters String message The reason why the gateway has been requested to reconnect."
  },
  "api/Kook.WebSocket.html": {
    "href": "api/Kook.WebSocket.html",
    "title": "Namespace Kook.WebSocket | Kook.Net 文档",
    "keywords": "Namespace Kook.WebSocket Classes BaseSocketClient Represents an abstract base class for WebSocket-based clients. BaseSocketClientExperimentalExtensions Provides extension methods of experimental functionalities for s. GatewayReconnectException The exception thrown when the gateway client has been requested to reconnect. KookSocketClient Represents a WebSocket-based KOOK client. KookSocketConfig Represents a configuration class for KookSocketClient . KookSocketRestClient Represents an REST-only client that is used in a WebSocket-based client. SocketCategoryChannel Represents a WebSocket-based category channel. SocketChannel Represents a WebSocket-based channel. SocketDMChannel Represents a WebSocket-based direct-message channel. SocketEntity<T> Represents a WebSocket-based entity. SocketGuild Represents a WebSocket-based guild object. SocketGuildChannel Represent a WebSocket-based guild channel. SocketGuildExperimentalExtensions Provides extension methods of experimental functionalities for s. SocketGuildUser Represents a WebSocket-based guild user. SocketInvite Represents a WebSocket-based invite to a guild. SocketMessage Represents a WebSocket-based message. SocketPokeAction Represents a single WebSocket-based poke action. SocketPresence Represents the WebSocket user's presence status. This may include their online status and their activity. SocketReaction Represents a WebSocket-based reaction. SocketRole Represents a WebSocket-based role to be given to a guild user. SocketSelfUser Represents the logged-in WebSocket-based user. SocketSystemMessage Represents a WebSocket-based message sent by the system. SocketTextChannel Represents a WebSocket-based channel in a guild that can send and receive messages. SocketUnknownUser Represents a WebSocket-based user that is yet to be recognized by the client. SocketUser Represents a WebSocket-based user. SocketUserMessage Represents a WebSocket-based message sent by a user. SocketVoiceChannel Represents a WebSocket-based voice channel in a guild. SocketVoiceChannelExperimentalExtensions Provides extension methods of experimental functionalities for s. Structs SocketVoiceState Represents a WebSocket user's voice connection status. Interfaces ISocketAudioChannel Represents a generic WebSocket-based audio channel. ISocketMessageChannel Represents a generic WebSocket-based channel that can send and receive messages. ISocketPrivateChannel Represents a generic WebSocket-based channel that is private to select recipients."
  },
  "api/Kook.WebSocket.ISocketAudioChannel.html": {
    "href": "api/Kook.WebSocket.ISocketAudioChannel.html",
    "title": "Interface ISocketAudioChannel | Kook.Net 文档",
    "keywords": "Interface ISocketAudioChannel Represents a generic WebSocket-based audio channel. Inherited Members IAudioChannel.IsVoiceRegionOverwritten IAudioChannel.VoiceRegion IAudioChannel.ServerUrl IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions) IEntity<UInt64>.Id Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public interface ISocketAudioChannel : IAudioChannel, IChannel, IEntity<ulong>"
  },
  "api/Kook.WebSocket.ISocketMessageChannel.html": {
    "href": "api/Kook.WebSocket.ISocketMessageChannel.html",
    "title": "Interface ISocketMessageChannel | Kook.Net 文档",
    "keywords": "Interface ISocketMessageChannel Represents a generic WebSocket-based channel that can send and receive messages. Inherited Members IMessageChannel.SendFileAsync(String, String, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(Stream, String, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(FileAttachment, IQuote, IUser, RequestOptions) IMessageChannel.SendTextAsync(String, IQuote, IUser, RequestOptions) IMessageChannel.SendCardAsync(ICard, IQuote, IUser, RequestOptions) Kook.IMessageChannel.SendCardsAsync(IEnumerable<>, Kook.IQuote, Kook.IUser, Kook.RequestOptions) IMessageChannel.GetMessageAsync(Guid, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(Int32, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(Guid, Direction, Int32, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions) IMessageChannel.DeleteMessageAsync(Guid, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) Kook.IMessageChannel.ModifyMessageAsync(Guid, Action<>, Kook.RequestOptions) IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions) IEntity<UInt64>.Id Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public interface ISocketMessageChannel : IMessageChannel, IChannel, IEntity<ulong> Properties CachedMessages Gets all messages in this channel's cache. Declaration IReadOnlyCollection<SocketMessage> CachedMessages { get; } Property Value IReadOnlyCollection < SocketMessage > A read-only collection of WebSocket-based messages. Methods GetCachedMessage(Guid) Gets a cached message from this channel. Declaration SocketMessage GetCachedMessage(Guid id) Parameters Guid id The Guid of the message. Returns SocketMessage A WebSocket-based message object; null if it does not exist in the cache or if caching is not enabled. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return null . Please refer to MessageCacheSize for more details. This method retrieves the message from the local WebSocket cache and does not send any additional request to Kook. This message may be a message that has been deleted. GetCachedMessages(Guid, Direction, Int32) Gets the last N cached messages starting from a certain message in this message channel. Declaration IReadOnlyCollection<SocketMessage> GetCachedMessages(Guid fromMessageId, Direction dir, int limit = null) Parameters Guid fromMessageId The message ID to start the fetching from. Direction dir The direction of which the message should be gotten from. Int32 limit The number of messages to get. Returns IReadOnlyCollection < SocketMessage > A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Kook. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetCachedMessages(IMessage, Direction, Int32) Gets the last N cached messages starting from a certain message in this message channel. Declaration IReadOnlyCollection<SocketMessage> GetCachedMessages(IMessage fromMessage, Direction dir, int limit = null) Parameters IMessage fromMessage The message to start the fetching from. Direction dir The direction of which the message should be gotten from. Int32 limit The number of messages to get. Returns IReadOnlyCollection < SocketMessage > A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Kook. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetCachedMessages(Int32) Gets the last N cached messages from this message channel. Declaration IReadOnlyCollection<SocketMessage> GetCachedMessages(int limit = null) Parameters Int32 limit The number of messages to get. Returns IReadOnlyCollection < SocketMessage > A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Kook. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set."
  },
  "api/Kook.WebSocket.ISocketPrivateChannel.html": {
    "href": "api/Kook.WebSocket.ISocketPrivateChannel.html",
    "title": "Interface ISocketPrivateChannel | Kook.Net 文档",
    "keywords": "Interface ISocketPrivateChannel Represents a generic WebSocket-based channel that is private to select recipients. Inherited Members IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions) IEntity<UInt64>.Id Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public interface ISocketPrivateChannel : IPrivateChannel, IChannel, IEntity<ulong> Properties Recipients Gets the users that can access this channel. Declaration IReadOnlyCollection<SocketUser> Recipients { get; } Property Value IReadOnlyCollection < SocketUser > A read-only collection of users that can access this channel."
  },
  "api/Kook.WebSocket.KookSocketClient.html": {
    "href": "api/Kook.WebSocket.KookSocketClient.html",
    "title": "Class KookSocketClient | Kook.Net 文档",
    "keywords": "Class KookSocketClient Represents a WebSocket-based KOOK client. Inheritance Object BaseKookClient BaseSocketClient KookSocketClient Inherited Members BaseSocketClient._baseConfig BaseSocketClient.CurrentUser BaseSocketClient.ChannelCreated BaseSocketClient.ChannelDestroyed BaseSocketClient.ChannelUpdated BaseSocketClient.ReactionAdded BaseSocketClient.ReactionRemoved BaseSocketClient.DirectReactionAdded BaseSocketClient.DirectReactionRemoved BaseSocketClient.MessageReceived BaseSocketClient.MessageDeleted BaseSocketClient.MessageUpdated BaseSocketClient.MessagePinned BaseSocketClient.MessageUnpinned BaseSocketClient.DirectMessageReceived BaseSocketClient.DirectMessageDeleted BaseSocketClient.DirectMessageUpdated BaseSocketClient.UserJoined BaseSocketClient.UserLeft BaseSocketClient.UserBanned BaseSocketClient.UserUnbanned BaseSocketClient.UserUpdated BaseSocketClient.CurrentUserUpdated BaseSocketClient.GuildMemberUpdated BaseSocketClient.GuildMemberOnline BaseSocketClient.GuildMemberOffline BaseSocketClient.UserConnected BaseSocketClient.UserDisconnected BaseSocketClient.RoleCreated BaseSocketClient.RoleDeleted BaseSocketClient.RoleUpdated BaseSocketClient.EmoteCreated BaseSocketClient.EmoteDeleted BaseSocketClient.EmoteUpdated BaseSocketClient.JoinedGuild BaseSocketClient.LeftGuild BaseSocketClient.GuildUpdated BaseSocketClient.GuildAvailable BaseSocketClient.GuildUnavailable BaseSocketClient.MessageButtonClicked BaseSocketClient.DirectMessageButtonClicked BaseKookClient.Log BaseKookClient.LoggedIn BaseKookClient.LoggedOut BaseKookClient.LoginState BaseKookClient.TokenType BaseKookClient.Dispose() BaseKookClient.LoginAsync(TokenType, String, Boolean) BaseKookClient.LogoutAsync() BaseKookClient.IKookClient.ConnectionState BaseKookClient.IKookClient.CurrentUser Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public class KookSocketClient : BaseSocketClient, IKookClient, IDisposable Constructors KookSocketClient() Initializes a new REST/WebSocket-based Kook client. Declaration public KookSocketClient() KookSocketClient(KookSocketConfig) Initializes a new REST/WebSocket-based Kook client with the provided configuration. Declaration public KookSocketClient(KookSocketConfig config) Parameters KookSocketConfig config The configuration to be used with the client. Properties ConnectionState Gets the current state of connection. Declaration public ConnectionState ConnectionState { get; } Property Value ConnectionState Implements IKookClient.ConnectionState DMChannels Gets a collection of direct message channels opened in this session. Declaration public IReadOnlyCollection<SocketDMChannel> DMChannels { get; } Property Value IReadOnlyCollection < SocketDMChannel > A collection of DM channels that have been opened in this session. Remarks This method returns a collection of currently opened direct message channels. warning This method will not return previously opened DM channels outside of the current session! If you have just started the client, this may return an empty collection. Guilds Gets a collection of guilds that the user is currently in. Declaration public override IReadOnlyCollection<SocketGuild> Guilds { get; } Property Value IReadOnlyCollection < SocketGuild > A read-only collection of guilds that the current user is in. Overrides BaseSocketClient.Guilds Latency Gets the estimated round-trip latency, in milliseconds, to the gateway server. Declaration public override int Latency { get; protected set; } Property Value Int32 An int that represents the round-trip latency to the WebSocket server. Please note that this value does not represent a \"true\" latency for operations such as sending a message. Overrides BaseSocketClient.Latency Rest Provides access to a REST-only client with a shared state from this client. Declaration public override KookSocketRestClient Rest { get; } Property Value KookSocketRestClient Overrides BaseSocketClient.Rest Methods DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>, RequestOptions) Downloads all boost subscriptions for the specified guilds. Declaration public override Task DownloadBoostSubscriptionsAsync(IEnumerable<IGuild> guilds = null, RequestOptions options = null) Parameters IEnumerable < IGuild > guilds The guilds to download the boost subscriptions for. If null , all available guilds will be downloaded. To download all boost subscriptions, the current user must has the ManageGuild permission. RequestOptions options The options to be used when sending the request. Returns Task Overrides BaseSocketClient.DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>, RequestOptions) DownloadUsersAsync(IEnumerable<IGuild>, RequestOptions) Downloads all users for the specified guilds. Declaration public override Task DownloadUsersAsync(IEnumerable<IGuild> guilds = null, RequestOptions options = null) Parameters IEnumerable < IGuild > guilds The guilds to download the users for. If null , all available guilds will be downloaded. RequestOptions options The options to be used when sending the request. Returns Task Overrides BaseSocketClient.DownloadUsersAsync(IEnumerable<IGuild>, RequestOptions) DownloadVoiceStatesAsync(IEnumerable<IGuild>, RequestOptions) Downloads all voice states for the specified guilds. Declaration public override Task DownloadVoiceStatesAsync(IEnumerable<IGuild> guilds = null, RequestOptions options = null) Parameters IEnumerable < IGuild > guilds The guilds to download the voice states for. If null , all available guilds will be downloaded. RequestOptions options The options to be used when sending the request. Returns Task Overrides BaseSocketClient.DownloadVoiceStatesAsync(IEnumerable<IGuild>, RequestOptions) GetChannel(UInt64) Gets a channel. Declaration public override SocketChannel GetChannel(ulong id) Parameters UInt64 id The identifier of the channel. Returns SocketChannel A generic WebSocket-based channel object (voice, text, category, etc.) associated with the identifier; null when the channel cannot be found. Overrides BaseSocketClient.GetChannel(UInt64) GetChannelAsync(UInt64, RequestOptions) Gets a generic channel from the cache or does a rest request if unavailable. Declaration public Task<IChannel> GetChannelAsync(ulong id, RequestOptions options = null) Parameters UInt64 id The identifier of the channel. RequestOptions options The options to be used when sending the request. Returns Task < IChannel > A task that represents the asynchronous get operation. The task result contains the channel associated with the identifier; null when the channel cannot be found. GetDMChannel(Guid) Gets a channel. Declaration public override SocketDMChannel GetDMChannel(Guid chatCode) Parameters Guid chatCode The chat code of the direct-message channel. Returns SocketDMChannel A generic WebSocket-based channel object (voice, text, category, etc.) associated with the identifier; null when the channel cannot be found. Overrides BaseSocketClient.GetDMChannel(Guid) GetDMChannel(UInt64) Gets a channel. Declaration public override SocketDMChannel GetDMChannel(ulong userId) Parameters UInt64 userId The user identifier of the direct-message channel. Returns SocketDMChannel A generic WebSocket-based channel object (voice, text, category, etc.) associated with the identifier; null when the channel cannot be found. Overrides BaseSocketClient.GetDMChannel(UInt64) GetDMChannelAsync(Guid, RequestOptions) Gets a direct message channel from the cache or does a rest request if unavailable. Declaration public Task<IDMChannel> GetDMChannelAsync(Guid chatCode, RequestOptions options = null) Parameters Guid chatCode The identifier of the channel. RequestOptions options The options to be used when sending the request. Returns Task < IDMChannel > A task that represents the asynchronous get operation. The task result contains the channel associated with the identifier; null when the channel cannot be found. GetDMChannelsAsync(RequestOptions) Gets a collection of direct message channels from the cache or does a rest request if unavailable. Declaration public Task<IReadOnlyCollection<IDMChannel>> GetDMChannelsAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < IDMChannel >> A task that represents the asynchronous get operation. The task result contains the channel associated with the identifier; null when the channel cannot be found. GetGuild(UInt64) Gets a guild. Declaration public override SocketGuild GetGuild(ulong id) Parameters UInt64 id The guild identifier. Returns SocketGuild A WebSocket-based guild associated with the identifier; null when the guild cannot be found. Overrides BaseSocketClient.GetGuild(UInt64) GetUser(String, String) Gets a user. Declaration public override SocketUser GetUser(string username, string identifyNumber) Parameters String username The name of the user. String identifyNumber The identify value of the user. Returns SocketUser A generic WebSocket-based user; null when the user cannot be found. Overrides BaseSocketClient.GetUser(String, String) Remarks This method gets the user present in the WebSocket cache with the given condition. warning Sometimes a user may return null due to Kook not sending offline users in large guilds (i.e. guild with 100+ members) actively. To download users on startup and to see more information about this subject, see AlwaysDownloadUsers . note This method does not attempt to fetch users that the logged-in user does not have access to (i.e. users who don't share mutual guild(s) with the current user). If you wish to get a user that you do not have access to, consider using the REST implementation of . GetUser(UInt64) Gets a generic user. Declaration public override SocketUser GetUser(ulong id) Parameters UInt64 id The user ID. Returns SocketUser A generic WebSocket-based user; null when the user cannot be found. Overrides BaseSocketClient.GetUser(UInt64) Remarks This method gets the user present in the WebSocket cache with the given condition. warning Sometimes a user may return null due to Kook not sending offline users in large guilds (i.e. guild with 100+ members) actively. To download users on startup and to see more information about this subject, see AlwaysDownloadUsers . note This method does not attempt to fetch users that the logged-in user does not have access to (i.e. users who don't share mutual guild(s) with the current user). If you wish to get a user that you do not have access to, consider using the REST implementation of . GetUserAsync(UInt64, RequestOptions) Gets a user from the cache or does a rest request if unavailable. Declaration public Task<IUser> GetUserAsync(ulong id, RequestOptions options = null) Parameters UInt64 id The identifier of the user (e.g. 168693960628371456 ). RequestOptions options The options to be used when sending the request. Returns Task < IUser > A task that represents the asynchronous get operation. The task result contains the user associated with the identifier; null if the user is not found. StartAsync() Starts the WebSocket connection. Declaration public override Task StartAsync() Returns Task A task that represents the asynchronous start operation. Overrides BaseSocketClient.StartAsync() StopAsync() Stops the WebSocket connection. Declaration public override Task StopAsync() Returns Task A task that represents the asynchronous stop operation. Overrides BaseSocketClient.StopAsync() Events Connected Fired when connected to the Kook gateway. Declaration public event Func<Task> Connected Event Type Func < Task > Disconnected Fired when disconnected to the Kook gateway. Declaration public event Func<Exception, Task> Disconnected Event Type Func < Exception , Task > LatencyUpdated Fired when a heartbeat is received from the Kook gateway. Declaration public event Func<int, int, Task> LatencyUpdated Event Type Func < Int32 , Int32 , Task > Ready Fired when guild data has finished downloading. Declaration public event Func<Task> Ready Event Type Func < Task > Remarks warning Because guilds may contain a large amount of members, this event will not wait for all users, subscriptions, and voice states to be downloaded. It will only wait for guilds, channels, roles, and emojis to be downloaded."
  },
  "api/Kook.WebSocket.KookSocketConfig.html": {
    "href": "api/Kook.WebSocket.KookSocketConfig.html",
    "title": "Class KookSocketConfig | Kook.Net 文档",
    "keywords": "Class KookSocketConfig Represents a configuration class for KookSocketClient . Inheritance Object KookConfig KookRestConfig KookSocketConfig Inherited Members KookRestConfig.RestClientProvider KookConfig.APIVersion KookConfig.Version KookConfig.UserAgent KookConfig.AcceptLanguage KookConfig.APIUrl KookConfig.DefaultRequestTimeout KookConfig.MaxMessageSize KookConfig.MaxUsersPerBatch KookConfig.MaxMessagesPerBatch KookConfig.MaxItemsPerBatchByDefault KookConfig.MinNicknameSize KookConfig.MaxNicknameSize KookConfig.MinIntimacyScore KookConfig.MaxIntimacyScore KookConfig.BoostPackDuration KookConfig.DefaultRetryMode KookConfig.DefaultRatelimitCallback KookConfig.LogLevel KookConfig.FormatUsersInBidirectionalUnicode Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public class KookSocketConfig : KookRestConfig Remarks This configuration, based on KookRestConfig , helps determine several key configurations the socket client depend on. For instance, message cache and connection timeout. Examples The following config enables the message cache and configures the client to always download user upon guild availability. var config = new KookSocketConfig { AlwaysDownloadUsers = true, MessageCacheSize = 100 }; var client = new KookSocketClient(config); Constructors KookSocketConfig() Initializes a new instance of the KookSocketConfig class. Declaration public KookSocketConfig() Fields GatewayEncoding Returns the encoding gateway should use. Declaration public const string GatewayEncoding = null Field Value String HeartbeatIntervalMilliseconds Gets the heartbeat interval of WebSocket connection in milliseconds. Declaration public const int HeartbeatIntervalMilliseconds = null Field Value Int32 Properties AlwaysDownloadBoostSubscriptions Gets or sets whether or not all boost subscriptions should be downloaded as guilds come available. Declaration public bool AlwaysDownloadBoostSubscriptions { get; set; } Property Value Boolean Remarks note Setting this property to true will cause the client to download all boost subscriptions for all guilds upon startup and when GuildUpdated is triggered with changes occurring to BoostSubscriptionCount . Please note that it can be difficult to fill the cache completely on large guilds depending on the traffic. If you are experiencing issues, try setting this to false and manually call DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>, RequestOptions) on the guilds you want. AlwaysDownloadUsers Gets or sets whether or not all users should be downloaded as guilds come available. Declaration public bool AlwaysDownloadUsers { get; set; } Property Value Boolean Remarks note Setting this property to true will cause the client to download all users for all guilds upon startup. Please note that it can be difficult to fill the cache completely on large guilds depending on the traffic. If you are experiencing issues, try setting this to false and manually call DownloadUsersAsync(IEnumerable<IGuild>, RequestOptions) on the guilds you want. AlwaysDownloadVoiceStates Gets or sets whether or not all voice states should be downloaded as guilds come available. Declaration public bool AlwaysDownloadVoiceStates { get; set; } Property Value Boolean Remarks note Setting this property to true will cause the client to download all voice states for all guilds upon startup. Please note that it can be difficult to fill the cache completely on large guilds depending on the traffic. If you are experiencing issues, try setting this to false and manually call DownloadVoiceStatesAsync(IEnumerable<IGuild>, RequestOptions) on the guilds you want. ConnectionTimeout Gets or sets the time, in milliseconds, to wait for a connection to complete before aborting. Declaration public int ConnectionTimeout { get; set; } Property Value Int32 GatewayHost Gets or sets the WebSocket host to connect to. If null , the client will use the /gateway endpoint. Declaration public string GatewayHost { get; set; } Property Value String HandlerTimeout Gets or sets the timeout for event handlers, in milliseconds, after which a warning will be logged. Setting this property to null disables this check. Declaration public int? HandlerTimeout { get; set; } Property Value Nullable < Int32 > JoinedGuildDataFetchingRetryDelay Gets or sets the delay in milliseconds between each retry of fetching joined guild data. Declaration public int JoinedGuildDataFetchingRetryDelay { get; set; } Property Value Int32 MaxJoinedGuildDataFetchingRetryTimes Gets or sets the maximum number of times to retry fetching joined guild data. Declaration public int MaxJoinedGuildDataFetchingRetryTimes { get; set; } Property Value Int32 Remarks Due to the KOOK API cannot return the newly joined guilds immediately well, this property is used to control the maximum number of times to retry fetching joined guild data. Each retry will be delayed by JoinedGuildDataFetchingRetryDelay milliseconds. Set to 0 or negative value to disable retrying. MaxWaitBetweenGuildAvailablesBeforeReady Gets or sets the maximum wait time in milliseconds between GUILD_AVAILABLE events before firing READY. If zero, READY will fire as soon as it is received and all guilds will be unavailable. Declaration public int MaxWaitBetweenGuildAvailablesBeforeReady { get; set; } Property Value Int32 An int representing the maximum wait time in milliseconds between GUILD_AVAILABLE events before firing READY. Remarks This property is measured in milliseconds; negative values will throw an exception. If a guild is not received before READY, it will be unavailable. MessageCacheSize Gets or sets the number of messages per channel that should be kept in cache. Setting this to zero disables the message cache entirely. Declaration public int MessageCacheSize { get; set; } Property Value Int32 UdpSocketProvider Gets or sets the provider used to generate new UDP sockets. Declaration public UdpSocketProvider UdpSocketProvider { get; set; } Property Value UdpSocketProvider WebSocketProvider Gets or sets the provider used to generate new WebSocket connections. Declaration public WebSocketProvider WebSocketProvider { get; set; } Property Value WebSocketProvider"
  },
  "api/Kook.WebSocket.KookSocketRestClient.html": {
    "href": "api/Kook.WebSocket.KookSocketRestClient.html",
    "title": "Class KookSocketRestClient | Kook.Net 文档",
    "keywords": "Class KookSocketRestClient Represents an REST-only client that is used in a WebSocket-based client. Inheritance Object BaseKookClient KookRestClient KookSocketRestClient Inherited Members KookRestClient.CurrentUser KookRestClient.GetGuildAsync(UInt64, RequestOptions) KookRestClient.GetGuildsAsync(RequestOptions) KookRestClient.GetChannelAsync(UInt64, RequestOptions) KookRestClient.GetDMChannelAsync(Guid, RequestOptions) KookRestClient.GetDMChannelsAsync(RequestOptions) KookRestClient.AddRoleAsync(UInt64, UInt64, UInt32) KookRestClient.RemoveRoleAsync(UInt64, UInt64, UInt32) KookRestClient.GetUserAsync(UInt64, RequestOptions) KookRestClient.GetGuildUserAsync(UInt64, UInt64, RequestOptions) KookRestClient.GetFriendsAsync(RequestOptions) KookRestClient.GetFriendRequestsAsync(RequestOptions) KookRestClient.GetBlockedUsersAsync(RequestOptions) KookRestClient.AddReactionAsync(Guid, IEmote, RequestOptions) KookRestClient.RemoveReactionAsync(Guid, UInt64, IEmote, RequestOptions) KookRestClient.AddDirectMessageReactionAsync(Guid, IEmote, RequestOptions) KookRestClient.RemoveDirectMessageReactionAsync(Guid, UInt64, IEmote, RequestOptions) KookRestClient.CreateAssetAsync(String, String, RequestOptions) KookRestClient.CreateAssetAsync(Stream, String, RequestOptions) KookRestClient.GetGamesAsync(Nullable<GameCreationSource>, RequestOptions) KookRestClient.CreateGameAsync(String, String, String, RequestOptions) BaseKookClient.Log BaseKookClient.LoggedIn BaseKookClient.LoggedOut BaseKookClient.LoginState BaseKookClient.TokenType BaseKookClient.Dispose() BaseKookClient.IKookClient.ConnectionState BaseKookClient.IKookClient.CurrentUser Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public class KookSocketRestClient : KookRestClient, IKookClient, IDisposable Methods LoginAsync(TokenType, String, Boolean) Throws a when trying to log in. Declaration public Task LoginAsync(TokenType tokenType, string token, bool validateToken = true) Parameters TokenType tokenType String token Boolean validateToken Returns Task LogoutAsync() Throws a when trying to log out. Declaration public Task LogoutAsync() Returns Task"
  },
  "api/Kook.WebSocket.SocketCategoryChannel.html": {
    "href": "api/Kook.WebSocket.SocketCategoryChannel.html",
    "title": "Class SocketCategoryChannel | Kook.Net 文档",
    "keywords": "Class SocketCategoryChannel Represents a WebSocket-based category channel. Inheritance Object SocketEntity < UInt64 > SocketChannel SocketGuildChannel SocketCategoryChannel Inherited Members SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Position SocketGuildChannel.Type SocketGuildChannel.CreatorId SocketGuildChannel.Creator SocketGuildChannel.RolePermissionOverwrites SocketGuildChannel.UserPermissionOverwrites SocketGuildChannel.UpdateAsync(RequestOptions) SocketGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) SocketGuildChannel.DeleteAsync(RequestOptions) SocketGuildChannel.GetPermissionOverwrite(IUser) SocketGuildChannel.GetPermissionOverwrite(IRole) SocketGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) SocketGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) SocketGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) SocketGuildChannel.ToString() SocketGuildChannel.IGuildChannel.Guild SocketEntity<UInt64>.Id Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public class SocketCategoryChannel : SocketGuildChannel, IEntity<ulong>, IUpdateable, ICategoryChannel, IGuildChannel, IChannel, IEntity<ulong>, IDeletable Properties Channels Gets the child channels of this category. Declaration public IReadOnlyCollection<SocketGuildChannel> Channels { get; } Property Value IReadOnlyCollection < SocketGuildChannel > A read-only collection of SocketGuildChannel whose CategoryId matches the identifier of this category channel. Users Gets a collection of users that are able to view the channel. Declaration public override IReadOnlyCollection<SocketGuildUser> Users { get; } Property Value IReadOnlyCollection < SocketGuildUser > A read-only collection of users that can access the channel (i.e. the users seen in the user list). Overrides SocketGuildChannel.Users Methods GetUser(UInt64) Gets a SocketGuildUser from this channel. Declaration public override SocketGuildUser GetUser(ulong id) Parameters UInt64 id The user's identifier. Returns SocketGuildUser A SocketGuildUser with the provided identifier; null if none is found. Overrides SocketGuildChannel.GetUser(UInt64)"
  },
  "api/Kook.WebSocket.SocketChannel.html": {
    "href": "api/Kook.WebSocket.SocketChannel.html",
    "title": "Class SocketChannel | Kook.Net 文档",
    "keywords": "Class SocketChannel Represents a WebSocket-based channel. Inheritance Object SocketEntity < UInt64 > SocketChannel SocketDMChannel SocketGuildChannel Inherited Members SocketEntity<UInt64>.Id Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public abstract class SocketChannel : SocketEntity<ulong>, IEntity<ulong>, IChannel, IEntity<ulong>, IUpdateable Properties Users Gets a collection of users from the WebSocket cache. Declaration public IReadOnlyCollection<SocketUser> Users { get; } Property Value IReadOnlyCollection < SocketUser > Methods GetUser(UInt64) Gets a generic user from this channel. Declaration public SocketUser GetUser(ulong id) Parameters UInt64 id The identifier of the user. Returns SocketUser A generic WebSocket-based user associated with the identifier. UpdateAsync(RequestOptions) Declaration public virtual Task UpdateAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task"
  },
  "api/Kook.WebSocket.SocketDMChannel.html": {
    "href": "api/Kook.WebSocket.SocketDMChannel.html",
    "title": "Class SocketDMChannel | Kook.Net 文档",
    "keywords": "Class SocketDMChannel Represents a WebSocket-based direct-message channel. Inheritance Object SocketEntity < UInt64 > SocketChannel SocketDMChannel Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public class SocketDMChannel : SocketChannel, IEntity<ulong>, IUpdateable, IDMChannel, IEntity<Guid>, ISocketPrivateChannel, IPrivateChannel, ISocketMessageChannel, IMessageChannel, IChannel, IEntity<ulong> Properties CachedMessages Gets all messages in this channel's cache. Declaration public IReadOnlyCollection<SocketMessage> CachedMessages { get; } Property Value IReadOnlyCollection < SocketMessage > A read-only collection of WebSocket-based messages. Implements ISocketMessageChannel.CachedMessages ChatCode Declaration public Guid ChatCode { get; } Property Value Guid Remarks This property is the same as Id . Id Get the identifier of the DM channel. Declaration public Guid Id { get; } Property Value Guid Remarks This property is the same as ChatCode . Recipient Gets the recipient of the channel. Declaration public SocketUser Recipient { get; } Property Value SocketUser Users Gets a collection that is the current logged-in user and the recipient. Declaration public IReadOnlyCollection<SocketUser> Users { get; } Property Value IReadOnlyCollection < SocketUser > Methods CloseAsync(RequestOptions) Declaration public Task CloseAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task DeleteMessageAsync(Guid, RequestOptions) Declaration public Task DeleteMessageAsync(Guid messageId, RequestOptions options = null) Parameters Guid messageId RequestOptions options Returns Task DeleteMessageAsync(IMessage, RequestOptions) Declaration public Task DeleteMessageAsync(IMessage message, RequestOptions options = null) Parameters IMessage message RequestOptions options Returns Task GetCachedMessage(Guid) Gets a cached message from this channel. Declaration public SocketMessage GetCachedMessage(Guid id) Parameters Guid id The Guid of the message. Returns SocketMessage A WebSocket-based message object; null if it does not exist in the cache or if caching is not enabled. Implements ISocketMessageChannel.GetCachedMessage(Guid) Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return null . Please refer to MessageCacheSize for more details. This method retrieves the message from the local WebSocket cache and does not send any additional request to Kook. This message may be a message that has been deleted. GetCachedMessages(Guid, Direction, Int32) Gets the last N cached messages starting from a certain message in this message channel. Declaration public IReadOnlyCollection<SocketMessage> GetCachedMessages(Guid fromMessageId, Direction dir, int limit = null) Parameters Guid fromMessageId The message ID to start the fetching from. Direction dir The direction of which the message should be gotten from. Int32 limit The number of messages to get. Returns IReadOnlyCollection < SocketMessage > A read-only collection of WebSocket-based messages. Implements ISocketMessageChannel.GetCachedMessages(Guid, Direction, Int32) Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Kook. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetCachedMessages(IMessage, Direction, Int32) Gets the last N cached messages starting from a certain message in this message channel. Declaration public IReadOnlyCollection<SocketMessage> GetCachedMessages(IMessage fromMessage, Direction dir, int limit = null) Parameters IMessage fromMessage The message to start the fetching from. Direction dir The direction of which the message should be gotten from. Int32 limit The number of messages to get. Returns IReadOnlyCollection < SocketMessage > A read-only collection of WebSocket-based messages. Implements ISocketMessageChannel.GetCachedMessages(IMessage, Direction, Int32) Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Kook. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetCachedMessages(Int32) Gets the last N cached messages from this message channel. Declaration public IReadOnlyCollection<SocketMessage> GetCachedMessages(int limit = null) Parameters Int32 limit The number of messages to get. Returns IReadOnlyCollection < SocketMessage > A read-only collection of WebSocket-based messages. Implements ISocketMessageChannel.GetCachedMessages(Int32) Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Kook. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetMessageAsync(Guid, RequestOptions) Gets the message associated with the given id . Declaration public Task<IMessage> GetMessageAsync(Guid id, RequestOptions options = null) Parameters Guid id TThe ID of the message. RequestOptions options The options to be used when sending the request. Returns Task < IMessage > The message gotten from either the cache or the download, or null if none is found. GetMessagesAsync(Guid, Direction, Int32, RequestOptions) Gets a collection of messages in this channel. Declaration public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = null, RequestOptions options = null) Parameters Guid referenceMessageId The ID of the starting message to get the messages from. Direction dir The direction of the messages to be gotten from. Int32 limit The numbers of message to be gotten from. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < IMessage >> Paged collection of messages. Remarks This method follows the same behavior as described in . Please visit its documentation for more details on this method. GetMessagesAsync(IMessage, Direction, Int32, RequestOptions) Gets a collection of messages in this channel. Declaration public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = null, RequestOptions options = null) Parameters IMessage referenceMessage The starting message to get the messages from. Direction dir The direction of the messages to be gotten from. Int32 limit The numbers of message to be gotten from. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < IMessage >> Paged collection of messages. Remarks This method follows the same behavior as described in . Please visit its documentation for more details on this method. GetMessagesAsync(Int32, RequestOptions) Gets the last N messages from this message channel. Declaration public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(int limit = null, RequestOptions options = null) Parameters Int32 limit The numbers of message to be gotten from. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < IMessage >> Paged collection of messages. Remarks This method follows the same behavior as described in . Please visit its documentation for more details on this method. GetUser(UInt64) Gets a user in this channel from the provided id . Declaration public SocketUser GetUser(ulong id) Parameters UInt64 id The identifier of the user. Returns SocketUser A SocketUser object that is a recipient of this channel; otherwise null . ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions) Declaration public Task ModifyMessageAsync(Guid messageId, Action<MessageProperties> func, RequestOptions options = null) Parameters Guid messageId Action < MessageProperties > func RequestOptions options Returns Task SendCardAsync(ICard, IQuote, RequestOptions) Sends a card message to this message channel. Declaration public Task<Cacheable<IUserMessage, Guid>> SendCardAsync(ICard card, IQuote quote = null, RequestOptions options = null) Parameters ICard card The card to be sent. IQuote quote The message quote to be included. Used to reply to specific messages. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendCardsAsync(IEnumerable<ICard>, IQuote, RequestOptions) Sends a card message to this message channel. Declaration public Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(IEnumerable<ICard> cards, IQuote quote = null, RequestOptions options = null) Parameters IEnumerable < ICard > cards The cards to be sent. IQuote quote The message quote to be included. Used to reply to specific messages. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendFileAsync(FileAttachment, IQuote, RequestOptions) Sends a file to this message channel. Declaration public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(FileAttachment attachment, IQuote quote = null, RequestOptions options = null) Parameters FileAttachment attachment The attachment containing the file. IQuote quote The message quote to be included. Used to reply to specific messages. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendFileAsync(Stream, String, AttachmentType, IQuote, RequestOptions) Sends a file to this message channel. Declaration public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(Stream stream, string fileName = null, AttachmentType type = AttachmentType.File, IQuote quote = null, RequestOptions options = null) Parameters Stream stream The stream of the file. String fileName The name of the file. AttachmentType type The type of the file. IQuote quote The message quote to be included. Used to reply to specific messages. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendFileAsync(String, String, AttachmentType, IQuote, RequestOptions) Sends a file to this message channel. Declaration public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(string path, string fileName = null, AttachmentType type = AttachmentType.File, IQuote quote = null, RequestOptions options = null) Parameters String path The file path of the file. String fileName The name of the file. AttachmentType type The type of the file. IQuote quote The message quote to be included. Used to reply to specific messages. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendTextAsync(String, IQuote, RequestOptions) Sends a text message to this message channel. Declaration public Task<Cacheable<IUserMessage, Guid>> SendTextAsync(string text, IQuote quote = null, RequestOptions options = null) Parameters String text The message to be sent. IQuote quote The message quote to be included. Used to reply to specific messages. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. ToString() Returns the recipient user. Declaration public override string ToString() Returns String UpdateAsync(RequestOptions) Declaration public override Task UpdateAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task Overrides SocketChannel.UpdateAsync(RequestOptions) Explicit Interface Implementations IDMChannel.Recipient Gets the recipient of all messages in this channel. Declaration IUser IDMChannel.Recipient { get; } Returns IUser A user object that represents the other user in this channel. Implements IDMChannel.Recipient ISocketPrivateChannel.Recipients Gets the users that can access this channel. Declaration IReadOnlyCollection<SocketUser> ISocketPrivateChannel.Recipients { get; } Returns IReadOnlyCollection < SocketUser > A read-only collection of users that can access this channel. Implements ISocketPrivateChannel.Recipients"
  },
  "api/Kook.WebSocket.SocketEntity-1.html": {
    "href": "api/Kook.WebSocket.SocketEntity-1.html",
    "title": "Class SocketEntity<T> | Kook.Net 文档",
    "keywords": "Class SocketEntity<T> Represents a WebSocket-based entity. Inheritance Object SocketEntity<T> SocketChannel SocketGuild SocketInvite SocketMessage SocketRole SocketUser Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public abstract class SocketEntity<T> : object, IEntity<T> where T : IEquatable<T> Type Parameters T The type of the entity's identifier. Properties Id Gets the unique identifier for this object. Declaration public T Id { get; } Property Value T Implements IEntity<TId>.Id"
  },
  "api/Kook.WebSocket.SocketGuild.html": {
    "href": "api/Kook.WebSocket.SocketGuild.html",
    "title": "Class SocketGuild | Kook.Net 文档",
    "keywords": "Class SocketGuild Represents a WebSocket-based guild object. Inheritance Object SocketEntity < UInt64 > SocketGuild Inherited Members SocketEntity<UInt64>.Id Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public class SocketGuild : SocketEntity<ulong>, IEntity<ulong>, IGuild, IEntity<ulong>, IDisposable, IUpdateable Properties AutoDeleteTime TODO: To be documented. Declaration public string AutoDeleteTime { get; } Property Value String Banner Declaration public string Banner { get; } Property Value String BoostLevel Gets the level of guild boosting in this guild. Declaration public BoostLevel BoostLevel { get; } Property Value BoostLevel The level of guild boosting in this guild. Implements IGuild.BoostLevel BoostSubscriptionCount Declaration public int BoostSubscriptionCount { get; } Property Value Int32 BoostSubscriptions Gets a dictionary of all boost subscriptions for this guild. Declaration public ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>> BoostSubscriptions { get; } Property Value ImmutableDictionary < IUser , IReadOnlyCollection < BoostSubscriptionMetadata >> A read-only dictionary containing all boost subscription metadata for this guild grouped by users; or null if the boost subscription data has never been cached. Remarks warning Only when AlwaysDownloadBoostSubscriptions is set to true will this property be populated upon startup. Due to the lack of event support for boost subscriptions, this property will never be updated. The changes of BoostSubscriptionCount will trigger the update of this property, but KOOK gateway will not publish this event resulting from the changes of total boost subscription count. To fetch the latest boost subscription data, use DownloadBoostSubscriptionsAsync(RequestOptions) or DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>, RequestOptions) upon a KookSocketClient to manually download the latest boost subscription data, or GetBoostSubscriptionsAsync(RequestOptions) . See Also ValidBoostSubscriptions DownloadBoostSubscriptionsAsync(RequestOptions) DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>, RequestOptions) Kook.WebSocket.KookSocketClient.AlwaysDownloadBoostSubscriptions BufferBoostSubscriptionCount Declaration public int BufferBoostSubscriptionCount { get; } Property Value Int32 CategoryChannels Gets a collection of all stage channels in this guild. Declaration public IReadOnlyCollection<SocketCategoryChannel> CategoryChannels { get; } Property Value IReadOnlyCollection < SocketCategoryChannel > A read-only collection of stage channels found within this guild. Channels Gets a collection of all channels in this guild. Declaration public IReadOnlyCollection<SocketGuildChannel> Channels { get; } Property Value IReadOnlyCollection < SocketGuildChannel > A read-only collection of generic channels found within this guild. CurrentUser Gets the current logged-in user. Declaration public SocketGuildUser CurrentUser { get; } Property Value SocketGuildUser DefaultChannel Gets the default text channel for this guild. Declaration public SocketTextChannel DefaultChannel { get; } Property Value SocketTextChannel A SocketTextChannel representing the default text channel for this guild. Remarks This property retrieves default text channel for this guild. DefaultChannelId Declaration public ulong? DefaultChannelId { get; } Property Value Nullable < UInt64 > DownloadedMemberCount Gets the number of members downloaded to the local guild cache. Declaration public int DownloadedMemberCount { get; } Property Value Int32 Emotes Gets a collection of all custom emotes for this guild. Declaration public IReadOnlyCollection<GuildEmote> Emotes { get; } Property Value IReadOnlyCollection < GuildEmote > A read-only collection of all custom emotes for this guild. See Also GetEmotesAsync(RequestOptions) EveryoneRole Gets the built-in role containing all users in this guild. Declaration public SocketRole EveryoneRole { get; } Property Value SocketRole A role object that represents an @everyone role in this guild. Features Gets the features of this guild. Declaration public GuildFeatures Features { get; } Property Value GuildFeatures An array of string representing the features of this guild. Implements IGuild.Features HasAllMembers Indicates whether the client has all the members downloaded to the local guild cache. Declaration public bool? HasAllMembers { get; } Property Value Nullable < Boolean > Remarks warning If MemberCount is null , this property will always return null , which means that the client is unable to determine whether all the members are downloaded or not. Icon Declaration public string Icon { get; } Property Value String IsConnected Indicates whether the client is connected to this guild. Declaration public bool IsConnected { get; } Property Value Boolean IsOpenEnabled Declaration public bool IsOpenEnabled { get; } Property Value Boolean MaxBitrate Declaration public int MaxBitrate { get; } Property Value Int32 MaxUploadLimit Declaration public ulong MaxUploadLimit { get; } Property Value UInt64 MemberCount Gets the number of members. Declaration public int? MemberCount { get; } Property Value Nullable < Int32 > Remarks This property retrieves the number of members returned by Kook. tip Due to how this property is returned by Kook instead of relying on the WebSocket cache, the number here is the most accurate in terms of counting the number of users within this guild. Use this instead of enumerating the count of the Users collection, as you may see discrepancy between that and this property. warning Only when AlwaysDownloadUsers is set to true will this property be populated upon startup. Otherwise, this property will be null , and will be populated when DownloadUsersAsync(RequestOptions) is called. Name Declaration public string Name { get; } Property Value String NotifyType Gets the default notification type for this guild. Declaration public NotifyType NotifyType { get; } Property Value NotifyType A NotifyType representing the default notification type for this guild. Implements IGuild.NotifyType OpenId Declaration public uint? OpenId { get; } Property Value Nullable < UInt32 > Owner Gets the user that owns this guild. Declaration public SocketGuildUser Owner { get; } Property Value SocketGuildUser OwnerId Declaration public ulong OwnerId { get; } Property Value UInt64 RecommendInfo Gets the recommendation information for this guild. Declaration public RecommendInfo RecommendInfo { get; } Property Value RecommendInfo A recommendation object that represents the recommendation information for this guild; null if the guild does not have a recommendation. Region Declaration public string Region { get; } Property Value String Roles Gets a collection of all roles in this guild. Declaration public IReadOnlyCollection<SocketRole> Roles { get; } Property Value IReadOnlyCollection < SocketRole > A read-only collection of roles found within this guild. Remarks warning Due to the lack of event args which should contains the reordered roles data when roles are reordered, this property may not be completely accurate. To ensure the most accurate results, it is recommended to call UpdateAsync(RequestOptions) before this property is used. Status TODO: To be documented. Declaration public int Status { get; } Property Value Int32 TextChannels Gets a collection of all text channels in this guild. Declaration public IReadOnlyCollection<SocketTextChannel> TextChannels { get; } Property Value IReadOnlyCollection < SocketTextChannel > A read-only collection of message channels found within this guild. Topic Declaration public string Topic { get; } Property Value String Users Gets a collection of users in this guild. Declaration public IReadOnlyCollection<SocketGuildUser> Users { get; } Property Value IReadOnlyCollection < SocketGuildUser > A collection of guild users found within this guild. Remarks This property retrieves all users found within this guild. warning This property may not always return all the members for large guilds (i.e. guilds containing 100+ users). If you are simply looking to get the number of users present in this guild, consider using MemberCount instead. Otherwise, you may need to enable AlwaysDownloadUsers to fetch the full user list upon startup, or use DownloadUsersAsync(RequestOptions) to manually download the users. See Also DownloadUsersAsync(RequestOptions) Kook.WebSocket.KookSocketClient.AlwaysDownloadUsers DownloadUsersAsync(IEnumerable<IGuild>, RequestOptions) ValidBoostSubscriptions Gets a dictionary of all boost subscriptions which have not expired for this guild. Declaration public ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>> ValidBoostSubscriptions { get; } Property Value ImmutableDictionary < IUser , IReadOnlyCollection < BoostSubscriptionMetadata >> A read-only dictionary containing all boost subscription metadata which have not expired for this guild grouped by users; or null if the boost subscription data has never been cached. Remarks warning Only when AlwaysDownloadBoostSubscriptions is set to true will this property be populated upon startup. Due to the lack of event support for boost subscriptions, this property will never be updated. The changes of BoostSubscriptionCount will trigger the update of this property, but KOOK gateway will not publish this event resulting from the changes of total boost subscription count. To fetch the latest boost subscription data, use DownloadBoostSubscriptionsAsync(RequestOptions) or DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>, RequestOptions) upon a KookSocketClient to manually download the latest boost subscription data, or GetBoostSubscriptionsAsync(RequestOptions) . See Also BoostSubscriptions DownloadBoostSubscriptionsAsync(RequestOptions) DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>, RequestOptions) Kook.WebSocket.KookSocketClient.AlwaysDownloadBoostSubscriptions VoiceChannels Gets a collection of all voice channels in this guild. Declaration public IReadOnlyCollection<SocketVoiceChannel> VoiceChannels { get; } Property Value IReadOnlyCollection < SocketVoiceChannel > A read-only collection of voice channels found within this guild. WelcomeChannel Gets the welcome text channel for this guild. Declaration public SocketTextChannel WelcomeChannel { get; } Property Value SocketTextChannel A SocketTextChannel representing the default text channel for this guild. Remarks This property retrieves default text channel for this guild. WelcomeChannelId Declaration public ulong? WelcomeChannelId { get; } Property Value Nullable < UInt64 > Methods AddBanAsync(IUser, Int32, String, RequestOptions) Declaration public Task AddBanAsync(IUser user, int pruneDays = 0, string reason = null, RequestOptions options = null) Parameters IUser user Int32 pruneDays String reason RequestOptions options Returns Task AddBanAsync(UInt64, Int32, String, RequestOptions) Declaration public Task AddBanAsync(ulong userId, int pruneDays = 0, string reason = null, RequestOptions options = null) Parameters UInt64 userId Int32 pruneDays String reason RequestOptions options Returns Task CreateCategoryChannelAsync(String, Action<CreateCategoryChannelProperties>, RequestOptions) Creates a new channel category in this guild. Declaration public Task<RestCategoryChannel> CreateCategoryChannelAsync(string name, Action<CreateCategoryChannelProperties> func = null, RequestOptions options = null) Parameters String name The new name for the category. Action < CreateCategoryChannelProperties > func The delegate containing the properties to be applied to the channel upon its creation. RequestOptions options The options to be used when sending the request. Returns Task < RestCategoryChannel > A task that represents the asynchronous creation operation. The task result contains the newly created category channel. CreateEmoteAsync(String, Image, RequestOptions) Declaration public Task<GuildEmote> CreateEmoteAsync(string name, Image image, RequestOptions options = null) Parameters String name Image image RequestOptions options Returns Task < GuildEmote > CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions) Declaration public Task<IInvite> CreateInviteAsync(InviteMaxAge maxAge = default(InviteMaxAge), InviteMaxUses maxUses = default(InviteMaxUses), RequestOptions options = null) Parameters InviteMaxAge maxAge InviteMaxUses maxUses RequestOptions options Returns Task < IInvite > CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, RequestOptions) Declaration public Task<IInvite> CreateInviteAsync(int? maxAge, int? maxUses = null, RequestOptions options = null) Parameters Nullable < Int32 > maxAge Nullable < Int32 > maxUses RequestOptions options Returns Task < IInvite > CreateRoleAsync(String, RequestOptions) Creates a new role with the provided name. Declaration public Task<RestRole> CreateRoleAsync(string name, RequestOptions options = null) Parameters String name The new name for the role. RequestOptions options The options to be used when sending the request. Returns Task < RestRole > A task that represents the asynchronous creation operation. The task result contains the newly created role. CreateTextChannelAsync(String, Action<CreateTextChannelProperties>, RequestOptions) Creates a new text channel in this guild. Declaration public Task<RestTextChannel> CreateTextChannelAsync(string name, Action<CreateTextChannelProperties> func = null, RequestOptions options = null) Parameters String name The new name for the text channel. Action < CreateTextChannelProperties > func The delegate containing the properties to be applied to the channel upon its creation. RequestOptions options The options to be used when sending the request. Returns Task < RestTextChannel > A task that represents the asynchronous creation operation. The task result contains the newly created text channel. CreateVoiceChannelAsync(String, Action<CreateVoiceChannelProperties>, RequestOptions) Creates a new voice channel in this guild. Declaration public Task<RestVoiceChannel> CreateVoiceChannelAsync(string name, Action<CreateVoiceChannelProperties> func = null, RequestOptions options = null) Parameters String name The new name for the voice channel. Action < CreateVoiceChannelProperties > func The delegate containing the properties to be applied to the channel upon its creation. RequestOptions options The options to be used when sending the request. Returns Task < RestVoiceChannel > A task that represents the asynchronous creation operation. The task result contains the newly created voice channel. DeleteEmoteAsync(GuildEmote, RequestOptions) Declaration public Task DeleteEmoteAsync(GuildEmote emote, RequestOptions options = null) Parameters GuildEmote emote RequestOptions options Returns Task Dispose() Declaration public void Dispose() DownloadBoostSubscriptionsAsync(RequestOptions) Declaration public Task DownloadBoostSubscriptionsAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task DownloadUsersAsync(RequestOptions) Declaration public Task DownloadUsersAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task DownloadVoiceStatesAsync(RequestOptions) Declaration public Task DownloadVoiceStatesAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task GetActiveBoostSubscriptionsAsync(RequestOptions) Declaration public Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> GetActiveBoostSubscriptionsAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task < ImmutableDictionary < IUser , IReadOnlyCollection < BoostSubscriptionMetadata >>> GetBadgeAsync(BadgeStyle, RequestOptions) Declaration public Task<Stream> GetBadgeAsync(BadgeStyle style = default(BadgeStyle), RequestOptions options = null) Parameters BadgeStyle style RequestOptions options Returns Task < Stream > GetBanAsync(IUser, RequestOptions) Gets a ban object for a banned user. Declaration public Task<RestBan> GetBanAsync(IUser user, RequestOptions options = null) Parameters IUser user The banned user. RequestOptions options The options to be used when sending the request. Returns Task < RestBan > A task that represents the asynchronous get operation. The task result contains a ban object, which contains the user information and the reason for the ban; null if the ban entry cannot be found. GetBanAsync(UInt64, RequestOptions) Declaration public Task<RestBan> GetBanAsync(ulong userId, RequestOptions options = null) Parameters UInt64 userId RequestOptions options Returns Task < RestBan > GetBansAsync(RequestOptions) Gets a collection of all users banned in this guild. Declaration public Task<IReadOnlyCollection<RestBan>> GetBansAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < RestBan >> A task that represents the asynchronous get operation. The task result contains a read-only collection of ban objects that this guild currently possesses, with each object containing the user banned and reason behind the ban. GetBoostSubscriptionsAsync(RequestOptions) Declaration public Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> GetBoostSubscriptionsAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task < ImmutableDictionary < IUser , IReadOnlyCollection < BoostSubscriptionMetadata >>> GetCategoryChannel(UInt64) Gets a category channel in this guild. Declaration public SocketCategoryChannel GetCategoryChannel(ulong id) Parameters UInt64 id The snowflake identifier for the category channel. Returns SocketCategoryChannel A category channel associated with the specified id ; null if none is found. GetChannel(UInt64) Gets a channel in this guild. Declaration public SocketGuildChannel GetChannel(ulong id) Parameters UInt64 id The identifier for the channel. Returns SocketGuildChannel A generic channel associated with the specified id ; null if none is found. GetEmote(String) Gets a guild emoji in this guild. Declaration public GuildEmote GetEmote(string id) Parameters String id The identifier for the guild emoji. Returns GuildEmote A guild emoji associated with the specified id ; null if none is found. GetEmoteAsync(String, RequestOptions) Declaration public Task<GuildEmote> GetEmoteAsync(string id, RequestOptions options = null) Parameters String id RequestOptions options Returns Task < GuildEmote > GetEmotesAsync(RequestOptions) Declaration public Task<IReadOnlyCollection<GuildEmote>> GetEmotesAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task < IReadOnlyCollection < GuildEmote >> GetInvitesAsync(RequestOptions) Declaration public Task<IReadOnlyCollection<IInvite>> GetInvitesAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task < IReadOnlyCollection < IInvite >> GetRole(UInt32) Gets a role in this guild. Declaration public SocketRole GetRole(uint id) Parameters UInt32 id The identifier for the role. Returns SocketRole A role that is associated with the specified id ; null if none is found. GetTextChannel(UInt64) Gets a text channel in this guild. Declaration public SocketTextChannel GetTextChannel(ulong id) Parameters UInt64 id The identifier for the text channel. Returns SocketTextChannel A text channel associated with the specified id ; null if none is found. GetUser(UInt64) Gets a user from this guild. Declaration public SocketGuildUser GetUser(ulong id) Parameters UInt64 id The identifier of the user. Returns SocketGuildUser A guild user associated with the specified id ; null if none is found. Remarks This method retrieves a user found within this guild. note This may return null in the WebSocket implementation due to incomplete user collection in large guilds. GetUsersAsync(RequestOptions) Gets a collection of all users in this guild. Declaration public IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> GetUsersAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < IGuildUser >> A task that represents the asynchronous get operation. The task result contains a collection of guild users found within this guild. Remarks This method retrieves all users found within this guild through REST. Users returned by this method are not cached. GetVoiceChannel(UInt64) Gets a voice channel in this guild. Declaration public SocketVoiceChannel GetVoiceChannel(ulong id) Parameters UInt64 id The identifier for the voice channel. Returns SocketVoiceChannel A voice channel associated with the specified id ; null if none is found. LeaveAsync(RequestOptions) Declaration public Task LeaveAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task ModifyEmoteNameAsync(GuildEmote, String, RequestOptions) Declaration public Task ModifyEmoteNameAsync(GuildEmote emote, string name, RequestOptions options = null) Parameters GuildEmote emote String name RequestOptions options Returns Task MoveUsersAsync(IEnumerable<IGuildUser>, IVoiceChannel, RequestOptions) Declaration public Task MoveUsersAsync(IEnumerable<IGuildUser> users, IVoiceChannel targetChannel, RequestOptions options = null) Parameters IEnumerable < IGuildUser > users IVoiceChannel targetChannel RequestOptions options Returns Task PurgeUserCache() Purges this guild's user cache. Declaration public void PurgeUserCache() PurgeUserCache(Func<SocketGuildUser, Boolean>) Purges this guild's user cache. Declaration public void PurgeUserCache(Func<SocketGuildUser, bool> predicate) Parameters Func < SocketGuildUser , Boolean > predicate The predicate used to select which users to clear. RemoveBanAsync(IUser, RequestOptions) Declaration public Task RemoveBanAsync(IUser user, RequestOptions options = null) Parameters IUser user RequestOptions options Returns Task RemoveBanAsync(UInt64, RequestOptions) Declaration public Task RemoveBanAsync(ulong userId, RequestOptions options = null) Parameters UInt64 userId RequestOptions options Returns Task SearchUsersAsync(Action<SearchGuildMemberProperties>, Int32, RequestOptions) Gets a collection of users in this guild that the name or nickname contains the provided string at func . Declaration public IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> SearchUsersAsync(Action<SearchGuildMemberProperties> func, int limit = null, RequestOptions options = null) Parameters Action < SearchGuildMemberProperties > func A delegate containing the properties to search users with. Int32 limit The maximum number of users to be gotten. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < RestGuildUser >> A task that represents the asynchronous get operation. The task result contains a collection of guild users that matches the properties with the provided at func . Remarks The limit can not be higher than MaxUsersPerBatch . ToString() Gets the name of the guild. Declaration public override string ToString() Returns String A string that resolves to Name . UpdateAsync(RequestOptions) Declaration public Task UpdateAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task Explicit Interface Implementations IGuild.EveryoneRole Gets the built-in role containing all users in this guild. Declaration IRole IGuild.EveryoneRole { get; } Returns IRole A role object that represents an @everyone role in this guild. Implements IGuild.EveryoneRole IGuild.RecommendInfo Gets the recommendation information for this guild. Declaration IRecommendInfo IGuild.RecommendInfo { get; } Returns IRecommendInfo A recommendation object that represents the recommendation information for this guild; null if the guild does not have a recommendation. Implements IGuild.RecommendInfo"
  },
  "api/Kook.WebSocket.SocketGuildChannel.html": {
    "href": "api/Kook.WebSocket.SocketGuildChannel.html",
    "title": "Class SocketGuildChannel | Kook.Net 文档",
    "keywords": "Class SocketGuildChannel Represent a WebSocket-based guild channel. Inheritance Object SocketEntity < UInt64 > SocketChannel SocketGuildChannel SocketCategoryChannel SocketTextChannel SocketVoiceChannel Inherited Members SocketEntity<UInt64>.Id Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public class SocketGuildChannel : SocketChannel, IEntity<ulong>, IUpdateable, IGuildChannel, IChannel, IEntity<ulong>, IDeletable Properties Creator Gets the creator of this channel. Declaration public SocketGuildUser Creator { get; } Property Value SocketGuildUser A task that represents the asynchronous get operation. The task result contains the creator of this channel. Remarks This method will try to get the user as a member of this channel. If the user is not a member of this guild, this method will return null . To get the creator under this circumstance, use GetUserAsync(UInt64, RequestOptions) . CreatorId Declaration public ulong CreatorId { get; } Property Value UInt64 Guild Gets the guild associated with this channel. Declaration public SocketGuild Guild { get; } Property Value SocketGuild A guild object that this channel belongs to. Name Declaration public string Name { get; } Property Value String Position Declaration public int? Position { get; } Property Value Nullable < Int32 > RolePermissionOverwrites Declaration public IReadOnlyCollection<RolePermissionOverwrite> RolePermissionOverwrites { get; } Property Value IReadOnlyCollection < RolePermissionOverwrite > Type Gets the type of this channel. Declaration public ChannelType Type { get; } Property Value ChannelType A ChannelType representing the type of this channel. Implements IGuildChannel.Type UserPermissionOverwrites Declaration public IReadOnlyCollection<UserPermissionOverwrite> UserPermissionOverwrites { get; } Property Value IReadOnlyCollection < UserPermissionOverwrite > Users Gets a collection of users that are able to view the channel. Declaration public virtual IReadOnlyCollection<SocketGuildUser> Users { get; } Property Value IReadOnlyCollection < SocketGuildUser > A read-only collection of users that can access the channel (i.e. the users seen in the user list). Methods AddPermissionOverwriteAsync(IGuildUser, RequestOptions) Adds or updates the permission overwrite for the given user. Declaration public Task AddPermissionOverwriteAsync(IGuildUser user, RequestOptions options = null) Parameters IGuildUser user The user to add the overwrite to. RequestOptions options The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. AddPermissionOverwriteAsync(IRole, RequestOptions) Adds or updates the permission overwrite for the given role. Declaration public Task AddPermissionOverwriteAsync(IRole role, RequestOptions options = null) Parameters IRole role The role to add the overwrite to. RequestOptions options The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. DeleteAsync(RequestOptions) Declaration public Task DeleteAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task GetPermissionOverwrite(IRole) Gets the permission overwrite for a specific role. Declaration public virtual OverwritePermissions? GetPermissionOverwrite(IRole role) Parameters IRole role The role to get the overwrite from. Returns Nullable < OverwritePermissions > An overwrite object for the targeted role; null if none is set. GetPermissionOverwrite(IUser) Gets the permission overwrite for a specific user. Declaration public virtual OverwritePermissions? GetPermissionOverwrite(IUser user) Parameters IUser user The user to get the overwrite from. Returns Nullable < OverwritePermissions > An overwrite object for the targeted user; null if none is set. GetUser(UInt64) Gets a SocketGuildUser from this channel. Declaration public virtual SocketGuildUser GetUser(ulong id) Parameters UInt64 id The user's identifier. Returns SocketGuildUser A SocketGuildUser with the provided identifier; null if none is found. ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) Declaration public Task ModifyAsync(Action<ModifyGuildChannelProperties> func, RequestOptions options = null) Parameters Action < ModifyGuildChannelProperties > func RequestOptions options Returns Task ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) Updates the permission overwrite for the given user, if one exists. Declaration public Task ModifyPermissionOverwriteAsync(IGuildUser user, Func<OverwritePermissions, OverwritePermissions> func, RequestOptions options = null) Parameters IGuildUser user The user to modify the overwrite for. Func < OverwritePermissions , OverwritePermissions > func A delegate containing the values to modify the permission overwrite with. RequestOptions options The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) Updates the permission overwrite for the given role, if one exists. Declaration public Task ModifyPermissionOverwriteAsync(IRole role, Func<OverwritePermissions, OverwritePermissions> func, RequestOptions options = null) Parameters IRole role The role to remove the overwrite for. Func < OverwritePermissions , OverwritePermissions > func A delegate containing the values to modify the permission overwrite with. RequestOptions options The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) Removes the permission overwrite for the given user, if one exists. Declaration public Task RemovePermissionOverwriteAsync(IGuildUser user, RequestOptions options = null) Parameters IGuildUser user The user to remove the overwrite from. RequestOptions options The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. RemovePermissionOverwriteAsync(IRole, RequestOptions) Removes the permission overwrite for the given role, if one exists. Declaration public Task RemovePermissionOverwriteAsync(IRole role, RequestOptions options = null) Parameters IRole role The role to remove the overwrite from. RequestOptions options The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. ToString() Gets the name of the channel. Declaration public override string ToString() Returns String A string that resolves to Name . UpdateAsync(RequestOptions) Declaration public override Task UpdateAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task Overrides SocketChannel.UpdateAsync(RequestOptions) Explicit Interface Implementations IGuildChannel.Guild Gets the guild associated with this channel. Declaration IGuild IGuildChannel.Guild { get; } Returns IGuild A guild object that this channel belongs to. Implements IGuildChannel.Guild"
  },
  "api/Kook.WebSocket.SocketGuildExperimentalExtensions.html": {
    "href": "api/Kook.WebSocket.SocketGuildExperimentalExtensions.html",
    "title": "Class SocketGuildExperimentalExtensions | Kook.Net 文档",
    "keywords": "Class SocketGuildExperimentalExtensions Provides extension methods of experimental functionalities for s. Inheritance Object SocketGuildExperimentalExtensions Namespace : Kook.WebSocket Assembly : Kook.Net.Experimental.dll Syntax public static class SocketGuildExperimentalExtensions : object Methods DeleteAsync(SocketGuild, RequestOptions) Deletes this guild. Declaration public static Task DeleteAsync(this SocketGuild guild, RequestOptions options = null) Parameters SocketGuild guild The guild to delete. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous deletion operation. Remarks warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future. ModifyAsync(SocketGuild, Action<GuildProperties>, RequestOptions) Modifies this guild. Declaration public static Task ModifyAsync(this SocketGuild guild, Action<GuildProperties> func, RequestOptions options = null) Parameters SocketGuild guild The guild to modify. Action < GuildProperties > func The delegate containing the properties to modify the guild with. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future."
  },
  "api/Kook.WebSocket.SocketGuildUser.html": {
    "href": "api/Kook.WebSocket.SocketGuildUser.html",
    "title": "Class SocketGuildUser | Kook.Net 文档",
    "keywords": "Class SocketGuildUser Represents a WebSocket-based guild user. Inheritance Object SocketEntity < UInt64 > SocketUser SocketGuildUser Inherited Members SocketUser.IdentifyNumber SocketUser.KMarkdownMention SocketUser.IsOnline SocketUser.ActiveClient SocketUser.CreateDMChannelAsync(RequestOptions) SocketUser.GetIntimacyAsync(RequestOptions) SocketUser.UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) SocketUser.BlockAsync(RequestOptions) SocketUser.UnblockAsync(RequestOptions) SocketUser.RequestFriendAsync(RequestOptions) SocketUser.RemoveFriendAsync(RequestOptions) SocketUser.ToString() SocketEntity<UInt64>.Id Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public class SocketGuildUser : SocketUser, IEntity<ulong>, IGuildUser, IUser, IEntity<ulong>, IMentionable, IPresence, IVoiceState, IUpdateable Properties ActiveAt Declaration public DateTimeOffset ActiveAt { get; } Property Value DateTimeOffset Avatar Declaration public override string Avatar { get; } Property Value String Overrides SocketUser.Avatar Banner Declaration public override string Banner { get; } Property Value String Overrides SocketUser.Banner BoostSubscriptions Gets a collection of all boost subscriptions of this user for this guild. Declaration public IReadOnlyCollection<BoostSubscriptionMetadata> BoostSubscriptions { get; } Property Value IReadOnlyCollection < BoostSubscriptionMetadata > A read-only collection of boost subscription metadata of this user for this guild; or null if the boost subscription data has never been cached. Remarks warning Only when AlwaysDownloadBoostSubscriptions is set to true will this property be populated upon startup. Due to the lack of event support for boost subscriptions, this property may be not up-to-date. The changes of BoostSubscriptionCount will trigger the update of this property, but KOOK gateway will not publish this event resulting from the changes of total boost subscription count. To fetch the latest boost subscription data, use DownloadBoostSubscriptionsAsync(RequestOptions) upon SocketGuild or DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>, RequestOptions) upon a KookSocketClient to manually download the latest boost subscription data, or GetBoostSubscriptionsAsync(RequestOptions) . See Also DownloadBoostSubscriptionsAsync(RequestOptions) DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>, RequestOptions) Kook.WebSocket.KookSocketClient.AlwaysDownloadBoostSubscriptions BuffAvatar Declaration public override string BuffAvatar { get; } Property Value String Overrides SocketUser.BuffAvatar Color Gets the color the user's displayed name is being displayed in. Declaration public Color Color { get; } Property Value Color A Color struct representing the color the user's display name is being displayed in. Implements IGuildUser.Color Remarks warning At present, the color of a role may be a solid color or a gradient. See ColorType , which is guaranteed due to the fact that the guild's user list API endpoint returns the color type and the gradient color information if exists. However, the value of this property is fetched from the guild's user list API endpoint, which does not return the color type and the gradient color information. Hence, the value of this property may be incorrect if the color of a role is a gradient. DisplayName Declaration public string DisplayName { get; } Property Value String Guild Gets the guild the user is in. Declaration public SocketGuild Guild { get; } Property Value SocketGuild GuildPermissions Gets the guild-level permissions for this user. Declaration public GuildPermissions GuildPermissions { get; } Property Value GuildPermissions A GuildPermissions structure for this user, representing what permissions this user has in the guild. Implements IGuildUser.GuildPermissions HasAnnualBuff Declaration public override bool? HasAnnualBuff { get; } Property Value Nullable < Boolean > Overrides SocketUser.HasAnnualBuff HasBuff Declaration public override bool? HasBuff { get; } Property Value Nullable < Boolean > Overrides SocketUser.HasBuff IdentifyNumberValue Declaration public override ushort? IdentifyNumberValue { get; } Property Value Nullable < UInt16 > Overrides SocketUser.IdentifyNumberValue IsBanned Declaration public override bool? IsBanned { get; } Property Value Nullable < Boolean > Overrides SocketUser.IsBanned IsBot Declaration public override bool? IsBot { get; } Property Value Nullable < Boolean > Overrides SocketUser.IsBot IsDeafened Declaration public bool? IsDeafened { get; } Property Value Nullable < Boolean > IsDenoiseEnabled Declaration public override bool? IsDenoiseEnabled { get; } Property Value Nullable < Boolean > Overrides SocketUser.IsDenoiseEnabled IsMobileVerified Declaration public bool IsMobileVerified { get; } Property Value Boolean IsMuted Declaration public bool? IsMuted { get; } Property Value Nullable < Boolean > IsOwner Declaration public bool? IsOwner { get; } Property Value Nullable < Boolean > IsSystemUser Declaration public override bool? IsSystemUser { get; } Property Value Nullable < Boolean > Overrides SocketUser.IsSystemUser JoinedAt Declaration public DateTimeOffset JoinedAt { get; } Property Value DateTimeOffset Nameplates Declaration public override IReadOnlyCollection<Nameplate> Nameplates { get; } Property Value IReadOnlyCollection < Nameplate > Overrides SocketUser.Nameplates Nickname Declaration public string Nickname { get; } Property Value String PlainTextMention Declaration public string PlainTextMention { get; } Property Value String Roles Returns a collection of roles that the user possesses. Declaration public IReadOnlyCollection<SocketRole> Roles { get; } Property Value IReadOnlyCollection < SocketRole > Remarks warning Due to the lack of events which should be raised when a role is added or removed from a user, this property may not be completely accurate. To ensure the most accurate results, it is recommended to call UpdateAsync(RequestOptions) before this property is used. Username Declaration public override string Username { get; } Property Value String Overrides SocketUser.Username UserTag Get the tag this user has. Declaration public override UserTag UserTag { get; } Property Value UserTag Overrides SocketUser.UserTag Implements IUser.UserTag VoiceChannel Returns the voice channel the user is in, or null if none or unknown. warning If a user connects to a voice channel before the bot has connected to the gateway, this property will be null until DownloadVoiceStatesAsync(RequestOptions) or DownloadVoiceStatesAsync(IEnumerable<IGuild>, RequestOptions) is called. To ensure whether the user is in a voice channel or not, use those methods above, or GetConnectedVoiceChannelsAsync(RequestOptions) . Declaration public SocketVoiceChannel VoiceChannel { get; } Property Value SocketVoiceChannel VoiceState Gets the voice status of the user if any. Declaration public SocketVoiceState? VoiceState { get; } Property Value Nullable < SocketVoiceState > A SocketVoiceState representing the user's voice status; null if the user is neither connected to a voice channel nor is muted or deafened by the guild. Methods AddRoleAsync(IRole, RequestOptions) Declaration public Task AddRoleAsync(IRole role, RequestOptions options = null) Parameters IRole role RequestOptions options Returns Task AddRoleAsync(UInt32, RequestOptions) Declaration public Task AddRoleAsync(uint roleId, RequestOptions options = null) Parameters UInt32 roleId RequestOptions options Returns Task AddRolesAsync(IEnumerable<IRole>, RequestOptions) Declaration public Task AddRolesAsync(IEnumerable<IRole> roles, RequestOptions options = null) Parameters IEnumerable < IRole > roles RequestOptions options Returns Task AddRolesAsync(IEnumerable<UInt32>, RequestOptions) Declaration public Task AddRolesAsync(IEnumerable<uint> roleIds, RequestOptions options = null) Parameters IEnumerable < UInt32 > roleIds RequestOptions options Returns Task DeafenAsync(RequestOptions) Declaration public Task DeafenAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task GetBoostSubscriptionsAsync(RequestOptions) Declaration public Task<IReadOnlyCollection<BoostSubscriptionMetadata>> GetBoostSubscriptionsAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task < IReadOnlyCollection < BoostSubscriptionMetadata >> GetConnectedVoiceChannelsAsync(RequestOptions) Gets a collection of voice channels a user. Declaration public Task<IReadOnlyCollection<SocketVoiceChannel>> GetConnectedVoiceChannelsAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < SocketVoiceChannel >> A task that represents the asynchronous get operation. The task result contains a collection of voice channels the user is connected to. GetPermissions(IGuildChannel) Gets the level permissions granted to this user to a given channel. Declaration public ChannelPermissions GetPermissions(IGuildChannel channel) Parameters IGuildChannel channel The channel to get the permission from. Returns ChannelPermissions A ChannelPermissions structure representing the permissions that a user has in the specified channel. Implements IGuildUser.GetPermissions(IGuildChannel) KickAsync(RequestOptions) Declaration public Task KickAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task ModifyNicknameAsync(String, RequestOptions) Declaration public Task ModifyNicknameAsync(string name, RequestOptions options = null) Parameters String name RequestOptions options Returns Task MuteAsync(RequestOptions) Declaration public Task MuteAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task RemoveRoleAsync(IRole, RequestOptions) Declaration public Task RemoveRoleAsync(IRole role, RequestOptions options = null) Parameters IRole role RequestOptions options Returns Task RemoveRoleAsync(UInt32, RequestOptions) Declaration public Task RemoveRoleAsync(uint roleId, RequestOptions options = null) Parameters UInt32 roleId RequestOptions options Returns Task RemoveRolesAsync(IEnumerable<IRole>, RequestOptions) Declaration public Task RemoveRolesAsync(IEnumerable<IRole> roles, RequestOptions options = null) Parameters IEnumerable < IRole > roles RequestOptions options Returns Task RemoveRolesAsync(IEnumerable<UInt32>, RequestOptions) Declaration public Task RemoveRolesAsync(IEnumerable<uint> roleIds, RequestOptions options = null) Parameters IEnumerable < UInt32 > roleIds RequestOptions options Returns Task UndeafenAsync(RequestOptions) Declaration public Task UndeafenAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task UnmuteAsync(RequestOptions) Declaration public Task UnmuteAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task UpdateAsync(RequestOptions) Fetches the users data from the REST API to update this object, especially the Roles property. Declaration public Task UpdateAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous reloading operation. Explicit Interface Implementations IGuildUser.Guild Gets the guild for this user. Declaration IGuild IGuildUser.Guild { get; } Returns IGuild A guild object that this user belongs to. Implements IGuildUser.Guild IVoiceState.VoiceChannel Gets the voice channel this user is currently in. Declaration IVoiceChannel IVoiceState.VoiceChannel { get; } Returns IVoiceChannel A generic voice channel object representing the voice channel that the user is currently in; null if none. Implements IVoiceState.VoiceChannel"
  },
  "api/Kook.WebSocket.SocketInvite.html": {
    "href": "api/Kook.WebSocket.SocketInvite.html",
    "title": "Class SocketInvite | Kook.Net 文档",
    "keywords": "Class SocketInvite Represents a WebSocket-based invite to a guild. Inheritance Object SocketEntity < UInt32 > SocketInvite Inherited Members SocketEntity<UInt32>.Id Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public class SocketInvite : SocketEntity<uint>, IEntity<uint>, IInvite, IEntity<uint>, IDeletable Properties Channel Gets the channel where this invite was created. Declaration public SocketGuildChannel Channel { get; } Property Value SocketGuildChannel ChannelId Declaration public ulong? ChannelId { get; } Property Value Nullable < UInt64 > Code Declaration public string Code { get; } Property Value String ExpiresAt Gets the time at which this invite will expire. Declaration public DateTimeOffset? ExpiresAt { get; } Property Value Nullable < DateTimeOffset > Guild Gets the guild where this invite was created. Declaration public SocketGuild Guild { get; } Property Value SocketGuild GuildId Declaration public ulong? GuildId { get; } Property Value Nullable < UInt64 > Inviter Gets the user that created this invite if available. Declaration public SocketGuildUser Inviter { get; } Property Value SocketGuildUser MaxAge Gets the time span until the invite expires. Declaration public TimeSpan? MaxAge { get; } Property Value Nullable < TimeSpan > MaxUses Gets the max number of uses this invite may have. Declaration public int? MaxUses { get; } Property Value Nullable < Int32 > RemainingUses Gets the number of times this invite still remains. Declaration public int? RemainingUses { get; } Property Value Nullable < Int32 > Url Declaration public string Url { get; } Property Value String Uses Gets the number of times this invite has been used. Declaration public int? Uses { get; } Property Value Nullable < Int32 > Methods DeleteAsync(RequestOptions) Declaration public Task DeleteAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task ToString() Gets the URL of the invite. Declaration public override string ToString() Returns String A string that resolves to the Url of the invite. Explicit Interface Implementations IInvite.Channel Gets the channel this invite is linked to. Declaration IChannel IInvite.Channel { get; } Returns IChannel A generic channel that the invite points to. Implements IInvite.Channel IInvite.ChannelType Gets the type of the channel this invite is linked to. Declaration ChannelType IInvite.ChannelType { get; } Returns ChannelType Implements IInvite.ChannelType IInvite.Guild Gets the guild this invite is linked to. Declaration IGuild IInvite.Guild { get; } Returns IGuild A guild object representing the guild that the invite points to. Implements IInvite.Guild IInvite.Inviter Gets the user that created this invite. Declaration IUser IInvite.Inviter { get; } Returns IUser A user that created this invite. Implements IInvite.Inviter"
  },
  "api/Kook.WebSocket.SocketMessage.html": {
    "href": "api/Kook.WebSocket.SocketMessage.html",
    "title": "Class SocketMessage | Kook.Net 文档",
    "keywords": "Class SocketMessage Represents a WebSocket-based message. Inheritance Object SocketEntity < Guid > SocketMessage SocketSystemMessage SocketUserMessage Inherited Members SocketEntity<Guid>.Id Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public abstract class SocketMessage : SocketEntity<Guid>, IEntity<Guid>, IMessage, IEntity<Guid>, IDeletable, IUpdateable Properties Attachments Gets the attachment included in this message. Declaration public virtual IReadOnlyCollection<Attachment> Attachments { get; } Property Value IReadOnlyCollection < Attachment > Author Gets the author of this message. Declaration public SocketUser Author { get; } Property Value SocketUser A WebSocket-based user object. Cards Returns all cards included in this message. Declaration public virtual IReadOnlyCollection<ICard> Cards { get; } Property Value IReadOnlyCollection < ICard > Collection of card objects. Channel Gets the source channel of the message. Declaration public ISocketMessageChannel Channel { get; } Property Value ISocketMessageChannel A WebSocket-based message channel. CleanContent Declaration public string CleanContent { get; } Property Value String Content Declaration public string Content { get; } Property Value String EditedTimestamp Declaration public DateTimeOffset? EditedTimestamp { get; } Property Value Nullable < DateTimeOffset > Embeds Returns all embeds included in this message. Declaration public virtual IReadOnlyCollection<IEmbed> Embeds { get; } Property Value IReadOnlyCollection < IEmbed > Collection of embed objects. IsPinned Declaration public virtual bool? IsPinned { get; } Property Value Nullable < Boolean > MentionedEveryone Declaration public virtual bool? MentionedEveryone { get; } Property Value Nullable < Boolean > MentionedHere Declaration public virtual bool? MentionedHere { get; } Property Value Nullable < Boolean > MentionedRoles Returns the roles mentioned in this message. Declaration public virtual IReadOnlyCollection<SocketRole> MentionedRoles { get; } Property Value IReadOnlyCollection < SocketRole > Collection of WebSocket-based roles. MentionedUsers Returns the users mentioned in this message. Declaration public IReadOnlyCollection<SocketUser> MentionedUsers { get; } Property Value IReadOnlyCollection < SocketUser > Collection of WebSocket-based users. Pokes Gets a collection of the SocketPokeAction 's on the message. Declaration public virtual IReadOnlyCollection<SocketPokeAction> Pokes { get; } Property Value IReadOnlyCollection < SocketPokeAction > Collection of poke action objects. RawContent Gets the raw content of the message. Declaration public string RawContent { get; } Property Value String Remarks This property is only available for messages that were received from the gateway. Reactions Declaration public IReadOnlyDictionary<IEmote, ReactionMetadata> Reactions { get; } Property Value IReadOnlyDictionary < IEmote , ReactionMetadata > Source Gets the source type of this message. Declaration public MessageSource Source { get; } Property Value MessageSource Implements IMessage.Source Tags Declaration public virtual IReadOnlyCollection<ITag> Tags { get; } Property Value IReadOnlyCollection < ITag > Timestamp Declaration public DateTimeOffset Timestamp { get; } Property Value DateTimeOffset Type Gets the type of this message. Declaration public MessageType Type { get; } Property Value MessageType Implements IMessage.Type Methods AddReactionAsync(IEmote, RequestOptions) Declaration public Task AddReactionAsync(IEmote emote, RequestOptions options = null) Parameters IEmote emote RequestOptions options Returns Task DeleteAsync(RequestOptions) Declaration public Task DeleteAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task GetReactionUsersAsync(IEmote, RequestOptions) Declaration public Task<IReadOnlyCollection<IUser>> GetReactionUsersAsync(IEmote emote, RequestOptions options = null) Parameters IEmote emote RequestOptions options Returns Task < IReadOnlyCollection < IUser >> RemoveReactionAsync(IEmote, IUser, RequestOptions) Declaration public Task RemoveReactionAsync(IEmote emote, IUser user, RequestOptions options = null) Parameters IEmote emote IUser user RequestOptions options Returns Task RemoveReactionAsync(IEmote, UInt64, RequestOptions) Declaration public Task RemoveReactionAsync(IEmote emote, ulong userId, RequestOptions options = null) Parameters IEmote emote UInt64 userId RequestOptions options Returns Task ToString() Gets the content of the message. Declaration public override string ToString() Returns String Content of the message. UpdateAsync(RequestOptions) Declaration public Task UpdateAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task Explicit Interface Implementations IMessage.Author Gets the author of this message. Declaration IUser IMessage.Author { get; } Returns IUser Implements IMessage.Author IMessage.Channel Gets the source channel of the message. Declaration IMessageChannel IMessage.Channel { get; } Returns IMessageChannel Implements IMessage.Channel"
  },
  "api/Kook.WebSocket.SocketPokeAction.html": {
    "href": "api/Kook.WebSocket.SocketPokeAction.html",
    "title": "Class SocketPokeAction | Kook.Net 文档",
    "keywords": "Class SocketPokeAction Represents a single WebSocket-based poke action. Inheritance Object SocketPokeAction Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public class SocketPokeAction : object, IPokeAction Properties Operator Gets the user who performed the action. Declaration public SocketUser Operator { get; } Property Value SocketUser Poke Gets the poke this action is associated with. Declaration public Poke Poke { get; } Property Value Poke Targets Gets the users who were poked by the action. Declaration public IReadOnlyCollection<SocketUser> Targets { get; } Property Value IReadOnlyCollection < SocketUser > Explicit Interface Implementations IPokeAction.Operator Gets the user who performed the action. Declaration IUser IPokeAction.Operator { get; } Returns IUser Implements IPokeAction.Operator IPokeAction.Poke Gets the poke this action is associated with. Declaration IPoke IPokeAction.Poke { get; } Returns IPoke Implements IPokeAction.Poke"
  },
  "api/Kook.WebSocket.SocketPresence.html": {
    "href": "api/Kook.WebSocket.SocketPresence.html",
    "title": "Class SocketPresence | Kook.Net 文档",
    "keywords": "Class SocketPresence Represents the WebSocket user's presence status. This may include their online status and their activity. Inheritance Object SocketPresence Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public class SocketPresence : object, IPresence Properties ActiveClient Declaration public ClientType? ActiveClient { get; } Property Value Nullable < ClientType > IsOnline Declaration public bool? IsOnline { get; } Property Value Nullable < Boolean >"
  },
  "api/Kook.WebSocket.SocketReaction.html": {
    "href": "api/Kook.WebSocket.SocketReaction.html",
    "title": "Class SocketReaction | Kook.Net 文档",
    "keywords": "Class SocketReaction Represents a WebSocket-based reaction. Inheritance Object SocketReaction Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public class SocketReaction : object, IReaction Properties Channel Gets the channel where the reaction takes place in. Declaration public ISocketMessageChannel Channel { get; } Property Value ISocketMessageChannel A WebSocket-based message channel. Emote The IEmote used in the reaction. Declaration public IEmote Emote { get; } Property Value IEmote Implements IReaction.Emote Message Gets the message that has been reacted to if possible. Declaration public SocketUserMessage Message { get; } Property Value SocketUserMessage A WebSocket-based message where possible; a value is not always returned. MessageId Gets the ID of the message that has been reacted to. Declaration public Guid MessageId { get; } Property Value Guid A message Guid associated with the message. User Gets the user who added the reaction if possible. Declaration public IUser User { get; } Property Value IUser A user object where possible; a value is not always returned. Remarks This property attempts to retrieve a WebSocket-cached user that is responsible for this reaction from the client. In other words, when the user is not in the WebSocket cache, this property may not contain a value, leaving the only identifiable information to be UserId . If you wish to obtain an identifiable user object, consider utilizing KookRestClient which will attempt to retrieve the user from REST. UserId Gets the ID of the user who added the reaction. Declaration public ulong UserId { get; } Property Value UInt64 A user identifier associated with the user. Remarks This property retrieves the identifier of the user responsible for this reaction. This property will always contain the user identifier in event that User cannot be retrieved. Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean GetHashCode() Declaration public override int GetHashCode() Returns Int32"
  },
  "api/Kook.WebSocket.SocketRole.html": {
    "href": "api/Kook.WebSocket.SocketRole.html",
    "title": "Class SocketRole | Kook.Net 文档",
    "keywords": "Class SocketRole Represents a WebSocket-based role to be given to a guild user. Inheritance Object SocketEntity < UInt32 > SocketRole Inherited Members SocketEntity<UInt32>.Id Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public class SocketRole : SocketEntity<uint>, IEntity<uint>, IRole, IEntity<uint>, IDeletable, IMentionable, IComparable<IRole> Properties Color Gets the color given to users of this role. Declaration public Color Color { get; } Property Value Color A Color struct representing the color of this role. Implements IRole.Color ColorType Gets the type of the color given to users of this role. Declaration public ColorType ColorType { get; } Property Value ColorType A ColorType struct representing the color type of this role. Implements IRole.ColorType GradientColor Declaration public GradientColor? GradientColor { get; } Property Value Nullable < GradientColor > Guild Gets the guild that owns this role. Declaration public SocketGuild Guild { get; } Property Value SocketGuild A SocketGuild representing the parent guild of this role. IsEveryone Returns a value that determines if the role is an @everyone role. Declaration public bool IsEveryone { get; } Property Value Boolean true if the role is @everyone; otherwise false . IsHoisted Declaration public bool IsHoisted { get; } Property Value Boolean IsMentionable Declaration public bool IsMentionable { get; } Property Value Boolean KMarkdownMention Declaration public string KMarkdownMention { get; } Property Value String Name Declaration public string Name { get; } Property Value String Permissions Gets the permissions granted to members of this role. Declaration public GuildPermissions Permissions { get; } Property Value GuildPermissions A GuildPermissions struct that this role possesses. Implements IRole.Permissions PlainTextMention Declaration public string PlainTextMention { get; } Property Value String Position Declaration public int Position { get; } Property Value Int32 Type Declaration public RoleType? Type { get; } Property Value Nullable < RoleType > Methods CompareTo(IRole) Declaration public int CompareTo(IRole role) Parameters IRole role Returns Int32 DeleteAsync(RequestOptions) Declaration public Task DeleteAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task GetUsersAsync(RequestOptions) Gets a collection of users with this role. Declaration public IAsyncEnumerable<IReadOnlyCollection<SocketGuildUser>> GetUsersAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < SocketGuildUser >> Paged collection of users with this role. Remarks If the guild this role belongs to does not has all members cached locally by checking HasAllMembers , this method will request the data via REST and update the guild users cache, otherwise it will return the cached data. ModifyAsync(Action<RoleProperties>, RequestOptions) Declaration public Task ModifyAsync(Action<RoleProperties> func, RequestOptions options = null) Parameters Action < RoleProperties > func RequestOptions options Returns Task ToString() Gets the name of the role. Declaration public override string ToString() Returns String A string that resolves to Name . Explicit Interface Implementations IRole.Guild Gets the guild that owns this role. Declaration IGuild IRole.Guild { get; } Returns IGuild A guild representing the parent guild of this role. Implements IRole.Guild"
  },
  "api/Kook.WebSocket.SocketSelfUser.html": {
    "href": "api/Kook.WebSocket.SocketSelfUser.html",
    "title": "Class SocketSelfUser | Kook.Net 文档",
    "keywords": "Class SocketSelfUser Represents the logged-in WebSocket-based user. Inheritance Object SocketEntity < UInt64 > SocketUser SocketSelfUser Inherited Members SocketUser.IdentifyNumber SocketUser.KMarkdownMention SocketUser.PlainTextMention SocketUser.IsOnline SocketUser.ActiveClient SocketUser.CreateDMChannelAsync(RequestOptions) SocketUser.GetIntimacyAsync(RequestOptions) SocketUser.UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) SocketUser.BlockAsync(RequestOptions) SocketUser.UnblockAsync(RequestOptions) SocketUser.RequestFriendAsync(RequestOptions) SocketUser.RemoveFriendAsync(RequestOptions) SocketUser.ToString() SocketEntity<UInt64>.Id Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public class SocketSelfUser : SocketUser, IEntity<ulong>, ISelfUser, IUser, IEntity<ulong>, IMentionable, IPresence Properties Avatar Declaration public override string Avatar { get; } Property Value String Overrides SocketUser.Avatar Banner Declaration public override string Banner { get; } Property Value String Overrides SocketUser.Banner BuffAvatar Declaration public override string BuffAvatar { get; } Property Value String Overrides SocketUser.BuffAvatar HasAnnualBuff Declaration public override bool? HasAnnualBuff { get; } Property Value Nullable < Boolean > Overrides SocketUser.HasAnnualBuff HasBuff Declaration public override bool? HasBuff { get; } Property Value Nullable < Boolean > Overrides SocketUser.HasBuff IdentifyNumberValue Declaration public override ushort? IdentifyNumberValue { get; } Property Value Nullable < UInt16 > Overrides SocketUser.IdentifyNumberValue InvitedCount Declaration public int InvitedCount { get; } Property Value Int32 IsBanned Declaration public override bool? IsBanned { get; } Property Value Nullable < Boolean > Overrides SocketUser.IsBanned IsBot Declaration public override bool? IsBot { get; } Property Value Nullable < Boolean > Overrides SocketUser.IsBot IsDenoiseEnabled Declaration public override bool? IsDenoiseEnabled { get; } Property Value Nullable < Boolean > Overrides SocketUser.IsDenoiseEnabled IsMobileVerified Declaration public bool IsMobileVerified { get; } Property Value Boolean IsSystemUser Declaration public override bool? IsSystemUser { get; } Property Value Nullable < Boolean > Overrides SocketUser.IsSystemUser Mobile Declaration public string Mobile { get; } Property Value String MobilePrefix Declaration public string MobilePrefix { get; } Property Value String Nameplates Declaration public override IReadOnlyCollection<Nameplate> Nameplates { get; } Property Value IReadOnlyCollection < Nameplate > Overrides SocketUser.Nameplates Username Declaration public override string Username { get; } Property Value String Overrides SocketUser.Username UserTag Get the tag this user has. Declaration public override UserTag UserTag { get; } Property Value UserTag Overrides SocketUser.UserTag Implements IUser.UserTag Methods StartPlayingAsync(IGame, RequestOptions) Declaration public Task StartPlayingAsync(IGame game, RequestOptions options = null) Parameters IGame game RequestOptions options Returns Task StartPlayingAsync(Music, RequestOptions) Declaration public Task StartPlayingAsync(Music music, RequestOptions options = null) Parameters Music music RequestOptions options Returns Task StopPlayingAsync(ActivityType, RequestOptions) Declaration public Task StopPlayingAsync(ActivityType type, RequestOptions options = null) Parameters ActivityType type RequestOptions options Returns Task"
  },
  "api/Kook.WebSocket.SocketSystemMessage.html": {
    "href": "api/Kook.WebSocket.SocketSystemMessage.html",
    "title": "Class SocketSystemMessage | Kook.Net 文档",
    "keywords": "Class SocketSystemMessage Represents a WebSocket-based message sent by the system. Inheritance Object SocketEntity < Guid > SocketMessage SocketSystemMessage Inherited Members SocketMessage.Author SocketMessage.Channel SocketMessage.Source SocketMessage.Content SocketMessage.RawContent SocketMessage.CleanContent SocketMessage.Timestamp SocketMessage.EditedTimestamp SocketMessage.IsPinned SocketMessage.MentionedEveryone SocketMessage.MentionedHere SocketMessage.Type SocketMessage.Attachments SocketMessage.Cards SocketMessage.Embeds SocketMessage.Pokes SocketMessage.MentionedRoles SocketMessage.MentionedUsers SocketMessage.Tags SocketMessage.Reactions SocketMessage.DeleteAsync(RequestOptions) SocketMessage.UpdateAsync(RequestOptions) SocketMessage.AddReactionAsync(IEmote, RequestOptions) SocketMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) SocketMessage.RemoveReactionAsync(IEmote, UInt64, RequestOptions) SocketMessage.GetReactionUsersAsync(IEmote, RequestOptions) SocketMessage.ToString() SocketMessage.IMessage.Author SocketMessage.IMessage.Channel SocketEntity<Guid>.Id Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public class SocketSystemMessage : SocketMessage, IEntity<Guid>, IUpdateable, ISystemMessage, IMessage, IEntity<Guid>, IDeletable Properties SystemMessageType Gets the type of the system message. Declaration public SystemMessageType SystemMessageType { get; } Property Value SystemMessageType Implements ISystemMessage.SystemMessageType Remarks warning Because the data from Kook does not describe the type of the message in detail, this property is not implemented yet. Accessing this property will always result in an exception at present."
  },
  "api/Kook.WebSocket.SocketTextChannel.html": {
    "href": "api/Kook.WebSocket.SocketTextChannel.html",
    "title": "Class SocketTextChannel | Kook.Net 文档",
    "keywords": "Class SocketTextChannel Represents a WebSocket-based channel in a guild that can send and receive messages. Inheritance Object SocketEntity < UInt64 > SocketChannel SocketGuildChannel SocketTextChannel Inherited Members SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Position SocketGuildChannel.Type SocketGuildChannel.CreatorId SocketGuildChannel.Creator SocketGuildChannel.RolePermissionOverwrites SocketGuildChannel.UserPermissionOverwrites SocketGuildChannel.UpdateAsync(RequestOptions) SocketGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) SocketGuildChannel.DeleteAsync(RequestOptions) SocketGuildChannel.GetPermissionOverwrite(IUser) SocketGuildChannel.GetPermissionOverwrite(IRole) SocketGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) SocketGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) SocketGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) SocketGuildChannel.ToString() SocketGuildChannel.IGuildChannel.Guild SocketEntity<UInt64>.Id Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public class SocketTextChannel : SocketGuildChannel, IEntity<ulong>, IUpdateable, ITextChannel, INestedChannel, IGuildChannel, IDeletable, IMentionable, ISocketMessageChannel, IMessageChannel, IChannel, IEntity<ulong> Properties CachedMessages Gets all messages in this channel's cache. Declaration public IReadOnlyCollection<SocketMessage> CachedMessages { get; } Property Value IReadOnlyCollection < SocketMessage > A read-only collection of WebSocket-based messages. Implements ISocketMessageChannel.CachedMessages Remarks This property is only available if the MessageCacheSize is set to a value greater than zero. See Also MessageCacheSize Category Gets the parent (category) of this channel in the guild's channel list. Declaration public ICategoryChannel Category { get; } Property Value ICategoryChannel An ICategoryChannel representing the parent of this channel; null if none is set. CategoryId Declaration public ulong? CategoryId { get; } Property Value Nullable < UInt64 > IsPermissionSynced Declaration public bool? IsPermissionSynced { get; } Property Value Nullable < Boolean > KMarkdownMention Declaration public string KMarkdownMention { get; } Property Value String PlainTextMention Declaration public string PlainTextMention { get; } Property Value String SlowModeInterval Declaration public int SlowModeInterval { get; } Property Value Int32 Topic Declaration public string Topic { get; } Property Value String Users Gets a collection of users that are able to view the channel. Declaration public override IReadOnlyCollection<SocketGuildUser> Users { get; } Property Value IReadOnlyCollection < SocketGuildUser > A read-only collection of users that can access the channel (i.e. the users seen in the user list). Overrides SocketGuildChannel.Users Methods CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions) Declaration public Task<IInvite> CreateInviteAsync(InviteMaxAge maxAge = default(InviteMaxAge), InviteMaxUses maxUses = default(InviteMaxUses), RequestOptions options = null) Parameters InviteMaxAge maxAge InviteMaxUses maxUses RequestOptions options Returns Task < IInvite > CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, RequestOptions) Declaration public Task<IInvite> CreateInviteAsync(int? maxAge, int? maxUses = null, RequestOptions options = null) Parameters Nullable < Int32 > maxAge Nullable < Int32 > maxUses RequestOptions options Returns Task < IInvite > DeleteMessageAsync(Guid, RequestOptions) Declaration public Task DeleteMessageAsync(Guid messageId, RequestOptions options = null) Parameters Guid messageId RequestOptions options Returns Task DeleteMessageAsync(IMessage, RequestOptions) Declaration public Task DeleteMessageAsync(IMessage message, RequestOptions options = null) Parameters IMessage message RequestOptions options Returns Task GetCachedMessage(Guid) Gets a cached message from this channel. Declaration public SocketMessage GetCachedMessage(Guid id) Parameters Guid id The Guid of the message. Returns SocketMessage A WebSocket-based message object; null if it does not exist in the cache or if caching is not enabled. Implements ISocketMessageChannel.GetCachedMessage(Guid) Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return null . Please refer to MessageCacheSize for more details. This method retrieves the message from the local WebSocket cache and does not send any additional request to Kook. This message may be a message that has been deleted. GetCachedMessages(Guid, Direction, Int32) Gets the last N cached messages starting from a certain message in this message channel. Declaration public IReadOnlyCollection<SocketMessage> GetCachedMessages(Guid fromMessageId, Direction dir, int limit = null) Parameters Guid fromMessageId The message ID to start the fetching from. Direction dir The direction of which the message should be gotten from. Int32 limit The number of messages to get. Returns IReadOnlyCollection < SocketMessage > A read-only collection of WebSocket-based messages. Implements ISocketMessageChannel.GetCachedMessages(Guid, Direction, Int32) Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Kook. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetCachedMessages(IMessage, Direction, Int32) Gets the last N cached messages starting from a certain message in this message channel. Declaration public IReadOnlyCollection<SocketMessage> GetCachedMessages(IMessage fromMessage, Direction dir, int limit = null) Parameters IMessage fromMessage The message to start the fetching from. Direction dir The direction of which the message should be gotten from. Int32 limit The number of messages to get. Returns IReadOnlyCollection < SocketMessage > A read-only collection of WebSocket-based messages. Implements ISocketMessageChannel.GetCachedMessages(IMessage, Direction, Int32) Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Kook. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetCachedMessages(Int32) Gets the last N cached messages from this message channel. Declaration public IReadOnlyCollection<SocketMessage> GetCachedMessages(int limit = null) Parameters Int32 limit The number of messages to get. Returns IReadOnlyCollection < SocketMessage > A read-only collection of WebSocket-based messages. Implements ISocketMessageChannel.GetCachedMessages(Int32) Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Kook. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetInvitesAsync(RequestOptions) Declaration public Task<IReadOnlyCollection<IInvite>> GetInvitesAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task < IReadOnlyCollection < IInvite >> GetMessageAsync(Guid, RequestOptions) Gets a message from this message channel. Declaration public Task<IMessage> GetMessageAsync(Guid id, RequestOptions options = null) Parameters Guid id The identifier of the message. RequestOptions options The options to be used when sending the request. Returns Task < IMessage > A task that represents an asynchronous get operation for retrieving the message. The task result contains the retrieved message; null if no message is found with the specified identifier. Remarks This method follows the same behavior as described in GetMessageAsync(Guid, CacheMode, RequestOptions) . Please visit its documentation for more details on this method. GetMessagesAsync(Guid, Direction, Int32, RequestOptions) Gets a collection of messages in this channel. Declaration public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = null, RequestOptions options = null) Parameters Guid referenceMessageId The ID of the starting message to get the messages from. Direction dir The direction of the messages to be gotten from. Int32 limit The numbers of message to be gotten from. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < IMessage >> Paged collection of messages. Remarks This method follows the same behavior as described in . Please visit its documentation for more details on this method. GetMessagesAsync(IMessage, Direction, Int32, RequestOptions) Gets a collection of messages in this channel. Declaration public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = null, RequestOptions options = null) Parameters IMessage referenceMessage The starting message to get the messages from. Direction dir The direction of the messages to be gotten from. Int32 limit The numbers of message to be gotten from. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < IMessage >> Paged collection of messages. Remarks This method follows the same behavior as described in . Please visit its documentation for more details on this method. GetMessagesAsync(Int32, RequestOptions) Gets the last N messages from this message channel. Declaration public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(int limit = null, RequestOptions options = null) Parameters Int32 limit The numbers of message to be gotten from. RequestOptions options The options to be used when sending the request. Returns IAsyncEnumerable < IReadOnlyCollection < IMessage >> Paged collection of messages. Remarks This method follows the same behavior as described in . Please visit its documentation for more details on this method. GetPinnedMessagesAsync(RequestOptions) Gets a collection of pinned messages in this channel. Declaration public Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < RestMessage >> A task that represents the asynchronous get operation for retrieving pinned messages in this channel. The task result contains a collection of messages found in the pinned messages. GetUser(UInt64) Gets a SocketGuildUser from this channel. Declaration public override SocketGuildUser GetUser(ulong id) Parameters UInt64 id The user's identifier. Returns SocketGuildUser A SocketGuildUser with the provided identifier; null if none is found. Overrides SocketGuildChannel.GetUser(UInt64) ModifyAsync(Action<ModifyTextChannelProperties>, RequestOptions) Declaration public virtual Task ModifyAsync(Action<ModifyTextChannelProperties> func, RequestOptions options = null) Parameters Action < ModifyTextChannelProperties > func RequestOptions options Returns Task ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions) Declaration public Task ModifyMessageAsync(Guid messageId, Action<MessageProperties> func, RequestOptions options = null) Parameters Guid messageId Action < MessageProperties > func RequestOptions options Returns Task SendCardAsync(ICard, Quote, IUser, RequestOptions) Sends a card message to this message channel. Declaration public Task<Cacheable<IUserMessage, Guid>> SendCardAsync(ICard card, Quote quote = null, IUser ephemeralUser = null, RequestOptions options = null) Parameters ICard card The card to be sent. Quote quote IUser ephemeralUser The user only who can see the message. Leave null to let everyone see the message. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendCardsAsync(IEnumerable<ICard>, Quote, IUser, RequestOptions) Declaration public Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(IEnumerable<ICard> cards, Quote quote = null, IUser ephemeralUser = null, RequestOptions options = null) Parameters IEnumerable < ICard > cards Quote quote IUser ephemeralUser RequestOptions options Returns Task < Cacheable < IUserMessage , Guid >> SendFileAsync(FileAttachment, Quote, IUser, RequestOptions) Sends a file to this message channel. Declaration public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(FileAttachment attachment, Quote quote = null, IUser ephemeralUser = null, RequestOptions options = null) Parameters FileAttachment attachment The attachment containing the file. Quote quote IUser ephemeralUser The user only who can see the message. Leave null to let everyone see the message. RequestOptions options The options to be used when sending the request. Returns Task < Cacheable < IUserMessage , Guid >> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendFileAsync(Stream, String, AttachmentType, Quote, IUser, RequestOptions) Declaration public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(Stream stream, string fileName = null, AttachmentType type = AttachmentType.File, Quote quote = null, IUser ephemeralUser = null, RequestOptions options = null) Parameters Stream stream String fileName AttachmentType type Quote quote IUser ephemeralUser RequestOptions options Returns Task < Cacheable < IUserMessage , Guid >> SendFileAsync(String, String, AttachmentType, Quote, IUser, RequestOptions) Declaration public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(string path, string fileName = null, AttachmentType type = AttachmentType.File, Quote quote = null, IUser ephemeralUser = null, RequestOptions options = null) Parameters String path String fileName AttachmentType type Quote quote IUser ephemeralUser RequestOptions options Returns Task < Cacheable < IUserMessage , Guid >> SendTextAsync(String, Quote, IUser, RequestOptions) Declaration public Task<Cacheable<IUserMessage, Guid>> SendTextAsync(string text, Quote quote = null, IUser ephemeralUser = null, RequestOptions options = null) Parameters String text Quote quote IUser ephemeralUser RequestOptions options Returns Task < Cacheable < IUserMessage , Guid >> SyncPermissionsAsync(RequestOptions) Declaration public virtual Task SyncPermissionsAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task"
  },
  "api/Kook.WebSocket.SocketUnknownUser.html": {
    "href": "api/Kook.WebSocket.SocketUnknownUser.html",
    "title": "Class SocketUnknownUser | Kook.Net 文档",
    "keywords": "Class SocketUnknownUser Represents a WebSocket-based user that is yet to be recognized by the client. Inheritance Object SocketEntity < UInt64 > SocketUser SocketUnknownUser Inherited Members SocketUser.IdentifyNumber SocketUser.KMarkdownMention SocketUser.PlainTextMention SocketUser.IsOnline SocketUser.ActiveClient SocketUser.CreateDMChannelAsync(RequestOptions) SocketUser.GetIntimacyAsync(RequestOptions) SocketUser.UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) SocketUser.BlockAsync(RequestOptions) SocketUser.UnblockAsync(RequestOptions) SocketUser.RequestFriendAsync(RequestOptions) SocketUser.RemoveFriendAsync(RequestOptions) SocketUser.ToString() SocketEntity<UInt64>.Id Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public class SocketUnknownUser : SocketUser, IEntity<ulong>, IUser, IEntity<ulong>, IMentionable, IPresence Remarks A user may not be recognized due to the user missing from the cache or failed to be recognized properly. Properties Avatar Declaration public override string Avatar { get; } Property Value String Overrides SocketUser.Avatar Banner Declaration public override string Banner { get; } Property Value String Overrides SocketUser.Banner BuffAvatar Declaration public override string BuffAvatar { get; } Property Value String Overrides SocketUser.BuffAvatar HasAnnualBuff Declaration public override bool? HasAnnualBuff { get; } Property Value Nullable < Boolean > Overrides SocketUser.HasAnnualBuff HasBuff Declaration public override bool? HasBuff { get; } Property Value Nullable < Boolean > Overrides SocketUser.HasBuff IdentifyNumberValue Declaration public override ushort? IdentifyNumberValue { get; } Property Value Nullable < UInt16 > Overrides SocketUser.IdentifyNumberValue IsBanned Declaration public override bool? IsBanned { get; } Property Value Nullable < Boolean > Overrides SocketUser.IsBanned IsBot Declaration public override bool? IsBot { get; } Property Value Nullable < Boolean > Overrides SocketUser.IsBot IsDenoiseEnabled Declaration public override bool? IsDenoiseEnabled { get; } Property Value Nullable < Boolean > Overrides SocketUser.IsDenoiseEnabled IsSystemUser Declaration public override bool? IsSystemUser { get; } Property Value Nullable < Boolean > Overrides SocketUser.IsSystemUser Nameplates Declaration public override IReadOnlyCollection<Nameplate> Nameplates { get; } Property Value IReadOnlyCollection < Nameplate > Overrides SocketUser.Nameplates Username Declaration public override string Username { get; } Property Value String Overrides SocketUser.Username UserTag Get the tag this user has. Declaration public override UserTag UserTag { get; } Property Value UserTag Overrides SocketUser.UserTag"
  },
  "api/Kook.WebSocket.SocketUser.html": {
    "href": "api/Kook.WebSocket.SocketUser.html",
    "title": "Class SocketUser | Kook.Net 文档",
    "keywords": "Class SocketUser Represents a WebSocket-based user. Inheritance Object SocketEntity < UInt64 > SocketUser SocketGuildUser SocketSelfUser SocketUnknownUser Inherited Members SocketEntity<UInt64>.Id Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public abstract class SocketUser : SocketEntity<ulong>, IEntity<ulong>, IUser, IEntity<ulong>, IMentionable, IPresence Constructors SocketUser(KookSocketClient, UInt64) Initializes a new WebSocket-based user. Declaration protected SocketUser(KookSocketClient kook, ulong id) Parameters KookSocketClient kook The WebSocket client. UInt64 id The identifier of the user. Properties ActiveClient Declaration public ClientType? ActiveClient { get; } Property Value Nullable < ClientType > Avatar Declaration public abstract string Avatar { get; } Property Value String Banner Declaration public abstract string Banner { get; } Property Value String BuffAvatar Declaration public abstract string BuffAvatar { get; } Property Value String HasAnnualBuff Declaration public abstract bool? HasAnnualBuff { get; } Property Value Nullable < Boolean > HasBuff Declaration public abstract bool? HasBuff { get; } Property Value Nullable < Boolean > IdentifyNumber Declaration public string IdentifyNumber { get; } Property Value String IdentifyNumberValue Declaration public abstract ushort? IdentifyNumberValue { get; } Property Value Nullable < UInt16 > IsBanned Declaration public abstract bool? IsBanned { get; } Property Value Nullable < Boolean > IsBot Declaration public abstract bool? IsBot { get; } Property Value Nullable < Boolean > IsDenoiseEnabled Declaration public abstract bool? IsDenoiseEnabled { get; } Property Value Nullable < Boolean > IsOnline Declaration public bool? IsOnline { get; } Property Value Nullable < Boolean > IsSystemUser Declaration public abstract bool? IsSystemUser { get; } Property Value Nullable < Boolean > KMarkdownMention Declaration public string KMarkdownMention { get; } Property Value String Nameplates Declaration public abstract IReadOnlyCollection<Nameplate> Nameplates { get; } Property Value IReadOnlyCollection < Nameplate > PlainTextMention Declaration public string PlainTextMention { get; } Property Value String Username Declaration public abstract string Username { get; } Property Value String UserTag Get the tag this user has. Declaration public abstract UserTag UserTag { get; } Property Value UserTag Implements IUser.UserTag Methods BlockAsync(RequestOptions) Declaration public Task BlockAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task CreateDMChannelAsync(RequestOptions) Creates the direct message channel of this user. Declaration public Task<SocketDMChannel> CreateDMChannelAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < SocketDMChannel > A task that represents the asynchronous operation for getting or creating a DM channel. The task result contains the DM channel associated with this user. Remarks This method is used to obtain or create a channel used to send a direct message. warning In event that the current user cannot send a message to the target user, a channel can and will still be created by Kook. However, attempting to send a message will yield a HttpException with a 403 as its HttpCode . There are currently no official workarounds by Kook. GetIntimacyAsync(RequestOptions) Gets the intimacy information with this user. Declaration public Task<RestIntimacy> GetIntimacyAsync(RequestOptions options = null) Parameters RequestOptions options The options to be used when sending the request. Returns Task < RestIntimacy > A task that represents the asynchronous operation for getting the intimacy information. The task result contains the intimacy information associated with this user. RemoveFriendAsync(RequestOptions) Declaration public Task RemoveFriendAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task RequestFriendAsync(RequestOptions) Declaration public Task RequestFriendAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task ToString() Gets the full name of the user (e.g. Example#0001). Declaration public override string ToString() Returns String The full name of the user. UnblockAsync(RequestOptions) Declaration public Task UnblockAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) Declaration public Task UpdateIntimacyAsync(Action<IntimacyProperties> func, RequestOptions options = null) Parameters Action < IntimacyProperties > func RequestOptions options Returns Task"
  },
  "api/Kook.WebSocket.SocketUserMessage.html": {
    "href": "api/Kook.WebSocket.SocketUserMessage.html",
    "title": "Class SocketUserMessage | Kook.Net 文档",
    "keywords": "Class SocketUserMessage Represents a WebSocket-based message sent by a user. Inheritance Object SocketEntity < Guid > SocketMessage SocketUserMessage Inherited Members SocketMessage.Author SocketMessage.Channel SocketMessage.Source SocketMessage.Content SocketMessage.RawContent SocketMessage.CleanContent SocketMessage.Timestamp SocketMessage.EditedTimestamp SocketMessage.Type SocketMessage.MentionedUsers SocketMessage.Reactions SocketMessage.DeleteAsync(RequestOptions) SocketMessage.UpdateAsync(RequestOptions) SocketMessage.AddReactionAsync(IEmote, RequestOptions) SocketMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) SocketMessage.RemoveReactionAsync(IEmote, UInt64, RequestOptions) SocketMessage.GetReactionUsersAsync(IEmote, RequestOptions) SocketMessage.ToString() SocketMessage.IMessage.Author SocketMessage.IMessage.Channel SocketEntity<Guid>.Id Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public class SocketUserMessage : SocketMessage, IEntity<Guid>, IUpdateable, IUserMessage, IMessage, IEntity<Guid>, IDeletable Properties Attachments Gets the attachment included in this message. Declaration public override IReadOnlyCollection<Attachment> Attachments { get; } Property Value IReadOnlyCollection < Attachment > Overrides SocketMessage.Attachments Cards Returns all cards included in this message. Declaration public override IReadOnlyCollection<ICard> Cards { get; } Property Value IReadOnlyCollection < ICard > Collection of card objects. Overrides SocketMessage.Cards Embeds Returns all embeds included in this message. Declaration public override IReadOnlyCollection<IEmbed> Embeds { get; } Property Value IReadOnlyCollection < IEmbed > Collection of embed objects. Overrides SocketMessage.Embeds Guild Gets the SocketGuild that the message was sent from. Declaration public SocketGuild Guild { get; } Property Value SocketGuild The SocketGuild that the message was sent from. IsPinned Gets the value that indicates whether this message is pinned. Declaration public bool? IsPinned { get; } Property Value Nullable < Boolean > true if this message was added to its channel's pinned messages; otherwise false . MentionedChannels Gets a collection of the mentioned channels in the message. Declaration public IReadOnlyCollection<SocketGuildChannel> MentionedChannels { get; } Property Value IReadOnlyCollection < SocketGuildChannel > MentionedEveryone Declaration public override bool? MentionedEveryone { get; } Property Value Nullable < Boolean > Overrides SocketMessage.MentionedEveryone MentionedHere Declaration public override bool? MentionedHere { get; } Property Value Nullable < Boolean > Overrides SocketMessage.MentionedHere MentionedRoles Returns the roles mentioned in this message. Declaration public override IReadOnlyCollection<SocketRole> MentionedRoles { get; } Property Value IReadOnlyCollection < SocketRole > Collection of WebSocket-based roles. Overrides SocketMessage.MentionedRoles Pokes Gets a collection of the SocketPokeAction 's on the message. Declaration public override IReadOnlyCollection<SocketPokeAction> Pokes { get; } Property Value IReadOnlyCollection < SocketPokeAction > Collection of poke action objects. Overrides SocketMessage.Pokes Quote Gets the message quote. Declaration public Quote Quote { get; } Property Value Quote The message quote. Tags Declaration public override IReadOnlyCollection<ITag> Tags { get; } Property Value IReadOnlyCollection < ITag > Overrides SocketMessage.Tags Methods ModifyAsync(Action<MessageProperties>, RequestOptions) Declaration public Task ModifyAsync(Action<MessageProperties> func, RequestOptions options = null) Parameters Action < MessageProperties > func RequestOptions options Returns Task Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) Declaration public string Resolve(TagHandling userHandling = default(TagHandling), TagHandling channelHandling = default(TagHandling), TagHandling roleHandling = default(TagHandling), TagHandling everyoneHandling = default(TagHandling), TagHandling emojiHandling = default(TagHandling)) Parameters TagHandling userHandling TagHandling channelHandling TagHandling roleHandling TagHandling everyoneHandling TagHandling emojiHandling Returns String Resolve(Int32, TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) Transforms this message's text into a human-readable form by resolving its tags. Declaration public string Resolve(int startIndex, TagHandling userHandling = default(TagHandling), TagHandling channelHandling = default(TagHandling), TagHandling roleHandling = default(TagHandling), TagHandling everyoneHandling = default(TagHandling), TagHandling emojiHandling = default(TagHandling)) Parameters Int32 startIndex The zero-based index at which to begin the resolving for the specified value. TagHandling userHandling Determines how the user tag should be handled. TagHandling channelHandling Determines how the channel tag should be handled. TagHandling roleHandling Determines how the role tag should be handled. TagHandling everyoneHandling Determines how the @everyone tag should be handled. TagHandling emojiHandling Determines how the emoji tag should be handled. Returns String Explicit Interface Implementations IUserMessage.Quote Gets the message quote. Declaration IQuote IUserMessage.Quote { get; } Returns IQuote The message quote. Implements IUserMessage.Quote"
  },
  "api/Kook.WebSocket.SocketVoiceChannel.html": {
    "href": "api/Kook.WebSocket.SocketVoiceChannel.html",
    "title": "Class SocketVoiceChannel | Kook.Net 文档",
    "keywords": "Class SocketVoiceChannel Represents a WebSocket-based voice channel in a guild. Inheritance Object SocketEntity < UInt64 > SocketChannel SocketGuildChannel SocketVoiceChannel Inherited Members SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Position SocketGuildChannel.Type SocketGuildChannel.CreatorId SocketGuildChannel.Creator SocketGuildChannel.RolePermissionOverwrites SocketGuildChannel.UserPermissionOverwrites SocketGuildChannel.UpdateAsync(RequestOptions) SocketGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) SocketGuildChannel.DeleteAsync(RequestOptions) SocketGuildChannel.GetPermissionOverwrite(IUser) SocketGuildChannel.GetPermissionOverwrite(IRole) SocketGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) SocketGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) SocketGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) SocketGuildChannel.ToString() SocketGuildChannel.IGuildChannel.Guild SocketEntity<UInt64>.Id Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public class SocketVoiceChannel : SocketGuildChannel, IEntity<ulong>, IUpdateable, IVoiceChannel, INestedChannel, IGuildChannel, IDeletable, IMentionable, ISocketAudioChannel, IAudioChannel, IChannel, IEntity<ulong> Properties Category Gets the parent (category) of this channel in the guild's channel list. Declaration public ICategoryChannel Category { get; } Property Value ICategoryChannel An ICategoryChannel representing the parent of this channel; null if none is set. CategoryId Declaration public ulong? CategoryId { get; } Property Value Nullable < UInt64 > ConnectedUsers Gets a collection of users that are currently connected to this voice channel. Declaration public IReadOnlyCollection<SocketGuildUser> ConnectedUsers { get; } Property Value IReadOnlyCollection < SocketGuildUser > A read-only collection of users that are currently connected to this voice channel. Remarks warning This property may not always return all the members that are connected to this voice channel, because uses may connected this voice channel before the bot has connected to the gateway. To ensure accuracy, you may need to enable AlwaysDownloadVoiceStates to fetch the full voice states upon startup, or use DownloadVoiceStatesAsync(RequestOptions) on the guild this voice channel belongs to to manually download the users voice states, or use GetConnectedUsersAsync(CacheMode, RequestOptions) to fetch the connected users from the API. HasPassword Declaration public bool HasPassword { get; } Property Value Boolean IsPermissionSynced Declaration public bool? IsPermissionSynced { get; } Property Value Nullable < Boolean > IsVoiceRegionOverwritten Declaration public bool? IsVoiceRegionOverwritten { get; } Property Value Nullable < Boolean > KMarkdownMention Declaration public string KMarkdownMention { get; } Property Value String PlainTextMention Declaration public string PlainTextMention { get; } Property Value String ServerUrl Declaration public string ServerUrl { get; } Property Value String UserLimit Declaration public int? UserLimit { get; } Property Value Nullable < Int32 > Users Gets a collection of users that are able to view the channel. Declaration public override IReadOnlyCollection<SocketGuildUser> Users { get; } Property Value IReadOnlyCollection < SocketGuildUser > A read-only collection of users that can access the channel (i.e. the users seen in the user list). Overrides SocketGuildChannel.Users See Also ConnectedUsers VoiceQuality Declaration public VoiceQuality? VoiceQuality { get; } Property Value Nullable < VoiceQuality > VoiceRegion Declaration public string VoiceRegion { get; } Property Value String Methods CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions) Declaration public Task<IInvite> CreateInviteAsync(InviteMaxAge maxAge = default(InviteMaxAge), InviteMaxUses maxUses = default(InviteMaxUses), RequestOptions options = null) Parameters InviteMaxAge maxAge InviteMaxUses maxUses RequestOptions options Returns Task < IInvite > CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, RequestOptions) Declaration public Task<IInvite> CreateInviteAsync(int? maxAge, int? maxUses = null, RequestOptions options = null) Parameters Nullable < Int32 > maxAge Nullable < Int32 > maxUses RequestOptions options Returns Task < IInvite > GetConnectedUsersAsync(CacheMode, RequestOptions) Gets a collection of users that are currently connected to this voice channel. Declaration public Task<IReadOnlyCollection<SocketGuildUser>> GetConnectedUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters CacheMode mode The CacheMode that determines whether the object should be fetched from cache. RequestOptions options The options to be used when sending the request. Returns Task < IReadOnlyCollection < SocketGuildUser >> A task that represents the asynchronous get operation. The task result contains a read-only collection of users that are currently connected to this voice channel. GetInvitesAsync(RequestOptions) Declaration public Task<IReadOnlyCollection<IInvite>> GetInvitesAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task < IReadOnlyCollection < IInvite >> GetUser(UInt64) Gets a SocketGuildUser from this channel. Declaration public override SocketGuildUser GetUser(ulong id) Parameters UInt64 id The user's identifier. Returns SocketGuildUser A SocketGuildUser with the provided identifier; null if none is found. Overrides SocketGuildChannel.GetUser(UInt64) ModifyAsync(Action<ModifyVoiceChannelProperties>, RequestOptions) Declaration public Task ModifyAsync(Action<ModifyVoiceChannelProperties> func, RequestOptions options = null) Parameters Action < ModifyVoiceChannelProperties > func RequestOptions options Returns Task SyncPermissionsAsync(RequestOptions) Declaration public virtual Task SyncPermissionsAsync(RequestOptions options = null) Parameters RequestOptions options Returns Task"
  },
  "api/Kook.WebSocket.SocketVoiceChannelExperimentalExtensions.html": {
    "href": "api/Kook.WebSocket.SocketVoiceChannelExperimentalExtensions.html",
    "title": "Class SocketVoiceChannelExperimentalExtensions | Kook.Net 文档",
    "keywords": "Class SocketVoiceChannelExperimentalExtensions Provides extension methods of experimental functionalities for s. Inheritance Object SocketVoiceChannelExperimentalExtensions Namespace : Kook.WebSocket Assembly : Kook.Net.Experimental.dll Syntax public static class SocketVoiceChannelExperimentalExtensions : object Methods DisconnectUserAsync(SocketVoiceChannel, IGuildUser, RequestOptions) Disconnects the specified user from the voice channel. Declaration public static Task DisconnectUserAsync(this SocketVoiceChannel channel, IGuildUser user, RequestOptions options = null) Parameters SocketVoiceChannel channel The voice channel where the use is connected to. IGuildUser user The user to disconnect. RequestOptions options The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for disconnecting the user from the voice channel. Remarks warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future."
  },
  "api/Kook.WebSocket.SocketVoiceState.html": {
    "href": "api/Kook.WebSocket.SocketVoiceState.html",
    "title": "Struct SocketVoiceState | Kook.Net 文档",
    "keywords": "Struct SocketVoiceState Represents a WebSocket user's voice connection status. Namespace : Kook.WebSocket Assembly : Kook.Net.WebSocket.dll Syntax public struct SocketVoiceState : IVoiceState Constructors SocketVoiceState(SocketVoiceChannel, Nullable<Boolean>, Nullable<Boolean>) Initializes a new SocketVoiceState with the specified voice channel. Declaration public SocketVoiceState(SocketVoiceChannel voiceChannel, bool? isMuted, bool? isDeafened) Parameters SocketVoiceChannel voiceChannel The voice channel that the user is currently in. Nullable < Boolean > isMuted Whether the user is muted. Nullable < Boolean > isDeafened Whether the user is deafened. Fields SocketVoiceState Initializes a default SocketVoiceState with everything set to null or false . Declaration public static readonly SocketVoiceState Field Value SocketVoiceState SocketVoiceState Initializes a default SocketVoiceState with everything set to null or false . Declaration public static readonly SocketVoiceState Field Value SocketVoiceState Default Initializes a default SocketVoiceState with everything set to null or false . Declaration public static readonly SocketVoiceState Default Field Value SocketVoiceState Properties IsDeafened Declaration public bool? IsDeafened { get; } Property Value Nullable < Boolean > IsMuted Declaration public bool? IsMuted { get; } Property Value Nullable < Boolean > VoiceChannel Gets the voice channel that the user is currently in; or null if none. Declaration public SocketVoiceChannel VoiceChannel { get; } Property Value SocketVoiceChannel Methods ToString() Gets the name of this voice channel. Declaration public override string ToString() Returns String A string that resolves to name of this voice channel; otherwise \"Unknown\". Explicit Interface Implementations IVoiceState.VoiceChannel Gets the voice channel this user is currently in. Declaration IVoiceChannel IVoiceState.VoiceChannel { get; } Returns IVoiceChannel A generic voice channel object representing the voice channel that the user is currently in; null if none. Implements IVoiceState.VoiceChannel"
  },
  "changelog/changelog.html": {
    "href": "changelog/changelog.html",
    "title": "变更日志 | Kook.Net 文档",
    "keywords": "变更日志 v0.5.5 [2024-02-02] 更新路线 RequireUserAttribute 不再支持通过 IUser 参数构造，请改用 IUser.Id 作为参数。 新增 文本命令框架先决条件新增 RequireRoleAttribute 文本命令框架 CommandAttribute 新增 Aliases 、 Summary 、 Remarks 属性及可选参数 修复 修复了 Bot 启动时下载数据的异常没有被正确地输出到日志的问题 变更 移除了 RequireUserAttribute 上不切实际地接收 IUser 参数的构造函数 v0.5.4 [2024-01-06] 更新路线 KookRestApiClient 的 AuthTokenType 与 AuthToken 属性的 set 访问性已更改为 private，用户代码对这些属性的更改可能会导致框架运行异常，如需使用不同的身份认证登录 KOOK 网关，请在 LogoutAsync 后重新 LoginAsync 。 新增 IUser 接口上新增 HasAnnualBuff 、 IsSystemUser 、 Nameplates 属性 UserTag 上新增 BackgroundColor 属性 新增支持解析互动表情 变更 KookRestApiClient 的 AuthTokenType 与 AuthToken 属性的 set 访问性已更改为 private v0.5.3 [2023-11-15] 更新路线 IVoiceChannel.ServerUrl 属性已移动至 IAudioChannel 接口，所有使用此属性的用法都需要更新。 新增 在 IAudioChannel 接口上新增语音区域相关属性 IVoiceChannel.ModifyAsync 方法参数新增支持修改语音区域相关属性 为卡片、模块、元素构造器相关类新增有参构造函数 变更 IVoiceChannel.ServerUrl 属性已移动至 IAudioChannel 接口 移除了部分属性上的意外提供的公开 set 访问器 修复 修复了 SectionModuleBuild 的构建校验条件不正确的问题 其它 替换测试 Mock 框架 Moq 为 NSubstitute 新增 Docker 使用示例 新增面向 .NET 8 的目标框架构建 v0.5.2 [2023-08-18] 更新路线 ModifyEmoteNameAsync 方法的参数 Action<string> 已变更为 string ，所有使用此方法的用法都需要更新。 修复 修复了 SocketReaction 的比较不正确导致的回应移除时缓存中的消息的回应未能被正确移除的问题 修复了 Socket 客户端断开连接时未能正确发送关闭代码的问题 修复了 GetMessagesAsync 方法查询参考消息之后的消息时结果不正确的问题 修复了 ModifyEmoteNameAsync 方法未能正确重命名服务器表情的问题 其它 补全了快速参考指南 为示例程序 SimpleBot 加入实际的功能，能够响应一个简单的命令，回复按钮，并对按钮点击事件进行响应 新增了 Visual Basic 及 F# 的调用示例 v0.5.1 [2023-07-29] 新增 添加了 SocketGuild.GetCategoryChannel 和 RestGuild.GetCategoryChannelAsync 方法 修复 修复了 GetJumpUrl 方法返回结果不正确的问题 修复了 KookConfig.MaxMessagesPerBatch 设置不正确的问题 修复了已删除引用的反序列化不正确的问题 修复了 MoveUsersAsync 方法的 RequestOptions 参数不为可选参数的问题 修复了 MoveUsersAsync 方法的失败问题 修复了在 SocketGuildChannel 上创建频道权限复写后立即修改可能会导致失败且无错误信息的问题 优化 优化了 GetDirectMessageAsync 方法的内部实现 统一了注释中 langword 的字符串表示方式 v0.5.0 [2023-05-21] 更新路线 出于便利性原因，此版本对 BaseSocketClient 中的部分事件所传递的参数类型进行了调整，事件参数所发生的具体变更可参阅文末的附录， 对涉及到的事件的应用都需要进行相应的更新。 GuildFeature 与 GuildFeatures 中表示重要客户的枚举值与属性已被重命名为更准确的名称； GuildPermissions 已被重构为结构体， RoleProperties.Permissions 属性的类型也已被相应变更； RestGuild.Channels 的类型被错误地声明为值的类型为 RestChannel 的字典，已被修正为值的类型为 RestGuildChannel 的字典； KookSocketClient 上的部分方法的返回类型为 ValueTask ，现已统一为 Task 。涉及到以上 API 的用法都需要进行相应的更新。 新增 新增 GuildFeature.Partner 枚举值及 GuildFeatures.IsPartner 属性 新增 IGuild.Banner 属性 新增 RestGuild 上的 CurrentUserNickname 、 CurrentUserDisplayName 与 CurrentUserRoles 属性 新增 INestedChannel.SyncPermissionsAsync 方法 新增 BaseSocketClient 上的 DownloadVoiceStatesAsync 与 DownloadBoostSubscriptionsAsync 抽象方法 新增 RestGuild 上的 TextChannels 、 VoiceChannels 与 CategoryChannels 属性 变更 重命名 GuildFeature.Ka 为 GuildFeature.KeyAccount ， GuildFeatures.IsKa 为 GuildFeatures.IsKeyAccount 变更 GuildPermissions 为结构体，变更 RoleProperties.Permissions 为 GuildPermissions? 类型 出于便利性目的，为部分 BaseSocketClient 中的事件变更或新增了事件参数，变更详情参见文末的附录 变更 BaseSocketClient 上的 DownloadBoostSubscriptionsAsync 方法参数都为可选参数 变更 RestGuild.Channels 的类型为 ImmutableDictionary<ulong, RestGuildChannel> 变更 KookSocketClient 上的 GetChannelAsync 、 GetDMChannelAsync 、 GetDMChannelsAsync 与 GetUserAsync 的方法返回类型为 Task<*> 修复 修复部分 API 对 bool 类型返回字符串 1 或 0 时未能正确解析的问题 修复 IGuild.DefaultChannelId 未能正确设置为服务器实际配置的默认文字频道的问题 修复为下载服务器用户列表时 SocketGuild.CurrentUser 为 null 的问题 修复 SocketUser 上的 IsOnline 与 ActiveClient 可能会抛出空引用异常的问题 修复 MessageType.Poke 类型的消息未被正确解析的问题 修复请求桶未能对 HTTP 429 Too Many Requests 错误进行正确处理的问题 优化 优化 Cacheable 的调试器显示文本 FileAttachment.Stream 现已可以复用 SendFileAsync 与 ReplyFileAsync 方法对通过文件或流创建的 FileAttachment 附件进行多次发送前所创建的资产地址将会被缓存，以避免重复上传相同的文件 其它 修正了一些奇怪的代码缩进 变更文档主题 新增依赖于 doc 分支的文档更新独立工作流 新增 API 快速参考文档 补充权限相关单元测试中缺失的权限值 附录 BaseSocketClient 中变更参数的事件列表： ReactionAdded 与 ReactionRemoved ISocketMessageChannel → SocketTextChannel 新增 Cacheable<SocketGuildUser, ulong> 参数表示添加或取消回应的服务器用户 DirectReactionAdded 与 DirectReactionRemoved 新增 Cacheable<SocketUser, ulong> 参数表示添加或取消回应的用户 MessageReceived 新增 SocketGuildUser 表示发送消息的服务器用户 新增 SocketTextChannel 表示消息所在的服务器文字频道 MessageDeleted 、 MessageUpdated 、 MessagePinned 与 MessageUnpinned ISocketMessageChannel → SocketTextChannel DirectMessageReceived 新增 SocketUser 表示发送消息的用户 新增 SocketDMChannel 表示消息所在的私聊频道 DirectMessageDeleted Cacheable<IDMChannel, Guid> → Cacheable<SocketDMChannel, ulong> 新增 Cacheable<SocketUser, ulong> 表示消息的发送者 DirectMessageUpdated IDMChannel → Cacheable<SocketDMChannel, ulong> 新增 Cacheable<SocketUser, ulong> 表示消息的发送者 v0.4.1 [2023-04-05] 修复 修复用户离开服务器或角色被删除时， SocketGuildChannel.UserPermissionOverwrites 与 SocketGuildChannel.RolePermissionOverwrites 属性未移除对应的权限覆盖项的问题 v0.4.0 [2023-04-03] 更新路线 出于以下几项原因，此版本对 BaseSocketClient 中的部分事件所传递的参数类型进行了调整： 部分参数必定可取，无需使用 Cacheable 进行封装，例如 MessageDeleted 与 UserConnected ； 网关所下发的数据不完整，导致部分事件传递的参数存在缺失的情况，此类事件参数已调整为 Cacheable 封装的实体，修复实体 ID 未知无法通过 Rest 客户端发起 API 请求获取完整数据的问题； 网关所下发的数据不完整，原处理逻辑为通过 Rest 客户端发起 API 请求获取完整数据，在大型服务器内可能会导致性能不佳或超速等问题，例如 GuildMemberOnline 与 GuildMemberOffline ，此类事件参数已调整为 Cacheable 封装的实体，可通过 GetOrDownloadAsync 方法按需获取完整数据； 部分事件所传递的参数类型过于具体，导致类型不匹配而传递空值，例如 ReactionAdded ； 部分事件所传递的参数类型过于宽泛，例如 MessageDeleted 与 UserConnected ，可以避免不必要的模式匹配 部分事件传递参数缺失，例如 UserBanned 部分事件传递了过度冗余的参数，例如 MessageButtonClicked 事件参数所发生的具体变更可参阅文末的附录，对涉及到的事件的应用都需要进行相应的更新。 KMarkdown 格式化帮助类 Format 中的各格式化方法皆已变更为扩展方法，并新增可选参数 sanitize ，以支持是否对文本内的特殊字符进行转义，默认为 true 。扩展方法的调用方式仍然兼容原有的静态方法调用方式。 默认情况下，各格式化方法会对文本内与 KMarkdown 语法冲突的特殊字符进行转义，以避免 KMarkdown 语法解析错误。 此特性默认启用，可通过 sanitize 参数禁用。所有涉及到传入此方法的文本参数如已对特殊字符进行转义， 则应将 sanitize 参数设置为 false ，或调整传入参数为未转义的原始文本。另外， Format.Quote 与 Format.BlockQuote 方法的逻辑已调整，现在会在文本内按需插入换行符与零宽连字符，以保持文本在 KOOK 客户端中的显示效果。其中， Format.BlockQuote 方法的格式化结果可以保证整段文本在 KOOK 客户端中的显示为一段引用块，而 Format.Quote 方法的格式化结果则将文本按空行分割为多个引用块， 空行不会包括在引用块内。 CardJsonExtension 类中的 Parse 与 TryParse 方法已重命名为 ParseSingle 与 TryParseSingle ， 以避免与解析多个卡片时使用的 ParseMany 与 TryParseMany 方法产生冲突。所有涉及到此方法的调用都需要进行相应的更新。 IGuild 及 IRecommendInfo 的 Features 属性类型原为 object[] ，现已实现为 GuildFeatures 类型，所有涉及到此属性的调用都需要进行相应的更新。 RestPresence 命名空间已修正为 Kook.Rest 。所有涉及到 RestPresence 的调用都需要进行命名空间引用的更新。 新增 新增好友管理与用户屏蔽管理相关方法，变更详情参见文末的附录 为 Cacheable 与 Quote 类新增调试显示文本 KookSocketConfig 新增 MaxJoinedGuildDataFetchingRetryTimes 与 JoinedGuildDataFetchingRetryDelay 属性，控制加入服务器时的数据获取重试次数与重试间隔 CardJsonExtension 新增 ParseMany 与 TryParseMany 方法 （实验性功能）新增 IVoiceRegion.MinimumBoostLevel 属性 （实验性功能） KookRestClient 新增 ValidateCardAsync 与 ValidateCardsAsync 方法 变更 变更 BaseSocketClient 中的部分事件所传递的参数类型，变更详情参见文末的附录 Format 帮助类各格式化方法已变更为扩展方法，并新增可选参数 sanitize ，以支持是否对文本内的特殊字符进行转义，默认为 true 重命名 CardJsonExtension 的 Parse 与 TryParse 为 ParseSingle 与 TryParseSingle 实现 IGuild 及 IRecommendInfo 的 Features 属性为 GuildFeatures 类型 修正 RestPresence 命名空间为 Kook.Rest （实验性功能） KookRestClient.GetAdminGuildsAsync 方法现已支持 Bot 类型认证 修复 修复 Format.Quote 与 Format.BlockQuote 方法结果在 KOOK 中显示异常的问题 修复 CountdownModuleBuilder.Build 抛出异常时的错误信息错误的问题 修复 BaseSocketClient.DirectMessageUpdated 可能会传递错误的用户实体的问题 修复 BaseSocketClient 与消息相关的事件在传递包含引用的消息实体时 Author 属性在用户未缓存时为空的问题 修复 IGuild.OwnerId 为 0 的问题 修复 BaseSocketClient.Pinned 与 BaseSocketClient.Unpinned 事件所传递的消息未正确设置 IsPinned 属性的问题 修复 IPresence.ActiveClient 属性可能会被意外清空的问题 修复 IPresence 的调试显示信息格式不正确的问题 修复 IRestClient 的默认实现在源代码启用 DEBUG_REST 预处理器指令调试高并发请求时可能会抛出异常的问题 修复 Quote.Empty 不为静态属性的问题 优化 修复 KookRestApiClient 缺失预处理器指令的问题 优化 SocketUser.UpdateIntimacyAsync 方法对 IUser 接口的实现 优化 NumberBooleanConverter 的使用 KookSocketClient 接收乱序报文或对所接收的事件报文处理不正确时将报文内容到日志 KookSocketClient 打印异常报文时将使用传入的 serializerOptions 序列化选项 完善 BaseSocketClient 事件的 XML 文档 其他 由于 KOOK 服务端已修复创建角色时部分字段值缺失的问题，相关提交已还原 修正部分文档内容错误 修正集成测试所创建的测试服务器未被正确删除的问题 附录 新增接口列表： 获取所有好友： IKookClient.GetFriendsAsync 请求添加好友： IUser.RequestFriendAsync 删除好友： IUser.RemoveFriendAsync 获取所有好友请求： IKookClient.GetFriendRequestsAsync 接受好友请求： IFriendRequest.AcceptAsync 拒绝好友请求： IFriendRequest.DeclineAsync 获取所有被屏蔽用户： IKookClient.GetBlockedUsersAsync 屏蔽用户： IUser.BlockAsync 取消屏蔽用户： IUser.UnblockAsync BaseSocketClient 中变更参数的事件列表： ReactionAdded 与 ReactionRemoved Cacheable<IUserMessage, Guid> → Cacheable<IMessage, ulong> Cacheable<IMessageChannel, ulong> → ISocketMessageChannel DirectReactionAdded 与 DirectReactionRemoved Cacheable<IUserMessage, Guid> → Cacheable<IMessage, ulong> MessageDeleted Cacheable<IMessageChannel, ulong> → ISocketMessageChannel MessageUpdated Cacheable<IMessage, Guid> → Cacheable<SocketMessage, Guid> SocketMessage → Cacheable<SocketMessage, Guid> MessagePinned 与 MessageUnpinned Cacheable<IMessage, Guid> → Cacheable<SocketMessage, Guid> SocketMessage → Cacheable<SocketMessage, Guid> SocketGuildUser → Cacheable<SocketGuildUser, ulong> DirectMessageUpdated SocketMessage → Cacheable<SocketMessage, Guid> UserLeft SocketUser → Cacheable<SocketUser, ulong> UserBanned IReadOnlyCollection<SocketUser> → IReadOnlyCollection<Cacheable<SocketUser, ulong>> SocketUser → Cacheable<SocketUser, ulong> 新增 string 参数表示加入黑名单的原因 UserUnbanned IReadOnlyCollection<SocketUser> → IReadOnlyCollection<Cacheable<SocketUser, ulong>> SocketUser → Cacheable<SocketUser, ulong> UserUpdated SocketUser → Cacheable<SocketUser, ulong> GuildMemberUpdated SocketGuildUser → Cacheable<SocketGuildUser, ulong> GuildMemberOnline 与 GuildMemberOffline IReadOnlyCollection<SocketGuildUser> → IReadOnlyCollection<Cacheable<SocketGuildUser, ulong>> UserConnected 与 UserDisconnected SocketUser → Cacheable<SocketGuildUser, ulong> 移除 SocketGuild 参数，请从 SocketVoiceChannel.Guild 获取 MessageButtonClicked SocketUser → Cacheable<SocketGuildUser, ulong> IMessage → Cacheable<IMessage, Guid> 移除 SocketGuild 参数，请从 SocketTextChannel.Guild 获取 DirectMessageButtonClicked SocketUser → Cacheable<SocketUser, ulong> IMessage → Cacheable<IMessage, Guid> v0.3.1 [2023-03-19] 新增 新增 ICard.ToJsonString 及 ICardBuilder.ToJsonString 以支持卡片 JSON 序列化，新增 CardJsonExtension.Parse 及 CardJsonExtension.TryParse 以支持卡片 JSON 反序列化 v0.3.0 [2023-03-19] 更新路线 此版本将 IUserMessage.Resolve 中的默认参数 everyoneHandling 变更为 TagHandling.Name ，所有使用此方法的用法都需要留意此变更。 新增 IKookClient 接口新增方法重载 GetUserAsync ，并为 BaseSocketClient 实现接口 IKookClient 新增支持通过 KookConfig.FormatUsersInBidirectionalUnicode 禁用针对双向 Unicode 格式化用户名字符串 修复 修复 IUserMessage.Resolve 对全体成员与在线成员标签文本化不正确的问题 修复 IGuild.CreateRoleAsync 反序列化结果失败的问题 （实验性功能）修复 BaseKookClient.CreateGuildAsync 及 KookSocketClient.CreateGuildAsync 返回所创建的服务器信息不完整的问题 其它 为全部公共 API 添加 XML 文档 应用代码样式 v0.2.5 [2023-03-16] 更新路线 此版本为 KookRestClient.GetGamesAsync 方法签名新增了可选可空参数 GameCreationSource ，以支持获取指定创建来源的游戏信息。所有在向此方法传递位置实参 RequestOptions 的用法都需要更新。 新增 为方法 KookRestClient.GetGamesAsync 新增可选可空参数 GameCreationSource v0.2.4 [2023-03-09] 新增 新增支持解析角色 IRole 的颜色类型 ColorType 及渐变色信息 GradientColor v0.2.3 [2023-01-19] 新增 为 Bearer 类型认证新增支持 KookRestClient.GetAdminGuildsAsync 新增 Format.Colorize 用于 KMarkdown 文本颜色格式化 修复 修复 KookRestClient.GetGuildsAsync 在服务器数量较大时下载数据过慢的问题 （实验性功能）修复 KookRestClient.GetGuildsAsync 在 Bearer 类型认证下构造对象失败的问题 修复 Color 部分值不正确的问题 v0.2.2 [2022-12-30] 修复 修复了 SocketTextChannel.SendCardAsync 与 SocketTextChannel.SendCardsAsync 设置 ephemeralUser 参数不生效的问题 v0.2.1 [2022-12-25] 修复 修复了导致启动失败的 JSON 转换器错误 v0.2.0 [2022-12-25] 更新路线 此版本将非官方列出的接口实现分离到单独的包中，即 INestedChannel.SyncPermissionsAsync 等，使用此接口的开发者现在应该安装 Kook.Net.Experimental 包。 移除 移除了接口定义上的方法 INestedChannel.SyncPermissionsAsync ，接口的实现现已移动至 Kook.Net.Experimental 包中 新增 新增 Kook.Net.Experimental 包，用于实现非官方列出的接口 修复 修复了 IGuild.OpenId 为空时可能导致的空引用异常 其它 修正了不正确的代码缩进 v0.1.2 [2022-12-18] 更新路线 此版本将 SocketGuild.MemberCount 的类型从 int 更改为 int? ，其中 null 值表示未知的服务器成员数量。此外，类似的更改发生也在 SocketGuild.HasAllMembers 上。所有依赖这两个属性的用法都需要更新。 变更 KookSocketConfig.AlwaysDownloadUsers 也将定义是否在启动时加载服务器成员数量 修复 修复了修改语音频道时应用的不正确的先决条件 修复了不正确的文档 v0.1.1 [2022-11-20] 新增 新增 IGuild.GetActiveBoostSubscriptionsAsync JSON 反序列化失败时将输出报文本体至日志管理器 修复 修复 BaseSocketClient.UserUnbanned 未能正常触发的问题 修复 BaseSocketClient.GuildAvailable 事件触发时 DownloadVoiceStatesAsync 与 DownloadBoostSubscriptionsAsync 被意外绕过的问题 v0.1.0 [2022-11-15] 首次发布。"
  },
  "guides/concepts/connections.html": {
    "href": "guides/concepts/connections.html",
    "title": "管理连接 | Kook.Net 文档",
    "keywords": "管理 Kook.Net 中的连接 在 Kook.Net 中，一旦客户端启动，除非客户端被手动关闭， 否则其与 KOOK 网关之间将会尝试一直保持连接。 用法 要启动连接，请在客户端上调用 StartAsync 方法，这会启动一个 WebSocket 连接。 要终止连接，请在客户端上调用 StopAsync 方法，这会关闭任何已经打开的 WebSocket 连接。 由于启动/终止方法仅向底层连接管理器发送信号，指示其启动/终止连接， 启动/终止连接的操作是异步执行的，因此 这些方法会在启动/终止操作真正被执行前返回 。 因此，您需要订阅基于连接状态的事件，来准确地了解客户端何时启动/终止了连接。 所有的客户端都提供了 Connected 和 Disconnected 事件， 分别在连接启动或关闭时触发。需要注意的是，在 KookSocketClient 中， Connected 并不代表客户端完成了初始化以供业务逻辑进行调用。 KookSocketClient 上提供了一个单独的事件 Ready ， 仅当客户端下载完成所有必要的数据（如：服务器频道信息等），且拥有了完整了数据缓存， 该事件才会被触发。 重连 Tip 避免在网关线程上运行耗时代码！如果网关发生了如事件章节中所描述的死锁， 连接管理器将无法恢复并重新连接。 假设客户端由于网络波动、KOOK 服务端的重连请求或错误导致客户端断开连接， 而不是业务逻辑代码造成的死锁，客户端将会一直尝试重连并继续之前的会话。 不必担心如何维护连接，连接管理器的设计保证了重连机制的正常运行。 如果您的客户端没能成功地重连，或许这是一个 Bug，快来 KOOK Kook.Net 社区 找我反馈吧！"
  },
  "guides/concepts/events.html": {
    "href": "guides/concepts/events.html",
    "title": "事件 | Kook.Net 文档",
    "keywords": "Kook.Net 中的事件 Kook.Net 中的事件采用与标准 .NET 事件模式类似的方式实现， 不同的是，Kook.Net 中的事件类型都为 Task ， 事件参数传递不使用 EventArgs ，而是直接传递到事件处理程序中。 这使得事件处理程序可以直接在异步上下文中执行，事件返回类型为 Task ，而不是 async void 。 用法 要从事件中接收数据，只需通过 C# 委托的事件模式进行订阅。 订阅事件支持命名函数，也支持匿名函数（Lambda 表达式）。 线程安全性 所有的事件都被设计为线程安全的，所有的事件都拥有与网关线程相同的上下文， 在网关线程之外的任务上同步运行， 但这样做也会存在副作用，这可能会导致网关现成死锁并终止连接。 经验之谈，任何耗时超过 3 秒的任务都 不应该 直接在事件上下文中等待， 而是应该包装在 Task.Run 中执行，或是卸载到另外一个任务中。 这意味着您不应该在与事件相同的上下文中通过 KOOK 网关请求数据， 由于网关线程将等待所有被调用的事件处理程序完成，然后才会处理所有来自网关的任何其它数据， 这将导致一个无法恢复的死锁。 Warning 如果您需要在网关线程之外的上下文中（下以事件处理线程指代）访问 Kook.Net 的缓存实体，可能会遇到线程安全性问题。 例如，当您在事件处理线程中访问缓存中的某频道实体时，与此同时，如果网关线程正在处理频道删除事件， 则可能会导致频道实体在缓存中被删除，从而导致事件处理线程中在访问频道实体时可能会抛出异常。 又如，当您在时间处理线程中访问频道消息时，与此同时，如果消息的作者编辑了该消息文本，网关线程可能会更新该消息实体， 从而导致事件处理线程中在访问消息实体时可能会取到不正确的消息文本。 因此建议您 在开启不在网关线程中等待的、可能会访问缓存实体中的数据的事件处理线程前，先将必要数据取值为局部变量，再进行后续操作 。 相同的问题在队列模式或发布订阅模式下也可能会出现，因此，这些可能会被网关线程更新的数据都应包装为队列或发布订阅事件的参数。 Note 等待任务完成 ： await Task.Run(() => { /* ... */ }); 或 await Task.Run(async () => { /* ... await ... */ }); 此时，异常将会被正确地传播到事件上下文中，但这样做也会导致网关线程等待任务完成。 不等待任务完成 ： _ = Task.Run(() => { /* ... */ }); 或 _ = Task.Run(async () => { /* ... await ... */ }); 此时，异常不会被传播到事件上下文中，您需要在事件处理线程正确地捕获处理异常。 额外要注意的是，如果异常被抛出到 async void 所标记的方法中，如果异常没有被正确地处理， 将会导致程序退出 。 常见模式 Kook.Net 中的事件签名都是形如 Func<T1, ..., Task> 的模式，没有额外定义名称， 因此，有关方法签名的详细信息，请参考 IntelliSense 智能提示，或直接浏览 API 文档。 不过，Kook.Net 中的事件签名大多遵循类似的模式，还是可以让您从中推断参数定义。 实体变更 具有 Func<Entity, Entity, Task> 签名的事件处理程序通常表示一个实体中的信息发生了变更， 两个实体中，前者为发生变更前实体的副本，后者为变更执行完成后的实体。 此模式通常仅在 EntityUpdated 事件中出现。 缓存实体 具有 Func<Cacheable, Entity, Task> 签名的事件处理程序则通常表示 API 或网关并未提供实体发生变更前的状态，因此它可以从客户端的缓存中提取或从 API 中下载。 有关此对象的更多信息，请参阅 Cacheable 文档。 Note 许多与消息相关的实体（例如： MessageUpdated 和 ReactionAdded ）依赖于客户端的消息缓存， 该特性默认 不启用 ，因此，如果您需要使用它，请在 KookSocketConfig 中通过设置 MessageCacheSize 的值来启用该消息缓存。 示例 using Kook; using Kook.WebSocket; public class Program { private KookSocketClient _client; public static Task Main(string[] args) => new Program().MainAsync(); public async Task MainAsync() { // 如需使用事件中的 Cacheable<IMessage, Guid> 实体， // 您可能需要在客户端配置中启用消息缓存。 var _config = new KookSocketConfig { MessageCacheSize = 100 }; _client = new KookSocketClient(_config); await _client.LoginAsync(TokenType.Bot, Environment.GetEnvironmentVariable(\"KookToken\")); await _client.StartAsync(); _client.MessageUpdated += MessageUpdated; _client.Ready += () => { Console.WriteLine(\"Bot is connected!\"); return Task.CompletedTask; } await Task.Delay(Timeout.Infinite); } private async Task MessageUpdated(Cacheable<IMessage, Guid> before, SocketMessage after, ISocketMessageChannel channel) { // 如果没有启用消息缓存，消息下载方法可能会获得与 `after` 完全相同的实体 var message = await before.GetOrDownloadAsync(); Console.WriteLine($\"{message} -> {after}\"); } }"
  },
  "guides/concepts/logging.html": {
    "href": "guides/concepts/logging.html",
    "title": "日志 | Kook.Net 文档",
    "keywords": "在 Kook.Net 中记录日志 Kook.Net 中提供了一个日志事件，所有的日志消息都会通过此事件传递。 有关 Kook.Net 中的事件，请参阅 事件 章节。 Warning Kook.Net 中所有的日志实现处理程序都将在网关线程上同步执行， 如果您要将日志消息输出到 Web API 中（例如：Sentry、Stackdriver、KOOK 频道等）， 建议将输出程序包装在 Task.Run 中，以避免网关线程在等待数据日志输出时阻塞。 更多有关网关线程的信息，请参阅 事件 章节。 在客户端中记录日志 要处理日志，只需将日志处理程序订阅至 Log 事件， 日志处理程序需接收一个 LogMessage 对象，返回 Task 对象。 在命令中记录日志 Kook.Net 的 CommandService 也提供了 Log 事件，其签名与其它日志事件相同。 通过日志事件记录的数据往往与 CommandException 相结合使用，其中包含了命令上下文与异常信息。 示例 using Kook; using Kook.WebSocket; public class LoggingService { public LoggingService(KookSocketClient client, CommandService command) { client.Log += LogAsync; command.Log += LogAsync; } private Task LogAsync(LogMessage message) { if (message.Exception is CommandException cmdException) { Console.WriteLine($\"[Command/{message.Severity}] {cmdException.Command.Aliases.First()}\" + $\" failed to execute in {cmdException.Context.Channel}.\"); Console.WriteLine(cmdException); } else Console.WriteLine($\"[General/{message.Severity}] {message}\"); return Task.CompletedTask; } }"
  },
  "guides/dependency_injection/basics.html": {
    "href": "guides/dependency_injection/basics.html",
    "title": "概述 | Kook.Net 文档",
    "keywords": "依赖注入 依赖注入并不是 Discord.Net 中必要的功能，但它可以让框架的使用更为简便。与许多其他库相结合使用，可以更好地控制应用程序。 按照 依赖注入不是 .NET 的原生功能。您需要将扩展包安装到项目中才能使用它： Microsoft.Extensions.DependencyInjection Microsoft.Extensions.DependencyInjection.Abstractions Warning 仅下载 Abstractions 包不包含使用依赖注入所需的一些必要类，请确保同时安装两个包，或选择仅安装 Microsoft.Extensions.DependencyInjection 包来隐式同时安装两个包。 Visual Studio 程序包管理控制台 PM> Install-Package Microsoft.Extensions.DependencyInjection . Rider 命令行 dotnet add package Microsoft.Extensions.DependencyInjection Tip ASP.NET 已经在其框架中包含了所有必要的程序集，要在 ASP.NET 中使用依赖注入完整功能，不需要安装任何额外的 NuGet 包。 开始 首先，您需要创建一个基于依赖注入的应用程序，这样就可以在整个项目中访问并注入它们。 public class Program { private readonly IServiceProvider _serviceProvider; public Program() { _serviceProvider = CreateProvider(); } static void Main(string[] args) => new Program().RunAsync(args).GetAwaiter().GetResult(); static IServiceProvider CreateProvider() { var collection = new ServiceCollection(); //... return collection.BuildServiceProvider(); } async Task RunAsync(string[] args) { //... } } 要在不同的类中自由传递依赖项，您需要将它们注册到新的 ServiceCollection 中，并将它们构建到 IServiceProvider 中，如上所示。 然后需要通过启动文件访问 IServiceProvider，以便您可以访问您的提供程序并对其进行管理。 static IServiceProvider CreateServices() { var config = new KookSocketConfig() { //... }; var collection = new ServiceCollection() .AddSingleton(config) .AddSingleton<KookSocketClient>(); return collection.BuildServiceProvider(); } 如上所示，这里创建了一个 KookSocketConfig 的实例，并在添加客户端本身 之前 将其添加到了服务容器中。 服务容器会优先选择已经存在的服务来填充构造函数，且你已经将配置类注册到服务容器中，因此，带有配置参数的构造函数重载会被优先调用。 使用依赖项 在 Program 类的构造函数中构建服务容器提供程序后，现在可以在您正在使用的实例中使用它了。 通过提供程序，我们可以请求我们之前所注册的 KookSocketClient。 async Task RunAsync(string[] args) { // 从客户端请求实例。 // 我们在这里首先请求它，因此其目标构造函数将会调用，我们会得到一个客户端的实例。 var client = _services.GetRequiredService<KookSocketClient>(); client.Log += async (msg) => { await Task.CompletedTask; Console.WriteLine(msg); } await client.LoginAsync(TokenType.Bot, \"\"); await client.StartAsync(); await Task.Delay(Timeout.Infinite); } Warning 服务实例的构造函数在被 首次请求 之前不会被调用。要想实例化服务容器里的服务，需要先从提供程序中请求服务。 如果所请求的服务有依赖项，那么在实例化服务本身之前，其未被实例化的依赖项会被实例化。 注入依赖项 您不仅可以直接从字段或属性中访问提供程序，还可以将实例传递给在提供程序中注册的类。有多种方法可以实现这一点。请参考 注入实例 了解更多信息。"
  },
  "guides/dependency_injection/injection.html": {
    "href": "guides/dependency_injection/injection.html",
    "title": "注入实例 | Kook.Net 文档",
    "keywords": "注入实例 在 IServiceProvider 中注册的服务后可以注入到任何注册的类中，这可以通过属性或构造函数来实现。 Note 如上所述，依赖项 和 目标类必须都进行注册，服务提供程序才可以解析它。 通过构造函数注入 服务可以从类的构造函数中注入。 这是首选的方法，因为这可以将只读字段与提供的服务关联在一起，且在类的外部不可访问。 public class ClientHandler { private readonly KookSocketClient _client; public ClientHandler(KookSocketClient client) { _client = client; } public async Task ConfigureAsync() { //... } } 通过属性注入 也可以通过属性进行注入。 public class ClientHandler { public KookSocketClient Client { get; set; } public async Task ConfigureAsync() { //... } } Warning 依赖项注入不会解析属性注入中缺少的服务，也不会选择构造函数作为替代。如果尝试注入公共可访问属性时其服务缺失，应用程序将抛出错误。 使用提供程序本身 也可以将提供程序本身注入到类中，可用于以下多种用例： 允许库（如 Kook.Net）在内部访问提供程序 注入可选依赖项 如有必要，可以直接在提供程序上调用方法，这通常用于创建作用域 public class UtilizingProvider { private readonly IServiceProvider _provider; private readonly AnyService _service; // 服务可为 null，因为它只有在提供程序中实际可用时才会填充 private readonly AnyOtherService? _otherService; // 该构造函数仅注入服务提供程序，并使用它来填充其他依赖项 public UtilizingProvider(IServiceProvider provider) { _provider = provider; _service = provider.GetRequiredService<AnyService>(); _otherService = provider.GetService<AnyOtherService>(); } // 该构造函数注入服务提供程序和 AnyService，这样无需调用 GetRequiredService页可以确保 AnyService 不为 null public UtilizingProvider(IServiceProvider provider, AnyService service) { _provider = provider; _service = service; _otherService = provider.GetService<AnyOtherService>(); } } Note 请记住，提供程序将选择“最大”的可用构造函数。 如果选择引入多个构造函数，请记住，如在某一个构造函数中缺失了某项服务，提供程序可能会选择另一个可用的构造函数，而不是抛出异常。"
  },
  "guides/dependency_injection/scaling.html": {
    "href": "guides/dependency_injection/scaling.html",
    "title": "隐式注入 | Kook.Net 文档",
    "keywords": "隐式注入 依赖注入有很多用例，并且非常适合大规模应用程序。有几种方法可以使大量服务的注册和使用更加容易。 使用一系列服务 如果您有许多服务都具有相同的用途，例如处理事件或服务模块，您可以通过一些要求一次注册和注入它们： 所有类都需要继承单个接口或抽象类型 虽然不是必需的，但最好是接口和类型在调用时具有相同的方法签名 您需要注册一个所有类型都可以注入的类 隐式注册 通过获取程序集中的所有类型，并检查它们是否实现了指定接口，来进行服务的注册。 public static ServiceCollection RegisterImplicitServices(this ServiceCollection collection, Type interfaceType, Type activatorType) { // 获取当前程序集中的所有类型。有很多方法可以做到这一点，但这是最快的。 foreach (var type in typeof(Program).Assembly.GetTypes()) { if (interfaceType.IsAssignableFrom(type) && !type.IsAbstract) collection.AddSingleton(interfaceType, type); } // 注册可以激活这些实例的类，以便您可以激活这些实例。 collection.AddSingleton(activatorType); } Note 如上所示，interfaceType 和 activatorType 未定义。对于下面的用例，这些是 IService 和 ServiceActivator 。 使用隐式依赖 为了使用隐式依赖，您必须访问您之前注册的激活器类。 async Task RunAsync() { //... await _serviceProvider.GetRequiredService<ServiceActivator>() .ActivateAsync(); //... } 当访问并调用激活器类的 ActivateAsync() 方法时，将执行以下代码： public class ServiceActivator { // 这包含了所有已注册的服务类型为 IService 的服务 private readonly IEnumerable<IService> _services; public ServiceActivator(IEnumerable<IService> services) { _services = services; } public async Task ActivateAsync() { foreach(var service in _services) { await service.StartAsync(); } } } 至此，所有通过实现 IService 接口被注册的类上的自动代码都会被执行并启动。"
  },
  "guides/dependency_injection/services.html": {
    "href": "guides/dependency_injection/services.html",
    "title": "命令框架中的依赖注入 | Kook.Net 文档",
    "keywords": "命令框架中的依赖注入 在文本命令框架服务模块中，依赖注入的非常简单。 您可以将任何服务注入到模块中，而无需将模块注册到提供程序中。Kook.Net会在内部解析您的依赖项。 注册服务 前文描述的行为允许已注册的成员作为可用构造函数的参数，因此 Socket 客户端和配置类将会被自动解析，并使用 CommandService(client, config) 重载。 static IServiceProvider CreateServices() { var config = new KookSocketConfig() { //... }; var servConfig = new CommandServiceConfig() { //... } var collection = new ServiceCollection() .AddSingleton(config) .AddSingleton<KookSocketClient>() .AddSingleton(servConfig) .AddSingleton<CommandService>(); return collection.BuildServiceProvider(); } 模块内的用法 在模块的构造函数中，任何参数都将被你所传入的 IServiceProvider 填充。 任何公共可设置属性也将以相同的方式填充。 public class MyModule : InteractionModuleBase { private readonly MyService _service; public MyModule(MyService service) { _service = service; } [Command(\"things\")] public async Task ThingsAsync() { var str = string.Join(\"\\n\", _service.Things) await ReplyTextAsync(str); } } 如果你接受 CommandService 或 IServiceProvider 作为构造函数的参数或可注入的属性，这些条目将会被模块所加载的 CommandService 和传入的 IServiceProvider 填充。 Note 在属性上标记 [DontInjectAttribute] 特性将会阻止该属性被注入。 服务 模块是瞬态的，会在每次请求时重新实例化，因此如果需要在多个命令执行之间保持值，建议创建单例服务来包装。 public class MyService { public List<string> Things { get; } public MyService() { Things = new(); } }"
  },
  "guides/dependency_injection/types.html": {
    "href": "guides/dependency_injection/types.html",
    "title": "生命周期 | Kook.Net 文档",
    "keywords": "生命周期 依赖项可以有三种生命周期。每种生命周期都有不同的用例。 Warning 当使用接口 IServiceType 和类 ImplementationType 注册类型时，只有 IServiceType 可用于注入，而 ImplementationType 将用于底层实例。 单例 单例服务在首次请求时创建单个实例，并应用程序在整个生命周期中维护该单一实例。 在单例中更改的任何值都将在依赖于它的所有实例中更改，因为它们都具有对这一单例服务的相同引用。 注册 // 带有服务接口类型 collection.AddSingleton<ISingletonService, SingletonService>(); // 不带有服务接口类型 collection.AddSingleton<SingletonService>(); Note KOOK 客户端和命令服务等类型都是单例的，因为它们应该在整个应用程序中持续存在，并与对该对象的所有引用共享其状态。 作用域 作用域服务在每次请求时创建一个新实例，但在“作用域”范围内保留。 只要服务在创建的作用域中可见，就会为该类型的所有引用重用同一实例。 这意味着您可以在执行期间重用同一实例，并在请求处于活动状态时保持服务的状态。 注册 // 带有服务接口类型 collection.AddScoped<IScopedService, ScopedService>(); // 不带有服务接口类型 collection.AddScoped<ScopedService>(); Note 在不使用 HTTP 或类似 EF Core 等库的情况下，作用域在 KOOK Bot 中不常见。 瞬时 瞬时服务在每次请求时创建一个新实例，并且不在目标服务的引用之间共享其状态。 它适用于需要很少状态的轻量级类型，以便在执行后快速释放。 注册 // 带有服务接口类型 collection.AddTransient<ITransientService, TransientService>(); // 不带有服务接口类型 collection.AddTransient<TransientService>(); Note Kook.Net 模块的行为与瞬时类型完全相同，并且仅在命令执行所需的时间内存在。 这就是为什么建议应用程序使用单例服务来跟踪跨命令执行的数据。"
  },
  "guides/emoji/emoji.html": {
    "href": "guides/emoji/emoji.html",
    "title": "表情符号 | Kook.Net 文档",
    "keywords": "Kook.Net 中的表情符号 KOOK 中的表情符号包含两种形式，即 Emoji 表情与服务器自定义表情，在 Kook.Net 中分别以 Emoji 与 Emote 表示，这两个类都实现了 IEmote 接口。 Emoji Emoji 是一种通用的表情符号，是 Unicode 标准中的一部分，可以在任何支持 Unicode 标准的平台上使用。因此，诸如 👌 、 ♥ 、 👀 等的字符串都会被 KOOK 解析为 Emoji 表情符号。 每个被 KOOK 所支持的 Emoji 表情符号都有其对应的短代码，其为由两个冒号及其所包围的别名组成，例如 👌 、 ♥ 、 👀 可分别被表示为 :ok_hand: 、 :heart: 、 :eyes: 。KOOK API 处理有关 Emoji 表情符号的消息时会自动将短代码转换为对应的 Emoji 表情符号。 有关 KOOK 所受支持的短代码，可参考 此页面 。 声明 Emoji 要创建 Emoji 对象，可将 Emoji 表情符号或其 Unicode 传入 Emoji 的构造函数中，例如 new Emoji(\"👌\"); 或 new Emoji(\"\\uD83D\\uDC4C\"); ，也可以通过使用 Parse 或 TryParse 解析 Emoji 表情符号或其短代码的方式创建 Emoji 对象，例如 Emoji.Parse(\"👌\") 、 Emoji.Parse(\":ok_hand:\") 、 Emoji.TryParse(\":ok_hand:\", out var emoji) 。 为消息添加 Emoji 表情符号的代码示例： public async Task ReactAsync(SocketUserMessage userMsg) { // 使用表情符号本身 await userMsg.AddReactionAsync(new Emoji(\"👌\")); // 使用 Unicode await userMsg.AddReactionAsync(new Emoji(\"\\uD83D\\uDC4C\")); // 使用短代码 await userMsg.AddReactionAsync(Emoji.Parse(\":ok_hand:\")); } Emote Kook.Net 中的 Emote 指代 KOOK 中添加到服务器内的自定义表情符号，其在 KMarkdown 中的完全限定形式形如： (emj)kook-logo(emj)[1591057729615250/9nG5PxHkZE074074] 。 其中， kook-logo 为表情符号的别名， 1591057729615250/9nG5PxHkZE074074 为表情符号的 ID。 目前 KOOK 中尚未提供便捷获取自定义表情符号的完全限定形式的方法，要获取自定义表情符号的完全限定形式，可通过一下几种方式： Kook.Net 对消息体中的表情符号部分进行了解析，可通过 Tags 获取 Type 为 Emoji 的 Emote 对象，通过 ToKMarkdownString 方法获取完全限定形式。 通过 Emotes 属性获取服务器中的全部自定义表情符号，从而获取其完全限定形式。 通过 GetEmotesAsync 方法获取服务器中的全部自定义表情符号，从而获取其完全限定形式。 在 KOOK 网页端或桌面客户端中启用开发者工具 (Ctrl+Alt+Shift+O)，通过跟踪与表情符号相关的网络请求负载或相应获取其完全限定形式。 声明 Emote 要通过服务器自定义表情符号的完全限定形式创建 Emote 对象，请使用 Parse 或 TryParse 方法，例如 Emote.Parse(\"(emj)kook-logo(emj)[1591057729615250/9nG5PxHkZE074074]\") 。 public async Task ReactAsync(SocketUserMessage userMsg) { if (Emote.TryParse(emoteString, out var emote)) { await userMsg.AddReactionAsync(emote); } } Tip 要在 Socket 客户端中通过表情符号名称获取指定的表情符号，可以访问 Emotes 属性。 private readonly KookSocketClient _client; public async Task ReactAsync(SocketUserMessage userMsg, string emoteName) { var emote = _client.Guilds .SelectMany(x => x.Emotes) .FirstOrDefault(x => x.Name.IndexOf( emoteName, StringComparison.OrdinalIgnoreCase) != -1); if (emote is null) return; await userMsg.AddReactionAsync(emote); } Tip KOOK 中，激活 BUFF 的用户可以跨服务器使用表情符号，因此，Bot 可能会收到来自 Bot 自身并未加入的服务器的表情符号。 虽然 KOOK Bot API 允许 Bot 跨服务器使用表情符号，但不能使用未加入的服务器的表情符号。 为了安全起见，若在 Socket 客户端中要在消息中引用、或添加新回应时采用未知来源的表情符号，应当访问所有服务器的 Emotes 属性来确定表情符号是否存在于 Bot 所加入的服务器中，或捕获可能的异常。 更多信息 要进一步了解如何使用 Emoji 和 Emote，请参阅 IEmote 文档。"
  },
  "guides/emoji/emoji-list.html": {
    "href": "guides/emoji/emoji-list.html",
    "title": "受支持的表情符号列表 | Kook.Net 文档",
    "keywords": "受支持的表情符号列表 此列表数据源于 KOOK API 。 Emoji Unicode 短代码 😀 \\ud83d\\ude00 :grinning: 😃 \\ud83d\\ude03 :smiley: 😄 \\ud83d\\ude04 :smile: 😁 \\ud83d\\ude01 :grin: 😆 \\ud83d\\ude06 :laughing: 😅 \\ud83d\\ude05 :sweat_smile: 🤣 \\ud83e\\udd23 :rofl: 😂 \\ud83d\\ude02 :joy: 🙂 \\ud83d\\ude42 :slightly_smiling_face: 🙃 \\ud83d\\ude43 :upside_down_face: 😉 \\ud83d\\ude09 :wink: 😊 \\ud83d\\ude0a :blush: 😇 \\ud83d\\ude07 :innocent: 🥰 \\ud83e\\udd70 :smiling_face_with_hearts: 😍 \\ud83d\\ude0d :heart_eyes: 🤩 \\ud83e\\udd29 :star_struck: 😘 \\ud83d\\ude18 :kissing_heart: 😗 \\ud83d\\ude17 :kissing: ☺ \\u263a :relaxed: 😚 \\ud83d\\ude1a :kissing_closed_eyes: 😙 \\ud83d\\ude19 :kissing_smiling_eyes: 😋 \\ud83d\\ude0b :yum: 😛 \\ud83d\\ude1b :stuck_out_tongue: 😜 \\ud83d\\ude1c :stuck_out_tongue_winking_eye: 🤪 \\ud83e\\udd2a :zany_face: 😝 \\ud83d\\ude1d :stuck_out_tongue_closed_eyes: 🤑 \\ud83e\\udd11 :money_mouth_face: 🤗 \\ud83e\\udd17 :hugging_face: 🤭 \\ud83e\\udd2d :face_with_hand_over_mouth: 🤫 \\ud83e\\udd2b :shushing_face: 🤔 \\ud83e\\udd14 :thinking_face: 🤐 \\ud83e\\udd10 :zipper_mouth_face: 🤨 \\ud83e\\udd28 :face_with_raised_eyebrow: 😐 \\ud83d\\ude10 :neutral_face: 😑 \\ud83d\\ude11 :expressionless: 😶 \\ud83d\\ude36 :no_mouth: 😏 \\ud83d\\ude0f :smirk: 😒 \\ud83d\\ude12 :unamused: 🙄 \\ud83d\\ude44 :roll_eyes: 😬 \\ud83d\\ude2c :grimacing: 🤥 \\ud83e\\udd25 :lying_face: 😌 \\ud83d\\ude0c :relieved: 😔 \\ud83d\\ude14 :pensive: 😪 \\ud83d\\ude2a :sleepy: 🤤 \\ud83e\\udd24 :drooling_face: 😴 \\ud83d\\ude34 :sleeping: 😷 \\ud83d\\ude37 :mask: 🤒 \\ud83e\\udd12 :face_with_thermometer: 🤕 \\ud83e\\udd15 :face_with_head_bandage: 🤢 \\ud83e\\udd22 :nauseated_face: 🤮 \\ud83e\\udd2e :face_vomiting: 🤧 \\ud83e\\udd27 :sneezing_face: 🥵 \\ud83e\\udd75 :hot_face: 🥶 \\ud83e\\udd76 :cold_face: 🥴 \\ud83e\\udd74 :woozy_face: 😵 \\ud83d\\ude35 :dizzy_face: 🤯 \\ud83e\\udd2f :exploding_head: 🤠 \\ud83e\\udd20 :cowboy_hat_face: 🥳 \\ud83e\\udd73 :partying_face: 😎 \\ud83d\\ude0e :sunglasses: 🤓 \\ud83e\\udd13 :nerd_face: 🧐 \\ud83e\\uddd0 :face_with_monocle: 😕 \\ud83d\\ude15 :confused: 😟 \\ud83d\\ude1f :worried: 🙁 \\ud83d\\ude41 :slightly_frowning_face: ☹ \\u2639 :frowning_face: 😮 \\ud83d\\ude2e :open_mouth: 😯 \\ud83d\\ude2f :hushed: 😲 \\ud83d\\ude32 :astonished: 😳 \\ud83d\\ude33 :flushed: 🥺 \\ud83e\\udd7a :pleading_face: 😦 \\ud83d\\ude26 :frowning: 😧 \\ud83d\\ude27 :anguished: 😨 \\ud83d\\ude28 :fearful: 😰 \\ud83d\\ude30 :cold_sweat: 😥 \\ud83d\\ude25 :disappointed_relieved: 😢 \\ud83d\\ude22 :cry: 😭 \\ud83d\\ude2d :sob: 😱 \\ud83d\\ude31 :scream: 😖 \\ud83d\\ude16 :confounded: 😣 \\ud83d\\ude23 :persevere: 😞 \\ud83d\\ude1e :disappointed: 😓 \\ud83d\\ude13 :sweat: 😩 \\ud83d\\ude29 :weary: 😫 \\ud83d\\ude2b :tired_face: 🥱 \\ud83e\\udd71 :yawning_face: 😤 \\ud83d\\ude24 :triumph: 😡 \\ud83d\\ude21 :rage: 😠 \\ud83d\\ude20 :angry: 🤬 \\ud83e\\udd2c :cursing_face: 😈 \\ud83d\\ude08 :smiling_imp: 👿 \\ud83d\\udc7f :imp: 💀 \\ud83d\\udc80 :skull: ☠ \\u2620 :skull_and_crossbones: 💩 \\ud83d\\udca9 :poop: 🤡 \\ud83e\\udd21 :clown_face: 👹 \\ud83d\\udc79 :japanese_ogre: 👺 \\ud83d\\udc7a :japanese_goblin: 👻 \\ud83d\\udc7b :ghost: 👽 \\ud83d\\udc7d :alien: 👾 \\ud83d\\udc7e :space_invader: 🤖 \\ud83e\\udd16 :robot: 😺 \\ud83d\\ude3a :smiley_cat: 😸 \\ud83d\\ude38 :smile_cat: 😹 \\ud83d\\ude39 :joy_cat: 😻 \\ud83d\\ude3b :heart_eyes_cat: 😼 \\ud83d\\ude3c :smirk_cat: 😽 \\ud83d\\ude3d :kissing_cat: 🙀 \\ud83d\\ude40 :scream_cat: 😿 \\ud83d\\ude3f :crying_cat_face: 😾 \\ud83d\\ude3e :pouting_cat: 💋 \\ud83d\\udc8b :kiss: 👋 \\ud83d\\udc4b :wave: 🤚 \\ud83e\\udd1a :raised_back_of_hand: 🖐 \\ud83d\\udd90 :raised_hand_with_fingers_splayed: ✋ \\u270b :raised_hand: 🖖 \\ud83d\\udd96 :vulcan_salute: 👌 \\ud83d\\udc4c :ok_hand: 🤏 \\ud83e\\udd0f :pinching_hand: ✌ \\u270c :v: 🤞 \\ud83e\\udd1e :crossed_fingers: 🤟 \\ud83e\\udd1f :love_you_gesture: 🤘 \\ud83e\\udd18 :metal: 🤙 \\ud83e\\udd19 :call_me_hand: 👈 \\ud83d\\udc48 :point_left: 👉 \\ud83d\\udc49 :point_right: 👆 \\ud83d\\udc46 :point_up_2: 🖕 \\ud83d\\udd95 :middle_finger: 👇 \\ud83d\\udc47 :point_down: ☝ \\u261d :point_up: 👍 \\ud83d\\udc4d 👍 👎 \\ud83d\\udc4e :-1: ✊ \\u270a :fist: 👊 \\ud83d\\udc4a :punch: 🤛 \\ud83e\\udd1b :fist_left: 🤜 \\ud83e\\udd1c :fist_right: 👏 \\ud83d\\udc4f :clap: 🙌 \\ud83d\\ude4c :raised_hands: 👐 \\ud83d\\udc50 :open_hands: 🤲 \\ud83e\\udd32 :palms_up_together: 🤝 \\ud83e\\udd1d :handshake: 🙏 \\ud83d\\ude4f :pray: ✍ \\u270d :writing_hand: 💅 \\ud83d\\udc85 :nail_care: 🤳 \\ud83e\\udd33 :selfie: 💪 \\ud83d\\udcaa :muscle: 🦾 \\ud83e\\uddbe :mechanical_arm: 🦿 \\ud83e\\uddbf :mechanical_leg: 🦵 \\ud83e\\uddb5 :leg: 🦶 \\ud83e\\uddb6 :foot: 👂 \\ud83d\\udc42 :ear: 🦻 \\ud83e\\uddbb :ear_with_hearing_aid: 👃 \\ud83d\\udc43 :nose: 🧠 \\ud83e\\udde0 :brain: 🦷 \\ud83e\\uddb7 :tooth: 🦴 \\ud83e\\uddb4 :bone: 👀 \\ud83d\\udc40 :eyes: 👁 \\ud83d\\udc41 :eye: 👅 \\ud83d\\udc45 :tongue: 👄 \\ud83d\\udc44 :lips: 👶 \\ud83d\\udc76 :baby: 🧒 \\ud83e\\uddd2 :child: 👦 \\ud83d\\udc66 :boy: 👧 \\ud83d\\udc67 :girl: 🧑 \\ud83e\\uddd1 :adult: 👱 \\ud83d\\udc71 :person_blond_hair: 👨 \\ud83d\\udc68 :man: 🧔 \\ud83e\\uddd4 :bearded_person: 👨‍🦰 \\ud83d\\udc68\\u200d\\ud83e\\uddb0 :red_haired_man: 👨‍🦱 \\ud83d\\udc68\\u200d\\ud83e\\uddb1 :curly_haired_man: 👨‍🦳 \\ud83d\\udc68\\u200d\\ud83e\\uddb3 :white_haired_man: 👨‍🦲 \\ud83d\\udc68\\u200d\\ud83e\\uddb2 :bald_man: 👩 \\ud83d\\udc69 :woman: 👩‍🦰 \\ud83d\\udc69\\u200d\\ud83e\\uddb0 :red_haired_woman: 🧑‍🦰 \\ud83e\\uddd1\\u200d\\ud83e\\uddb0 :person_red_hair: 👩‍🦱 \\ud83d\\udc69\\u200d\\ud83e\\uddb1 :curly_haired_woman: 🧑‍🦱 \\ud83e\\uddd1\\u200d\\ud83e\\uddb1 :person_curly_hair: 👩‍🦳 \\ud83d\\udc69\\u200d\\ud83e\\uddb3 :white_haired_woman: 🧑‍🦳 \\ud83e\\uddd1\\u200d\\ud83e\\uddb3 :person_white_hair: 👩‍🦲 \\ud83d\\udc69\\u200d\\ud83e\\uddb2 :bald_woman: 🧑‍🦲 \\ud83e\\uddd1\\u200d\\ud83e\\uddb2 :person_bald: 👱‍♀️ \\ud83d\\udc71\\u200d\\u2640\\ufe0f :blonde_woman: 👱‍♂️ \\ud83d\\udc71\\u200d\\u2642\\ufe0f :man_blond_hair: 🧓 \\ud83e\\uddd3 :older_adult: 👴 \\ud83d\\udc74 :older_man: 👵 \\ud83d\\udc75 :older_woman: 🙍 \\ud83d\\ude4d :person_frowning: 🙍‍♂️ \\ud83d\\ude4d\\u200d\\u2642\\ufe0f :frowning_man: 🙍‍♀️ \\ud83d\\ude4d\\u200d\\u2640\\ufe0f :frowning_woman: 🙎 \\ud83d\\ude4e :pouting_face: 🙎‍♂️ \\ud83d\\ude4e\\u200d\\u2642\\ufe0f :man_pouting: 🙎‍♀️ \\ud83d\\ude4e\\u200d\\u2640\\ufe0f :pouting_woman: 🙅 \\ud83d\\ude45 :no_good: 🙅‍♂️ \\ud83d\\ude45\\u200d\\u2642\\ufe0f :ng_man: 🙅‍♀️ \\ud83d\\ude45\\u200d\\u2640\\ufe0f :ng_woman: 🙆 \\ud83d\\ude46 :ok_woman: 🙆‍♂️ \\ud83d\\ude46\\u200d\\u2642\\ufe0f :ok_man: 🙆‍♀️ \\ud83d\\ude46\\u200d\\u2640\\ufe0f :woman_gesturing_ok: 💁 \\ud83d\\udc81 :information_desk_person: 💁‍♂️ \\ud83d\\udc81\\u200d\\u2642\\ufe0f :sassy_man: 💁‍♀️ \\ud83d\\udc81\\u200d\\u2640\\ufe0f :sassy_woman: 🙋 \\ud83d\\ude4b :raising_hand: 🙋‍♂️ \\ud83d\\ude4b\\u200d\\u2642\\ufe0f :man_raising_hand: 🙋‍♀️ \\ud83d\\ude4b\\u200d\\u2640\\ufe0f :raising_hand_woman: 🧏 \\ud83e\\uddcf :deaf_person: 🧏‍♂️ \\ud83e\\uddcf\\u200d\\u2642\\ufe0f :deaf_man: 🧏‍♀️ \\ud83e\\uddcf\\u200d\\u2640\\ufe0f :deaf_woman: 🙇 \\ud83d\\ude47 :bow: 🙇‍♂️ \\ud83d\\ude47\\u200d\\u2642\\ufe0f :bowing_man: 🙇‍♀️ \\ud83d\\ude47\\u200d\\u2640\\ufe0f :bowing_woman: 🤦 \\ud83e\\udd26 :facepalm: 🤦‍♂️ \\ud83e\\udd26\\u200d\\u2642\\ufe0f :man_facepalming: 🤦‍♀️ \\ud83e\\udd26\\u200d\\u2640\\ufe0f :woman_facepalming: 🤷 \\ud83e\\udd37 :shrug: 🤷‍♂️ \\ud83e\\udd37\\u200d\\u2642\\ufe0f :man_shrugging: 🤷‍♀️ \\ud83e\\udd37\\u200d\\u2640\\ufe0f :woman_shrugging: 🧑‍⚕️ \\ud83e\\uddd1\\u200d\\u2695\\ufe0f :health_worker: 👨‍⚕️ \\ud83d\\udc68\\u200d\\u2695\\ufe0f :man_health_worker: 👩‍⚕️ \\ud83d\\udc69\\u200d\\u2695\\ufe0f :woman_health_worker: 🧑‍🎓 \\ud83e\\uddd1\\u200d\\ud83c\\udf93 :student: 👨‍🎓 \\ud83d\\udc68\\u200d\\ud83c\\udf93 :man_student: 👩‍🎓 \\ud83d\\udc69\\u200d\\ud83c\\udf93 :woman_student: 🧑‍🏫 \\ud83e\\uddd1\\u200d\\ud83c\\udfeb :teacher: 👨‍🏫 \\ud83d\\udc68\\u200d\\ud83c\\udfeb :man_teacher: 👩‍🏫 \\ud83d\\udc69\\u200d\\ud83c\\udfeb :woman_teacher: 🧑‍⚖️ \\ud83e\\uddd1\\u200d\\u2696\\ufe0f :judge: 👨‍⚖️ \\ud83d\\udc68\\u200d\\u2696\\ufe0f :man_judge: 👩‍⚖️ \\ud83d\\udc69\\u200d\\u2696\\ufe0f :woman_judge: 🧑‍🌾 \\ud83e\\uddd1\\u200d\\ud83c\\udf3e :farmer: 👨‍🌾 \\ud83d\\udc68\\u200d\\ud83c\\udf3e :man_farmer: 👩‍🌾 \\ud83d\\udc69\\u200d\\ud83c\\udf3e :woman_farmer: 🧑‍🍳 \\ud83e\\uddd1\\u200d\\ud83c\\udf73 :cook: 👨‍🍳 \\ud83d\\udc68\\u200d\\ud83c\\udf73 :man_cook: 👩‍🍳 \\ud83d\\udc69\\u200d\\ud83c\\udf73 :woman_cook: 🧑‍🔧 \\ud83e\\uddd1\\u200d\\ud83d\\udd27 :mechanic: 👨‍🔧 \\ud83d\\udc68\\u200d\\ud83d\\udd27 :man_mechanic: 👩‍🔧 \\ud83d\\udc69\\u200d\\ud83d\\udd27 :woman_mechanic: 🧑‍🏭 \\ud83e\\uddd1\\u200d\\ud83c\\udfed :factory_worker: 👨‍🏭 \\ud83d\\udc68\\u200d\\ud83c\\udfed :man_factory_worker: 👩‍🏭 \\ud83d\\udc69\\u200d\\ud83c\\udfed :woman_factory_worker: 🧑‍💼 \\ud83e\\uddd1\\u200d\\ud83d\\udcbc :office_worker: 👨‍💼 \\ud83d\\udc68\\u200d\\ud83d\\udcbc :man_office_worker: 👩‍💼 \\ud83d\\udc69\\u200d\\ud83d\\udcbc :woman_office_worker: 🧑‍🔬 \\ud83e\\uddd1\\u200d\\ud83d\\udd2c :scientist: 👨‍🔬 \\ud83d\\udc68\\u200d\\ud83d\\udd2c :man_scientist: 👩‍🔬 \\ud83d\\udc69\\u200d\\ud83d\\udd2c :woman_scientist: 🧑‍💻 \\ud83e\\uddd1\\u200d\\ud83d\\udcbb :technologist: 👨‍💻 \\ud83d\\udc68\\u200d\\ud83d\\udcbb :man_technologist: 👩‍💻 \\ud83d\\udc69\\u200d\\ud83d\\udcbb :woman_technologist: 🧑‍🎤 \\ud83e\\uddd1\\u200d\\ud83c\\udfa4 :singer: 👨‍🎤 \\ud83d\\udc68\\u200d\\ud83c\\udfa4 :man_singer: 👩‍🎤 \\ud83d\\udc69\\u200d\\ud83c\\udfa4 :woman_singer: 🧑‍🎨 \\ud83e\\uddd1\\u200d\\ud83c\\udfa8 :artist: 👨‍🎨 \\ud83d\\udc68\\u200d\\ud83c\\udfa8 :man_artist: 👩‍🎨 \\ud83d\\udc69\\u200d\\ud83c\\udfa8 :woman_artist: 🧑‍✈️ \\ud83e\\uddd1\\u200d\\u2708\\ufe0f :pilot: 👨‍✈️ \\ud83d\\udc68\\u200d\\u2708\\ufe0f :man_pilot: 👩‍✈️ \\ud83d\\udc69\\u200d\\u2708\\ufe0f :woman_pilot: 🧑‍🚀 \\ud83e\\uddd1\\u200d\\ud83d\\ude80 :astronaut: 👨‍🚀 \\ud83d\\udc68\\u200d\\ud83d\\ude80 :man_astronaut: 👩‍🚀 \\ud83d\\udc69\\u200d\\ud83d\\ude80 :woman_astronaut: 🧑‍🚒 \\ud83e\\uddd1\\u200d\\ud83d\\ude92 :firefighter: 👨‍🚒 \\ud83d\\udc68\\u200d\\ud83d\\ude92 :man_firefighter: 👩‍🚒 \\ud83d\\udc69\\u200d\\ud83d\\ude92 :woman_firefighter: 👮 \\ud83d\\udc6e :cop: 👮‍♂️ \\ud83d\\udc6e\\u200d\\u2642\\ufe0f :policeman: 👮‍♀️ \\ud83d\\udc6e\\u200d\\u2640\\ufe0f :policewoman: 🕵 \\ud83d\\udd75 :detective: 🕵️‍♂️ \\ud83d\\udd75\\ufe0f\\u200d\\u2642\\ufe0f :man_detective: 🕵️‍♀️ \\ud83d\\udd75\\ufe0f\\u200d\\u2640\\ufe0f :woman_detective: 💂 \\ud83d\\udc82 :guard: 💂‍♂️ \\ud83d\\udc82\\u200d\\u2642\\ufe0f :guardsman: 💂‍♀️ \\ud83d\\udc82\\u200d\\u2640\\ufe0f :guardswoman: 👷 \\ud83d\\udc77 :construction_worker: 👷‍♂️ \\ud83d\\udc77\\u200d\\u2642\\ufe0f :construction_worker_man: 👷‍♀️ \\ud83d\\udc77\\u200d\\u2640\\ufe0f :construction_worker_woman: 🤴 \\ud83e\\udd34 :prince: 👸 \\ud83d\\udc78 :princess: 👳 \\ud83d\\udc73 :man_with_turban: 👳‍♂️ \\ud83d\\udc73\\u200d\\u2642\\ufe0f :man_wearing_turban: 👳‍♀️ \\ud83d\\udc73\\u200d\\u2640\\ufe0f :woman_with_turban: 👲 \\ud83d\\udc72 :man_with_gua_pi_mao: 🧕 \\ud83e\\uddd5 :woman_with_headscarf: 🤵 \\ud83e\\udd35 :man_in_tuxedo: 👰 \\ud83d\\udc70 :bride_with_veil: 🤰 \\ud83e\\udd30 :pregnant_woman: 🤱 \\ud83e\\udd31 :breast_feeding: 👼 \\ud83d\\udc7c :angel: 🎅 \\ud83c\\udf85 :santa: 🤶 \\ud83e\\udd36 :mrs_claus: 🦸 \\ud83e\\uddb8 :superhero: 🦸‍♂️ \\ud83e\\uddb8\\u200d\\u2642\\ufe0f :man_superhero: 🦸‍♀️ \\ud83e\\uddb8\\u200d\\u2640\\ufe0f :superhero_woman: 🦹 \\ud83e\\uddb9 :supervillain: 🦹‍♂️ \\ud83e\\uddb9\\u200d\\u2642\\ufe0f :man_supervillain: 🦹‍♀️ \\ud83e\\uddb9\\u200d\\u2640\\ufe0f :supervillain_woman: 🧙 \\ud83e\\uddd9 :mage: 🧙‍♂️ \\ud83e\\uddd9\\u200d\\u2642\\ufe0f :mage_man: 🧙‍♀️ \\ud83e\\uddd9\\u200d\\u2640\\ufe0f :mage_woman: 🧚 \\ud83e\\uddda :fairy: 🧚‍♂️ \\ud83e\\uddda\\u200d\\u2642\\ufe0f :fairy_man: 🧚‍♀️ \\ud83e\\uddda\\u200d\\u2640\\ufe0f :fairy_woman: 🧛 \\ud83e\\udddb :vampire: 🧛‍♂️ \\ud83e\\udddb\\u200d\\u2642\\ufe0f :man_vampire: 🧛‍♀️ \\ud83e\\udddb\\u200d\\u2640\\ufe0f :vampire_woman: 🧜 \\ud83e\\udddc :merperson: 🧜‍♂️ \\ud83e\\udddc\\u200d\\u2642\\ufe0f :merman: 🧜‍♀️ \\ud83e\\udddc\\u200d\\u2640\\ufe0f :mermaid: 🧝 \\ud83e\\udddd :elf: 🧝‍♂️ \\ud83e\\udddd\\u200d\\u2642\\ufe0f :elf_man: 🧝‍♀️ \\ud83e\\udddd\\u200d\\u2640\\ufe0f :elf_woman: 🧞 \\ud83e\\uddde :genie: 🧞‍♂️ \\ud83e\\uddde\\u200d\\u2642\\ufe0f :genie_man: 🧞‍♀️ \\ud83e\\uddde\\u200d\\u2640\\ufe0f :genie_woman: 🧟 \\ud83e\\udddf :zombie: 🧟‍♂️ \\ud83e\\udddf\\u200d\\u2642\\ufe0f :man_zombie: 🧟‍♀️ \\ud83e\\udddf\\u200d\\u2640\\ufe0f :woman_zombie: 💆 \\ud83d\\udc86 :massage: 💆‍♂️ \\ud83d\\udc86\\u200d\\u2642\\ufe0f :massage_man: 💆‍♀️ \\ud83d\\udc86\\u200d\\u2640\\ufe0f :massage_woman: 💇 \\ud83d\\udc87 :haircut: 💇‍♂️ \\ud83d\\udc87\\u200d\\u2642\\ufe0f :haircut_man: 💇‍♀️ \\ud83d\\udc87\\u200d\\u2640\\ufe0f :haircut_woman: 🚶 \\ud83d\\udeb6 :walking: 🚶‍♂️ \\ud83d\\udeb6\\u200d\\u2642\\ufe0f :man_walking: 🚶‍♀️ \\ud83d\\udeb6\\u200d\\u2640\\ufe0f :walking_woman: 🧍 \\ud83e\\uddcd :standing_person: 🧍‍♂️ \\ud83e\\uddcd\\u200d\\u2642\\ufe0f :man_standing: 🧍‍♀️ \\ud83e\\uddcd\\u200d\\u2640\\ufe0f :woman_standing: 🧎 \\ud83e\\uddce :kneeling_person: 🧎‍♂️ \\ud83e\\uddce\\u200d\\u2642\\ufe0f :man_kneeling: 🧎‍♀️ \\ud83e\\uddce\\u200d\\u2640\\ufe0f :woman_kneeling: 🧑‍🦯 \\ud83e\\uddd1\\u200d\\ud83e\\uddaf :person_with_probing_cane: 👨‍🦯 \\ud83d\\udc68\\u200d\\ud83e\\uddaf :man_with_probing_cane: 👩‍🦯 \\ud83d\\udc69\\u200d\\ud83e\\uddaf :woman_with_probing_cane: 🧑‍🦼 \\ud83e\\uddd1\\u200d\\ud83e\\uddbc :person_in_motorized_wheelchair: 👨‍🦼 \\ud83d\\udc68\\u200d\\ud83e\\uddbc :man_in_motorized_wheelchair: 👩‍🦼 \\ud83d\\udc69\\u200d\\ud83e\\uddbc :woman_in_motorized_wheelchair: 🧑‍🦽 \\ud83e\\uddd1\\u200d\\ud83e\\uddbd :person_in_manual_wheelchair: 👨‍🦽 \\ud83d\\udc68\\u200d\\ud83e\\uddbd :man_in_manual_wheelchair: 👩‍🦽 \\ud83d\\udc69\\u200d\\ud83e\\uddbd :woman_in_manual_wheelchair: 🏃 \\ud83c\\udfc3 :runner: 🏃‍♂️ \\ud83c\\udfc3\\u200d\\u2642\\ufe0f :man_running: 🏃‍♀️ \\ud83c\\udfc3\\u200d\\u2640\\ufe0f :running_woman: 💃 \\ud83d\\udc83 :dancer: 🕺 \\ud83d\\udd7a :man_dancing: 🕴 \\ud83d\\udd74 :business_suit_levitating: 👯 \\ud83d\\udc6f :dancers: 👯‍♂️ \\ud83d\\udc6f\\u200d\\u2642\\ufe0f :dancing_men: 👯‍♀️ \\ud83d\\udc6f\\u200d\\u2640\\ufe0f :dancing_women: 🧖 \\ud83e\\uddd6 :person_in_steamy_room: 🧖‍♂️ \\ud83e\\uddd6\\u200d\\u2642\\ufe0f :man_in_steamy_room: 🧖‍♀️ \\ud83e\\uddd6\\u200d\\u2640\\ufe0f :woman_in_steamy_room: 🧘 \\ud83e\\uddd8 :lotus_position: 🧑‍🤝‍🧑 \\ud83e\\uddd1\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1 :people_holding_hands: 👭 \\ud83d\\udc6d :women_holding_hands: 👫 \\ud83d\\udc6b :couple: 👬 \\ud83d\\udc6c :men_holding_hands: 💏 \\ud83d\\udc8f :couplekiss: 👨‍❤️‍💋‍👨 \\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68 :kiss_man_man: 👩‍❤️‍💋‍👩 \\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69 :kiss_woman_woman: 💑 \\ud83d\\udc91 :couple_with_heart: 👨‍❤️‍👨 \\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68 :man-heart-man: 👩‍❤️‍👩 \\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69 :woman-heart-woman: 👪 \\ud83d\\udc6a :family: 👨‍👩‍👦 \\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66 :family_man_woman_boy: 👨‍👩‍👧 \\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67 :family_man_woman_girl: 👨‍👩‍👧‍👦 \\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc66 :family_man_woman_girl_boy: 👨‍👩‍👦‍👦 \\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66 :family_man_woman_boy_boy: 👨‍👩‍👧‍👧 \\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc67 :family_man_woman_girl_girl: 👨‍👨‍👦 \\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc66 :family_man_man_boy: 👨‍👨‍👧 \\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc67 :family_man_man_girl: 👨‍👨‍👧‍👦 \\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc66 :family_man_man_girl_boy: 👨‍👨‍👦‍👦 \\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66 :family_man_man_boy_boy: 👨‍👨‍👧‍👧 \\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc67 :family_man_man_girl_girl: 👩‍👩‍👦 \\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66 :family_woman_woman_boy: 👩‍👩‍👧 \\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67 :family_woman_woman_girl: 👩‍👩‍👧‍👦 \\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc66 :family_woman_woman_girl_boy: 👩‍👩‍👦‍👦 \\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66 :family_woman_woman_boy_boy: 👩‍👩‍👧‍👧 \\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc67 :family_woman_woman_girl_girl: 👨‍👦 \\ud83d\\udc68\\u200d\\ud83d\\udc66 :family_man_boy: 👨‍👦‍👦 \\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66 :family_man_boy_boy: 👨‍👧 \\ud83d\\udc68\\u200d\\ud83d\\udc67 :family_man_girl: 👨‍👧‍👦 \\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc66 :family_man_girl_boy: 👨‍👧‍👧 \\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc67 :family_man_girl_girl: 👩‍👦 \\ud83d\\udc69\\u200d\\ud83d\\udc66 :family_woman_boy: 👩‍👦‍👦 \\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66 :family_woman_boy_boy: 👩‍👧 \\ud83d\\udc69\\u200d\\ud83d\\udc67 :family_woman_girl: 👩‍👧‍👦 \\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc66 :family_woman_girl_boy: 👩‍👧‍👧 \\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc67 :woman-girl-girl: 🗣 \\ud83d\\udde3 :speaking_head: 👤 \\ud83d\\udc64 :bust_in_silhouette: 👥 \\ud83d\\udc65 :busts_in_silhouette: 👣 \\ud83d\\udc63 :footprints: 🧳 \\ud83e\\uddf3 :luggage: 🌂 \\ud83c\\udf02 :closed_umbrella: ☂ \\u2602 :umbrella: 🎃 \\ud83c\\udf83 :jack_o_lantern: 🧵 \\ud83e\\uddf5 :thread: 🧶 \\ud83e\\uddf6 :yarn: 👓 \\ud83d\\udc53 :eyeglasses: 🕶 \\ud83d\\udd76 :dark_sunglasses: 🥽 \\ud83e\\udd7d :goggles: 🥼 \\ud83e\\udd7c :lab_coat: 🦺 \\ud83e\\uddba :safety_vest: 👔 \\ud83d\\udc54 :necktie: 👕 \\ud83d\\udc55 :shirt: 👖 \\ud83d\\udc56 :jeans: 🧣 \\ud83e\\udde3 :scarf: 🧤 \\ud83e\\udde4 :gloves: 🧥 \\ud83e\\udde5 :coat: 🧦 \\ud83e\\udde6 :socks: 👗 \\ud83d\\udc57 :dress: 👘 \\ud83d\\udc58 :kimono: 🥻 \\ud83e\\udd7b :sari: 🩱 \\ud83e\\ude71 :one_piece_swimsuit: 🩲 \\ud83e\\ude72 :briefs: 🩳 \\ud83e\\ude73 :shorts: 👙 \\ud83d\\udc59 :bikini: 👚 \\ud83d\\udc5a :womans_clothes: 👛 \\ud83d\\udc5b :purse: 👜 \\ud83d\\udc5c :handbag: 👝 \\ud83d\\udc5d :pouch: 🎒 \\ud83c\\udf92 :school_satchel: 👞 \\ud83d\\udc5e :mans_shoe: 👟 \\ud83d\\udc5f :athletic_shoe: 🥾 \\ud83e\\udd7e :hiking_boot: 🥿 \\ud83e\\udd7f :flat_shoe: 👠 \\ud83d\\udc60 :high_heel: 👡 \\ud83d\\udc61 :sandal: 🩰 \\ud83e\\ude70 :ballet_shoes: 👢 \\ud83d\\udc62 :boot: 👑 \\ud83d\\udc51 :crown: 👒 \\ud83d\\udc52 :womans_hat: 🎩 \\ud83c\\udfa9 :tophat: 🎓 \\ud83c\\udf93 :mortar_board: 🧢 \\ud83e\\udde2 :billed_cap: ⛑ \\u26d1 :rescue_worker_helmet: 💄 \\ud83d\\udc84 :lipstick: 💍 \\ud83d\\udc8d :ring: 💼 \\ud83d\\udcbc :briefcase: 🩸 \\ud83e\\ude78 :drop_of_blood: 🙈 \\ud83d\\ude48 :see_no_evil: 🙉 \\ud83d\\ude49 :hear_no_evil: 🙊 \\ud83d\\ude4a :speak_no_evil: 💥 \\ud83d\\udca5 :collision: 💫 \\ud83d\\udcab :dizzy: 💦 \\ud83d\\udca6 :sweat_drops: 💨 \\ud83d\\udca8 :dash: 🐵 \\ud83d\\udc35 :monkey_face: 🐒 \\ud83d\\udc12 :monkey: 🦍 \\ud83e\\udd8d :gorilla: 🦧 \\ud83e\\udda7 :orangutan: 🐶 \\ud83d\\udc36 :dog: 🐕 \\ud83d\\udc15 :dog2: 🦮 \\ud83e\\uddae :guide_dog: 🐕‍🦺 \\ud83d\\udc15\\u200d\\ud83e\\uddba :service_dog: 🐩 \\ud83d\\udc29 :poodle: 🐺 \\ud83d\\udc3a :wolf: 🦊 \\ud83e\\udd8a :fox_face: 🦝 \\ud83e\\udd9d :raccoon: 🐱 \\ud83d\\udc31 :cat: 🐈 \\ud83d\\udc08 :cat2: 🦁 \\ud83e\\udd81 :lion: 🐯 \\ud83d\\udc2f :tiger: 🐅 \\ud83d\\udc05 :tiger2: 🐆 \\ud83d\\udc06 :leopard: 🐴 \\ud83d\\udc34 :horse: 🐎 \\ud83d\\udc0e :racehorse: 🦄 \\ud83e\\udd84 :unicorn: 🦓 \\ud83e\\udd93 :zebra: 🦌 \\ud83e\\udd8c :deer: 🐮 \\ud83d\\udc2e :cow: 🐂 \\ud83d\\udc02 :ox: 🐃 \\ud83d\\udc03 :water_buffalo: 🐄 \\ud83d\\udc04 :cow2: 🐷 \\ud83d\\udc37 :pig: 🐖 \\ud83d\\udc16 :pig2: 🐗 \\ud83d\\udc17 :boar: 🐽 \\ud83d\\udc3d :pig_nose: 🐏 \\ud83d\\udc0f :ram: 🐑 \\ud83d\\udc11 :sheep: 🐐 \\ud83d\\udc10 :goat: 🐪 \\ud83d\\udc2a :camel: 🐫 \\ud83d\\udc2b :two_hump_camel: 🦙 \\ud83e\\udd99 :llama: 🦒 \\ud83e\\udd92 :giraffe: 🐘 \\ud83d\\udc18 :elephant: 🦏 \\ud83e\\udd8f :rhinoceros: 🦛 \\ud83e\\udd9b :hippopotamus: 🐭 \\ud83d\\udc2d :mouse: 🐁 \\ud83d\\udc01 :mouse2: 🐀 \\ud83d\\udc00 :rat: 🐹 \\ud83d\\udc39 :hamster: 🐰 \\ud83d\\udc30 :rabbit: 🐇 \\ud83d\\udc07 :rabbit2: 🐿 \\ud83d\\udc3f :chipmunk: 🦔 \\ud83e\\udd94 :hedgehog: 🦇 \\ud83e\\udd87 :bat: 🐻 \\ud83d\\udc3b :bear: 🐨 \\ud83d\\udc28 :koala: 🐼 \\ud83d\\udc3c :panda_face: 🦥 \\ud83e\\udda5 :sloth: 🦦 \\ud83e\\udda6 :otter: 🦨 \\ud83e\\udda8 :skunk: 🦘 \\ud83e\\udd98 :kangaroo: 🦡 \\ud83e\\udda1 :badger: 🐾 \\ud83d\\udc3e :paw_prints: 🦃 \\ud83e\\udd83 :turkey: 🐔 \\ud83d\\udc14 :chicken: 🐓 \\ud83d\\udc13 :rooster: 🐣 \\ud83d\\udc23 :hatching_chick: 🐤 \\ud83d\\udc24 :baby_chick: 🐥 \\ud83d\\udc25 :hatched_chick: 🐦 \\ud83d\\udc26 :bird: 🐧 \\ud83d\\udc27 :penguin: 🕊 \\ud83d\\udd4a :dove: 🦅 \\ud83e\\udd85 :eagle: 🦆 \\ud83e\\udd86 :duck: 🦢 \\ud83e\\udda2 :swan: 🦉 \\ud83e\\udd89 :owl: 🦩 \\ud83e\\udda9 :flamingo: 🦚 \\ud83e\\udd9a :peacock: 🦜 \\ud83e\\udd9c :parrot: 🐸 \\ud83d\\udc38 :frog: 🐊 \\ud83d\\udc0a :crocodile: 🐢 \\ud83d\\udc22 :turtle: 🦎 \\ud83e\\udd8e :lizard: 🐍 \\ud83d\\udc0d :snake: 🐲 \\ud83d\\udc32 :dragon_face: 🐉 \\ud83d\\udc09 :dragon: 🦕 \\ud83e\\udd95 :sauropod: 🦖 \\ud83e\\udd96 :t-rex: 🐳 \\ud83d\\udc33 :whale: 🐋 \\ud83d\\udc0b :whale2: 🐬 \\ud83d\\udc2c :dolphin: 🐟 \\ud83d\\udc1f :fish: 🐠 \\ud83d\\udc20 :tropical_fish: 🐡 \\ud83d\\udc21 :blowfish: 🦈 \\ud83e\\udd88 :shark: 🐙 \\ud83d\\udc19 :octopus: 🐚 \\ud83d\\udc1a :shell: 🐌 \\ud83d\\udc0c :snail: 🦋 \\ud83e\\udd8b :butterfly: 🐛 \\ud83d\\udc1b :bug: 🐜 \\ud83d\\udc1c :ant: 🐝 \\ud83d\\udc1d :honeybee: 🐞 \\ud83d\\udc1e :beetle: 🦗 \\ud83e\\udd97 :cricket: 🕷 \\ud83d\\udd77 :spider: 🕸 \\ud83d\\udd78 :spider_web: 🦂 \\ud83e\\udd82 :scorpion: 🦟 \\ud83e\\udd9f :mosquito: 🦠 \\ud83e\\udda0 :microbe: 💐 \\ud83d\\udc90 :bouquet: 🌸 \\ud83c\\udf38 :cherry_blossom: 💮 \\ud83d\\udcae :white_flower: 🏵 \\ud83c\\udff5 :rosette: 🌹 \\ud83c\\udf39 :rose: 🥀 \\ud83e\\udd40 :wilted_flower: 🌺 \\ud83c\\udf3a :hibiscus: 🌻 \\ud83c\\udf3b :sunflower: 🌼 \\ud83c\\udf3c :blossom: 🌷 \\ud83c\\udf37 :tulip: 🌱 \\ud83c\\udf31 :seedling: 🌲 \\ud83c\\udf32 :evergreen_tree: 🌳 \\ud83c\\udf33 :deciduous_tree: 🌴 \\ud83c\\udf34 :palm_tree: 🌵 \\ud83c\\udf35 :cactus: 🌾 \\ud83c\\udf3e :ear_of_rice: 🌿 \\ud83c\\udf3f :herb: ☘ \\u2618 :shamrock: 🍀 \\ud83c\\udf40 :four_leaf_clover: 🍁 \\ud83c\\udf41 :maple_leaf: 🍂 \\ud83c\\udf42 :fallen_leaf: 🍃 \\ud83c\\udf43 :leaves: 🍄 \\ud83c\\udf44 :mushroom: 🌰 \\ud83c\\udf30 :chestnut: 🦀 \\ud83e\\udd80 :crab: 🦞 \\ud83e\\udd9e :lobster: 🦐 \\ud83e\\udd90 :shrimp: 🦑 \\ud83e\\udd91 :squid: 🌍 \\ud83c\\udf0d :earth_africa: 🌎 \\ud83c\\udf0e :earth_americas: 🌏 \\ud83c\\udf0f :earth_asia: 🌐 \\ud83c\\udf10 :globe_with_meridians: 🌑 \\ud83c\\udf11 :new_moon: 🌒 \\ud83c\\udf12 :waxing_crescent_moon: 🌓 \\ud83c\\udf13 :first_quarter_moon: 🌔 \\ud83c\\udf14 :moon: 🌕 \\ud83c\\udf15 :full_moon: 🌖 \\ud83c\\udf16 :waning_gibbous_moon: 🌗 \\ud83c\\udf17 :last_quarter_moon: 🌘 \\ud83c\\udf18 :waning_crescent_moon: 🌙 \\ud83c\\udf19 :crescent_moon: 🌚 \\ud83c\\udf1a :new_moon_with_face: 🌛 \\ud83c\\udf1b :first_quarter_moon_with_face: 🌜 \\ud83c\\udf1c :last_quarter_moon_with_face: ☀ \\u2600 :sunny: 🌝 \\ud83c\\udf1d :full_moon_with_face: 🌞 \\ud83c\\udf1e :sun_with_face: ⭐ \\u2b50 :star: 🌟 \\ud83c\\udf1f :star2: 🌠 \\ud83c\\udf20 :stars: ☁ \\u2601 :cloud: ⛅ \\u26c5 :partly_sunny: ⛈ \\u26c8 :cloud_with_lightning_and_rain: 🌤 \\ud83c\\udf24 :mostly_sunny: 🌥 \\ud83c\\udf25 :barely_sunny: 🌦 \\ud83c\\udf26 :sun_behind_rain_cloud: 🌧 \\ud83c\\udf27 :cloud_with_rain: 🌨 \\ud83c\\udf28 :cloud_with_snow: 🌩 \\ud83c\\udf29 :lightning: 🌪 \\ud83c\\udf2a :tornado: 🌫 \\ud83c\\udf2b :fog: 🌬 \\ud83c\\udf2c :wind_face: 🌈 \\ud83c\\udf08 :rainbow: ☔ \\u2614 :umbrella_with_rain_drops: ⚡ \\u26a1 :zap: ❄ \\u2744 :snowflake: ☃ \\u2603 :snowman: ⛄ \\u26c4 :snowman_without_snow: ☄ \\u2604 :comet: 🔥 \\ud83d\\udd25 :fire: 💧 \\ud83d\\udca7 :droplet: 🌊 \\ud83c\\udf0a :ocean: 🎄 \\ud83c\\udf84 :christmas_tree: ✨ \\u2728 :sparkles: 🎋 \\ud83c\\udf8b :tanabata_tree: 🎍 \\ud83c\\udf8d :bamboo: 🍇 \\ud83c\\udf47 :grapes: 🍈 \\ud83c\\udf48 :melon: 🍉 \\ud83c\\udf49 :watermelon: 🍊 \\ud83c\\udf4a :tangerine: 🍋 \\ud83c\\udf4b :lemon: 🍌 \\ud83c\\udf4c :banana: 🍍 \\ud83c\\udf4d :pineapple: 🥭 \\ud83e\\udd6d :mango: 🍎 \\ud83c\\udf4e :apple: 🍏 \\ud83c\\udf4f :green_apple: 🍐 \\ud83c\\udf50 :pear: 🍑 \\ud83c\\udf51 :peach: 🍒 \\ud83c\\udf52 :cherries: 🍓 \\ud83c\\udf53 :strawberry: 🥝 \\ud83e\\udd5d :kiwi_fruit: 🍅 \\ud83c\\udf45 :tomato: 🥥 \\ud83e\\udd65 :coconut: 🥑 \\ud83e\\udd51 :avocado: 🍆 \\ud83c\\udf46 :eggplant: 🥔 \\ud83e\\udd54 :potato: 🥕 \\ud83e\\udd55 :carrot: 🌽 \\ud83c\\udf3d :corn: 🌶 \\ud83c\\udf36 :hot_pepper: 🥒 \\ud83e\\udd52 :cucumber: 🥬 \\ud83e\\udd6c :leafy_green: 🥦 \\ud83e\\udd66 :broccoli: 🧄 \\ud83e\\uddc4 :garlic: 🧅 \\ud83e\\uddc5 :onion: 🥜 \\ud83e\\udd5c :peanuts: 🍞 \\ud83c\\udf5e :bread: 🥐 \\ud83e\\udd50 :croissant: 🥖 \\ud83e\\udd56 :baguette_bread: 🥨 \\ud83e\\udd68 :pretzel: 🥯 \\ud83e\\udd6f :bagel: 🥞 \\ud83e\\udd5e :pancakes: 🧇 \\ud83e\\uddc7 :waffle: 🧀 \\ud83e\\uddc0 :cheese_wedge: 🍖 \\ud83c\\udf56 :meat_on_bone: 🍗 \\ud83c\\udf57 :poultry_leg: 🥩 \\ud83e\\udd69 :cut_of_meat: 🥓 \\ud83e\\udd53 :bacon: 🍔 \\ud83c\\udf54 :hamburger: 🍟 \\ud83c\\udf5f :fries: 🍕 \\ud83c\\udf55 :pizza: 🌭 \\ud83c\\udf2d :hotdog: 🥪 \\ud83e\\udd6a :sandwich: 🌮 \\ud83c\\udf2e :taco: 🌯 \\ud83c\\udf2f :burrito: 🥙 \\ud83e\\udd59 :stuffed_flatbread: 🧆 \\ud83e\\uddc6 :falafel: 🍳 \\ud83c\\udf73 :cooking: 🥘 \\ud83e\\udd58 :shallow_pan_of_food: 🍲 \\ud83c\\udf72 :stew: 🥣 \\ud83e\\udd63 :bowl_with_spoon: 🥗 \\ud83e\\udd57 :green_salad: 🍿 \\ud83c\\udf7f :popcorn: 🧈 \\ud83e\\uddc8 :butter: 🧂 \\ud83e\\uddc2 :salt: 🥫 \\ud83e\\udd6b :canned_food: 🍱 \\ud83c\\udf71 :bento: 🍘 \\ud83c\\udf58 :rice_cracker: 🍙 \\ud83c\\udf59 :rice_ball: 🍚 \\ud83c\\udf5a :rice: 🍛 \\ud83c\\udf5b :curry: 🍜 \\ud83c\\udf5c :ramen: 🍝 \\ud83c\\udf5d :spaghetti: 🍠 \\ud83c\\udf60 :sweet_potato: 🍢 \\ud83c\\udf62 :oden: 🍣 \\ud83c\\udf63 :sushi: 🍤 \\ud83c\\udf64 :fried_shrimp: 🍥 \\ud83c\\udf65 :fish_cake: 🥮 \\ud83e\\udd6e :moon_cake: 🍡 \\ud83c\\udf61 :dango: 🥟 \\ud83e\\udd5f :dumpling: 🥠 \\ud83e\\udd60 :fortune_cookie: 🥡 \\ud83e\\udd61 :takeout_box: 🦪 \\ud83e\\uddaa :oyster: 🍦 \\ud83c\\udf66 :icecream: 🍧 \\ud83c\\udf67 :shaved_ice: 🍨 \\ud83c\\udf68 :ice_cream: 🍩 \\ud83c\\udf69 :doughnut: 🍪 \\ud83c\\udf6a :cookie: 🎂 \\ud83c\\udf82 :birthday: 🍰 \\ud83c\\udf70 :cake: 🧁 \\ud83e\\uddc1 :cupcake: 🥧 \\ud83e\\udd67 :pie: 🍫 \\ud83c\\udf6b :chocolate_bar: 🍬 \\ud83c\\udf6c :candy: 🍭 \\ud83c\\udf6d :lollipop: 🍮 \\ud83c\\udf6e :custard: 🍯 \\ud83c\\udf6f :honey_pot: 🍼 \\ud83c\\udf7c :baby_bottle: 🥛 \\ud83e\\udd5b :glass_of_milk: ☕ \\u2615 :coffee: 🍵 \\ud83c\\udf75 :tea: 🍶 \\ud83c\\udf76 :sake: 🍾 \\ud83c\\udf7e :champagne: 🍷 \\ud83c\\udf77 :wine_glass: 🍸 \\ud83c\\udf78 :cocktail: 🍹 \\ud83c\\udf79 :tropical_drink: 🍺 \\ud83c\\udf7a :beer: 🍻 \\ud83c\\udf7b :beers: 🥂 \\ud83e\\udd42 :clinking_glasses: 🥃 \\ud83e\\udd43 :tumbler_glass: 🥤 \\ud83e\\udd64 :cup_with_straw: 🧃 \\ud83e\\uddc3 :beverage_box: 🧉 \\ud83e\\uddc9 :mate: 🧊 \\ud83e\\uddca :ice_cube: 🥢 \\ud83e\\udd62 :chopsticks: 🍽 \\ud83c\\udf7d :knife_fork_plate: 🍴 \\ud83c\\udf74 :fork_and_knife: 🥄 \\ud83e\\udd44 :spoon: 🧗 \\ud83e\\uddd7 :person_climbing: 🧗‍♂️ \\ud83e\\uddd7\\u200d\\u2642\\ufe0f :man_climbing: 🧗‍♀️ \\ud83e\\uddd7\\u200d\\u2640\\ufe0f :woman_climbing: 🤺 \\ud83e\\udd3a :person_fencing: 🏇 \\ud83c\\udfc7 :horse_racing: ⛷ \\u26f7 :skier: 🏂 \\ud83c\\udfc2 :snowboarder: 🏌 \\ud83c\\udfcc :golfer: 🏌️‍♂️ \\ud83c\\udfcc\\ufe0f\\u200d\\u2642\\ufe0f :golfing_man: 🏌️‍♀️ \\ud83c\\udfcc\\ufe0f\\u200d\\u2640\\ufe0f :golfing_woman: 🏄 \\ud83c\\udfc4 :surfer: 🏄‍♂️ \\ud83c\\udfc4\\u200d\\u2642\\ufe0f :man_surfing: 🏄‍♀️ \\ud83c\\udfc4\\u200d\\u2640\\ufe0f :surfing_woman: 🚣 \\ud83d\\udea3 :rowboat: 🚣‍♂️ \\ud83d\\udea3\\u200d\\u2642\\ufe0f :rowing_man: 🚣‍♀️ \\ud83d\\udea3\\u200d\\u2640\\ufe0f :rowing_woman: 🏊 \\ud83c\\udfca :swimmer: 🏊‍♂️ \\ud83c\\udfca\\u200d\\u2642\\ufe0f :man_swimming: 🏊‍♀️ \\ud83c\\udfca\\u200d\\u2640\\ufe0f :swimming_woman: ⛹ \\u26f9 :person_with_ball: ⛹️‍♂️ \\u26f9\\ufe0f\\u200d\\u2642\\ufe0f :basketball_man: ⛹️‍♀️ \\u26f9\\ufe0f\\u200d\\u2640\\ufe0f :basketball_woman: 🏋 \\ud83c\\udfcb :weight_lifter: 🏋️‍♂️ \\ud83c\\udfcb\\ufe0f\\u200d\\u2642\\ufe0f :weight_lifting_man: 🏋️‍♀️ \\ud83c\\udfcb\\ufe0f\\u200d\\u2640\\ufe0f :weight_lifting_woman: 🚴 \\ud83d\\udeb4 :bicyclist: 🚴‍♂️ \\ud83d\\udeb4\\u200d\\u2642\\ufe0f :biking_man: 🚴‍♀️ \\ud83d\\udeb4\\u200d\\u2640\\ufe0f :biking_woman: 🚵 \\ud83d\\udeb5 :mountain_bicyclist: 🚵‍♂️ \\ud83d\\udeb5\\u200d\\u2642\\ufe0f :man_mountain_biking: 🚵‍♀️ \\ud83d\\udeb5\\u200d\\u2640\\ufe0f :mountain_biking_woman: 🤸 \\ud83e\\udd38 :cartwheeling: 🤸‍♂️ \\ud83e\\udd38\\u200d\\u2642\\ufe0f :man_cartwheeling: 🤸‍♀️ \\ud83e\\udd38\\u200d\\u2640\\ufe0f :woman_cartwheeling: 🤼 \\ud83e\\udd3c :wrestlers: 🤼‍♂️ \\ud83e\\udd3c\\u200d\\u2642\\ufe0f :men_wrestling: 🤼‍♀️ \\ud83e\\udd3c\\u200d\\u2640\\ufe0f :women_wrestling: 🤽 \\ud83e\\udd3d :water_polo: 🤽‍♂️ \\ud83e\\udd3d\\u200d\\u2642\\ufe0f :man_playing_water_polo: 🤽‍♀️ \\ud83e\\udd3d\\u200d\\u2640\\ufe0f :woman_playing_water_polo: 🤾 \\ud83e\\udd3e :handball: 🤾‍♂️ \\ud83e\\udd3e\\u200d\\u2642\\ufe0f :man_playing_handball: 🤾‍♀️ \\ud83e\\udd3e\\u200d\\u2640\\ufe0f :woman_playing_handball: 🤹 \\ud83e\\udd39 :juggling: 🤹‍♂️ \\ud83e\\udd39\\u200d\\u2642\\ufe0f :man_juggling: 🤹‍♀️ \\ud83e\\udd39\\u200d\\u2640\\ufe0f :woman_juggling: 🧘‍♂️ \\ud83e\\uddd8\\u200d\\u2642\\ufe0f :man_in_lotus_position: 🧘‍♀️ \\ud83e\\uddd8\\u200d\\u2640\\ufe0f :woman_in_lotus_position: 🎪 \\ud83c\\udfaa :circus_tent: 🛹 \\ud83d\\udef9 :skateboard: 🛶 \\ud83d\\udef6 :canoe: 🎗 \\ud83c\\udf97 :reminder_ribbon: 🎟 \\ud83c\\udf9f :admission_tickets: 🎫 \\ud83c\\udfab :ticket: 🎖 \\ud83c\\udf96 :medal: 🏆 \\ud83c\\udfc6 :trophy: 🏅 \\ud83c\\udfc5 :sports_medal: 🥇 \\ud83e\\udd47 :1st_place_medal: 🥈 \\ud83e\\udd48 :2nd_place_medal: 🥉 \\ud83e\\udd49 :3rd_place_medal: ⚽ \\u26bd :soccer: ⚾ \\u26be :baseball: 🥎 \\ud83e\\udd4e :softball: 🏀 \\ud83c\\udfc0 :basketball: 🏐 \\ud83c\\udfd0 :volleyball: 🏈 \\ud83c\\udfc8 :football: 🏉 \\ud83c\\udfc9 :rugby_football: 🎾 \\ud83c\\udfbe :tennis: 🥏 \\ud83e\\udd4f :flying_disc: 🎳 \\ud83c\\udfb3 :bowling: 🏏 \\ud83c\\udfcf :cricket_game: 🏑 \\ud83c\\udfd1 :field_hockey: 🏒 \\ud83c\\udfd2 :ice_hockey: 🥍 \\ud83e\\udd4d :lacrosse: 🏓 \\ud83c\\udfd3 :ping_pong: 🏸 \\ud83c\\udff8 :badminton: 🥊 \\ud83e\\udd4a :boxing_glove: 🥋 \\ud83e\\udd4b :martial_arts_uniform: 🥅 \\ud83e\\udd45 :goal_net: ⛳ \\u26f3 :golf: ⛸ \\u26f8 :ice_skate: 🎣 \\ud83c\\udfa3 :fishing_pole_and_fish: 🎽 \\ud83c\\udfbd :running_shirt: 🎿 \\ud83c\\udfbf :ski: 🛷 \\ud83d\\udef7 :sled: 🥌 \\ud83e\\udd4c :curling_stone: 🎯 \\ud83c\\udfaf :dart: 🎱 \\ud83c\\udfb1 :8ball: 🎮 \\ud83c\\udfae :video_game: 🎰 \\ud83c\\udfb0 :slot_machine: 🎲 \\ud83c\\udfb2 :game_die: 🧩 \\ud83e\\udde9 :jigsaw: ♟ \\u265f :chess_pawn: 🎭 \\ud83c\\udfad :performing_arts: 🎨 \\ud83c\\udfa8 :art: 🎼 \\ud83c\\udfbc :musical_score: 🎤 \\ud83c\\udfa4 :microphone: 🎧 \\ud83c\\udfa7 :headphones: 🎷 \\ud83c\\udfb7 :saxophone: 🎸 \\ud83c\\udfb8 :guitar: 🎹 \\ud83c\\udfb9 :musical_keyboard: 🎺 \\ud83c\\udfba :trumpet: 🎻 \\ud83c\\udfbb :violin: 🥁 \\ud83e\\udd41 :drum: 🎬 \\ud83c\\udfac :clapper: 🏹 \\ud83c\\udff9 :bow_and_arrow: 🗾 \\ud83d\\uddfe :japan: 🏔 \\ud83c\\udfd4 :snow_capped_mountain: ⛰ \\u26f0 :mountain: 🌋 \\ud83c\\udf0b :volcano: 🗻 \\ud83d\\uddfb :mount_fuji: 🏕 \\ud83c\\udfd5 :camping: 🏖 \\ud83c\\udfd6 :beach_with_umbrella: 🏜 \\ud83c\\udfdc :desert: 🏝 \\ud83c\\udfdd :desert_island: 🏞 \\ud83c\\udfde :national_park: 🏟 \\ud83c\\udfdf :stadium: 🏛 \\ud83c\\udfdb :classical_building: 🏗 \\ud83c\\udfd7 :building_construction: 🏘 \\ud83c\\udfd8 :houses: 🏚 \\ud83c\\udfda :derelict_house: 🏠 \\ud83c\\udfe0 :house: 🏡 \\ud83c\\udfe1 :house_with_garden: 🏢 \\ud83c\\udfe2 :office: 🏣 \\ud83c\\udfe3 :post_office: 🏤 \\ud83c\\udfe4 :european_post_office: 🏥 \\ud83c\\udfe5 :hospital: 🏦 \\ud83c\\udfe6 :bank: 🏨 \\ud83c\\udfe8 :hotel: 🏩 \\ud83c\\udfe9 :love_hotel: 🏪 \\ud83c\\udfea :convenience_store: 🏫 \\ud83c\\udfeb :school: 🏬 \\ud83c\\udfec :department_store: 🏭 \\ud83c\\udfed :factory: 🏯 \\ud83c\\udfef :japanese_castle: 🏰 \\ud83c\\udff0 :european_castle: 💒 \\ud83d\\udc92 :wedding: 🗼 \\ud83d\\uddfc :tokyo_tower: 🗽 \\ud83d\\uddfd :statue_of_liberty: ⛪ \\u26ea :church: 🕌 \\ud83d\\udd4c :mosque: 🛕 \\ud83d\\uded5 :hindu_temple: 🕍 \\ud83d\\udd4d :synagogue: ⛩ \\u26e9 :shinto_shrine: 🕋 \\ud83d\\udd4b :kaaba: ⛲ \\u26f2 :fountain: ⛺ \\u26fa :tent: 🌁 \\ud83c\\udf01 :foggy: 🌃 \\ud83c\\udf03 :night_with_stars: 🏙 \\ud83c\\udfd9 :cityscape: 🌄 \\ud83c\\udf04 :sunrise_over_mountains: 🌅 \\ud83c\\udf05 :sunrise: 🌆 \\ud83c\\udf06 :city_sunset: 🌇 \\ud83c\\udf07 :city_sunrise: 🌉 \\ud83c\\udf09 :bridge_at_night: 🎠 \\ud83c\\udfa0 :carousel_horse: 🎡 \\ud83c\\udfa1 :ferris_wheel: 🎢 \\ud83c\\udfa2 :roller_coaster: 🚂 \\ud83d\\ude82 :steam_locomotive: 🚃 \\ud83d\\ude83 :railway_car: 🚄 \\ud83d\\ude84 :bullettrain_side: 🚅 \\ud83d\\ude85 :bullettrain_front: 🚆 \\ud83d\\ude86 :train2: 🚇 \\ud83d\\ude87 :metro: 🚈 \\ud83d\\ude88 :light_rail: 🚉 \\ud83d\\ude89 :station: 🚊 \\ud83d\\ude8a :tram: 🚝 \\ud83d\\ude9d :monorail: 🚞 \\ud83d\\ude9e :mountain_railway: 🚋 \\ud83d\\ude8b :train: 🚌 \\ud83d\\ude8c :bus: 🚍 \\ud83d\\ude8d :oncoming_bus: 🚎 \\ud83d\\ude8e :trolleybus: 🚐 \\ud83d\\ude90 :minibus: 🚑 \\ud83d\\ude91 :ambulance: 🚒 \\ud83d\\ude92 :fire_engine: 🚓 \\ud83d\\ude93 :police_car: 🚔 \\ud83d\\ude94 :oncoming_police_car: 🚕 \\ud83d\\ude95 :taxi: 🚖 \\ud83d\\ude96 :oncoming_taxi: 🚗 \\ud83d\\ude97 :car: 🚘 \\ud83d\\ude98 :oncoming_automobile: 🚚 \\ud83d\\ude9a :truck: 🚛 \\ud83d\\ude9b :articulated_lorry: 🚜 \\ud83d\\ude9c :tractor: 🏎 \\ud83c\\udfce :racing_car: 🏍 \\ud83c\\udfcd :motorcycle: 🛵 \\ud83d\\udef5 :motor_scooter: 🛺 \\ud83d\\udefa :auto_rickshaw: 🚲 \\ud83d\\udeb2 :bike: 🛴 \\ud83d\\udef4 :kick_scooter: 🚏 \\ud83d\\ude8f :busstop: 🛣 \\ud83d\\udee3 :motorway: 🛤 \\ud83d\\udee4 :railway_track: ⛽ \\u26fd :fuelpump: 🚨 \\ud83d\\udea8 :rotating_light: 🚥 \\ud83d\\udea5 :traffic_light: 🚦 \\ud83d\\udea6 :vertical_traffic_light: 🚧 \\ud83d\\udea7 :construction: ⚓ \\u2693 :anchor: ⛵ \\u26f5 :sailboat: 🚤 \\ud83d\\udea4 :speedboat: 🛳 \\ud83d\\udef3 :passenger_ship: ⛴ \\u26f4 :ferry: 🛥 \\ud83d\\udee5 :motor_boat: 🚢 \\ud83d\\udea2 :ship: ✈ \\u2708 :airplane: 🛩 \\ud83d\\udee9 :small_airplane: 🛫 \\ud83d\\udeeb :airplane_departure: 🛬 \\ud83d\\udeec :flight_arrival: 🪂 \\ud83e\\ude82 :parachute: 💺 \\ud83d\\udcba :seat: 🚁 \\ud83d\\ude81 :helicopter: 🚟 \\ud83d\\ude9f :suspension_railway: 🚠 \\ud83d\\udea0 :mountain_cableway: 🚡 \\ud83d\\udea1 :aerial_tramway: 🛰 \\ud83d\\udef0 :satellite: 🚀 \\ud83d\\ude80 :rocket: 🛸 \\ud83d\\udef8 :flying_saucer: 🪐 \\ud83e\\ude90 :ringed_planet: 🌌 \\ud83c\\udf0c :milky_way: ⛱ \\u26f1 :umbrella_on_ground: 🎆 \\ud83c\\udf86 :fireworks: 🎇 \\ud83c\\udf87 :sparkler: 🎑 \\ud83c\\udf91 :rice_scene: 💴 \\ud83d\\udcb4 :yen: 💵 \\ud83d\\udcb5 :dollar: 💶 \\ud83d\\udcb6 :euro: 💷 \\ud83d\\udcb7 :pound: 🗿 \\ud83d\\uddff :moyai: 🛂 \\ud83d\\udec2 :passport_control: 🛃 \\ud83d\\udec3 :customs: 🛄 \\ud83d\\udec4 :baggage_claim: 🛅 \\ud83d\\udec5 :left_luggage: 💌 \\ud83d\\udc8c :love_letter: 🕳 \\ud83d\\udd73 :hole: 💣 \\ud83d\\udca3 :bomb: 🛀 \\ud83d\\udec0 :bath: 🛌 \\ud83d\\udecc :sleeping_bed: 🔪 \\ud83d\\udd2a :hocho: 🏺 \\ud83c\\udffa :amphora: 🗺 \\ud83d\\uddfa :world_map: 🧭 \\ud83e\\udded :compass: 🧱 \\ud83e\\uddf1 :bricks: 💈 \\ud83d\\udc88 :barber: 🦽 \\ud83e\\uddbd :manual_wheelchair: 🦼 \\ud83e\\uddbc :motorized_wheelchair: 🛢 \\ud83d\\udee2 :oil_drum: 🛎 \\ud83d\\udece :bellhop_bell: ⌛ \\u231b :hourglass: ⏳ \\u23f3 :hourglass_flowing_sand: ⌚ \\u231a :watch: ⏰ \\u23f0 :alarm_clock: ⏱ \\u23f1 :stopwatch: ⏲ \\u23f2 :timer_clock: 🕰 \\ud83d\\udd70 :mantelpiece_clock: 🌡 \\ud83c\\udf21 :thermometer: 🧨 \\ud83e\\udde8 :firecracker: 🎈 \\ud83c\\udf88 :balloon: 🎉 \\ud83c\\udf89 :tada: 🎊 \\ud83c\\udf8a :confetti_ball: 🎎 \\ud83c\\udf8e :dolls: 🎏 \\ud83c\\udf8f :flags: 🎐 \\ud83c\\udf90 :wind_chime: 🧧 \\ud83e\\udde7 :red_envelope: 🎀 \\ud83c\\udf80 :ribbon: 🎁 \\ud83c\\udf81 :gift: 🤿 \\ud83e\\udd3f :diving_mask: 🪀 \\ud83e\\ude80 :yo_yo: 🪁 \\ud83e\\ude81 :kite: 🔮 \\ud83d\\udd2e :crystal_ball: 🧿 \\ud83e\\uddff :nazar_amulet: 🕹 \\ud83d\\udd79 :joystick: 🧸 \\ud83e\\uddf8 :teddy_bear: 🖼 \\ud83d\\uddbc :framed_picture: 🛍 \\ud83d\\udecd :shopping_bags: 📿 \\ud83d\\udcff :prayer_beads: 💎 \\ud83d\\udc8e :gem: 📯 \\ud83d\\udcef :postal_horn: 🎙 \\ud83c\\udf99 :studio_microphone: 🎚 \\ud83c\\udf9a :level_slider: 🎛 \\ud83c\\udf9b :control_knobs: 📻 \\ud83d\\udcfb :radio: 🪕 \\ud83e\\ude95 :banjo: 📱 \\ud83d\\udcf1 :iphone: 📲 \\ud83d\\udcf2 :calling: ☎ \\u260e :telephone: 📞 \\ud83d\\udcde :telephone_receiver: 📟 \\ud83d\\udcdf :pager: 📠 \\ud83d\\udce0 :fax: 🔋 \\ud83d\\udd0b :battery: 🔌 \\ud83d\\udd0c :electric_plug: 💻 \\ud83d\\udcbb :computer: 🖥 \\ud83d\\udda5 :desktop_computer: 🖨 \\ud83d\\udda8 :printer: ⌨ \\u2328 :keyboard: 🖱 \\ud83d\\uddb1 :computer_mouse: 🖲 \\ud83d\\uddb2 :trackball: 💽 \\ud83d\\udcbd :minidisc: 💾 \\ud83d\\udcbe :floppy_disk: 💿 \\ud83d\\udcbf :cd: 📀 \\ud83d\\udcc0 :dvd: 🧮 \\ud83e\\uddee :abacus: 🎥 \\ud83c\\udfa5 :movie_camera: 🎞 \\ud83c\\udf9e :film_frames: 📽 \\ud83d\\udcfd :film_projector: 📺 \\ud83d\\udcfa :tv: 📷 \\ud83d\\udcf7 :camera: 📸 \\ud83d\\udcf8 :camera_with_flash: 📹 \\ud83d\\udcf9 :video_camera: 📼 \\ud83d\\udcfc :vhs: 🔍 \\ud83d\\udd0d :mag: 🔎 \\ud83d\\udd0e :mag_right: 🕯 \\ud83d\\udd6f :candle: 💡 \\ud83d\\udca1 :bulb: 🔦 \\ud83d\\udd26 :flashlight: 🏮 \\ud83c\\udfee :lantern: 🪔 \\ud83e\\ude94 :diya_lamp: 📔 \\ud83d\\udcd4 :notebook_with_decorative_cover: 📕 \\ud83d\\udcd5 :closed_book: 📖 \\ud83d\\udcd6 :open_book: 📗 \\ud83d\\udcd7 :green_book: 📘 \\ud83d\\udcd8 :blue_book: 📙 \\ud83d\\udcd9 :orange_book: 📚 \\ud83d\\udcda :books: 📓 \\ud83d\\udcd3 :notebook: 📃 \\ud83d\\udcc3 :page_with_curl: 📜 \\ud83d\\udcdc :scroll: 📄 \\ud83d\\udcc4 :page_facing_up: 📰 \\ud83d\\udcf0 :newspaper: 🗞 \\ud83d\\uddde :rolled_up_newspaper: 📑 \\ud83d\\udcd1 :bookmark_tabs: 🔖 \\ud83d\\udd16 :bookmark: 🏷 \\ud83c\\udff7 :label: 💰 \\ud83d\\udcb0 :moneybag: 💸 \\ud83d\\udcb8 :money_with_wings: 💳 \\ud83d\\udcb3 :credit_card: 🧾 \\ud83e\\uddfe :receipt: ✉ \\u2709 :envelope: 📧 \\ud83d\\udce7 :e-mail: 📨 \\ud83d\\udce8 :incoming_envelope: 📩 \\ud83d\\udce9 :envelope_with_arrow: 📤 \\ud83d\\udce4 :outbox_tray: 📥 \\ud83d\\udce5 :inbox_tray: 📦 \\ud83d\\udce6 :package: 📫 \\ud83d\\udceb :mailbox: 📪 \\ud83d\\udcea :mailbox_closed: 📬 \\ud83d\\udcec :mailbox_with_mail: 📭 \\ud83d\\udced :mailbox_with_no_mail: 📮 \\ud83d\\udcee :postbox: 🗳 \\ud83d\\uddf3 :ballot_box: ✏ \\u270f :pencil2: ✒ \\u2712 :black_nib: 🖋 \\ud83d\\udd8b :fountain_pen: 🖊 \\ud83d\\udd8a :pen: 🖌 \\ud83d\\udd8c :paintbrush: 🖍 \\ud83d\\udd8d :crayon: 📝 \\ud83d\\udcdd :memo: 📁 \\ud83d\\udcc1 :file_folder: 📂 \\ud83d\\udcc2 :open_file_folder: 🗂 \\ud83d\\uddc2 :card_index_dividers: 📅 \\ud83d\\udcc5 :date: 📆 \\ud83d\\udcc6 :calendar: 🗒 \\ud83d\\uddd2 :spiral_notepad: 🗓 \\ud83d\\uddd3 :spiral_calendar: 📇 \\ud83d\\udcc7 :card_index: 📈 \\ud83d\\udcc8 :chart_with_upwards_trend: 📉 \\ud83d\\udcc9 :chart_decreasing: 📊 \\ud83d\\udcca :bar_chart: 📋 \\ud83d\\udccb :clipboard: 📌 \\ud83d\\udccc :pushpin: 📍 \\ud83d\\udccd :round_pushpin: 📎 \\ud83d\\udcce :paperclip: 🖇 \\ud83d\\udd87 :linked_paperclips: 📏 \\ud83d\\udccf :straight_ruler: 📐 \\ud83d\\udcd0 :triangular_ruler: ✂ \\u2702 :scissors: 🗃 \\ud83d\\uddc3 :card_file_box: 🗄 \\ud83d\\uddc4 :file_cabinet: 🗑 \\ud83d\\uddd1 :wastebasket: 🔒 \\ud83d\\udd12 :lock: 🔓 \\ud83d\\udd13 :unlock: 🔏 \\ud83d\\udd0f :lock_with_ink_pen: 🔐 \\ud83d\\udd10 :closed_lock_with_key: 🔑 \\ud83d\\udd11 :key: 🗝 \\ud83d\\udddd :old_key: 🔨 \\ud83d\\udd28 :hammer: 🪓 \\ud83e\\ude93 :axe: ⛏ \\u26cf :pick: ⚒ \\u2692 :hammer_and_pick: 🛠 \\ud83d\\udee0 :hammer_and_wrench: 🗡 \\ud83d\\udde1 :dagger: ⚔ \\u2694 :crossed_swords: 🔫 \\ud83d\\udd2b :gun: 🛡 \\ud83d\\udee1 :shield: 🔧 \\ud83d\\udd27 :wrench: 🔩 \\ud83d\\udd29 :nut_and_bolt: ⚙ \\u2699 :gear: 🗜 \\ud83d\\udddc :clamp: ⚖ \\u2696 :balance_scale: 🦯 \\ud83e\\uddaf :probing_cane: 🔗 \\ud83d\\udd17 :link: ⛓ \\u26d3 :chains: 🧰 \\ud83e\\uddf0 :toolbox: 🧲 \\ud83e\\uddf2 :magnet: ⚗ \\u2697 :alembic: 🧪 \\ud83e\\uddea :test_tube: 🧫 \\ud83e\\uddeb :petri_dish: 🧬 \\ud83e\\uddec :dna: 🔬 \\ud83d\\udd2c :microscope: 🔭 \\ud83d\\udd2d :telescope: 📡 \\ud83d\\udce1 :satellite_antenna: 💉 \\ud83d\\udc89 :syringe: 💊 \\ud83d\\udc8a :pill: 🩹 \\ud83e\\ude79 :adhesive_bandage: 🩺 \\ud83e\\ude7a :stethoscope: 🚪 \\ud83d\\udeaa :door: 🛏 \\ud83d\\udecf :bed: 🛋 \\ud83d\\udecb :couch_and_lamp: 🪑 \\ud83e\\ude91 :chair: 🚽 \\ud83d\\udebd :toilet: 🚿 \\ud83d\\udebf :shower: 🛁 \\ud83d\\udec1 :bathtub: 🪒 \\ud83e\\ude92 :razor: 🧴 \\ud83e\\uddf4 :lotion_bottle: 🧷 \\ud83e\\uddf7 :safety_pin: 🧹 \\ud83e\\uddf9 :broom: 🧺 \\ud83e\\uddfa :basket: 🧻 \\ud83e\\uddfb :roll_of_paper: 🧼 \\ud83e\\uddfc :soap: 🧽 \\ud83e\\uddfd :sponge: 🧯 \\ud83e\\uddef :fire_extinguisher: 🛒 \\ud83d\\uded2 :shopping_cart: 🚬 \\ud83d\\udeac :smoking: ⚰ \\u26b0 :coffin: ⚱ \\u26b1 :funeral_urn: 🚰 \\ud83d\\udeb0 :potable_water: 💘 \\ud83d\\udc98 :cupid: 💝 \\ud83d\\udc9d :gift_heart: 💖 \\ud83d\\udc96 :sparkling_heart: 💗 \\ud83d\\udc97 :heartpulse: 💓 \\ud83d\\udc93 :heartbeat: 💞 \\ud83d\\udc9e :revolving_hearts: 💕 \\ud83d\\udc95 :two_hearts: 💟 \\ud83d\\udc9f :heart_decoration: ❣ \\u2763 :heart_exclamation: 💔 \\ud83d\\udc94 :broken_heart: ❤ \\u2764 :heart: 🧡 \\ud83e\\udde1 :orange_heart: 💛 \\ud83d\\udc9b :yellow_heart: 💚 \\ud83d\\udc9a :green_heart: 💙 \\ud83d\\udc99 :blue_heart: 💜 \\ud83d\\udc9c :purple_heart: 🤎 \\ud83e\\udd0e :brown_heart: 🖤 \\ud83d\\udda4 :black_heart: 🤍 \\ud83e\\udd0d :white_heart: 💯 \\ud83d\\udcaf :100: 💢 \\ud83d\\udca2 :anger: 💬 \\ud83d\\udcac :speech_balloon: 👁️‍🗨️ \\ud83d\\udc41\\ufe0f\\u200d\\ud83d\\udde8\\ufe0f :eye_speech_bubble: 🗨 \\ud83d\\udde8 :left_speech_bubble: 🗯 \\ud83d\\uddef :right_anger_bubble: 💭 \\ud83d\\udcad :thought_balloon: 💤 \\ud83d\\udca4 :zzz: ♨ \\u2668 :hotsprings: 🛑 \\ud83d\\uded1 :stop_sign: 🕛 \\ud83d\\udd5b :clock12: 🕧 \\ud83d\\udd67 :clock1230: 🕐 \\ud83d\\udd50 :clock1: 🕜 \\ud83d\\udd5c :clock130: 🕑 \\ud83d\\udd51 :clock2: 🕝 \\ud83d\\udd5d :clock230: 🕒 \\ud83d\\udd52 :clock3: 🕞 \\ud83d\\udd5e :clock330: 🕓 \\ud83d\\udd53 :clock4: 🕟 \\ud83d\\udd5f :clock430: 🕔 \\ud83d\\udd54 :clock5: 🕠 \\ud83d\\udd60 :clock530: 🕕 \\ud83d\\udd55 :clock6: 🕡 \\ud83d\\udd61 :clock630: 🕖 \\ud83d\\udd56 :clock7: 🕢 \\ud83d\\udd62 :clock730: 🕗 \\ud83d\\udd57 :clock8: 🕣 \\ud83d\\udd63 :clock830: 🕘 \\ud83d\\udd58 :clock9: 🕤 \\ud83d\\udd64 :clock930: 🕙 \\ud83d\\udd59 :clock10: 🕥 \\ud83d\\udd65 :clock1030: 🕚 \\ud83d\\udd5a :clock11: 🕦 \\ud83d\\udd66 :clock1130: 🌀 \\ud83c\\udf00 :cyclone: ♠ \\u2660 :spades: ♥ \\u2665 :hearts: ♦ \\u2666 :diamonds: ♣ \\u2663 :clubs: 🃏 \\ud83c\\udccf :black_joker: 🀄 \\ud83c\\udc04 :mahjong: 🎴 \\ud83c\\udfb4 :flower_playing_cards: 🔇 \\ud83d\\udd07 :mute: 🔈 \\ud83d\\udd08 :speaker: 🔉 \\ud83d\\udd09 :sound: 🔊 \\ud83d\\udd0a :loud_sound: 📢 \\ud83d\\udce2 :loudspeaker: 📣 \\ud83d\\udce3 :mega: 🔔 \\ud83d\\udd14 :bell: 🔕 \\ud83d\\udd15 :no_bell: 🎵 \\ud83c\\udfb5 :musical_note: 🎶 \\ud83c\\udfb6 :notes: 💹 \\ud83d\\udcb9 :chart: 🏧 \\ud83c\\udfe7 :atm: 🚮 \\ud83d\\udeae :put_litter_in_its_place: ♿ \\u267f :wheelchair: 🚹 \\ud83d\\udeb9 :mens: 🚺 \\ud83d\\udeba :womens: 🚻 \\ud83d\\udebb :restroom: 🚼 \\ud83d\\udebc :baby_symbol: 🚾 \\ud83d\\udebe :wc: ⚠ \\u26a0 :warning: 🚸 \\ud83d\\udeb8 :children_crossing: ⛔ \\u26d4 :no_entry: 🚫 \\ud83d\\udeab :no_entry_sign: 🚳 \\ud83d\\udeb3 :no_bicycles: 🚭 \\ud83d\\udead :no_smoking: 🚯 \\ud83d\\udeaf :do_not_litter: 🚱 \\ud83d\\udeb1 :non-potable_water: 🚷 \\ud83d\\udeb7 :no_pedestrians: 📵 \\ud83d\\udcf5 :no_mobile_phones: 🔞 \\ud83d\\udd1e :underage: ☢ \\u2622 :radioactive: ☣ \\u2623 :biohazard: ⬆ \\u2b06 :arrow_up: ↗ \\u2197 :arrow_upper_right: ➡ \\u27a1 :arrow_right: ↘ \\u2198 :arrow_lower_right: ⬇ \\u2b07 :arrow_down: ↙ \\u2199 :arrow_lower_left: ⬅ \\u2b05 :arrow_left: ↖ \\u2196 :arrow_upper_left: ↕ \\u2195 :arrow_up_down: ↔ \\u2194 :left_right_arrow: ↩ \\u21a9 :leftwards_arrow_with_hook: ↪ \\u21aa :arrow_right_hook: ⤴ \\u2934 :arrow_heading_up: ⤵ \\u2935 :arrow_heading_down: 🔃 \\ud83d\\udd03 :arrows_clockwise: 🔄 \\ud83d\\udd04 :arrows_counterclockwise: 🔙 \\ud83d\\udd19 :back: 🔚 \\ud83d\\udd1a :end: 🔛 \\ud83d\\udd1b :on: 🔜 \\ud83d\\udd1c :soon: 🔝 \\ud83d\\udd1d :top: 🛐 \\ud83d\\uded0 :place_of_worship: ⚛ \\u269b :atom_symbol: 🕉 \\ud83d\\udd49 :om: ✡ \\u2721 :star_of_david: ☸ \\u2638 :wheel_of_dharma: ☯ \\u262f :yin_yang: ✝ \\u271d :latin_cross: ☦ \\u2626 :orthodox_cross: ☪ \\u262a :star_and_crescent: ☮ \\u262e :peace_symbol: 🕎 \\ud83d\\udd4e :menorah: 🔯 \\ud83d\\udd2f :six_pointed_star: ♈ \\u2648 :aries: ♉ \\u2649 :taurus: ♊ \\u264a :gemini: ♋ \\u264b :cancer: ♌ \\u264c :leo: ♍ \\u264d :virgo: ♎ \\u264e :libra: ♏ \\u264f :scorpius: ♐ \\u2650 :sagittarius: ♑ \\u2651 :capricorn: ♒ \\u2652 :aquarius: ♓ \\u2653 :pisces: ⛎ \\u26ce :ophiuchus: 🔀 \\ud83d\\udd00 :twisted_rightwards_arrows: 🔁 \\ud83d\\udd01 :repeat: 🔂 \\ud83d\\udd02 :repeat_one: ▶ \\u25b6 :arrow_forward: ⏩ \\u23e9 :fast_forward: ◀ \\u25c0 :arrow_backward: ⏪ \\u23ea :rewind: 🔼 \\ud83d\\udd3c :arrow_up_small: ⏫ \\u23eb :arrow_double_up: 🔽 \\ud83d\\udd3d :arrow_down_small: ⏬ \\u23ec :arrow_double_down: ⏹ \\u23f9 :stop_button: ⏏ \\u23cf :eject_button: 🎦 \\ud83c\\udfa6 :cinema: 🔅 \\ud83d\\udd05 :low_brightness: 🔆 \\ud83d\\udd06 :high_brightness: 📶 \\ud83d\\udcf6 :signal_strength: 📳 \\ud83d\\udcf3 :vibration_mode: 📴 \\ud83d\\udcf4 :mobile_phone_off: ✖ \\u2716 :multiply: ➕ \\u2795 :plus: ➖ \\u2796 :minus: ➗ \\u2797 :divide: ♾ \\u267e :infinity: ‼ \\u203c :bangbang: ⁉ \\u2049 :interrobang: ❓ \\u2753 :question: ❔ \\u2754 :grey_question: ❕ \\u2755 :grey_exclamation: ❗ \\u2757 :exclamation: 〰 \\u3030 :wavy_dash: 💱 \\ud83d\\udcb1 :currency_exchange: 💲 \\ud83d\\udcb2 :heavy_dollar_sign: ⚕ \\u2695 :medical_symbol: ♻ \\u267b :recycle: ⚜ \\u269c :fleur_de_lis: 🔱 \\ud83d\\udd31 :trident: 📛 \\ud83d\\udcdb :name_badge: 🔰 \\ud83d\\udd30 :beginner: ⭕ \\u2b55 :o: ✅ \\u2705 :white_check_mark: ☑ \\u2611 :ballot_box_with_check: ✔ \\u2714 :heavy_check_mark: ❌ \\u274c :x: ❎ \\u274e :cross_mark_button: ➰ \\u27b0 :curly_loop: ➿ \\u27bf :loop: 〽 \\u303d :part_alternation_mark: ✳ \\u2733 :eight_spoked_asterisk: ✴ \\u2734 :eight_pointed_black_star: ❇ \\u2747 :sparkle: © \\u00a9 :copyright: ® \\u00ae :registered: ™ \\u2122 :tm: #️⃣ \\u0023\\ufe0f\\u20e3 :hash: 0️⃣ \\u0030\\ufe0f\\u20e3 :zero: 1️⃣ \\u0031\\ufe0f\\u20e3 :one: 2️⃣ \\u0032\\ufe0f\\u20e3 :two: 3️⃣ \\u0033\\ufe0f\\u20e3 :three: 4️⃣ \\u0034\\ufe0f\\u20e3 :four: 5️⃣ \\u0035\\ufe0f\\u20e3 :five: 6️⃣ \\u0036\\ufe0f\\u20e3 :six: 7️⃣ \\u0037\\ufe0f\\u20e3 :seven: 8️⃣ \\u0038\\ufe0f\\u20e3 :eight: 9️⃣ \\u0039\\ufe0f\\u20e3 :nine: 🔟 \\ud83d\\udd1f :keycap_ten: 🔠 \\ud83d\\udd20 :capital_abcd: 🔡 \\ud83d\\udd21 :abcd: 🔢 \\ud83d\\udd22 :1234: 🔣 \\ud83d\\udd23 :symbols: 🔤 \\ud83d\\udd24 :abc: 🅰 \\ud83c\\udd70 :a: 🆎 \\ud83c\\udd8e :ab: 🅱 \\ud83c\\udd71 :b: 🆑 \\ud83c\\udd91 :cl: 🆒 \\ud83c\\udd92 :cool: 🆓 \\ud83c\\udd93 :free: ℹ \\u2139 :information_source: 🆔 \\ud83c\\udd94 :id: Ⓜ \\u24c2 :m: 🆕 \\ud83c\\udd95 :new: 🆖 \\ud83c\\udd96 :ng: 🅾 \\ud83c\\udd7e :o2: 🆗 \\ud83c\\udd97 :ok: 🅿 \\ud83c\\udd7f :parking: 🆘 \\ud83c\\udd98 :sos: 🆙 \\ud83c\\udd99 :up: 🆚 \\ud83c\\udd9a :vs: 🈁 \\ud83c\\ude01 :koko: 🈂 \\ud83c\\ude02 :sa: 🈷 \\ud83c\\ude37 :u6708: 🈶 \\ud83c\\ude36 :u6709: 🈯 \\ud83c\\ude2f :u6307: 🉐 \\ud83c\\ude50 :ideograph_advantage: 🈹 \\ud83c\\ude39 :u5272: 🈚 \\ud83c\\ude1a :u7121: 🈲 \\ud83c\\ude32 :u7981: 🉑 \\ud83c\\ude51 :accept: 🈸 \\ud83c\\ude38 :u7533: 🈴 \\ud83c\\ude34 :u5408: 🈳 \\ud83c\\ude33 :u7a7a: ㊗ \\u3297 :congratulations: ㊙ \\u3299 :secret: 🈺 \\ud83c\\ude3a :u55b6: 🈵 \\ud83c\\ude35 :u6e80: 🔴 \\ud83d\\udd34 :red_circle: 🟠 \\ud83d\\udfe0 :orange_circle: 🟡 \\ud83d\\udfe1 :yellow_circle: 🟢 \\ud83d\\udfe2 :green_circle: 🔵 \\ud83d\\udd35 :large_blue_circle: 🟣 \\ud83d\\udfe3 :purple_circle: 🟤 \\ud83d\\udfe4 :brown_circle: ⚫ \\u26ab :black_circle: ⚪ \\u26aa :white_circle: 🟥 \\ud83d\\udfe5 :red_square: 🟧 \\ud83d\\udfe7 :orange_square: 🟨 \\ud83d\\udfe8 :yellow_square: 🟩 \\ud83d\\udfe9 :green_square: 🟦 \\ud83d\\udfe6 :blue_square: 🟪 \\ud83d\\udfea :purple_square: 🟫 \\ud83d\\udfeb :brown_square: ⬛ \\u2b1b :black_large_square: ⬜ \\u2b1c :white_large_square: ◼ \\u25fc :black_medium_square: ◻ \\u25fb :white_medium_square: ◾ \\u25fe :black_medium_small_square: ◽ \\u25fd :white_medium_small_square: ▪ \\u25aa :black_small_square: ▫ \\u25ab :white_small_square: 🔶 \\ud83d\\udd36 :large_orange_diamond: 🔷 \\ud83d\\udd37 :large_blue_diamond: 🔸 \\ud83d\\udd38 :small_orange_diamond: 🔹 \\ud83d\\udd39 :small_blue_diamond: 🔺 \\ud83d\\udd3a :small_red_triangle: 🔻 \\ud83d\\udd3b :small_red_triangle_down: 💠 \\ud83d\\udca0 :diamond_with_a_dot: 🔘 \\ud83d\\udd18 :radio_button: 🔳 \\ud83d\\udd33 :white_square_button: 🔲 \\ud83d\\udd32 :black_square_button: 🏁 \\ud83c\\udfc1 :checkered_flag: 🚩 \\ud83d\\udea9 :triangular_flag_on_post: 🎌 \\ud83c\\udf8c :crossed_flags: 🏴 \\ud83c\\udff4 :black_flag: 🏳 \\ud83c\\udff3 :white_flag: 🏳️‍🌈 \\ud83c\\udff3\\ufe0f\\u200d\\ud83c\\udf08 :rainbow_flag: 🏳️‍⚧️ \\ud83c\\udff3\\ufe0f\\u200d\\u26a7\\ufe0f :transgender_flag: 🏴‍☠️ \\ud83c\\udff4\\u200d\\u2620\\ufe0f :pirate_flag: 🇦🇩 \\ud83c\\udde6\\ud83c\\udde9 :andorra: 🇦🇪 \\ud83c\\udde6\\ud83c\\uddea :flag-ae: 🇦🇫 \\ud83c\\udde6\\ud83c\\uddeb :flag-af: 🇦🇬 \\ud83c\\udde6\\ud83c\\uddec :flag-ag: 🇦🇮 \\ud83c\\udde6\\ud83c\\uddee :flag-ai: 🇦🇱 \\ud83c\\udde6\\ud83c\\uddf1 :albania: 🇦🇲 \\ud83c\\udde6\\ud83c\\uddf2 :armenia: 🇦🇴 \\ud83c\\udde6\\ud83c\\uddf4 :angola: 🇦🇶 \\ud83c\\udde6\\ud83c\\uddf6 :flag-aq: 🇦🇷 \\ud83c\\udde6\\ud83c\\uddf7 :flag-ar: 🇦🇸 \\ud83c\\udde6\\ud83c\\uddf8 :flag-as: 🇦🇹 \\ud83c\\udde6\\ud83c\\uddf9 :austria: 🇦🇺 \\ud83c\\udde6\\ud83c\\uddfa :flag-au: 🇦🇼 \\ud83c\\udde6\\ud83c\\uddfc :aruba: 🇦🇽 \\ud83c\\udde6\\ud83c\\uddfd :flag-ax: 🇦🇿 \\ud83c\\udde6\\ud83c\\uddff :flag-az: 🇧🇦 \\ud83c\\udde7\\ud83c\\udde6 :flag-ba: 🇧🇧 \\ud83c\\udde7\\ud83c\\udde7 :flag-bb: 🇧🇩 \\ud83c\\udde7\\ud83c\\udde9 :flag-bd: 🇧🇪 \\ud83c\\udde7\\ud83c\\uddea :belgium: 🇧🇫 \\ud83c\\udde7\\ud83c\\uddeb :flag-bf: 🇧🇬 \\ud83c\\udde7\\ud83c\\uddec :flag-bg: 🇧🇭 \\ud83c\\udde7\\ud83c\\udded :bahrain: 🇧🇮 \\ud83c\\udde7\\ud83c\\uddee :burundi: 🇧🇯 \\ud83c\\udde7\\ud83c\\uddef :benin: 🇧🇱 \\ud83c\\udde7\\ud83c\\uddf1 :flag-bl: 🇧🇲 \\ud83c\\udde7\\ud83c\\uddf2 :bermuda: 🇧🇳 \\ud83c\\udde7\\ud83c\\uddf3 :brunei: 🇧🇴 \\ud83c\\udde7\\ud83c\\uddf4 :bolivia: 🇧🇶 \\ud83c\\udde7\\ud83c\\uddf6 :flag-bq: 🇧🇷 \\ud83c\\udde7\\ud83c\\uddf7 :brazil: 🇧🇸 \\ud83c\\udde7\\ud83c\\uddf8 :bahamas: 🇧🇹 \\ud83c\\udde7\\ud83c\\uddf9 :bhutan: 🇧🇼 \\ud83c\\udde7\\ud83c\\uddfc :flag-bw: 🇧🇾 \\ud83c\\udde7\\ud83c\\uddfe :belarus: 🇧🇿 \\ud83c\\udde7\\ud83c\\uddff :belize: 🇨🇦 \\ud83c\\udde8\\ud83c\\udde6 :canada: 🇨🇨 \\ud83c\\udde8\\ud83c\\udde8 :flag-cc: 🇨🇩 \\ud83c\\udde8\\ud83c\\udde9 :flag-cd: 🇨🇫 \\ud83c\\udde8\\ud83c\\uddeb :flag-cf: 🇨🇬 \\ud83c\\udde8\\ud83c\\uddec :flag-cg: 🇨🇭 \\ud83c\\udde8\\ud83c\\udded :flag-ch: 🇨🇮 \\ud83c\\udde8\\ud83c\\uddee :flag-ci: 🇨🇰 \\ud83c\\udde8\\ud83c\\uddf0 :flag-ck: 🇨🇱 \\ud83c\\udde8\\ud83c\\uddf1 :chile: 🇨🇲 \\ud83c\\udde8\\ud83c\\uddf2 :flag-cm: 🇨🇳 \\ud83c\\udde8\\ud83c\\uddf3 :cn: 🇨🇴 \\ud83c\\udde8\\ud83c\\uddf4 :flag-co: 🇨🇷 \\ud83c\\udde8\\ud83c\\uddf7 :flag-cr: 🇨🇺 \\ud83c\\udde8\\ud83c\\uddfa :cuba: 🇨🇻 \\ud83c\\udde8\\ud83c\\uddfb :flag-cv: 🇨🇼 \\ud83c\\udde8\\ud83c\\uddfc :curacao: 🇨🇽 \\ud83c\\udde8\\ud83c\\uddfd :flag-cx: 🇨🇾 \\ud83c\\udde8\\ud83c\\uddfe :cyprus: 🇨🇿 \\ud83c\\udde8\\ud83c\\uddff :flag-cz: 🇩🇪 \\ud83c\\udde9\\ud83c\\uddea :de: 🇩🇯 \\ud83c\\udde9\\ud83c\\uddef :flag-dj: 🇩🇰 \\ud83c\\udde9\\ud83c\\uddf0 :denmark: 🇩🇲 \\ud83c\\udde9\\ud83c\\uddf2 :flag-dm: 🇩🇴 \\ud83c\\udde9\\ud83c\\uddf4 :flag-do: 🇩🇿 \\ud83c\\udde9\\ud83c\\uddff :algeria: 🇪🇨 \\ud83c\\uddea\\ud83c\\udde8 :ecuador: 🇪🇪 \\ud83c\\uddea\\ud83c\\uddea :estonia: 🇪🇬 \\ud83c\\uddea\\ud83c\\uddec :egypt: 🇪🇭 \\ud83c\\uddea\\ud83c\\udded :flag-eh: 🇪🇷 \\ud83c\\uddea\\ud83c\\uddf7 :eritrea: 🇪🇸 \\ud83c\\uddea\\ud83c\\uddf8 :es: 🇪🇹 \\ud83c\\uddea\\ud83c\\uddf9 :flag-et: 🇪🇺 \\ud83c\\uddea\\ud83c\\uddfa :eu: 🇫🇮 \\ud83c\\uddeb\\ud83c\\uddee :finland: 🇫🇯 \\ud83c\\uddeb\\ud83c\\uddef :fiji: 🇫🇰 \\ud83c\\uddeb\\ud83c\\uddf0 :flag-fk: 🇫🇲 \\ud83c\\uddeb\\ud83c\\uddf2 :flag-fm: 🇫🇴 \\ud83c\\uddeb\\ud83c\\uddf4 :flag-fo: 🇫🇷 \\ud83c\\uddeb\\ud83c\\uddf7 :fr: 🇬🇦 \\ud83c\\uddec\\ud83c\\udde6 :gabon: 🇬🇧 \\ud83c\\uddec\\ud83c\\udde7 :gb: 🇬🇩 \\ud83c\\uddec\\ud83c\\udde9 :flag-gd: 🇬🇪 \\ud83c\\uddec\\ud83c\\uddea :flag-ge: 🇬🇫 \\ud83c\\uddec\\ud83c\\uddeb :flag-gf: 🇬🇬 \\ud83c\\uddec\\ud83c\\uddec :flag-gg: 🇬🇭 \\ud83c\\uddec\\ud83c\\udded :ghana: 🇬🇮 \\ud83c\\uddec\\ud83c\\uddee :flag-gi: 🇬🇱 \\ud83c\\uddec\\ud83c\\uddf1 :flag-gl: 🇬🇲 \\ud83c\\uddec\\ud83c\\uddf2 :gambia: 🇬🇳 \\ud83c\\uddec\\ud83c\\uddf3 :guinea: 🇬🇵 \\ud83c\\uddec\\ud83c\\uddf5 :flag-gp: 🇬🇶 \\ud83c\\uddec\\ud83c\\uddf6 :flag-gq: 🇬🇷 \\ud83c\\uddec\\ud83c\\uddf7 :greece: 🇬🇸 \\ud83c\\uddec\\ud83c\\uddf8 :flag-gs: 🇬🇹 \\ud83c\\uddec\\ud83c\\uddf9 :flag-gt: 🇬🇺 \\ud83c\\uddec\\ud83c\\uddfa :guam: 🇬🇼 \\ud83c\\uddec\\ud83c\\uddfc :flag-gw: 🇬🇾 \\ud83c\\uddec\\ud83c\\uddfe :guyana: 🇭🇰 \\ud83c\\udded\\ud83c\\uddf0 :flag-hk: 🇭🇳 \\ud83c\\udded\\ud83c\\uddf3 :flag-hn: 🇭🇷 \\ud83c\\udded\\ud83c\\uddf7 :croatia: 🇭🇹 \\ud83c\\udded\\ud83c\\uddf9 :haiti: 🇭🇺 \\ud83c\\udded\\ud83c\\uddfa :flag-hu: 🇮🇨 \\ud83c\\uddee\\ud83c\\udde8 :flag-ic: 🇮🇩 \\ud83c\\uddee\\ud83c\\udde9 :flag-id: 🇮🇪 \\ud83c\\uddee\\ud83c\\uddea :flag-ie: 🇮🇱 \\ud83c\\uddee\\ud83c\\uddf1 :israel: 🇮🇲 \\ud83c\\uddee\\ud83c\\uddf2 :flag-im: 🇮🇳 \\ud83c\\uddee\\ud83c\\uddf3 :india: 🇮🇴 \\ud83c\\uddee\\ud83c\\uddf4 :flag-io: 🇮🇶 \\ud83c\\uddee\\ud83c\\uddf6 :iraq: 🇮🇷 \\ud83c\\uddee\\ud83c\\uddf7 :iran: 🇮🇸 \\ud83c\\uddee\\ud83c\\uddf8 :flag-is: 🇮🇹 \\ud83c\\uddee\\ud83c\\uddf9 :it: 🇯🇪 \\ud83c\\uddef\\ud83c\\uddea :jersey: 🇯🇲 \\ud83c\\uddef\\ud83c\\uddf2 :flag-jm: 🇯🇴 \\ud83c\\uddef\\ud83c\\uddf4 :jordan: 🇯🇵 \\ud83c\\uddef\\ud83c\\uddf5 :jp: 🇰🇪 \\ud83c\\uddf0\\ud83c\\uddea :kenya: 🇰🇬 \\ud83c\\uddf0\\ud83c\\uddec :flag-kg: 🇰🇭 \\ud83c\\uddf0\\ud83c\\udded :flag-kh: 🇰🇮 \\ud83c\\uddf0\\ud83c\\uddee :flag-ki: 🇰🇲 \\ud83c\\uddf0\\ud83c\\uddf2 :comoros: 🇰🇳 \\ud83c\\uddf0\\ud83c\\uddf3 :flag-kn: 🇰🇵 \\ud83c\\uddf0\\ud83c\\uddf5 :flag-kp: 🇰🇷 \\ud83c\\uddf0\\ud83c\\uddf7 :kr: 🇰🇼 \\ud83c\\uddf0\\ud83c\\uddfc :kuwait: 🇰🇾 \\ud83c\\uddf0\\ud83c\\uddfe :flag-ky: 🇰🇿 \\ud83c\\uddf0\\ud83c\\uddff :flag-kz: 🇱🇦 \\ud83c\\uddf1\\ud83c\\udde6 :laos: 🇱🇧 \\ud83c\\uddf1\\ud83c\\udde7 :flag-lb: 🇱🇨 \\ud83c\\uddf1\\ud83c\\udde8 :flag-lc: 🇱🇮 \\ud83c\\uddf1\\ud83c\\uddee :flag-li: 🇱🇰 \\ud83c\\uddf1\\ud83c\\uddf0 :flag-lk: 🇱🇷 \\ud83c\\uddf1\\ud83c\\uddf7 :flag-lr: 🇱🇸 \\ud83c\\uddf1\\ud83c\\uddf8 :flag-ls: 🇱🇹 \\ud83c\\uddf1\\ud83c\\uddf9 :flag-lt: 🇱🇺 \\ud83c\\uddf1\\ud83c\\uddfa :flag-lu: 🇱🇻 \\ud83c\\uddf1\\ud83c\\uddfb :latvia: 🇱🇾 \\ud83c\\uddf1\\ud83c\\uddfe :libya: 🇲🇦 \\ud83c\\uddf2\\ud83c\\udde6 :flag-ma: 🇲🇨 \\ud83c\\uddf2\\ud83c\\udde8 :monaco: 🇲🇩 \\ud83c\\uddf2\\ud83c\\udde9 :flag-md: 🇲🇪 \\ud83c\\uddf2\\ud83c\\uddea :flag-me: 🇲🇬 \\ud83c\\uddf2\\ud83c\\uddec :flag-mg: 🇲🇭 \\ud83c\\uddf2\\ud83c\\udded :flag-mh: 🇲🇰 \\ud83c\\uddf2\\ud83c\\uddf0 :flag-mk: 🇲🇱 \\ud83c\\uddf2\\ud83c\\uddf1 :mali: 🇲🇳 \\ud83c\\uddf2\\ud83c\\uddf3 :flag-mn: 🇲🇴 \\ud83c\\uddf2\\ud83c\\uddf4 :macau: 🇲🇵 \\ud83c\\uddf2\\ud83c\\uddf5 :flag-mp: 🇲🇶 \\ud83c\\uddf2\\ud83c\\uddf6 :flag-mq: 🇲🇷 \\ud83c\\uddf2\\ud83c\\uddf7 :flag-mr: 🇲🇸 \\ud83c\\uddf2\\ud83c\\uddf8 :flag-ms: 🇲🇹 \\ud83c\\uddf2\\ud83c\\uddf9 :malta: 🇲🇺 \\ud83c\\uddf2\\ud83c\\uddfa :flag-mu: 🇲🇻 \\ud83c\\uddf2\\ud83c\\uddfb :flag-mv: 🇲🇼 \\ud83c\\uddf2\\ud83c\\uddfc :malawi: 🇲🇽 \\ud83c\\uddf2\\ud83c\\uddfd :mexico: 🇲🇾 \\ud83c\\uddf2\\ud83c\\uddfe :flag-my: 🇲🇿 \\ud83c\\uddf2\\ud83c\\uddff :flag-mz: 🇳🇦 \\ud83c\\uddf3\\ud83c\\udde6 :flag-na: 🇳🇨 \\ud83c\\uddf3\\ud83c\\udde8 :flag-nc: 🇳🇪 \\ud83c\\uddf3\\ud83c\\uddea :niger: 🇳🇫 \\ud83c\\uddf3\\ud83c\\uddeb :flag-nf: 🇳🇬 \\ud83c\\uddf3\\ud83c\\uddec :flag-ng: 🇳🇮 \\ud83c\\uddf3\\ud83c\\uddee :flag-ni: 🇳🇱 \\ud83c\\uddf3\\ud83c\\uddf1 :flag-nl: 🇳🇴 \\ud83c\\uddf3\\ud83c\\uddf4 :norway: 🇳🇵 \\ud83c\\uddf3\\ud83c\\uddf5 :nepal: 🇳🇷 \\ud83c\\uddf3\\ud83c\\uddf7 :nauru: 🇳🇺 \\ud83c\\uddf3\\ud83c\\uddfa :niue: 🇳🇿 \\ud83c\\uddf3\\ud83c\\uddff :flag-nz: 🇴🇲 \\ud83c\\uddf4\\ud83c\\uddf2 :oman: 🇵🇦 \\ud83c\\uddf5\\ud83c\\udde6 :panama: 🇵🇪 \\ud83c\\uddf5\\ud83c\\uddea :peru: 🇵🇫 \\ud83c\\uddf5\\ud83c\\uddeb :flag-pf: 🇵🇬 \\ud83c\\uddf5\\ud83c\\uddec :flag-pg: 🇵🇭 \\ud83c\\uddf5\\ud83c\\udded :flag-ph: 🇵🇰 \\ud83c\\uddf5\\ud83c\\uddf0 :flag-pk: 🇵🇱 \\ud83c\\uddf5\\ud83c\\uddf1 :poland: 🇵🇲 \\ud83c\\uddf5\\ud83c\\uddf2 :flag-pm: 🇵🇳 \\ud83c\\uddf5\\ud83c\\uddf3 :flag-pn: 🇵🇷 \\ud83c\\uddf5\\ud83c\\uddf7 :flag-pr: 🇵🇸 \\ud83c\\uddf5\\ud83c\\uddf8 :flag-ps: 🇵🇹 \\ud83c\\uddf5\\ud83c\\uddf9 :flag-pt: 🇵🇼 \\ud83c\\uddf5\\ud83c\\uddfc :palau: 🇵🇾 \\ud83c\\uddf5\\ud83c\\uddfe :flag-py: 🇶🇦 \\ud83c\\uddf6\\ud83c\\udde6 :qatar: 🇷🇪 \\ud83c\\uddf7\\ud83c\\uddea :flag-re: 🇷🇴 \\ud83c\\uddf7\\ud83c\\uddf4 :flag-ro: 🇷🇸 \\ud83c\\uddf7\\ud83c\\uddf8 :serbia: 🇷🇺 \\ud83c\\uddf7\\ud83c\\uddfa :ru: 🇷🇼 \\ud83c\\uddf7\\ud83c\\uddfc :rwanda: 🇸🇦 \\ud83c\\uddf8\\ud83c\\udde6 :flag-sa: 🇸🇧 \\ud83c\\uddf8\\ud83c\\udde7 :flag-sb: 🇸🇨 \\ud83c\\uddf8\\ud83c\\udde8 :flag-sc: 🇸🇩 \\ud83c\\uddf8\\ud83c\\udde9 :sudan: 🇸🇪 \\ud83c\\uddf8\\ud83c\\uddea :sweden: 🇸🇬 \\ud83c\\uddf8\\ud83c\\uddec :flag-sg: 🇸🇭 \\ud83c\\uddf8\\ud83c\\udded :flag-sh: 🇸🇮 \\ud83c\\uddf8\\ud83c\\uddee :flag-si: 🇸🇰 \\ud83c\\uddf8\\ud83c\\uddf0 :flag-sk: 🇸🇱 \\ud83c\\uddf8\\ud83c\\uddf1 :flag-sl: 🇸🇲 \\ud83c\\uddf8\\ud83c\\uddf2 :flag-sm: 🇸🇳 \\ud83c\\uddf8\\ud83c\\uddf3 :flag-sn: 🇸🇴 \\ud83c\\uddf8\\ud83c\\uddf4 :flag-so: 🇸🇷 \\ud83c\\uddf8\\ud83c\\uddf7 :flag-sr: 🇸🇸 \\ud83c\\uddf8\\ud83c\\uddf8 :flag-ss: 🇸🇹 \\ud83c\\uddf8\\ud83c\\uddf9 :flag-st: 🇸🇻 \\ud83c\\uddf8\\ud83c\\uddfb :flag-sv: 🇸🇽 \\ud83c\\uddf8\\ud83c\\uddfd :flag-sx: 🇸🇾 \\ud83c\\uddf8\\ud83c\\uddfe :syria: 🇸🇿 \\ud83c\\uddf8\\ud83c\\uddff :flag-sz: 🇹🇨 \\ud83c\\uddf9\\ud83c\\udde8 :flag-tc: 🇹🇩 \\ud83c\\uddf9\\ud83c\\udde9 :chad: 🇹🇫 \\ud83c\\uddf9\\ud83c\\uddeb :flag-tf: 🇹🇬 \\ud83c\\uddf9\\ud83c\\uddec :togo: 🇹🇭 \\ud83c\\uddf9\\ud83c\\udded :flag-th: 🇹🇯 \\ud83c\\uddf9\\ud83c\\uddef :flag-tj: 🇹🇰 \\ud83c\\uddf9\\ud83c\\uddf0 :flag-tk: 🇹🇱 \\ud83c\\uddf9\\ud83c\\uddf1 :flag-tl: 🇹🇲 \\ud83c\\uddf9\\ud83c\\uddf2 :flag-tm: 🇹🇳 \\ud83c\\uddf9\\ud83c\\uddf3 :flag-tn: 🇹🇴 \\ud83c\\uddf9\\ud83c\\uddf4 :tonga: 🇹🇷 \\ud83c\\uddf9\\ud83c\\uddf7 :tr: 🇹🇹 \\ud83c\\uddf9\\ud83c\\uddf9 :flag-tt: 🇹🇻 \\ud83c\\uddf9\\ud83c\\uddfb :tuvalu: 🇹🇿 \\ud83c\\uddf9\\ud83c\\uddff :flag-tz: 🇺🇦 \\ud83c\\uddfa\\ud83c\\udde6 :flag-ua: 🇺🇬 \\ud83c\\uddfa\\ud83c\\uddec :uganda: 🇺🇸 \\ud83c\\uddfa\\ud83c\\uddf8 :us: 🇺🇾 \\ud83c\\uddfa\\ud83c\\uddfe :flag-uy: 🇺🇿 \\ud83c\\uddfa\\ud83c\\uddff :flag-uz: 🇻🇦 \\ud83c\\uddfb\\ud83c\\udde6 :flag-va: 🇻🇨 \\ud83c\\uddfb\\ud83c\\udde8 :flag-vc: 🇻🇪 \\ud83c\\uddfb\\ud83c\\uddea :flag-ve: 🇻🇬 \\ud83c\\uddfb\\ud83c\\uddec :flag-vg: 🇻🇮 \\ud83c\\uddfb\\ud83c\\uddee :flag-vi: 🇻🇳 \\ud83c\\uddfb\\ud83c\\uddf3 :flag-vn: 🇻🇺 \\ud83c\\uddfb\\ud83c\\uddfa :flag-vu: 🇼🇫 \\ud83c\\uddfc\\ud83c\\uddeb :flag-wf: 🇼🇸 \\ud83c\\uddfc\\ud83c\\uddf8 :samoa: 🇽🇰 \\ud83c\\uddfd\\ud83c\\uddf0 :kosovo: 🇾🇪 \\ud83c\\uddfe\\ud83c\\uddea :yemen: 🇾🇹 \\ud83c\\uddfe\\ud83c\\uddf9 :flag-yt: 🇿🇦 \\ud83c\\uddff\\ud83c\\udde6 :flag-za: 🇿🇲 \\ud83c\\uddff\\ud83c\\uddf2 :zambia: 🇿🇼 \\ud83c\\uddff\\ud83c\\uddfc :flag-zw: 🏴󠁧󠁢󠁥󠁮󠁧󠁿 \\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc65\\udb40\\udc6e\\udb40\\udc67\\udb40\\udc7f :england: 🏴󠁧󠁢󠁳󠁣󠁴󠁿 \\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc73\\udb40\\udc63\\udb40\\udc74\\udb40\\udc7f :scotland: 🏴󠁧󠁢󠁷󠁬󠁳󠁿 \\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc77\\udb40\\udc6c\\udb40\\udc73\\udb40\\udc7f :wales:"
  },
  "guides/entities/casting.html": {
    "href": "guides/entities/casting.html",
    "title": "类型转换 | Kook.Net 文档",
    "keywords": "类型转换 通过类型转换，实体可以转换为其它定义下的实体，但这种转换仅能在有继承关系的变体间进行。 例如： IUser 可以转换为 IGuildUser ，但不能转换为 IMessage 。 Note 如果两个接口之间存在继承关系，它们便可以进行互相的转换。 将实体类转换为其所实现的接口也可以合法的。 向上类型转换 通过向上类型转换，实体可以被转换为更通用的变体，例如：将 IGuildUser 转换为 IUser 。 尽管向上类型转换的结果往往具有更简化的信息，但由于多态性，基类类型的变量可以保存派生类型。 向上类型转换一般是隐式进行的。 通过向下类型转换，实体可以转换为包含更详细信息的变体，例如：将 IUser 转换为 IGuildUser ， 这样便可以访问原始无法直接访问的信息。 向下类型转换 向下类型转换是访问实体的实际定义最直接的方式，如果要访问派生类型的实例成员， 可以直接进行向下类型转换。向下类型转换一般是显式进行的。 IUser user; // 这里使用了内联的向下类型转换来一次性获取字段数据 // 需要注意的是，如果类型转换的结果实体为 null，则会抛出 NullReferenceException 异常 Console.WriteLine(((IGuildUser)user).Nickname); // 如果可以保证转换是合法且结果非空的，则可以为类型转换结果赋值到另一个变量中 IGuildUser guildUser = (IGuildUser)user; Warning 作为一种强制类型转换操作，如果两种类型之间不兼容，向下类型转换可能会在执行时抛出 InvalidCastException 异常，在这种情况下，通过模式匹配来进行类型转换可以有效地避免这种异常。 更一般的类型转换 更一般情况下的类型转换往往使用 as 运算符来向将对象转换为给定的类型。 如果实体确实能被转换为给定的类型，运算结果会返回转换后的类型，来让属性可以为访问。 IChannel channel; // 如果要将通用频道接口 IChannel 转换为服务器文字频道接口 ITextChannel // 来访问 ITextChannel 中存在而 IChannel 中不存在的属性和方法 // 则可进行如下的转换 ITextChannel textChannel = channel as ITextChannel; await textChannel.DoSomethingICantWithIChannelAsync(); Warning 如果类型转换的结果可能为 null，在访问其属性或方法时则会抛出 NullReferenceException 异常， 在这种情况下，通过模式匹配进行安全类型转换则更为实用，这可以阻止此异常的抛出。 安全类型转换 安全类型转换在转换前会进行模式匹配检查，因此可以保证转换结果类型永不为 null。 C# 提供了三种语法来进行安全类型转换： 类型检查 要进行安全类型转换，需要使用 is 运算符来检查值是否属于给定地类型。 如果检查不通过，条件判断语句可以绕过代码，来保证程序不会访问 null 对象的属性。 IUser user; // 这里检查了该用户实体是否为一个 IGuildUser 实体 // 如果检查不通过，条件判断语句可以绕过可能会导致 null 对象访问的代码 if (user is IGuildUser) { Console.WriteLine(\"This user is in a guild!\"); } else { // 检查不通过 } 结合声明的初始化赋值 这里，类型检查、类型声明、初始化赋值组合在一起，可以简化代码， 这样，在类型检查通过后，对象将会被立即转换并赋值到一个新的变量中。 IUser user; // 假设这里的 user 变量内事实上存储的是一个 IGuildUser 对象 // 那么在类型检查通过后，此处的代码可以直接将 user 转换为 IGuildUser // 并赋值到 guildUser 变量中 // 这样就不用再在后面的代码中再次进行类型转换了 if (user is IGuildUser guildUser) { Console.WriteLine(guildUser.JoinedAt); } else { // 检查不通过 } 结合逻辑模式 在之前的示例中，我们通过类型检查来避免程序在进行不正确的类型转换后抛出异常， 在此实例中，代码会在类型转换检查不通过时忽略后续代码来结束整个方法返回结果， 如类型转换成功，其所一并声明的变量也可以在后续的代码中被使用。 private void MyFunction(IMessage message) { // 这里的类型检查与逻辑模式中的 not 相结合 // 当 message 不为 IUserMessage 时，方法会直接返回 if (message is not IUserMessage userMessage) return; // 由于以上代码进行的类型检查是内联的 // 类型转换结果 userMessage 变量在判断语句外也可以访问 Console.WriteLine(userMessage.Author); } Note 在类型转换或类型检查时需使用 is 、 as 和 not 关键字。 == 、 != 和 = 适用于变量或实例化对象之间，而非它们与类型之间， 如要获取变量或实例化对象的类型，请使用 Object.GetType 方法或 typeof 运算符。"
  },
  "guides/entities/glossary.html": {
    "href": "guides/entities/glossary.html",
    "title": "实体词汇表与图表 | Kook.Net 文档",
    "keywords": "实体类型 所有 Kook.Net 实体的列表及其之间的继承关系，来表示哪些类型之间可以进行相互转换。 Note Socket 和 Rest 实体的所有接口都具有相同的继承树，其中，图中被标记为红色的实体是其所在工程所独有的。 频道 IChannel 消息频道 服务器文字频道 ( ITextChannel )：服务器内的消息频道 私聊频道 ( IDMChannel )：私信聊天会话频道 Kook.Net 中的私信聊天会话也被抽象为一个频道 私有频道 ( IPrivateChannel )：非服务器内的消息频道 由于 KOOK 暂不支持讨论组，所以目前私有频道也只有私聊频道 消息频道 ( IMessageChannel )：可以发送文字消息的频道 其它频道 服务器频道 ( IGuildChannel )：服务器内的频道 这可以是能出现在服务器内的任何一种频道类型 音频频道 ( IAudioChannel )：音频频道 语音频道 ( IVoiceChannel )：服务器内的语音频道 分组频道 ( ICategoryChannel )：服务器内的分组频道，可以包含多个子频道 嵌套频道 ( INestedChannel )：可以出现在分组频道下的频道 消息 IMessage 用户消息 ( IUserMessage )：用户所发送的消息 系统消息 ( ISystemMessage )：KOOK 系统用户发送的消息 消息 ( IMessage )：所有消息的基本类型接口 用户 IUser 用户状态 ( IPresence )：用户的状态信息 服务器用户 ( IGuildUser )：服务器内的用户 Bot 登录用户 ( ISelfUser )：当前客户端登录到 KOOK 的机器人用户 用户 ( IUser )：所有用户的基本类型接口 其它类型 表情符号 IEmote Emote ( Emote )：服务器内创建的自定义表情 Example: (emj)kaiheila-logo(emj)[1990044438283387/8BZCdG49cL069069] Emoji ( Emoji )：Unicode 表示的 Emoji 表情符号 Example: 👍 用户动态 IActivity 游戏 ( IGame )：代表用户的游戏活动"
  },
  "guides/entities/introduction.html": {
    "href": "guides/entities/introduction.html",
    "title": "实体简介 | Kook.Net 文档",
    "keywords": "Kook.Net 中的实体 Kook.Net 提供了一系列多用途的实体类，来表示来自 KOOK API 或网关的数据。 Tip 在使用 Get*** 系列方法来获取包含详细信息的实例实体时，需要为方法指定正确的 ID， 因此，建议您启用 KOOK 的开发者模式，以便于获取实体的 ID，开发者模式可在 “用户设置 - 高级设置 - 开发者模式” 处启用。 实体的变体与继承 由于同一对象可能会在 KOOK API 或网关不同的接口或事件中出现， 在不同的数据上下文中包含不同的字段，因此，Kook.Net 中的部分实体拥有多种变体， 例如： IUser 和 IGuildUser 分别表示通用的用户实体和服务器内的用户实体。 尽管部分实体包含的信息很简略，但所有的实体模型都有一个包含尽可能详细的信息的实体变体与之对应。 Socket 与 REST REST 实体通过 HTTP API 获取，其在被使用后会被销毁释放。每一个 REST 实体的获取都会引起一次 API 请求，短时间内发起大量 API 请求可能会触发速率限制， 因此，请尽可能少地通过 REST 获取实体。 有关 REST 的更多信息 Socket 实体中的大多数都是通过 KookSocketClient 的网关连接中的各种事件创建的， 仅当客户端初始化或事件包含的数据过于简略时，客户端才会进一步通过 API 获取的 REST 实体补全信息。 这些 Socket 实体都会进入到客户端的全局缓存中，以在业务逻辑中使用。 以 MessageReceived 事件为例，事件所传递的数据为 SocketMessage 实体， 实体内指示消息所来源的频道的属性为 SocketMessageChannel 实体。 所有的消息都来源于支持发送消息的频道类型， 因此，频道的这种实体变体可以覆盖全部需要发送消息的频道的情况。 但这并不是说消息不能来源于 SocketTextChannel （ SocketTextChannel 表示服务器内的文本频道）， 如果要从一个消息实体获取消息所在服务器的信息，则需要将其频道实体类型转换为 SocketTextChannel 。 Note 有关各种实体的继承关系及其定义，请参阅 实体词汇表 。 导航属性 多数 Socket 实体都有一个内部的导航属性，以便于实体向其父类或派生类的转换与访问。 访问 Socket 实体 实体最基本的形式形如 SocketGuild 、 SocketUser 、 SocketChannel 等， 这些实体可以从 KookSocketClient 的全局缓存中获取， 也可以在 KookSocketClient 上通过相应的 Get*** 方法获取。 在这些实体上进一步调用 Get*** 方法可以获得包含更多信息的实体变体，例如： SocketGuild.GetUser 可以获得 SocketGuildUser 实体， SocketGuild.GetChannel 可以获得 SocketGuildChannel 实体。 按业务逻辑的需要，将这些实体进行进一步的类型转换便可获得实体的其它变体。 示例 public string GetChannelTopic(ulong id) { var channel = _client.GetChannel(8708013346475345) as SocketTextChannel; return channel?.Topic; } public SocketGuildUser GetGuildOwner(SocketChannel channel) { var guild = (channel as SocketGuildChannel)?.Guild; return guild?.Owner; } 访问 REST 实体 REST 实体的工作方式几乎与 Socket 实体相同，只是在每一次获取时都会发起一次 API 请求，因此较少使用。 访问 REST 实体需要通过 KookRestClient 的 Rest 属性进行， 或是创建一个新的 KookRestClient 实例，可以独立于网关线程。 示例 // 在 GetUserAsync 的结果中，RestUser 实体包含了用户登录 KOOK 的连接方式， // 而在 RestGuild 上的 GetUsersAsync 结果中的 RestUser 不包含此信息。 // Socket 建立连接后，如果配置指示客户端始终下载全部用户信息， // 客户端则会通过 RestGuild.GetUsersAsync 所实际调用的 API 获取服务器用户信息， // 尽管如此，全局缓存中也不会包含可靠的用户连接方式的信息。 // 在这种少数情况下，则需要通过访问 GetUserAsync 返回的 RestUser 才能获取所需要的连接方式信息。 public static async Task<ClientType?> GetUserClientType(IUser user, KookRestClient restClient) { var restUser = await restClient.GetUserAsync(user.Id); return restUser.ActiveClient; }"
  },
  "guides/getting_started/first-bot.html": {
    "href": "guides/getting_started/first-bot.html",
    "title": "从零开始 | Kook.Net 文档",
    "keywords": "使用 Kook.Net 构建你的第一个 Bot 本指南将引导您使用 Kook.Net 构建一个简单的 Bot。在此之前，请先确保您已参与 KOOK 开发者，并获得开发权限。 创建一个 KOOK 应用 在开始编写代码前，您需要通过 KOOK 开发者中心创建一个 Bot。 访问并登录到 KOOK 开发者中心 ； 点击 新建应用 ； 填写应用名称； 点击刚刚创建好的应用； 点击左侧的 机器人 ； 确保机器人的连接模式为 WebSocket ； (可选) 如果要创建公共 Bot，开启 开启公共机器人 开关。 将 Bot 添加到服务器 Bot 无法通过访问服务器的邀请链接进入频道，因此需要 Bot 的邀请链接将 Bot 添加到服务器。 在 KOOK 开发者中心 中访问要添加到服务器的 Bot 应用； 点击左侧的 邀请链接 ； 在右侧的 角色权限设置 中勾选要在 Bot 进入服务器后直接拥有的权限； Note 这将会在服务器内创建一个仅可授予给该 Bot 的托管角色，该 Bot 将会在进入服务器后自动获得该角色。 如需在进入服务器后变更权限，可通过 服务器设置 中的 角色权限 进行修改。 打开上方生成的邀请链接； 选择要将 Bot 添加到的服务器； 点击邀请。 Note 列表中仅显示您拥有 管理服务器 权限的服务器。 将 Bot 连接至 KOOK 如果您已创建工程，并安装了 Kook.Net，可参考以下步骤， 否则，请参考 安装 Kook.Net 。 异步启动 Kook.Net 广泛采用 .NET 的 异步编程模型 ，绝大多数操作都是以异步方式完成， 请尽可能地在异步上下文中等待这些操作。 C# 9.0 引入了顶级语句，可以在不显式创建 Program 类和 Main 方法的情况下编写代码， 顶级语句中使用 await 来调用异步方法，会自动建立一个在异步上下文中启动的程序。 Warning 应用程序中异步上下文抛出的任何异常都会被持续向上层抛出直到首个同步方法， 抛出至顶级语句的 所有 未经处理的异常将导致程序退出。 Kook.Net 会捕获事件处理函数中发生的异常，以避免该异常导致程序退出， 但需要注意的是，如果异常发生在 async void 所标记的方法中， 尽管异常发生在异步上下文中，但该异常仍会导致程序退出。 因此，请合理使用 async Task 与 await 的组合。 创建日志方法 在创建并配置 KOOK Bot 客户端程序前，我们需要创建一个事件处理程序来订阅 Kook.Net 的日志事件。 为了尽可能地广泛支持各种日志提供程序，Kook.Net 通过 Log 事件来记录日志信息， 其事件参数为 LogMessage 。有关该事件地详细信息，可参考 API 文档 。 如需要使用自己的日志记录框架，请在此该事件行调用。此处，为了简单起见，我们仅将日志记录到控制台中。 // Log 事件，此处以直接输出到控制台为例 Task LogAsync(LogMessage log) { Console.WriteLine(log.ToString()); return Task.CompletedTask; } 创建 KOOK Bot 客户端程序 为了编写一个能与 KOOK 服务端实时互动的 Bot，请使用 KookSocketClient 作为客户端， 使用 Socket 实体，如您不了解 Kook.Net 的多种实现，请参考 术语 。 在异步入口点中创建一个 KookSocketClient 的实例，用于与 KOOK 服务端建立连接， 如有需要，也可向构造函数中传递一个 KookSocketConfig 的可选参数， 多数情况下，默认值即可。 在连接前，将刚刚创建的日志事件处理程序订阅到客户端的 Log 事件中。 Kook.Net 中的事件与 C# 中的任何其他事件的工作机制类似。 使用 LoginAsync 方法登录到 KOOK 服务端，登录过程采用的身份认证信息为机器人的 Token。 通过调用客户端的 StartAsync 方法，客户端启动与服务端的连接/重连机制， 该方法会在连接/重连机制启动后立刻返回 ，因此，任何依赖于客户端状态的方法 都应以事件处理程序的形式执行。 为了阻止程序在运行期间的异步入口点返回，请在 MainAsync 方法退出前等待一个无限时长的延迟， 获取其它可以阻止程序继续运行的方法，例如，等待控制台中输入信息。 Important Token 可允许您获得对 Bot 的所有访问权限，因此， 不要 与任何无关人员共享 Token！ 如您要公开 Bot 的源代码，请将该 Token 存储在外部源中。 在下面的示例中，我们从预定义的变量中获取变量，这是 极其不安全 的， 尤其是在有计划将应用程序以任何形式发布的情况下。 为了能够安全地处理该机密信息，建议以 环境变量 、 配置文件 、 机密管理 等形式存储 Token。 using KookSocketClient client = new(); client.Log += LogAsync; // 将 Token 写入字符串变量，用于 Bot 登录过程的身份认证 // 这很不安全，尤其是在有公开源代码的情况下，不应该这么做 string token = \"token\"; // 一些其它存储 Token 的方案，如环境变量、文件等 // string token = Environment.GetEnvironmentVariable(\"NameOfYourEnvironmentVariable\"); // string token = File.ReadAllText(\"token.txt\"); // string token = JsonConvert.DeserializeObject<AConfigurationClass>(File.ReadAllText(\"config.json\")).Token; await client.LoginAsync(TokenType.Bot, token); await client.StartAsync(); // 阻塞程序直到关闭 await Task.Delay(Timeout.Infinite); 到这里，客户端应该可以连接到 KOOK 服务端，运行程序，等待片刻，应该可以在 KOOK 客户端中看到 Bot 上线。"
  },
  "guides/getting_started/installing.html": {
    "href": "guides/getting_started/installing.html",
    "title": "安装 Kook.Net | Kook.Net 文档",
    "keywords": "安装 Kook.Net Kook.Net 通过 NuGet 分发，推荐通过 NuGet 包管理工具安装， 如有需要，也可从源代码进行编译。 支持的平台 Kook.Net 目前支持的目标框架包括 .NET 8.0 .NET 7.0 .NET 6.0 .NET Standard 2.1 .NET Standard 2.0 .NET Framework 4.6.2 通过 NuGet 包管理器安装 支持的 NuGet 源有： NuGet Gallery GitHub Packages 使用 Visual Studio 找到 解决方案资源管理器 窗口，在 Bot 项目下找到 依赖项 右键点击 依赖项 ，选择 管理 NuGet 程序包 在 浏览 选项卡中，搜索 Kook.Net Note 如要安装预览版 Kook.Net，请勾选 包括预发行版 ，否则，预览版搜索结果无法展示在列表中。 选择 Kook.Net ，点击 安装 使用 JetBrains Rider 找到 Explorer 窗口，在 Bot 项目下找到 Dependencies 右键点击 Dependencies ，选择 Manage NuGet Packages 在 Packages 选项卡中，搜索 Kook.Net Note 如要安装预览版 Kook.Net，请勾选 Prerelease ，否则，预览版搜索结果无法展示在列表中。 右键点击 Kook.Net ，点击 Install Kook.Net ... 使用 Visual Studio Code 找到 Bot 项目的 *.csproj 文件 添加 Kook.Net 到 *.csproj 中 <!-- Can not find reference samples/project.xml --> 使用 dotnet CLI 启动终端 导航至 Bot 项目中 *.csproj 文件的所在目录 执行 dotnet add package Kook.Net Note 如要安装预览版 Kook.Net，使用 dotnet CLI 添加 Kook.Net 时需附加 --prerelease 选项， 否则，dotnet CLI 将只尝试为项目添加稳定版本的 NuGet 包。 从源代码编译 要从源代码编译 Kook.Net，请参考： 使用 Visual Studio Visual Studio 2022 或更新版本。 .NET 8 SDK 安装 Visual Studio 期间需选择 .NET 8 工作负载。 使用 JetBrains Rider JetBrains 2021.3 或更新版本。 .NET 8 SDK 使用 Command Line .NET 8 SDK"
  },
  "guides/getting_started/terminology.html": {
    "href": "guides/getting_started/terminology.html",
    "title": "术语 | Kook.Net 文档",
    "keywords": "术语 实现指定实体类 Kook.Net 分为核心库与两个不同的实现： Kook.Net.Core 、 Kook.Net.Rest 和 Kook.Net.WebSocket 。作为 Bot 的开发者， 您只需要了解如何使用 Kook.Net.WebSocket ，但也需要了解它们之间的区别。 Kook.Net.Core 提供了一组抽象化 KOOK API 的接口，这些接口保证了 Kook.Net 中的所有实现都保持一致。如果您正在编写与实现无关的库，可仅依赖 核心库来确保您的库能够与 Kook.Net 一起在任何类型的实现中都能正常工作。 Kook.Net.Rest 提供了一组具体的类，用于实现 KOOK API 中的 HTTP 接口部分。 该实现中的实体以 Rest 为前缀，例如 RestChannel 。 Kook.Net.WebSocket 提供了一组具体的类，用于实现 KOOK API 中的 WebSocket 接口部分， 并支持实体的缓存。开发 Bot 时，您应使用此实现。该实现中的实体以 Socket 为前缀， 例如 SocketChannel 。"
  },
  "guides/introduction/intro.html": {
    "href": "guides/introduction/intro.html",
    "title": "Kook.Net 简介 | Kook.Net 文档",
    "keywords": "简介 要准备使用 Kook.Net？ 欢迎！在开始使用本类库前，请先确认您应了解如何开发 .NET 应用程序， 并对 C# 语言有一定的了解，包括 异步编程 、 多态 、 接口 等关键内容。 如果想与使用本类库的开发者交流、获取帮助、反馈问题，请访问我们的 KOOK Kook.Net 社区 。 Note 请注意，本文档中的代码片段仅为示例，请不要盲目地直接复制使用。 还不熟悉 .NET 与 C#？ 本类库的样例、代码片段、文档都是以 .NET 和 C# 开发的，如有需要，可参考以下文档： C# 编程指南 C# 文档 C# 语言参考 .NET API"
  },
  "guides/other_libs/efcore.html": {
    "href": "guides/other_libs/efcore.html",
    "title": "Entity Framework Core | Kook.Net 文档",
    "keywords": "对象关系映射框架 Entity Framework Core 本向导可以指引您配置并基于 SQL Server 数据库使用 Entity Framework Core，本文末尾罗列了其它数据库的信息。 先决条件 配置好依赖注入服务的 Bot 客户端程序 SQL Server 数据库实例 EF Core CLI 工具 安装所需类库 可通过集成开发环境的用户界面或 dotnet CLI 安装以下类库： 名称 链接 Microsoft.EntityFrameworkCore 链接 Microsoft.EntityFrameworkCore.SqlServer 链接 配置 DbContext EF Core 中的 DbContext 是一个抽象类，它提供了一系列方法来操作数据库。数据库上下文及其包装的实体示例如下： // ApplicationDbContext.cs using Microsoft.EntityFrameworkCore; public class ApplicationDbContext : DbContext { public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { } public DbSet<UserEntity> Users { get; set; } } // UserEntity.cs public class UserEntity { public ulong Id { get; set; } public string Name { get; set; } } Note 有关创建用于 EF Core 的实体模型，请参阅 EF Core 文档 。 将数据库上下文添加到依赖注入服务容器中 要将此数据库上下文添加到依赖注入服务容器中，只需调用 EF Core 中所提供的扩展方法，示例如下： private static ServiceProvider ConfigureServices() { return new ServiceCollection() .AddDbContext<ApplicationDbContext>( optionsBuilder => optionsBuilder.UseSqlServer(\"数据库连接字符串\") ) // ... .BuildServiceProvider(); } Note 有关如何书写数据库连接字符串，可参考 EF Core 文档 。 迁移 在使用数据库上下文前，需要将代码中的更改迁移到实际的数据库中。有关迁移的更多信息，请参阅 EF Core 文档 。 使用数据库上下文 要使用数据库上下文，请通过依赖注入服务将其注入到要使用的类中，示例如下： using Kook.Commands; public class DatabaseModule : ModuleBase<SocketCommandContext> { private readonly ApplicationDbContext _dbContext; public SampleModule(ApplicationDbContext dbContext) { _dbContext = dbContext; } [Command(\"sample\")] public async Task Sample() { // 在命令的业务逻辑中使用所注入的数据库上下文 var user = _dbContext.Users.SingleOrDefault(x => x.Id == Context.User.Id); // ... } } 使用其它数据库提供程序 此处有一些 EF Core 可用的主流的数据库提供程序，及其相关的文档，通常来说，与上文示例代码中不同的仅有 DbContextOptions / DbContextOptionsBuilder 中进行配置的部分。 名称 链接 MySQL 链接 SQLite 链接 PostgreSQL 链接"
  },
  "guides/other_libs/mediatr.html": {
    "href": "guides/other_libs/mediatr.html",
    "title": "MediatR | Kook.Net 文档",
    "keywords": "中介者模式 MediatR 先决条件 配置好依赖注入服务的 Bot 客户端程序 安装所需类库 可通过集成开发环境的用户界面或 dotnet CLI 安装以下类库： 名称 链接 MediatR 链接 MediatR.Extensions.Microsoft.DependencyInjection 链接 将 MediatR 添加到依赖注入服务容器中 MediatR.Extensions.Microsoft.DependencyInjection 提供了方法 .AddMediatR() 允许您以将 MediatR 便捷地添加到依赖注入服务容器中，其参数可以是事件处理程序中将会用到地任何类型，代码示例片段如下： .AddMediatR(typeof(Bot)) 创建消息通知 MediatR 基于消息通知和其处理程序传递事件。下面的示例创建了一个消息通知来处理 KookSocketClient 中的 MessageReceived 事件。 // MessageReceivedNotification.cs using Kook.WebSocket; using MediatR; namespace MediatRSample.Notifications; public class MessageReceivedNotification : INotification { public MessageReceivedNotification(SocketMessage message) { Message = message ?? throw new ArgumentNullException(nameof(message)); } public SocketMessage Message { get; } } 创建事件发布者与订阅者 在 MediatR 中，事件发布者所发布的事件需要通过订阅者的监听来使用，下面的示例创建了一个事件订阅者来监听 KookSocketClient 中的 MessageReceived 事件： // KookEventListener.cs using Kook.WebSocket; using MediatR; using MediatRSample.Notifications; using Microsoft.Extensions.DependencyInjection; using System.Threading; using System.Threading.Tasks; namespace MediatRSample; public class KookEventListener { private readonly CancellationToken _cancellationToken; private readonly KookSocketClient _client; private readonly IServiceScopeFactory _serviceScope; public KookEventListener(KookSocketClient client, IServiceScopeFactory serviceScope) { _client = client; _serviceScope = serviceScope; _cancellationToken = new CancellationTokenSource().Token; } private IMediator Mediator { get { var scope = _serviceScope.CreateScope(); return scope.ServiceProvider.GetRequiredService<IMediator>(); } } public async Task StartAsync() { _client.MessageReceived += OnMessageReceivedAsync; await Task.CompletedTask; } private Task OnMessageReceivedAsync(SocketMessage arg) { return Mediator.Publish(new MessageReceivedNotification(arg), _cancellationToken); } } 此示例代码中， KookEventListener 首先从依赖注入服务中接收 KookSocketClient 实例用于订阅事件，本示例仅演示了 MessageReceived ，其他事件也可以使用同样的方式， 但事件处理程序使用了 MediatR 将事件发布到所有监听此事件的的消息通知处理程序。 添加事件订阅者添加到依赖注入服务容器中 要开始监听事件，需在入口点函数内调用 KookEventListener 类的 StartAsync() 方法，在此之前，需在依赖注入容器中注册 KookEventListener 类，并在入口点函数中获取对它的引用。 // Program.cs var listener = services.GetRequiredService<KookEventListener>(); await listener.StartAsync(); 创建消息通知处理程序 MediatR 将消息通知发布到所有监听此消息通知的事件订阅者，下面的示例创建了一个消息通知处理程序： // MessageReceivedHandler.cs using System; using MediatR; using MediatRSample.Notifications; namespace MediatRSample; public class MessageReceivedHandler : INotificationHandler<MessageReceivedNotification> { public async Task Handle(MessageReceivedNotification notification, CancellationToken cancellationToken) { Console.WriteLine($\"MediatR works! (Received a message by {notification.Message.Author.Username})\"); // ... } } 此示例代码实现了 MediatR 提供的 INotificationHandler<> 接口，这告知了 MediatR 需要将 MessageReceivedNotification 通知发送到此消息通知处理程序类。 Note 您可根据需要为同一消息通知创建任意数量的消息通知处理程序。 测试 要测试 MediatR 是否正常工作，可以启动此 Bot 客户端，并在 KOOK 客户端中向此 Bot 可访问的文字频道内发送消息，应该能看到之前在 MessageReceivedHandler 中定义的输出信息： 添加更多的事件类型 要添加更多的事件类型，可遵循以下步骤： 为事件创建消息通知类，其应包含该事件所传递的所有参数（例如： MessageReceived 事件接收一个 SocketMessage 对象作为参数，则消息通知类也应该映射此参数） 将此事件注册到 KookEventListener 类 创建消息通知处理程序来处理此消息通知"
  },
  "guides/other_libs/serilog.html": {
    "href": "guides/other_libs/serilog.html",
    "title": "Serilog | Kook.Net 文档",
    "keywords": "日志框架 Serilog 先决条件 如 使用 Kook.Net 构建你的第一个 Bot 中所描述的带有日志处理方法的 Bot 客户端程序。 安装 Serilog 类库 可通过集成开发环境的用户界面或 dotnet CLI 安装以下类库： 名称 链接 Serilog.Extensions.Logging 链接 Serilog.Sinks.Console 链接 配置 Serilog Serilog 需在异步函数入口点的顶部进行配置： using Kook; using Serilog; using Serilog.Events; public class Program { private KookSocketClient _client; public static Task Main(string[] args) => new Program().MainAsync(); public async Task MainAsync() { Log.Logger = new LoggerConfiguration() .MinimumLevel.Verbose() .Enrich.FromLogContext() .WriteTo.Console() .CreateLogger(); _client = new KookSocketClient(); _client.Log += LogAsync; // 将 Token 写入字符串变量，用于 Bot 登录过程的身份认证 // 这很不安全，尤其是在有公开源代码的情况下，不应该这么做 var token = \"token\"; // 一些其它存储 Token 的方案，如环境变量、文件等 // var token = Environment.GetEnvironmentVariable(\"NameOfYourEnvironmentVariable\"); // var token = File.ReadAllText(\"token.txt\"); // var token = JsonConvert.DeserializeObject<AConfigurationClass>(File.ReadAllText(\"config.json\")).Token; await _client.LoginAsync(TokenType.Bot, token); await _client.StartAsync(); // Block this task until the program is closed. await Task.Delay(Timeout.Infinite); } } 修改日志方法 要想让 Serilog 能够正确地记录 KOOK 的日志，需要将 Kook.Net 的 LogSeverity 映射到 Serilog 的 LogEventLevel ，映射的示例如下： private static async Task LogAsync(LogMessage message) { var severity = message.Severity switch { LogSeverity.Critical => LogEventLevel.Fatal, LogSeverity.Error => LogEventLevel.Error, LogSeverity.Warning => LogEventLevel.Warning, LogSeverity.Info => LogEventLevel.Information, // Serilog 中，LogEventLevel.Verbose 相比 LogEventLevel.Debug 会输出更多的信息 LogSeverity.Verbose => LogEventLevel.Debug, LogSeverity.Debug => LogEventLevel.Verbose, _ => LogEventLevel.Information }; Log.Write(severity, message.Exception, \"[{Source}] {Message}\", message.Source, message.Message); await Task.CompletedTask; } 测试 如果现在运行程序，应该会看到以下输出： 在其它位置使用此日志记录器 至此，Serilog 已配置完毕，要想使用此日志记录器，只需按如下方式调用： Log.Debug(\"Your log message, with {Variables}!\", 10); // 这将输出信息：\"[20:36:00 DBG] Your log message, with 10!\" Note 根据所配置的日志级别，部分日志消息可能不会输出。有关日志级别的更多信息，请参见 Serilog 文档 。 Note Kook.Net 与 Serilog 对日志级别的定义不完全一致，要简化最低输出日志级别控制，有两种可选策略： 将 Serilog 的 MinimumLevel 配置为 Verbose ，转而在 Kook.Net 的 KookConfig 中配置 LogLevel 在 Kook.Net 的 KookConfig 中配置 LogLevel 为 Debug ，转而在 Serilog 中配置 MinimumLevel 同时配置两侧的最低日志级别可能会导致预期之外的最低日志级别控制结果。"
  },
  "guides/text_commands/intro.html": {
    "href": "guides/text_commands/intro.html",
    "title": "文本命令框架入门 | Kook.Net 文档",
    "keywords": "文本命令框架 Kook.Commands 命名空间提供了一组基于特性标签的文本命令服务。 入门 要使用文本命令框架，需要先创建 CommandService 及命令处理程序。 下面的代码演示了如何创建命令服务和命令处理程序的最小程序，可在此基础上扩展功能模块。 Note CommandService 可接收一个 CommandServiceConfig 类型的可选参数用于命令服务的配置， 如果不提供此参数，则使用默认配置。建议在使用配置时，通过 IDE 的自动提示与代码注释 浏览并了解各项属性与默认参数值，并在需要时修改。 public class CommandHandler { private readonly KookSocketClient _client; private readonly CommandService _commands; // 从构造函数中获取 KookSocketClient 与 CommandService 的示例 public CommandHandler(KookSocketClient client, CommandService commands) { _commands = commands; _client = client; } public async Task InstallCommandsAsync() { // 将命令服务处理程序订阅至 MessageReceived 事件 _client.MessageReceived += HandleCommandAsync; // 通过反射查找所有命令模块并加载至命令服务 // 如不使用依赖注入，services 参数传 null // 如有需要可参考依赖注入指南 await _commands.AddModulesAsync(assembly: Assembly.GetEntryAssembly(), services: null); } private async Task HandleCommandAsync(SocketMessage messageParam) { // 过滤系统信息 var message = messageParam as SocketUserMessage; if (message == null) return; // 追踪消息前缀结束即文本命令开始的位置 int argPos = 0; // 过滤来自 Bot 的消息，过滤前缀不合命令触发规则的消息 if (!(message.HasCharPrefix('!', ref argPos) || message.HasMentionPrefix(_client.CurrentUser, ref argPos)) || message.Author.IsBot) return; // 基于此消息创建命令上下文 var context = new SocketCommandContext(_client, message); // 执行命令 await _commands.ExecuteAsync( context: context, argPos: argPos, services: null); } } 使用特性 文本命令框架支持通过特性标签来预先定义命令，也可以在运行时通过命令构建类来定义命令。 绝大多数情况下，Bot 的命令服务的确定的，因此推荐使用特性标签来定义命令。 模块 命令的功能由模块定义，在不同的类中可以分别定义不同的命令功能，在启动时可以一并加载。 要使模块能够被自动发现，模块需要满足： 公开 继承自 ModuleBase 则模块类的声明形如： using Kook.Commands; // 模块类 **必须** 为公开类，且继承自 ModuleBase // 否则，AddModulesAsync 将无法发现此模块 public class InfoModule : ModuleBase<SocketCommandContext> { } Note ModuleBase 是一个抽象类，可根据需要进行派生或重写。 模块可以继承自 ModuleBase 的任何派生类。 添加/创建命令 Warning 尽量避免模型内代码运行耗时过长，这可能会导致网关线程的阻塞，进而中断 Bot 与 KOOK 服务端的连接。 创建命令的处理程序，方法的返回类型必须是 Task 或 Task<RuntimeResult> ，按需标记 async 关键字。 对该方法标记 [CommandAttribute] 特性标签，并指定命令的名称。 如该方法是 模块组 中的命令，名称可以留空。 命令参数 命令处理函数的参数即为命令的参数，例如： 整型作为参数： int num 用户作为参数： IUser user 命令参数几乎可以是任何类型的，默认支持读取的类型列表参见 类型解析 。 可选参数 默认地，命令参数为必选参数，要设置为可选参数，需为其指定默认值，例如： int num = 0 。 参数中的空格 如要接收一个以空格分隔的列表，可指定可变参数关键字 params ，例如： params int[] 。 如果实参包含空格，在调用命令时，该实参应以双引号进行包装， 例如：对于参数 string food ，可通过 !favoritefood \"Key Lime Pie\" 的形式进行调用。 如果某个参数可以包含空格地持续读取到命令末尾，可以为该参数标记 RemainderAttribute ， 用户在调用时便不必将实参包装在双引号中。 命令重载 命令处理函数支持重载，命令解析过程将自动地选择类型匹配的方法。 如果两个命令处理函数间在调用时会存在不明确的引用， 可为应优先尝试进行类型匹配的重载标记 PriorityAttribute 。 命令上下文 每个命令都可以通过 ModuleBase 上的 [Context] 属性访问执行上下文。 ICommandContext 支持访问消息、频道、服务器、用户、以及调用命令的底层 KOOK 客户端。 使用 ModuleBase 的派生类可以指定不同类型的上下文。 例如，[SocketCommandContext] 中的上下文中的属性为是 Socket 实体，不再需要进行强制类型转换。 回复消息也可通过调用以 Reply 为前缀的方法完成，无需调用上下文中频道内发送消息的方法来回复命令。 Warning 上下文的类型不应该混合使用，使用 CommandContext 上下文的模块与使用 SocketCommandContext 的模块不可同时使用。 Tip 模块的完整代码示例： // 无前缀的模块 public class InfoModule : ModuleBase<SocketCommandContext> { // !say hello world -> hello world [Command(\"say\")] [Summary(\"回显消息\")] public Task SayAsync([Remainder] [Summary(\"要回显的消息\")] string echo) => ReplyTextAsync(echo); // ReplyTextAsync 为 ModuleBase 上的方法 } // 创建前缀为 'sample' 的模块 [Group(\"sample\")] public class SampleModule : ModuleBase<SocketCommandContext> { // !sample square 20 -> 400 [Command(\"square\")] [Summary(\"计算给定数字的平方\")] public async Task SquareAsync( [Summary(\"要计算的数字\")]) int num) { // 也可通过命令上下文访问频道属性 await Context.Channel.SendTextAsync($\"{num}^2 = {Math.Pow(num, 2)}\"); } // !sample userinfo --> 戈小荷#0439 // !sample userinfo @戈小荷 --> 戈小荷#0439 // !sample userinfo 戈小荷#0439 --> 戈小荷#0439 // !sample userinfo 戈小荷 --> 戈小荷#0439 // !sample userinfo 2810246202 --> 戈小荷#0439 // !sample whois 2810246202 --> 戈小荷#0439 [Command(\"userinfo\")] [Summary(\"打印当前用户的信息，或用户参数指定的用户信息\")] [Alias(\"user\", \"whois\")] public async Task UserInfoAsync( [Summary(\"要获取信息的用户\")] SocketUser user = null) { var userInfo = user ?? Context.Client.CurrentUser; await ReplyTextAsync($\"{userInfo.Username}#{userInfo.IdentifyNumber}\"); } } 自动加载模块 命令服务可以自动发现并加载程序集内继承自 ModuleBase 的类，调用 CommandService.AddModulesAsync 可以进行自动发现与模块加载。如果要指定某个模块跳过自动加载，可对其标记特性 DontAutoLoadAttribute 。 手动加载模块 要手动加载模块，可调用 CommandService.AddModuleAsync ，模块的类通过泛型传递。 如有需要，也可以向该方法传入 IServiceProvider. 模块构造函数 模块通过 依赖注入 进行构造， 构造函数内的任何参数都应先注入服务容器中。 Tip 模块构造函数也可以将 IServiceProvider 作为参数，并从中手动抽取所需服务，但并不推荐。 模块属性 具有公共 set 访问器属性的模块在模块构造后会被依赖服务注入，详细信息可参考 @Guides.TextCommands.DI 。 模块组 模块组为一组具有相同名称前缀的命令，要声明模块组，可标记特性 GroupAttribute 。 在模块组内，如果命令的 CommandAttribute 特性标签中不传入名称参数，则为创建以该组名称作为命令名称的命令。 子模块 子模块是模块内的模块，可用于创建嵌套组。 [Group(\"admin\")] public class AdminModule : ModuleBase<SocketCommandContext> { [Group(\"ban\")] public class CleanModule : ModuleBase<SocketCommandContext> { // !admin ban @戈小荷 [Command] public Task BanAsync(IGuildUser user) => Context.Guild.AddBanAsync(user); // !admin ban clean @戈小荷 7 [Command(\"clean\")] public Task BanAsync(IGuildUser user, int pruneDays) => Context.Guild.AddBanAsync(user, pruneDays); // !admin ban list [Command(\"list\")] public async Task ListBansAsync() { var bans = await Context.Guild.GetBansAsync(); var banInfo = bans.Select(ban => $\"> {ban.User.Username}#{ban.User.IdentifyNumber} \" + $\"({ban.CreatedAt:yyyy'/'M'/'d HH':'mm}, {ban.Reason})\") .Aggregate((a, b) => $\"{a}\\n{b}\"); await ReplyTextAsync($\"{bans.Count} 条封禁：\\n{banInfo}\"); } } // !admin kick @戈小荷 [Command(\"kick\")] public Task KickAsync(IGuildUser user) => user.KickAsync(); }"
  },
  "guides/text_commands/namedarguments.html": {
    "href": "guides/text_commands/namedarguments.html",
    "title": "命名参数 | Kook.Net 文档",
    "keywords": "命名参数 默认情况下，命令中的参数是按照顺序逐个解析的，位置决定了参数的对应。 如果定义了多个可选参数，对于用户来说，只设置想要传入的可选参数而不全部一一写出会更加方便。 设置参数名称 要想用户能够通过指定参数名称来设置对应的参数，您需要创建一个可选参数容器类， 其中需包含了命令会用到的所有可选参数，并为其添加 NamedArgumentTypeAttribute 特性标签。 示例 [NamedArgumentType] public class NamableArguments { public string First { get; set; } public string Second { get; set; } public string Third { get; set; } public string Fourth { get; set; } } 用法 要使用这些可选参数的命令可以通过如下的方式定义： [Command(\"act\")] public async Task Act(int requiredArg, NamableArguments namedArgs) 该命令则可以按如下方式调用： .act 42 first: Hello fourth: \"A string with spaces must be wrapped in quotes\" second: World 可选参数容器类的类型解析是自动注册的，无需对该容器类创建并注册自定义类型解析。 Important 一个命令 只能 有用一个被 NamedArgumentTypeAttribute 特性标注的可选参数容器类，且 必须 位于参数列表的末位。 被该特性标注的类会在解析参数是自动应用 RemainderAttribute 特性的效果。 复杂类型 可选参数容器类中的每个属性在进行匹配时，所有注册到文本命令服务内的类型解析都会如以往正常匹配。 如果要将多个相同类型的值读入单个属性中，则可以将属性声明为形如 IEnumerable<T> 的类型。 例如：如果可选参数容器类中包含了一个这样的属性： public IEnumerable<int> Numbers { get; set; } 那么该命令可以以如下的方式调用： .cmd numbers: \"1, 2, 4, 8, 16, 32\" 补充说明 可选参数容器类中的属性也可以使用 OverrideTypeReader 。"
  },
  "guides/text_commands/post-execution.html": {
    "href": "guides/text_commands/post-execution.html",
    "title": "后处理程序 | Kook.Net 文档",
    "keywords": "文本命令执行的后处理程序 在开发命令时，您可能想要在执行命令后执行一些操作，Kook.Net 提供了一些命令执行后处理工作流来实现这个目的。 文本命令框架入门 中展示了下面的示例来执行并处理命令及其内的数据： public class CommandHandler { private readonly KookSocketClient _client; private readonly CommandService _commands; // 从构造函数中获取 KookSocketClient 与 CommandService 的示例 public CommandHandler(KookSocketClient client, CommandService commands) { _commands = commands; _client = client; } public async Task InstallCommandsAsync() { // 将命令服务处理程序订阅至 MessageReceived 事件 _client.MessageReceived += HandleCommandAsync; // 通过反射查找所有命令模块并加载至命令服务 // 如不使用依赖注入，services 参数传 null // 如有需要可参考依赖注入指南 await _commands.AddModulesAsync(assembly: Assembly.GetEntryAssembly(), services: null); } private async Task HandleCommandAsync(SocketMessage messageParam) { // 过滤系统信息 var message = messageParam as SocketUserMessage; if (message == null) return; // 追踪消息前缀结束即文本命令开始的位置 int argPos = 0; // 过滤来自 Bot 的消息，过滤前缀不合命令触发规则的消息 if (!(message.HasCharPrefix('!', ref argPos) || message.HasMentionPrefix(_client.CurrentUser, ref argPos)) || message.Author.IsBot) return; // 基于此消息创建命令上下文 var context = new SocketCommandContext(_client, message); // 执行命令 await _commands.ExecuteAsync( context: context, argPos: argPos, services: null); } } 示例中， ExecuteAsync 方法的运行结果会返回一个 Task<IResult> 对象，要将结果打印到聊天中，可以采用以下的代码示例： // 此部分代码处理命令直接结果的方式不受推荐 // 请不要盲目赋值本示例的代码 IResult result = await _commands.ExecuteAsync(context, argPos, _services); if (result.Error != null) switch (result.Error) { case CommandError.BadArgCount: await context.Channel.SendTextAsync( \"Parameter count does not match any command's.\"); break; default: await context.Channel.SendTextAsync( $\"An error has occurred {result.ErrorReason}\"); break; } 然而，这种处理方式中，命令执行后处理程序被嵌入到了基本的命令执行逻辑中， 这样会导致命令执行逻辑部分的代码更混乱，且可能违反了单一职责原则（SRP），不受推荐。 另一个主要的问题是，如果命令的处理程序被 RunMode.Async 标记为异步模式运行， ExecuteAsync 将 总是 返回包含执行成功信息的 ExecuteResult ，而非真正的执行结果。 CommandExecuted 事件 当命令执行完成时，无论其结果如何，都会触发 CommandExecuted 事件。 该事件可以简化前面示例中混乱的结构，且可以避免 RunMode.Async 模式的问题。 采用事件模式的代码示例如下： public async Task SetupAsync() { await _commands.AddModulesAsync(Assembly.GetEntryAssembly(), _services); // 订阅命令执行后处理程序 _commands.CommandExecuted += OnCommandExecutedAsync; // 订阅命令执行处理程序 _client.MessageReceived += HandleCommandAsync; } public async Task OnCommandExecutedAsync(Optional<CommandInfo> command, ICommandContext context, IResult result) { // CommandExecuted 提供三个参数：所执行的命令、命令执行上下文、命令执行结果 // 可以告知命令调用者异常信息 if (!string.IsNullOrEmpty(result?.ErrorReason)) { await context.Channel.SendTextAsync(result.ErrorReason); } // 或者可以将结果记入日志系统 var commandName = command.IsSpecified ? command.Value.Name : \"A command\"; await _log.LogAsync(new LogMessage(LogSeverity.Info, \"CommandExecution\", $\"{commandName} was executed at {DateTime.UtcNow}.\")); } public async Task HandleCommandAsync(SocketMessage msg) { var message = msg as SocketUserMessage; if (message == null) return; int argPos = 0; if (!(message.HasCharPrefix('!', ref argPos) || message.HasMentionPrefix(_client.CurrentUser, ref argPos)) || (message.Author.IsBot ?? false)) return; var context = new SocketCommandContext(_client, message); await _commands.ExecuteAsync(context, argPos, _services); } RuntimeResult 命令执行完成后可以返回 RuntimeResult 对象， RuntimeResult 是一个结果类，可以用来表示命令执行结果的逻辑。 由于 ExecuteAsync 中异步执行的命令始终无法返回错误信息， RuntimeResult 往往不应与 ExecuteResult 共同使用，而应在 CommandExecuted 事件处理程序中使用。 在实践中，您可以基于 RuntimeResult 派生自定义的结果类，以记录更多的结果信息及逻辑。 下面的示例创建了一个 RuntimeResult 的最小派生类： public class MyCustomResult : RuntimeResult { public MyCustomResult(CommandError? error, string reason) : base(error, reason) { } } 派生类中的信息及逻辑没有什么特殊的限制，您可以添加有关执行结果的任何其他信息。 例如，可能根据命令的执行结果添加更多的方法、字段或属性， 或是一些静态方法来更容易地创建该结果类。 public class MyCustomResult : RuntimeResult { public string Hint { get; set; } public MyCustomResult(CommandError? error, string reason, string hint) : base(error, reason) { Hint = hint; } public static MyCustomResult FromError(string reason, string hint = null) => new MyCustomResult(CommandError.Unsuccessful, reason, hint); public static MyCustomResult FromSuccess(string reason = null) => new MyCustomResult(null, reason); } 要想在命令执行后返回该结果类，请将方法前面的返回类型更改为 Task<RuntimeResult> 。 Note 方法签名中的返回类型必须是 Task<RuntimeResult> 而不应是 Task<MyCustomResult> ，后者无法被自动模块加载发现并加载。 下面的示例展示了如何使用该自定义结果类： public class MyModule : ModuleBase<SocketCommandContext> { [Command(\"eat\")] public async Task<RuntimeResult> ChooseAsync(string food) { if (food == \"salad\") return MyCustomResult.FromError(\"No, I don't want that!\", \"Give me something others!\"); return MyCustomResult.FromSuccess($\"Give me the {food}!\"). } } 进而可以在 CommandExecuted 的事件处理程序中使用该结果类： public async Task OnCommandExecutedAsync(Optional<CommandInfo> command, ICommandContext context, IResult result) { switch(result) { case MyCustomResult customResult: // 提取自定义结果类中的信息进行进一步的处理 break; default: if (!string.IsNullOrEmpty(result.ErrorReason)) await context.Channel.SendMessageAsync(result.ErrorReason); break; } } CommandService.Log 事件 CommandService.Log 事件可以记录命令执行过程中发生的异常信息, 而这些信息由于业务逻辑抛出异常而中断执行，无法被传递到正常的命令执行后处理程序中。 所有命令执行过程中发生的异常信息都会被捕获并传入 CommandException 类内的 LogMessage.Exception 属性中， CommandException 类记录了抛出的异常及命令执行的上下文。 public async Task LogAsync(LogMessage logMessage) { if (logMessage.Exception is CommandException cmdException) { // 可以告知命令调用者所发生的异常 await cmdException.Context.Channel.SendMessageAsync(\"Something went catastrophically wrong!\"); // 也可以将此异常记入日志系统 Console.WriteLine($\"{cmdException.Context.User} failed to execute '{cmdException.Command.Name}' in {cmdException.Context.Channel}.\"); Console.WriteLine(cmdException.ToString()); } }"
  },
  "guides/text_commands/preconditions.html": {
    "href": "guides/text_commands/preconditions.html",
    "title": "先决条件 | Kook.Net 文档",
    "keywords": "先决条件 先决条件可以被用作为命令服务中的权限系统，但其能力也不仅限于权限， 您也可以通过创建自定义先决条件实现更复杂的先决条件逻辑。 有两种可供使用的先决条件： PreconditionAttribute 可以被应用于模块、组、命令上 ParameterPreconditionAttribute 可以被应用于参数上 有关这两种先决条件的详细信息，请参阅各自的 API 文档。 内置的先决条件 Kook.Commands 提供了几个内置的先决条件。 RequireContextAttribute RequireUserAttribute RequireRoleAttribute RequireBotPermissionAttribute RequireUserPermissionAttribute 用法 要使用先决条件，只需将先决条件特性标记于命令的方法签名上。 示例 [RequireBotPermission(ChannelPermission.SendMessages)] [Command(\"echo\")] public Task EchoAsync(string input) => ReplyTextAsync(input); 先决条件的析取 命令的先决条件可以存在多个，如果想要其中的部分先决条件满足任一即可被是作为先决条件校验通过， 则需要为先决条件进行分组来表示先决条件的析取。 PreconditionAttribute 提供了一个可选的 Group 属性，如果为两个或多个先决条件制定了相同的 Group 属性，则命令系统在进行先决条件检查时，这些条件中的任何一个满足时，分组内的其他先决条件都将被忽略。 示例 // 该示例展示了先决条件的析取的声明方式 // 将 RequireUserPermission 与 RequireUser 中的 Group 属性都设置为 \"Permission\" // 则该命令调用者在当前服务器内拥有管理员权限或其用户 ID 为 2810246202 时都可以通过先决条件检查 [RequireUserPermission(GuildPermission.Administrator, Group = \"Permission\")] [RequireUser(2810246202, Group = \"Permission\")] public class AdminModule : ModuleBase<SocketCommandContext> { [Command(\"ban\")] public Task BanAsync(IUser user) => Context.Guild.AddBanAsync(user); } 自定义先决条件 要创建自定义先决条件，请根据用途创建一个继承自 PreconditionAttribute 或 ParameterPreconditionAttribute 的类。 要实现函数上的先决条件，请重写 CheckPermissionsAsync 方法。 如果命令调用上下文满足条件，则返回 PreconditionResult.FromSuccess 创建的对象，否则，请返回 PreconditionResult.FromError 创建的对象，如有需要，请在返回的对象中添加错误消息。 Note Visual Studio、JetBrains Rider 等集成开发环境中的 IntelliSense 智能提示可以帮助您添加抽象类的实现中缺失的成员。 示例 using System; using System.Linq; using System.Threading.Tasks; using Kook.Commands; using Kook.WebSocket; // 继承自 PreconditionAttribute public class RequireTimeAttribute : PreconditionAttribute { // 创建字段存储指定的时间范围 private readonly TimeOnly _from; private readonly TimeOnly _to; // 创建构造函数，用来在使用时接收时间范围作为参数 public RequireTimeAttribute(TimeOnly from, TimeOnly to) { _from = from; _to = to; } // 重写 CheckPermissions 方法 public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) { // 检查当前时间是否在指定的时间范围内 if ((_from < _to && TimeOnly.FromDateTime(DateTime.Now) >= _from && TimeOnly.FromDateTime(DateTime.Now) <= _to) || (_from > _to && (TimeOnly.FromDateTime(DateTime.Now) >= _from || TimeOnly.FromDateTime(DateTime.Now) <= _to))) // 如果在指定时间范围内，则返回成功 // 由于方法内没有异步代码，要返回的结果需要包装在 `Task.FromResult` 中来避免编译错误 return Task.FromResult(PreconditionResult.FromSuccess()); // 如果不在指定时间范围内，则返回失败及错误信息 return Task.FromResult(PreconditionResult.FromError($\"You can only run this command between {_from} and {_to}\")); } }"
  },
  "guides/text_commands/typereaders.html": {
    "href": "guides/text_commands/typereaders.html",
    "title": "类型解析 | Kook.Net 文档",
    "keywords": "类型解析 通过类型解析，命令中传入的各种参数可以被自动转换为各种类型。 默认支持的类型解析包括： bool char sbyte / byte ushort / short uint / int ulong / long float , double , decimal string enum DateTime / DateTimeOffset / TimeSpan 任何可空的值类型 (例如： int? , bool? ) 任何 IChannel / IMessage / IUser / IRole 的实现类 自定义类型解析 要自定义类型解析，可以创建一个类，引入 Kook 和 Kook.Commands 命名空间，继承 @Kook.Commands.TypeReader，并重写 ReadAsync 方法， 该方法内为将输入的字符串解析为指定类型的逻辑。 如果类型解析成功，请将解析结果传入 TypeReaderResult.FromSuccess 返回； 如果类型解析失败，请将错误信息传入 TypeReaderResult.FromError 返回。 Note Visual Studio、JetBrains Rider 等集成开发环境中的 IntelliSense 智能提示可以帮助您添加抽象类的实现中缺失的成员。 示例 // 本类库已对多数基本类型的类型解析进行了实现 // 本示例仅用来展示如何创建一个简单的自定义类型解析 using Kook; using Kook.Commands; public class BooleanTypeReader : TypeReader { public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) { bool result; if (bool.TryParse(input, out result)) return Task.FromResult(TypeReaderResult.FromSuccess(result)); return Task.FromResult(TypeReaderResult.FromError(CommandError.ParseFailed, \"Input could not be parsed as a boolean.\")); } } 注册自定义类型解析 自定义类型解析无法被文本命令服务自动发现，需要显式注册。 要添加自定义类型解析，请调用 CommandService.AddTypeReader 方法。 Important 自定义类型解析注册需要在模块发现前进行，否则自定义类型接解析无法正常工作。 示例 public class CommandHandler { private readonly CommandService _commands; private readonly KookSocketClient _client; private readonly IServiceProvider _services; public CommandHandler(CommandService commands, KookSocketClient client, IServiceProvider services) { _commands = commands; _client = client; _services = services; } public async Task SetupAsync() { _client.MessageReceived += CommandHandleAsync; // 添加 BooleanTypeReader 来解析 `bool` 类型的参数 _commands.AddTypeReader(typeof(bool), new BooleanTypeReader()); // 注册模块 await _commands.AddModulesAsync(Assembly.GetEntryAssembly(), _services); } public async Task CommandHandleAsync(SocketMessage msg) { // ... } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "首页 | Kook.Net 文档",
    "keywords": "Kook.Net 文档 本文档是 Kook.Net 的官方文档，包含了 Kook.Net 的使用指南、API 文档以及其他相关信息。文档的源码托管在 GitHub 上，欢迎您为文档做出贡献。 什么是 Kook.Net？ Kook.Net 是一个对 KOOK（原开黑啦）API 进行功能封装的类库，以 C# 编写，编译所采用的目标框架包括 .NET 8.0 .NET 7.0 .NET 6.0 .NET Standard 2.1 .NET Standard 2.0 .NET Framework 4.6.2 我应该从哪里开始？ 如果您是初次使用 Kook.Net，请参考 用户指南 。 如果您熟悉 KOOK 开发者文档，想快速了解如何在 Kook.Net 中访问这些接口与事件，请参考 快速参考指南 。 如果您想浏览完整的 Kook.Net API，请参考 API 文档 。 寻求帮助？ 如果您在开发中遇到无法解决的问题，请访问我们的 KOOK Kook.Net 社区 寻求帮助。"
  },
  "quick_reference/event/channel.html": {
    "href": "quick_reference/event/channel.html",
    "title": "频道相关事件 | Kook.Net 文档",
    "keywords": "频道相关事件 预声明变量 readonly KookSocketClient _client = null; 频道内用户添加 reaction _client.ReactionAdded += (message, channel, user, reaction) => Task.CompletedTask; 频道内用户取消 reaction _client.ReactionRemoved += (message, channel, user, reaction) => Task.CompletedTask; 频道消息更新 _client.MessageUpdated += (before, after, channel) => Task.CompletedTask; 频道消息被删除 _client.MessageDeleted += (message, channel) => Task.CompletedTask; 新增频道 _client.ChannelCreated += channel => Task.CompletedTask; 修改频道信息 _client.ChannelUpdated += (before, after) => Task.CompletedTask; 删除频道 _client.ChannelDestroyed += channel => Task.CompletedTask; 新的频道置顶消息 _client.MessagePinned += (before, after, channel, @operator) => Task.CompletedTask; 取消频道置顶消息 _client.MessageUnpinned += (before, after, channel, @operator) => Task.CompletedTask;"
  },
  "quick_reference/event/direct-message.html": {
    "href": "quick_reference/event/direct-message.html",
    "title": "私聊消息事件 | Kook.Net 文档",
    "keywords": "私聊消息事件 预声明变量 readonly KookSocketClient _client = null; 私聊消息更新 _client.DirectMessageUpdated += (before, after, author, channel) => Task.CompletedTask; 私聊消息被删除 _client.DirectMessageDeleted += (message, author, channel) => Task.CompletedTask; 私聊内用户添加 reaction _client.DirectReactionAdded += (message, channel, user, reaction) => Task.CompletedTask; 私聊内用户取消 reaction _client.DirectReactionRemoved += (message, channel, user, reaction) => Task.CompletedTask;"
  },
  "quick_reference/event/guild.html": {
    "href": "quick_reference/event/guild.html",
    "title": "服务器相关事件 | Kook.Net 文档",
    "keywords": "服务器相关事件 预声明变量 readonly KookSocketClient _client = null; 服务器信息更新 _client.GuildUpdated += (before, after) => Task.CompletedTask; 服务器删除 视同 自己退出服务器 _client.LeftGuild += guild => Task.CompletedTask; 服务器封禁用户 _client.UserBanned += (users, @operator, guild, reason) => Task.CompletedTask; 服务器取消封禁用户 _client.UserUnbanned += (users, @operator, guild) => Task.CompletedTask; 服务器添加新表情 _client.EmoteCreated += (emote, guild) => Task.CompletedTask; 服务器删除表情 _client.EmoteDeleted += (emote, guild) => Task.CompletedTask; 服务器更新表情 _client.EmoteUpdated += (before, after, guild) => Task.CompletedTask;"
  },
  "quick_reference/event/guild-member.html": {
    "href": "quick_reference/event/guild-member.html",
    "title": "服务器成员相关事件 | Kook.Net 文档",
    "keywords": "服务器成员相关事件 预声明变量 readonly KookSocketClient _client = null; 新成员加入服务器 _client.UserJoined += (user, time) => Task.CompletedTask; 服务器成员退出 _client.UserLeft += (guild, user, time) => Task.CompletedTask; 服务器成员信息更新 _client.GuildMemberUpdated += (before, after) => Task.CompletedTask; 服务器成员上线 _client.GuildMemberOnline += (users, time) => Task.CompletedTask; 服务器成员下线 _client.GuildMemberOffline += (users, time) => Task.CompletedTask;"
  },
  "quick_reference/event/guild-role.html": {
    "href": "quick_reference/event/guild-role.html",
    "title": "服务器角色相关事件 | Kook.Net 文档",
    "keywords": "服务器角色相关事件 预声明变量 readonly KookSocketClient _client = null; 服务器角色增加 _client.RoleCreated += role => Task.CompletedTask; 服务器角色删除 _client.RoleDeleted += role => Task.CompletedTask; 服务器角色更新 _client.RoleUpdated += (before, after) => Task.CompletedTask;"
  },
  "quick_reference/event/message.html": {
    "href": "quick_reference/event/message.html",
    "title": "消息相关事件列表 | Kook.Net 文档",
    "keywords": "消息相关事件列表 预声明变量 readonly KookSocketClient _client = null; 本页结构与 KOOK 文档不完全一致，如需浏览 KOOK 文档，请参考： https://developer.kookapp.cn/doc/event/message 接收服务器频道消息 _client.MessageReceived += (message, user, channel) => Task.CompletedTask; 接收私聊消息 _client.DirectMessageReceived += (message, author, channel) => Task.CompletedTask;"
  },
  "quick_reference/event/user.html": {
    "href": "quick_reference/event/user.html",
    "title": "用户相关事件列表 | Kook.Net 文档",
    "keywords": "用户相关事件列表 预声明变量 readonly KookSocketClient _client = null; 用户加入语音频道 _client.UserConnected += (user, channel, time) => Task.CompletedTask; 用户退出语音频道 _client.UserDisconnected += (user, channel, time) => Task.CompletedTask; 用户信息更新 _client.UserUpdated += (before, after) => Task.CompletedTask; _client.CurrentUserUpdated += (before, after) => Task.CompletedTask; 自己新加入服务器 _client.JoinedGuild += guild => Task.CompletedTask; 自己退出服务器 _client.LeftGuild += guild => Task.CompletedTask; Card 消息中的 Button 点击事件 _client.MessageButtonClicked += (value, user, message, channel) => Task.CompletedTask; _client.DirectMessageButtonClicked += (value, user, message, channel) => Task.CompletedTask;"
  },
  "quick_reference/http_api/asset.html": {
    "href": "quick_reference/http_api/asset.html",
    "title": "媒体接口 | Kook.Net 文档",
    "keywords": "媒体接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; 上传文件/图片 POST /api/v3/asset/create Stream stream = null; // 文件流 string path = null; // 文件路径 string fileName = null; // 文件名 // API 请求 string assertUri = await _socketClient.Rest.CreateAssetAsync(stream, fileName); string assertUri = await _socketClient.Rest.CreateAssetAsync(path, fileName); string assertUri = await _restClient.CreateAssetAsync(stream, fileName); string assertUri = await _restClient.CreateAssetAsync(path, fileName);"
  },
  "quick_reference/http_api/badge.html": {
    "href": "quick_reference/http_api/badge.html",
    "title": "Badge 相关接口 | Kook.Net 文档",
    "keywords": "Badge 相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; IGuild guild = null; 获取服务器 Badge GET /api/v3/badge/guild BadgeStyle style = default; // 样式 // API 请求 Stream badge = await guild.GetBadgeAsync(style);"
  },
  "quick_reference/http_api/blacklist.html": {
    "href": "quick_reference/http_api/blacklist.html",
    "title": "黑名单相关接口 | Kook.Net 文档",
    "keywords": "黑名单相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketGuild socketGuild = null; RestGuild restGuild = null; IGuild guild = null; 获取黑名单列表 GET /api/v3/blacklist/list IUser user = null; // 用户 ulong userId = default; // 用户 ID // API 请求 IReadOnlyCollection<RestBan> restBansFromSocket = await socketGuild.GetBansAsync(); IReadOnlyCollection<RestBan> restBansFromRest = await restGuild.GetBansAsync(); IReadOnlyCollection<IBan> bans = await guild.GetBansAsync(); // API 请求，获取指定用户的封禁信息 IReadOnlyCollection<IBan> bans = await guild.GetBansAsync(); RestBan ban = await socketGuild.GetBanAsync(user); RestBan ban = await socketGuild.GetBanAsync(userId); RestBan ban = await restGuild.GetBanAsync(user); RestBan ban = await restGuild.GetBanAsync(userId); IBan ban = await guild.GetBanAsync(user); IBan ban = await guild.GetBanAsync(userId); 加入黑名单 POST /api/v3/blacklist/create IUser user = null; // 用户 ulong userId = default; // 用户 ID int pruneDays = default; // 清理消息天数 string reason = null; // 理由 // API 请求 await guild.AddBanAsync(user, pruneDays, reason); await guild.AddBanAsync(userId, pruneDays, reason); 移除黑名单 POST /api/v3/blacklist/delete IUser user = null; // 用户 ulong userId = default; // 用户 ID // API 请求 await guild.RemoveBanAsync(user); await guild.RemoveBanAsync(userId);"
  },
  "quick_reference/http_api/channel.html": {
    "href": "quick_reference/http_api/channel.html",
    "title": "频道相关接口 | Kook.Net 文档",
    "keywords": "频道相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketGuild socketGuild = null; SocketVoiceChannel socketVoiceChannel = null; SocketCategoryChannel socketCategoryChannel = null; RestGuild restGuild = null; IGuild guild = null; IGuildUser guildUser = null; IGuildChannel guildChannel = null; ITextChannel textChannel = null; IVoiceChannel voiceChannel = null; INestedChannel nestedChannel = null; ICategoryChannel categoryChannel = null; 获取频道列表 GET /api/v3/channel/list // 缓存获取指定服务器的全部频道 IReadOnlyCollection<SocketGuildChannel> socketGuildChannels = socketGuild.Channels; IReadOnlyCollection<RestGuildChannel> restGuildChannels = restGuild.Channels; // 缓存获取指定服务器的全部文字频道 IReadOnlyCollection<SocketTextChannel> socketTextChannels = socketGuild.TextChannels; IReadOnlyCollection<RestTextChannel> restTextChannels = restGuild.TextChannels; // 缓存获取指定服务器的全部语音频道 IReadOnlyCollection<SocketVoiceChannel> socketVoiceChannels = socketGuild.VoiceChannels; IReadOnlyCollection<RestVoiceChannel> restVoiceChannels = restGuild.VoiceChannels; // 缓存获取指定服务器的全部分组频道 IReadOnlyCollection<SocketCategoryChannel> socketCategoryChannels = socketGuild.CategoryChannels; IReadOnlyCollection<RestCategoryChannel> restCategoryChannels = restGuild.CategoryChannels; // 缓存获取指定服务器分组频道下的全部频道 IReadOnlyCollection<SocketGuildChannel> socketChannelsInCategory = socketCategoryChannel.Channels; // API 请求 IReadOnlyCollection<RestGuildChannel> restGuildChannels = await restGuild.GetChannelsAsync(); IReadOnlyCollection<RestTextChannel> restTextChannels = await restGuild.GetTextChannelsAsync(); IReadOnlyCollection<RestVoiceChannel> restVoiceChannels = await restGuild.GetVoiceChannelsAsync(); IReadOnlyCollection<RestCategoryChannel> restCategoryChannels = await restGuild.GetCategoryChannelsAsync(); // 如果 IGuild 对象是 SocketGuild，则直接返回缓存的频道列表，否则会发起 API 请求获取全部频道信息 IReadOnlyCollection<IGuildChannel> guildChannels = await guild.GetChannelsAsync(); IReadOnlyCollection<ITextChannel> textChannels = await guild.GetTextChannelAsyncs(); IReadOnlyCollection<IVoiceChannel> voiceChannels = await guild.GetVoiceChannelAsyncs(); IReadOnlyCollection<ICategoryChannel> categoryChannels = await guild.GetCategoryChannelAsyncs(); 获取频道详情 GET /api/v3/channel/view ulong channelId = default; // 频道 ID // 缓存获取指定的服务器频道 SocketChannel socketChannel = _socketClient.GetChannel(channelId); SocketChannel socketChannel = socketGuild.GetChannel(channelId); RestGuildChannel restGuildChannel = restGuild.Channels.FirstOrDefault(x => x.Id == channelId); // 缓存获取指定的服务器文字频道 SocketTextChannel socketTextChannel = socketGuild.GetTextChannel(channelId); RestTextChannel restTextChannel = restGuild.TextChannels.FirstOrDefault(x => x.Id == channelId); // 缓存获取指定的服务器语音频道 SocketVoiceChannel socketVoiceChannel = socketGuild.GetVoiceChannel(channelId); RestVoiceChannel restVoiceChannel = restGuild.VoiceChannels.FirstOrDefault(x => x.Id == channelId); // 缓存获取指定的服务器分组频道 SocketCategoryChannel socketCategoryChannel = socketGuild.GetCategoryChannel(channelId); RestCategoryChannel restCategoryChannel = restGuild.CategoryChannels.FirstOrDefault(x => x.Id == channelId); // API 请求 RestChannel restChannel = await _restClient.GetChannelAsync(channelId); RestGuildChannel restGuildChannel = await restGuild.GetChannelAsync(channelId); RestTextChannel restTestChannel = await restGuild.GetTextChannelAsync(channelId); RestVoiceChannel restVoiceChannel = await restGuild.GetVoiceChannelAsync(channelId); RestCategoryChannel restCategoryChannel = await restGuild.GetCategoryChannelAsync(channelId); // 如果 IGuild 对象是 SocketGuild，则直接返回缓存的频道，否则会发起 API 请求获取指定的频道信息 IChannel channel = await _socketClient.GetChannelAsync(channelId); IGuildChannel guildChannel = await guild.GetChannelAsync(channelId); ITextChannel textChannel = await guild.GetTextChannelAsync(channelId); IVoiceChannel voiceChannel = await guild.GetVoiceChannelAsync(channelId); ICategoryChannel categoryChannel = await guild.GetCategoryChannelAsync(channelId); 创建频道 POST /api/v3/channel/create string name = null; // 频道名称 ulong categoryChannelId = default; // 分组频道 ID string topic = null; // 文字频道主题 int userLimit = default; // 语音频道用户数上限 VoiceQuality voiceQuality = default; // 语音频道语音质量 // API 请求，创建文字频道 ITextChannel textChannel = await guild.CreateTextChannelAsync(name); ITextChannel textChannel = await guild.CreateTextChannelAsync(name, x => { x.CategoryId = categoryChannelId; x.Topic = topic; }); // API 请求，创建语音频道 IVoiceChannel voiceChannel = await guild.CreateVoiceChannelAsync(name); IVoiceChannel voiceChannel = await guild.CreateVoiceChannelAsync(name, x => { x.CategoryId = categoryChannelId; x.UserLimit = userLimit; x.VoiceQuality = voiceQuality; }); // API 请求，创建分组频道 ICategoryChannel categoryChannel = await guild.CreateCategoryChannelAsync(name); 编辑频道 POST /api/v3/channel/update string name = null; // 频道名称 ulong categoryChannelId = default; // 分组频道 ID int position = default; // 频道排序位置 string topic = null; // 文字频道主题 SlowModeInterval slowModeInterval = default; // 文字频道慢速模式间隔 int userLimit = default; // 语音频道用户数上限 VoiceQuality voiceQuality = default; // 语音频道语音质量 string password = null; // 语音频道密码 // API 请求，修改频道 guildChannel.ModifyAsync(x => { x.Name = name; x.CategoryId = categoryChannelId; x.Position = position; }); // API 请求，修改文字频道 textChannel.ModifyAsync(x => { x.Name = name; x.CategoryId = categoryChannelId; x.Position = position; x.Topic = topic; x.SlowModeInterval = slowModeInterval; }); // API 请求，修改语音频道 voiceChannel.ModifyAsync(x => { x.Name = name; x.CategoryId = categoryChannelId; x.Position = position; x.VoiceQuality = voiceQuality; x.UserLimit = userLimit; x.Password = password; }); // API 请求，修改分组频道 categoryChannel.ModifyAsync(x => { x.Name = name; x.CategoryId = categoryChannelId; x.Position = position; }); 删除频道 POST /api/v3/channel/delete // API 请求 await guildChannel.DeleteAsync(); 语音频道用户列表 GET /api/v3/channel/user-list // 要在启动时缓存语音状态信息，请设置 AlwaysDownloadVoiceStates = true // 主动更新所有服务器语音状态信息缓存 await _socketClient.DownloadVoiceStatesAsync(); // 缓存获取 IReadOnlyCollection<SocketGuildUser> connectedGuildUsers = socketVoiceChannel.ConnectedUsers; // API 请求 IReadOnlyCollection<IUser> connectedUsers = await voiceChannel.GetConnectedUsersAsync(); 语音频道之间移动用户 POST /api/v3/channel/move-user // 要移动的服务器用户列表 IEnumerable<IGuildUser> guildUsers = null; // API 请求 await guild.MoveUsersAsync(guildUsers, voiceChannel); 获取频道角色权限详情 GET /api/v3/channel-role/index IRole role = null; // 要获取在该频道的权限覆盖配置的角色 IUser user = null; // 要获取在该频道的权限覆盖配置的用户 // 缓存获取频道的角色或用户权限覆盖配置 IReadOnlyCollection<RolePermissionOverwrite> rolePermissionOverwrites = guildChannel.RolePermissionOverwrites; IReadOnlyCollection<UserPermissionOverwrite> userPermissionOverwrites = guildChannel.UserPermissionOverwrites; // 缓存获取频道的指定角色或用户的权限覆盖配置 OverwritePermissions? rolePermissionOverwrite = guildChannel.GetPermissionOverwrite(role); OverwritePermissions? userPermissionOverwrite = guildChannel.GetPermissionOverwrite(user); 创建频道角色权限 POST /api/v3/channel-role/create IRole role = null; // 要在该频道创建权限覆盖配置的角色 IGuildUser guildUser = null; // 要在该频道创建权限覆盖配置的服务器用户 // API 请求 await guildChannel.AddPermissionOverwriteAsync(role); await guildChannel.AddPermissionOverwriteAsync(guildUser); 更新频道角色权限 POST /api/v3/channel-role/update IRole role = null; // 要在该频道修改权限覆盖配置的角色 IGuildUser guildUser = null; // 要在该频道修改权限覆盖配置的服务器用户 // API 请求 await guildChannel.ModifyPermissionOverwriteAsync(role, x => x.Modify()); await guildChannel.ModifyPermissionOverwriteAsync(role, x => x.Modify()); 同步频道角色权限 POST /api/v3/channel-role/sync // API 请求 await nestedChannel.SyncPermissionsAsync(); 删除频道角色权限 POST /api/v3/channel-role/delete // API 请求 await guildChannel.RemovePermissionOverwriteAsync(role); await guildChannel.RemovePermissionOverwriteAsync(guildUser);"
  },
  "quick_reference/http_api/channel-user.html": {
    "href": "quick_reference/http_api/channel-user.html",
    "title": "频道用户相关接口 | Kook.Net 文档",
    "keywords": "频道用户相关 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; 根据用户 ID 和服务器 ID 获取用户所在语音频道 GET /api/v3/channel-user/get-joined-channel SocketGuildUser socketGuildUser = null; IGuildUser guildUser = null; // 要支持获取程序连接至 KOOK 网关前加入的语音频道信息，请设置 AlwaysDownloadVoiceStates = true // 缓存获取用户所在语音频道 SocketVoiceChannel socketVoiceChannel = socketGuildUser.VoiceChannel; // API 请求 IVoiceChannel voiceChannel = (await guildUser.GetConnectedVoiceChannelsAsync()).FirstOrDefault();"
  },
  "quick_reference/http_api/direct-message.html": {
    "href": "quick_reference/http_api/direct-message.html",
    "title": "用户私聊消息接口 | Kook.Net 文档",
    "keywords": "用户私聊消息接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketDMChannel socketDmChannel = null; RestDMChannel restDmChannel = null; IDMChannel dmChannel = null; IUserMessage userMessage = null; 获取私信聊天消息列表 GET /api/v3/direct-message/list IMessage referenceMessage = null; // 获取消息列表所根据的参考消息位置的 Guid referenceMessageId = default; // 获取消息列表所根据的参考消息位置的 ID Direction direction = default; // 获取消息列表的方向 int limit = default; // 获取消息列表的数量 // 要缓存文字频道聊天消息，请设置 MessageCacheSize 的值 // 缓存获取文字频道的聊天消息列表 IReadOnlyCollection<SocketMessage> cachedMessages = socketDmChannel.CachedMessages; IReadOnlyCollection<SocketMessage> conditionalCachedMessages = socketDmChannel.GetCachedMessages(referenceMessage, direction, limit); IReadOnlyCollection<SocketMessage> conditionalCachedMessagesById = socketDmChannel.GetCachedMessages(referenceMessageId, direction, limit); // API 请求 IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessages = socketDmChannel.GetMessagesAsync(referenceMessage, direction, limit); IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessagesById = socketDmChannel.GetMessagesAsync(referenceMessageId, direction, limit); IAsyncEnumerable<IReadOnlyCollection<RestMessage>> pagedRestMessages = restDmChannel.GetMessagesAsync(referenceMessage, direction, limit); IAsyncEnumerable<IReadOnlyCollection<RestMessage>> pagedRestMessagesById = restDmChannel.GetMessagesAsync(referenceMessageId, direction, limit); // 在 ITextChannel 上进行调用 IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessages = dmChannel.GetMessagesAsync(referenceMessage, direction, limit); IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessagesById = dmChannel.GetMessagesAsync(referenceMessageId, direction, limit); 获取私信聊天会话详情 POST /api/v3/user-chat/view // 要缓存文字频道聊天消息，请设置 MessageCacheSize 的值 // 缓存获取文字频道的聊天消息详情 SocketMessage cachedMessage = socketDmChannel.GetCachedMessage(messageId); // 调用异步方法获取消息详情，在缓存中包含指定的消息对象的情况下，直接返回缓存的消息对象，否则会发起 API 请求获取消息对象 IMessage messageAsync = await socketDmChannel.GetMessageAsync(messageId); // API 请求 IMessage message = await restDmChannel.GetMessageAsync(messageId); // 在 IDMChannel 上进行调用 IMessage message = await dmChannel.GetMessageAsync(messageId); 发送私信聊天消息 POST /api/v3/direct-message/create string text = null; // 要发送的文字消息 IQuote quote = null; // 被引用的消息 string filePath = null; // 要发送的文件的路径 string fileName = null; // 要发送的文件的名称 AttachmentType fileType = default; // 要发送的文件的类型 Stream stream = null; // 要发送的文件的流 FileAttachment attachment = default; // 要发送的文件的附件 ICard card = null; // 要发送的卡片 IEnumerable<ICard> cards = null; // 要发送的卡片列表 // API 请求，发送文本消息 Cacheable<IUserMessage,Guid> textMessage = await dmChannel.SendTextAsync(text, quote); // API 请求，发送文件消息 Cacheable<IUserMessage,Guid> fileMessageFromPath = await dmChannel.SendFileAsync(filePath, fileName, fileType, quote); Cacheable<IUserMessage,Guid> fileMessageFromStream = await dmChannel.SendFileAsync(stream, fileName, fileType, quote); Cacheable<IUserMessage,Guid> fileMessageFromAttachment = await dmChannel.SendFileAsync(attachment, quote); // API 请求，发送单卡片消息 Cacheable<IUserMessage,Guid> cardMessage = await dmChannel.SendCardAsync(card, quote); // API 请求，发送多卡片消息 Cacheable<IUserMessage,Guid> cardsMessage = await dmChannel.SendCardsAsync(cards, quote); 更新私信聊天消息 POST /api/v3/direct-message/update string content = null; // 要更新的消息的文本 IEnumerable<ICard> cards = null; // 要更新的消息的卡片 IQuote quote = null; // 要更新的消息的引用 // API 请求 await userMessage.ModifyAsync(x => { x.Content = content; x.Cards = cards; x.Quote = quote; // 要清除引用，请设置为 Quote.Empty }); 删除私信聊天消息 POST /api/v3/direct-message/delete // API 请求 await userMessage.DeleteAsync(); 获取频道消息某回应的用户列表 GET /api/v3/direct-message/reaction-list IEmote emoji = null; // 要获取用户列表的回应的表情 // 缓存获取消息的回应概要，但不包含用户列表 IReadOnlyDictionary<IEmote,ReactionMetadata> cachedReactions = socketUserMessage.Reactions; // API 请求 IReadOnlyCollection<IUser> reactionUsers = await userMessage.GetReactionUsersAsync(emoji); 给某个消息添加回应 POST /api/v3/direct-message/add-reaction 有关如何构造 Emoji，请参考 表情符号 。 IEmote emoji = null; // 要添加的回应的表情 IEnumerable<IEmote> emojis = null; // 要添加的回应的表情列表 // API 请求 await userMessage.AddReactionAsync(emoji); await userMessage.AddReactionsAsync(emojis); 删除消息的某个回应 POST /api/v3/direct-message/delete-reaction IEmote emoji = null; IEnumerable<IEmote> emojis = null; IUser user = null; // API 请求 await userMessage.RemoveReactionAsync(emoji, user); await userMessage.RemoveReactionsAsync(user, emojis);"
  },
  "quick_reference/http_api/friend.html": {
    "href": "quick_reference/http_api/friend.html",
    "title": "好友相关接口 | Kook.Net 文档",
    "keywords": "好友相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; IUser user = null; 好友列表 GET /api/v3/friend // API 请求，获取好友列表 IReadOnlyCollection<RestUser> friends = await _restClient.GetFriendsAsync(); // API 请求，获取好友请求列表 IReadOnlyCollection<RestFriendRequest> friendRequests = await _restClient.GetFriendRequestsAsync(); // API 请求，获取屏蔽用户列表 IReadOnlyCollection<RestUser> blockedUsers = await _restClient.GetBlockedUsersAsync(); 好友申请 POST /api/v3/friend/request // API 请求 await user.RequestFriendAsync(); 处理好友申请 POST /api/v3/friend/handle-request // 好友申请 RestFriendRequest friendRequest = null; // API 请求，接受好友申请 await friendRequest.AcceptAsync(); // API 请求，拒绝好友申请 await friendRequest.DeclineAsync(); 删除好友 POST /api/v3/friend/delete // API 请求 await user.RemoveFriendAsync(); 屏蔽用户 POST /api/v3/friend/block // API 请求 await user.BlockAsync(); 取消屏蔽用户 POST /api/v3/friend/unblock // API 请求 await user.UnblockAsync();"
  },
  "quick_reference/http_api/game.html": {
    "href": "quick_reference/http_api/game.html",
    "title": "用户动态相关接口 | Kook.Net 文档",
    "keywords": "用户动态相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; 游戏列表 GET /api/v3/game GameCreationSource source = default; // 游戏创建来源 // API 请求 IAsyncEnumerable<IReadOnlyCollection<RestGame>> pagedGames = _socketClient.Rest.GetGamesAsync(source); IAsyncEnumerable<IReadOnlyCollection<RestGame>> pagedGames = _restClient.GetGamesAsync(source); 添加游戏 POST /api/v3/game/create string name = null; // 游戏名称 string processName = null; // 游戏进程名称 string iconUrl = null; // 图标地址 // API 请求 RestGame game = await _socketClient.Rest.CreateGameAsync(name, processName, iconUrl); RestGame game = await _restClient.CreateGameAsync(name, processName, iconUrl); 更新游戏 POST /api/v3/game/update RestGame game = null; // 游戏 string name = null; // 游戏名称 string iconUrl = null; // 图标地址 // API 请求 RestGame modifiedGame = await game.ModifyAsync(x => { x.Name = name; x.IconUrl = iconUrl; }); 删除游戏 POST /api/v3/game/delete RestGame game = null; // 游戏 // API 请求 await game.DeleteAsync(); 添加游戏/音乐记录(开始玩/听) POST /api/v3/game/activity RestGame game = null; // 游戏 Music music = null; // 音乐 // API 请求 await _socketClient.Rest.CurrentUser.StartPlayingAsync(game); await _socketClient.Rest.CurrentUser.StartPlayingAsync(music); await _restClient.CurrentUser.StartPlayingAsync(game); await _restClient.CurrentUser.StartPlayingAsync(music); 删除游戏/音乐记录(结束玩/听) POST /api/v3/game/delete-activity ActivityType type = default; // 活动类型 // API 请求 await _socketClient.Rest.CurrentUser.StopPlayingAsync(type); await _restClient.CurrentUser.StopPlayingAsync(type);"
  },
  "quick_reference/http_api/gateway.html": {
    "href": "quick_reference/http_api/gateway.html",
    "title": "Gateway 相关接口 | Kook.Net 文档",
    "keywords": "Gateway 相关接口 获取网关连接地址 GET /api/v3/gateway/index 无公开 API"
  },
  "quick_reference/http_api/guild.html": {
    "href": "quick_reference/http_api/guild.html",
    "title": "服务器相关接口 | Kook.Net 文档",
    "keywords": "服务器相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketGuild socketGuild = null; RestGuild restGuild = null; IGuild guild = null; IGuildUser guildUser = null; 获取当前用户加入的服务器列表 GET /api/v3/guild/list // 缓存获取加入的所有服务器 IReadOnlyCollection<SocketGuild> socketGuilds = _socketClient.Guilds; // API 请求 IReadOnlyCollection<RestGuild> restGuilds = await _socketClient.Rest.GetGuildsAsync(); IReadOnlyCollection<RestGuild> restGuilds = await _restClient.GetGuildsAsync(); 获取服务器详情 GET /api/v3/guild/view ulong guildId = default; // 服务器 ID // 缓存获取指定服务器 SocketGuild socketGuild = _socketClient.GetGuild(guildId); // API 请求 RestGuild restGuild = await _socketClient.Rest.GetGuildAsync(guildId); RestGuild restGuild = await _restClient.GetGuildAsync(guildId); 获取服务器中的用户列表 GET /api/v3/guild/user-list ulong guildId = default; // 服务器 ID // 要在启动时缓存服务器用户列表，请设置 AlwaysDownloadUsers = true // 主动更新所有服务器用户列表缓存 await _socketClient.DownloadUsersAsync(); // 主动更新部分服务器用户列表缓存 IEnumerable<IGuild> guilds = Enumerable.Empty<IGuild>(); await _socketClient.DownloadUsersAsync(guilds); // 主动更新指定服务器用户列表缓存 await socketGuild.DownloadUsersAsync(); // 缓存获取 SocketGuild 对象 SocketGuild socketGuild = _socketClient.GetGuild(guildId); // 缓存获取用户列表 IReadOnlyCollection<SocketGuildUser> socketUsers = socketGuild.Users; // 调用异步方法获取用户列表，在缓存中包含所有用户的情况下，直接返回缓存的用户列表，否则会发起 API 请求获取分页结果 IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> pagedGuildUsers = socketGuild.GetUsersAsync(); // 合并分页结果 IEnumerable<IGuildUser> guildUsers = await pagedGuildUsers.FlattenAsync(); // API 请求 IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> pagedRestGuildUsers = restGuild.GetUsersAsync(); // 合并分页结果 IEnumerable<RestGuildUser> restGuildUsers = await pagedRestGuildUsers.FlattenAsync(); // 如果 IGuild 对象是 SocketGuild，且缓存中包含所有用户，则直接返回缓存的用户列表，否则会发起 API 请求获取全部用户信息 IReadOnlyCollection<IGuildUser> guildUsers = await guild.GetUsersAsync(); 修改服务器中用户的昵称 POST /api/v3/guild/nickname // 要设置的昵称，如要清空昵称，请传入 `null`、`string.Empty` 或该用户的 `IUser.Username` string nickname = null; // API 请求 await guildUser.ModifyNicknameAsync(nickname); 离开服务器 POST /api/v3/guild/leave // API 请求 await guild.LeaveAsync(); 踢出服务器 POST /api/v3/guild/kickout // API 请求 await guildUser.KickAsync(); 服务器静音闭麦列表 GET /api/v3/guild-mute/list // 要在启动时缓存语音状态信息，请设置 AlwaysDownloadVoiceStates = true // 主动更新所有服务器语音状态信息缓存 await _socketClient.DownloadVoiceStatesAsync(); // 主动更新部分服务器语音状态信息缓存 IEnumerable<IGuild> guilds = Enumerable.Empty<IGuild>(); await _socketClient.DownloadVoiceStatesAsync(guilds); // 主动更新指定服务器语音状态信息缓存 await socketGuild.DownloadVoiceStatesAsync(); // 缓存获取服务器内的所有语音状态信息 Dictionary<SocketGuildUser, SocketVoiceState?> voiceStates = socketGuild.Users.ToDictionary(x => x, x => x.VoiceState); // 缓存获取被服务器闭麦的用户列表 IEnumerable<SocketGuildUser> mutedUsers = socketGuild.Users.Where(x => x.VoiceState?.IsMuted == true); // 缓存获取被服务器静音的用户列表 IEnumerable<SocketGuildUser> deafenedUsers = socketGuild.Users.Where(x => x.VoiceState?.IsDeafened == true); 添加服务器静音或闭麦 POST /api/v3/guild-mute/create // API 请求 await guildUser.MuteAsync(); await guildUser.DeafenAsync(); 删除服务器静音或闭麦 POST /api/v3/guild-mute/delete // API 请求 await guildUser.UnmuteAsync(); await guildUser.UndeafenAsync(); 服务器助力历史 GET /api/v3/guild-boost/history // 要在启动时缓存服务器助力信息，请设置 AlwaysDownloadBoostSubscriptions = true // 主动更新所有服务器服务器助力信息缓存 await _socketClient.DownloadBoostSubscriptionsAsync(); // 主动更新部分服务器服务器助力信息缓存 IEnumerable<IGuild> guilds = Enumerable.Empty<IGuild>(); await _socketClient.DownloadBoostSubscriptionsAsync(guilds); // 主动更新指定服务器服务器助力信息缓存 await socketGuild.DownloadBoostSubscriptionsAsync(); // 缓存获取服务器内的所有服务器助力信息 ImmutableDictionary<IUser,IReadOnlyCollection<BoostSubscriptionMetadata>> boostSubscriptions = socketGuild.BoostSubscriptions; ImmutableDictionary<IUser,IReadOnlyCollection<BoostSubscriptionMetadata>> validBoostSubscriptions = socketGuild.ValidBoostSubscriptions; // 缓存获取服务器用户的服务器服务器助力信息 IReadOnlyCollection<BoostSubscriptionMetadata> boostSubscriptions = socketGuildUser.BoostSubscriptions; // API 请求，获取服务器内的助力信息 ImmutableDictionary<IUser,IReadOnlyCollection<BoostSubscriptionMetadata>> boostSubscriptions = await guild.GetBoostSubscriptionsAsync(); ImmutableDictionary<IUser,IReadOnlyCollection<BoostSubscriptionMetadata>> boostSubscriptions = await guild.GetActiveBoostSubscriptionsAsync(); // API 请求，获取服务器用户的助力信息 IReadOnlyCollection<BoostSubscriptionMetadata> boostSubscriptions = await guildUser.GetBoostSubscriptionsAsync();"
  },
  "quick_reference/http_api/guild-emoji.html": {
    "href": "quick_reference/http_api/guild-emoji.html",
    "title": "服务器表情相关接口 | Kook.Net 文档",
    "keywords": "服务器表情相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketGuild socketGuild = null; RestGuild restGuild = null; IGuild guild = null; 获取服务器表情列表 GET /api/v3/guild-emoji/list string emoteId = null; // 表情符号 ID // 缓存中获取表情符号列表 IReadOnlyCollection<GuildEmote> cachedGuildEmotes = guild.Emotes; // 缓存获取指定 ID 的表情符号 GuildEmote cachedGuildEmote = socketGuild.GetEmote(emoteId); // API 请求获取表情符号列表 IReadOnlyCollection<GuildEmote> guildEmotes = await guild.GetEmotesAsync(); GuildEmote guildEmote = await guild.GetEmoteAsync(emoteId); 创建服务器表情 POST /api/v3/guild-emoji/create string name = null; // 表情符号名称 Image image = default; // 表情符号图片 // API 请求 GuildEmote emote = await guild.CreateEmoteAsync(name, image); 更新服务器表情 POST /api/v3/guild-emoji/update GuildEmote emote = null; // 表情符号 string name = null; // 表情符号名称 // API 请求 await guild.ModifyEmoteNameAsync(emote, name); 删除服务器表情 POST /api/v3/guild-emoji/delete GuildEmote emote = null; // 表情符号 // API 请求 await guild.DeleteEmoteAsync(emote);"
  },
  "quick_reference/http_api/guild-role.html": {
    "href": "quick_reference/http_api/guild-role.html",
    "title": "服务器角色权限相关接口 | Kook.Net 文档",
    "keywords": "服务器角色权限相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketGuild socketGuild = null; RestGuild restGuild = null; IGuild guild = null; IRole role = null; 获取服务器角色列表 GET /api/v3/guild-role/list // 获取服务器的角色列表 IReadOnlyCollection<SocketRole> socketRoles = socketGuild.Roles; IReadOnlyCollection<RestRole> restRoles = restGuild.Roles; IReadOnlyCollection<IRole> roles = guild.Roles; // 获取服务器的指定角色 ID 的信息 SocketRole socketRole = socketGuild.GetRole(roleId); RestRole restRole = restGuild.GetRole(roleId); IRole role = guild.GetRole(roleId); 创建服务器角色 POST /api/v3/guild-role/create string roleName = null; // 角色名称 // API 请求 RestRole restRoleFromSocket = await socketGuild.CreateRoleAsync(roleName); RestRole restRoleFromRest = await restGuild.CreateRoleAsync(roleName); IRole role = await guild.CreateRoleAsync(roleName); 更新服务器角色 POST /api/v3/guild-role/update string roleName = null; // 角色名称 Color color = default; // 角色颜色 bool hoist = default; // 是否分离显示 bool mentionable = default; // 是否可被提及 GuildPermissions permissions = default; // 角色权限 // API 请求 await role.ModifyAsync(x => { x.Name = roleName; x.Color = color; x.Hoist = hoist; x.Mentionable = mentionable; x.Permissions = permissions; }); 删除服务器角色 POST /api/v3/guild-role/delete // API 请求 await role.DeleteAsync(); 赋予用户角色 POST /api/v3/guild-role/grant ulong guildId = default; // 服务器 ID IRole role = null; // 角色 uint roleId = default; // 角色 ID IEnumerable<IRole> roles = null; // 多个角色 IEnumerable<uint> roleIds = null; // 多个角色 ID ulong userId = default; // 用户 ID // API 请求赋予角色 await guildUser.AddRoleAsync(role); await guildUser.AddRoleAsync(roleId); // API 请求批量赋予角色 await guildUser.AddRolesAsync(roles); await guildUser.AddRolesAsync(roleIds); // API 请求，无实体操作 await _socketClient.Rest.AddRoleAsync(guildId, userId, roleId); 删除用户角色 POST /api/v3/guild-role/revoke ulong guildId = default; // 服务器 ID IRole role = null; // 角色 uint roleId = default; // 角色 ID IEnumerable<IRole> roles = null; // 多个角色 IEnumerable<uint> roleIds = null; // 多个角色 ID ulong userId = default; // 用户 ID // API 请求赋予角色 await guildUser.RemoveRoleAsync(role); await guildUser.RemoveRoleAsync(roleId); // API 请求批量赋予角色 await guildUser.RemoveRolesAsync(roles); await guildUser.RemoveRolesAsync(roleIds); // API 请求，无实体操作 await _socketClient.Rest.RemoveRoleAsync(guildId, userId, roleId);"
  },
  "quick_reference/http_api/intimacy.html": {
    "href": "quick_reference/http_api/intimacy.html",
    "title": "亲密度相关接口 | Kook.Net 文档",
    "keywords": "亲密度相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketUser socketUser = null; RestUser restUser = null; IUser user = null; 获取用户的亲密度 GET /api/v3/intimacy/index // API 请求 RestIntimacy intimacyFromSocket = await socketUser.GetIntimacyAsync(); RestIntimacy intimacyFromRest = await restUser.GetIntimacyAsync(); IIntimacy intimacy = await user.GetIntimacyAsync(); 更新用户的亲密度 POST /api/v3/intimacy/update string socialInfo = null; // 社交信息 uint imageId = default; // 形象图片 ID int score = default; // 亲密度 // API 请求 await user.UpdateIntimacyAsync(x => { x.SocialInfo = socialInfo; x.ImageId = imageId; x.Score = score; });"
  },
  "quick_reference/http_api/invite.html": {
    "href": "quick_reference/http_api/invite.html",
    "title": "邀请相关接口 | Kook.Net 文档",
    "keywords": "邀请相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; IGuild guild = null; 获取邀请列表 GET /api/v3/invite/list // API 请求 IReadOnlyCollection<IInvite> invites = await guild.GetInvitesAsync(); 创建邀请链接 POST /api/v3/invite/create InviteMaxAge maxAge = default; // 有效期 InviteMaxUses maxUses = default; // 最大使用次数 // API 请求 IInvite invite = await guild.CreateInviteAsync(maxAge, maxUses); 删除邀请链接 POST /api/v3/invite/delete IInvite invite = null; // 邀请 // API 请求 await invite.DeleteAsync();"
  },
  "quick_reference/http_api/message.html": {
    "href": "quick_reference/http_api/message.html",
    "title": "消息相关接口 | Kook.Net 文档",
    "keywords": "消息相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketTextChannel socketTextChannel = null; RestTextChannel restTextChannel = null; ITextChannel textChannel = null; IUserMessage userMessage = null; 获取频道聊天消息列表 GET /api/v3/message/list IMessage referenceMessage = null; // 获取消息列表所根据的参考消息位置的 Guid referenceMessageId = default; // 获取消息列表所根据的参考消息位置的 ID Direction direction = default; // 获取消息列表的方向 int limit = default; // 获取消息列表的数量 // 要缓存文字频道聊天消息，请设置 MessageCacheSize 的值 // 缓存获取文字频道的聊天消息列表 IReadOnlyCollection<SocketMessage> cachedMessages = socketTextChannel.CachedMessages; IReadOnlyCollection<SocketMessage> conditionalCachedMessages = socketTextChannel.GetCachedMessages(referenceMessage, direction, limit); IReadOnlyCollection<SocketMessage> conditionalCachedMessagesById = socketTextChannel.GetCachedMessages(referenceMessageId, direction, limit); // API 请求 IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessages = socketTextChannel.GetMessagesAsync(referenceMessage, direction, limit); IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessagesById = socketTextChannel.GetMessagesAsync(referenceMessageId, direction, limit); IAsyncEnumerable<IReadOnlyCollection<RestMessage>> pagedRestMessages = restTextChannel.GetMessagesAsync(referenceMessage, direction, limit); IAsyncEnumerable<IReadOnlyCollection<RestMessage>> pagedRestMessagesById = restTextChannel.GetMessagesAsync(referenceMessageId, direction, limit); // 在 ITextChannel 上进行调用 IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessages = textChannel.GetMessagesAsync(referenceMessage, direction, limit); IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessagesById = textChannel.GetMessagesAsync(referenceMessageId, direction, limit); 获取频道聊天消息详情 GET /api/v3/message/view Guid messageId = default; // 要获取详情的消息 ID // 要缓存文字频道聊天消息，请设置 MessageCacheSize 的值 // 缓存获取文字频道的聊天消息详情 SocketMessage cachedMessage = socketTextChannel.GetCachedMessage(messageId); // 调用异步方法获取消息详情，在缓存中包含指定的消息对象的情况下，直接返回缓存的消息对象，否则会发起 API 请求获取消息对象 IMessage messageAsync = await socketTextChannel.GetMessageAsync(messageId); // API 请求 IMessage message = await restTextChannel.GetMessageAsync(messageId); // 在 ITextChannel 上进行调用 IMessage message = await textChannel.GetMessageAsync(messageId); 发送频道聊天消息 POST /api/v3/message/create string text = null; // 要发送的文字消息 IQuote quote = null; // 被引用的消息 IUser ephemeralUser = null; // 瞬态消息的可见用户 string filePath = null; // 要发送的文件的路径 string fileName = null; // 要发送的文件的名称 AttachmentType fileType = default; // 要发送的文件的类型 Stream stream = null; // 要发送的文件的流 FileAttachment attachment = default; // 要发送的文件的附件 ICard card = null; // 要发送的卡片 IEnumerable<ICard> cards = null; // 要发送的卡片列表 // API 请求，发送文本消息 Cacheable<IUserMessage,Guid> textMessage = await textChannel.SendTextAsync(text, quote, ephemeralUser); // API 请求，发送文件消息 Cacheable<IUserMessage,Guid> fileMessageFromPath = await textChannel.SendFileAsync(filePath, fileName, fileType, quote, ephemeralUser); Cacheable<IUserMessage,Guid> fileMessageFromStream = await textChannel.SendFileAsync(stream, fileName, fileType, quote, ephemeralUser); Cacheable<IUserMessage,Guid> fileMessageFromAttachment = await textChannel.SendFileAsync(attachment, quote, ephemeralUser); // API 请求，发送单卡片消息 Cacheable<IUserMessage,Guid> cardMessage = await textChannel.SendCardAsync(card, quote, ephemeralUser); // API 请求，发送多卡片消息 Cacheable<IUserMessage,Guid> cardsMessage = await textChannel.SendCardsAsync(cards, quote, ephemeralUser); 更新频道聊天消息 POST /api/v3/message/update string content = null; // 要更新的消息的文本 IEnumerable<ICard> cards = null; // 要更新的消息的卡片 IQuote quote = null; // 要更新的消息的引用 IUser ephemeralUser = null; // 要更新的瞬态消息的可见用户 // API 请求 await userMessage.ModifyAsync(x => { x.Content = content; x.Cards = cards; x.Quote = quote; // 要清除引用，请设置为 Quote.Empty x.EphemeralUser = ephemeralUser; }); 删除频道聊天消息 POST /api/v3/message/delete // API 请求 await userMessage.DeleteAsync(); 获取频道消息某回应的用户列表 GET /api/v3/message/reaction-list IEmote emoji = null; // 要获取用户列表的回应的表情 // 缓存获取消息的回应概要，但不包含用户列表 IReadOnlyDictionary<IEmote,ReactionMetadata> cachedReactions = socketUserMessage.Reactions; // API 请求 IReadOnlyCollection<IUser> reactionUsers = await userMessage.GetReactionUsersAsync(emoji); 给某个消息添加回应 POST /api/v3/message/add-reaction 有关如何构造 Emoji，请参考 表情符号 。 IEmote emoji = null; // 要添加的回应的表情 IEnumerable<IEmote> emojis = null; // 要添加的回应的表情列表 // API 请求 await userMessage.AddReactionAsync(emoji); await userMessage.AddReactionsAsync(emojis); 删除消息的某个回应 POST /api/v3/message/delete-reaction IEmote emoji = null; IEnumerable<IEmote> emojis = null; IUser user = null; // API 请求 await userMessage.RemoveReactionAsync(emoji, user); await userMessage.RemoveReactionsAsync(user, emojis);"
  },
  "quick_reference/http_api/oauth.html": {
    "href": "quick_reference/http_api/oauth.html",
    "title": "OAuth 2.0 相关接口 | Kook.Net 文档",
    "keywords": "OAuth 2.0 相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; 获取 AccessToken POST /api/oauth2/token 无公开 API，请使用 AspNet.Security.OAuth.Kook ，请参考： NuGet: https://www.nuget.org/packages/AspNet.Security.OAuth.Kook/ GitHub: https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers 文档： https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers/blob/dev/docs/kook.md"
  },
  "quick_reference/http_api/user.html": {
    "href": "quick_reference/http_api/user.html",
    "title": "用户相关接口 | Kook.Net 文档",
    "keywords": "用户相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; IKookClient _client = null; 获取当前用户信息 GET /api/v3/user/me IGuild guild = null; // 服务器 // 缓存获取当前用户信息 SocketSelfUser socketCurrentUser = _socketClient.CurrentUser; RestSelfUser restCurrentUser = _restClient.CurrentUser; // 缓存获取当前用户在服务器中的用户信息 SocketGuildUser socketGuildCurrentUser = _socketGuild.CurrentUser; // API 请求 IUser currentUser = await _client.GetUserAsync(_client.CurrentUser.Id); IGuildUser currentGuildUser = await guild.GetCurrentUserAsync(); 获取目标用户信息 GET /api/v3/user/view ulong userId = default; // 用户 ID string username = null; // 用户名 string identifyNumber = null; // 用户标识码 IGuild guild = null; // 服务器 // 缓存获取目标用户信息 SocketUser socketUserById = _socketClient.GetUser(userId); SocketUser socketUserByNameNumber = _socketClient.GetUser(username, identifyNumber); // 缓存获取用户在服务器中的用户信息 SocketGuildUser socketGuildUser = socketGuild.GetUser(userId); // API 请求 IUser user = await _client.GetUserAsync(userId); IGuildUser user = await guild.GetUserAsync(userId) 下线机器人 POST /api/v3/user/offline _socketClient.LogoutAsync(); _restClient.LogoutAsync();"
  },
  "quick_reference/http_api/user-chat.html": {
    "href": "quick_reference/http_api/user-chat.html",
    "title": "私信聊天会话接口 | Kook.Net 文档",
    "keywords": "私信聊天会话接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; readonly IKookClient _client = null; 获取私信聊天会话列表 GET /api/v3/user-chat/list // 缓存获取私信聊天会话列表 IReadOnlyCollection<SocketDMChannel> cachedDmChannels = _socketClient.DMChannels; // API 请求 IReadOnlyCollection<IDMChannel> dmChannels = await _client.GetDMChannelsAsync(); 获取私信聊天会话详情 GET /api/v3/user-chat/view Guid chatCode = default; // 要获取详情的私信聊天会话的 ChatCode ulong userId = default; // 要获取详情的私信聊天会话的 UserId // 缓存获取私信聊天会话详情 SocketDMChannel dmChannelByChatCode = _socketClient.GetDMChannel(chatCode); SocketDMChannel dmChannelByUserId = _socketClient.GetDMChannel(userId); // API 请求 IDMChannel dmChannel = await _client.GetDMChannelAsync(chatCode); 创建私信聊天会话 POST /api/v3/user-chat/create IUser user = null; // 要创建私信聊天会话的用户 // API 请求 IDMChannel dmChannel = await user.CreateDMChannelAsync(); 删除私信聊天会话 POST /api/v3/user-chat/delete IDMChannel dmChannel = null; // 要删除的私信聊天会话 // API 请求 await dmChannel.CloseAsync()"
  },
  "quick_reference/index.html": {
    "href": "quick_reference/index.html",
    "title": "快速参考指南 | Kook.Net 文档",
    "keywords": "快速参考指南 快速参考指南将会介绍 KOOK 开发者平台 中所列出的 HTTP 接口与事件在 Kook.Net 中的使用方法。 登录与启动 HTTP 接口 服务器相关接口 频道相关接口 消息相关接口 频道用户相关接口 私信聊天会话接口 用户私聊消息接口 好友相关接口 Gateway 相关接口 用户相关接口 媒体接口 服务器角色权限相关接口 亲密度相关接口 服务器表情相关接口 邀请相关接口 黑名单相关接口 Badge 相关接口 用户动态相关接口 OAuth 2.0 相关接口 网关事件 频道相关事件 私聊消息事件 服务器成员相关事件 服务器角色相关事件 服务器相关事件 消息相关事件列表 用户相关事件列表"
  },
  "quick_reference/startup.html": {
    "href": "quick_reference/startup.html",
    "title": "登录与启动 | Kook.Net 文档",
    "keywords": "登录与启动 预声明变量 readonly KookRestClient _restClient; readonly KookSocketClient _socketClient; Rest 客户端 // 使用默认配置创建 Rest 客户端 _restClient = new KookRestClient(); // 使用自定义配置创建 Rest 客户端 _restClient = new KookRestClient(new KookRestConfig() { // 请求头 Accept-Language AcceptLanguage = \"zh-CN\", // 默认重试模式 DefaultRetryMode = RetryMode.AlwaysRetry, // 默认超速回调 DefaultRatelimitCallback = info => Task.CompletedTask, // 日志级别 LogLevel = LogSeverity.Info, // 双向文稿格式化用户名 FormatUsersInBidirectionalUnicode = true, // Rest 客户端提供程序 RestClientProvider = DefaultRestClientProvider.Instance }); // Token string token = null; // 登录 await _restClient.LoginAsync(TokenType.Bot, token); // 登出 await _restClient.LogoutAsync(); WebSocket 客户端 // 使用默认配置创建 WebSocket 客户端 _socketClient = new KookRestClient(); // 使用自定义配置创建 WebSocket 客户端 _socketClient = new KookSocketClient(new KookRestConfig() { // 请求头 Accept-Language AcceptLanguage = \"zh-CN\", // 默认重试模式 DefaultRetryMode = RetryMode.AlwaysRetry, // 默认超速回调 DefaultRatelimitCallback = info => Task.CompletedTask, // 日志级别 LogLevel = LogSeverity.Info, // 双向文稿格式化用户名 FormatUsersInBidirectionalUnicode = true, // Rest 客户端提供程序 RestClientProvider = DefaultRestClientProvider.Instance, // 显示指定网关地址 GatewayHost = null, // 连接超时（毫秒） ConnectionTimeout = 6000, // 处理程序警告耗时阈值（毫秒） HandlerTimeout = 3000, // 消息缓存数量 MessageCacheSize = 10, // WebSocket 客户端提供程序 WebSocketProvider = DefaultWebSocketProvider.Instance, // UDP 客户端提供程序 UdpSocketProvider = DefaultUdpSocketProvider.Instance, // 自动下载服务器用户信息 AlwaysDownloadUsers = false, // 自动下载服务器用户语音状态信息 AlwaysDownloadVoiceStates = false, // 自动下载服务器助力信息 AlwaysDownloadBoostSubscriptions = false, // 等待服务器可用状态超时（毫秒） MaxWaitBetweenGuildAvailablesBeforeReady = 10000, // 最大获取新加入服务器信息重试次数 MaxJoinedGuildDataFetchingRetryTimes = 10, // 获取新加入服务器信息重试延迟（毫秒） JoinedGuildDataFetchingRetryDelay = 500 }); // Token string token = null; // 登录 await _socketClient.LoginAsync(TokenType.Bot, token); // 启动 await _socketClient.StartAsync(); // 停止 await _socketClient.StopAsync(); // 登出 await _socketClient.LogoutAsync(); // 登出 await _socketClient.LogoutAsync();"
  }
}