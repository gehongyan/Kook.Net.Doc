{
  "api/Kook.ActionGroupModule.html": {
    "href": "api/Kook.ActionGroupModule.html",
    "title": "Class ActionGroupModule | Kook.Net 文档",
    "keywords": "Class ActionGroupModule Namespace Kook Assembly Kook.Net.Core.dll Represents an action group module that can be used in an ICard. public class ActionGroupModule : IModule, IEquatable<ActionGroupModule>, IEquatable<IModule> Inheritance object ActionGroupModule Implements IModule IEquatable<ActionGroupModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(ActionGroupModule) CardExtensions.ToBuilder(IModule) Properties Elements Gets the elements of this module. public ImmutableArray<ButtonElement> Elements { get; } Property Value ImmutableArray<ButtonElement> An ImmutableArray<T> containing the elements of this module. Type Gets the type of the module. public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Methods Equals(ActionGroupModule?) Determines whether the specified ActionGroupModule is equal to the current ActionGroupModule. public bool Equals(ActionGroupModule? actionGroupModule) Parameters actionGroupModule ActionGroupModule The ActionGroupModule to compare with the current ActionGroupModule. Returns bool true if the specified ActionGroupModule is equal to the current ActionGroupModule; otherwise, false. Equals(object?) Determines whether the specified ActionGroupModule is equal to the current ActionGroupModule. public override bool Equals(object? obj) Parameters obj object The object to compare with the current ActionGroupModule. Returns bool true if the specified ActionGroupModule is equal to the current ActionGroupModule; otherwise, false. Remarks If the object passes is an ActionGroupModule, Equals(ActionGroupModule?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ActionGroupModule, ActionGroupModule) Determines whether the specified ActionGroupModule is equal to the current ActionGroupModule. public static bool operator ==(ActionGroupModule left, ActionGroupModule right) Parameters left ActionGroupModule right ActionGroupModule Returns bool true if the specified ActionGroupModule is equal to the current ActionGroupModule; otherwise, false. operator !=(ActionGroupModule, ActionGroupModule) Determines whether the specified ActionGroupModule is not equal to the current ActionGroupModule. public static bool operator !=(ActionGroupModule left, ActionGroupModule right) Parameters left ActionGroupModule right ActionGroupModule Returns bool true if the specified ActionGroupModule is not equal to the current ActionGroupModule; otherwise, false."
  },
  "api/Kook.ActionGroupModuleBuilder.html": {
    "href": "api/Kook.ActionGroupModuleBuilder.html",
    "title": "Class ActionGroupModuleBuilder | Kook.Net 文档",
    "keywords": "Class ActionGroupModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll Represents a action group module builder for creating an ActionGroupModule. public class ActionGroupModuleBuilder : IModuleBuilder, IEquatable<ActionGroupModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object ActionGroupModuleBuilder Implements IModuleBuilder IEquatable<ActionGroupModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ActionGroupModuleBuilder() Initializes a new instance of the ActionGroupModuleBuilder class. public ActionGroupModuleBuilder() ActionGroupModuleBuilder(IList<ButtonElementBuilder>) Initializes a new instance of the ActionGroupModuleBuilder class. public ActionGroupModuleBuilder(IList<ButtonElementBuilder> elements) Parameters elements IList<ButtonElementBuilder> Fields MaxElementCount Returns the maximum number of elements allowed by Kook. public const int MaxElementCount = 4 Field Value int Properties Elements Gets or sets the button elements of the action group module. public IList<ButtonElementBuilder> Elements { get; set; } Property Value IList<ButtonElementBuilder> An IList<T> containing the button elements of the action group module. Type Specifies the module type of the IModule this builder creates. public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Methods AddElement(ButtonElementBuilder) Adds a button element to the action group module. public ActionGroupModuleBuilder AddElement(ButtonElementBuilder field) Parameters field ButtonElementBuilder The button element to add. Returns ActionGroupModuleBuilder The current builder. AddElement(Action<ButtonElementBuilder>?) Adds a button element to the action group module. public ActionGroupModuleBuilder AddElement(Action<ButtonElementBuilder>? action = null) Parameters action Action<ButtonElementBuilder> The action to add a button element to the action group module. Returns ActionGroupModuleBuilder The current builder. Exceptions ArgumentException The addition operation would cause the number of elements to exceed MaxElementCount. Build() Builds this builder into an ActionGroupModule. public ActionGroupModule Build() Returns ActionGroupModule An ActionGroupModule representing the built action group module object. Exceptions ArgumentNullException Elements is null. ArgumentException Elements is an empty list. ArgumentException The number of elements of Elements is greater than MaxElementCount. Equals(ActionGroupModuleBuilder?) Determines whether the specified ActionGroupModuleBuilder is equal to the current ActionGroupModuleBuilder. public bool Equals(ActionGroupModuleBuilder? actionGroupModuleBuilder) Parameters actionGroupModuleBuilder ActionGroupModuleBuilder The ActionGroupModuleBuilder to compare with the current ActionGroupModuleBuilder. Returns bool true if the specified ActionGroupModuleBuilder is equal to the current ActionGroupModuleBuilder; otherwise, false. Equals(object?) Determines whether the specified ActionGroupModuleBuilder is equal to the current ActionGroupModuleBuilder. public override bool Equals(object? obj) Parameters obj object The object to compare with the current ActionGroupModuleBuilder. Returns bool true if the specified ActionGroupModuleBuilder is equal to the current ActionGroupModuleBuilder; otherwise, false. Remarks If the object passes is an ActionGroupModuleBuilder, Equals(ActionGroupModuleBuilder?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ActionGroupModuleBuilder?, ActionGroupModuleBuilder?) Determines whether the specified ActionGroupModuleBuilder is equal to the current ActionGroupModuleBuilder. public static bool operator ==(ActionGroupModuleBuilder? left, ActionGroupModuleBuilder? right) Parameters left ActionGroupModuleBuilder right ActionGroupModuleBuilder Returns bool true if the specified ActionGroupModuleBuilder is equal to the current ActionGroupModuleBuilder; otherwise, false. operator !=(ActionGroupModuleBuilder?, ActionGroupModuleBuilder?) Determines whether the specified ActionGroupModuleBuilder is not equal to the current ActionGroupModuleBuilder. public static bool operator !=(ActionGroupModuleBuilder? left, ActionGroupModuleBuilder? right) Parameters left ActionGroupModuleBuilder right ActionGroupModuleBuilder Returns bool true if the specified ActionGroupModuleBuilder is not equal to the current ActionGroupModuleBuilder; otherwise, false."
  },
  "api/Kook.ActivityType.html": {
    "href": "api/Kook.ActivityType.html",
    "title": "Enum ActivityType | Kook.Net 文档",
    "keywords": "Enum ActivityType Namespace Kook Assembly Kook.Net.Core.dll Specifies the type of activities. public enum ActivityType Fields Game = 1 Specifies that the activity is a game. Music = 2 Specifies that the activity is music."
  },
  "api/Kook.AlphaColor.html": {
    "href": "api/Kook.AlphaColor.html",
    "title": "Struct AlphaColor | Kook.Net 文档",
    "keywords": "Struct AlphaColor Namespace Kook Assembly Kook.Net.Core.dll Represents a Color with an alpha channel. public readonly struct AlphaColor Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors AlphaColor(Color, byte) Initializes a AlphaColor struct with the given base color and alpha channel. public AlphaColor(Color baseColor, byte alpha) Parameters baseColor Color The base color to use. alpha byte The byte that represents the alpha channel. Exceptions ArgumentException Value exceeds MaxDecimalValue. AlphaColor(byte, byte, byte, byte) Initializes a AlphaColor struct with the given RGBA bytes. public AlphaColor(byte r, byte g, byte b, byte a) Parameters r byte The byte that represents the red color. g byte The byte that represents the green color. b byte The byte that represents the blue color. a byte The byte that represents the alpha channel. Examples The following will create a color that has a value of #607D8BFF. AlphaColor darkGrey = new AlphaColor((byte)0b_01100000, (byte)0b_01111101, (byte)0b_10001011, (byte)0b_11111111); Exceptions ArgumentException Value exceeds MaxDecimalValue. AlphaColor(int, int, int, int) Initializes a AlphaColor struct with the given RGBA value. public AlphaColor(int r, int g, int b, int a) Parameters r int The value that represents the red color. Must be within 0~255. g int The value that represents the green color. Must be within 0~255. b int The value that represents the blue color. Must be within 0~255. a int The value that represents the alpha channel. Must be within 0~255. Examples The following will create a color that has a value of #607D8BFF. AlphaColor darkGrey = new AlphaColor(96, 125, 139, 255); Exceptions ArgumentOutOfRangeException The argument value is not between 0 to 255. AlphaColor(float, float, float, float) Initializes a AlphaColor struct with the given RGBA float value. public AlphaColor(float r, float g, float b, float a) Parameters r float The value that represents the red color. Must be within 0~1. g float The value that represents the green color. Must be within 0~1. b float The value that represents the blue color. Must be within 0~1. a float The value that represents the alpha channel. Must be within 0~1. Examples The following will create a color that has a value of #607C8CFF. AlphaColor darkGrey = new AlphaColor(0.38f, 0.49f, 0.55f, 1.00f); Exceptions ArgumentOutOfRangeException The argument value is not between 0 to 1. AlphaColor(ulong) Initializes a new instance of the AlphaColor struct with the specified raw value. public AlphaColor(ulong rawValue) Parameters rawValue ulong The raw value to use. Fields Default Gets the default user color value. public static readonly AlphaColor Default Field Value AlphaColor MaxDecimalValue Gets the max decimal value of an color with an alpha channel. public const ulong MaxDecimalValue = 4294967295 Field Value ulong Properties A Gets the alpha component for this color. public byte A { get; } Property Value byte B Gets the blue component for this color. public byte B { get; } Property Value byte BaseColor Gets the base color for this color without the alpha channel. public Color BaseColor { get; } Property Value Color G Gets the green component for this color. public byte G { get; } Property Value byte R Gets the red component for this color. public byte R { get; } Property Value byte RawValue Gets the raw value for this color. public ulong RawValue { get; } Property Value ulong Methods Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Gets the hexadecimal representation of the color (e.g. #000cccff). public override string ToString() Returns string A hexadecimal string of the color. Operators operator ==(AlphaColor, AlphaColor) Determines whether the specified AlphaColor is equal to this instance. public static bool operator ==(AlphaColor lhs, AlphaColor rhs) Parameters lhs AlphaColor rhs AlphaColor Returns bool true if the specified AlphaColor is equal to this instance; otherwise, false . explicit operator Color(AlphaColor) Converts the given Kook.Net-defined AlphaColor to a Kook.Net-defined Color. public static explicit operator Color(AlphaColor color) Parameters color AlphaColor The Kook.Net-defined AlphaColor to convert. Returns Color The Kook.Net-defined Color that represents the given Kook.Net-defined AlphaColor. Remarks warning This conversion will drop the alpha channel of the given AlphaColor. explicit operator AlphaColor(Color) Converts the given .NET standard Color to a Kook.Net-defined AlphaColor. public static explicit operator AlphaColor(Color color) Parameters color Color The .NET standard Color to convert. Returns AlphaColor The Kook.Net-defined AlphaColor that represents the given .NET standard Color. implicit operator Color(AlphaColor) Converts the given Kook.Net-defined AlphaColor to a .NET standard Color. public static implicit operator Color(AlphaColor color) Parameters color AlphaColor The Kook.Net-defined AlphaColor to convert. Returns Color The .NET standard Color that represents the given Kook.Net-defined AlphaColor. implicit operator ulong(AlphaColor) Converts the given AlphaColor to its raw value of uint. public static implicit operator ulong(AlphaColor color) Parameters color AlphaColor The AlphaColor to convert. Returns ulong The raw value of the given AlphaColor. implicit operator AlphaColor(Color) Converts the given Kook.Net-defined Color to a Kook.Net-defined AlphaColor. public static implicit operator AlphaColor(Color color) Parameters color Color The Kook.Net-defined Color to convert. Returns AlphaColor The Kook.Net-defined AlphaColor that represents the given Kook.Net-defined Color. implicit operator AlphaColor(ulong) Converts the given raw value of uint to a AlphaColor. public static implicit operator AlphaColor(ulong rawValue) Parameters rawValue ulong The raw value of the color. Returns AlphaColor The AlphaColor that represents the given raw value. operator !=(AlphaColor, AlphaColor) Determines whether the specified AlphaColor is not equal to this instance. public static bool operator !=(AlphaColor lhs, AlphaColor rhs) Parameters lhs AlphaColor rhs AlphaColor Returns bool true if the specified AlphaColor is not equal to this instance; otherwise, false ."
  },
  "api/Kook.AsyncEnumerableExtensions.html": {
    "href": "api/Kook.AsyncEnumerableExtensions.html",
    "title": "Class AsyncEnumerableExtensions | Kook.Net 文档",
    "keywords": "Class AsyncEnumerableExtensions Namespace Kook Assembly Kook.Net.Core.dll An extension class for squashing IAsyncEnumerable<T>. public static class AsyncEnumerableExtensions Inheritance object AsyncEnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This set of extension methods will squash an IAsyncEnumerable<T> into a single IEnumerable<T>. This is often associated with requests that has a set limit when requesting. Methods FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) Flattens the specified pages into one IEnumerable<T> asynchronously. public static Task<IEnumerable<T>> FlattenAsync<T>(this IAsyncEnumerable<IEnumerable<T>> source) Parameters source IAsyncEnumerable<IEnumerable<T>> Returns Task<IEnumerable<T>> Type Parameters T Flatten<T>(IAsyncEnumerable<IEnumerable<T>>) Flattens the specified pages into one IAsyncEnumerable<T>. public static IAsyncEnumerable<T> Flatten<T>(this IAsyncEnumerable<IEnumerable<T>> source) Parameters source IAsyncEnumerable<IEnumerable<T>> Returns IAsyncEnumerable<T> Type Parameters T"
  },
  "api/Kook.AttachmentType.html": {
    "href": "api/Kook.AttachmentType.html",
    "title": "Enum AttachmentType | Kook.Net 文档",
    "keywords": "Enum AttachmentType Namespace Kook Assembly Kook.Net.Core.dll Specifies the type of the attachment. public enum AttachmentType Fields Audio = 3 The attachment is an audio. File = 0 The attachment is a file. Image = 1 The attachment is an image. Video = 2 The attachment is a video."
  },
  "api/Kook.Audio.AudioApplication.html": {
    "href": "api/Kook.Audio.AudioApplication.html",
    "title": "Enum AudioApplication | Kook.Net 文档",
    "keywords": "Enum AudioApplication Namespace Kook.Audio Assembly Kook.Net.Core.dll Represents the application type of the audio. public enum AudioApplication Fields Mixed = 2 The audio is intended for mixed usage. Music = 1 The audio is intended for music. Voice = 0 The audio is intended for voice communication."
  },
  "api/Kook.Audio.AudioOutStream.html": {
    "href": "api/Kook.Audio.AudioOutStream.html",
    "title": "Class AudioOutStream | Kook.Net 文档",
    "keywords": "Class AudioOutStream Namespace Kook.Audio Assembly Kook.Net.Core.dll Represents a generic outgoing audio stream. public abstract class AudioOutStream : AudioStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioOutStream Implements IAsyncDisposable IDisposable Derived BufferedWriteStream OpusEncodeStream OutputStream RtpWriteStream Inherited Members AudioStream.CanRead AudioStream.CanSeek AudioStream.WriteHeader(ushort, uint, bool) AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.ClearAsync(CancellationToken) AudioStream.Length AudioStream.Position Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.Dispose(bool) Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. public override bool CanWrite { get; } Property Value bool true if the stream supports writing; otherwise, false. Methods Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. public override int Read(byte[] buffer, int offset, int count) Parameters buffer byte[] An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. offset int The zero-based byte offset in buffer at which to begin storing the data read from the current stream. count int The maximum number of bytes to be read from the current stream. Returns int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Exceptions ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException Reading this stream is not supported. NotSupportedException Reading this stream is not supported. Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. public override long Seek(long offset, SeekOrigin origin) Parameters offset long A byte offset relative to the origin parameter. origin SeekOrigin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns long The new position within the current stream. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException Seeking this stream is not supported.. NotSupportedException Seeking this stream is not supported.. SetLength(long) When overridden in a derived class, sets the length of the current stream. public override void SetLength(long value) Parameters value long The desired length of the current stream in bytes. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException Setting the length to this stream is not supported. NotSupportedException Setting the length to this stream is not supported."
  },
  "api/Kook.Audio.AudioStream.html": {
    "href": "api/Kook.Audio.AudioStream.html",
    "title": "Class AudioStream | Kook.Net 文档",
    "keywords": "Class AudioStream Namespace Kook.Audio Assembly Kook.Net.Core.dll Represents a generic audio stream. public abstract class AudioStream : Stream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream Implements IAsyncDisposable IDisposable Derived AudioOutStream Inherited Members Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.Dispose(bool) Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. public override bool CanRead { get; } Property Value bool true if the stream supports reading; otherwise, false. CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. public override bool CanSeek { get; } Property Value bool true if the stream supports seeking; otherwise, false. CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. public override bool CanWrite { get; } Property Value bool true if the stream supports writing; otherwise, false. Length When overridden in a derived class, gets the length in bytes of the stream. public override long Length { get; } Property Value long A long value representing the length of the stream in bytes. Exceptions NotSupportedException A class derived from Stream does not support seeking and the length is unknown. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException Reading stream length is not supported. Position When overridden in a derived class, gets or sets the position within the current stream. public override long Position { get; set; } Property Value long The current position within the stream. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException Getting or setting this stream position is not supported. Methods Clear() Clears the stream, causing all buffered data to be lost. public void Clear() ClearAsync(CancellationToken) Clears the stream, causing all buffered data to be lost. public virtual Task ClearAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The cancellation token to be used. Returns Task A task that represents an asynchronous clear operation. Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. public override void Flush() Exceptions IOException An I/O error occurs. Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. public override int Read(byte[] buffer, int offset, int count) Parameters buffer byte[] An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. offset int The zero-based byte offset in buffer at which to begin storing the data read from the current stream. count int The maximum number of bytes to be read from the current stream. Returns int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Exceptions ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException Reading this stream is not supported. Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. public override long Seek(long offset, SeekOrigin origin) Parameters offset long A byte offset relative to the origin parameter. origin SeekOrigin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns long The new position within the current stream. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException Seeking this stream is not supported.. SetLength(long) When overridden in a derived class, sets the length of the current stream. public override void SetLength(long value) Parameters value long The desired length of the current stream in bytes. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException Setting the length to this stream is not supported. Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. public override void Write(byte[] buffer, int offset, int count) Parameters buffer byte[] An array of bytes. This method copies count bytes from buffer to the current stream. offset int The zero-based byte offset in buffer at which to begin copying bytes to the current stream. count int The number of bytes to be written to the current stream. Exceptions ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. WriteHeader(ushort, uint, bool) Writes a header to the stream. public virtual void WriteHeader(ushort seq, uint timestamp, bool missed) Parameters seq ushort The sequence number of the header. timestamp uint The timestamp of the header. missed bool Whether the header is for a missed packet."
  },
  "api/Kook.Audio.IAudioClient.html": {
    "href": "api/Kook.Audio.IAudioClient.html",
    "title": "Interface IAudioClient | Kook.Net 文档",
    "keywords": "Interface IAudioClient Namespace Kook.Audio Assembly Kook.Net.Core.dll Represents a generic audio client. public interface IAudioClient : IDisposable Inherited Members IDisposable.Dispose() Properties ConnectionState Gets the current connection state of this client. ConnectionState ConnectionState { get; } Property Value ConnectionState UdpLatency Gets the estimated round-trip latency, in milliseconds, to the voice UDP server. int UdpLatency { get; } Property Value int Methods CreateDirectOpusStream() Creates a new audio stream from the Opus codec without buffering. AudioOutStream CreateDirectOpusStream() Returns AudioOutStream A new Opus audio stream. CreateDirectPcmStream(AudioApplication, int?, int) Creates a new audio stream from the PCM codec without buffering. AudioOutStream CreateDirectPcmStream(AudioApplication application, int? bitrate = null, int packetLoss = 30) Parameters application AudioApplication The audio application to use. bitrate int? The bitrate of the audio stream; leave null to use the bitrate requested from KOOK. packetLoss int The packet loss percentage of the audio stream. Returns AudioOutStream A new PCM audio stream. CreateOpusStream(int) Creates a new audio stream from the Opus codec. AudioOutStream CreateOpusStream(int bufferMillis = 1000) Parameters bufferMillis int The buffer size, in milliseconds, of the audio stream. Returns AudioOutStream A new Opus audio stream. CreatePcmStream(AudioApplication, int?, int, int) Creates a new audio stream from the PCM codec. AudioOutStream CreatePcmStream(AudioApplication application, int? bitrate = null, int bufferMillis = 1000, int packetLoss = 30) Parameters application AudioApplication The audio application to use. bitrate int? The bitrate of the audio stream; leave null to use the bitrate requested from KOOK. bufferMillis int The buffer size, in milliseconds, of the audio stream. packetLoss int The packet loss percentage of the audio stream. Returns AudioOutStream A new PCM audio stream. StopAsync() Stops the client from sending audio. Task StopAsync() Returns Task A task representing the asynchronous operation. Events Connected Occurs when the client has connected to the voice server. event Func<Task> Connected Event Type Func<Task> Disconnected Occurs when the client has disconnected from the voice server. The first Exception parameter is the exception that caused the disconnection. event Func<Exception, Task> Disconnected Event Type Func<Exception, Task> UdpLatencyUpdated Occurs when the latency of the voice UDP server has been updated. The first int parameter is the latency in milliseconds before the update. The second int parameter is the current updated latency in milliseconds. event Func<int, int, Task> UdpLatencyUpdated Event Type Func<int, int, Task>"
  },
  "api/Kook.Audio.PeerPermissionInfo.html": {
    "href": "api/Kook.Audio.PeerPermissionInfo.html",
    "title": "Struct PeerPermissionInfo | Kook.Net 文档",
    "keywords": "Struct PeerPermissionInfo Namespace Kook.Audio Assembly Kook.Net.Core.dll Represents the information of a peer's permission in a voice channel. public readonly struct PeerPermissionInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties CanConnect Gets whether the peer can connect to the voice channel. public bool CanConnect { get; init; } Property Value bool CanManageVoice Gets whether the peer can manage the voice channel. public bool CanManageVoice { get; init; } Property Value bool CanSpeak Gets whether the peer can speak in the voice channel. public bool CanSpeak { get; init; } Property Value bool CanUseVoiceActivity Gets whether the peer can use voice activity, i.e. the peer can speak without pressing a key. public bool CanUseVoiceActivity { get; init; } Property Value bool DeafenedByGuild Gets whether the peer is deafened by the guild. public bool DeafenedByGuild { get; init; } Property Value bool MutedByGuild Gets whether the peer is muted by the guild. public bool MutedByGuild { get; init; } Property Value bool"
  },
  "api/Kook.Audio.SoundtrackInfo.html": {
    "href": "api/Kook.Audio.SoundtrackInfo.html",
    "title": "Struct SoundtrackInfo | Kook.Net 文档",
    "keywords": "Struct SoundtrackInfo Namespace Kook.Audio Assembly Kook.Net.Core.dll Represents the information of a soundtrack. public readonly struct SoundtrackInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Music Gets the name of the music soundtrack public string? Music { get; init; } Property Value string Singer Gets the singer of the music soundtrack public string? Singer { get; init; } Property Value string Software Gets the name of the software from which the soundtrack audio originates public string? Software { get; init; } Property Value string"
  },
  "api/Kook.Audio.Streams.BufferedWriteStream.html": {
    "href": "api/Kook.Audio.Streams.BufferedWriteStream.html",
    "title": "Class BufferedWriteStream | Kook.Net 文档",
    "keywords": "Class BufferedWriteStream Namespace Kook.Audio.Streams Assembly Kook.Net.WebSocket.dll Wraps another stream with a timed buffer. public class BufferedWriteStream : AudioOutStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioOutStream BufferedWriteStream Implements IAsyncDisposable IDisposable Inherited Members AudioOutStream.CanWrite AudioOutStream.Read(byte[], int, int) AudioOutStream.SetLength(long) AudioOutStream.Seek(long, SeekOrigin) AudioStream.CanRead AudioStream.CanSeek AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.Length AudioStream.Position Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ClearAsync(CancellationToken) Clears the stream, causing all buffered data to be lost. public override Task ClearAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The cancellation token to be used. Returns Task A task that represents an asynchronous clear operation. Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. public override Task FlushAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous flush operation. Exceptions ObjectDisposedException The stream has been disposed. WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write data from. offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous write operation. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. WriteHeader(ushort, uint, bool) Writes a header to the stream. public override void WriteHeader(ushort seq, uint timestamp, bool missed) Parameters seq ushort The sequence number of the header. timestamp uint The timestamp of the header. missed bool Whether the header is for a missed packet."
  },
  "api/Kook.Audio.Streams.OpusEncodeStream.html": {
    "href": "api/Kook.Audio.Streams.OpusEncodeStream.html",
    "title": "Class OpusEncodeStream | Kook.Net 文档",
    "keywords": "Class OpusEncodeStream Namespace Kook.Audio.Streams Assembly Kook.Net.WebSocket.dll Converts PCM to Opus public class OpusEncodeStream : AudioOutStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioOutStream OpusEncodeStream Implements IAsyncDisposable IDisposable Inherited Members AudioOutStream.CanWrite AudioOutStream.Read(byte[], int, int) AudioOutStream.SetLength(long) AudioOutStream.Seek(long, SeekOrigin) AudioStream.CanRead AudioStream.CanSeek AudioStream.WriteHeader(ushort, uint, bool) AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.Length AudioStream.Position Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OpusEncodeStream(AudioStream, int, AudioApplication, int) Initializes a new instance of the OpusEncodeStream class. public OpusEncodeStream(AudioStream next, int bitrate, AudioApplication application, int packetLoss) Parameters next AudioStream The next audio stream to write to. bitrate int The bitrate of the audio stream. application AudioApplication The audio application to use. packetLoss int The packet loss percentage of the audio stream. Fields SampleRate Gets the sample rate of the audio stream. public const int SampleRate = 48000 Field Value int Methods ClearAsync(CancellationToken) Clears the stream, causing all buffered data to be lost. public override Task ClearAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The cancellation token to be used. Returns Task A task that represents an asynchronous clear operation. Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. public override Task FlushAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous flush operation. Exceptions ObjectDisposedException The stream has been disposed. WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write data from. offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous write operation. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. WriteSilentFramesAsync() Sends silent frames to avoid interpolation errors after breaks in data transmission. public Task WriteSilentFramesAsync() Returns Task A task representing the asynchronous operation of sending a silent frame."
  },
  "api/Kook.Audio.Streams.OutputStream.html": {
    "href": "api/Kook.Audio.Streams.OutputStream.html",
    "title": "Class OutputStream | Kook.Net 文档",
    "keywords": "Class OutputStream Namespace Kook.Audio.Streams Assembly Kook.Net.WebSocket.dll Wraps an IAudioClient, sending voice data on write. public class OutputStream : AudioOutStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioOutStream OutputStream Implements IAsyncDisposable IDisposable Inherited Members AudioOutStream.CanWrite AudioOutStream.Read(byte[], int, int) AudioOutStream.SetLength(long) AudioOutStream.Seek(long, SeekOrigin) AudioStream.CanRead AudioStream.CanSeek AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.ClearAsync(CancellationToken) AudioStream.Length AudioStream.Position Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.Dispose(bool) Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write data from. offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous write operation. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. WriteHeader(ushort, uint, bool) Writes a header to the stream. public override void WriteHeader(ushort seq, uint timestamp, bool missed) Parameters seq ushort The sequence number of the header. timestamp uint The timestamp of the header. missed bool Whether the header is for a missed packet."
  },
  "api/Kook.Audio.Streams.RtpWriteStream.html": {
    "href": "api/Kook.Audio.Streams.RtpWriteStream.html",
    "title": "Class RtpWriteStream | Kook.Net 文档",
    "keywords": "Class RtpWriteStream Namespace Kook.Audio.Streams Assembly Kook.Net.WebSocket.dll Wraps data in a RTP frame public class RtpWriteStream : AudioOutStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioOutStream RtpWriteStream Implements IAsyncDisposable IDisposable Inherited Members AudioOutStream.CanWrite AudioOutStream.Read(byte[], int, int) AudioOutStream.SetLength(long) AudioOutStream.Seek(long, SeekOrigin) AudioStream.CanRead AudioStream.CanSeek AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.Length AudioStream.Position Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RtpWriteStream(AudioStream, uint, byte, int) Creates a new instance of RtpWriteStream. public RtpWriteStream(AudioStream next, uint ssrc, byte payloadType, int bufferSize = 4000) Parameters next AudioStream The next stream in the chain. ssrc uint The SSRC of the RTP connection. payloadType byte The payload type to use. bufferSize int The buffer size to use. Methods ClearAsync(CancellationToken) Clears the stream, causing all buffered data to be lost. public override Task ClearAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The cancellation token to be used. Returns Task A task that represents an asynchronous clear operation. Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. public override Task FlushAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous flush operation. Exceptions ObjectDisposedException The stream has been disposed. WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write data from. offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous write operation. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. WriteHeader(ushort, uint, bool) Writes a header to the stream. public override void WriteHeader(ushort seq, uint timestamp, bool missed) Parameters seq ushort The sequence number of the header. timestamp uint The timestamp of the header. missed bool Whether the header is for a missed packet."
  },
  "api/Kook.Audio.Streams.html": {
    "href": "api/Kook.Audio.Streams.html",
    "title": "Namespace Kook.Audio.Streams | Kook.Net 文档",
    "keywords": "Namespace Kook.Audio.Streams Classes BufferedWriteStream Wraps another stream with a timed buffer. OpusEncodeStream Converts PCM to Opus OutputStream Wraps an IAudioClient, sending voice data on write. RtpWriteStream Wraps data in a RTP frame"
  },
  "api/Kook.Audio.html": {
    "href": "api/Kook.Audio.html",
    "title": "Namespace Kook.Audio | Kook.Net 文档",
    "keywords": "Namespace Kook.Audio Classes AudioOutStream Represents a generic outgoing audio stream. AudioStream Represents a generic audio stream. Structs PeerPermissionInfo Represents the information of a peer's permission in a voice channel. SoundtrackInfo Represents the information of a soundtrack. Interfaces IAudioClient Represents a generic audio client. Enums AudioApplication Represents the application type of the audio."
  },
  "api/Kook.AudioModule.html": {
    "href": "api/Kook.AudioModule.html",
    "title": "Class AudioModule | Kook.Net 文档",
    "keywords": "Class AudioModule Namespace Kook Assembly Kook.Net.Core.dll Represents an audio module that can be used in an ICard. public class AudioModule : IMediaModule, IModule, IEquatable<AudioModule>, IEquatable<IModule> Inheritance object AudioModule Implements IMediaModule IModule IEquatable<AudioModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(AudioModule) CardExtensions.ToBuilder(IModule) Properties Cover Gets the cover of the audio associated with this module. public string? Cover { get; } Property Value string A string representing the cover of the audio associated with this module. Source Gets the source of the media associated with this module. public string Source { get; } Property Value string A string representing the source of the audio associated with this module. Title Gets the title of the media associated with this module. public string? Title { get; } Property Value string A string representing the title of the media associated with this module. Type Gets the type of the module. public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Methods Equals(AudioModule?) Determines whether the specified AudioModule is equal to the current AudioModule. public bool Equals(AudioModule? audioModule) Parameters audioModule AudioModule The AudioModule to compare with the current AudioModule. Returns bool true if the specified AudioModule is equal to the current AudioModule; otherwise, false. Equals(object?) Determines whether the specified AudioModule is equal to the current AudioModule. public override bool Equals(object? obj) Parameters obj object The object to compare with the current AudioModule. Returns bool true if the specified AudioModule is equal to the current AudioModule; otherwise, false. Remarks If the object passes is an AudioModule, Equals(AudioModule?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(AudioModule, AudioModule) Determines whether the specified AudioModule is equal to the current AudioModule. public static bool operator ==(AudioModule left, AudioModule right) Parameters left AudioModule right AudioModule Returns bool true if the specified AudioModule is equal to the current AudioModule; otherwise, false. operator !=(AudioModule, AudioModule) Determines whether the specified AudioModule is not equal to the current AudioModule. public static bool operator !=(AudioModule left, AudioModule right) Parameters left AudioModule right AudioModule Returns bool true if the specified AudioModule is not equal to the current AudioModule; otherwise, false."
  },
  "api/Kook.AudioModuleBuilder.html": {
    "href": "api/Kook.AudioModuleBuilder.html",
    "title": "Class AudioModuleBuilder | Kook.Net 文档",
    "keywords": "Class AudioModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll Represents an audio module builder for creating an AudioModule. public class AudioModuleBuilder : IModuleBuilder, IEquatable<AudioModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object AudioModuleBuilder Implements IModuleBuilder IEquatable<AudioModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AudioModuleBuilder() Initializes a new instance of the AudioModuleBuilder class. public AudioModuleBuilder() AudioModuleBuilder(string, string?, string?) Initializes a new instance of the AudioModuleBuilder class. public AudioModuleBuilder(string source, string? cover = null, string? title = null) Parameters source string The source URL of the video. cover string The cover URL of the video. title string The title of the video. Properties Cover Gets or sets the cover URL of the video. public string? Cover { get; set; } Property Value string The cover URL of the video. Source Gets or sets the source URL of the video. public string? Source { get; set; } Property Value string The source URL of the video. Title Gets or sets the title of the video. public string? Title { get; set; } Property Value string The title of the video. Type Specifies the module type of the IModule this builder creates. public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Methods Build() Builds this builder into an AudioModule. public AudioModule Build() Returns AudioModule An AudioModule representing the built audio module object. Exceptions ArgumentNullException Source cannot be null ArgumentException Source cannot be empty UriFormatException Source is not a valid URL UriFormatException Cover is not a valid URL Equals(AudioModuleBuilder?) Determines whether the specified AudioModuleBuilder is equal to the current AudioModuleBuilder. public bool Equals(AudioModuleBuilder? audioModuleBuilder) Parameters audioModuleBuilder AudioModuleBuilder The AudioModuleBuilder to compare with the current AudioModuleBuilder. Returns bool true if the specified AudioModuleBuilder is equal to the current AudioModuleBuilder; otherwise, false. Equals(object?) Determines whether the specified AudioModuleBuilder is equal to the current AudioModuleBuilder. public override bool Equals(object? obj) Parameters obj object The object to compare with the current AudioModuleBuilder. Returns bool true if the specified AudioModuleBuilder is equal to the current AudioModuleBuilder; otherwise, false. Remarks If the object passes is an AudioModuleBuilder, Equals(AudioModuleBuilder?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithCover(string?) Sets the cover URL of the video. public AudioModuleBuilder WithCover(string? cover) Parameters cover string The cover URL of the video to be set. Returns AudioModuleBuilder The current builder. WithSource(string?) Sets the source URL of the video. public AudioModuleBuilder WithSource(string? source) Parameters source string The source URL of the video to be set. Returns AudioModuleBuilder The current builder. WithTitle(string?) Sets the title of the video. public AudioModuleBuilder WithTitle(string? title) Parameters title string The title of the video to be set. Returns AudioModuleBuilder The current builder. Operators operator ==(AudioModuleBuilder?, AudioModuleBuilder?) Determines whether the specified AudioModuleBuilder is equal to the current AudioModuleBuilder. public static bool operator ==(AudioModuleBuilder? left, AudioModuleBuilder? right) Parameters left AudioModuleBuilder right AudioModuleBuilder Returns bool true if the specified AudioModuleBuilder is equal to the current AudioModuleBuilder; otherwise, false. operator !=(AudioModuleBuilder?, AudioModuleBuilder?) Determines whether the specified AudioModuleBuilder is not equal to the current AudioModuleBuilder. public static bool operator !=(AudioModuleBuilder? left, AudioModuleBuilder? right) Parameters left AudioModuleBuilder right AudioModuleBuilder Returns bool true if the specified AudioModuleBuilder is not equal to the current AudioModuleBuilder; otherwise, false."
  },
  "api/Kook.BadgeStyle.html": {
    "href": "api/Kook.BadgeStyle.html",
    "title": "Enum BadgeStyle | Kook.Net 文档",
    "keywords": "Enum BadgeStyle Namespace Kook Assembly Kook.Net.Core.dll Specifies the style of badges. public enum BadgeStyle Fields GuildName = 0 The badge contains only the guild name. OnlineAndTotalMemberCount = 2 The badge contains the number of both online and all members in the guild. OnlineMemberCount = 1 The badge contains the number of online members in the guild."
  },
  "api/Kook.BilibiliVideoEmbed.html": {
    "href": "api/Kook.BilibiliVideoEmbed.html",
    "title": "Struct BilibiliVideoEmbed | Kook.Net 文档",
    "keywords": "Struct BilibiliVideoEmbed Namespace Kook Assembly Kook.Net.Core.dll Represents an embed in a message that links to a Bilibili video. public struct BilibiliVideoEmbed : IEmbed Implements IEmbed Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties BvNumber A string that represents the Bilibili video number in BV format. public readonly string BvNumber { get; } Property Value string Cover A string that represents the cover of the Bilibili video. public readonly string Cover { get; } Property Value string Duration A TimeSpan that represents the duration of the Bilibili video. public readonly TimeSpan Duration { get; } Property Value TimeSpan IframePath A string that represents the path of the iframe. public readonly string IframePath { get; } Property Value string OriginUrl A string that represents the origin URL of the Bilibili video. public readonly string OriginUrl { get; } Property Value string Title A string that represents the title of the Bilibili video. public readonly string Title { get; } Property Value string Type Gets the type of this embed. public EmbedType Type { get; } Property Value EmbedType A EmbedType that represents the type of this embed. Url Gets the URL of this embed. public readonly string Url { get; } Property Value string A string that represents the URL of this embed."
  },
  "api/Kook.BoostLevel.html": {
    "href": "api/Kook.BoostLevel.html",
    "title": "Enum BoostLevel | Kook.Net 文档",
    "keywords": "Enum BoostLevel Namespace Kook Assembly Kook.Net.Core.dll Specifies the boost level of a guild. public enum BoostLevel Fields Level1 = 1 Boost level 1. Level2 = 2 Boost level 2. Level3 = 3 Boost level 3. Level4 = 4 Boost level 4. Level5 = 5 Boost level 5. Level6 = 6 Boost level 6. None = 0 No boost."
  },
  "api/Kook.BoostSubscriptionMetadata.html": {
    "href": "api/Kook.BoostSubscriptionMetadata.html",
    "title": "Class BoostSubscriptionMetadata | Kook.Net 文档",
    "keywords": "Class BoostSubscriptionMetadata Namespace Kook Assembly Kook.Net.Core.dll A metadata containing boost subscription information. public class BoostSubscriptionMetadata Inheritance object BoostSubscriptionMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count Gets how many boost packs the user used for this subscription. public int Count { get; } Property Value int IsValid Gets whether this subscription has not expired. public bool IsValid { get; } Property Value bool Since Gets the date and time when this subscription began. public DateTimeOffset Since { get; } Property Value DateTimeOffset Until Gets the date and time when this subscription will end or ended. public DateTimeOffset Until { get; } Property Value DateTimeOffset"
  },
  "api/Kook.ButtonClickEventType.html": {
    "href": "api/Kook.ButtonClickEventType.html",
    "title": "Enum ButtonClickEventType | Kook.Net 文档",
    "keywords": "Enum ButtonClickEventType Namespace Kook Assembly Kook.Net.Core.dll Specifies the event type fired when a ButtonElement is clicked. public enum ButtonClickEventType Fields Link = 1 The user will be redirected to the specified URL when the button is clicked. None = 0 Nothing will happen when the button is clicked. ReturnValue = 2 The value of the button's Value property will be submitted."
  },
  "api/Kook.ButtonElement.html": {
    "href": "api/Kook.ButtonElement.html",
    "title": "Class ButtonElement | Kook.Net 文档",
    "keywords": "Class ButtonElement Namespace Kook Assembly Kook.Net.Core.dll A button element that can be used in an IModule. public class ButtonElement : IElement, IEquatable<ButtonElement>, IEquatable<IElement> Inheritance object ButtonElement Implements IElement IEquatable<ButtonElement> IEquatable<IElement> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(ButtonElement) CardExtensions.ToBuilder(IElement) Properties Click Gets the event type fired when the button is clicked. public ButtonClickEventType? Click { get; } Property Value ButtonClickEventType? A ButtonClickEventType value that represents the event type fired when the button is clicked. Text Gets the text element of the button. public IElement Text { get; } Property Value IElement An IElement value that represents the text element of the button. Theme Gets the theme of the button. public ButtonTheme? Theme { get; } Property Value ButtonTheme? A ButtonTheme value that represents the theme of the button. Type Gets the theme of the button. public ElementType Type { get; } Property Value ElementType An ElementType value that represents the theme of the button. Value Gets the value of the button. public string? Value { get; } Property Value string A string value that represents the value of the button. Methods Equals(ButtonElement?) Determines whether the specified ButtonElement is equal to the current ButtonElement. public bool Equals(ButtonElement? buttonElement) Parameters buttonElement ButtonElement The ButtonElement to compare with the current ButtonElement. Returns bool true if the specified ButtonElement is equal to the current ButtonElement; otherwise, false. Equals(object?) Determines whether the specified ButtonElement is equal to the current ButtonElement. public override bool Equals(object? obj) Parameters obj object The object to compare with the current ButtonElement. Returns bool true if the specified ButtonElement is equal to the current ButtonElement; otherwise, false. Remarks If the object passes is an ButtonElement, Equals(ButtonElement?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ButtonElement?, ButtonElement?) Determines whether the specified ButtonElement is equal to the current ButtonElement. public static bool operator ==(ButtonElement? left, ButtonElement? right) Parameters left ButtonElement right ButtonElement Returns bool true if the specified ButtonElement is equal to the current ButtonElement; otherwise, false. operator !=(ButtonElement?, ButtonElement?) Determines whether the specified ButtonElement is not equal to the current ButtonElement. public static bool operator !=(ButtonElement? left, ButtonElement? right) Parameters left ButtonElement right ButtonElement Returns bool true if the specified ButtonElement is not equal to the current ButtonElement; otherwise, false."
  },
  "api/Kook.ButtonElementBuilder.html": {
    "href": "api/Kook.ButtonElementBuilder.html",
    "title": "Class ButtonElementBuilder | Kook.Net 文档",
    "keywords": "Class ButtonElementBuilder Namespace Kook Assembly Kook.Net.Core.dll An element builder to build a ButtonElement. public class ButtonElementBuilder : IElementBuilder, IEquatable<ButtonElementBuilder>, IEquatable<IElementBuilder> Inheritance object ButtonElementBuilder Implements IElementBuilder IEquatable<ButtonElementBuilder> IEquatable<IElementBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ButtonElementBuilder() Initializes a new instance of the ButtonElementBuilder class. public ButtonElementBuilder() ButtonElementBuilder(string, ButtonTheme, string?, ButtonClickEventType) Initializes a new instance of the ButtonElementBuilder class. public ButtonElementBuilder(string text, ButtonTheme theme = ButtonTheme.Primary, string? value = null, ButtonClickEventType click = ButtonClickEventType.None) Parameters text string The text of the button. theme ButtonTheme The theme of the button. value string The value of the button. click ButtonClickEventType The type of the click event. Fields MaxButtonTextLength Gets the maximum button text length allowed by Kook. public const int MaxButtonTextLength = 40 Field Value int Properties Click Gets or sets the type of the click event. public ButtonClickEventType Click { get; set; } Property Value ButtonClickEventType A ButtonClickEventType that represents the type of the click event. Text Gets or sets the text element of the button. public IElementBuilder? Text { get; set; } Property Value IElementBuilder An IElementBuilder that represents the text of the button. Remarks This property only takes a PlainTextElementBuilder or a KMarkdownElementBuilder. Theme Gets or sets the theme of the button. public ButtonTheme Theme { get; set; } Property Value ButtonTheme A ButtonTheme that represents the theme of the button. Type Gets the type of the element that this builder builds. public ElementType Type { get; } Property Value ElementType An ElementType that represents the type of element that this builder builds. Value Gets or sets the value of the button. public string? Value { get; set; } Property Value string A string that represents the value of the button. Remarks If the Click is set to ReturnValue, the value of the property will be returned when the button is clicked. Methods Build() Builds the ButtonElementBuilder into a ButtonElement. public ButtonElement Build() Returns ButtonElement A ButtonElement represents the built element object. Exceptions ArgumentException The Text is neither a PlainTextElementBuilder nor a KMarkdownElementBuilder. ArgumentNullException The Text is null. ArgumentException The Text is empty. ArgumentException The length of Text is greater than MaxButtonTextLength. ArgumentException The Value of a button with a link event type is null or empty. Equals(ButtonElementBuilder?) Determines whether the specified ButtonElementBuilder is equal to the current ButtonElementBuilder. public bool Equals(ButtonElementBuilder? buttonElementBuilder) Parameters buttonElementBuilder ButtonElementBuilder The ButtonElementBuilder to compare with the current ButtonElementBuilder. Returns bool true if the specified ButtonElementBuilder is equal to the current ButtonElementBuilder; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current ButtonElementBuilder. public override bool Equals(object? obj) Parameters obj object The object to compare with the current ButtonElementBuilder. Returns bool true if the specified object is equal to the current ButtonElementBuilder; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithClick(ButtonClickEventType) Sets the type of the event to be fired when the button is clicked in a ButtonElement. public ButtonElementBuilder WithClick(ButtonClickEventType click) Parameters click ButtonClickEventType The type of the event to be fired when the button is clicked. Returns ButtonElementBuilder The current builder. WithText(KMarkdownElementBuilder) Sets the text of a ButtonElement. public ButtonElementBuilder WithText(KMarkdownElementBuilder text) Parameters text KMarkdownElementBuilder The builder of a KMarkdownElement, which will be set as the text of the button. Returns ButtonElementBuilder The current builder. WithText(PlainTextElementBuilder) Sets the text of a ButtonElement. public ButtonElementBuilder WithText(PlainTextElementBuilder text) Parameters text PlainTextElementBuilder The builder of a PlainTextElement, which will be set as the text of the button. Returns ButtonElementBuilder The current builder. WithText(string, bool) Sets the text of a ButtonElement. public ButtonElementBuilder WithText(string text, bool isKMarkdown = false) Parameters text string A string to be set as the text of the button. isKMarkdown bool A bool indicating whether the text is in KMarkdown format; if true, the text will be set as a KMarkdownElement; if false, the text will be set as a PlainTextElement. Returns ButtonElementBuilder The current builder. WithText<T>(Action<T>) Sets the text of a ButtonElement. public ButtonElementBuilder WithText<T>(Action<T> action) where T : IElementBuilder, new() Parameters action Action<T> The action to create a builder of an IElementBuilder, which will be set as the text of the button. The action must return a PlainTextElementBuilder or a KMarkdownElementBuilder. Returns ButtonElementBuilder The current builder. Type Parameters T WithTheme(ButtonTheme) Sets the theme of a ButtonElement. public ButtonElementBuilder WithTheme(ButtonTheme theme) Parameters theme ButtonTheme The theme to be set. Returns ButtonElementBuilder The current builder. WithValue(string?) Sets the value of a ButtonElement. public ButtonElementBuilder WithValue(string? value) Parameters value string The value to be set. Returns ButtonElementBuilder The current builder. Operators operator ==(ButtonElementBuilder?, ButtonElementBuilder?) Determines whether the specified ButtonElementBuilder is equal to the current ButtonElementBuilder. public static bool operator ==(ButtonElementBuilder? left, ButtonElementBuilder? right) Parameters left ButtonElementBuilder right ButtonElementBuilder Returns bool true if the specified ButtonElementBuilder is equal to the current ButtonElementBuilder; otherwise, false. operator !=(ButtonElementBuilder?, ButtonElementBuilder?) Determines whether the specified ButtonElementBuilder is not equal to the current ButtonElementBuilder. public static bool operator !=(ButtonElementBuilder? left, ButtonElementBuilder? right) Parameters left ButtonElementBuilder right ButtonElementBuilder Returns bool true if the specified ButtonElementBuilder is not equal to the current ButtonElementBuilder; otherwise, false."
  },
  "api/Kook.ButtonTheme.html": {
    "href": "api/Kook.ButtonTheme.html",
    "title": "Enum ButtonTheme | Kook.Net 文档",
    "keywords": "Enum ButtonTheme Namespace Kook Assembly Kook.Net.Core.dll Specifies the theme of a ButtonElement. public enum ButtonTheme Fields Danger = 3 The button is a danger button. Info = 4 The button is an info button. Primary = 0 The button is a primary button. Secondary = 5 The button is a secondary button. Success = 1 The button is a success button. Warning = 2 The button is a warning button."
  },
  "api/Kook.CacheMode.html": {
    "href": "api/Kook.CacheMode.html",
    "title": "Enum CacheMode | Kook.Net 文档",
    "keywords": "Enum CacheMode Namespace Kook Assembly Kook.Net.Core.dll Specifies the cache mode that should be used. public enum CacheMode Fields AllowDownload = 0 Allows the object to be downloaded if it does not exist in the current cache. CacheOnly = 1 Only allows the object to be pulled from the existing cache."
  },
  "api/Kook.Cacheable-2.html": {
    "href": "api/Kook.Cacheable-2.html",
    "title": "Struct Cacheable<TEntity, TId> | Kook.Net 文档",
    "keywords": "Struct Cacheable<TEntity, TId> Namespace Kook Assembly Kook.Net.Core.dll Represents a cached entity. public readonly struct Cacheable<TEntity, TId> where TEntity : IEntity<TId> where TId : IEquatable<TId> Type Parameters TEntity The type of entity that is cached. TId The type of this entity's ID. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties HasValue Gets whether this entity is cached. public bool HasValue { get; } Property Value bool Id Gets the ID of this entity. public TId Id { get; } Property Value TId Value Gets the entity if it could be pulled from cache. public TEntity? Value { get; } Property Value TEntity Remarks This value is not guaranteed to be set; in cases where the entity cannot be pulled from cache, it is null. Methods DownloadAsync() Downloads this entity to cache. public Task<TEntity?> DownloadAsync() Returns Task<TEntity> A task that represents the asynchronous download operation. The task result contains the downloaded entity. Exceptions HttpException Thrown when used from a user account. NullReferenceException Thrown when the entity is deleted. GetOrDownloadAsync() Returns the cached entity if it exists; otherwise downloads it. public Task<TEntity?> GetOrDownloadAsync() Returns Task<TEntity> A task that represents the asynchronous operation that attempts to get the entity via cache or to download the entity. The task result contains the downloaded entity. Exceptions HttpException Thrown when used from a user account. NullReferenceException Thrown when the entity is deleted and is not in cache."
  },
  "api/Kook.Cacheable-4.html": {
    "href": "api/Kook.Cacheable-4.html",
    "title": "Struct Cacheable<TCachedEntity, TDownloadableEntity, TRelationship, TId> | Kook.Net 文档",
    "keywords": "Struct Cacheable<TCachedEntity, TDownloadableEntity, TRelationship, TId> Namespace Kook Assembly Kook.Net.Core.dll Represents a cached entity that can be downloaded. public readonly struct Cacheable<TCachedEntity, TDownloadableEntity, TRelationship, TId> where TCachedEntity : IEntity<TId>, TRelationship where TDownloadableEntity : IEntity<TId>, TRelationship where TId : IEquatable<TId> Type Parameters TCachedEntity The type of entity that is cached. TDownloadableEntity The type of entity that can be downloaded. TRelationship The common type of TCachedEntity and TDownloadableEntity. TId The type of the corresponding entity's ID. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties HasValue Gets whether this entity is cached. public bool HasValue { get; } Property Value bool Id Gets the ID of this entity. public TId Id { get; } Property Value TId Value Gets the entity if it could be pulled from cache. public TCachedEntity? Value { get; } Property Value TCachedEntity Remarks This value is not guaranteed to be set; in cases where the entity cannot be pulled from cache, it is null. Methods DownloadAsync() Downloads this entity. public Task<TDownloadableEntity?> DownloadAsync() Returns Task<TDownloadableEntity> A task that represents the asynchronous download operation. The task result contains the downloaded entity. Exceptions HttpException Thrown when used from a user account. NullReferenceException Thrown when the entity is deleted. GetOrDownloadAsync() Returns the cached entity if it exists; otherwise downloads it. public Task<TRelationship?> GetOrDownloadAsync() Returns Task<TRelationship> A task that represents the asynchronous operation that attempts to get the entity via cache or to download the entity. The task result contains the downloaded entity. Exceptions HttpException Thrown when used from a user account. NullReferenceException Thrown when the entity is deleted and is not in cache."
  },
  "api/Kook.Card.html": {
    "href": "api/Kook.Card.html",
    "title": "Class Card | Kook.Net 文档",
    "keywords": "Class Card Namespace Kook Assembly Kook.Net.Core.dll Represents a card object seen in an IUserMessage. public class Card : ICard, IEquatable<Card>, IEquatable<ICard> Inheritance object Card Implements ICard IEquatable<Card> IEquatable<ICard> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(Card) CardExtensions.ToBuilder(ICard) CardJsonExtension.ToJsonString(ICard, bool) Properties Color Gets the color of this embed. public Color? Color { get; } Property Value Color? A Color represents a color present on the side of the card, or null if none is set. ModuleCount Gets the number of the modules in this card. public int ModuleCount { get; } Property Value int An int value that represents how many modules are in this card. Modules Gets the modules in this card. public ImmutableArray<IModule> Modules { get; } Property Value ImmutableArray<IModule> An array of the modules of the card. Size Gets the size of this card. public CardSize Size { get; } Property Value CardSize A CardSize value that represents the size of this card. Theme Gets the theme of this card. public CardTheme Theme { get; } Property Value CardTheme A CardTheme value that represents the theme of this card. Type Gets the type of the card. public CardType Type { get; } Property Value CardType A CardType value that represents the type of the card. Methods Equals(Card?) Determines whether the specified Card is equal to the current Card. public bool Equals(Card? card) Parameters card Card The Card to compare with the current Card. Returns bool true if the specified Card is equal to the current Card; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current Card. public override bool Equals(object? obj) Parameters obj object The object to compare with the current Card. Returns bool true if the specified Card is equal to the current Card; otherwise, false. Remarks If the object passes is an Card, Equals(Card?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(Card, Card) Determines whether the specified Card is equal to the current Card. public static bool operator ==(Card left, Card right) Parameters left Card right Card Returns bool true if the specified Card is equal to the current Card; otherwise, false. operator !=(Card, Card) Determines whether the specified Card is not equal to the current Card. public static bool operator !=(Card left, Card right) Parameters left Card right Card Returns bool true if the specified Card is not equal to the current Card; otherwise, false."
  },
  "api/Kook.CardBuilder.html": {
    "href": "api/Kook.CardBuilder.html",
    "title": "Class CardBuilder | Kook.Net 文档",
    "keywords": "Class CardBuilder Namespace Kook Assembly Kook.Net.Core.dll Represents a builder class for creating a Card. public class CardBuilder : ICardBuilder, IEquatable<CardBuilder>, IEquatable<ICardBuilder> Inheritance object CardBuilder Implements ICardBuilder IEquatable<CardBuilder> IEquatable<ICardBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardJsonExtension.ToJsonString(ICardBuilder, bool) Constructors CardBuilder(CardTheme, Color?, CardSize, IList<IModuleBuilder>?) Initializes a new instance of the CardBuilder class with the specified parameters. public CardBuilder(CardTheme theme = CardTheme.Primary, Color? color = null, CardSize size = CardSize.Large, IList<IModuleBuilder>? modules = null) Parameters theme CardTheme The theme of the card. color Color? The color displayed along the left side of the card. size CardSize The size of the card. modules IList<IModuleBuilder> The modules in the card. Properties Color Gets or sets the color displayed along the left side of the card. public Color? Color { get; set; } Property Value Color? A Color value that represents the color displayed along the left side of the card. Modules Gets or sets the modules in the card. public IList<IModuleBuilder> Modules { get; set; } Property Value IList<IModuleBuilder> An IList<T> containing the modules in the card. Size Gets or sets the size of the card. public CardSize Size { get; set; } Property Value CardSize A CardSize value that represents the size of the card. Theme Gets or sets the theme of the card. public CardTheme Theme { get; set; } Property Value CardTheme A CardTheme value that represents the theme of the card. Type Gets the type of the card. public CardType Type { get; } Property Value CardType A CardType value that represents the type of the card. Methods AddModule(IModuleBuilder) Adds a module to the card. public CardBuilder AddModule(IModuleBuilder module) Parameters module IModuleBuilder An IModuleBuilder that represents the module to be added to the card. Returns CardBuilder The current builder. AddModule<T>(Action<T>?) Adds a module to the card. public CardBuilder AddModule<T>(Action<T>? action = null) where T : IModuleBuilder, new() Parameters action Action<T> The action to adds a module to the card. Returns CardBuilder The current builder. Type Parameters T Build() Builds the CardBuilder into a Card. public Card Build() Returns Card A KMarkdownElement represents the built element object. Exceptions InvalidOperationException The theme of the card cannot be invisible, which is reserved for text graphics mixed messages. Equals(CardBuilder?) Determines whether the specified CardBuilder is equal to the current CardBuilder. public bool Equals(CardBuilder? cardBuilder) Parameters cardBuilder CardBuilder The CardBuilder to compare with the current CardBuilder. Returns bool true if the specified CardBuilder is equal to the current CardBuilder; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current CardBuilder. public override bool Equals(object? obj) Parameters obj object The object to compare with the current CardBuilder. Returns bool true if the specified object is equal to the current CardBuilder; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithColor(Color?) Sets the color displayed along the left side of the card. public CardBuilder WithColor(Color? color) Parameters color Color? A Color value that represents the color displayed along the left side of the card to be set. Returns CardBuilder The current builder. WithSize(CardSize) Sets the size of the card. public CardBuilder WithSize(CardSize size) Parameters size CardSize A CardSize value that represents the size of the card to be set. Returns CardBuilder The current builder. WithTheme(CardTheme) Sets the theme of the card. public CardBuilder WithTheme(CardTheme theme) Parameters theme CardTheme A CardTheme value that represents the theme of the card to be set. Returns CardBuilder The current builder. Operators operator ==(CardBuilder?, CardBuilder?) Determines whether the specified CardBuilder is equal to the current CardBuilder. public static bool operator ==(CardBuilder? left, CardBuilder? right) Parameters left CardBuilder right CardBuilder Returns bool true if the specified CardBuilder is equal to the current CardBuilder; otherwise, false. operator !=(CardBuilder?, CardBuilder?) Determines whether the specified CardBuilder is not equal to the current CardBuilder. public static bool operator !=(CardBuilder? left, CardBuilder? right) Parameters left CardBuilder right CardBuilder Returns bool true if the specified CardBuilder is not equal to the current CardBuilder; otherwise, false."
  },
  "api/Kook.CardEmbed.html": {
    "href": "api/Kook.CardEmbed.html",
    "title": "Struct CardEmbed | Kook.Net 文档",
    "keywords": "Struct CardEmbed Namespace Kook Assembly Kook.Net.Core.dll Represents an embed in a message that public struct CardEmbed : IEmbed Implements IEmbed Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Card Gets the cards in this embed. public readonly ICard Card { get; } Property Value ICard Type Gets the type of this embed. public EmbedType Type { get; } Property Value EmbedType A EmbedType that represents the type of this embed."
  },
  "api/Kook.CardExtensions.html": {
    "href": "api/Kook.CardExtensions.html",
    "title": "Class CardExtensions | Kook.Net 文档",
    "keywords": "Class CardExtensions Namespace Kook Assembly Kook.Net.Core.dll Provides extension methods for IElement, IModule and ICard. public static class CardExtensions Inheritance object CardExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToBuilder(ActionGroupModule) Converts the ActionGroupModule to a ActionGroupModuleBuilder with the same properties. public static ActionGroupModuleBuilder ToBuilder(this ActionGroupModule entity) Parameters entity ActionGroupModule Returns ActionGroupModuleBuilder ToBuilder(AudioModule) Converts the AudioModule to an AudioModuleBuilder with the same properties. public static AudioModuleBuilder ToBuilder(this AudioModule entity) Parameters entity AudioModule Returns AudioModuleBuilder ToBuilder(ButtonElement) Converts the ButtonElement to a ButtonElementBuilder with the same properties. public static ButtonElementBuilder ToBuilder(this ButtonElement entity) Parameters entity ButtonElement Returns ButtonElementBuilder ToBuilder(Card) Converts the Card to a CardBuilder with the same properties. public static CardBuilder ToBuilder(this Card entity) Parameters entity Card Returns CardBuilder ToBuilder(ContainerModule) Converts the ContainerModule to a ContainerModuleBuilder with the same properties. public static ContainerModuleBuilder ToBuilder(this ContainerModule entity) Parameters entity ContainerModule Returns ContainerModuleBuilder ToBuilder(ContextModule) Converts the ContextModule to a ContextModuleBuilder with the same properties. public static ContextModuleBuilder ToBuilder(this ContextModule entity) Parameters entity ContextModule Returns ContextModuleBuilder ToBuilder(CountdownModule) Converts the CountdownModule to a CountdownModuleBuilder with the same properties. public static CountdownModuleBuilder ToBuilder(this CountdownModule entity) Parameters entity CountdownModule Returns CountdownModuleBuilder ToBuilder(DividerModule) Converts the DividerModule to a DividerModuleBuilder with the same properties. public static DividerModuleBuilder ToBuilder(this DividerModule _) Parameters _ DividerModule Returns DividerModuleBuilder ToBuilder(FileModule) Converts the FileModule to a FileModuleBuilder with the same properties. public static FileModuleBuilder ToBuilder(this FileModule entity) Parameters entity FileModule Returns FileModuleBuilder ToBuilder(HeaderModule) Converts the HeaderModule to a HeaderModuleBuilder with the same properties. public static HeaderModuleBuilder ToBuilder(this HeaderModule entity) Parameters entity HeaderModule Returns HeaderModuleBuilder ToBuilder(ICard) Converts the ICard to an ICardBuilder with the same properties. public static ICardBuilder ToBuilder(this ICard entity) Parameters entity ICard Returns ICardBuilder ToBuilder(IElement) Converts the IElement to a IElementBuilder with the same properties. public static IElementBuilder ToBuilder(this IElement entity) Parameters entity IElement Returns IElementBuilder ToBuilder(IModule) Converts the IModule to a IModuleBuilder with the same properties. public static IModuleBuilder ToBuilder(this IModule entity) Parameters entity IModule Returns IModuleBuilder ToBuilder(ImageElement) Converts the ImageElement to an ImageElementBuilder with the same properties. public static ImageElementBuilder ToBuilder(this ImageElement entity) Parameters entity ImageElement Returns ImageElementBuilder ToBuilder(ImageGroupModule) Converts the ImageGroupModule to a ImageGroupModuleBuilder with the same properties. public static ImageGroupModuleBuilder ToBuilder(this ImageGroupModule entity) Parameters entity ImageGroupModule Returns ImageGroupModuleBuilder ToBuilder(InviteModule) Converts the InviteModule to an InviteModuleBuilder with the same properties. public static InviteModuleBuilder ToBuilder(this InviteModule entity) Parameters entity InviteModule Returns InviteModuleBuilder ToBuilder(KMarkdownElement) Converts the KMarkdownElement to a KMarkdownElementBuilder with the same properties. public static KMarkdownElementBuilder ToBuilder(this KMarkdownElement entity) Parameters entity KMarkdownElement Returns KMarkdownElementBuilder ToBuilder(ParagraphStruct) Converts the ParagraphStruct to a ParagraphStructBuilder with the same properties. public static ParagraphStructBuilder ToBuilder(this ParagraphStruct entity) Parameters entity ParagraphStruct Returns ParagraphStructBuilder ToBuilder(PlainTextElement) Converts the PlainTextElement to a PlainTextElementBuilder with the same properties. public static PlainTextElementBuilder ToBuilder(this PlainTextElement entity) Parameters entity PlainTextElement Returns PlainTextElementBuilder ToBuilder(SectionModule) Converts the SectionModule to a SectionModuleBuilder with the same properties. public static SectionModuleBuilder ToBuilder(this SectionModule entity) Parameters entity SectionModule Returns SectionModuleBuilder ToBuilder(VideoModule) Converts the VideoModule to a VideoModuleBuilder with the same properties. public static VideoModuleBuilder ToBuilder(this VideoModule entity) Parameters entity VideoModule Returns VideoModuleBuilder"
  },
  "api/Kook.CardMarkup.CardMarkupSerializer.html": {
    "href": "api/Kook.CardMarkup.CardMarkupSerializer.html",
    "title": "Class CardMarkupSerializer | Kook.Net 文档",
    "keywords": "Class CardMarkupSerializer Namespace Kook.CardMarkup Assembly Kook.Net.CardMarkup.dll Serializer for Card Message XML markup public static class CardMarkupSerializer Inheritance object CardMarkupSerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(FileInfo) Deserialize a Card Message XML markup file to a ICard list. One XML markup file has one card-message element, which can contain multiple card elements. public static IEnumerable<ICard> Deserialize(FileInfo file) Parameters file FileInfo UTF-8 encoded XML file Returns IEnumerable<ICard> ICard enumerable Deserialize(Stream) Deserialize a Card Message XML markup file to a ICard list. One XML markup file has one card-message element, which can contain multiple card elements. public static IEnumerable<ICard> Deserialize(Stream xmlStream) Parameters xmlStream Stream UTF-8 encoded XML stream Returns IEnumerable<ICard> ICard enumerable Deserialize(string) Deserialize a Card Message XML markup text to a ICard list. One XML markup file has one card-message element, which can contain multiple card elements. public static IEnumerable<ICard> Deserialize(string xmlText) Parameters xmlText string UTF-8 encoded XML text Returns IEnumerable<ICard> ICard enumerable DeserializeAsync(FileInfo, CancellationToken) Deserialize a Card Message XML markup file to a ICard list. One XML markup file has one card-message element, which can contain multiple card elements. public static Task<IEnumerable<ICard>> DeserializeAsync(FileInfo file, CancellationToken token = default) Parameters file FileInfo UTF-8 encoded XML file token CancellationToken Cancellation token Returns Task<IEnumerable<ICard>> ICard enumerable DeserializeAsync(Stream, CancellationToken) Deserialize a Card Message XML stream to a ICard list. One XML markup file has one card-message element, which can contain multiple card elements. public static Task<IEnumerable<ICard>> DeserializeAsync(Stream xmlStream, CancellationToken token = default) Parameters xmlStream Stream UTF-8 encoded XML stream token CancellationToken Cancellation token Returns Task<IEnumerable<ICard>> ICard enumerable DeserializeAsync(string, CancellationToken) Deserialize a Card Message XML markup text to a ICard list. One XML markup file has one card-message element, which can contain multiple card elements. public static Task<IEnumerable<ICard>> DeserializeAsync(string xmlText, CancellationToken token = default) Parameters xmlText string UTF-8 encoded XML text token CancellationToken Cancellation token Returns Task<IEnumerable<ICard>> ICard enumerable TryDeserialize(FileInfo, out IEnumerable<ICard>?) Try to deserialize a Card Message XML markup file to a ICard list. public static bool TryDeserialize(FileInfo file, out IEnumerable<ICard>? cards) Parameters file FileInfo UTF-8 encoded XML file cards IEnumerable<ICard> ICard enumerable, will be null if return value is false Returns bool True if deserialization is successful, otherwise false TryDeserialize(Stream, out IEnumerable<ICard>?) Try to deserialize a Card Message XML markup file to a ICard list. public static bool TryDeserialize(Stream xmlStream, out IEnumerable<ICard>? cards) Parameters xmlStream Stream UTF-8 encoded XML stream cards IEnumerable<ICard> ICard enumerable, will be null if return value is false Returns bool True if deserialization is successful, otherwise false TryDeserialize(string, out IEnumerable<ICard>?) Try to deserialize a Card Message XML markup file to a ICard list. public static bool TryDeserialize(string xmlText, out IEnumerable<ICard>? cards) Parameters xmlText string UTF-8 encoded XML text cards IEnumerable<ICard> ICard enumerable, will be null if return value is false Returns bool True if deserialization is successful, otherwise false"
  },
  "api/Kook.CardMarkup.html": {
    "href": "api/Kook.CardMarkup.html",
    "title": "Namespace Kook.CardMarkup | Kook.Net 文档",
    "keywords": "Namespace Kook.CardMarkup Classes CardMarkupSerializer Serializer for Card Message XML markup"
  },
  "api/Kook.CardSize.html": {
    "href": "api/Kook.CardSize.html",
    "title": "Enum CardSize | Kook.Net 文档",
    "keywords": "Enum CardSize Namespace Kook Assembly Kook.Net.Core.dll Specifies the size of a card. public enum CardSize Fields Large = 1 The card is a large card. Small = 0 The card is a small card."
  },
  "api/Kook.CardTheme.html": {
    "href": "api/Kook.CardTheme.html",
    "title": "Enum CardTheme | Kook.Net 文档",
    "keywords": "Enum CardTheme Namespace Kook Assembly Kook.Net.Core.dll Specifies the theme of the card. public enum CardTheme : uint Fields Danger = 3 The card shows like an error message. Info = 4 The card shows like an info message. Invisible = 7 The card is a text graphic mixed message. None = 6 The card shows like a dark message. Primary = 0 The card shows like a regular message. Secondary = 5 The card shows like a light message. Success = 1 The card shows like a success message. Warning = 2 The card shows like a warning message."
  },
  "api/Kook.CardType.html": {
    "href": "api/Kook.CardType.html",
    "title": "Enum CardType | Kook.Net 文档",
    "keywords": "Enum CardType Namespace Kook Assembly Kook.Net.Core.dll Specifies the type of the card. public enum CardType Fields Card = 0 The card is a normal card."
  },
  "api/Kook.ChannelExtensions.html": {
    "href": "api/Kook.ChannelExtensions.html",
    "title": "Class ChannelExtensions | Kook.Net 文档",
    "keywords": "Class ChannelExtensions Namespace Kook Assembly Kook.Net.Core.dll Provides extension methods for IChannel. public static class ChannelExtensions Inheritance object ChannelExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetChannelType(IChannel) Attempts to get the ChannelType based off of the channel's interfaces. public static ChannelType? GetChannelType(this IChannel channel) Parameters channel IChannel The channel to get the type of. Returns ChannelType? The ChannelType of the channel if found, otherwise null. GetJumpUrl(IChannel) Gets a URL that jumps to the channel. public static string GetJumpUrl(this IChannel channel) Parameters channel IChannel The channel to jump to. Returns string A string that contains a URL for jumping to the message in chat."
  },
  "api/Kook.ChannelPermission.html": {
    "href": "api/Kook.ChannelPermission.html",
    "title": "Enum ChannelPermission | Kook.Net 文档",
    "keywords": "Enum ChannelPermission Namespace Kook Assembly Kook.Net.Core.dll Represents a permission can be granted to a channel. [Flags] public enum ChannelPermission : uint Fields AddReactions = 262144 Allows for the addition of reactions to messages. AttachFiles = 16384 Allows for uploading images and files. Connect = 32768 Allows for joining of a voice channel. CreateInvites = 8 Allows creation of invites. DeafenMembers = 16777216 Allows for deafening of members in a voice channel. ManageChannels = 32 Allows management and editing of channels. ManageMessages = 8192 Allows for deletion of other users messages. ManageRoles = 1024 Allows management and editing of roles. ManageVoice = 65536 Allows for disconnection of members, and moving of members between voice channels. MentionEveryone = 131072 Allows for using the everyone mention tag to notify all users in a channel, and the online mention tag to notify all online users in a channel. MuteMembers = 33554432 Allows for muting members in a voice channel. PassiveConnect = 1048576 Limits the user to connecting to a voice channel only when the user is invited or moved by others. PlaySoundtrack = 134217728 Allows for playing soundtracks in a voice channel. SendMessages = 4096 Allows for sending messages in a channel ShareScreen = 268435456 Allows for screen share. Speak = 8388608 Allows for speaking in a voice channel. UseVoiceActivity = 4194304 Allows for speaking in voice a channel without having to press the speaking key. ViewChannel = 2048 Allows guild members to view a channel, which includes reading messages in text channels."
  },
  "api/Kook.ChannelPermissions.html": {
    "href": "api/Kook.ChannelPermissions.html",
    "title": "Struct ChannelPermissions | Kook.Net 文档",
    "keywords": "Struct ChannelPermissions Namespace Kook Assembly Kook.Net.Core.dll Represents a set of permissions for a channel. public struct ChannelPermissions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ChannelPermissions(bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?) Creates a new ChannelPermissions with the provided permissions. public ChannelPermissions(bool? createInvites = false, bool? manageChannels = false, bool? manageRoles = false, bool? viewChannel = false, bool? sendMessages = false, bool? manageMessages = false, bool? attachFiles = false, bool? connect = false, bool? manageVoice = false, bool? mentionEveryone = false, bool? addReactions = false, bool? passiveConnect = false, bool? useVoiceActivity = false, bool? speak = false, bool? deafenMembers = false, bool? muteMembers = false, bool? playSoundtrack = false, bool? shareScreen = false) Parameters createInvites bool? manageChannels bool? manageRoles bool? viewChannel bool? sendMessages bool? manageMessages bool? attachFiles bool? connect bool? manageVoice bool? mentionEveryone bool? addReactions bool? passiveConnect bool? useVoiceActivity bool? speak bool? deafenMembers bool? muteMembers bool? playSoundtrack bool? shareScreen bool? ChannelPermissions(ulong) Creates a new ChannelPermissions with the provided packed value. public ChannelPermissions(ulong rawValue) Parameters rawValue ulong Fields Category Gets a ChannelPermissions that grants all permissions for category channels. public static readonly ChannelPermissions Category Field Value ChannelPermissions DM Gets a ChannelPermissions that grants all permissions for direct message channels. public static readonly ChannelPermissions DM Field Value ChannelPermissions None Gets a blank ChannelPermissions that grants no permissions. public static readonly ChannelPermissions None Field Value ChannelPermissions Text Gets a ChannelPermissions that grants all permissions for text channels. public static readonly ChannelPermissions Text Field Value ChannelPermissions Voice Gets a ChannelPermissions that grants all permissions for voice channels. public static readonly ChannelPermissions Voice Field Value ChannelPermissions Properties AddReactions If true, a user may add reactions. public bool AddReactions { get; } Property Value bool AttachFiles If true, a user may send files. public bool AttachFiles { get; } Property Value bool Connect If true, a user may connect to a voice channel. public bool Connect { get; } Property Value bool CreateInvites If true, a user may create invites. public bool CreateInvites { get; } Property Value bool DeafenMembers If true, a user may deafen users. public bool DeafenMembers { get; } Property Value bool ManageChannels If true, a user may view and revoke invites. public bool ManageChannels { get; } Property Value bool ManageMessages If true, a user may delete messages. public bool ManageMessages { get; } Property Value bool ManageRoles If true, a user may adjust roles. public bool ManageRoles { get; } Property Value bool ManageVoice If true, a user may kick other users from voice channels, and move other users between voice channels. public bool ManageVoice { get; } Property Value bool MentionEveryone If true, a user may mention all users. public bool MentionEveryone { get; } Property Value bool MuteMembers If true, a user may mute users. public bool MuteMembers { get; } Property Value bool PassiveConnect If true, a user may connect to a voice channel only when the user is invited or moved by other users. public bool PassiveConnect { get; } Property Value bool PlaySoundtrack If true, a user may play soundtracks in a voice channel. public bool PlaySoundtrack { get; } Property Value bool RawValue Gets a packed value representing all the permissions in this ChannelPermissions. public readonly ulong RawValue { get; } Property Value ulong SendMessages If true, a user may send messages. public bool SendMessages { get; } Property Value bool ShareScreen If true, a user may share screen in a voice channel. public bool ShareScreen { get; } Property Value bool Speak If true, a user may speak in a voice channel. public bool Speak { get; } Property Value bool UseVoiceActivity If true, a user may use voice activation. public bool UseVoiceActivity { get; } Property Value bool ViewChannel If true, a user may view channels. public bool ViewChannel { get; } Property Value bool Methods All(IChannel) Gets a ChannelPermissions that grants all permissions for a given channel type. public static ChannelPermissions All(IChannel channel) Parameters channel IChannel Returns ChannelPermissions Exceptions ArgumentException Unknown channel type. Has(ChannelPermission) Returns a value that indicates if a specific ChannelPermission is enabled in these permissions. public bool Has(ChannelPermission permission) Parameters permission ChannelPermission The permission value to check for. Returns bool true if the permission is enabled, false otherwise. Modify(bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?) Creates a new ChannelPermissions from this one, changing the provided non-null permissions. public ChannelPermissions Modify(bool? createInvites = null, bool? manageChannels = null, bool? manageRoles = null, bool? viewChannel = null, bool? sendMessages = null, bool? manageMessages = null, bool? attachFiles = null, bool? connect = null, bool? manageVoice = null, bool? mentionEveryone = null, bool? addReactions = null, bool? passiveConnect = null, bool? useVoiceActivity = null, bool? speak = null, bool? deafenMembers = null, bool? muteMembers = null, bool? playSoundtrack = null, bool? shareScreen = null) Parameters createInvites bool? manageChannels bool? manageRoles bool? viewChannel bool? sendMessages bool? manageMessages bool? attachFiles bool? connect bool? manageVoice bool? mentionEveryone bool? addReactions bool? passiveConnect bool? useVoiceActivity bool? speak bool? deafenMembers bool? muteMembers bool? playSoundtrack bool? shareScreen bool? Returns ChannelPermissions ToList() Returns a List<T> containing all of the ChannelPermission flags that are enabled. public List<ChannelPermission> ToList() Returns List<ChannelPermission> A List<T> containing ChannelPermission flags. Empty if none are enabled. ToString() Gets the raw value of the permissions. public override string ToString() Returns string"
  },
  "api/Kook.ChannelType.html": {
    "href": "api/Kook.ChannelType.html",
    "title": "Enum ChannelType | Kook.Net 文档",
    "keywords": "Enum ChannelType Namespace Kook Assembly Kook.Net.Core.dll Specifies the type of a guild channel. public enum ChannelType Fields Category = 0 Specifies that the channel is a guild category channel. DM = 3 Specifies that the channel is a direct message channel. Text = 1 Specifies that the channel is a guild text channel. Unspecified = -1 Specifies that the type of the channel is unknown. Voice = 2 Specifies that the channel is a guild voice channel."
  },
  "api/Kook.ClientType.html": {
    "href": "api/Kook.ClientType.html",
    "title": "Enum ClientType | Kook.Net 文档",
    "keywords": "Enum ClientType Namespace Kook Assembly Kook.Net.Core.dll Defines the types of clients a user can be active on. public enum ClientType Fields Android = 1 The user is active using the Android application. WebSocket = 0 The user is active using a WebSocket connection to the server. iOS = 2 The user is active using the iOS application."
  },
  "api/Kook.Color.html": {
    "href": "api/Kook.Color.html",
    "title": "Struct Color | Kook.Net 文档",
    "keywords": "Struct Color Namespace Kook Assembly Kook.Net.Core.dll Represents a color used in Kook. public readonly struct Color Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Color(byte, byte, byte) Initializes a Color struct with the given RGB bytes. public Color(byte r, byte g, byte b) Parameters r byte The byte that represents the red color. g byte The byte that represents the green color. b byte The byte that represents the blue color. Examples The following will create a color that has a value of #607D8B. Color darkGrey = new Color((byte)0b_01100000, (byte)0b_01111101, (byte)0b_10001011); Exceptions ArgumentException Value exceeds MaxDecimalValue. Color(int, int, int) Initializes a Color struct with the given RGB value. public Color(int r, int g, int b) Parameters r int The value that represents the red color. Must be within 0~255. g int The value that represents the green color. Must be within 0~255. b int The value that represents the blue color. Must be within 0~255. Examples The following will create a color that has a value of #607D8B. Color darkGrey = new Color(96, 125, 139); Exceptions ArgumentOutOfRangeException The argument value is not between 0 to 255. Color(float, float, float) Initializes a Color struct with the given RGB float value. public Color(float r, float g, float b) Parameters r float The value that represents the red color. Must be within 0~1. g float The value that represents the green color. Must be within 0~1. b float The value that represents the blue color. Must be within 0~1. Examples The following will create a color that has a value of #607C8C. Color darkGrey = new Color(0.38f, 0.49f, 0.55f); Exceptions ArgumentOutOfRangeException The argument value is not between 0 to 1. Color(uint) Initializes a Color struct with the given raw value. public Color(uint rawValue) Parameters rawValue uint The raw value of the color (e.g. 0x607D8B). Examples The following will create a color that has a hex value of #607D8B. Color darkGrey = new Color(0x607D8B); Exceptions ArgumentException Value exceeds MaxDecimalValue. Fields Blue Gets the blue color value. public static readonly Color Blue Field Value Color A color struct with the hex value of 3498DB. See http://www.color-hex.com/color/3498DB DarkBlue Gets the dark blue color value. public static readonly Color DarkBlue Field Value Color A color struct with the hex value of 206694. See http://www.color-hex.com/color/206694 DarkGreen Gets the dark green color value. public static readonly Color DarkGreen Field Value Color A color struct with the hex value of 1F8B4C. See http://www.color-hex.com/color/1F8B4C DarkGrey Gets the dark grey color value. public static readonly Color DarkGrey Field Value Color A color struct with the hex value of 607D8B. See http://www.color-hex.com/color/607D8B DarkMagenta Gets the dark magenta color value. public static readonly Color DarkMagenta Field Value Color A color struct with the hex value of AD1457. See http://www.color-hex.com/color/AD1457 DarkOrange Gets the dark orange color value. public static readonly Color DarkOrange Field Value Color A color struct with the hex value of A84300. See http://www.color-hex.com/color/A84300 DarkPurple Gets the dark purple color value. public static readonly Color DarkPurple Field Value Color A color struct with the hex value of 71368A. See http://www.color-hex.com/color/71368A DarkRed Gets the dark red color value. public static readonly Color DarkRed Field Value Color A color struct with the hex value of 992D22. See http://www.color-hex.com/color/992D22 DarkTeal Gets the dark teal color value. public static readonly Color DarkTeal Field Value Color A color struct with the hex value of 11806A. See http://www.color-hex.com/color/11806A DarkerGrey Gets the darker grey color value. public static readonly Color DarkerGrey Field Value Color A color struct with the hex value of 3A4B53. See http://www.color-hex.com/color/3A4B53 Default Gets the default user color value. public static readonly Color Default Field Value Color Gold Gets the gold color value. public static readonly Color Gold Field Value Color A color struct with the hex value of F1C40F. See http://www.color-hex.com/color/F1C40F Green Gets the green color value. public static readonly Color Green Field Value Color A color struct with the hex value of 2ECC71. See http://www.color-hex.com/color/2ECC71 Grey Gets the grey color value. public static readonly Color Grey Field Value Color A color struct with the hex value of 666D71. See http://www.color-hex.com/color/666D71 LightGrey Gets the light grey color value. public static readonly Color LightGrey Field Value Color A color struct with the hex value of 95A5A6. See http://www.color-hex.com/color/95A5A6 LightOrange Gets the light orange color value. public static readonly Color LightOrange Field Value Color A color struct with the hex value of C27C0E. See http://www.color-hex.com/color/C27C0E Magenta Gets the magenta color value. public static readonly Color Magenta Field Value Color A color struct with the hex value of E91E63. See http://www.color-hex.com/color/E91E63 MaxDecimalValue Gets the max decimal value of color. public const uint MaxDecimalValue = 16777215 Field Value uint Orange Gets the orange color value. public static readonly Color Orange Field Value Color A color struct with the hex value of E67E22. See http://www.color-hex.com/color/E67E22 Purple Gets the purple color value. public static readonly Color Purple Field Value Color A color struct with the hex value of 9B59B6. See http://www.color-hex.com/color/9B59B6 Red Gets the red color value. public static readonly Color Red Field Value Color A color struct with the hex value of E74C3C. See http://www.color-hex.com/color/E74C3C Teal Gets the teal color value. public static readonly Color Teal Field Value Color A color struct with the hex value of 1ABC9C. See http://www.color-hex.com/color/1ABC9C Properties B Gets the blue component for this color. public byte B { get; } Property Value byte G Gets the green component for this color. public byte G { get; } Property Value byte R Gets the red component for this color. public byte R { get; } Property Value byte RawValue Gets the encoded value for this color. public uint RawValue { get; } Property Value uint Remarks This value is encoded as an unsigned integer value. The most-significant 8 bits contain the red value, the middle 8 bits contain the green value, and the least-significant 8 bits contain the blue value. Methods Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Gets the hexadecimal representation of the color (e.g. #000ccc). public override string ToString() Returns string A hexadecimal string of the color. Operators operator ==(Color, Color) Determines whether the specified Color is equal to this instance. public static bool operator ==(Color lhs, Color rhs) Parameters lhs Color rhs Color Returns bool true if the specified Color is equal to this instance; otherwise, false . explicit operator Color(Color) Converts the given .NET standard Color to a Kook.Net-defined Color. public static explicit operator Color(Color color) Parameters color Color The .NET standard Color to convert. Returns Color The Kook.Net-defined Color that represents the given .NET standard Color. implicit operator Color(Color) Converts the given Kook.Net-defined Color to a .NET standard Color. public static implicit operator Color(Color color) Parameters color Color The Kook.Net-defined Color to convert. Returns Color The .NET standard Color that represents the given Kook.Net-defined Color. implicit operator uint(Color) Converts the given Color to its raw value of uint. public static implicit operator uint(Color color) Parameters color Color The Color to convert. Returns uint The raw value of the given Color. implicit operator Color(uint) Converts the given raw value of uint to a Color. public static implicit operator Color(uint rawValue) Parameters rawValue uint The raw value of the color. Returns Color The Color that represents the given raw value. operator !=(Color, Color) Determines whether the specified Color is not equal to this instance. public static bool operator !=(Color lhs, Color rhs) Parameters lhs Color rhs Color Returns bool true if the specified Color is not equal to this instance; otherwise, false ."
  },
  "api/Kook.ColorType.html": {
    "href": "api/Kook.ColorType.html",
    "title": "Enum ColorType | Kook.Net 文档",
    "keywords": "Enum ColorType Namespace Kook Assembly Kook.Net.Core.dll Represents the type of color a role has. public enum ColorType : ushort Fields Gradient = 2 The color is a gradient. Solid = 1 The color is a solid color."
  },
  "api/Kook.Commands.AliasAttribute.html": {
    "href": "api/Kook.Commands.AliasAttribute.html",
    "title": "Class AliasAttribute | Kook.Net 文档",
    "keywords": "Class AliasAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll Marks the aliases for a command. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method)] public class AliasAttribute : Attribute Inheritance object Attribute AliasAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples In the following example, the command can be triggered with the base name, \"stats\", or either \"stat\" or \"info\". [Command(\"stats\")] [Alias(\"stat\", \"info\")] public async Task GetStatsAsync(IUser user) { // ...pull stats } Remarks This attribute allows a command to have one or multiple aliases. In other words, the base command can have multiple aliases when triggering the command itself, giving the end-user more freedom of choices when giving hot-words to trigger the desired command. See the example for a better illustration. Constructors AliasAttribute(params string[]) Creates a new AliasAttribute with the given aliases. public AliasAttribute(params string[] aliases) Parameters aliases string[] Properties Aliases Gets the aliases which have been defined for the command. public string[] Aliases { get; } Property Value string[]"
  },
  "api/Kook.Commands.Builders.CommandBuilder.html": {
    "href": "api/Kook.Commands.Builders.CommandBuilder.html",
    "title": "Class CommandBuilder | Kook.Net 文档",
    "keywords": "Class CommandBuilder Namespace Kook.Commands.Builders Assembly Kook.Net.Commands.dll Represents a command builder. public class CommandBuilder Inheritance object CommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Aliases Gets the aliases of this command. public IReadOnlyList<string> Aliases { get; } Property Value IReadOnlyList<string> Attributes Gets the attributes of this command. public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> IgnoreExtraArgs Gets or sets whether the extra arguments should be ignored. public bool IgnoreExtraArgs { get; set; } Property Value bool Module Gets the module builder that this command builder belongs to. public ModuleBuilder Module { get; } Property Value ModuleBuilder Name Gets or sets the name of this command. public string? Name { get; set; } Property Value string Parameters Gets the parameters of this command. public IReadOnlyList<ParameterBuilder> Parameters { get; } Property Value IReadOnlyList<ParameterBuilder> Preconditions Gets the preconditions of this command. public IReadOnlyList<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList<PreconditionAttribute> PrimaryAlias Gets or sets the primary alias of this command. public string? PrimaryAlias { get; set; } Property Value string Priority Gets or sets the priority of this command. public int Priority { get; set; } Property Value int Remarks Gets or sets the remarks of this command. public string? Remarks { get; set; } Property Value string RunMode Gets or sets the run mode of this command. public RunMode RunMode { get; set; } Property Value RunMode Summary Gets or sets the summary of this command. public string? Summary { get; set; } Property Value string Methods AddAliases(params string?[]) Adds aliases to this command. public CommandBuilder AddAliases(params string?[] aliases) Parameters aliases string[] An array containing the aliases to add. Returns CommandBuilder This command builder. AddAttributes(params Attribute[]) Adds attributes to this command. public CommandBuilder AddAttributes(params Attribute[] attributes) Parameters attributes Attribute[] An array containing the attributes to add. Returns CommandBuilder This command builder. AddParameter(string, Type, Action<ParameterBuilder>) Adds a parameter to this command. public CommandBuilder AddParameter(string name, Type type, Action<ParameterBuilder> createFunc) Parameters name string The name of the parameter. type Type The type of the parameter. createFunc Action<ParameterBuilder> An action delegate that is invoked to create the parameter. Returns CommandBuilder This command builder. AddParameter<T>(string, Action<ParameterBuilder>) Adds a parameter to this command. public CommandBuilder AddParameter<T>(string name, Action<ParameterBuilder> createFunc) Parameters name string The name of the parameter. createFunc Action<ParameterBuilder> An action delegate that is invoked to create the parameter. Returns CommandBuilder This command builder. Type Parameters T The type of the parameter. AddPrecondition(PreconditionAttribute) Adds a precondition to this command. public CommandBuilder AddPrecondition(PreconditionAttribute precondition) Parameters precondition PreconditionAttribute The precondition to add. Returns CommandBuilder This command builder. WithName(string) Sets the name of this command. public CommandBuilder WithName(string name) Parameters name string The name of this command. Returns CommandBuilder This command builder. WithPriority(int) Sets the priority of this command. public CommandBuilder WithPriority(int priority) Parameters priority int The priority of this command. Returns CommandBuilder This command builder. WithRemarks(string) Sets the remarks of this command. public CommandBuilder WithRemarks(string remarks) Parameters remarks string The remarks of this command. Returns CommandBuilder This command builder. WithRunMode(RunMode) Sets the run mode of this command. public CommandBuilder WithRunMode(RunMode runMode) Parameters runMode RunMode The run mode of this command. Returns CommandBuilder This command builder. WithSummary(string) Sets the summary of this command. public CommandBuilder WithSummary(string summary) Parameters summary string The summary of this command. Returns CommandBuilder This command builder."
  },
  "api/Kook.Commands.Builders.ModuleBuilder.html": {
    "href": "api/Kook.Commands.Builders.ModuleBuilder.html",
    "title": "Class ModuleBuilder | Kook.Net 文档",
    "keywords": "Class ModuleBuilder Namespace Kook.Commands.Builders Assembly Kook.Net.Commands.dll Represents a module builder. public class ModuleBuilder Inheritance object ModuleBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Aliases Gets a read-only list of aliases that this module builder contains. public IReadOnlyList<string?> Aliases { get; } Property Value IReadOnlyList<string> Attributes Gets a read-only list of attributes that this module builder contains. public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> Commands Gets a read-only list of commands that this module builder contains. public IReadOnlyList<CommandBuilder> Commands { get; } Property Value IReadOnlyList<CommandBuilder> Group Gets or sets the group of this module. public string? Group { get; set; } Property Value string Modules Gets a read-only list of submodules that this module builder contains. public IReadOnlyList<ModuleBuilder> Modules { get; } Property Value IReadOnlyList<ModuleBuilder> Name Gets or sets the name of this module. public string? Name { get; set; } Property Value string Parent Gets the parent module builder that this module builder belongs to. public ModuleBuilder? Parent { get; } Property Value ModuleBuilder Preconditions Gets a read-only list of preconditions that this module builder contains. public IReadOnlyList<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList<PreconditionAttribute> Remarks Gets or sets the remarks of this module. public string? Remarks { get; set; } Property Value string Service Gets the command service that this module builder belongs to. public CommandService Service { get; } Property Value CommandService Summary Gets or sets the summary of this module. public string? Summary { get; set; } Property Value string Methods AddAliases(params string?[]) Adds aliases to this module. public ModuleBuilder AddAliases(params string?[] aliases) Parameters aliases string[] An array of aliases to add to this module. Returns ModuleBuilder This module builder. AddAttributes(params Attribute[]) Adds a precondition to this module. public ModuleBuilder AddAttributes(params Attribute[] attributes) Parameters attributes Attribute[] An array of attributes to add to this module. Returns ModuleBuilder This module builder. AddCommand(string, Func<ICommandContext, object?[], IServiceProvider, CommandInfo, Task>, Action<CommandBuilder>) Adds a command to this module. public ModuleBuilder AddCommand(string primaryAlias, Func<ICommandContext, object?[], IServiceProvider, CommandInfo, Task> callback, Action<CommandBuilder> createFunc) Parameters primaryAlias string The primary alias of this command. callback Func<ICommandContext, object[], IServiceProvider, CommandInfo, Task> The callback of this command. createFunc Action<CommandBuilder> The function delegate that creates this command. Returns ModuleBuilder This module builder. AddModule(string, Action<ModuleBuilder>) Adds a module to this module. public ModuleBuilder AddModule(string primaryAlias, Action<ModuleBuilder> createFunc) Parameters primaryAlias string The primary alias of this module. createFunc Action<ModuleBuilder> The function delegate that creates this module. Returns ModuleBuilder This module builder. AddPrecondition(PreconditionAttribute) Adds a precondition to this module. public ModuleBuilder AddPrecondition(PreconditionAttribute precondition) Parameters precondition PreconditionAttribute The precondition to add to this module. Returns ModuleBuilder This module builder. Build(CommandService, IServiceProvider) Builds this module builder into a module. public ModuleInfo Build(CommandService service, IServiceProvider services) Parameters service CommandService The command service that this module builder belongs to. services IServiceProvider The service provider that this module builder belongs to. Returns ModuleInfo The built module. WithName(string) Sets the name of this module. public ModuleBuilder WithName(string name) Parameters name string The name of this module. Returns ModuleBuilder This module builder. WithRemarks(string) Sets the remarks of this module. public ModuleBuilder WithRemarks(string remarks) Parameters remarks string The remarks of this module. Returns ModuleBuilder This module builder. WithSummary(string) Sets the summary of this module. public ModuleBuilder WithSummary(string summary) Parameters summary string The summary of this module. Returns ModuleBuilder This module builder."
  },
  "api/Kook.Commands.Builders.ParameterBuilder.html": {
    "href": "api/Kook.Commands.Builders.ParameterBuilder.html",
    "title": "Class ParameterBuilder | Kook.Net 文档",
    "keywords": "Class ParameterBuilder Namespace Kook.Commands.Builders Assembly Kook.Net.Commands.dll Represents a parameter builder. public class ParameterBuilder Inheritance object ParameterBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Attributes Gets a read-only collection containing the attributes of this parameter. public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> Command Gets the command builder that this parameter builder belongs to. public CommandBuilder Command { get; } Property Value CommandBuilder DefaultValue Gets or sets the default value of this parameter. public object? DefaultValue { get; set; } Property Value object IsMultiple Gets or sets a value that indicates whether this parameter is a multiple parameter or not. public bool IsMultiple { get; set; } Property Value bool IsOptional Gets or sets a value that indicates whether this parameter is an optional parameter or not. public bool IsOptional { get; set; } Property Value bool IsRemainder Gets or sets a value that indicates whether this parameter is a remainder parameter or not. public bool IsRemainder { get; set; } Property Value bool Name Gets the name of this parameter. public string Name { get; } Property Value string ParameterType Gets the type of this parameter. public Type? ParameterType { get; } Property Value Type Preconditions Gets a read-only collection containing the preconditions of this parameter. public IReadOnlyList<ParameterPreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList<ParameterPreconditionAttribute> Summary Gets or sets the summary of this parameter. public string? Summary { get; set; } Property Value string TypeReader Gets the type reader of this parameter. public TypeReader? TypeReader { get; set; } Property Value TypeReader Methods AddAttributes(params Attribute[]) Adds attributes to this parameter. public ParameterBuilder AddAttributes(params Attribute[] attributes) Parameters attributes Attribute[] An array containing the attributes to add. Returns ParameterBuilder This parameter builder. AddPrecondition(ParameterPreconditionAttribute) Adds a precondition to this parameter. public ParameterBuilder AddPrecondition(ParameterPreconditionAttribute precondition) Parameters precondition ParameterPreconditionAttribute The precondition to add. Returns ParameterBuilder This parameter builder. WithDefault(object) Sets the default value of this parameter. public ParameterBuilder WithDefault(object defaultValue) Parameters defaultValue object The default value of this parameter. Returns ParameterBuilder This parameter builder. WithIsMultiple(bool) Sets whether this parameter is a multiple parameter or not. public ParameterBuilder WithIsMultiple(bool isMultiple) Parameters isMultiple bool Whether this parameter is a multiple parameter or not. Returns ParameterBuilder This parameter builder. WithIsOptional(bool) Sets whether this parameter is an optional parameter or not. public ParameterBuilder WithIsOptional(bool isOptional) Parameters isOptional bool Whether this parameter is an optional parameter or not. Returns ParameterBuilder This parameter builder. WithIsRemainder(bool) Sets whether this parameter is a remainder parameter or not. public ParameterBuilder WithIsRemainder(bool isRemainder) Parameters isRemainder bool Whether this parameter is a remainder parameter or not. Returns ParameterBuilder This parameter builder. WithSummary(string) Sets the summary of this parameter. public ParameterBuilder WithSummary(string summary) Parameters summary string The summary of this parameter. Returns ParameterBuilder This parameter builder."
  },
  "api/Kook.Commands.Builders.html": {
    "href": "api/Kook.Commands.Builders.html",
    "title": "Namespace Kook.Commands.Builders | Kook.Net 文档",
    "keywords": "Namespace Kook.Commands.Builders Classes CommandBuilder Represents a command builder. ModuleBuilder Represents a module builder. ParameterBuilder Represents a parameter builder."
  },
  "api/Kook.Commands.ChannelTypeReader-1.html": {
    "href": "api/Kook.Commands.ChannelTypeReader-1.html",
    "title": "Class ChannelTypeReader<T> | Kook.Net 文档",
    "keywords": "Class ChannelTypeReader<T> Namespace Kook.Commands Assembly Kook.Net.Commands.dll A TypeReader for parsing objects implementing IChannel. public class ChannelTypeReader<T> : TypeReader where T : class, IChannel Type Parameters T The type to be checked; must implement IChannel. Inheritance object TypeReader ChannelTypeReader<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This TypeReader is shipped with Kook.Net and is used by default to parse any IChannel implemented object within a command. The TypeReader will attempt to first parse the input by mention, then the identifier, then by name; the highest candidate will be chosen as the final output; otherwise, an erroneous TypeReaderResult is returned. Methods ReadAsync(ICommandContext, string, IServiceProvider) Attempts to parse the input into the desired type. public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) Parameters context ICommandContext The context of the command. input string The raw input of the command. services IServiceProvider The service collection used for dependency injection. Returns Task<TypeReaderResult> A task that represents the asynchronous parsing operation. The task result contains the parsing result."
  },
  "api/Kook.Commands.CommandAttribute.html": {
    "href": "api/Kook.Commands.CommandAttribute.html",
    "title": "Class CommandAttribute | Kook.Net 文档",
    "keywords": "Class CommandAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll Marks the execution information for a command. [AttributeUsage(AttributeTargets.Method)] public class CommandAttribute : Attribute Inheritance object Attribute CommandAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandAttribute() Initializes a new instance of the Attribute class. public CommandAttribute() CommandAttribute(string) Initializes a new CommandAttribute attribute with the specified name. public CommandAttribute(string text) Parameters text string The name of the command. CommandAttribute(string, bool, string?, string[]?, string?) Initializes a new CommandAttribute attribute with the specified name and mode of whether to ignore extra arguments. public CommandAttribute(string text, bool ignoreExtraArgs, string? summary = null, string[]? aliases = null, string? remarks = null) Parameters text string The name of the command. ignoreExtraArgs bool Whether to ignore extra arguments. summary string The summary of the command. aliases string[] The aliases of the command. remarks string The remarks of the command. Properties Aliases Marks the aliases for a command. public string[]? Aliases { get; set; } Property Value string[] Remarks AliasAttribute extends the base value of this if present. IgnoreExtraArgs Indicates whether extra arguments should be ignored for this command. public bool? IgnoreExtraArgs { get; } Property Value bool? Remarks Attaches remarks to your commands. public string? Remarks { get; set; } Property Value string Remarks RemainderAttribute overrides the value of this property if present. RunMode Specifies the RunMode of the command. This affects how the command is executed. public RunMode RunMode { get; set; } Property Value RunMode Summary Attaches a summary to your command. public string? Summary { get; set; } Property Value string Remarks Summary overrides the value of this property if present. Text Gets the text that has been set to be recognized as a command. public string? Text { get; } Property Value string"
  },
  "api/Kook.Commands.CommandContext.html": {
    "href": "api/Kook.Commands.CommandContext.html",
    "title": "Class CommandContext | Kook.Net 文档",
    "keywords": "Class CommandContext Namespace Kook.Commands Assembly Kook.Net.Commands.dll The context of a command which may contain the client, user, guild, channel, and message. public class CommandContext : ICommandContext Inheritance object CommandContext Implements ICommandContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandContext(IKookClient, IUserMessage) Initializes a new CommandContext class with the provided client and message. public CommandContext(IKookClient client, IUserMessage msg) Parameters client IKookClient The underlying client. msg IUserMessage The underlying message. Properties Channel Gets the IMessageChannel that the command is executed in. public IMessageChannel Channel { get; } Property Value IMessageChannel Client Gets the IKookClient that the command is executed with. public IKookClient Client { get; } Property Value IKookClient Guild Gets the IGuild that the command is executed in. public IGuild? Guild { get; } Property Value IGuild IsPrivate Indicates whether the channel that the command is executed in is a private channel. public bool IsPrivate { get; } Property Value bool Message Gets the IUserMessage that the command is interpreted from. public IUserMessage Message { get; } Property Value IUserMessage User Gets the IUser who executed the command. public IUser User { get; } Property Value IUser"
  },
  "api/Kook.Commands.CommandError.html": {
    "href": "api/Kook.Commands.CommandError.html",
    "title": "Enum CommandError | Kook.Net 文档",
    "keywords": "Enum CommandError Namespace Kook.Commands Assembly Kook.Net.Commands.dll Defines the type of error a command can throw. public enum CommandError Fields BadArgCount = 3 Thrown when the input text has too few or too many arguments. Exception = 7 Thrown when an exception occurs mid-command execution. MultipleMatches = 5 Thrown when more than one object is matched by TypeReader. ObjectNotFound = 4 Thrown when the object cannot be found by the TypeReader. ParseFailed = 2 Thrown when the command fails to be parsed. UnknownCommand = 1 Thrown when the command is unknown. UnmetPrecondition = 6 Thrown when the command fails to meet a PreconditionAttribute's conditions. Unsuccessful = 8 Thrown when the command is not successfully executed on runtime."
  },
  "api/Kook.Commands.CommandException.html": {
    "href": "api/Kook.Commands.CommandException.html",
    "title": "Class CommandException | Kook.Net 文档",
    "keywords": "Class CommandException Namespace Kook.Commands Assembly Kook.Net.Commands.dll The exception that is thrown if another exception occurs during a command execution. public class CommandException : Exception, ISerializable Inheritance object Exception CommandException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CommandException(CommandInfo, ICommandContext, Exception?) Initializes a new instance of the CommandException class using a command information, a command context, and the exception that interrupted the execution. public CommandException(CommandInfo command, ICommandContext context, Exception? ex) Parameters command CommandInfo The command information. context ICommandContext The context of the command. ex Exception The exception that interrupted the command execution. Properties Command Gets the command that caused the exception. public CommandInfo Command { get; } Property Value CommandInfo Context Gets the command context of the exception. public ICommandContext Context { get; } Property Value ICommandContext"
  },
  "api/Kook.Commands.CommandInfo.html": {
    "href": "api/Kook.Commands.CommandInfo.html",
    "title": "Class CommandInfo | Kook.Net 文档",
    "keywords": "Class CommandInfo Namespace Kook.Commands Assembly Kook.Net.Commands.dll Provides the information of a command. public class CommandInfo Inheritance object CommandInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This object contains the information of a command. This can include the module of the command, various descriptions regarding the command, and its RunMode. Properties Aliases Gets a list of aliases defined by the AliasAttribute of the command. public IReadOnlyList<string> Aliases { get; } Property Value IReadOnlyList<string> Attributes Gets a list of attributes of the command. public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> HasVarArgs Indicates whether the command accepts a paramsType[] for its parameter. public bool HasVarArgs { get; } Property Value bool IgnoreExtraArgs Indicates whether extra arguments should be ignored for this command. public bool IgnoreExtraArgs { get; } Property Value bool Module Gets the module that the command belongs in. public ModuleInfo Module { get; } Property Value ModuleInfo Name Gets the name of the command. If none is set, the first alias is used. public string Name { get; } Property Value string Parameters Gets a list of information about the parameters of the command. public IReadOnlyList<ParameterInfo> Parameters { get; } Property Value IReadOnlyList<ParameterInfo> Preconditions Gets a list of preconditions defined by the PreconditionAttribute of the command. public IReadOnlyList<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList<PreconditionAttribute> Priority Gets the priority of the command. This is used when there are multiple overloads of the command. public int Priority { get; } Property Value int Remarks Gets the remarks of the command. public string? Remarks { get; } Property Value string Remarks This field returns the summary of the command. Summary and Remarks can be useful in help commands and various implementation that fetches details of the command for the user. RunMode Gets the RunMode that is being used for the command. public RunMode RunMode { get; } Property Value RunMode Summary Gets the summary of the command. public string? Summary { get; } Property Value string Remarks This field returns the summary of the command. Summary and Remarks can be useful in help commands and various implementation that fetches details of the command for the user. Methods CheckPreconditionsAsync(ICommandContext, IServiceProvider?) Checks the preconditions of the command. public Task<PreconditionResult> CheckPreconditionsAsync(ICommandContext context, IServiceProvider? services = null) Parameters context ICommandContext The context of the command. services IServiceProvider The services to be used for precondition checking. Returns Task<PreconditionResult> A PreconditionResult that indicates whether the precondition check was successful. ExecuteAsync(ICommandContext, ParseResult, IServiceProvider) Executes the command. public Task<IResult> ExecuteAsync(ICommandContext context, ParseResult parseResult, IServiceProvider services) Parameters context ICommandContext The context of the command. parseResult ParseResult The result of the parsing. services IServiceProvider The services to be used for execution. Returns Task<IResult> An IResult that indicates whether the execution was successful. ExecuteAsync(ICommandContext, IEnumerable<object?>, IEnumerable<object?>, IServiceProvider) Executes the command. public Task<IResult> ExecuteAsync(ICommandContext context, IEnumerable<object?> argList, IEnumerable<object?> paramList, IServiceProvider services) Parameters context ICommandContext The context of the command. argList IEnumerable<object> The arguments of the command. paramList IEnumerable<object> The parameters of the command. services IServiceProvider The services to be used for execution. Returns Task<IResult> An IResult that indicates whether the execution was successful. ParseAsync(ICommandContext, int, SearchResult, PreconditionResult?, IServiceProvider?) Parses the arguments of the command. public Task<ParseResult> ParseAsync(ICommandContext context, int startIndex, SearchResult searchResult, PreconditionResult? preconditionResult = null, IServiceProvider? services = null) Parameters context ICommandContext The context of the command. startIndex int The index to start parsing from. searchResult SearchResult The search result of the command. preconditionResult PreconditionResult The result of the precondition check. services IServiceProvider The services to be used for parsing. Returns Task<ParseResult> A ParseResult that indicates whether the parsing was successful."
  },
  "api/Kook.Commands.CommandMatch.html": {
    "href": "api/Kook.Commands.CommandMatch.html",
    "title": "Struct CommandMatch | Kook.Net 文档",
    "keywords": "Struct CommandMatch Namespace Kook.Commands Assembly Kook.Net.Commands.dll Represents a matched command. public struct CommandMatch Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors CommandMatch(CommandInfo, string) Initializes a new instance of the CommandMatch struct. public CommandMatch(CommandInfo command, string alias) Parameters command CommandInfo The command that matches the search result. alias string The alias of the command. Properties Alias The alias of the command. public readonly string Alias { get; } Property Value string Command The command that matches the search result. public readonly CommandInfo Command { get; } Property Value CommandInfo Methods CheckPreconditionsAsync(ICommandContext, IServiceProvider?) Checks the preconditions of this command. public Task<PreconditionResult> CheckPreconditionsAsync(ICommandContext context, IServiceProvider? services = null) Parameters context ICommandContext The context of the command. services IServiceProvider The services to use. Returns Task<PreconditionResult> The result of the precondition check. ExecuteAsync(ICommandContext, ParseResult, IServiceProvider) Executes this command. public Task<IResult> ExecuteAsync(ICommandContext context, ParseResult parseResult, IServiceProvider services) Parameters context ICommandContext The context of the command. parseResult ParseResult The result of the parse. services IServiceProvider The services to use. Returns Task<IResult> The result of the execution. ExecuteAsync(ICommandContext, IEnumerable<object>, IEnumerable<object>, IServiceProvider) Executes this command. public Task<IResult> ExecuteAsync(ICommandContext context, IEnumerable<object> argList, IEnumerable<object> paramList, IServiceProvider services) Parameters context ICommandContext The context of the command. argList IEnumerable<object> The arguments of the command. paramList IEnumerable<object> The parameters of the command. services IServiceProvider The services to use. Returns Task<IResult> The result of the execution. ParseAsync(ICommandContext, SearchResult, PreconditionResult?, IServiceProvider?) Parses this command. public Task<ParseResult> ParseAsync(ICommandContext context, SearchResult searchResult, PreconditionResult? preconditionResult = null, IServiceProvider? services = null) Parameters context ICommandContext The context of the command. searchResult SearchResult The search result of the command. preconditionResult PreconditionResult The result of the precondition check. services IServiceProvider The services to use. Returns Task<ParseResult> The result of the parse."
  },
  "api/Kook.Commands.CommandService.html": {
    "href": "api/Kook.Commands.CommandService.html",
    "title": "Class CommandService | Kook.Net 文档",
    "keywords": "Class CommandService Namespace Kook.Commands Assembly Kook.Net.Commands.dll Provides a framework for building Kook commands. public class CommandService : IDisposable Inheritance object CommandService Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CommandServiceExtensions.GetExecutableCommandsAsync(CommandService, ICommandContext, IServiceProvider) Remarks The service provides a framework for building Kook commands both dynamically via runtime builders or statically via compile-time modules. To create a command module at compile-time, see ModuleBase (most common); otherwise, see ModuleBuilder. This service also provides several events for monitoring command usages; such as Log for any command-related log events, and CommandExecuted for information about commands that have been successfully executed. Constructors CommandService() Initializes a new CommandService class. public CommandService() CommandService(CommandServiceConfig) Initializes a new CommandService class with the provided configuration. public CommandService(CommandServiceConfig config) Parameters config CommandServiceConfig The configuration class. Exceptions InvalidOperationException The RunMode cannot be set to Default. Properties Commands Represents all commands loaded within CommandService. public IEnumerable<CommandInfo> Commands { get; } Property Value IEnumerable<CommandInfo> Modules Represents all modules loaded within CommandService. public IEnumerable<ModuleInfo> Modules { get; } Property Value IEnumerable<ModuleInfo> TypeReaders Represents all TypeReader loaded within CommandService. public ILookup<Type, TypeReader> TypeReaders { get; } Property Value ILookup<Type, TypeReader> Methods AddModuleAsync(Type, IServiceProvider) Adds a command module from a Type. public Task<ModuleInfo> AddModuleAsync(Type type, IServiceProvider services) Parameters type Type The type of module. services IServiceProvider The IServiceProvider for your dependency injection solution if using one; otherwise, pass null . Returns Task<ModuleInfo> A task that represents the asynchronous operation for adding the module. The task result contains the built module. Exceptions ArgumentException This module has already been added. InvalidOperationException The ModuleInfo fails to be built; an invalid type may have been provided. AddModuleAsync<T>(IServiceProvider) Add a command module from a Type. public Task<ModuleInfo> AddModuleAsync<T>(IServiceProvider services) Parameters services IServiceProvider The IServiceProvider for your dependency injection solution if using one; otherwise, pass null. Returns Task<ModuleInfo> A task that represents the asynchronous operation for adding the module. The task result contains the built module. Type Parameters T The type of module. Examples The following example registers the module MyModule to commandService. await commandService.AddModuleAsync<MyModule>(serviceProvider); Exceptions ArgumentException This module has already been added. InvalidOperationException The ModuleInfo fails to be built; an invalid type may have been provided. AddModulesAsync(Assembly, IServiceProvider) Add command modules from an Assembly. public Task<IEnumerable<ModuleInfo>> AddModulesAsync(Assembly assembly, IServiceProvider services) Parameters assembly Assembly The Assembly containing command modules. services IServiceProvider The IServiceProvider for your dependency injection solution if using one; otherwise, pass null. Returns Task<IEnumerable<ModuleInfo>> A task that represents the asynchronous operation for adding the command modules. The task result contains an enumerable collection of modules added. AddTypeReader(Type, TypeReader) Adds a custom TypeReader to this CommandService for the supplied object type. If type is a ValueType, a nullable TypeReader for the value type will also be added. If a default TypeReader exists for type, a warning will be logged and the default TypeReader will be replaced. public void AddTypeReader(Type type, TypeReader reader) Parameters type Type A Type instance for the type to be read. reader TypeReader An instance of the TypeReader to be added. AddTypeReader(Type, TypeReader, bool) Adds a custom TypeReader to this CommandService for the supplied object type. If type is a ValueType, a nullable TypeReader for the value type will also be added. public void AddTypeReader(Type type, TypeReader reader, bool replaceDefault) Parameters type Type A Type instance for the type to be read. reader TypeReader An instance of the TypeReader to be added. replaceDefault bool Defines whether the TypeReader should replace the default one for Type if it exists. AddTypeReader<T>(TypeReader) Adds a custom TypeReader to this CommandService for the supplied object type. If T is a ValueType, a nullable TypeReader will also be added. If a default TypeReader exists for T, a warning will be logged and the default TypeReader will be replaced. public void AddTypeReader<T>(TypeReader reader) Parameters reader TypeReader An instance of the TypeReader to be added. Type Parameters T The object type to be read by the TypeReader. AddTypeReader<T>(TypeReader, bool) Adds a custom TypeReader to this CommandService for the supplied object type. If T is a ValueType, a nullable TypeReader will also be added. public void AddTypeReader<T>(TypeReader reader, bool replaceDefault) Parameters reader TypeReader An instance of the TypeReader to be added. replaceDefault bool Defines whether the TypeReader should replace the default one for Type if it exists. Type Parameters T The object type to be read by the TypeReader. CreateModuleAsync(string, Action<ModuleBuilder>) Creates a new module builder. public Task<ModuleInfo> CreateModuleAsync(string primaryAlias, Action<ModuleBuilder> buildFunc) Parameters primaryAlias string The primary alias for the module. buildFunc Action<ModuleBuilder> The action delegate to build the module. Returns Task<ModuleInfo> A task that represents the asynchronous operation for creating the module. Dispose(bool) Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. protected virtual void Dispose(bool disposing) Parameters disposing bool ExecuteAsync(ICommandContext, int, IServiceProvider, MultiMatchHandling) Executes the command. public Task<IResult> ExecuteAsync(ICommandContext context, int argPos, IServiceProvider services, MultiMatchHandling multiMatchHandling = MultiMatchHandling.Exception) Parameters context ICommandContext The context of the command. argPos int The position of which the command starts at. services IServiceProvider The service to be used in the command's dependency injection. multiMatchHandling MultiMatchHandling The handling mode when multiple command matches are found. Returns Task<IResult> A task that represents the asynchronous execution operation. The task result contains the result of the command execution. ExecuteAsync(ICommandContext, string, IServiceProvider, MultiMatchHandling) Executes the command. public Task<IResult> ExecuteAsync(ICommandContext context, string input, IServiceProvider services, MultiMatchHandling multiMatchHandling = MultiMatchHandling.Exception) Parameters context ICommandContext The context of the command. input string The command string. services IServiceProvider The service to be used in the command's dependency injection. multiMatchHandling MultiMatchHandling The handling mode when multiple command matches are found. Returns Task<IResult> A task that represents the asynchronous execution operation. The task result contains the result of the command execution. RemoveModuleAsync(ModuleInfo) Removes the command module. public Task<bool> RemoveModuleAsync(ModuleInfo module) Parameters module ModuleInfo The ModuleInfo to be removed from the service. Returns Task<bool> A task that represents the asynchronous removal operation. The task result contains a value that indicates whether the module is successfully removed. RemoveModuleAsync(Type) Removes the command module. public Task<bool> RemoveModuleAsync(Type type) Parameters type Type The Type of the module. Returns Task<bool> A task that represents the asynchronous removal operation. The task result contains a value that indicates whether the module is successfully removed. RemoveModuleAsync<T>() Removes the command module. public Task<bool> RemoveModuleAsync<T>() Returns Task<bool> A task that represents the asynchronous removal operation. The task result contains a value that indicates whether the module is successfully removed. Type Parameters T The Type of the module. Search(ICommandContext, int) Searches for the command. public SearchResult Search(ICommandContext context, int argPos) Parameters context ICommandContext The context of the command. argPos int The position of which the command starts at. Returns SearchResult The result containing the matching commands. Search(ICommandContext, string) Searches for the command. public SearchResult Search(ICommandContext context, string input) Parameters context ICommandContext The context of the command. input string The command string. Returns SearchResult The result containing the matching commands. Search(string) Searches for the command. public SearchResult Search(string input) Parameters input string The command string. Returns SearchResult The result containing the matching commands. TryRemoveTypeReader(Type, bool, out IDictionary<Type, TypeReader>) Removes a type reader from the list of type readers. public bool TryRemoveTypeReader(Type type, bool isDefaultTypeReader, out IDictionary<Type, TypeReader> readers) Parameters type Type The type to remove the readers from. isDefaultTypeReader bool true if the default readers for type should be removed; otherwise false. readers IDictionary<Type, TypeReader> The removed collection of type readers. Returns bool true if the remove operation was successful; otherwise false. Remarks Removing a TypeReader from the CommandService will not dereference the TypeReader from the loaded module/command instances. You need to reload the modules for the changes to take effect. ValidateAndGetBestMatch(SearchResult, ICommandContext, IServiceProvider, MultiMatchHandling) Validates and gets the best CommandMatch from a specified SearchResult public Task<IResult> ValidateAndGetBestMatch(SearchResult matches, ICommandContext context, IServiceProvider provider, MultiMatchHandling multiMatchHandling = MultiMatchHandling.Exception) Parameters matches SearchResult The SearchResult. context ICommandContext The context of the command. provider IServiceProvider The service provider to be used on the command's dependency injection. multiMatchHandling MultiMatchHandling The handling mode when multiple command matches are found. Returns Task<IResult> A task that represents the asynchronous validation operation. The task result contains the result of the command validation as a MatchResult or a SearchResult if no matches were found. Events CommandExecuted Occurs when a command is executed. public event Func<CommandInfo?, ICommandContext, IResult, Task> CommandExecuted Event Type Func<CommandInfo, ICommandContext, IResult, Task> Remarks This event is fired when a command has been executed, successfully or not. When a command fails to execute during parsing or precondition stage, the CommandInfo may not be returned. Log Occurs when a command-related information is received. public event Func<LogMessage, Task> Log Event Type Func<LogMessage, Task>"
  },
  "api/Kook.Commands.CommandServiceConfig.html": {
    "href": "api/Kook.Commands.CommandServiceConfig.html",
    "title": "Class CommandServiceConfig | Kook.Net 文档",
    "keywords": "Class CommandServiceConfig Namespace Kook.Commands Assembly Kook.Net.Commands.dll Represents a configuration class for CommandService. public class CommandServiceConfig Inheritance object CommandServiceConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CaseSensitiveCommands Gets or sets whether commands should be case-sensitive. public bool CaseSensitiveCommands { get; set; } Property Value bool DefaultRunMode Gets or sets the default RunMode commands should have, if one is not specified on the Command attribute or builder. public RunMode DefaultRunMode { get; set; } Property Value RunMode IgnoreExtraArgs Gets or sets a value that indicates whether extra parameters should be ignored. public bool IgnoreExtraArgs { get; set; } Property Value bool LogLevel Gets or sets the minimum log level severity that will be sent to the Log event. public LogSeverity LogLevel { get; set; } Property Value LogSeverity QuotationMarkAliasMap Collection of aliases for matching pairs of string delimiters. The dictionary stores the opening delimiter as a key, and the matching closing delimiter as the value. If no value is supplied DefaultAliasMap will be used, which contains many regional equivalents. Only values that are specified in this map will be used as string delimiters, so if \" is removed then it won't be used. If this map is set to null or empty, the default delimiter of \" will be used. public Dictionary<char, char> QuotationMarkAliasMap { get; set; } Property Value Dictionary<char, char> Examples QuotationMarkAliasMap = new Dictionary<char, char>() { {'\\\"', '\\\"' }, {'“', '”' }, {'「', '」' }, } SeparatorChar Gets or sets the char that separates an argument with another. public char SeparatorChar { get; set; } Property Value char ThrowOnError Gets or sets whether Sync commands should push exceptions up to the caller. public bool ThrowOnError { get; set; } Property Value bool"
  },
  "api/Kook.Commands.CommandServiceExtensions.html": {
    "href": "api/Kook.Commands.CommandServiceExtensions.html",
    "title": "Class CommandServiceExtensions | Kook.Net 文档",
    "keywords": "Class CommandServiceExtensions Namespace Kook.Commands Assembly Kook.Net.Commands.dll Provides extension methods for the CommandService class. public static class CommandServiceExtensions Inheritance object CommandServiceExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetExecutableCommandsAsync(CommandService, ICommandContext, IServiceProvider) Returns commands that can be executed under the current context. public static Task<IReadOnlyCollection<CommandInfo>> GetExecutableCommandsAsync(this CommandService commandService, ICommandContext context, IServiceProvider provider) Parameters commandService CommandService The desired command service class to check against. context ICommandContext The current command context. provider IServiceProvider The service provider used for dependency injection upon precondition check. Returns Task<IReadOnlyCollection<CommandInfo>> A read-only collection of commands that can be executed under the current context. GetExecutableCommandsAsync(ModuleInfo, ICommandContext, IServiceProvider) Returns commands that can be executed under the current context. public static Task<IReadOnlyCollection<CommandInfo>> GetExecutableCommandsAsync(this ModuleInfo module, ICommandContext context, IServiceProvider provider) Parameters module ModuleInfo The module to be checked against. context ICommandContext The current command context. provider IServiceProvider The service provider used for dependency injection upon precondition check. Returns Task<IReadOnlyCollection<CommandInfo>> A read-only collection of commands that can be executed under the current context. GetExecutableCommandsAsync(ICollection<CommandInfo>, ICommandContext, IServiceProvider) Returns commands that can be executed under the current context. public static Task<IReadOnlyCollection<CommandInfo>> GetExecutableCommandsAsync(this ICollection<CommandInfo> commands, ICommandContext context, IServiceProvider provider) Parameters commands ICollection<CommandInfo> The set of commands to be checked against. context ICommandContext The current command context. provider IServiceProvider The service provider used for dependency injection upon precondition check. Returns Task<IReadOnlyCollection<CommandInfo>> A read-only collection of commands that can be executed under the current context."
  },
  "api/Kook.Commands.ContextType.html": {
    "href": "api/Kook.Commands.ContextType.html",
    "title": "Enum ContextType | Kook.Net 文档",
    "keywords": "Enum ContextType Namespace Kook.Commands Assembly Kook.Net.Commands.dll Defines the type of command context (i.e. where the command is being executed). [Flags] public enum ContextType Fields DM = 2 Specifies the command to be executed within a DM. Guild = 1 Specifies the command to be executed within a guild."
  },
  "api/Kook.Commands.DontAutoLoadAttribute.html": {
    "href": "api/Kook.Commands.DontAutoLoadAttribute.html",
    "title": "Class DontAutoLoadAttribute | Kook.Net 文档",
    "keywords": "Class DontAutoLoadAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll Prevents the marked module from being loaded automatically. [AttributeUsage(AttributeTargets.Class)] public class DontAutoLoadAttribute : Attribute Inheritance object Attribute DontAutoLoadAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This attribute tells CommandService to ignore the marked module from being loaded automatically (e.g. the AddModulesAsync(Assembly, IServiceProvider) method). If a non-public module marked with this attribute is attempted to be loaded manually, the loading process will also fail."
  },
  "api/Kook.Commands.DontInjectAttribute.html": {
    "href": "api/Kook.Commands.DontInjectAttribute.html",
    "title": "Class DontInjectAttribute | Kook.Net 文档",
    "keywords": "Class DontInjectAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll Prevents the marked property from being injected into a module. [AttributeUsage(AttributeTargets.Property)] public class DontInjectAttribute : Attribute Inheritance object Attribute DontInjectAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples In the following example, DatabaseService will not be automatically injected into the module and will not throw an error message if the dependency fails to be resolved. public class MyModule : ModuleBase { [DontInject] public DatabaseService DatabaseService; public MyModule() { DatabaseService = DatabaseFactory.Generate(); } } Remarks This attribute prevents the marked member from being injected into its parent module. Useful when you have a public property that you do not wish to invoke the library's dependency injection service."
  },
  "api/Kook.Commands.ExecuteResult.html": {
    "href": "api/Kook.Commands.ExecuteResult.html",
    "title": "Struct ExecuteResult | Kook.Net 文档",
    "keywords": "Struct ExecuteResult Namespace Kook.Commands Assembly Kook.Net.Commands.dll Contains information of the command's overall execution result. public struct ExecuteResult : IResult Implements IResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Error Describes the error type that may have occurred during the operation. public readonly CommandError? Error { get; } Property Value CommandError? A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorReason Describes the reason for the error. public readonly string? ErrorReason { get; } Property Value string A string containing the error reason. Exception Gets the exception that may have occurred during the command execution. public readonly Exception? Exception { get; } Property Value Exception IsSuccess Indicates whether the operation was successful or not. public bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false. Methods FromError(CommandError, string) Initializes a new ExecuteResult with a specified CommandError and its reason, indicating an unsuccessful execution. public static ExecuteResult FromError(CommandError error, string reason) Parameters error CommandError The type of error. reason string The reason behind the error. Returns ExecuteResult A ExecuteResult that contains a CommandError and reason. FromError(IResult) Initializes a new ExecuteResult with a specified result; this may or may not be an successful execution depending on the Error and ErrorReason specified. public static ExecuteResult FromError(IResult result) Parameters result IResult The result to inherit from. Returns ExecuteResult A ExecuteResult that inherits the IResult error type and reason. FromError(Exception?) Initializes a new ExecuteResult with a specified exception, indicating an unsuccessful execution. public static ExecuteResult FromError(Exception? ex) Parameters ex Exception The exception that caused the command execution to fail. Returns ExecuteResult A ExecuteResult that contains the exception that caused the unsuccessful execution, along with a CommandError of type Exception as well as the exception message as the reason. FromSuccess() Initializes a new ExecuteResult with no error, indicating a successful execution. public static ExecuteResult FromSuccess() Returns ExecuteResult A ExecuteResult that does not contain any errors. ToString() Gets a string that indicates the execution result. public override string ToString() Returns string Success if IsSuccess is true; otherwise \"Error: ErrorReason\"."
  },
  "api/Kook.Commands.GroupAttribute.html": {
    "href": "api/Kook.Commands.GroupAttribute.html",
    "title": "Class GroupAttribute | Kook.Net 文档",
    "keywords": "Class GroupAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll Marks the module as a command group. [AttributeUsage(AttributeTargets.Class)] public class GroupAttribute : Attribute Inheritance object Attribute GroupAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GroupAttribute() Initializes a new instance of the Attribute class. public GroupAttribute() GroupAttribute(string) Initializes a new GroupAttribute with the provided prefix. public GroupAttribute(string prefix) Parameters prefix string The prefix of the module group. Properties Prefix Gets the prefix set for the module. public string? Prefix { get; } Property Value string"
  },
  "api/Kook.Commands.ICommandContext.html": {
    "href": "api/Kook.Commands.ICommandContext.html",
    "title": "Interface ICommandContext | Kook.Net 文档",
    "keywords": "Interface ICommandContext Namespace Kook.Commands Assembly Kook.Net.Core.dll Represents a context of a command. This may include the client, guild, channel, user, and message. public interface ICommandContext Properties Channel Gets the IMessageChannel that the command is executed in. IMessageChannel Channel { get; } Property Value IMessageChannel Client Gets the IKookClient that the command is executed with. IKookClient Client { get; } Property Value IKookClient Guild Gets the IGuild that the command is executed in. IGuild? Guild { get; } Property Value IGuild Message Gets the IUserMessage that the command is interpreted from. IUserMessage Message { get; } Property Value IUserMessage User Gets the IUser who executed the command. IUser User { get; } Property Value IUser"
  },
  "api/Kook.Commands.IEnumerableExtensions.html": {
    "href": "api/Kook.Commands.IEnumerableExtensions.html",
    "title": "Class IEnumerableExtensions | Kook.Net 文档",
    "keywords": "Class IEnumerableExtensions Namespace Kook.Commands Assembly Kook.Net.Commands.dll Provides extension methods for IEnumerable<T>. public static class IEnumerableExtensions Inheritance object IEnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Permutate<TFirst, TSecond, TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>) Generates all possible combinations of elements from two collections and applies a specified function to each combination to produce a result. public static IEnumerable<TResult> Permutate<TFirst, TSecond, TResult>(this IEnumerable<TFirst> set, IEnumerable<TSecond> others, Func<TFirst, TSecond, TResult> func) Parameters set IEnumerable<TFirst> The first collection of elements to use to generate the combinations. others IEnumerable<TSecond> The second collection of elements to use to generate the combinations. func Func<TFirst, TSecond, TResult> The function to apply to each combination of elements to produce a result. Returns IEnumerable<TResult> An IEnumerable<T> of TResult values generated by applying the specified function to each combination of elements. Type Parameters TFirst The type of elements in the first collection. TSecond The type of elements in the second collection. TResult The type of the results produced by the specified function."
  },
  "api/Kook.Commands.IModuleBase.html": {
    "href": "api/Kook.Commands.IModuleBase.html",
    "title": "Interface IModuleBase | Kook.Net 文档",
    "keywords": "Interface IModuleBase Namespace Kook.Commands Assembly Kook.Net.Commands.dll Represents a generic module base. public interface IModuleBase Methods AfterExecute(CommandInfo) Executed after a command is run in this module base. void AfterExecute(CommandInfo command) Parameters command CommandInfo The command that ran. AfterExecuteAsync(CommandInfo) Executed asynchronously after a command is run in this module base. Task AfterExecuteAsync(CommandInfo command) Parameters command CommandInfo The command that's about to run. Returns Task BeforeExecute(CommandInfo) Executed before a command is run in this module base. void BeforeExecute(CommandInfo command) Parameters command CommandInfo The command that's about to run. BeforeExecuteAsync(CommandInfo) Executed asynchronously before a command is run in this module base. Task BeforeExecuteAsync(CommandInfo command) Parameters command CommandInfo The command thats about to run. Returns Task OnModuleBuilding(CommandService, ModuleBuilder) Executed when this module is building. void OnModuleBuilding(CommandService commandService, ModuleBuilder builder) Parameters commandService CommandService The command service that is building this module. builder ModuleBuilder The builder constructing this module. SetContext(ICommandContext) Sets the context of this module base. void SetContext(ICommandContext context) Parameters context ICommandContext The context to set."
  },
  "api/Kook.Commands.IResult.html": {
    "href": "api/Kook.Commands.IResult.html",
    "title": "Interface IResult | Kook.Net 文档",
    "keywords": "Interface IResult Namespace Kook.Commands Assembly Kook.Net.Commands.dll Contains information of the result related to a command. public interface IResult Properties Error Describes the error type that may have occurred during the operation. CommandError? Error { get; } Property Value CommandError? A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorReason Describes the reason for the error. string? ErrorReason { get; } Property Value string A string containing the error reason. IsSuccess Indicates whether the operation was successful or not. bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false."
  },
  "api/Kook.Commands.MatchResult.html": {
    "href": "api/Kook.Commands.MatchResult.html",
    "title": "Class MatchResult | Kook.Net 文档",
    "keywords": "Class MatchResult Namespace Kook.Commands Assembly Kook.Net.Commands.dll Represents the match result of a command. public class MatchResult : IResult Inheritance object MatchResult Implements IResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Error Describes the error type that may have occurred during the operation. public CommandError? Error { get; } Property Value CommandError? A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorReason Describes the reason for the error. public string? ErrorReason { get; } Property Value string A string containing the error reason. IsSuccess Indicates whether the operation was successful or not. public bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false. Match Gets the command that may have matched during the command execution. public CommandMatch? Match { get; } Property Value CommandMatch? Pipeline Gets on which pipeline stage the command may have matched or failed. public IResult? Pipeline { get; } Property Value IResult Methods FromError(CommandError, string) Creates a failed match result. public static MatchResult FromError(CommandError error, string reason) Parameters error CommandError The error that occurred. reason string The reason for the error. Returns MatchResult The match result. FromError(IResult) Creates a failed match result. public static MatchResult FromError(IResult result) Parameters result IResult The result that failed. Returns MatchResult The match result. FromError(IResult, CommandError, string) Creates a failed match result. public static MatchResult FromError(IResult pipeline, CommandError error, string reason) Parameters pipeline IResult The pipeline stage on which the command failed. error CommandError The error that occurred. reason string The reason for the error. Returns MatchResult The match result. FromError(Exception) Creates a failed match result. public static MatchResult FromError(Exception ex) Parameters ex Exception The exception that occurred. Returns MatchResult The match result. FromSuccess(CommandMatch, IResult) Creates a successful match result. public static MatchResult FromSuccess(CommandMatch match, IResult pipeline) Parameters match CommandMatch The command that matched. pipeline IResult The pipeline stage on which the command matched. Returns MatchResult The match result. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Kook.Commands.MessageExtensions.html": {
    "href": "api/Kook.Commands.MessageExtensions.html",
    "title": "Class MessageExtensions | Kook.Net 文档",
    "keywords": "Class MessageExtensions Namespace Kook.Commands Assembly Kook.Net.Commands.dll Provides extension methods for IUserMessage that relates to commands. public static class MessageExtensions Inheritance object MessageExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HasCharPrefix(IUserMessage, char, ref int) Gets whether the message starts with the provided character. public static bool HasCharPrefix(this IUserMessage msg, char c, ref int argPos) Parameters msg IUserMessage The message to check against. c char The char prefix. argPos int References where the command starts. Returns bool true if the message begins with the char c; otherwise false. HasMentionPrefix(IUserMessage, IUser, ref int) Gets whether the message starts with the user's mention string. public static bool HasMentionPrefix(this IUserMessage msg, IUser user, ref int argPos) Parameters msg IUserMessage user IUser argPos int Returns bool HasStringPrefix(IUserMessage, string, ref int, StringComparison) Gets whether the message starts with the provided string. public static bool HasStringPrefix(this IUserMessage msg, string str, ref int argPos, StringComparison comparisonType = StringComparison.Ordinal) Parameters msg IUserMessage str string argPos int comparisonType StringComparison Returns bool TryExpandCardContent(IUserMessage, out string?) Tries to expand the content of the card into a single string. public static bool TryExpandCardContent(this IUserMessage msg, out string? expandedContent) Parameters msg IUserMessage The message to expand the content of. expandedContent string The expanded content of the card. Returns bool true if the content was successfully expanded; otherwise, false."
  },
  "api/Kook.Commands.MessageTypeReader-1.html": {
    "href": "api/Kook.Commands.MessageTypeReader-1.html",
    "title": "Class MessageTypeReader<T> | Kook.Net 文档",
    "keywords": "Class MessageTypeReader<T> Namespace Kook.Commands Assembly Kook.Net.Commands.dll A TypeReader for parsing objects implementing IMessage. public class MessageTypeReader<T> : TypeReader where T : class, IMessage Type Parameters T The type to be checked; must implement IMessage. Inheritance object TypeReader MessageTypeReader<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadAsync(ICommandContext, string, IServiceProvider) Attempts to parse the input into the desired type. public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) Parameters context ICommandContext The context of the command. input string The raw input of the command. services IServiceProvider The service collection used for dependency injection. Returns Task<TypeReaderResult> A task that represents the asynchronous parsing operation. The task result contains the parsing result."
  },
  "api/Kook.Commands.ModuleBase-1.html": {
    "href": "api/Kook.Commands.ModuleBase-1.html",
    "title": "Class ModuleBase<T> | Kook.Net 文档",
    "keywords": "Class ModuleBase<T> Namespace Kook.Commands Assembly Kook.Net.Commands.dll Provides a base class for a command module to inherit from. public abstract class ModuleBase<T> : IModuleBase where T : class, ICommandContext Type Parameters T A class that implements ICommandContext. Inheritance object ModuleBase<T> Implements IModuleBase Derived ModuleBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Context The underlying context of the command. public T Context { get; } Property Value T See Also ICommandContext CommandContext Methods AfterExecute(CommandInfo) The method to execute after executing the command. protected virtual void AfterExecute(CommandInfo command) Parameters command CommandInfo The CommandInfo of the command to be executed. AfterExecuteAsync(CommandInfo) The method to execute asynchronously after executing the command. protected virtual Task AfterExecuteAsync(CommandInfo command) Parameters command CommandInfo The CommandInfo of the command to be executed. Returns Task BeforeExecute(CommandInfo) The method to execute before executing the command. protected virtual void BeforeExecute(CommandInfo command) Parameters command CommandInfo The CommandInfo of the command to be executed. BeforeExecuteAsync(CommandInfo) The method to execute asynchronously before executing the command. protected virtual Task BeforeExecuteAsync(CommandInfo command) Parameters command CommandInfo The CommandInfo of the command to be executed. Returns Task OnModuleBuilding(CommandService, ModuleBuilder) The method to execute when building the module. protected virtual void OnModuleBuilding(CommandService commandService, ModuleBuilder builder) Parameters commandService CommandService The CommandService used to create the module. builder ModuleBuilder The builder used to build the module. ReplyCardAsync(ICard, bool, bool, RequestOptions?) Sends a card message to the source channel. protected virtual Task<Cacheable<IUserMessage, Guid>> ReplyCardAsync(ICard card, bool isQuote = true, bool isEphemeral = false, RequestOptions? options = null) Parameters card ICard The card to be sent. isQuote bool true if the source message will be quoted in this message; otherwise, false. isEphemeral bool true if the message to be sent can be seen only by the command invoker; otherwise, false. options RequestOptions The request options for this async request. Returns Task<Cacheable<IUserMessage, Guid>> ReplyCardsAsync(IEnumerable<ICard>, bool, bool, RequestOptions?) Sends a card message to the source channel. protected virtual Task<Cacheable<IUserMessage, Guid>> ReplyCardsAsync(IEnumerable<ICard> cards, bool isQuote = true, bool isEphemeral = false, RequestOptions? options = null) Parameters cards IEnumerable<ICard> The cards to be sent. isQuote bool true if the source message will be quoted in this message; otherwise, false. isEphemeral bool true if the message to be sent can be seen only by the command invoker; otherwise, false. options RequestOptions The request options for this async request. Returns Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(FileAttachment, bool, bool, RequestOptions?) Sends a file to the source channel. protected virtual Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(FileAttachment attachment, bool isQuote = true, bool isEphemeral = false, RequestOptions? options = null) Parameters attachment FileAttachment The attachment containing the file. isQuote bool true if the source message will be quoted in this message; otherwise, false. isEphemeral bool true if the message to be sent can be seen only by the command invoker; otherwise, false. options RequestOptions The request options for this async request. Returns Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(Stream, string, AttachmentType, bool, bool, RequestOptions?) Sends a file to the source channel. protected virtual Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(Stream stream, string filename, AttachmentType type = AttachmentType.File, bool isQuote = true, bool isEphemeral = false, RequestOptions? options = null) Parameters stream Stream Stream of the file to be sent. filename string The name of the file. type AttachmentType The type of the attachment. isQuote bool true if the source message will be quoted in this message; otherwise, false. isEphemeral bool true if the message to be sent can be seen only by the command invoker; otherwise, false. options RequestOptions The request options for this async request. Returns Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(string, string?, AttachmentType, bool, bool, RequestOptions?) Sends a file to the source channel. protected virtual Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(string path, string? filename = null, AttachmentType type = AttachmentType.File, bool isQuote = true, bool isEphemeral = false, RequestOptions? options = null) Parameters path string The file path of the file. filename string The name of the file. type AttachmentType The type of the attachment. isQuote bool true if the source message will be quoted in this message; otherwise, false. isEphemeral bool true if the message to be sent can be seen only by the command invoker; otherwise, false. options RequestOptions The request options for this async request. Returns Task<Cacheable<IUserMessage, Guid>> ReplyTextAsync(string, bool, bool, RequestOptions?) Sends a text message to the source channel. protected virtual Task<Cacheable<IUserMessage, Guid>> ReplyTextAsync(string message, bool isQuote = true, bool isEphemeral = false, RequestOptions? options = null) Parameters message string Contents of the message. isQuote bool true if the source message will be quoted in this message; otherwise, false. isEphemeral bool true if the message to be sent can be seen only by the command invoker; otherwise, false. options RequestOptions The request options for this async request. Returns Task<Cacheable<IUserMessage, Guid>>"
  },
  "api/Kook.Commands.ModuleBase.html": {
    "href": "api/Kook.Commands.ModuleBase.html",
    "title": "Class ModuleBase | Kook.Net 文档",
    "keywords": "Class ModuleBase Namespace Kook.Commands Assembly Kook.Net.Commands.dll Provides a base class for a command module to inherit from. public abstract class ModuleBase : ModuleBase<ICommandContext>, IModuleBase Inheritance object ModuleBase<ICommandContext> ModuleBase Implements IModuleBase Inherited Members ModuleBase<ICommandContext>.Context ModuleBase<ICommandContext>.ReplyFileAsync(string, string, AttachmentType, bool, bool, RequestOptions) ModuleBase<ICommandContext>.ReplyFileAsync(Stream, string, AttachmentType, bool, bool, RequestOptions) ModuleBase<ICommandContext>.ReplyFileAsync(FileAttachment, bool, bool, RequestOptions) ModuleBase<ICommandContext>.ReplyTextAsync(string, bool, bool, RequestOptions) ModuleBase<ICommandContext>.ReplyCardsAsync(IEnumerable<ICard>, bool, bool, RequestOptions) ModuleBase<ICommandContext>.ReplyCardAsync(ICard, bool, bool, RequestOptions) ModuleBase<ICommandContext>.BeforeExecuteAsync(CommandInfo) ModuleBase<ICommandContext>.BeforeExecute(CommandInfo) ModuleBase<ICommandContext>.AfterExecuteAsync(CommandInfo) ModuleBase<ICommandContext>.AfterExecute(CommandInfo) ModuleBase<ICommandContext>.OnModuleBuilding(CommandService, ModuleBuilder) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Kook.Commands.ModuleInfo.html": {
    "href": "api/Kook.Commands.ModuleInfo.html",
    "title": "Class ModuleInfo | Kook.Net 文档",
    "keywords": "Class ModuleInfo Namespace Kook.Commands Assembly Kook.Net.Commands.dll Provides the information of a module. public class ModuleInfo Inheritance object ModuleInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CommandServiceExtensions.GetExecutableCommandsAsync(ModuleInfo, ICommandContext, IServiceProvider) Properties Aliases Gets a read-only list of aliases associated with this module. public IReadOnlyList<string> Aliases { get; } Property Value IReadOnlyList<string> Attributes Gets a read-only list of attributes that apply to this module. public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> Commands Gets a read-only list of commands associated with this module. public IReadOnlyList<CommandInfo> Commands { get; } Property Value IReadOnlyList<CommandInfo> Group Gets the group name (main prefix) of this module. public string? Group { get; } Property Value string IsSubmodule Gets a value that indicates whether this module is a submodule or not. public bool IsSubmodule { get; } Property Value bool Name Gets the name of this module. public string? Name { get; } Property Value string Parent Gets the parent module of this submodule if applicable. public ModuleInfo? Parent { get; } Property Value ModuleInfo Preconditions Gets a read-only list of preconditions that apply to this module. public IReadOnlyList<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList<PreconditionAttribute> Remarks Gets the remarks of this module. public string? Remarks { get; } Property Value string Service Gets the command service associated with this module. public CommandService Service { get; } Property Value CommandService Submodules Gets a read-only list of submodules associated with this module. public IReadOnlyList<ModuleInfo> Submodules { get; } Property Value IReadOnlyList<ModuleInfo> Summary Gets the summary of this module. public string? Summary { get; } Property Value string"
  },
  "api/Kook.Commands.MultiMatchHandling.html": {
    "href": "api/Kook.Commands.MultiMatchHandling.html",
    "title": "Enum MultiMatchHandling | Kook.Net 文档",
    "keywords": "Enum MultiMatchHandling Namespace Kook.Commands Assembly Kook.Net.Commands.dll Specifies the behavior when multiple matches are found during the command parsing stage. public enum MultiMatchHandling Fields Best = 1 Indicates that when multiple results are found, the best result should be chosen. Exception = 0 Indicates that when multiple results are found, an exception should be thrown."
  },
  "api/Kook.Commands.NameAttribute.html": {
    "href": "api/Kook.Commands.NameAttribute.html",
    "title": "Class NameAttribute | Kook.Net 文档",
    "keywords": "Class NameAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll Marks the public name of a command, module, or parameter. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method|AttributeTargets.Parameter)] public class NameAttribute : Attribute Inheritance object Attribute NameAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NameAttribute(string) Marks the public name of a command, module, or parameter with the provided name. public NameAttribute(string text) Parameters text string The public name of the object. Properties Text Gets the name of the command. public string Text { get; } Property Value string"
  },
  "api/Kook.Commands.NamedArgumentTypeAttribute.html": {
    "href": "api/Kook.Commands.NamedArgumentTypeAttribute.html",
    "title": "Class NamedArgumentTypeAttribute | Kook.Net 文档",
    "keywords": "Class NamedArgumentTypeAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll Instructs the command system to treat command parameters of this type as a collection of named arguments matching to its properties. [AttributeUsage(AttributeTargets.Class)] public sealed class NamedArgumentTypeAttribute : Attribute Inheritance object Attribute NamedArgumentTypeAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Kook.Commands.OverrideTypeReaderAttribute.html": {
    "href": "api/Kook.Commands.OverrideTypeReaderAttribute.html",
    "title": "Class OverrideTypeReaderAttribute | Kook.Net 文档",
    "keywords": "Class OverrideTypeReaderAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll Marks the Type to be read by the specified TypeReader. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Parameter)] public sealed class OverrideTypeReaderAttribute : Attribute Inheritance object Attribute OverrideTypeReaderAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Examples In this example, the TimeSpan will be read by a custom TypeReader, FriendlyTimeSpanTypeReader, instead of the TimeSpanTypeReader shipped by Kook.Net. [Command(\"time\")] public Task GetTimeAsync([OverrideTypeReader(typeof(FriendlyTimeSpanTypeReader))]TimeSpan time) => ReplyAsync(time); Remarks This attribute will override the TypeReader to be used when parsing for the desired type in the command. This is useful when one wishes to use a particular TypeReader without affecting other commands that are using the same target type. warning If the given type reader does not inherit from TypeReader, an ArgumentException will be thrown. Constructors OverrideTypeReaderAttribute(Type) public OverrideTypeReaderAttribute(Type overridenTypeReader) Parameters overridenTypeReader Type The TypeReader to be used with the parameter. Exceptions ArgumentException The given overridenTypeReader does not inherit from TypeReader. Properties TypeReader Gets the specified TypeReader of the parameter. public Type TypeReader { get; } Property Value Type"
  },
  "api/Kook.Commands.ParameterInfo.html": {
    "href": "api/Kook.Commands.ParameterInfo.html",
    "title": "Class ParameterInfo | Kook.Net 文档",
    "keywords": "Class ParameterInfo Namespace Kook.Commands Assembly Kook.Net.Commands.dll Provides the information of a parameter. public class ParameterInfo Inheritance object ParameterInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Attributes Gets a read-only list of attributes that apply to this parameter. public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> Command Gets the command that associates with this parameter. public CommandInfo Command { get; } Property Value CommandInfo DefaultValue Gets the default value for this optional parameter if applicable. public object? DefaultValue { get; } Property Value object IsMultiple Gets a value that indicates whether this parameter is a multiple parameter or not. public bool IsMultiple { get; } Property Value bool IsOptional Gets a value that indicates whether this parameter is optional or not. public bool IsOptional { get; } Property Value bool IsRemainder Gets a value that indicates whether this parameter is a remainder parameter or not. public bool IsRemainder { get; } Property Value bool Name Gets the name of this parameter. public string Name { get; } Property Value string Preconditions Gets a read-only list of precondition that apply to this parameter. public IReadOnlyList<ParameterPreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList<ParameterPreconditionAttribute> Summary Gets the summary of this parameter. public string? Summary { get; } Property Value string Type Gets the type of the parameter. public Type? Type { get; } Property Value Type Methods CheckPreconditionsAsync(ICommandContext, object?, IServiceProvider?) Checks the preconditions of this parameter. public Task<PreconditionResult> CheckPreconditionsAsync(ICommandContext context, object? arg, IServiceProvider? services = null) Parameters context ICommandContext The context of the command. arg object The argument that is being parsed. services IServiceProvider The service provider that is used to resolve services. Returns Task<PreconditionResult> A PreconditionResult that indicates whether the precondition is successful or not. ParseAsync(ICommandContext, string, IServiceProvider?) Parses the input string into the desired type. public Task<TypeReaderResult> ParseAsync(ICommandContext context, string input, IServiceProvider? services = null) Parameters context ICommandContext The context of the command. input string The input string. services IServiceProvider The service provider that is used to resolve services. Returns Task<TypeReaderResult> A TypeReaderResult that contains the parsing result. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Kook.Commands.ParameterPreconditionAttribute.html": {
    "href": "api/Kook.Commands.ParameterPreconditionAttribute.html",
    "title": "Class ParameterPreconditionAttribute | Kook.Net 文档",
    "keywords": "Class ParameterPreconditionAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll Requires the parameter to pass the specified precondition before execution can begin. [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = true)] public abstract class ParameterPreconditionAttribute : Attribute Inheritance object Attribute ParameterPreconditionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckPermissionsAsync(ICommandContext, ParameterInfo, object?, IServiceProvider) Checks whether the condition is met before execution of the command. public abstract Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, ParameterInfo parameter, object? value, IServiceProvider services) Parameters context ICommandContext The context of the command. parameter ParameterInfo The parameter of the command being checked against. value object The raw value of the parameter. services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult> See Also PreconditionAttribute"
  },
  "api/Kook.Commands.ParseResult.html": {
    "href": "api/Kook.Commands.ParseResult.html",
    "title": "Struct ParseResult | Kook.Net 文档",
    "keywords": "Struct ParseResult Namespace Kook.Commands Assembly Kook.Net.Commands.dll Contains information for the parsing result from the command service's parser. public struct ParseResult : IResult Implements IResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties ArgValues Gets a read-only collection containing the parsed argument values. public readonly IReadOnlyList<TypeReaderResult> ArgValues { get; } Property Value IReadOnlyList<TypeReaderResult> Error Describes the error type that may have occurred during the operation. public readonly CommandError? Error { get; } Property Value CommandError? A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorParameter Provides information about the parameter that caused the parsing error. public readonly ParameterInfo? ErrorParameter { get; } Property Value ParameterInfo A ParameterInfo indicating the parameter info of the error that may have occurred during parsing; null if the parsing was successful or the parsing error is not specific to a single parameter. ErrorReason Describes the reason for the error. public readonly string? ErrorReason { get; } Property Value string A string containing the error reason. IsSuccess Indicates whether the operation was successful or not. public bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false. ParamValues Gets a read-only collection containing the parsed parameter values. public readonly IReadOnlyList<TypeReaderResult> ParamValues { get; } Property Value IReadOnlyList<TypeReaderResult> Methods FromError(CommandError, string) Creates a failed parsing result. public static ParseResult FromError(CommandError error, string reason) Parameters error CommandError The error that occurred. reason string The reason for the error. Returns ParseResult The parsing result. FromError(CommandError, string, ParameterInfo) Creates a failed parsing result. public static ParseResult FromError(CommandError error, string reason, ParameterInfo parameterInfo) Parameters error CommandError The error that occurred. reason string The reason for the error. parameterInfo ParameterInfo The parameter info of the error that may have occurred during parsing. Returns ParseResult The parsing result. FromError(IResult) Creates a failed parsing result. public static ParseResult FromError(IResult result) Parameters result IResult The result that contains the error. Returns ParseResult The parsing result. FromError(IResult, ParameterInfo) Creates a failed parsing result. public static ParseResult FromError(IResult result, ParameterInfo parameterInfo) Parameters result IResult The result that contains the error. parameterInfo ParameterInfo The parameter info of the error that may have occurred during parsing. Returns ParseResult The parsing result. FromError(Exception) Creates a failed parsing result. public static ParseResult FromError(Exception ex) Parameters ex Exception The exception that occurred. Returns ParseResult The parsing result. FromSuccess(IReadOnlyList<TypeReaderResult>, IReadOnlyList<TypeReaderResult>) Creates a successful parsing result. public static ParseResult FromSuccess(IReadOnlyList<TypeReaderResult> argValues, IReadOnlyList<TypeReaderResult> paramValues) Parameters argValues IReadOnlyList<TypeReaderResult> The parsed argument values. paramValues IReadOnlyList<TypeReaderResult> The parsed parameter values. Returns ParseResult The parsing result. FromSuccess(IReadOnlyList<TypeReaderValue>, IReadOnlyList<TypeReaderValue>) Creates a successful parsing result. public static ParseResult FromSuccess(IReadOnlyList<TypeReaderValue> argValues, IReadOnlyList<TypeReaderValue> paramValues) Parameters argValues IReadOnlyList<TypeReaderValue> The parsed argument values. paramValues IReadOnlyList<TypeReaderValue> The parsed parameter values. Returns ParseResult The parsing result. ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/Kook.Commands.PreconditionAttribute.html": {
    "href": "api/Kook.Commands.PreconditionAttribute.html",
    "title": "Class PreconditionAttribute | Kook.Net 文档",
    "keywords": "Class PreconditionAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll Requires the module or class to pass the specified precondition before execution can begin. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true)] public abstract class PreconditionAttribute : Attribute Inheritance object Attribute PreconditionAttribute Derived RequireBotPermissionAttribute RequireContextAttribute RequireRoleAttribute RequireUserAttribute RequireUserPermissionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ErrorMessage When overridden in a derived class, uses the supplied string as the error message if the precondition doesn't pass. Setting this for a class that doesn't override this property is a no-op. public virtual string? ErrorMessage { get; set; } Property Value string Group Specifies a group that this precondition belongs to. public string? Group { get; set; } Property Value string Remarks Preconditions of the same group require only one of the preconditions to pass in order to be successful (A || B). Specifying Group = null or not at all will require all preconditions to pass, just like normal (A && B). Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) Checks if the command has the sufficient permission to be executed. public abstract Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters context ICommandContext The context of the command. command CommandInfo The command being executed. services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult> See Also ParameterPreconditionAttribute"
  },
  "api/Kook.Commands.PreconditionGroupResult.html": {
    "href": "api/Kook.Commands.PreconditionGroupResult.html",
    "title": "Class PreconditionGroupResult | Kook.Net 文档",
    "keywords": "Class PreconditionGroupResult Namespace Kook.Commands Assembly Kook.Net.Commands.dll Represents the result of a grouped precondition check. public class PreconditionGroupResult : PreconditionResult, IResult Inheritance object PreconditionResult PreconditionGroupResult Implements IResult Inherited Members PreconditionResult.Error PreconditionResult.ErrorReason PreconditionResult.IsSuccess PreconditionResult.FromError(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PreconditionGroupResult(CommandError?, string?, ICollection<PreconditionResult>) Creates a new PreconditionGroupResult with the specified error, reason, and precondition results. protected PreconditionGroupResult(CommandError? error, string? errorReason, ICollection<PreconditionResult> preconditions) Parameters error CommandError? The error that occurred. errorReason string The reason for the error. preconditions ICollection<PreconditionResult> The results of the precondition checks. Properties PreconditionResults Gets the results of the precondition checks. public IReadOnlyCollection<PreconditionResult> PreconditionResults { get; } Property Value IReadOnlyCollection<PreconditionResult> Methods FromError(IResult) Returns a PreconditionResult with the specified result. public static PreconditionGroupResult FromError(IResult result) Parameters result IResult The result of failure. Returns PreconditionGroupResult FromError(Exception) Returns a PreconditionResult with an exception. public static PreconditionGroupResult FromError(Exception ex) Parameters ex Exception The exception that occurred. Returns PreconditionGroupResult FromError(string, ICollection<PreconditionResult>) Returns a PreconditionResult with the reason and precondition results. public static PreconditionGroupResult FromError(string reason, ICollection<PreconditionResult> preconditions) Parameters reason string The reason for the error. preconditions ICollection<PreconditionResult> The results of the precondition checks. Returns PreconditionGroupResult FromSuccess() Returns a PreconditionResult with no errors. public static PreconditionGroupResult FromSuccess() Returns PreconditionGroupResult ToString() Returns a string indicating whether the PreconditionResult is successful. public override string ToString() Returns string"
  },
  "api/Kook.Commands.PreconditionResult.html": {
    "href": "api/Kook.Commands.PreconditionResult.html",
    "title": "Class PreconditionResult | Kook.Net 文档",
    "keywords": "Class PreconditionResult Namespace Kook.Commands Assembly Kook.Net.Commands.dll Represents a result type for command preconditions. public class PreconditionResult : IResult Inheritance object PreconditionResult Implements IResult Derived PreconditionGroupResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PreconditionResult(CommandError?, string?) Initializes a new PreconditionResult class with the command error type and reason. protected PreconditionResult(CommandError? error, string? errorReason) Parameters error CommandError? The type of failure. errorReason string The reason of failure. Properties Error Describes the error type that may have occurred during the operation. public CommandError? Error { get; } Property Value CommandError? A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorReason Describes the reason for the error. public string? ErrorReason { get; } Property Value string A string containing the error reason. IsSuccess Indicates whether the operation was successful or not. public bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false. Methods FromError(IResult) Returns a PreconditionResult with the specified result type. public static PreconditionResult FromError(IResult result) Parameters result IResult The result of failure. Returns PreconditionResult FromError(Exception) Returns a PreconditionResult with an exception. public static PreconditionResult FromError(Exception ex) Parameters ex Exception The exception that occurred. Returns PreconditionResult FromError(string) Returns a PreconditionResult with UnmetPrecondition and the specified reason. public static PreconditionResult FromError(string reason) Parameters reason string The reason of failure. Returns PreconditionResult FromSuccess() Returns a PreconditionResult with no errors. public static PreconditionResult FromSuccess() Returns PreconditionResult ToString() Returns a string indicating whether the PreconditionResult is successful. public override string ToString() Returns string"
  },
  "api/Kook.Commands.PriorityAttribute.html": {
    "href": "api/Kook.Commands.PriorityAttribute.html",
    "title": "Class PriorityAttribute | Kook.Net 文档",
    "keywords": "Class PriorityAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll Sets priority of commands. [AttributeUsage(AttributeTargets.Method)] public class PriorityAttribute : Attribute Inheritance object Attribute PriorityAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PriorityAttribute(int) Initializes a new PriorityAttribute attribute with the given priority. public PriorityAttribute(int priority) Parameters priority int Properties Priority Gets the priority which has been set for the command. public int Priority { get; } Property Value int"
  },
  "api/Kook.Commands.RemainderAttribute.html": {
    "href": "api/Kook.Commands.RemainderAttribute.html",
    "title": "Class RemainderAttribute | Kook.Net 文档",
    "keywords": "Class RemainderAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll Marks the input to not be parsed by the parser. [AttributeUsage(AttributeTargets.Parameter)] public class RemainderAttribute : Attribute Inheritance object Attribute RemainderAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Kook.Commands.RemarksAttribute.html": {
    "href": "api/Kook.Commands.RemarksAttribute.html",
    "title": "Class RemarksAttribute | Kook.Net 文档",
    "keywords": "Class RemarksAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll Attaches remarks to your commands. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method)] public class RemarksAttribute : Attribute Inheritance object Attribute RemarksAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RemarksAttribute(string) Initializes a new RemarksAttribute attribute with the specified remarks. public RemarksAttribute(string text) Parameters text string Properties Text Gets the remarks of the command. public string Text { get; } Property Value string"
  },
  "api/Kook.Commands.RequireBotPermissionAttribute.html": {
    "href": "api/Kook.Commands.RequireBotPermissionAttribute.html",
    "title": "Class RequireBotPermissionAttribute | Kook.Net 文档",
    "keywords": "Class RequireBotPermissionAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll Requires the bot to have a specific permission in the channel a command is invoked in. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true)] public class RequireBotPermissionAttribute : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireBotPermissionAttribute Inherited Members PreconditionAttribute.Group Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequireBotPermissionAttribute(ChannelPermission) Requires that the bot account to have a specific ChannelPermission. public RequireBotPermissionAttribute(ChannelPermission permission) Parameters permission ChannelPermission The ChannelPermission that the bot must have. Multiple permissions can be specified by ORing the permissions together. RequireBotPermissionAttribute(GuildPermission) Requires the bot account to have a specific GuildPermission. public RequireBotPermissionAttribute(GuildPermission permission) Parameters permission GuildPermission The GuildPermission that the bot must have. Multiple permissions can be specified by ORing the permissions together. Remarks This precondition will always fail if the command is being invoked in a IPrivateChannel. Properties ChannelPermission Gets the specified ChannelPermission of the precondition. public ChannelPermission? ChannelPermission { get; } Property Value ChannelPermission? ErrorMessage When overridden in a derived class, uses the supplied string as the error message if the precondition doesn't pass. Setting this for a class that doesn't override this property is a no-op. public override string? ErrorMessage { get; set; } Property Value string GuildPermission Gets the specified GuildPermission of the precondition. public GuildPermission? GuildPermission { get; } Property Value GuildPermission? NotAGuildErrorMessage Gets or sets the error message if the precondition fails due to being run outside a Guild channel. public string? NotAGuildErrorMessage { get; set; } Property Value string Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) Checks if the command has the sufficient permission to be executed. public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters context ICommandContext The context of the command. command CommandInfo The command being executed. services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult>"
  },
  "api/Kook.Commands.RequireContextAttribute.html": {
    "href": "api/Kook.Commands.RequireContextAttribute.html",
    "title": "Class RequireContextAttribute | Kook.Net 文档",
    "keywords": "Class RequireContextAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll Requires the command to be invoked in a specified context (e.g. in guild, DM). [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true)] public class RequireContextAttribute : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireContextAttribute Inherited Members PreconditionAttribute.Group Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequireContextAttribute(ContextType) Requires the command to be invoked in the specified context. public RequireContextAttribute(ContextType contexts) Parameters contexts ContextType The type of context the command can be invoked in. Multiple contexts can be specified by ORing the contexts together. Examples [Command(\"secret\")] [RequireContext(ContextType.DM | ContextType.Group)] public Task PrivateOnlyAsync() { return ReplyAsync(\"shh, this command is a secret\"); } Properties Contexts Gets the context required to execute the command. public ContextType Contexts { get; } Property Value ContextType ErrorMessage When overridden in a derived class, uses the supplied string as the error message if the precondition doesn't pass. Setting this for a class that doesn't override this property is a no-op. public override string? ErrorMessage { get; set; } Property Value string Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) Checks if the command has the sufficient permission to be executed. public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters context ICommandContext The context of the command. command CommandInfo The command being executed. services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult>"
  },
  "api/Kook.Commands.RequireRoleAttribute.html": {
    "href": "api/Kook.Commands.RequireRoleAttribute.html",
    "title": "Class RequireRoleAttribute | Kook.Net 文档",
    "keywords": "Class RequireRoleAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll Requires the user invoking the command to have a specified role. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true)] public class RequireRoleAttribute : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireRoleAttribute Inherited Members PreconditionAttribute.Group PreconditionAttribute.ErrorMessage Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This precondition will restrict the access of the command or module to a user with the specified role. If the precondition fails to be met, an erroneous PreconditionResult will be returned with the message \"Command can only be run by the specified user.\" For example, you can pass the guild manager role to restrict the command to the guild managers to be able to use it. Constructors RequireRoleAttribute(string) Requires that the user invoking the command to have a specific Role. public RequireRoleAttribute(string roleName) Parameters roleName string Name of the role that the user must have. RequireRoleAttribute(uint) Requires that the user invoking the command to have a specific Role. public RequireRoleAttribute(uint roleId) Parameters roleId uint Id of the role that the user must have. Properties NotAGuildErrorMessage Gets or sets the error message if the precondition fails due to being run outside a Guild channel. public string? NotAGuildErrorMessage { get; set; } Property Value string Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) Checks if the command has the sufficient permission to be executed. public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters context ICommandContext The context of the command. command CommandInfo The command being executed. services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult>"
  },
  "api/Kook.Commands.RequireUserAttribute.html": {
    "href": "api/Kook.Commands.RequireUserAttribute.html",
    "title": "Class RequireUserAttribute | Kook.Net 文档",
    "keywords": "Class RequireUserAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll Requires the command to be invoked by the specified user. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true)] public class RequireUserAttribute : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireUserAttribute Inherited Members PreconditionAttribute.Group Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples The following example restricts the command to a set of sensitive commands that only the specified user should be able to access. [RequireUser(2810246202)] [Group(\"admin\")] public class AdminModule : ModuleBase { [Command(\"exit\")] public async Task ExitAsync() { Environment.Exit(0); } } Remarks This precondition will restrict the access of the command or module to a specified user. If the precondition fails to be met, an erroneous PreconditionResult will be returned with the message \"Command can only be run by the specified user.\" For example, you can pass the owner of this bot application to restrict the command to the bot owner to be able to use it. Constructors RequireUserAttribute(ulong) Initializes a new RequireUserAttribute attribute with the specified user identifier. public RequireUserAttribute(ulong userId) Parameters userId ulong The identifier of the user. Properties ErrorMessage When overridden in a derived class, uses the supplied string as the error message if the precondition doesn't pass. Setting this for a class that doesn't override this property is a no-op. public override string? ErrorMessage { get; set; } Property Value string Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) Checks if the command has the sufficient permission to be executed. public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters context ICommandContext The context of the command. command CommandInfo The command being executed. services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult>"
  },
  "api/Kook.Commands.RequireUserPermissionAttribute.html": {
    "href": "api/Kook.Commands.RequireUserPermissionAttribute.html",
    "title": "Class RequireUserPermissionAttribute | Kook.Net 文档",
    "keywords": "Class RequireUserPermissionAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll Requires the user invoking the command to have a specified permission. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true)] public class RequireUserPermissionAttribute : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireUserPermissionAttribute Inherited Members PreconditionAttribute.Group Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequireUserPermissionAttribute(ChannelPermission) Requires that the user invoking the command to have a specific ChannelPermission. public RequireUserPermissionAttribute(ChannelPermission permission) Parameters permission ChannelPermission The ChannelPermission that the user must have. Multiple permissions can be specified by ORing the permissions together. RequireUserPermissionAttribute(GuildPermission) Requires that the user invoking the command to have a specific GuildPermission. public RequireUserPermissionAttribute(GuildPermission permission) Parameters permission GuildPermission The GuildPermission that the user must have. Multiple permissions can be specified by ORing the permissions together. Remarks This precondition will always fail if the command is being invoked in a IPrivateChannel. Properties ChannelPermission Gets the specified ChannelPermission of the precondition. public ChannelPermission? ChannelPermission { get; } Property Value ChannelPermission? ErrorMessage When overridden in a derived class, uses the supplied string as the error message if the precondition doesn't pass. Setting this for a class that doesn't override this property is a no-op. public override string? ErrorMessage { get; set; } Property Value string GuildPermission Gets the specified GuildPermission of the precondition. public GuildPermission? GuildPermission { get; } Property Value GuildPermission? NotAGuildErrorMessage Gets or sets the error message if the precondition fails due to being run outside of a Guild channel. public string? NotAGuildErrorMessage { get; set; } Property Value string Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) Checks if the command has the sufficient permission to be executed. public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters context ICommandContext The context of the command. command CommandInfo The command being executed. services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult>"
  },
  "api/Kook.Commands.RoleTypeReader-1.html": {
    "href": "api/Kook.Commands.RoleTypeReader-1.html",
    "title": "Class RoleTypeReader<T> | Kook.Net 文档",
    "keywords": "Class RoleTypeReader<T> Namespace Kook.Commands Assembly Kook.Net.Commands.dll A TypeReader for parsing objects implementing IRole. public class RoleTypeReader<T> : TypeReader where T : class, IRole Type Parameters T The type to be checked; must implement IRole. Inheritance object TypeReader RoleTypeReader<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadAsync(ICommandContext, string, IServiceProvider) Attempts to parse the input into the desired type. public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) Parameters context ICommandContext The context of the command. input string The raw input of the command. services IServiceProvider The service collection used for dependency injection. Returns Task<TypeReaderResult> A task that represents the asynchronous parsing operation. The task result contains the parsing result."
  },
  "api/Kook.Commands.RunMode.html": {
    "href": "api/Kook.Commands.RunMode.html",
    "title": "Enum RunMode | Kook.Net 文档",
    "keywords": "Enum RunMode Namespace Kook.Commands Assembly Kook.Net.Commands.dll Specifies the behavior of the command execution workflow. public enum RunMode Fields Async = 2 Executes the command on a different thread from the gateway one. Default = 0 The default behavior set in CommandServiceConfig. Sync = 1 Executes the command on the same thread as gateway one. See Also CommandServiceConfig CommandAttribute"
  },
  "api/Kook.Commands.RuntimeResult.html": {
    "href": "api/Kook.Commands.RuntimeResult.html",
    "title": "Class RuntimeResult | Kook.Net 文档",
    "keywords": "Class RuntimeResult Namespace Kook.Commands Assembly Kook.Net.Commands.dll Represents the runtime result of a command execution. public abstract class RuntimeResult : IResult Inheritance object RuntimeResult Implements IResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RuntimeResult(CommandError?, string) Initializes a new RuntimeResult class with the type of error and reason. protected RuntimeResult(CommandError? error, string reason) Parameters error CommandError? The type of failure, or null if none. reason string The reason of failure. Properties Error Describes the error type that may have occurred during the operation. public CommandError? Error { get; } Property Value CommandError? A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. IsSuccess Indicates whether the operation was successful or not. public bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false. Reason Describes the execution reason or result. public string Reason { get; } Property Value string Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Kook.Commands.SearchResult.html": {
    "href": "api/Kook.Commands.SearchResult.html",
    "title": "Struct SearchResult | Kook.Net 文档",
    "keywords": "Struct SearchResult Namespace Kook.Commands Assembly Kook.Net.Commands.dll Represents the result of a command search. public struct SearchResult : IResult Implements IResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Commands Gets the commands that were found. public readonly IReadOnlyList<CommandMatch> Commands { get; } Property Value IReadOnlyList<CommandMatch> Error Describes the error type that may have occurred during the operation. public readonly CommandError? Error { get; } Property Value CommandError? A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorReason Describes the reason for the error. public readonly string? ErrorReason { get; } Property Value string A string containing the error reason. IsSuccess Indicates whether the operation was successful or not. public bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false. Text Gets the text that was searched in. public readonly string? Text { get; } Property Value string Methods FromError(CommandError, string) Returns a SearchResult with a CommandError. public static SearchResult FromError(CommandError error, string reason) Parameters error CommandError The type of failure. reason string The reason of failure. Returns SearchResult FromError(IResult) Returns a SearchResult with the specified result type. public static SearchResult FromError(IResult result) Parameters result IResult The result of failure. Returns SearchResult FromError(Exception) Returns a SearchResult with an exception. public static SearchResult FromError(Exception ex) Parameters ex Exception The exception that occurred. Returns SearchResult FromSuccess(string, IReadOnlyList<CommandMatch>) Returns a SearchResult with no errors. public static SearchResult FromSuccess(string text, IReadOnlyList<CommandMatch> commands) Parameters text string The text that was searched in. commands IReadOnlyList<CommandMatch> The commands that were found. Returns SearchResult ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/Kook.Commands.SocketCommandContext.html": {
    "href": "api/Kook.Commands.SocketCommandContext.html",
    "title": "Class SocketCommandContext | Kook.Net 文档",
    "keywords": "Class SocketCommandContext Namespace Kook.Commands Assembly Kook.Net.WebSocket.dll Represents a WebSocket-based context of a command. This may include the client, guild, channel, user, and message. public class SocketCommandContext : ICommandContext Inheritance object SocketCommandContext Implements ICommandContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SocketCommandContext(KookSocketClient, SocketUserMessage) Initializes a new SocketCommandContext class with the provided client and message. public SocketCommandContext(KookSocketClient client, SocketUserMessage msg) Parameters client KookSocketClient The underlying client. msg SocketUserMessage The underlying message. Properties Channel Gets the ISocketMessageChannel that the command is executed in. public ISocketMessageChannel Channel { get; } Property Value ISocketMessageChannel Client Gets the KookSocketClient that the command is executed with. public KookSocketClient Client { get; } Property Value KookSocketClient Guild Gets the SocketGuild that the command is executed in. public SocketGuild? Guild { get; } Property Value SocketGuild IsPrivate Indicates whether the channel that the command is executed in is a private channel. public bool IsPrivate { get; } Property Value bool Message Gets the SocketUserMessage that the command is interpreted from. public SocketUserMessage Message { get; } Property Value SocketUserMessage User Gets the SocketUser who executed the command. public SocketUser User { get; } Property Value SocketUser"
  },
  "api/Kook.Commands.SummaryAttribute.html": {
    "href": "api/Kook.Commands.SummaryAttribute.html",
    "title": "Class SummaryAttribute | Kook.Net 文档",
    "keywords": "Class SummaryAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll Attaches a summary to your command. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method|AttributeTargets.Parameter)] public class SummaryAttribute : Attribute Inheritance object Attribute SummaryAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SummaryAttribute(string) Initializes a new SummaryAttribute attribute with the specified summary. public SummaryAttribute(string text) Parameters text string Properties Text Gets the summary of the command. public string Text { get; } Property Value string"
  },
  "api/Kook.Commands.TypeReader.html": {
    "href": "api/Kook.Commands.TypeReader.html",
    "title": "Class TypeReader | Kook.Net 文档",
    "keywords": "Class TypeReader Namespace Kook.Commands Assembly Kook.Net.Commands.dll Defines a reader class that parses user input into a specified type. public abstract class TypeReader Inheritance object TypeReader Derived ChannelTypeReader<T> MessageTypeReader<T> RoleTypeReader<T> UserTypeReader<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadAsync(ICommandContext, string, IServiceProvider) Attempts to parse the input into the desired type. public abstract Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) Parameters context ICommandContext The context of the command. input string The raw input of the command. services IServiceProvider The service collection used for dependency injection. Returns Task<TypeReaderResult> A task that represents the asynchronous parsing operation. The task result contains the parsing result."
  },
  "api/Kook.Commands.TypeReaderResult.html": {
    "href": "api/Kook.Commands.TypeReaderResult.html",
    "title": "Struct TypeReaderResult | Kook.Net 文档",
    "keywords": "Struct TypeReaderResult Namespace Kook.Commands Assembly Kook.Net.Commands.dll Represents a parsing result of a type reader. public struct TypeReaderResult : IResult Implements IResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties BestMatch public object? BestMatch { get; } Property Value object Exceptions InvalidOperationException TypeReaderResult was not successful. Error Describes the error type that may have occurred during the operation. public readonly CommandError? Error { get; } Property Value CommandError? A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorReason Describes the reason for the error. public readonly string? ErrorReason { get; } Property Value string A string containing the error reason. IsSuccess Indicates whether the operation was successful or not. public bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false. Values Gets the parsed values. public readonly IReadOnlyCollection<TypeReaderValue> Values { get; } Property Value IReadOnlyCollection<TypeReaderValue> Methods FromError(CommandError, string) Returns a TypeReaderResult with a specified error. public static TypeReaderResult FromError(CommandError error, string reason) Parameters error CommandError The error. reason string The reason for the error. Returns TypeReaderResult FromError(IResult) Returns a TypeReaderResult with a specified result. public static TypeReaderResult FromError(IResult result) Parameters result IResult The result. Returns TypeReaderResult FromError(Exception) Returns a TypeReaderResult with an exception. public static TypeReaderResult FromError(Exception ex) Parameters ex Exception The exception that occurred. Returns TypeReaderResult FromSuccess(TypeReaderValue) Returns a TypeReaderResult with no errors. public static TypeReaderResult FromSuccess(TypeReaderValue value) Parameters value TypeReaderValue The parsed value. Returns TypeReaderResult FromSuccess(IReadOnlyCollection<TypeReaderValue>) Returns a TypeReaderResult with no errors. public static TypeReaderResult FromSuccess(IReadOnlyCollection<TypeReaderValue> values) Parameters values IReadOnlyCollection<TypeReaderValue> The parsed values. Returns TypeReaderResult FromSuccess(object?) Returns a TypeReaderResult with no errors. public static TypeReaderResult FromSuccess(object? value) Parameters value object The parsed value. Returns TypeReaderResult ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/Kook.Commands.TypeReaderValue.html": {
    "href": "api/Kook.Commands.TypeReaderValue.html",
    "title": "Struct TypeReaderValue | Kook.Net 文档",
    "keywords": "Struct TypeReaderValue Namespace Kook.Commands Assembly Kook.Net.Commands.dll Represents a parsing result of a type reader. public struct TypeReaderValue Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TypeReaderValue(object?, float) Initializes a new instance of the TypeReaderValue struct. public TypeReaderValue(object? value, float score) Parameters value object The parsed value. score float The confidence score of the parsing. Properties Score Gets the confidence score of the parsing. public readonly float Score { get; } Property Value float Value Gets the parsed value. public readonly object? Value { get; } Property Value object Methods ToString() Returns the fully qualified type name of this instance. public override string? ToString() Returns string The fully qualified type name."
  },
  "api/Kook.Commands.UserTypeReader-1.html": {
    "href": "api/Kook.Commands.UserTypeReader-1.html",
    "title": "Class UserTypeReader<T> | Kook.Net 文档",
    "keywords": "Class UserTypeReader<T> Namespace Kook.Commands Assembly Kook.Net.Commands.dll A TypeReader for parsing objects implementing IUser. public class UserTypeReader<T> : TypeReader where T : class, IUser Type Parameters T The type to be checked; must implement IUser. Inheritance object TypeReader UserTypeReader<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadAsync(ICommandContext, string, IServiceProvider) Attempts to parse the input into the desired type. public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) Parameters context ICommandContext The context of the command. input string The raw input of the command. services IServiceProvider The service collection used for dependency injection. Returns Task<TypeReaderResult> A task that represents the asynchronous parsing operation. The task result contains the parsing result."
  },
  "api/Kook.Commands.html": {
    "href": "api/Kook.Commands.html",
    "title": "Namespace Kook.Commands | Kook.Net 文档",
    "keywords": "Namespace Kook.Commands Classes AliasAttribute Marks the aliases for a command. ChannelTypeReader<T> A TypeReader for parsing objects implementing IChannel. CommandAttribute Marks the execution information for a command. CommandContext The context of a command which may contain the client, user, guild, channel, and message. CommandException The exception that is thrown if another exception occurs during a command execution. CommandInfo Provides the information of a command. CommandService Provides a framework for building Kook commands. CommandServiceConfig Represents a configuration class for CommandService. CommandServiceExtensions Provides extension methods for the CommandService class. DontAutoLoadAttribute Prevents the marked module from being loaded automatically. DontInjectAttribute Prevents the marked property from being injected into a module. GroupAttribute Marks the module as a command group. IEnumerableExtensions Provides extension methods for IEnumerable<T>. MatchResult Represents the match result of a command. MessageExtensions Provides extension methods for IUserMessage that relates to commands. MessageTypeReader<T> A TypeReader for parsing objects implementing IMessage. ModuleBase Provides a base class for a command module to inherit from. ModuleBase<T> Provides a base class for a command module to inherit from. ModuleInfo Provides the information of a module. NameAttribute Marks the public name of a command, module, or parameter. NamedArgumentTypeAttribute Instructs the command system to treat command parameters of this type as a collection of named arguments matching to its properties. OverrideTypeReaderAttribute Marks the Type to be read by the specified TypeReader. ParameterInfo Provides the information of a parameter. ParameterPreconditionAttribute Requires the parameter to pass the specified precondition before execution can begin. PreconditionAttribute Requires the module or class to pass the specified precondition before execution can begin. PreconditionGroupResult Represents the result of a grouped precondition check. PreconditionResult Represents a result type for command preconditions. PriorityAttribute Sets priority of commands. RemainderAttribute Marks the input to not be parsed by the parser. RemarksAttribute Attaches remarks to your commands. RequireBotPermissionAttribute Requires the bot to have a specific permission in the channel a command is invoked in. RequireContextAttribute Requires the command to be invoked in a specified context (e.g. in guild, DM). RequireRoleAttribute Requires the user invoking the command to have a specified role. RequireUserAttribute Requires the command to be invoked by the specified user. RequireUserPermissionAttribute Requires the user invoking the command to have a specified permission. RoleTypeReader<T> A TypeReader for parsing objects implementing IRole. RuntimeResult Represents the runtime result of a command execution. SocketCommandContext Represents a WebSocket-based context of a command. This may include the client, guild, channel, user, and message. SummaryAttribute Attaches a summary to your command. TypeReader Defines a reader class that parses user input into a specified type. UserTypeReader<T> A TypeReader for parsing objects implementing IUser. Structs CommandMatch Represents a matched command. ExecuteResult Contains information of the command's overall execution result. ParseResult Contains information for the parsing result from the command service's parser. SearchResult Represents the result of a command search. TypeReaderResult Represents a parsing result of a type reader. TypeReaderValue Represents a parsing result of a type reader. Interfaces ICommandContext Represents a context of a command. This may include the client, guild, channel, user, and message. IModuleBase Represents a generic module base. IResult Contains information of the result related to a command. Enums CommandError Defines the type of error a command can throw. ContextType Defines the type of command context (i.e. where the command is being executed). MultiMatchHandling Specifies the behavior when multiple matches are found during the command parsing stage. RunMode Specifies the behavior of the command execution workflow."
  },
  "api/Kook.ConnectionState.html": {
    "href": "api/Kook.ConnectionState.html",
    "title": "Enum ConnectionState | Kook.Net 文档",
    "keywords": "Enum ConnectionState Namespace Kook Assembly Kook.Net.Core.dll Specifies the connection state of a client. public enum ConnectionState : byte Fields Connected = 2 The client has established a connection to Kook. Connecting = 1 The client is connecting to Kook. Disconnected = 0 The client has disconnected from Kook. Disconnecting = 3 The client is disconnecting from Kook."
  },
  "api/Kook.ContainerModule.html": {
    "href": "api/Kook.ContainerModule.html",
    "title": "Class ContainerModule | Kook.Net 文档",
    "keywords": "Class ContainerModule Namespace Kook Assembly Kook.Net.Core.dll Represents a container module that can be used in an ICard. public class ContainerModule : IModule, IEquatable<ContainerModule>, IEquatable<IModule> Inheritance object ContainerModule Implements IModule IEquatable<ContainerModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(ContainerModule) CardExtensions.ToBuilder(IModule) Properties Elements Gets the elements in this container module. public ImmutableArray<ImageElement> Elements { get; } Property Value ImmutableArray<ImageElement> An ImmutableArray<T> representing the elements in this container module. Type Gets the type of the module. public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Methods Equals(ContainerModule?) Determines whether the specified ContainerModule is equal to the current ContainerModule. public bool Equals(ContainerModule? containerModule) Parameters containerModule ContainerModule The ContainerModule to compare with the current ContainerModule. Returns bool true if the specified ContainerModule is equal to the current ContainerModule; otherwise, false. Equals(object?) Determines whether the specified ContainerModule is equal to the current ContainerModule. public override bool Equals(object? obj) Parameters obj object The object to compare with the current ContainerModule. Returns bool true if the specified ContainerModule is equal to the current ContainerModule; otherwise, false. Remarks If the object passes is an ContainerModule, Equals(ContainerModule?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ContainerModule, ContainerModule) Determines whether the specified ContainerModule is equal to the current ContainerModule. public static bool operator ==(ContainerModule left, ContainerModule right) Parameters left ContainerModule right ContainerModule Returns bool true if the specified ContainerModule is equal to the current ContainerModule; otherwise, false. operator !=(ContainerModule, ContainerModule) Determines whether the specified ContainerModule is not equal to the current ContainerModule. public static bool operator !=(ContainerModule left, ContainerModule right) Parameters left ContainerModule right ContainerModule Returns bool true if the specified ContainerModule is not equal to the current ContainerModule; otherwise, false."
  },
  "api/Kook.ContainerModuleBuilder.html": {
    "href": "api/Kook.ContainerModuleBuilder.html",
    "title": "Class ContainerModuleBuilder | Kook.Net 文档",
    "keywords": "Class ContainerModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll Represents a container module builder for creating a ContainerModule. public class ContainerModuleBuilder : IModuleBuilder, IEquatable<ContainerModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object ContainerModuleBuilder Implements IModuleBuilder IEquatable<ContainerModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ContainerModuleBuilder() Initializes a new instance of the ContainerModuleBuilder class. public ContainerModuleBuilder() ContainerModuleBuilder(IList<ImageElementBuilder>) Initializes a new instance of the ContainerModuleBuilder class. public ContainerModuleBuilder(IList<ImageElementBuilder> elements) Parameters elements IList<ImageElementBuilder> Fields MaxElementCount Returns the maximum number of elements allowed by Kook. public const int MaxElementCount = 9 Field Value int Properties Elements Gets or sets the image elements in the container module. public IList<ImageElementBuilder> Elements { get; set; } Property Value IList<ImageElementBuilder> An IList<T> containing the image elements in this image container module. Type Specifies the module type of the IModule this builder creates. public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Methods AddElement(ImageElementBuilder) Adds an image element to the container module. public ContainerModuleBuilder AddElement(ImageElementBuilder field) Parameters field ImageElementBuilder The image element to add. Returns ContainerModuleBuilder The current builder. AddElement(Action<ImageElementBuilder>?) Adds an image element to the container module. public ContainerModuleBuilder AddElement(Action<ImageElementBuilder>? action = null) Parameters action Action<ImageElementBuilder> The action to add an image element to the container module. Returns ContainerModuleBuilder The current builder. Build() Builds this builder into a ContainerModule. public ContainerModule Build() Returns ContainerModule A ContainerModule representing the built container module object. Exceptions ArgumentNullException Elements cannot be null. ArgumentException Elements cannot be an empty list. ArgumentException Elements count must be less than or equal to MaxElementCount. Equals(ContainerModuleBuilder?) Determines whether the specified ContainerModuleBuilder is equal to the current ContainerModuleBuilder. public bool Equals(ContainerModuleBuilder? containerModuleBuilder) Parameters containerModuleBuilder ContainerModuleBuilder The ContainerModuleBuilder to compare with the current ContainerModuleBuilder. Returns bool true if the specified ContainerModuleBuilder is equal to the current ContainerModuleBuilder; otherwise, false. Equals(object?) Determines whether the specified ContainerModuleBuilder is equal to the current ContainerModuleBuilder. public override bool Equals(object? obj) Parameters obj object The object to compare with the current ContainerModuleBuilder. Returns bool true if the specified ContainerModuleBuilder is equal to the current ContainerModuleBuilder; otherwise, false. Remarks If the object passes is an ContainerModuleBuilder, Equals(ContainerModuleBuilder?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ContainerModuleBuilder?, ContainerModuleBuilder?) Determines whether the specified ContainerModuleBuilder is equal to the current ContainerModuleBuilder. public static bool operator ==(ContainerModuleBuilder? left, ContainerModuleBuilder? right) Parameters left ContainerModuleBuilder right ContainerModuleBuilder Returns bool true if the specified ContainerModuleBuilder is equal to the current ContainerModuleBuilder; otherwise, false. operator !=(ContainerModuleBuilder?, ContainerModuleBuilder?) Determines whether the specified ContainerModuleBuilder is not equal to the current ContainerModuleBuilder. public static bool operator !=(ContainerModuleBuilder? left, ContainerModuleBuilder? right) Parameters left ContainerModuleBuilder right ContainerModuleBuilder Returns bool true if the specified ContainerModuleBuilder is not equal to the current ContainerModuleBuilder; otherwise, false."
  },
  "api/Kook.ContextModule.html": {
    "href": "api/Kook.ContextModule.html",
    "title": "Class ContextModule | Kook.Net 文档",
    "keywords": "Class ContextModule Namespace Kook Assembly Kook.Net.Core.dll Represents a context module that can be used in an ICard. public class ContextModule : IModule, IEquatable<ContextModule>, IEquatable<IModule> Inheritance object ContextModule Implements IModule IEquatable<ContextModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(ContextModule) CardExtensions.ToBuilder(IModule) Properties Elements Gets the elements in this context module. public ImmutableArray<IElement> Elements { get; } Property Value ImmutableArray<IElement> An ImmutableArray<T> representing the elements in this context module. Type Gets the type of the module. public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Methods Equals(ContextModule?) Determines whether the specified ContextModule is equal to the current ContextModule. public bool Equals(ContextModule? contextModule) Parameters contextModule ContextModule The ContextModule to compare with the current ContextModule. Returns bool true if the specified ContextModule is equal to the current ContextModule; otherwise, false. Equals(object?) Determines whether the specified ContextModule is equal to the current ContextModule. public override bool Equals(object? obj) Parameters obj object The object to compare with the current ContextModule. Returns bool true if the specified ContextModule is equal to the current ContextModule; otherwise, false. Remarks If the object passes is an ContextModule, Equals(ContextModule?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ContextModule, ContextModule) Determines whether the specified ContextModule is equal to the current ContextModule. public static bool operator ==(ContextModule left, ContextModule right) Parameters left ContextModule right ContextModule Returns bool true if the specified ContextModule is equal to the current ContextModule; otherwise, false. operator !=(ContextModule, ContextModule) Determines whether the specified ContextModule is not equal to the current ContextModule. public static bool operator !=(ContextModule left, ContextModule right) Parameters left ContextModule right ContextModule Returns bool true if the specified ContextModule is not equal to the current ContextModule; otherwise, false."
  },
  "api/Kook.ContextModuleBuilder.html": {
    "href": "api/Kook.ContextModuleBuilder.html",
    "title": "Class ContextModuleBuilder | Kook.Net 文档",
    "keywords": "Class ContextModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll Represents a context module builder for creating a ContextModule. public class ContextModuleBuilder : IModuleBuilder, IEquatable<ContextModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object ContextModuleBuilder Implements IModuleBuilder IEquatable<ContextModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ContextModuleBuilder() Initializes a new instance of the ContextModuleBuilder class. public ContextModuleBuilder() ContextModuleBuilder(IList<IElementBuilder>) Initializes a new instance of the ContextModuleBuilder class. public ContextModuleBuilder(IList<IElementBuilder> elements) Parameters elements IList<IElementBuilder> Fields MaxElementCount Returns the maximum number of elements allowed by Kook. public const int MaxElementCount = 10 Field Value int Properties Elements Gets or sets the elements of the context module. public IList<IElementBuilder> Elements { get; set; } Property Value IList<IElementBuilder> Type Specifies the module type of the IModule this builder creates. public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Methods AddElement(ImageElementBuilder) Adds an image element to the context module. public ContextModuleBuilder AddElement(ImageElementBuilder field) Parameters field ImageElementBuilder The image element to add. Returns ContextModuleBuilder The current builder. Exceptions ArgumentException The addition operation would cause the number of elements to exceed MaxElementCount. AddElement(KMarkdownElementBuilder) Adds a KMarkdown element to the context module. public ContextModuleBuilder AddElement(KMarkdownElementBuilder field) Parameters field KMarkdownElementBuilder The KMarkdown element to add. Returns ContextModuleBuilder The current builder. AddElement(PlainTextElementBuilder) Adds a PlainText element to the context module. public ContextModuleBuilder AddElement(PlainTextElementBuilder field) Parameters field PlainTextElementBuilder The PlainText element to add. Returns ContextModuleBuilder The current builder. Exceptions ArgumentException The addition operation would cause the number of elements to exceed MaxElementCount. AddElement<T>(Action<T>?) Adds an element to the context module. public ContextModuleBuilder AddElement<T>(Action<T>? action = null) where T : IElementBuilder, new() Parameters action Action<T> The action to add an element to the context module. Returns ContextModuleBuilder The current builder. Type Parameters T Build() Builds this builder into a ContextModule. public ContextModule Build() Returns ContextModule A ContextModule representing the built context module object. Exceptions ArgumentNullException The Elements is null. ArgumentException The Elements count is greater than MaxElementCount. ArgumentException The Elements contain an element that is not a PlainTextElementBuilder, KMarkdownElementBuilder, or ImageElementBuilder. Equals(ContextModuleBuilder?) Determines whether the specified ContextModuleBuilder is equal to the current ContextModuleBuilder. public bool Equals(ContextModuleBuilder? contextModuleBuilder) Parameters contextModuleBuilder ContextModuleBuilder The ContextModuleBuilder to compare with the current ContextModuleBuilder. Returns bool true if the specified ContextModuleBuilder is equal to the current ContextModuleBuilder; otherwise, false. Equals(object?) Determines whether the specified ContextModuleBuilder is equal to the current ContextModuleBuilder. public override bool Equals(object? obj) Parameters obj object The object to compare with the current ContextModuleBuilder. Returns bool true if the specified ContextModuleBuilder is equal to the current ContextModuleBuilder; otherwise, false. Remarks If the object passes is an ContextModuleBuilder, Equals(ContextModuleBuilder?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ContextModuleBuilder?, ContextModuleBuilder?) Determines whether the specified ContextModuleBuilder is equal to the current ContextModuleBuilder. public static bool operator ==(ContextModuleBuilder? left, ContextModuleBuilder? right) Parameters left ContextModuleBuilder right ContextModuleBuilder Returns bool true if the specified ContextModuleBuilder is equal to the current ContextModuleBuilder; otherwise, false. operator !=(ContextModuleBuilder?, ContextModuleBuilder?) Determines whether the specified ContextModuleBuilder is not equal to the current ContextModuleBuilder. public static bool operator !=(ContextModuleBuilder? left, ContextModuleBuilder? right) Parameters left ContextModuleBuilder right ContextModuleBuilder Returns bool true if the specified ContextModuleBuilder is not equal to the current ContextModuleBuilder; otherwise, false."
  },
  "api/Kook.CountdownMode.html": {
    "href": "api/Kook.CountdownMode.html",
    "title": "Enum CountdownMode | Kook.Net 文档",
    "keywords": "Enum CountdownMode Namespace Kook Assembly Kook.Net.Core.dll Specifies the display mode for the countdown timer. public enum CountdownMode Fields Day = 0 The timer will display the time in days, hours, minutes and seconds. Hour = 1 The timer will display the time in hours, minutes and seconds. Second = 2 The timer will display the time in seconds."
  },
  "api/Kook.CountdownModule.html": {
    "href": "api/Kook.CountdownModule.html",
    "title": "Class CountdownModule | Kook.Net 文档",
    "keywords": "Class CountdownModule Namespace Kook Assembly Kook.Net.Core.dll Represents a countdown module that can be used in an ICard. public class CountdownModule : IModule, IEquatable<CountdownModule>, IEquatable<IModule> Inheritance object CountdownModule Implements IModule IEquatable<CountdownModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(CountdownModule) CardExtensions.ToBuilder(IModule) Properties EndTime Gets the end time of the countdown. public DateTimeOffset EndTime { get; } Property Value DateTimeOffset The end time of the countdown. Mode Gets the mode of the countdown. public CountdownMode Mode { get; } Property Value CountdownMode A CountdownMode value that represents the mode of the countdown. StartTime Gets the start time of the countdown. public DateTimeOffset? StartTime { get; } Property Value DateTimeOffset? The start time of the countdown. Type Gets the type of the module. public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Methods Equals(CountdownModule?) Determines whether the specified CountdownModule is equal to the current CountdownModule. public bool Equals(CountdownModule? countdownModule) Parameters countdownModule CountdownModule The CountdownModule to compare with the current CountdownModule. Returns bool true if the specified CountdownModule is equal to the current CountdownModule; otherwise, false. Equals(object?) Determines whether the specified CountdownModule is equal to the current CountdownModule. public override bool Equals(object? obj) Parameters obj object The object to compare with the current CountdownModule. Returns bool true if the specified CountdownModule is equal to the current CountdownModule; otherwise, false. Remarks If the object passes is an CountdownModule, Equals(CountdownModule?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(CountdownModule, CountdownModule) Determines whether the specified CountdownModule is equal to the current CountdownModule. public static bool operator ==(CountdownModule left, CountdownModule right) Parameters left CountdownModule right CountdownModule Returns bool true if the specified CountdownModule is equal to the current CountdownModule; otherwise, false. operator !=(CountdownModule, CountdownModule) Determines whether the specified CountdownModule is not equal to the current CountdownModule. public static bool operator !=(CountdownModule left, CountdownModule right) Parameters left CountdownModule right CountdownModule Returns bool true if the specified CountdownModule is not equal to the current CountdownModule; otherwise, false."
  },
  "api/Kook.CountdownModuleBuilder.html": {
    "href": "api/Kook.CountdownModuleBuilder.html",
    "title": "Class CountdownModuleBuilder | Kook.Net 文档",
    "keywords": "Class CountdownModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll Represents a countdown module builder for creating a CountdownModule. public class CountdownModuleBuilder : IModuleBuilder, IEquatable<CountdownModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object CountdownModuleBuilder Implements IModuleBuilder IEquatable<CountdownModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CountdownModuleBuilder() Initializes a new instance of the CountdownModuleBuilder class. public CountdownModuleBuilder() CountdownModuleBuilder(CountdownMode, DateTimeOffset, DateTimeOffset?) Initializes a new instance of the CountdownModuleBuilder class. public CountdownModuleBuilder(CountdownMode mode, DateTimeOffset endTime, DateTimeOffset? startTime = null) Parameters mode CountdownMode endTime DateTimeOffset startTime DateTimeOffset? Properties EndTime Gets or sets the ending time of the countdown. public DateTimeOffset EndTime { get; set; } Property Value DateTimeOffset The time at which the countdown ends. Mode Gets or sets how the countdown should be displayed. public CountdownMode Mode { get; set; } Property Value CountdownMode A CountdownMode representing how the countdown should be displayed. StartTime Gets or sets the beginning time of the countdown. public DateTimeOffset? StartTime { get; set; } Property Value DateTimeOffset? The time at which the countdown begins. Type Specifies the module type of the IModule this builder creates. public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Methods Build() Builds this builder into a CountdownModule. public CountdownModule Build() Returns CountdownModule A CountdownModule representing the built countdown module object. Exceptions ArgumentOutOfRangeException CountdownMode is not Second but StartTime is set. ArgumentOutOfRangeException EndTime is before the current time. ArgumentOutOfRangeException StartTime is before the Unix epoch. ArgumentOutOfRangeException EndTime is equal or before StartTime Equals(CountdownModuleBuilder?) Determines whether the specified CountdownModuleBuilder is equal to the current CountdownModuleBuilder. public bool Equals(CountdownModuleBuilder? countdownModuleBuilder) Parameters countdownModuleBuilder CountdownModuleBuilder The CountdownModuleBuilder to compare with the current CountdownModuleBuilder. Returns bool true if the specified CountdownModuleBuilder is equal to the current CountdownModuleBuilder; otherwise, false. Equals(object?) Determines whether the specified CountdownModuleBuilder is equal to the current CountdownModuleBuilder. public override bool Equals(object? obj) Parameters obj object The object to compare with the current CountdownModuleBuilder. Returns bool true if the specified CountdownModuleBuilder is equal to the current CountdownModuleBuilder; otherwise, false. Remarks If the object passes is an CountdownModuleBuilder, Equals(CountdownModuleBuilder?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithEndTime(DateTimeOffset) Sets the beginning time of the countdown. public CountdownModuleBuilder WithEndTime(DateTimeOffset endTime) Parameters endTime DateTimeOffset The time at which the countdown ends. Returns CountdownModuleBuilder The current builder. WithMode(CountdownMode) Sets how the countdown should be displayed. public CountdownModuleBuilder WithMode(CountdownMode mode) Parameters mode CountdownMode A CountdownMode representing how the countdown should be displayed. Returns CountdownModuleBuilder The current builder. WithStartTime(DateTimeOffset?) Sets the beginning time of the countdown. public CountdownModuleBuilder WithStartTime(DateTimeOffset? startTime) Parameters startTime DateTimeOffset? The time at which the countdown begins. Returns CountdownModuleBuilder The current builder. Operators operator ==(CountdownModuleBuilder?, CountdownModuleBuilder?) Determines whether the specified CountdownModuleBuilder is equal to the current CountdownModuleBuilder. public static bool operator ==(CountdownModuleBuilder? left, CountdownModuleBuilder? right) Parameters left CountdownModuleBuilder right CountdownModuleBuilder Returns bool true if the specified CountdownModuleBuilder is equal to the current CountdownModuleBuilder; otherwise, false. operator !=(CountdownModuleBuilder?, CountdownModuleBuilder?) Determines whether the specified CountdownModuleBuilder is not equal to the current CountdownModuleBuilder. public static bool operator !=(CountdownModuleBuilder? left, CountdownModuleBuilder? right) Parameters left CountdownModuleBuilder right CountdownModuleBuilder Returns bool true if the specified CountdownModuleBuilder is not equal to the current CountdownModuleBuilder; otherwise, false."
  },
  "api/Kook.CreateAttachmentMode.html": {
    "href": "api/Kook.CreateAttachmentMode.html",
    "title": "Enum CreateAttachmentMode | Kook.Net 文档",
    "keywords": "Enum CreateAttachmentMode Namespace Kook Assembly Kook.Net.Core.dll Indicates that how the FileAttachment will be operated to attache files. public enum CreateAttachmentMode Fields AssetUri = 2 The FileAttachment will be created via a Uri pointing to a file on KOOK asset OSS. FilePath = 0 The FileAttachment will be created via a local file path. Stream = 1 The FileAttachment will be created via a Stream."
  },
  "api/Kook.CreateCategoryChannelProperties.html": {
    "href": "api/Kook.CreateCategoryChannelProperties.html",
    "title": "Class CreateCategoryChannelProperties | Kook.Net 文档",
    "keywords": "Class CreateCategoryChannelProperties Namespace Kook Assembly Kook.Net.Core.dll Provides properties that are used to create an ICategoryChannel with the specified properties. public class CreateCategoryChannelProperties : CreateGuildChannelProperties Inheritance object CreateGuildChannelProperties CreateCategoryChannelProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() See Also CreateCategoryChannelAsync(string, Action<CreateCategoryChannelProperties>, RequestOptions)"
  },
  "api/Kook.CreateGuildChannelProperties.html": {
    "href": "api/Kook.CreateGuildChannelProperties.html",
    "title": "Class CreateGuildChannelProperties | Kook.Net 文档",
    "keywords": "Class CreateGuildChannelProperties Namespace Kook Assembly Kook.Net.Core.dll Properties that are used to create an IGuildChannel with the specified properties. public class CreateGuildChannelProperties Inheritance object CreateGuildChannelProperties Derived CreateCategoryChannelProperties CreateTextChannelProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Kook.CreateTextChannelProperties.html": {
    "href": "api/Kook.CreateTextChannelProperties.html",
    "title": "Class CreateTextChannelProperties | Kook.Net 文档",
    "keywords": "Class CreateTextChannelProperties Namespace Kook Assembly Kook.Net.Core.dll Provides properties that are used to create an ITextChannel with the specified properties. public class CreateTextChannelProperties : CreateGuildChannelProperties Inheritance object CreateGuildChannelProperties CreateTextChannelProperties Derived CreateVoiceChannelProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CategoryId Gets or sets the category ID for this channel. public ulong? CategoryId { get; set; } Property Value ulong? Remarks Setting this value to a category's identifier will set this channel's parent to the specified channel; setting this value to null will leave this channel alone from any parents. See Also CreateTextChannelAsync(string, Action<CreateTextChannelProperties>, RequestOptions)"
  },
  "api/Kook.CreateVoiceChannelProperties.html": {
    "href": "api/Kook.CreateVoiceChannelProperties.html",
    "title": "Class CreateVoiceChannelProperties | Kook.Net 文档",
    "keywords": "Class CreateVoiceChannelProperties Namespace Kook Assembly Kook.Net.Core.dll Provides properties that are used to create an IVoiceChannel with the specified properties. public class CreateVoiceChannelProperties : CreateTextChannelProperties Inheritance object CreateGuildChannelProperties CreateTextChannelProperties CreateVoiceChannelProperties Inherited Members CreateTextChannelProperties.CategoryId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties UserLimit Gets or sets the maximum number of users that can be present in a channel, or null if none. public int? UserLimit { get; set; } Property Value int? VoiceQuality Gets or sets the voice quality that the clients in this voice channel are requested to use. public VoiceQuality? VoiceQuality { get; set; } Property Value VoiceQuality? See Also CreateVoiceChannelAsync(string, Action<CreateVoiceChannelProperties>, RequestOptions)"
  },
  "api/Kook.Direction.html": {
    "href": "api/Kook.Direction.html",
    "title": "Enum Direction | Kook.Net 文档",
    "keywords": "Enum Direction Namespace Kook Assembly Kook.Net.Core.dll Specifies the direction of where message(s) should be retrieved from. public enum Direction Fields After = 3 The message(s) should be retrieved after a message. Around = 2 The message(s) should be retrieved around a message. Before = 1 The message(s) should be retrieved before a message. Unspecified = 0 How the message(s) should be retrieved is unspecified. Remarks This enum is used to specify the direction for retrieving messages. important At the time of writing, Around is not yet implemented into GetMessagesAsync(int, CacheMode, RequestOptions?). Attempting to use the method with Around will throw a NotImplementedException."
  },
  "api/Kook.DividerModule.html": {
    "href": "api/Kook.DividerModule.html",
    "title": "Class DividerModule | Kook.Net 文档",
    "keywords": "Class DividerModule Namespace Kook Assembly Kook.Net.Core.dll A divider module that can be used in an ICard. public class DividerModule : IModule, IEquatable<DividerModule>, IEquatable<IModule> Inheritance object DividerModule Implements IModule IEquatable<DividerModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(DividerModule) CardExtensions.ToBuilder(IModule) Properties Type Gets the type of the module. public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Methods Equals(DividerModule?) Determines whether the specified DividerModule is equal to the current DividerModule. public bool Equals(DividerModule? dividerModule) Parameters dividerModule DividerModule The DividerModule to compare with the current DividerModule. Returns bool true if the specified DividerModule is equal to the current DividerModule; otherwise, false. Equals(object?) Determines whether the specified DividerModule is equal to the current DividerModule. public override bool Equals(object? obj) Parameters obj object The object to compare with the current DividerModule. Returns bool true if the specified DividerModule is equal to the current DividerModule; otherwise, false. Remarks If the object passes is an DividerModule, Equals(DividerModule?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(DividerModule, DividerModule) Determines whether the specified DividerModule is equal to the current DividerModule. public static bool operator ==(DividerModule left, DividerModule right) Parameters left DividerModule right DividerModule Returns bool true if the specified DividerModule is equal to the current DividerModule; otherwise, false. operator !=(DividerModule, DividerModule) Determines whether the specified DividerModule is not equal to the current DividerModule. public static bool operator !=(DividerModule left, DividerModule right) Parameters left DividerModule right DividerModule Returns bool true if the specified DividerModule is not equal to the current DividerModule; otherwise, false."
  },
  "api/Kook.DividerModuleBuilder.html": {
    "href": "api/Kook.DividerModuleBuilder.html",
    "title": "Class DividerModuleBuilder | Kook.Net 文档",
    "keywords": "Class DividerModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll Represents a divider module builder for creating a DividerModule. public class DividerModuleBuilder : IModuleBuilder, IEquatable<DividerModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object DividerModuleBuilder Implements IModuleBuilder IEquatable<DividerModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Type Specifies the module type of the IModule this builder creates. public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Methods Build() Builds this builder into a DividerModule. public DividerModule Build() Returns DividerModule A DividerModule representing the built divider module object. Equals(DividerModuleBuilder?) Determines whether the specified DividerModuleBuilder is equal to the current DividerModuleBuilder. public bool Equals(DividerModuleBuilder? dividerModuleBuilder) Parameters dividerModuleBuilder DividerModuleBuilder The DividerModuleBuilder to compare with the current DividerModuleBuilder. Returns bool true if the specified DividerModuleBuilder is equal to the current DividerModuleBuilder; otherwise, false. Equals(object?) Determines whether the specified DividerModuleBuilder is equal to the current DividerModuleBuilder. public override bool Equals(object? obj) Parameters obj object The object to compare with the current DividerModuleBuilder. Returns bool true if the specified DividerModuleBuilder is equal to the current DividerModuleBuilder; otherwise, false. Remarks If the object passes is an DividerModuleBuilder, Equals(DividerModuleBuilder?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(DividerModuleBuilder?, DividerModuleBuilder?) Determines whether the specified DividerModuleBuilder is equal to the current DividerModuleBuilder. public static bool operator ==(DividerModuleBuilder? left, DividerModuleBuilder? right) Parameters left DividerModuleBuilder right DividerModuleBuilder Returns bool true if the specified DividerModuleBuilder is equal to the current DividerModuleBuilder; otherwise, false. operator !=(DividerModuleBuilder?, DividerModuleBuilder?) Determines whether the specified DividerModuleBuilder is not equal to the current DividerModuleBuilder. public static bool operator !=(DividerModuleBuilder? left, DividerModuleBuilder? right) Parameters left DividerModuleBuilder right DividerModuleBuilder Returns bool true if the specified DividerModuleBuilder is not equal to the current DividerModuleBuilder; otherwise, false."
  },
  "api/Kook.ElementType.html": {
    "href": "api/Kook.ElementType.html",
    "title": "Enum ElementType | Kook.Net 文档",
    "keywords": "Enum ElementType Namespace Kook Assembly Kook.Net.Core.dll Specifies the type of an IElement. public enum ElementType Fields Button = 3 The element is a button element. Image = 2 The element is an image element. KMarkdown = 1 The element is a KMarkdown element. Paragraph = 4 The element is a paragraph struct. PlainText = 0 The element is a plain text element."
  },
  "api/Kook.EmbedType.html": {
    "href": "api/Kook.EmbedType.html",
    "title": "Enum EmbedType | Kook.Net 文档",
    "keywords": "Enum EmbedType Namespace Kook Assembly Kook.Net.Core.dll Represents the type of an embed. public enum EmbedType Fields BilibiliVideo = 3 Represents an embed that is a Bilibili video. Card = 4 Represents an embed that is a card. Image = 2 Represents an embed that is an image. Link = 1 Represents an embed that is a link. NotImplemented = 0 Represents an embed that is not implemented."
  },
  "api/Kook.Emoji.html": {
    "href": "api/Kook.Emoji.html",
    "title": "Class Emoji | Kook.Net 文档",
    "keywords": "Class Emoji Namespace Kook Assembly Kook.Net.Core.dll A Unicode emoji. public class Emoji : IEmote, IEntity<string> Inheritance object Emoji Implements IEmote IEntity<string> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Emoji(string) Initializes a new Emoji class with the provided Unicode. public Emoji(string unicode) Parameters unicode string The pure UTF-8 encoding of an emoji. Properties Id Gets the unique identifier for this object. public string Id { get; } Property Value string Name Gets the display name or Unicode representation of this emote. public string Name { get; } Property Value string A string representing the display name or the Unicode representation (e.g. 🤔) of this emote. Methods Equals(object?) Determines whether the specified emoji is equal to the current one. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Parse(string?) Parse an Emoji from its raw format. public static Emoji Parse(string? emojiStr) Parameters emojiStr string The raw encoding of an emoji. For example: :heart: or ❤ Returns Emoji Exceptions FormatException String is not emoji or unicode! ToString() Gets the Unicode representation of this emoji. public override string ToString() Returns string A string that resolves to Name. TryParse(string?, out Emoji?) Tries to parse an Emoji from its raw format. public static bool TryParse(string? text, out Emoji? result) Parameters text string The raw encoding of an emoji. For example: :heart: or ❤ result Emoji An emoji. Returns bool Operators implicit operator Emoji(string) Parses the given string into an Emoji. public static implicit operator Emoji(string s) Parameters s string The string to parse. Returns Emoji The parsed Emoji. Exceptions FormatException The provided string is not emoji name or unicode. See Also Parse(string?)"
  },
  "api/Kook.EmojiType.html": {
    "href": "api/Kook.EmojiType.html",
    "title": "Enum EmojiType | Kook.Net 文档",
    "keywords": "Enum EmojiType Namespace Kook Assembly Kook.Net.Core.dll Specifies the type of an emoji. public enum EmojiType Fields Animated = 2 The emoji is animated. Static = 1 The emoji is static."
  },
  "api/Kook.Emote.html": {
    "href": "api/Kook.Emote.html",
    "title": "Class Emote | Kook.Net 文档",
    "keywords": "Class Emote Namespace Kook Assembly Kook.Net.Core.dll Represents a guild emote. public class Emote : IEmote, IEntity<string> Inheritance object Emote Implements IEmote IEntity<string> Derived GuildEmote Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Emote(string, string, bool?) Creates a new instance of Emote. public Emote(string id, string name, bool? animated = null) Parameters id string name string animated bool? Properties Animated Gets whether this emote is animated. public bool? Animated { get; } Property Value bool? Id Gets the identifier of this emote. public string Id { get; } Property Value string Name Gets the name of this emote. public string Name { get; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Parse(string?, TagMode) Parses an Emote from its raw format. public static Emote Parse(string? text, TagMode tagMode) Parameters text string The raw encoding of an emote; for example, [:emotename:1991895624896587/hbCFVWhu923k03k] when tagMode is TagMode.PlainText, or (emj)emotename(emj)[1991895624896587/hbCFVWhu923k03k] when tagMode is TagMode.KMarkdown. tagMode TagMode Returns Emote An emote. Exceptions ArgumentException Invalid emote format. ToKMarkdownString() Gets a string representation of the emote in KMarkdown format. public string ToKMarkdownString() Returns string ToPlainTextString() Gets a string representation of the emote in plain text format. public string ToPlainTextString() Returns string ToString() Returns the raw representation of the emote. public override string ToString() Returns string A string representing the raw presentation of the emote (e.g. [:thonkang:282745590985523200]). TryParse(string?, out Emote?, TagMode) Tries to parse an Emote from its raw format. public static bool TryParse(string? text, out Emote? result, TagMode tagMode) Parameters text string The raw encoding of an emote; for example, [:emotename:1991895624896587/hbCFVWhu923k03k] when tagMode is TagMode.PlainText, or (emj)emotename(emj)[1991895624896587/hbCFVWhu923k03k] when tagMode is TagMode.KMarkdown. result Emote An emote. tagMode TagMode Returns bool"
  },
  "api/Kook.FileAttachment.html": {
    "href": "api/Kook.FileAttachment.html",
    "title": "Struct FileAttachment | Kook.Net 文档",
    "keywords": "Struct FileAttachment Namespace Kook Assembly Kook.Net.Core.dll Represents a file attachment. public struct FileAttachment : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FileAttachment(Stream, string, AttachmentType) Creates a file attachment from a stream. public FileAttachment(Stream stream, string filename, AttachmentType type = AttachmentType.File) Parameters stream Stream The stream to create the attachment from. filename string The name of the attachment. type AttachmentType The type of the attachment. FileAttachment(string, string?, AttachmentType) Create the file attachment from a file path. public FileAttachment(string path, string? filename = null, AttachmentType type = AttachmentType.File) Parameters path string The path to the file. filename string The name of the attachment. type AttachmentType The type of the attachment. Remarks This file path is NOT validated and is passed directly into a OpenRead(string). Exceptions ArgumentException path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by GetInvalidPathChars(). ArgumentNullException path is null. PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. NotSupportedException path is in an invalid format. DirectoryNotFoundException The specified path is invalid, (for example, it is on an unmapped drive). UnauthorizedAccessException path specified a directory. -or- The caller does not have the required permission. FileNotFoundException The file specified in path was not found. IOException An I/O error occurred while opening the file. FileAttachment(Uri, string, AttachmentType) Create the file attachment from a URI. public FileAttachment(Uri uri, string filename, AttachmentType type = AttachmentType.File) Parameters uri Uri The URI of the file. filename string The name of the attachment. type AttachmentType The type of the attachment. Remarks This URI path will be validated before being passed into REST API. If the resource the URI points to is not stored on KOOK OSS, this constructor will throw an exception. Under this circumstance, please create asset in advance. Exceptions InvalidOperationException The URI provided is not an asset on the KOOK OSS. ArgumentException The URI provided is blank. See Also ValidateKookAssetUrl(string) Properties FileName Gets the filename. public readonly string FileName { get; } Property Value string Mode Gets how this attachment will be operated. public readonly CreateAttachmentMode Mode { get; } Property Value CreateAttachmentMode Stream Gets the stream containing the file content. public readonly Stream? Stream { get; } Property Value Stream Type Gets the type of this attachment. public readonly AttachmentType Type { get; } Property Value AttachmentType Uri Gets the URI of the file. public readonly Uri? Uri { get; } Property Value Uri Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/Kook.FileModule.html": {
    "href": "api/Kook.FileModule.html",
    "title": "Class FileModule | Kook.Net 文档",
    "keywords": "Class FileModule Namespace Kook Assembly Kook.Net.Core.dll A file module that can be used in an ICard. public class FileModule : IMediaModule, IModule, IEquatable<FileModule>, IEquatable<IModule> Inheritance object FileModule Implements IMediaModule IModule IEquatable<FileModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(FileModule) CardExtensions.ToBuilder(IModule) Properties Size The size of the file in bytes. public int? Size { get; } Property Value int? Source Gets the source of the media associated with this module. public string Source { get; } Property Value string A string representing the source of the audio associated with this module. Title Gets the title of the media associated with this module. public string? Title { get; } Property Value string A string representing the title of the media associated with this module. Type Gets the type of the module. public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Methods Equals(FileModule?) Determines whether the specified FileModule is equal to the current FileModule. public bool Equals(FileModule? fileModule) Parameters fileModule FileModule The FileModule to compare with the current FileModule. Returns bool true if the specified FileModule is equal to the current FileModule; otherwise, false. Equals(object?) Determines whether the specified FileModule is equal to the current FileModule. public override bool Equals(object? obj) Parameters obj object The object to compare with the current FileModule. Returns bool true if the specified FileModule is equal to the current FileModule; otherwise, false. Remarks If the object passes is an FileModule, Equals(FileModule?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(FileModule, FileModule) Determines whether the specified FileModule is equal to the current FileModule. public static bool operator ==(FileModule left, FileModule right) Parameters left FileModule right FileModule Returns bool true if the specified FileModule is equal to the current FileModule; otherwise, false. operator !=(FileModule, FileModule) Determines whether the specified FileModule is not equal to the current FileModule. public static bool operator !=(FileModule left, FileModule right) Parameters left FileModule right FileModule Returns bool true if the specified FileModule is not equal to the current FileModule; otherwise, false."
  },
  "api/Kook.FileModuleBuilder.html": {
    "href": "api/Kook.FileModuleBuilder.html",
    "title": "Class FileModuleBuilder | Kook.Net 文档",
    "keywords": "Class FileModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll Represents a file module builder for creating a FileModule. public class FileModuleBuilder : IModuleBuilder, IEquatable<FileModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object FileModuleBuilder Implements IModuleBuilder IEquatable<FileModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileModuleBuilder() Initializes a new instance of the FileModuleBuilder class. public FileModuleBuilder() FileModuleBuilder(string, string?) Initializes a new instance of the FileModuleBuilder class. public FileModuleBuilder(string source, string? title = null) Parameters source string The source URL of the file. title string The title of the file. Properties Source Gets or sets the source URL of the file. public string? Source { get; set; } Property Value string The source URL of the file. Title Gets or sets the title of the file. public string? Title { get; set; } Property Value string The title of the file. Type Specifies the module type of the IModule this builder creates. public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Methods Build() Builds this builder into a FileModule. public FileModule Build() Returns FileModule A FileModule representing the built file module object. Exceptions ArgumentNullException The Source url is null. ArgumentException The Source url is empty. InvalidOperationException The Source url does not include a protocol (either HTTP or HTTPS). Equals(FileModuleBuilder?) Determines whether the specified FileModuleBuilder is equal to the current FileModuleBuilder. public bool Equals(FileModuleBuilder? fileModuleBuilder) Parameters fileModuleBuilder FileModuleBuilder The FileModuleBuilder to compare with the current FileModuleBuilder. Returns bool true if the specified FileModuleBuilder is equal to the current FileModuleBuilder; otherwise, false. Equals(object?) Determines whether the specified FileModuleBuilder is equal to the current FileModuleBuilder. public override bool Equals(object? obj) Parameters obj object The object to compare with the current FileModuleBuilder. Returns bool true if the specified FileModuleBuilder is equal to the current FileModuleBuilder; otherwise, false. Remarks If the object passes is an FileModuleBuilder, Equals(FileModuleBuilder?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithSource(string?) Sets the source URL of the file. public FileModuleBuilder WithSource(string? source) Parameters source string The source URL of the file to be set. Returns FileModuleBuilder The current builder. WithTitle(string) Sets the title of the file. public FileModuleBuilder WithTitle(string title) Parameters title string The title of the file to be set. Returns FileModuleBuilder The current builder. Operators operator ==(FileModuleBuilder?, FileModuleBuilder?) Determines whether the specified FileModuleBuilder is equal to the current FileModuleBuilder. public static bool operator ==(FileModuleBuilder? left, FileModuleBuilder? right) Parameters left FileModuleBuilder right FileModuleBuilder Returns bool true if the specified FileModuleBuilder is equal to the current FileModuleBuilder; otherwise, false. operator !=(FileModuleBuilder?, FileModuleBuilder?) Determines whether the specified FileModuleBuilder is not equal to the current FileModuleBuilder. public static bool operator !=(FileModuleBuilder? left, FileModuleBuilder? right) Parameters left FileModuleBuilder right FileModuleBuilder Returns bool true if the specified FileModuleBuilder is not equal to the current FileModuleBuilder; otherwise, false."
  },
  "api/Kook.Format.html": {
    "href": "api/Kook.Format.html",
    "title": "Class Format | Kook.Net 文档",
    "keywords": "Class Format Namespace Kook Assembly Kook.Net.Core.dll A helper class for formatting characters. public static class Format Inheritance object Format Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BlockQuote(string?, bool) Formats a string as a block quote as a whole. public static string BlockQuote(this string? text, bool sanitize = true) Parameters text string The text to format. sanitize bool Whether to sanitize the text. Returns string Gets the formatted block quote text. Remarks warning Due to the working mechanism of the KOOK KMarkdown renderer, this method will insert zero-width joiner special characters (\\u200d) before the first empty line and between each empty line in the text by default, so that the renderer can display the entire text as a single quote. When the user copies the text inside the quote, they will not copy this special character. However, if you obtain the message text from the server through message-related APIs, it will contain the special character inserted by this method. If you want to disable this feature, please use Quote(string?, bool) instead. Set sanitize to true will sanitize the text by replacing all occurrences of > with \\>. See Also Quote(string?, bool) Bold(string?, bool) Returns a markdown-formatted string with bold formatting. public static string Bold(this string? text, bool sanitize = true) Parameters text string The text to format. sanitize bool Whether to sanitize the text. Returns string Gets the formatted text. Remarks Set sanitize to true will sanitize the text by replacing all occurrences of * with *. BoldItalics(string?, bool) Returns a markdown-formatted string with bold italics formatting. public static string BoldItalics(this string? text, bool sanitize = true) Parameters text string The text to format. sanitize bool Whether to sanitize the text. Returns string Gets the formatted text. Remarks Set sanitize to true will sanitize the text by replacing all occurrences of * with *. Code(string?, string?, bool) Returns a markdown-formatted string with inline code or code block formatting. public static string Code(this string? text, string? language = null, bool sanitize = true) Parameters text string The text to format. language string The language of the code block. sanitize bool Whether to sanitize the text. Returns string Gets the formatted inline code or code block. Remarks Set sanitize to true will sanitize the text by replacing all occurrences of </code> with <code>\\. CodeBlock(string?, string?, bool) Returns a markdown-formatted string with code block formatting. public static string CodeBlock(this string? text, string? language = null, bool sanitize = true) Parameters text string The text to format. language string The language of the code block. sanitize bool Whether to sanitize the text. Returns string Gets the formatted code block. Remarks Set sanitize to true will sanitize the text by replacing all occurrences of </code> with <code>\\. Colorize(string?, TextTheme, bool) Returns a markdown-formatted string colored with the specified TextTheme. public static string Colorize(this string? text, TextTheme theme, bool sanitize = true) Parameters text string The text to colorize. theme TextTheme The theme to colorize the text with. sanitize bool Whether to sanitize the text. Returns string Gets the colorized text. Remarks warning Colored text is only supported in cards. Italics(string?, bool) Returns a markdown-formatted string with italics formatting. public static string Italics(this string? text, bool sanitize = true) Parameters text string The text to format. sanitize bool Whether to sanitize the text. Returns string Gets the formatted text. Remarks Set sanitize to true will sanitize the text by replacing all occurrences of * with *. Quote(string?, bool) Formats a string as split quotes seperated by multiple new lines. public static string? Quote(this string? text, bool sanitize = true) Parameters text string The text to format. sanitize bool Whether to sanitize the text. Returns string Gets the formatted quote text. Remarks warning Due to the mechanism of the KOOK KMarkdown renderer, this method recognizes multiple text blocks based on two or more consecutive line breaks, and formats each block as a quote. For each text block, a greater than sign (>) and a space is inserted at the beginning of the string, and a zero-width joiner (\\u200d) is inserted when the beginning of the block is a whitespace character, to ensure proper display of the quote. When the user copies the text inside the quote, they will not copy this special character. However, if you obtain the message text from the server through message-related APIs, it will contain the special character inserted by this method. An additional line break is also appended at the end of the block to correct any missing line breaks caused by the quote formatting. The appended line break is consistent with the style of the nearby line breaks. To quote the entire text as a whole, use BlockQuote(string?, bool) instead. Set sanitize to true will sanitize the text by replacing all occurrences of > with \\>. See Also BlockQuote(string?, bool) Sanitize(string?, params string[]) Sanitizes the string, safely escaping any Markdown sequences. public static string? Sanitize(this string? text, params string[] sensitiveCharacters) Parameters text string The text to sanitize. sensitiveCharacters string[] The characters to sanitize. Returns string Gets the sanitized text. Remarks If no sensitive characters are specified, the default sensitive characters are used. The default sensitive characters are: </code>, *, ~, `, :, -, ], ), >. Spoiler(string?, bool) Returns a string with spoiler formatting. public static string Spoiler(this string? text, bool sanitize = true) Parameters text string The text to format. sanitize bool Whether to sanitize the text. Returns string Gets the formatted spoiled text. Remarks Set sanitize to true will sanitize the text by replacing all occurrences of ( and ) with ( and ). Strikethrough(string?, bool) Returns a markdown-formatted string with strike-through formatting. public static string Strikethrough(this string? text, bool sanitize = true) Parameters text string The text to format. sanitize bool Whether to sanitize the text. Returns string Gets the formatted text. Remarks Set sanitize to true will sanitize the text by replacing all occurrences of ~ with ~. StripMarkDown(string) Remove Kook supported markdown from text. [Obsolete(\"Use StripMarkdown instead.\")] public static string StripMarkDown(this string text) Parameters text string The text to remove markdown from. Returns string Gets the unformatted text. StripMarkdown(string) Remove Kook supported markdown from text. public static string StripMarkdown(this string text) Parameters text string The text to remove markdown from. Returns string Gets the unformatted text. Underline(string?, bool) Returns a markdown-formatted string with underline formatting. public static string Underline(this string? text, bool sanitize = true) Parameters text string The text to format. sanitize bool Whether to sanitize the text. Returns string Gets the formatted underlined text. Remarks Set sanitize to true will sanitize the text by replacing all occurrences of ( and ) with ( and ). Url(string?, string, bool) Returns a markdown-formatted URL. public static string Url(this string? text, string url, bool sanitize = true) Parameters text string The text to format. url string The URL to format. sanitize bool Whether to sanitize the text and URL. Returns string Gets the formatted URL. Remarks Set sanitize to true will sanitize the text by replacing all occurrences of [ and ] with [ and ], and the URL by replacing all occurrences of ( and ) with ( and ). Url(string?, Uri, bool) Returns a markdown-formatted URL. public static string Url(this string? text, Uri url, bool sanitize = true) Parameters text string The text to format. url Uri The URL to format. sanitize bool Whether to sanitize the text and URL. Returns string Gets the formatted URL. Remarks Set sanitize to true will sanitize the text by replacing all occurrences of [ and ] with [ and ], and the URL by replacing all occurrences of ( and ) with ( and ). UsernameAndIdentifyNumber(IUser, bool) Formats a user's username + identify number while maintaining bidirectional unicode public static string UsernameAndIdentifyNumber(this IUser user, bool doBidirectional) Parameters user IUser The user whose username and identify number to format. doBidirectional bool To format the string in bidirectional unicode or not. Returns string The username#identifyNumber."
  },
  "api/Kook.FriendState.html": {
    "href": "api/Kook.FriendState.html",
    "title": "Enum FriendState | Kook.Net 文档",
    "keywords": "Enum FriendState Namespace Kook Assembly Kook.Net.Core.dll Represents a state of a friend relationship with the current user. public enum FriendState Fields Accepted = 1 Represents an accepted friend request, where the user has been added to the current user's friend list. Blocked = 2 Represents a blocked friend status, where the user has been blocked by the current user. Pending = 0 Represents a pending friend request that has not been accepted yet."
  },
  "api/Kook.GameCreationSource.html": {
    "href": "api/Kook.GameCreationSource.html",
    "title": "Enum GameCreationSource | Kook.Net 文档",
    "keywords": "Enum GameCreationSource Namespace Kook Assembly Kook.Net.Core.dll Represents the creation source of a game. public enum GameCreationSource Fields SelfUser = 1 Represents that the game was created by the current user. System = 2 Represents that the game was created by the system by default."
  },
  "api/Kook.GameProperties.html": {
    "href": "api/Kook.GameProperties.html",
    "title": "Class GameProperties | Kook.Net 文档",
    "keywords": "Class GameProperties Namespace Kook Assembly Kook.Net.Core.dll Properties that are used to modify an IGame with the specified changes. public class GameProperties Inheritance object GameProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IconUrl Gets or sets the icon URL of the game. public string? IconUrl { get; set; } Property Value string Name Gets or sets the name of the game. public required string Name { get; set; } Property Value string See Also ModifyAsync(Action<GameProperties>, RequestOptions)"
  },
  "api/Kook.GameType.html": {
    "href": "api/Kook.GameType.html",
    "title": "Enum GameType | Kook.Net 文档",
    "keywords": "Enum GameType Namespace Kook Assembly Kook.Net.Core.dll Specifies the type of games. public enum GameType Fields Game = 0 Specifies that the game is just a game. Process = 2 Specifies that the game is a process. VirtualUploader = 1 Specifies that the game is a virtual uploader."
  },
  "api/Kook.GradientColor.html": {
    "href": "api/Kook.GradientColor.html",
    "title": "Struct GradientColor | Kook.Net 文档",
    "keywords": "Struct GradientColor Namespace Kook Assembly Kook.Net.Core.dll Represents a gradient color. public readonly struct GradientColor Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors GradientColor(Color, Color) Initializes a new instance of GradientColor. public GradientColor(Color left, Color right) Parameters left Color The left color of the gradient. right Color The right color of the gradient. Properties Left The left color of the gradient. public Color Left { get; } Property Value Color Right The right color of the gradient. public Color Right { get; } Property Value Color Operators implicit operator (Color Left, Color Right)(GradientColor) Converts the GradientColor to a tuple of Color. public static implicit operator (Color Left, Color Right)(GradientColor gradient) Parameters gradient GradientColor The gradient color to convert. Returns (Color Left, Color Right) The tuple of Color. implicit operator GradientColor((Color Left, Color Right)) Converts the tuple of Color to a GradientColor. public static implicit operator GradientColor((Color Left, Color Right) gradient) Parameters gradient (Color Left, Color Right) The tuple of Color to convert. Returns GradientColor The GradientColor."
  },
  "api/Kook.GuildCertification.html": {
    "href": "api/Kook.GuildCertification.html",
    "title": "Class GuildCertification | Kook.Net 文档",
    "keywords": "Class GuildCertification Namespace Kook Assembly Kook.Net.Core.dll Represents a guild certification. public class GuildCertification Inheritance object GuildCertification Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Gets the description of the certification. public string? Description { get; } Property Value string Picture Gets the picture URL of the certification. public string? Picture { get; } Property Value string Title Gets the title of the certification. public string Title { get; } Property Value string Type Gets the type of the certification. public GuildCertificationType Type { get; } Property Value GuildCertificationType"
  },
  "api/Kook.GuildCertificationType.html": {
    "href": "api/Kook.GuildCertificationType.html",
    "title": "Enum GuildCertificationType | Kook.Net 文档",
    "keywords": "Enum GuildCertificationType Namespace Kook Assembly Kook.Net.Core.dll Represents a guild certification type. public enum GuildCertificationType Fields Official = 1 Represents an official certification. Partner = 2 Represents a partner certification. Personal = 6 Represents a personal certification. Recommended = 4 Represents a recommended certification."
  },
  "api/Kook.GuildEmote.html": {
    "href": "api/Kook.GuildEmote.html",
    "title": "Class GuildEmote | Kook.Net 文档",
    "keywords": "Class GuildEmote Namespace Kook Assembly Kook.Net.Core.dll An image-based emote that is attached to a guild. public class GuildEmote : Emote, IEmote, IEntity<string> Inheritance object Emote GuildEmote Implements IEmote IEntity<string> Inherited Members Emote.Id Emote.Name Emote.Animated Emote.Equals(object) Emote.TryParse(string, out Emote, TagMode) Emote.Parse(string, TagMode) Emote.GetHashCode() Emote.ToKMarkdownString() Emote.ToPlainTextString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties CreatorId Gets the user who created this emote. public ulong? CreatorId { get; } Property Value ulong? An ulong representing the user who created this emote; null if unknown. GuildId The ID of the guild this emote is attached to. public ulong GuildId { get; } Property Value ulong A ulong that identifies the guild this emote is attached to. Methods ToString() Gets the raw representation of the emote. public override string ToString() Returns string A string representing the raw presentation of the emote."
  },
  "api/Kook.GuildFeature.html": {
    "href": "api/Kook.GuildFeature.html",
    "title": "Enum GuildFeature | Kook.Net 文档",
    "keywords": "Enum GuildFeature Namespace Kook Assembly Kook.Net.Core.dll Represents a feature of a guild. [Flags] public enum GuildFeature : uint Fields KeyAccount = 4 The guild is a key account guild. None = 0 The guild has no features. Official = 1 The guild is an official KOOK guild. Partner = 2 The guild is a partner guild."
  },
  "api/Kook.GuildFeatures.html": {
    "href": "api/Kook.GuildFeatures.html",
    "title": "Struct GuildFeatures | Kook.Net 文档",
    "keywords": "Struct GuildFeatures Namespace Kook Assembly Kook.Net.Core.dll Represents a collection of features of a guild. public readonly struct GuildFeatures Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields None Gets a blank GuildPermissions that grants no permissions. public static readonly GuildPermissions None Field Value GuildPermissions Properties IsKeyAccount Gets whether the guild is a key account guild. public bool IsKeyAccount { get; } Property Value bool IsOfficial Gets whether the guild is an official KOOK guild. public bool IsOfficial { get; } Property Value bool IsPartner Gets whether the guild is a partner guild. public bool IsPartner { get; } Property Value bool RawValues Gets a collection of strings representing the raw values of the features. public IReadOnlyCollection<string> RawValues { get; } Property Value IReadOnlyCollection<string> Remarks Features that are not contained in GuildFeature can be found here. Value Gets the flags of recognized features for this guild. public GuildFeature Value { get; } Property Value GuildFeature Methods HasFeature(GuildFeature) Returns whether or not this guild has a feature. public bool HasFeature(GuildFeature feature) Parameters feature GuildFeature The feature(s) to check for. Returns bool true if this guild has the provided feature(s), otherwise false. HasFeature(string) Returns whether or not this guild has a feature. public bool HasFeature(string feature) Parameters feature string The feature to check for. Returns bool true if this guild has the provided feature, otherwise false."
  },
  "api/Kook.GuildPermission.html": {
    "href": "api/Kook.GuildPermission.html",
    "title": "Enum GuildPermission | Kook.Net 文档",
    "keywords": "Enum GuildPermission Namespace Kook Assembly Kook.Net.Core.dll Represents a permission can be granted to a guild. [Flags] public enum GuildPermission : uint Fields AddReactions = 262144 Allows for the addition of reactions to messages. Administrator = 1 Allows all permissions and bypasses channel permission overwrites. AttachFiles = 16384 Allows for uploading images and files. BanMembers = 128 Allows banning members. ChangeNickname = 512 Allows for modification of own nickname. Connect = 32768 Allows for joining of a voice channel. CreateInvites = 8 Allows creation of invites. DeafenMembers = 16777216 Allows for deafening of members in a voice channel. FollowReactions = 524288 Allows for following of added reactions to messages. KickMembers = 64 Allows kicking members. ManageChannels = 32 Allows management and editing of channels. ManageEmojis = 256 Allows management and editing of emojis and stickers. ManageGuild = 2 Allows management and editing of guild. ManageInvites = 16 Allows for management of invites. ManageMessages = 8192 Allows for deletion of other users messages. ManageNicknames = 67108864 Allows for modification of other users nicknames. ManageRoles = 1024 Allows management and editing of roles. ManageVoice = 65536 Allows for disconnection of members, and moving of members between voice channels. MentionEveryone = 131072 Allows for using the everyone mention tag to notify all users in a channel, and the online mention tag to notify all online users in a channel. MuteMembers = 33554432 Allows for muting members in a voice channel. OnlyPushToTalk = 2097152 Limits the user to speaking in a voice channel only when pressing the speaking key. PassiveConnect = 1048576 Limits the user to connecting to a voice channel only when the user is invited or moved by others. PlaySoundtrack = 134217728 Allows for playing soundtracks in a voice channel. SendMessages = 4096 Allows for sending messages in a channel ShareScreen = 268435456 Allows for screen share. Speak = 8388608 Allows for speaking in a voice channel. UseVoiceActivity = 4194304 Allows for speaking in voice a channel without having to press the speaking key. ViewAuditLog = 4 Allows for viewing of audit logs. ViewChannel = 2048 Allows guild members to view a channel, which includes reading messages in text channels."
  },
  "api/Kook.GuildPermissions.html": {
    "href": "api/Kook.GuildPermissions.html",
    "title": "Struct GuildPermissions | Kook.Net 文档",
    "keywords": "Struct GuildPermissions Namespace Kook Assembly Kook.Net.Core.dll Represents a set of permissions for a guild. public struct GuildPermissions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors GuildPermissions(bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool) Creates a new GuildPermissions structure with the provided permissions. public GuildPermissions(bool administrator = false, bool manageGuild = false, bool viewAuditLog = false, bool createInvites = false, bool manageInvites = false, bool manageChannels = false, bool kickMembers = false, bool banMembers = false, bool manageEmojis = false, bool changeNickname = false, bool manageRoles = false, bool viewChannel = false, bool sendMessages = false, bool manageMessages = false, bool attachFiles = false, bool connect = false, bool manageVoice = false, bool mentionEveryone = false, bool addReactions = false, bool followReactions = false, bool passiveConnect = false, bool onlyPushToTalk = false, bool useVoiceActivity = false, bool speak = false, bool deafenMembers = false, bool muteMembers = false, bool manageNicknames = false, bool playSoundtrack = false, bool shareScreen = false) Parameters administrator bool manageGuild bool viewAuditLog bool createInvites bool manageInvites bool manageChannels bool kickMembers bool banMembers bool manageEmojis bool changeNickname bool manageRoles bool viewChannel bool sendMessages bool manageMessages bool attachFiles bool connect bool manageVoice bool mentionEveryone bool addReactions bool followReactions bool passiveConnect bool onlyPushToTalk bool useVoiceActivity bool speak bool deafenMembers bool muteMembers bool manageNicknames bool playSoundtrack bool shareScreen bool GuildPermissions(string) Creates a new GuildPermissions with the provided packed value after converting to ulong. public GuildPermissions(string rawValue) Parameters rawValue string GuildPermissions(ulong) Creates a new GuildPermissions with the provided packed value. public GuildPermissions(ulong rawValue) Parameters rawValue ulong Fields All Gets a GuildPermissions that grants all guild permissions. public static readonly GuildPermissions All Field Value GuildPermissions None Gets a blank GuildPermissions that grants no permissions. public static readonly GuildPermissions None Field Value GuildPermissions Properties AddReactions If true, a user may add reactions. public bool AddReactions { get; } Property Value bool Administrator If true, a user is granted all permissions, and cannot have them revoked via channel permissions. public bool Administrator { get; } Property Value bool AttachFiles If true, a user may send files. public bool AttachFiles { get; } Property Value bool BanMembers If true, a user may ban users from the guild. public bool BanMembers { get; } Property Value bool ChangeNickname If true, a user may change their own nickname. public bool ChangeNickname { get; } Property Value bool Connect If true, a user may connect to a voice channel. public bool Connect { get; } Property Value bool CreateInvites If true, a user may create invites. public bool CreateInvites { get; } Property Value bool DeafenMembers If true, a user may deafen users. public bool DeafenMembers { get; } Property Value bool FollowReactions If true, a user may follow added reactions. public bool FollowReactions { get; } Property Value bool KickMembers If true, a user may kick users from the guild. public bool KickMembers { get; } Property Value bool ManageChannels If true, a user may create, delete and modify channels. public bool ManageChannels { get; } Property Value bool ManageEmojis If true, a user may edit the emojis for this guild. public bool ManageEmojis { get; } Property Value bool ManageGuild If true, a user may adjust guild properties. public bool ManageGuild { get; } Property Value bool ManageInvites If true, a user may view and revoke invites. public bool ManageInvites { get; } Property Value bool ManageMessages If true, a user may delete messages. public bool ManageMessages { get; } Property Value bool ManageNicknames If true, a user may change the nickname of other users. public bool ManageNicknames { get; } Property Value bool ManageRoles If true, a user may adjust roles. public bool ManageRoles { get; } Property Value bool ManageVoice If true, a user may kick other users from voice channels, and move other users between voice channels. public bool ManageVoice { get; } Property Value bool MentionEveryone If true, a user may mention all users. public bool MentionEveryone { get; } Property Value bool MuteMembers If true, a user may mute users. public bool MuteMembers { get; } Property Value bool OnlyPushToTalk If true, a user may speak only via push-to-talk. public bool OnlyPushToTalk { get; } Property Value bool PassiveConnect If true, a user may connect to a voice channel only when the user is invited or moved by other users. public bool PassiveConnect { get; } Property Value bool PlaySoundtrack If true, a user may play soundtracks in a voice channel. public bool PlaySoundtrack { get; } Property Value bool RawValue Gets a packed value representing all the permissions in this GuildPermissions. public readonly ulong RawValue { get; } Property Value ulong SendMessages If true, a user may send messages. public bool SendMessages { get; } Property Value bool ShareScreen If true, a user may share screen in a voice channel. public bool ShareScreen { get; } Property Value bool Speak If true, a user may speak in a voice channel. public bool Speak { get; } Property Value bool UseVoiceActivity If true, a user may use voice activation. public bool UseVoiceActivity { get; } Property Value bool ViewAuditLog If true, a user may view the audit log. public bool ViewAuditLog { get; } Property Value bool ViewChannel If true, a user may view channels. public bool ViewChannel { get; } Property Value bool Methods Has(GuildPermission) Returns a value that indicates if a specific GuildPermission is enabled in these permissions. public bool Has(GuildPermission permission) Parameters permission GuildPermission The permission value to check for. Returns bool true if the permission is enabled, false otherwise. Modify(bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?) Creates a new GuildPermissions from this one, changing the provided non-null permissions. public GuildPermissions Modify(bool? administrator = null, bool? manageGuild = null, bool? viewAuditLog = null, bool? createInvites = null, bool? manageInvites = null, bool? manageChannels = null, bool? kickMembers = null, bool? banMembers = null, bool? manageEmojis = null, bool? changeNickname = null, bool? manageRoles = null, bool? viewChannel = null, bool? sendMessages = null, bool? manageMessages = null, bool? attachFiles = null, bool? connect = null, bool? manageVoice = null, bool? mentionEveryone = null, bool? addReactions = null, bool? followReactions = null, bool? passiveConnect = null, bool? onlyPushToTalk = null, bool? useVoiceActivity = null, bool? speak = null, bool? deafenMembers = null, bool? muteMembers = null, bool? manageNicknames = null, bool? playSoundtrack = null, bool? shareScreen = null) Parameters administrator bool? manageGuild bool? viewAuditLog bool? createInvites bool? manageInvites bool? manageChannels bool? kickMembers bool? banMembers bool? manageEmojis bool? changeNickname bool? manageRoles bool? viewChannel bool? sendMessages bool? manageMessages bool? attachFiles bool? connect bool? manageVoice bool? mentionEveryone bool? addReactions bool? followReactions bool? passiveConnect bool? onlyPushToTalk bool? useVoiceActivity bool? speak bool? deafenMembers bool? muteMembers bool? manageNicknames bool? playSoundtrack bool? shareScreen bool? Returns GuildPermissions ToList() Returns a List<T> containing all of the GuildPermission flags that are enabled. public List<GuildPermission> ToList() Returns List<GuildPermission> A List<T> containing GuildPermission flags. Empty if none are enabled. ToString() Gets the raw value of the permissions. public override string ToString() Returns string"
  },
  "api/Kook.GuildProperties.html": {
    "href": "api/Kook.GuildProperties.html",
    "title": "Class GuildProperties | Kook.Net 文档",
    "keywords": "Class GuildProperties Namespace Kook Assembly Kook.Net.Experimental.dll Provides properties that are used to modify an IGuild with the specified changes. public class GuildProperties Inheritance object GuildProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks warning This entity is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future. Properties DefaultChannel Gets or sets the default channel. public ITextChannel? DefaultChannel { get; set; } Property Value ITextChannel An ITextChannel which is the default channel; null if nothing changes. To clear the manually assigned default channel, set DefaultChannelId to 0 instead. DefaultChannelId Gets or sets the ID of the default channel. public ulong? DefaultChannelId { get; set; } Property Value ulong? An ulong representing the identifier of the default channel. null if nothing changes. 0 if set to none. EnableOpen Gets or sets whether the guild is open. public bool? EnableOpen { get; set; } Property Value bool? Region Gets or sets the region for the guild's voice connections. public IVoiceRegion? Region { get; set; } Property Value IVoiceRegion RegionId Gets or sets the ID of the region for the guild's voice connections. public string? RegionId { get; set; } Property Value string WelcomeChannel Gets or sets the welcome channel. public ITextChannel? WelcomeChannel { get; set; } Property Value ITextChannel An ITextChannel where welcome messages are sent; null if nothing changes. To clear the welcome channel, set WelcomeChannelId to 0 instead. WelcomeChannelId Gets or sets the ID of welcome channel. public ulong? WelcomeChannelId { get; set; } Property Value ulong? An ulong representing the identifier of the channel where welcome messages are sent; null if nothing changes. 0 if set to none. WidgetChannel Gets the channel assigned to the widget of this guild. public ITextChannel? WidgetChannel { get; set; } Property Value ITextChannel An ITextChannel assigned to the widget found within the widget settings of this guild; null if nothing changes; To clear the widget channel, set WidgetChannelId to 0 instead. WidgetChannelId Gets the ID of the channel assigned to the widget of this guild. public ulong? WidgetChannelId { get; set; } Property Value ulong? A ulong representing the identifier of the channel assigned to the widget found within the widget settings of this guild; null if nothing changes; 0 if set to none."
  },
  "api/Kook.HeaderModule.html": {
    "href": "api/Kook.HeaderModule.html",
    "title": "Class HeaderModule | Kook.Net 文档",
    "keywords": "Class HeaderModule Namespace Kook Assembly Kook.Net.Core.dll Represents a header module in an ICard. public class HeaderModule : IModule, IEquatable<HeaderModule>, IEquatable<IModule> Inheritance object HeaderModule Implements IModule IEquatable<HeaderModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CardExtensions.ToBuilder(HeaderModule) CardExtensions.ToBuilder(IModule) Properties Text Gets the text element of the header. public PlainTextElement? Text { get; } Property Value PlainTextElement A PlainTextElement representing the text of the header. Type Gets the type of the module. public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Methods Equals(HeaderModule?) Determines whether the specified HeaderModule is equal to the current HeaderModule. public bool Equals(HeaderModule? headerModule) Parameters headerModule HeaderModule The HeaderModule to compare with the current HeaderModule. Returns bool true if the specified HeaderModule is equal to the current HeaderModule; otherwise, false. Equals(object?) Determines whether the specified HeaderModule is equal to the current HeaderModule. public override bool Equals(object? obj) Parameters obj object The object to compare with the current HeaderModule. Returns bool true if the specified HeaderModule is equal to the current HeaderModule; otherwise, false. Remarks If the object passes is an HeaderModule, Equals(HeaderModule?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string? ToString() Returns string A string that represents the current object. Operators operator ==(HeaderModule, HeaderModule) Determines whether the specified HeaderModule is equal to the current HeaderModule. public static bool operator ==(HeaderModule left, HeaderModule right) Parameters left HeaderModule right HeaderModule Returns bool true if the specified HeaderModule is equal to the current HeaderModule; otherwise, false. operator !=(HeaderModule, HeaderModule) Determines whether the specified HeaderModule is not equal to the current HeaderModule. public static bool operator !=(HeaderModule left, HeaderModule right) Parameters left HeaderModule right HeaderModule Returns bool true if the specified HeaderModule is not equal to the current HeaderModule; otherwise, false."
  },
  "api/Kook.HeaderModuleBuilder.html": {
    "href": "api/Kook.HeaderModuleBuilder.html",
    "title": "Class HeaderModuleBuilder | Kook.Net 文档",
    "keywords": "Class HeaderModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll Represents a header module builder for creating a HeaderModule. public class HeaderModuleBuilder : IModuleBuilder, IEquatable<HeaderModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object HeaderModuleBuilder Implements IModuleBuilder IEquatable<HeaderModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HeaderModuleBuilder() Initializes a new instance of the HeaderModuleBuilder class. public HeaderModuleBuilder() HeaderModuleBuilder(PlainTextElementBuilder) Initializes a new instance of the HeaderModuleBuilder class. public HeaderModuleBuilder(PlainTextElementBuilder text) Parameters text PlainTextElementBuilder The text to be set for the header. HeaderModuleBuilder(string) Initializes a new instance of the HeaderModuleBuilder class. public HeaderModuleBuilder(string text) Parameters text string The text to be set for the header. Fields MaxTitleContentLength Gets the maximum content length for header allowed by Kook. public const int MaxTitleContentLength = 100 Field Value int Properties Text Gets or sets the text of the header. public PlainTextElementBuilder? Text { get; set; } Property Value PlainTextElementBuilder A PlainTextElementBuilder representing the text of the header. Type Specifies the module type of the IModule this builder creates. public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Methods Build() Builds this builder into a HeaderModule. public HeaderModule Build() Returns HeaderModule A HeaderModule representing the built header module object. Exceptions ArgumentNullException The Text is null. ArgumentException The Text is null. ArgumentException The Text content is longer than MaxTitleContentLength. Equals(HeaderModuleBuilder?) Determines whether the specified HeaderModuleBuilder is equal to the current HeaderModuleBuilder. public bool Equals(HeaderModuleBuilder? headerModuleBuilder) Parameters headerModuleBuilder HeaderModuleBuilder The HeaderModuleBuilder to compare with the current HeaderModuleBuilder. Returns bool true if the specified HeaderModuleBuilder is equal to the current HeaderModuleBuilder; otherwise, false. Equals(object?) Determines whether the specified HeaderModuleBuilder is equal to the current HeaderModuleBuilder. public override bool Equals(object? obj) Parameters obj object The object to compare with the current HeaderModule. Returns bool true if the specified HeaderModuleBuilder is equal to the current HeaderModuleBuilder; otherwise, false. Remarks If the object passes is an HeaderModuleBuilder, Equals(HeaderModuleBuilder?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithText(PlainTextElementBuilder) Sets the text of the header. public HeaderModuleBuilder WithText(PlainTextElementBuilder text) Parameters text PlainTextElementBuilder The text to be set for the header. Returns HeaderModuleBuilder The current builder. WithText(Action<PlainTextElementBuilder>?) Sets the text of the header. public HeaderModuleBuilder WithText(Action<PlainTextElementBuilder>? action = null) Parameters action Action<PlainTextElementBuilder> The action to set the text of the header. Returns HeaderModuleBuilder The current builder. WithText(string) Sets the text of the header. public HeaderModuleBuilder WithText(string text) Parameters text string The text to be set for the header. Returns HeaderModuleBuilder The current builder. Operators operator ==(HeaderModuleBuilder?, HeaderModuleBuilder?) Determines whether the specified HeaderModuleBuilder is equal to the current HeaderModuleBuilder. public static bool operator ==(HeaderModuleBuilder? left, HeaderModuleBuilder? right) Parameters left HeaderModuleBuilder right HeaderModuleBuilder Returns bool true if the specified HeaderModuleBuilder is equal to the current HeaderModuleBuilder; otherwise, false. implicit operator HeaderModuleBuilder(string) Initialized a new instance of the HeaderModuleBuilder class with the specified text. public static implicit operator HeaderModuleBuilder(string text) Parameters text string The text to be set for the header. Returns HeaderModuleBuilder An HeaderModuleBuilder object that is initialized with the specified text. operator !=(HeaderModuleBuilder?, HeaderModuleBuilder?) Determines whether the specified HeaderModuleBuilder is not equal to the current HeaderModuleBuilder. public static bool operator !=(HeaderModuleBuilder? left, HeaderModuleBuilder? right) Parameters left HeaderModuleBuilder right HeaderModuleBuilder Returns bool true if the specified HeaderModuleBuilder is not equal to the current HeaderModuleBuilder; otherwise, false."
  },
  "api/Kook.IActivity.html": {
    "href": "api/Kook.IActivity.html",
    "title": "Interface IActivity | Kook.Net 文档",
    "keywords": "Interface IActivity Namespace Kook Assembly Kook.Net.Core.dll A user's activity status. public interface IActivity"
  },
  "api/Kook.IAttachment.html": {
    "href": "api/Kook.IAttachment.html",
    "title": "Interface IAttachment | Kook.Net 文档",
    "keywords": "Interface IAttachment Namespace Kook Assembly Kook.Net.Core.dll Represents a message attachment found in a IUserMessage. public interface IAttachment Properties Duration Gets the duration of the attachment. TimeSpan? Duration { get; } Property Value TimeSpan? Remarks A timespan representing the duration of the attachment; null if the duration is unknown or not applicable. FileType Gets the file type of the attachment. string? FileType { get; } Property Value string A string representing the file type of the attachment; null if the file type is unknown or not applicable. Filename Gets the filename of this attachment. string? Filename { get; } Property Value string A string containing the full filename of this attachment. Height Gets the height of the attachment. int? Height { get; } Property Value int? An int representing the height of the attachment; null if the height is unknown or not applicable. Size Gets the file size of the attachment. int? Size { get; } Property Value int? An int representing the file size of the attachment; null if the file size is unknown or not applicable. Type Gets the type of the attachment. AttachmentType Type { get; } Property Value AttachmentType An AttachmentType representing the type of the attachment. Url Gets the URL of the attachment. string Url { get; } Property Value string A string representing the URL of the attachment. Width Gets the width of the attachment. int? Width { get; } Property Value int? An int representing the width of the attachment; null if the width is unknown or not applicable."
  },
  "api/Kook.IAudioChannel.html": {
    "href": "api/Kook.IAudioChannel.html",
    "title": "Interface IAudioChannel | Kook.Net 文档",
    "keywords": "Interface IAudioChannel Namespace Kook Assembly Kook.Net.Core.dll Represents a generic audio channel. public interface IAudioChannel : IChannel, IEntity<ulong> Inherited Members IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties IsVoiceRegionOverwritten Gets whether the voice region of this audio channel is overwritten. bool? IsVoiceRegionOverwritten { get; } Property Value bool? ServerUrl Gets the server url that clients should connect to to join this voice channel. string? ServerUrl { get; } Property Value string A string representing the url that clients should connect to to join this voice channel. VoiceRegion Gets the voice region for this audio channel. string? VoiceRegion { get; } Property Value string Remarks warning This property may be empty if the voice channel is created before this feature was released. Methods ConnectAsync(bool, bool, string?) Connects to this audio channel. Task<IAudioClient?> ConnectAsync(bool external = false, bool disconnect = true, string? password = null) Parameters external bool Determines whether the audio client is an external one or not. disconnect bool Determines whether the client should send a disconnect call before connecting to a new voice channel. password string The password to use when connecting to the audio channel. Returns Task<IAudioClient> A task representing the asynchronous connection operation. The task result contains the IAudioClient responsible for the connection. DisconnectAsync() Disconnects from this audio channel. Task DisconnectAsync() Returns Task A task representing the asynchronous operation for disconnecting from the audio channel."
  },
  "api/Kook.IBan.html": {
    "href": "api/Kook.IBan.html",
    "title": "Interface IBan | Kook.Net 文档",
    "keywords": "Interface IBan Namespace Kook Assembly Kook.Net.Core.dll Represents a generic ban object. public interface IBan Properties CreatedAt Gets the time when the ban was issued. DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTime object that represents the time when the ban was issued. Reason Gets the reason why the user is banned if specified. string Reason { get; } Property Value string A string containing the reason behind the ban; null if none is specified. User Gets the banned user. IUser User { get; } Property Value IUser A user that was banned."
  },
  "api/Kook.ICard.html": {
    "href": "api/Kook.ICard.html",
    "title": "Interface ICard | Kook.Net 文档",
    "keywords": "Interface ICard Namespace Kook Assembly Kook.Net.Core.dll Represents a generic card. public interface ICard Extension Methods CardExtensions.ToBuilder(ICard) CardJsonExtension.ToJsonString(ICard, bool) Properties ModuleCount Gets the number of the modules in this card. int ModuleCount { get; } Property Value int An int value that represents how many modules are in this card. Type Gets the type of the card. CardType Type { get; } Property Value CardType A CardType value that represents the type of the card."
  },
  "api/Kook.ICardBuilder.html": {
    "href": "api/Kook.ICardBuilder.html",
    "title": "Interface ICardBuilder | Kook.Net 文档",
    "keywords": "Interface ICardBuilder Namespace Kook Assembly Kook.Net.Core.dll Represents a generic card builder for creating a ICard. public interface ICardBuilder Extension Methods CardJsonExtension.ToJsonString(ICardBuilder, bool) Properties Type Gets the type of the ICard this builder creates. CardType Type { get; } Property Value CardType Methods Build() Builds the ICardBuilder into an ICard. ICard Build() Returns ICard An ICard represents the built card object."
  },
  "api/Kook.ICategoryChannel.html": {
    "href": "api/Kook.ICategoryChannel.html",
    "title": "Interface ICategoryChannel | Kook.Net 文档",
    "keywords": "Interface ICategoryChannel Namespace Kook Assembly Kook.Net.Core.dll Represents a generic category channel. public interface ICategoryChannel : IGuildChannel, IChannel, IEntity<ulong>, IDeletable Inherited Members IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.Position IGuildChannel.Type IGuildChannel.CreatorId IGuildChannel.RolePermissionOverwrites IGuildChannel.UserPermissionOverwrites IGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) IGuildChannel.GetCreatorAsync(CacheMode, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IChannel.Name IEntity<ulong>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel)"
  },
  "api/Kook.IChannel.html": {
    "href": "api/Kook.IChannel.html",
    "title": "Interface IChannel | Kook.Net 文档",
    "keywords": "Interface IChannel Namespace Kook Assembly Kook.Net.Core.dll Represents a generic channel. public interface IChannel : IEntity<ulong> Inherited Members IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties Name Gets the name of this channel. string Name { get; } Property Value string A string containing the name of this channel. Methods GetUserAsync(ulong, CacheMode, RequestOptions?) Gets a user in this channel. Task<IUser?> GetUserAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters id ulong The identifier of the user (e.g. 168693960628371456). mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IUser> A task that represents the asynchronous get operation. The task result contains a user object that represents the found user; null if none is found. GetUsersAsync(CacheMode, RequestOptions?) Gets a collection of users that are able to view the channel or are currently in this channel. IAsyncEnumerable<IReadOnlyCollection<IUser>> GetUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IUser>> Paged collection of users. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. This method will attempt to fetch all users that is able to view this channel or is currently in this channel. The library will attempt to split up the requests according to and MaxUsersPerBatch. In other words, if there are 3000 users, and the MaxUsersPerBatch constant is 50, the request will be split into 60 individual requests; thus returning 60 individual asynchronous responses, hence the need of flattening."
  },
  "api/Kook.IDMChannel.html": {
    "href": "api/Kook.IDMChannel.html",
    "title": "Interface IDMChannel | Kook.Net 文档",
    "keywords": "Interface IDMChannel Namespace Kook Assembly Kook.Net.Core.dll Represents a generic direct-message channel. public interface IDMChannel : IMessageChannel, IPrivateChannel, IChannel, IEntity<ulong>, IEntity<Guid> Inherited Members IMessageChannel.SendFileAsync(string, string, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(Stream, string, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(FileAttachment, IQuote, IUser, RequestOptions) IMessageChannel.SendTextAsync(string, IQuote, IUser, RequestOptions) IMessageChannel.SendCardAsync(ICard, IQuote, IUser, RequestOptions) IMessageChannel.SendCardsAsync(IEnumerable<ICard>, IQuote, IUser, RequestOptions) IMessageChannel.GetMessageAsync(Guid, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(Guid, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions) IMessageChannel.DeleteMessageAsync(Guid, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) IMessageChannel.ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions) IPrivateChannel.Recipients IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties ChatCode Gets the chat code of the direct-message channel. Guid ChatCode { get; } Property Value Guid A Guid that represents the chat code of the direct-message channel. Id Gets the unique identifier of this direct-message channel. Guid Id { get; } Property Value Guid A Guid that represents this direct-message channel's unique identifier. Recipient Gets the recipient of all messages in this channel. IUser Recipient { get; } Property Value IUser A user object that represents the other user in this channel. Methods CloseAsync(RequestOptions?) Closes this private channel, removing it from your channel list. Task CloseAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous close operation. SendCardAsync(ICard, IQuote?, RequestOptions?) Sends a card message to this message channel. Task<Cacheable<IUserMessage, Guid>> SendCardAsync(ICard card, IQuote? quote = null, RequestOptions? options = null) Parameters card ICard quote IQuote options RequestOptions Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendCardsAsync(IEnumerable<ICard>, IQuote?, RequestOptions?) Sends a card message to this message channel. Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(IEnumerable<ICard> cards, IQuote? quote = null, RequestOptions? options = null) Parameters cards IEnumerable<ICard> quote IQuote options RequestOptions Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendFileAsync(FileAttachment, IQuote?, RequestOptions?) Sends a file to this message channel. Task<Cacheable<IUserMessage, Guid>> SendFileAsync(FileAttachment attachment, IQuote? quote = null, RequestOptions? options = null) Parameters attachment FileAttachment quote IQuote options RequestOptions Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendFileAsync(Stream, string, AttachmentType, IQuote?, RequestOptions?) Sends a file to this message channel. Task<Cacheable<IUserMessage, Guid>> SendFileAsync(Stream stream, string filename, AttachmentType type = AttachmentType.File, IQuote? quote = null, RequestOptions? options = null) Parameters stream Stream filename string type AttachmentType quote IQuote options RequestOptions Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendFileAsync(string, string?, AttachmentType, IQuote?, RequestOptions?) Sends a file to this message channel. Task<Cacheable<IUserMessage, Guid>> SendFileAsync(string path, string? filename = null, AttachmentType type = AttachmentType.File, IQuote? quote = null, RequestOptions? options = null) Parameters path string filename string type AttachmentType quote IQuote options RequestOptions Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendTextAsync(string, IQuote?, RequestOptions?) Sends a text message to this message channel. Task<Cacheable<IUserMessage, Guid>> SendTextAsync(string text, IQuote? quote = null, RequestOptions? options = null) Parameters text string quote IQuote options RequestOptions Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message."
  },
  "api/Kook.IDeletable.html": {
    "href": "api/Kook.IDeletable.html",
    "title": "Interface IDeletable | Kook.Net 文档",
    "keywords": "Interface IDeletable Namespace Kook Assembly Kook.Net.Core.dll Determines whether the object is deletable or not. public interface IDeletable Methods DeleteAsync(RequestOptions?) Deletes this object and all its children. Task DeleteAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task"
  },
  "api/Kook.IElement.html": {
    "href": "api/Kook.IElement.html",
    "title": "Interface IElement | Kook.Net 文档",
    "keywords": "Interface IElement Namespace Kook Assembly Kook.Net.Core.dll A generic element used in modules. public interface IElement Extension Methods CardExtensions.ToBuilder(IElement) Properties Type Gets the type of this element. ElementType Type { get; } Property Value ElementType"
  },
  "api/Kook.IElementBuilder.html": {
    "href": "api/Kook.IElementBuilder.html",
    "title": "Interface IElementBuilder | Kook.Net 文档",
    "keywords": "Interface IElementBuilder Namespace Kook Assembly Kook.Net.Core.dll A generic builder for creating an IElement. public interface IElementBuilder Properties Type Specifies the type of the element to be created. ElementType Type { get; } Property Value ElementType An ElementType that specifies the type of the element to be created. Methods Build() Builds the IElementBuilder into an IElement. IElement Build() Returns IElement An IElement represents the built element object."
  },
  "api/Kook.IEmbed.html": {
    "href": "api/Kook.IEmbed.html",
    "title": "Interface IEmbed | Kook.Net 文档",
    "keywords": "Interface IEmbed Namespace Kook Assembly Kook.Net.Core.dll Represents a generic embed. public interface IEmbed Properties Type Gets the type of this embed. EmbedType Type { get; } Property Value EmbedType A EmbedType that represents the type of this embed. See Also Embeds"
  },
  "api/Kook.IEmote.html": {
    "href": "api/Kook.IEmote.html",
    "title": "Interface IEmote | Kook.Net 文档",
    "keywords": "Interface IEmote Namespace Kook Assembly Kook.Net.Core.dll Represents a general container for any type of emote in a message. public interface IEmote : IEntity<string> Inherited Members IEntity<string>.Id Properties Name Gets the display name or Unicode representation of this emote. string Name { get; } Property Value string A string representing the display name or the Unicode representation (e.g. 🤔) of this emote."
  },
  "api/Kook.IEntity-1.html": {
    "href": "api/Kook.IEntity-1.html",
    "title": "Interface IEntity<TId> | Kook.Net 文档",
    "keywords": "Interface IEntity<TId> Namespace Kook Assembly Kook.Net.Core.dll Represents a generic entity that has a unique identifier. public interface IEntity<TId> where TId : IEquatable<TId> Type Parameters TId The type of the unique identifier. Properties Id Gets the unique identifier for this object. TId Id { get; } Property Value TId"
  },
  "api/Kook.IFriendRequest.html": {
    "href": "api/Kook.IFriendRequest.html",
    "title": "Interface IFriendRequest | Kook.Net 文档",
    "keywords": "Interface IFriendRequest Namespace Kook Assembly Kook.Net.Core.dll Represents a generic friend request. public interface IFriendRequest : IEntity<ulong> Inherited Members IEntity<ulong>.Id Properties User Gets the user who sent this friend request. IUser User { get; } Property Value IUser Methods AcceptAsync(RequestOptions?) Accepts this friend request. Task AcceptAsync(RequestOptions? options = null) Parameters options RequestOptions The options to use when accepting this friend request. Returns Task A task that represents the asynchronous accept operation. DeclineAsync(RequestOptions?) Declines this friend request. Task DeclineAsync(RequestOptions? options = null) Parameters options RequestOptions The options to use when declining this friend request. Returns Task A task that represents the asynchronous decline operation."
  },
  "api/Kook.IGame.html": {
    "href": "api/Kook.IGame.html",
    "title": "Interface IGame | Kook.Net 文档",
    "keywords": "Interface IGame Namespace Kook Assembly Kook.Net.Core.dll Represents a generic game object. public interface IGame : IActivity, IEntity<int>, IDeletable Inherited Members IEntity<int>.Id IDeletable.DeleteAsync(RequestOptions) Properties GameType Gets the type of the game. GameType GameType { get; } Property Value GameType The type of the game. Icon Gets the URL of the game's icon. string? Icon { get; } Property Value string A string representing the URL of the game's icon. Name Gets the name of the game. string Name { get; } Property Value string A string containing the name of the game. Options Gets the additional information about the game. string? Options { get; } Property Value string A string containing the additional information about the game. ProcessNames Gets the process names of the game. IReadOnlyCollection<string> ProcessNames { get; } Property Value IReadOnlyCollection<string> An IReadOnlyCollection<T> containing the process names of the game. ProductNames Gets the product names of the game. IReadOnlyCollection<string> ProductNames { get; } Property Value IReadOnlyCollection<string> An IReadOnlyCollection<T> containing the product names of the game. RequireAdminPrivilege Gets whether the Kook client needs administrator privileges to detect the game. bool RequireAdminPrivilege { get; } Property Value bool true if the Kook client needs administrator privileges to detect the game; otherwise, false. Methods ModifyAsync(Action<GameProperties>, RequestOptions?) Modifies this game. Task<IGame> ModifyAsync(Action<GameProperties> func, RequestOptions? options = null) Parameters func Action<GameProperties> A delegate containing the properties to modify the game with. options RequestOptions The options to be used when sending the request. Returns Task<IGame> A task that represents the asynchronous modification operation. Remarks This method modifies this game with the specified properties. To see an example of this method and what properties are available, please refer to GameProperties."
  },
  "api/Kook.IGuild.html": {
    "href": "api/Kook.IGuild.html",
    "title": "Interface IGuild | Kook.Net 文档",
    "keywords": "Interface IGuild Namespace Kook Assembly Kook.Net.Core.dll Represents a generic guild/server. public interface IGuild : IEntity<ulong> Inherited Members IEntity<ulong>.Id Properties AudioClient Gets the IAudioClient currently associated with this guild. [Obsolete(\"Use AudioClients instead.\")] IAudioClient? AudioClient { get; } Property Value IAudioClient An IAudioClient currently associated with this guild. AudioClients Gets a collection of all audio clients associated with this guild. IReadOnlyDictionary<ulong, IAudioClient> AudioClients { get; } Property Value IReadOnlyDictionary<ulong, IAudioClient> Available Determines if this guild is currently connected and ready to be used. bool Available { get; } Property Value bool true if this guild is currently connected and ready to be used; otherwise false. Remarks note This property only applies to a WebSocket-based client. This boolean is used to determine if the guild is currently connected to the WebSocket and is ready to be used/accessed. Banner Gets the URL of this guild's banner image. string Banner { get; } Property Value string A URL pointing to the guild's banner image; null if none is set. BoostLevel Gets the level of guild boosting in this guild. BoostLevel BoostLevel { get; } Property Value BoostLevel The level of guild boosting in this guild. BoostSubscriptionCount Gets the number of boost subscribers of this guild. int BoostSubscriptionCount { get; } Property Value int The number of boost subscribers of this guild. BufferBoostSubscriptionCount Gets the number of boost subscribers who activates buffer of this guild. int BufferBoostSubscriptionCount { get; } Property Value int The number of boost subscribers who activates buffer of this guild. DefaultChannelId Gets the default channel ID for this guild. ulong? DefaultChannelId { get; } Property Value ulong? A ulong representing the default channel ID for this guild. Emotes Gets a collection of all custom emotes for this guild. IReadOnlyCollection<GuildEmote> Emotes { get; } Property Value IReadOnlyCollection<GuildEmote> A read-only collection of all custom emotes for this guild. See Also GetEmotesAsync(RequestOptions?) EveryoneRole Gets the built-in role containing all users in this guild. IRole EveryoneRole { get; } Property Value IRole A role object that represents an @everyone role in this guild. Features Gets the features of this guild. GuildFeatures Features { get; } Property Value GuildFeatures An array of string representing the features of this guild. Icon Gets the URL of this guild's icon. string Icon { get; } Property Value string A URL pointing to the guild's icon; null if none is set. IsOpenEnabled Gets whether this guild is public. bool IsOpenEnabled { get; } Property Value bool true if this guild is public; false otherwise. MaxBitrate Gets the max bitrate for voice channels in this guild. int MaxBitrate { get; } Property Value int A int representing the maximum bitrate value allowed by Kook in this guild. MaxUploadLimit Gets the upload limit in bytes for this guild. This number is dependent on the guild's boost status. ulong MaxUploadLimit { get; } Property Value ulong Name Gets the name of this guild. string Name { get; } Property Value string A string containing the name of this guild. NotifyType Gets the default notification type for this guild. NotifyType NotifyType { get; } Property Value NotifyType A NotifyType representing the default notification type for this guild. OpenId Gets the open ID for this guild. uint? OpenId { get; } Property Value uint? A uint representing the open ID for this guild; this property should be null if IsOpenEnabled is false. OwnerId Gets the ID of the user that owns this guild. ulong OwnerId { get; } Property Value ulong A ulong representing the identifier of the user that owns this guild. RecommendInfo Gets the recommendation information for this guild. IRecommendInfo? RecommendInfo { get; } Property Value IRecommendInfo A recommendation object that represents the recommendation information for this guild; null if the guild does not have a recommendation. Region Gets the default voice region for this guild. string Region { get; } Property Value string A string representing the default voice region for this guild. Roles Gets a collection of all roles in this guild. IReadOnlyCollection<IRole> Roles { get; } Property Value IReadOnlyCollection<IRole> A read-only collection of roles found within this guild. Topic Gets the topic for the guild. string Topic { get; } Property Value string The description for the guild; null if none is set. WelcomeChannelId Gets the welcome channel ID for this guild. ulong? WelcomeChannelId { get; } Property Value ulong? A ulong representing the welcome channel ID for this guild. Methods AddBanAsync(IUser, int, string?, RequestOptions?) Bans the user from this guild and optionally prunes their recent messages. Task AddBanAsync(IUser user, int pruneDays = 0, string? reason = null, RequestOptions? options = null) Parameters user IUser The user to ban. pruneDays int The number of days to remove messages from this user for, and this number must be between [0, 7]. reason string The reason of the ban to be written in the audit log. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous add operation for the ban. Exceptions ArgumentException pruneDays is not between 0 to 7. AddBanAsync(ulong, int, string?, RequestOptions?) Bans the user from this guild and optionally prunes their recent messages. Task AddBanAsync(ulong userId, int pruneDays = 0, string? reason = null, RequestOptions? options = null) Parameters userId ulong The identifier of the user to ban. pruneDays int The number of days to remove messages from this user for, and this number must be between [0, 7]. reason string The reason of the ban to be written in the audit log. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous add operation for the ban. Exceptions ArgumentException pruneDays is not between 0 to 7. CreateCategoryChannelAsync(string, Action<CreateCategoryChannelProperties>?, RequestOptions?) Creates a new channel category in this guild. Task<ICategoryChannel> CreateCategoryChannelAsync(string name, Action<CreateCategoryChannelProperties>? func = null, RequestOptions? options = null) Parameters name string The new name for the category. func Action<CreateCategoryChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<ICategoryChannel> A task that represents the asynchronous creation operation. The task result contains the newly created category channel. CreateEmoteAsync(string, Image, RequestOptions?) Creates a new GuildEmote in this guild. Task<GuildEmote> CreateEmoteAsync(string name, Image image, RequestOptions? options = null) Parameters name string The name of the guild emote. image Image The image of the new emote. options RequestOptions The options to be used when sending the request. Returns Task<GuildEmote> A task that represents the asynchronous creation operation. The task result contains the created emote. CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions?) Creates a new invite to this channel. Task<IInvite> CreateInviteAsync(InviteMaxAge maxAge = InviteMaxAge._604800, InviteMaxUses maxUses = InviteMaxUses.Unlimited, RequestOptions? options = null) Parameters maxAge InviteMaxAge The time until the invite expires. Set to InviteMaxAge.NeverExpires to never expire. maxUses InviteMaxUses The max amount of times this invite may be used. Set to InviteMaxUses.Unlimited to have unlimited uses. options RequestOptions The options to be used when sending the request. Returns Task<IInvite> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateInviteAsync(int?, int?, RequestOptions?) Creates a new invite to this channel. Task<IInvite> CreateInviteAsync(int? maxAge = 604800, int? maxUses = null, RequestOptions? options = null) Parameters maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. options RequestOptions The options to be used when sending the request. Returns Task<IInvite> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateRoleAsync(string, RequestOptions?) Creates a new role with the provided name. Task<IRole> CreateRoleAsync(string name, RequestOptions? options = null) Parameters name string The new name for the role. options RequestOptions The options to be used when sending the request. Returns Task<IRole> A task that represents the asynchronous creation operation. The task result contains the newly created role. CreateTextChannelAsync(string, Action<CreateTextChannelProperties>?, RequestOptions?) Creates a new text channel in this guild. Task<ITextChannel> CreateTextChannelAsync(string name, Action<CreateTextChannelProperties>? func = null, RequestOptions? options = null) Parameters name string The new name for the text channel. func Action<CreateTextChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<ITextChannel> A task that represents the asynchronous creation operation. The task result contains the newly created text channel. CreateVoiceChannelAsync(string, Action<CreateVoiceChannelProperties>?, RequestOptions?) Creates a new voice channel in this guild. Task<IVoiceChannel> CreateVoiceChannelAsync(string name, Action<CreateVoiceChannelProperties>? func = null, RequestOptions? options = null) Parameters name string The new name for the voice channel. func Action<CreateVoiceChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<IVoiceChannel> A task that represents the asynchronous creation operation. The task result contains the newly created voice channel. DeleteEmoteAsync(GuildEmote, RequestOptions?) Deletes an existing GuildEmote from this guild. Task DeleteEmoteAsync(GuildEmote emote, RequestOptions? options = null) Parameters emote GuildEmote The emote to delete. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DownloadBoostSubscriptionsAsync(RequestOptions?) Downloads all boost subscriptions for this guild. Task DownloadBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous download operation. Remarks This method downloads all boost subscriptions for this guild through the Gateway and caches them. To download all boost subscriptions, the current user must has the ManageGuild permission. DownloadUsersAsync(RequestOptions?) Downloads all users for this guild if the current list is incomplete. Task DownloadUsersAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous download operation. Remarks This method downloads all users found within this guild through the Gateway and caches them. DownloadVoiceStatesAsync(RequestOptions?) Downloads all voice states for this guild. Task DownloadVoiceStatesAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous download operation. Remarks This method downloads all voice states for this guild through the Gateway and caches them. GetActiveBoostSubscriptionsAsync(RequestOptions?) Gets subscriptions which are not expired for this guild. Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> GetActiveBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> A task that represents the asynchronous retrieval operation. The task result contains a collection of BoostSubscriptionMetadata which are not expired, each representing the subscriptions information. GetBadgeAsync(BadgeStyle, RequestOptions?) Gets a badge which is associated with this guild. Task<Stream> GetBadgeAsync(BadgeStyle style = BadgeStyle.GuildName, RequestOptions? options = null) Parameters style BadgeStyle The BadgeStyle that specifies the style of the badge. options RequestOptions The options to be used when sending the request. Returns Task<Stream> A task that represents the asynchronous get operation. The task result contains the stream of the badge associated with this guild. GetBanAsync(IUser, RequestOptions?) Gets a ban object for a banned user. Task<IBan?> GetBanAsync(IUser user, RequestOptions? options = null) Parameters user IUser The banned user. options RequestOptions The options to be used when sending the request. Returns Task<IBan> A task that represents the asynchronous get operation. The task result contains a ban object, which contains the user information and the reason for the ban; null if the ban entry cannot be found. GetBanAsync(ulong, RequestOptions?) Gets a ban object for a banned user. Task<IBan?> GetBanAsync(ulong userId, RequestOptions? options = null) Parameters userId ulong The identifier for the banned user. options RequestOptions The options to be used when sending the request. Returns Task<IBan> A task that represents the asynchronous get operation. The task result contains a ban object, which contains the user information and the reason for the ban; null if the ban entry cannot be found. GetBansAsync(RequestOptions?) Gets a collection of all users banned in this guild. Task<IReadOnlyCollection<IBan>> GetBansAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IBan>> A task that represents the asynchronous get operation. The task result contains a read-only collection of ban objects that this guild currently possesses, with each object containing the user banned and reason behind the ban. GetBoostSubscriptionsAsync(RequestOptions?) Gets all subscriptions for this guild. Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> GetBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> A task that represents the asynchronous retrieval operation. The task result contains a collection of BoostSubscriptionMetadata, each representing the subscriptions information. GetCategoryChannelsAsync(CacheMode, RequestOptions?) Gets a collection of all category channels in this guild. Task<IReadOnlyCollection<ICategoryChannel>> GetCategoryChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<ICategoryChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of category channels found within this guild. GetChannelAsync(ulong, CacheMode, RequestOptions?) Gets a channel in this guild. Task<IGuildChannel?> GetChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters id ulong The identifier for the channel. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IGuildChannel> A task that represents the asynchronous get operation. The task result contains the generic channel associated with the specified id; null if none is found. GetChannelsAsync(CacheMode, RequestOptions?) Gets a collection of all channels in this guild. Task<IReadOnlyCollection<IGuildChannel>> GetChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IGuildChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of generic channels found within this guild. GetCurrentUserAsync(CacheMode, RequestOptions?) Gets the current user for this guild. Task<IGuildUser?> GetCurrentUserAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IGuildUser> A task that represents the asynchronous get operation. The task result contains the currently logged-in user within this guild. GetDefaultChannelAsync(CacheMode, RequestOptions?) Gets the default text channel for this guild. Task<ITextChannel?> GetDefaultChannelAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<ITextChannel> A task that represents the asynchronous get operation. The task result contains the default text channel for this guild; null if none is found. GetEmoteAsync(string, RequestOptions?) Gets a specific emote from this guild. Task<GuildEmote?> GetEmoteAsync(string id, RequestOptions? options = null) Parameters id string The identifier for the guild emote. options RequestOptions The options to be used when sending the request. Returns Task<GuildEmote> A task that represents the asynchronous get operation. The task result contains the emote found with the specified id; null if none is found. GetEmotesAsync(RequestOptions?) Gets a collection of emotes from this guild. Task<IReadOnlyCollection<GuildEmote>> GetEmotesAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<GuildEmote>> A task that represents the asynchronous get operation. The task result contains a read-only collection of emotes found within the guild. GetInvitesAsync(RequestOptions?) Gets a collection of all invites in this guild. Task<IReadOnlyCollection<IInvite>> GetInvitesAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IInvite>> A task that represents the asynchronous get operation. The task result contains a read-only collection of invite, each representing information for an invite found within this guild. GetOwnerAsync(CacheMode, RequestOptions?) Gets the owner of this guild. Task<IGuildUser?> GetOwnerAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IGuildUser> A task that represents the asynchronous get operation. The task result contains the owner of this guild. GetRole(uint) Gets a role in this guild. IRole? GetRole(uint id) Parameters id uint The identifier for the role. Returns IRole A role that is associated with the specified id; null if none is found. GetTextChannelAsync(ulong, CacheMode, RequestOptions?) Gets a text channel in this guild. Task<ITextChannel?> GetTextChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters id ulong The identifier for the text channel. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<ITextChannel> A task that represents the asynchronous get operation. The task result contains the text channel associated with the specified id; null if none is found. GetTextChannelsAsync(CacheMode, RequestOptions?) Gets a collection of all text channels in this guild. Task<IReadOnlyCollection<ITextChannel>> GetTextChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<ITextChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of message channels found within this guild. GetUserAsync(ulong, CacheMode, RequestOptions?) Gets a user from this guild. Task<IGuildUser?> GetUserAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters id ulong The identifier of the user. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IGuildUser> A task that represents the asynchronous get operation. The task result contains the guild user associated with the specified id; null if none is found. Remarks This method retrieves a user found within this guild. note This may return null in the WebSocket implementation due to incomplete user collection in large guilds. GetUsersAsync(CacheMode, RequestOptions?) Gets a collection of all users in this guild. Task<IReadOnlyCollection<IGuildUser>> GetUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IGuildUser>> A task that represents the asynchronous get operation. The task result contains a collection of guild users found within this guild. Remarks This method retrieves all users found within this guild. GetVoiceChannelAsync(ulong, CacheMode, RequestOptions?) Gets a voice channel in this guild. Task<IVoiceChannel?> GetVoiceChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters id ulong The identifier for the voice channel. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IVoiceChannel> A task that represents the asynchronous get operation. The task result contains the voice channel associated with the specified id; null if none is found. GetVoiceChannelsAsync(CacheMode, RequestOptions?) Gets a collection of all voice channels in this guild. Task<IReadOnlyCollection<IVoiceChannel>> GetVoiceChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IVoiceChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of voice channels found within this guild. GetWelcomeChannelAsync(CacheMode, RequestOptions?) Gets the welcome text channel for this guild. Task<ITextChannel?> GetWelcomeChannelAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<ITextChannel> A task that represents the asynchronous get operation. The task result contains the welcome text channel for this guild; null if none is found. LeaveAsync(RequestOptions?) Leaves this guild. Task LeaveAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous leave operation. Remarks This method will make the currently logged-in user leave the guild. note If the user is the owner of this guild, use DeleteAsync(RequestOptions?) instead. ModifyEmoteNameAsync(GuildEmote, string, RequestOptions?) Modifies an existing GuildEmote in this guild. Task ModifyEmoteNameAsync(GuildEmote emote, string name, RequestOptions? options = null) Parameters emote GuildEmote The emote to be modified. name string The new name of the emote. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. The task result contains the modified emote. MoveUsersAsync(IEnumerable<IGuildUser>, IVoiceChannel, RequestOptions?) Moves the user to the voice channel. Task MoveUsersAsync(IEnumerable<IGuildUser> users, IVoiceChannel targetChannel, RequestOptions? options = null) Parameters users IEnumerable<IGuildUser> The users to move. targetChannel IVoiceChannel the channel where the user gets moved to. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for moving a user. RemoveBanAsync(IUser, RequestOptions?) Unbans the user if they are currently banned. Task RemoveBanAsync(IUser user, RequestOptions? options = null) Parameters user IUser The user to be unbanned. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation for the ban. RemoveBanAsync(ulong, RequestOptions?) Unbans the user if they are currently banned. Task RemoveBanAsync(ulong userId, RequestOptions? options = null) Parameters userId ulong The identifier of the user to be unbanned. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation for the ban. SearchUsersAsync(Action<SearchGuildMemberProperties>, int, CacheMode, RequestOptions?) Gets a collection of users in this guild that the name or nickname contains the provided string at func. IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> SearchUsersAsync(Action<SearchGuildMemberProperties> func, int limit = 50, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters func Action<SearchGuildMemberProperties> A delegate containing the properties to search users with. limit int The maximum number of users to be gotten. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> A task that represents the asynchronous get operation. The task result contains a collection of guild users that matches the properties with the provided Action<T> at func. Remarks The limit can not be higher than MaxUsersPerBatch."
  },
  "api/Kook.IGuildChannel.html": {
    "href": "api/Kook.IGuildChannel.html",
    "title": "Interface IGuildChannel | Kook.Net 文档",
    "keywords": "Interface IGuildChannel Namespace Kook Assembly Kook.Net.Core.dll Represents a generic guild channel. public interface IGuildChannel : IChannel, IEntity<ulong>, IDeletable Inherited Members IChannel.Name IEntity<ulong>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties CreatorId Gets the identifier of the user who created this channel. ulong? CreatorId { get; } Property Value ulong? A ulong representing the identifier of the user who created this channel. Guild Gets the guild associated with this channel. IGuild Guild { get; } Property Value IGuild A guild object that this channel belongs to. GuildId Gets the guild ID associated with this channel. ulong GuildId { get; } Property Value ulong An ulong representing the guild identifier for the guild that this channel belongs to. Position Gets the position of this channel. int? Position { get; } Property Value int? An int representing the position of this channel in the guild's channel list relative to others of the same type. RolePermissionOverwrites Gets a collection of permission overwrites for roles for this channel. IReadOnlyCollection<RolePermissionOverwrite> RolePermissionOverwrites { get; } Property Value IReadOnlyCollection<RolePermissionOverwrite> A collection of overwrites for roles associated with this channel. Type Gets the type of this channel. ChannelType Type { get; } Property Value ChannelType A ChannelType representing the type of this channel. UserPermissionOverwrites Gets a collection of permission overwrites for users for this channel. IReadOnlyCollection<UserPermissionOverwrite> UserPermissionOverwrites { get; } Property Value IReadOnlyCollection<UserPermissionOverwrite> A collection of overwrites for users associated with this channel. Methods AddPermissionOverwriteAsync(IGuildUser, RequestOptions?) Adds the permission overwrite for the given user. Task AddPermissionOverwriteAsync(IGuildUser user, RequestOptions? options = null) Parameters user IGuildUser The user to add the overwrite to. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. AddPermissionOverwriteAsync(IRole, RequestOptions?) Adds the permission overwrite for the given role. Task AddPermissionOverwriteAsync(IRole role, RequestOptions? options = null) Parameters role IRole The role to add the overwrite to. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. GetCreatorAsync(CacheMode, RequestOptions?) Gets the creator of this channel. Task<IUser?> GetCreatorAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IUser> A task that represents the asynchronous get operation. The task result contains the creator of this channel. GetPermissionOverwrite(IRole) Gets the permission overwrite for a specific role. OverwritePermissions? GetPermissionOverwrite(IRole role) Parameters role IRole The role to get the overwrite from. Returns OverwritePermissions? An overwrite object for the targeted role; null if none is set. GetPermissionOverwrite(IUser) Gets the permission overwrite for a specific user. OverwritePermissions? GetPermissionOverwrite(IUser user) Parameters user IUser The user to get the overwrite from. Returns OverwritePermissions? An overwrite object for the targeted user; null if none is set. GetUserAsync(ulong, CacheMode, RequestOptions?) Gets a user in this channel. Task<IGuildUser?> GetUserAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters id ulong The identifier of the user. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IGuildUser> A task representing the asynchronous get operation. The task result contains a guild user object that represents the user; null if none is found. GetUsersAsync(CacheMode, RequestOptions?) Gets a collection of users that are able to view the channel or are currently in this channel. IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> GetUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> Paged collection of users. Remarks This method follows the same behavior as described in GetUsersAsync(CacheMode, RequestOptions?). Please visit its documentation for more details on this method. ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions?) Modifies this guild channel. Task ModifyAsync(Action<ModifyGuildChannelProperties> func, RequestOptions? options = null) Parameters func Action<ModifyGuildChannelProperties> The delegate containing the properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies the current guild channel with the specified properties. To see an example of this method and what properties are available, please refer to ModifyGuildChannelProperties. ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions?) Updates the permission overwrite for the given user. Task ModifyPermissionOverwriteAsync(IGuildUser user, Func<OverwritePermissions, OverwritePermissions> func, RequestOptions? options = null) Parameters user IGuildUser The user to add the overwrite to. func Func<OverwritePermissions, OverwritePermissions> A delegate containing the values to modify the permission overwrite with. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions?) Updates the permission overwrite for the given role. Task ModifyPermissionOverwriteAsync(IRole role, Func<OverwritePermissions, OverwritePermissions> func, RequestOptions? options = null) Parameters role IRole The role to add the overwrite to. func Func<OverwritePermissions, OverwritePermissions> A delegate containing the values to modify the permission overwrite with. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. RemovePermissionOverwriteAsync(IGuildUser, RequestOptions?) Removes the permission overwrite for the given user, if one exists. Task RemovePermissionOverwriteAsync(IGuildUser user, RequestOptions? options = null) Parameters user IGuildUser The user to remove the overwrite from. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. RemovePermissionOverwriteAsync(IRole, RequestOptions?) Removes the permission overwrite for the given role, if one exists. Task RemovePermissionOverwriteAsync(IRole role, RequestOptions? options = null) Parameters role IRole The role to remove the overwrite from. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel."
  },
  "api/Kook.IGuildUser.html": {
    "href": "api/Kook.IGuildUser.html",
    "title": "Interface IGuildUser | Kook.Net 文档",
    "keywords": "Interface IGuildUser Namespace Kook Assembly Kook.Net.Core.dll Represents a generic guild user. public interface IGuildUser : IUser, IEntity<ulong>, IMentionable, IPresence, IVoiceState Inherited Members IUser.Username IUser.IdentifyNumber IUser.IdentifyNumberValue IUser.IsBot IUser.IsBanned IUser.HasBuff IUser.HasAnnualBuff IUser.Avatar IUser.BuffAvatar IUser.Banner IUser.IsDenoiseEnabled IUser.UserTag IUser.Nameplates IUser.IsSystemUser IUser.CreateDMChannelAsync(RequestOptions) IUser.GetIntimacyAsync(RequestOptions) IUser.UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) IUser.BlockAsync(RequestOptions) IUser.UnblockAsync(RequestOptions) IUser.RequestFriendAsync(RequestOptions) IUser.RemoveFriendAsync(RequestOptions) IEntity<ulong>.Id IMentionable.PlainTextMention IMentionable.KMarkdownMention IPresence.IsOnline IPresence.ActiveClient IVoiceState.IsDeafened IVoiceState.IsMuted IVoiceState.VoiceChannel Extension Methods UserExtensions.BanAsync(IGuildUser, int, string?, RequestOptions?) Format.UsernameAndIdentifyNumber(IUser, bool) UserExtensions.SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendTextAsync(IUser, string, IQuote?, RequestOptions?) Properties ActiveAt Gets when this user was activated. DateTimeOffset? ActiveAt { get; } Property Value DateTimeOffset? The time of which the user was activated. Color Gets the color the user's displayed name is being displayed in. Color? Color { get; } Property Value Color? A Color struct representing the color the user's display name is being displayed in. Remarks warning At present, the color of a role may be a solid color or a gradient. See ColorType, which is guaranteed due to the fact that the guild's user list API endpoint returns the color type and the gradient color information if exists. However, the value of this property is fetched from the guild's user list API endpoint, which does not return the color type and the gradient color information. Hence, the value of this property may be incorrect if the color of a role is a gradient. DisplayName Gets the displayed name for this user. string DisplayName { get; } Property Value string A string representing the display name of the user; If the nickname is null, this will be the username. Guild Gets the guild for this user. IGuild Guild { get; } Property Value IGuild A guild object that this user belongs to. GuildId Gets the ID of the guild for this user. ulong GuildId { get; } Property Value ulong An ulong representing the identifier of the guild that this user belongs to. GuildPermissions Gets the guild-level permissions for this user. GuildPermissions GuildPermissions { get; } Property Value GuildPermissions A GuildPermissions structure for this user, representing what permissions this user has in the guild. IsMobileVerified Gets whether the mobile number has been verified for this user. bool? IsMobileVerified { get; } Property Value bool? true if the mobile number has been verified; false otherwise. IsOwner Gets whether this user owns the current guild. bool? IsOwner { get; } Property Value bool? true if this user owns the current guild; false otherwise. JoinedAt Gets when this user joined the guild. DateTimeOffset? JoinedAt { get; } Property Value DateTimeOffset? The time of which the user has joined the guild. Nickname Gets the nickname for this user. string? Nickname { get; } Property Value string A string representing the nickname of the user; null if none is set. RoleIds Gets a collection of IDs for the roles that this user currently possesses in the guild. IReadOnlyCollection<uint> RoleIds { get; } Property Value IReadOnlyCollection<uint> A read-only collection of uint, each representing an identifier for a role that this user possesses. Remarks This property returns a read-only collection of the identifiers of the roles that this user possesses. For WebSocket users, a Roles property can be found in place of this property. Due to the REST implementation, only a collection of identifiers can be retrieved instead of the full role objects. Methods AddRoleAsync(IRole, RequestOptions?) Adds the specified role to this user in the guild. Task AddRoleAsync(IRole role, RequestOptions? options = null) Parameters role IRole The role to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRoleAsync(uint, RequestOptions?) Adds the specified role to this user in the guild. Task AddRoleAsync(uint roleId, RequestOptions? options = null) Parameters roleId uint The role to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRolesAsync(IEnumerable<IRole>, RequestOptions?) Adds the specified roles to this user in the guild. Task AddRolesAsync(IEnumerable<IRole> roles, RequestOptions? options = null) Parameters roles IEnumerable<IRole> The roles to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRolesAsync(IEnumerable<uint>, RequestOptions?) Adds the specified roleIds to this user in the guild. Task AddRolesAsync(IEnumerable<uint> roleIds, RequestOptions? options = null) Parameters roleIds IEnumerable<uint> The roles to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. DeafenAsync(RequestOptions?) Deafen this user in this guild. Task DeafenAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous deafening operation. GetBoostSubscriptionsAsync(RequestOptions?) Gets all subscriptions of this user for this guild. Task<IReadOnlyCollection<BoostSubscriptionMetadata>> GetBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<BoostSubscriptionMetadata>> A task that represents the asynchronous retrieval operation. The task result contains a collection of BoostSubscriptionMetadata, each representing the subscription information. GetConnectedVoiceChannelsAsync(RequestOptions?) Gets a collection of voice channels a user. Task<IReadOnlyCollection<IVoiceChannel>> GetConnectedVoiceChannelsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IVoiceChannel>> A task that represents the asynchronous get operation. The task result contains a collection of voice channels the user is connected to. GetPermissions(IGuildChannel) Gets the level permissions granted to this user to a given channel. ChannelPermissions GetPermissions(IGuildChannel channel) Parameters channel IGuildChannel The channel to get the permission from. Returns ChannelPermissions A ChannelPermissions structure representing the permissions that a user has in the specified channel. KickAsync(RequestOptions?) Kicks this user from this guild. Task KickAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous kick operation. ModifyNicknameAsync(string?, RequestOptions?) Modifies this user's nickname in this guild. Task ModifyNicknameAsync(string? name, RequestOptions? options = null) Parameters name string The nickname to modify the user with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies the nickname of current guild user. warning The KOOK API will clear the nickname if the nickname is set to the same as the username at present. Hence either setting the nickname to the same as the username or setting the nickname to null will clear the nickname. MuteAsync(RequestOptions?) Mute this user in this guild. Task MuteAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous muting operation. RemoveRoleAsync(IRole, RequestOptions?) Removes the specified role from this user in the guild. Task RemoveRoleAsync(IRole role, RequestOptions? options = null) Parameters role IRole The role to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRoleAsync(uint, RequestOptions?) Removes the specified roleId from this user in the guild. Task RemoveRoleAsync(uint roleId, RequestOptions? options = null) Parameters roleId uint The role to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRolesAsync(IEnumerable<IRole>, RequestOptions?) Removes the specified roles from this user in the guild. Task RemoveRolesAsync(IEnumerable<IRole> roles, RequestOptions? options = null) Parameters roles IEnumerable<IRole> The roles to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRolesAsync(IEnumerable<uint>, RequestOptions?) Removes the specified roleIds from this user in the guild. Task RemoveRolesAsync(IEnumerable<uint> roleIds, RequestOptions? options = null) Parameters roleIds IEnumerable<uint> The roles to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. UndeafenAsync(RequestOptions?) Undeafen this user in this guild. Task UndeafenAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous undeafening operation. UnmuteAsync(RequestOptions?) Unmute this user in this guild. Task UnmuteAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous unmuting operation."
  },
  "api/Kook.IIntimacy.html": {
    "href": "api/Kook.IIntimacy.html",
    "title": "Interface IIntimacy | Kook.Net 文档",
    "keywords": "Interface IIntimacy Namespace Kook Assembly Kook.Net.Core.dll Represents a generic intimacy. public interface IIntimacy : IEntity<ulong> Inherited Members IEntity<ulong>.Id Properties Images Gets the images associated with this intimacy. IReadOnlyCollection<IntimacyImage> Images { get; } Property Value IReadOnlyCollection<IntimacyImage> An IReadOnlyCollection<T> containing the images associated with this intimacy. LastModifyAt Gets the time at which this intimacy was modified last time. DateTimeOffset? LastModifyAt { get; } Property Value DateTimeOffset? A time at which this intimacy was modified last time. LastReadAt Gets the time at which the user read the message. DateTimeOffset LastReadAt { get; } Property Value DateTimeOffset A time at which the user read the message. Score Gets the score associated with this intimacy. int Score { get; } Property Value int A int representing the score associated with this intimacy. SocialInfo Gets the social information associated with this intimacy. string SocialInfo { get; } Property Value string A string representing the social information associated with this intimacy. User Gets the user associated with this intimacy. IUser User { get; } Property Value IUser An IUser representing the user associated with this intimacy. Methods UpdateAsync(Action<IntimacyProperties>, RequestOptions?) Updates the intimacy information with this user. Task UpdateAsync(Action<IntimacyProperties> func, RequestOptions? options = null) Parameters func Action<IntimacyProperties> A delegate containing the properties to modify the IIntimacy with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for updating the intimacy information."
  },
  "api/Kook.IInvite.html": {
    "href": "api/Kook.IInvite.html",
    "title": "Interface IInvite | Kook.Net 文档",
    "keywords": "Interface IInvite Namespace Kook Assembly Kook.Net.Core.dll Represents a generic invite. public interface IInvite : IEntity<uint>, IDeletable Inherited Members IEntity<uint>.Id IDeletable.DeleteAsync(RequestOptions) Properties Channel Gets the channel this invite is linked to. IChannel Channel { get; } Property Value IChannel A generic channel that the invite points to. ChannelId Gets the ID of the channel this invite is linked to. ulong? ChannelId { get; } Property Value ulong? A ulong representing the channel identifier that the invite points to. ChannelName Gets the name of the channel this invite is linked to. string? ChannelName { get; } Property Value string A string containing the name of the channel that the invite points to. ChannelType Gets the type of the channel this invite is linked to. ChannelType ChannelType { get; } Property Value ChannelType Code Gets the unique identifier for this invite. string Code { get; } Property Value string A string containing the invite code (e.g. wEAF5t). CreatedAt Gets the time at which this invite was created. DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing the time at which this invite was created. ExpiresAt Gets the time at which this invite will expire. DateTimeOffset? ExpiresAt { get; } Property Value DateTimeOffset? A DateTimeOffset representing the time until this invite expires; null if this invite never expires. Guild Gets the guild this invite is linked to. IGuild Guild { get; } Property Value IGuild A guild object representing the guild that the invite points to. GuildId Gets the ID of the guild this invite is linked to. ulong? GuildId { get; } Property Value ulong? A ulong representing the guild identifier that the invite points to. GuildName Gets the name of the guild this invite is linked to. string GuildName { get; } Property Value string A string containing the name of the guild that the invite points to. InvitedUsersCount Gets the number of users that have accepted this invite. int InvitedUsersCount { get; } Property Value int An int representing the number of users that have accepted this invite. Inviter Gets the user that created this invite. IUser Inviter { get; } Property Value IUser A user that created this invite. MaxAge Gets the time span until the invite expires. TimeSpan? MaxAge { get; } Property Value TimeSpan? A TimeSpan representing the time span until this invite expires; null if this invite never expires. MaxUses Gets the max number of uses this invite may have. int? MaxUses { get; } Property Value int? An int representing the number of uses this invite may be accepted until it is removed from the guild; null if none is set. RemainingUses Gets the number of times this invite still remains. int? RemainingUses { get; } Property Value int? An int representing the number of times this invite still remains; null if none is set. Url Gets the URL used to accept this invite using Code. string Url { get; } Property Value string A string containing the full invite URL (e.g. https://kaihei.co/wEAF5t). Uses Gets the number of times this invite has been used. int? Uses { get; } Property Value int? An int representing the number of times this invite has been used; null if none is set."
  },
  "api/Kook.IKookClient.html": {
    "href": "api/Kook.IKookClient.html",
    "title": "Interface IKookClient | Kook.Net 文档",
    "keywords": "Interface IKookClient Namespace Kook Assembly Kook.Net.Core.dll Represents a generic Kook client. public interface IKookClient : IDisposable Inherited Members IDisposable.Dispose() Properties ConnectionState Gets the current state of connection. ConnectionState ConnectionState { get; } Property Value ConnectionState CurrentUser Gets the currently logged-in user. ISelfUser? CurrentUser { get; } Property Value ISelfUser TokenType Gets the token type of the logged-in user. TokenType TokenType { get; } Property Value TokenType Methods GetBlockedUsersAsync(CacheMode, RequestOptions?) Gets blocked users. Task<IReadOnlyCollection<IUser>> GetBlockedUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IUser>> A task that represents the asynchronous get operation. The task result contains a collection of users that are blocked by the current user. GetChannelAsync(ulong, CacheMode, RequestOptions?) Gets a generic channel. Task<IChannel?> GetChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters id ulong The identifier of the channel. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IChannel> A task that represents the asynchronous get operation. The task result contains the channel associated with the identifier; null when the channel cannot be found. GetDMChannelAsync(Guid, CacheMode, RequestOptions?) Gets a direct message channel. Task<IDMChannel?> GetDMChannelAsync(Guid chatCode, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters chatCode Guid The identifier of the channel. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IDMChannel> A task that represents the asynchronous get operation. The task result contains a read-only collection of direct-message channels that the user currently partakes in. GetDMChannelsAsync(CacheMode, RequestOptions?) Gets a collection of direct message channels opened in this session. Task<IReadOnlyCollection<IDMChannel>> GetDMChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IDMChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of direct-message channels that the user currently partakes in. Remarks This method returns a collection of currently opened direct message channels. warning This method will not return previously opened DM channels outside of the current session! If you have just started the client, this may return an empty collection. GetFriendRequestsAsync(CacheMode, RequestOptions?) Gets friend requests. Task<IReadOnlyCollection<IFriendRequest>> GetFriendRequestsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IFriendRequest>> A task that represents the asynchronous get operation. The task result contains a collection of users that requested to be friends with the current user. GetFriendsAsync(CacheMode, RequestOptions?) Gets friends. Task<IReadOnlyCollection<IUser>> GetFriendsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IUser>> A task that represents the asynchronous get operation. The task result contains a collection of users that are friends with the current user. GetGuildAsync(ulong, CacheMode, RequestOptions?) Gets a guild. Task<IGuild?> GetGuildAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters id ulong The guild identifier. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IGuild> A task that represents the asynchronous get operation. The task result contains the guild associated with the identifier; null when the guild cannot be found. GetGuildsAsync(CacheMode, RequestOptions?) Gets a collection of guilds that the user is currently in. Task<IReadOnlyCollection<IGuild>> GetGuildsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IGuild>> A task that represents the asynchronous get operation. The task result contains a read-only collection of guilds that the current user is in. GetUserAsync(string, string, RequestOptions?) Gets a user. Task<IUser?> GetUserAsync(string username, string identifyNumber, RequestOptions? options = null) Parameters username string The name of the user (e.g. Still). identifyNumber string The identify value of the user (e.g. 2876). options RequestOptions The options to be used when sending the request. Returns Task<IUser> A task that represents the asynchronous get operation. The task result contains the user associated with the name and the identifyNumber; null if the user is not found. GetUserAsync(ulong, CacheMode, RequestOptions?) Gets a user. Task<IUser?> GetUserAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters id ulong The identifier of the user. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IUser> A task that represents the asynchronous get operation. The task result contains the user associated with the identifier; null if the user is not found. StartAsync() Starts the connection between Kook and the client.. Task StartAsync() Returns Task A task that represents the asynchronous start operation. Remarks This method will initialize the connection between the client and Kook. important This method will immediately return after it is called, as it will initialize the connection on another thread. StopAsync() Stops the connection between Kook and the client. Task StopAsync() Returns Task A task that represents the asynchronous stop operation."
  },
  "api/Kook.IMediaModule.html": {
    "href": "api/Kook.IMediaModule.html",
    "title": "Interface IMediaModule | Kook.Net 文档",
    "keywords": "Interface IMediaModule Namespace Kook Assembly Kook.Net.Core.dll A generic media module that can be used in an ICard. public interface IMediaModule : IModule Inherited Members IModule.Type Extension Methods CardExtensions.ToBuilder(IModule) Properties Source Gets the source of the media associated with this module. string Source { get; } Property Value string A string representing the source of the audio associated with this module. Title Gets the title of the media associated with this module. string? Title { get; } Property Value string A string representing the title of the media associated with this module."
  },
  "api/Kook.IMentionable.html": {
    "href": "api/Kook.IMentionable.html",
    "title": "Interface IMentionable | Kook.Net 文档",
    "keywords": "Interface IMentionable Namespace Kook Assembly Kook.Net.Core.dll Determines whether the object is mentionable or not. public interface IMentionable Properties KMarkdownMention Returns a special string used to mention this object in KMarkdown formatted text. string KMarkdownMention { get; } Property Value string A string that is recognized by Kook as a mention in KMarkdown formatted text. PlainTextMention Returns a special string used to mention this object in plain text formatted text. string PlainTextMention { get; } Property Value string A string that is recognized by Kook as a mention in plain text formatted text."
  },
  "api/Kook.IMessage.html": {
    "href": "api/Kook.IMessage.html",
    "title": "Interface IMessage | Kook.Net 文档",
    "keywords": "Interface IMessage Namespace Kook Assembly Kook.Net.Core.dll Represents a message object. public interface IMessage : IEntity<Guid>, IDeletable Inherited Members IEntity<Guid>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods MessageExtensions.GetJumpUrl(IMessage) Properties Attachments Gets the attachment included in this message. IReadOnlyCollection<IAttachment> Attachments { get; } Property Value IReadOnlyCollection<IAttachment> The attachment included in this message; Author Gets the author of this message. IUser Author { get; } Property Value IUser Cards Gets all cards included in this message. IReadOnlyCollection<ICard> Cards { get; } Property Value IReadOnlyCollection<ICard> A read-only collection of card objects. Channel Gets the source channel of the message. IMessageChannel Channel { get; } Property Value IMessageChannel CleanContent Gets the clean content for this message. string CleanContent { get; } Property Value string A string that contains the body of the message stripped of mentions, markdown, emojis and pings; note that this field may be empty or the original code if the message is not a text based message. Content Gets the content for this message. string Content { get; } Property Value string A string that contains the body of the message; note that this field may be empty or the original code if the message is not a text based message. EditedTimestamp Gets the time of this message's last edit. DateTimeOffset? EditedTimestamp { get; } Property Value DateTimeOffset? Time of when the message was last edited; null if the message is never edited. Embeds Gets all embeds included in this message. IReadOnlyCollection<IEmbed> Embeds { get; } Property Value IReadOnlyCollection<IEmbed> A read-only collection of embed objects. IsPinned Gets the value that indicates whether this message is pinned. bool? IsPinned { get; } Property Value bool? true if this message was added to its channel's pinned messages; otherwise false. MentionedEveryone Gets the value that indicates whether this message mentioned everyone. bool MentionedEveryone { get; } Property Value bool true if this message mentioned everyone; otherwise false. MentionedHere Gets the value that indicates whether this message mentioned online users. bool MentionedHere { get; } Property Value bool true if this message mentioned online users; otherwise false. MentionedRoleIds Gets the IDs of roles mentioned in this message. IReadOnlyCollection<uint> MentionedRoleIds { get; } Property Value IReadOnlyCollection<uint> A read-only collection of role IDs. MentionedUserIds Gets the IDs of users mentioned in this message. IReadOnlyCollection<ulong> MentionedUserIds { get; } Property Value IReadOnlyCollection<ulong> A read-only collection of user IDs. Pokes Gets all poke actions included in this message. IReadOnlyCollection<IPokeAction> Pokes { get; } Property Value IReadOnlyCollection<IPokeAction> A read-only collection of poke actions objects. Reactions Gets all reactions included in this message. IReadOnlyDictionary<IEmote, ReactionMetadata> Reactions { get; } Property Value IReadOnlyDictionary<IEmote, ReactionMetadata> Source Gets the source type of this message. MessageSource Source { get; } Property Value MessageSource Tags Gets all tags included in this message's content. IReadOnlyCollection<ITag> Tags { get; } Property Value IReadOnlyCollection<ITag> Timestamp Gets the time this message was sent. DateTimeOffset Timestamp { get; } Property Value DateTimeOffset Time of when the message was sent. Type Gets the type of this message. MessageType Type { get; } Property Value MessageType Methods AddReactionAsync(IEmote, RequestOptions?) Adds a reaction to this message. Task AddReactionAsync(IEmote emote, RequestOptions? options = null) Parameters emote IEmote The emoji used to react to this message. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for adding a reaction to this message. See Also IEmote GetReactionUsersAsync(IEmote, RequestOptions?) Gets all users that reacted to a message with a given emote. Task<IReadOnlyCollection<IUser>> GetReactionUsersAsync(IEmote emote, RequestOptions? options = null) Parameters emote IEmote The emoji that represents the reaction that you wish to get. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IUser>> Collection of users. RemoveReactionAsync(IEmote, IUser, RequestOptions?) Removes a reaction from message. Task RemoveReactionAsync(IEmote emote, IUser user, RequestOptions? options = null) Parameters emote IEmote The emoji used to react to this message. user IUser The user that added the emoji. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for removing a reaction to this message. See Also IEmote RemoveReactionAsync(IEmote, ulong, RequestOptions?) Removes a reaction from message. Task RemoveReactionAsync(IEmote emote, ulong userId, RequestOptions? options = null) Parameters emote IEmote The emoji used to react to this message. userId ulong The ID of the user that added the emoji. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for removing a reaction to this message. See Also IEmote"
  },
  "api/Kook.IMessageChannel.html": {
    "href": "api/Kook.IMessageChannel.html",
    "title": "Interface IMessageChannel | Kook.Net 文档",
    "keywords": "Interface IMessageChannel Namespace Kook Assembly Kook.Net.Core.dll Represents a channel that can send and receive messages. public interface IMessageChannel : IChannel, IEntity<ulong> Inherited Members IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Methods DeleteMessageAsync(IMessage, RequestOptions?) Deletes a message based on the provided message in this channel. Task DeleteMessageAsync(IMessage message, RequestOptions? options = null) Parameters message IMessage The message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DeleteMessageAsync(Guid, RequestOptions?) Deletes a message. Task DeleteMessageAsync(Guid messageId, RequestOptions? options = null) Parameters messageId Guid The identifier of the message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. GetMessageAsync(Guid, CacheMode, RequestOptions?) Gets a message from this message channel. Task<IMessage?> GetMessageAsync(Guid id, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters id Guid The identifier of the message. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IMessage> A task that represents an asynchronous get operation for retrieving the message. The task result contains the retrieved message; null if no message is found with the specified identifier. GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions?) Gets a collection of messages in this channel. IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = 50, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters referenceMessage IMessage The starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. warning Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! This method will attempt to fetch the number of messages specified under limit around the message referenceMessage depending on the dir. The library will attempt to split up the requests according to your limit and MaxMessagesPerBatch. In other words, should the user request 500 messages, and the MaxMessagesPerBatch constant is 100, the request will be split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need of flattening. GetMessagesAsync(Guid, Direction, int, CacheMode, RequestOptions?) Gets a collection of messages in this channel. IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = 50, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters referenceMessageId Guid The ID of the starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. warning Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! This method will attempt to fetch the number of messages specified under limit around the message referenceMessageId depending on the dir. The library will attempt to split up the requests according to your limit and MaxMessagesPerBatch. In other words, should the user request 500 messages, and the MaxMessagesPerBatch constant is 100, the request will be split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need of flattening. GetMessagesAsync(int, CacheMode, RequestOptions?) Gets the last N messages from this message channel. IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(int limit = 50, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters limit int The numbers of message to be gotten from. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. warning Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! This method will attempt to fetch the number of messages specified under limit. The library will attempt to split up the requests according to your limit and MaxMessagesPerBatch. In other words, should the user request 500 messages, and the MaxMessagesPerBatch constant is 100, the request will be split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need of flattening. ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions?) Modifies a message. Task ModifyMessageAsync(Guid messageId, Action<MessageProperties> func, RequestOptions? options = null) Parameters messageId Guid The identifier of the message that would be changed. func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties. SendCardAsync(ICard, IQuote?, IUser?, RequestOptions?) Sends a card message to this message channel. Task<Cacheable<IUserMessage, Guid>> SendCardAsync(ICard card, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters card ICard The card to be sent. quote IQuote The message quote to be included. Used to reply to specific messages. ephemeralUser IUser The user only who can see the message. Leave null to let everyone see the message. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendCardsAsync(IEnumerable<ICard>, IQuote?, IUser?, RequestOptions?) Sends a card message to this message channel. Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(IEnumerable<ICard> cards, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters cards IEnumerable<ICard> The cards to be sent. quote IQuote The message quote to be included. Used to reply to specific messages. ephemeralUser IUser The user only who can see the message. Leave null to let everyone see the message. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendFileAsync(FileAttachment, IQuote?, IUser?, RequestOptions?) Sends a file to this message channel. Task<Cacheable<IUserMessage, Guid>> SendFileAsync(FileAttachment attachment, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters attachment FileAttachment The attachment containing the file. quote IQuote The message quote to be included. Used to reply to specific messages. ephemeralUser IUser The user only who can see the message. Leave null to let everyone see the message. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendFileAsync(Stream, string, AttachmentType, IQuote?, IUser?, RequestOptions?) Sends a file to this message channel. Task<Cacheable<IUserMessage, Guid>> SendFileAsync(Stream stream, string filename, AttachmentType type = AttachmentType.File, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters stream Stream The stream of the file. filename string The name of the file. type AttachmentType The type of the file. quote IQuote The message quote to be included. Used to reply to specific messages. ephemeralUser IUser The user only who can see the message. Leave null to let everyone see the message. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendFileAsync(string, string?, AttachmentType, IQuote?, IUser?, RequestOptions?) Sends a file to this message channel. Task<Cacheable<IUserMessage, Guid>> SendFileAsync(string path, string? filename = null, AttachmentType type = AttachmentType.File, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters path string The file path of the file. filename string The name of the file. type AttachmentType The type of the file. quote IQuote The message quote to be included. Used to reply to specific messages. ephemeralUser IUser The user only who can see the message. Leave null to let everyone see the message. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendTextAsync(string, IQuote?, IUser?, RequestOptions?) Sends a text message to this message channel. Task<Cacheable<IUserMessage, Guid>> SendTextAsync(string text, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters text string The message to be sent. quote IQuote The message quote to be included. Used to reply to specific messages. ephemeralUser IUser The user only who can see the message. Leave null to let everyone see the message. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message."
  },
  "api/Kook.IModule.html": {
    "href": "api/Kook.IModule.html",
    "title": "Interface IModule | Kook.Net 文档",
    "keywords": "Interface IModule Namespace Kook Assembly Kook.Net.Core.dll Represents a generic module that can be used in an ICard. public interface IModule Extension Methods CardExtensions.ToBuilder(IModule) Properties Type Gets the type of the module. ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module."
  },
  "api/Kook.IModuleBuilder.html": {
    "href": "api/Kook.IModuleBuilder.html",
    "title": "Interface IModuleBuilder | Kook.Net 文档",
    "keywords": "Interface IModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll A generic module builder for creating an IModule. public interface IModuleBuilder Properties Type Specifies the module type of the IModule this builder creates. ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Methods Build() Builds the IModuleBuilder into an IModule. IModule Build() Returns IModule An IModule representing the built module object."
  },
  "api/Kook.INestedChannel.html": {
    "href": "api/Kook.INestedChannel.html",
    "title": "Interface INestedChannel | Kook.Net 文档",
    "keywords": "Interface INestedChannel Namespace Kook Assembly Kook.Net.Core.dll Represents a type of guild channel that can be nested within a category. public interface INestedChannel : IGuildChannel, IChannel, IEntity<ulong>, IDeletable Inherited Members IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.Position IGuildChannel.Type IGuildChannel.CreatorId IGuildChannel.RolePermissionOverwrites IGuildChannel.UserPermissionOverwrites IGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) IGuildChannel.GetCreatorAsync(CacheMode, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IChannel.Name IEntity<ulong>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties CategoryId Gets the parent (category) ID of this channel in the guild's channel list. ulong? CategoryId { get; } Property Value ulong? A ulong representing the identifier of the parent of this channel; null if none is set. IsPermissionSynced Specifies whether the permissions of this channel is synchronized with its parent channel. bool? IsPermissionSynced { get; } Property Value bool? A bool indicating whether the permissions of this channel is synchronized with its parent channel. Methods CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions?) Creates a new invite to this channel. Task<IInvite> CreateInviteAsync(InviteMaxAge maxAge = InviteMaxAge._604800, InviteMaxUses maxUses = InviteMaxUses.Unlimited, RequestOptions? options = null) Parameters maxAge InviteMaxAge The time until the invite expires. Set to InviteMaxAge.NeverExpires to never expire. maxUses InviteMaxUses The max amount of times this invite may be used. Set to InviteMaxUses.Unlimited to have unlimited uses. options RequestOptions The options to be used when sending the request. Returns Task<IInvite> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateInviteAsync(int?, int?, RequestOptions?) Creates a new invite to this channel. Task<IInvite> CreateInviteAsync(int? maxAge = 604800, int? maxUses = null, RequestOptions? options = null) Parameters maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. options RequestOptions The options to be used when sending the request. Returns Task<IInvite> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. GetCategoryAsync(CacheMode, RequestOptions?) Gets the parent (category) channel of this channel. Task<ICategoryChannel?> GetCategoryAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<ICategoryChannel> A task that represents the asynchronous get operation. The task result contains the category channel representing the parent of this channel; null if none is set. GetInvitesAsync(RequestOptions?) Gets a collection of all invites from this guild channel. Task<IReadOnlyCollection<IInvite>> GetInvitesAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IInvite>> A task that represents the asynchronous get operation. The task result contains a read-only collection of invite, each representing information for an invite found within this guild. SyncPermissionsAsync(RequestOptions?) Syncs the permissions of this nested channel with its parent's. Task SyncPermissionsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for syncing channel permissions with its parent's."
  },
  "api/Kook.IPermissionOverwrite-1.html": {
    "href": "api/Kook.IPermissionOverwrite-1.html",
    "title": "Interface IPermissionOverwrite<TTarget> | Kook.Net 文档",
    "keywords": "Interface IPermissionOverwrite<TTarget> Namespace Kook Assembly Kook.Net.Core.dll Represents a generic permission overwrite. public interface IPermissionOverwrite<TTarget> Type Parameters TTarget The type of the target. Properties Permissions Gets the overwritten permission. OverwritePermissions Permissions { get; } Property Value OverwritePermissions Target Gets the target of this overwrite. TTarget Target { get; } Property Value TTarget"
  },
  "api/Kook.IPoke.html": {
    "href": "api/Kook.IPoke.html",
    "title": "Interface IPoke | Kook.Net 文档",
    "keywords": "Interface IPoke Namespace Kook Assembly Kook.Net.Core.dll Represents a generic poke. public interface IPoke : IEntity<uint> Inherited Members IEntity<uint>.Id Properties Categories Gets the categories of the poke. IReadOnlyCollection<string> Categories { get; } Property Value IReadOnlyCollection<string> Cooldown Gets how long a user needs to wait before they can use the poke again. TimeSpan Cooldown { get; } Property Value TimeSpan Description Gets the description of the poke. string Description { get; } Property Value string Icon Gets the icon resources of the poke. PokeIcon Icon { get; } Property Value PokeIcon Label Gets the label of the poke. PokeLabel Label { get; } Property Value PokeLabel MessageScenarios Gets how the poke can be used and displayed in message contexts. IReadOnlyDictionary<string, string> MessageScenarios { get; } Property Value IReadOnlyDictionary<string, string> Name Gets the name of the poke. string Name { get; } Property Value string Quality Gets the quality of the poke. PokeQuality Quality { get; } Property Value PokeQuality Resource Gets the resource of the poke. IPokeResource Resource { get; } Property Value IPokeResource"
  },
  "api/Kook.IPokeAction.html": {
    "href": "api/Kook.IPokeAction.html",
    "title": "Interface IPokeAction | Kook.Net 文档",
    "keywords": "Interface IPokeAction Namespace Kook Assembly Kook.Net.Core.dll Represents a single generic poke action. public interface IPokeAction Properties Operator Gets the user who performed the action. IUser Operator { get; } Property Value IUser Poke Gets the poke this action is associated with. IPoke Poke { get; } Property Value IPoke Targets Gets the users who were poked by the action. IReadOnlyCollection<IUser> Targets { get; } Property Value IReadOnlyCollection<IUser>"
  },
  "api/Kook.IPokeResource.html": {
    "href": "api/Kook.IPokeResource.html",
    "title": "Interface IPokeResource | Kook.Net 文档",
    "keywords": "Interface IPokeResource Namespace Kook Assembly Kook.Net.Core.dll Represents a generic poke resource. public interface IPokeResource Properties Type Gets the type of the poke resource. PokeResourceType Type { get; } Property Value PokeResourceType"
  },
  "api/Kook.IPresence.html": {
    "href": "api/Kook.IPresence.html",
    "title": "Interface IPresence | Kook.Net 文档",
    "keywords": "Interface IPresence Namespace Kook Assembly Kook.Net.Core.dll Represents the user's presence status. This may include their online status and their activity. public interface IPresence Properties ActiveClient Gets the type of the client where this user is currently active. ClientType? ActiveClient { get; } Property Value ClientType? IsOnline Gets the current status of this user. bool? IsOnline { get; } Property Value bool?"
  },
  "api/Kook.IPrivateChannel.html": {
    "href": "api/Kook.IPrivateChannel.html",
    "title": "Interface IPrivateChannel | Kook.Net 文档",
    "keywords": "Interface IPrivateChannel Namespace Kook Assembly Kook.Net.Core.dll Represents a generic channel that is private to selected recipients. public interface IPrivateChannel : IChannel, IEntity<ulong> Inherited Members IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties Recipients Gets the users that can access this channel. IReadOnlyCollection<IUser> Recipients { get; } Property Value IReadOnlyCollection<IUser> A read-only collection of users that can access this channel."
  },
  "api/Kook.IQuote.html": {
    "href": "api/Kook.IQuote.html",
    "title": "Interface IQuote | Kook.Net 文档",
    "keywords": "Interface IQuote Namespace Kook Assembly Kook.Net.Core.dll Represents a generic message quote. public interface IQuote Properties QuotedMessageId Gets the identifier of the message this quote refers to. Guid QuotedMessageId { get; } Property Value Guid"
  },
  "api/Kook.IRateLimitInfo.html": {
    "href": "api/Kook.IRateLimitInfo.html",
    "title": "Interface IRateLimitInfo | Kook.Net 文档",
    "keywords": "Interface IRateLimitInfo Namespace Kook Assembly Kook.Net.Core.dll Represents a generic ratelimit info. public interface IRateLimitInfo Properties Bucket Gets a unique string denoting the rate limit being encountered (non-inclusive of major parameters in the route path). string? Bucket { get; } Property Value string Endpoint Gets the endpoint that this ratelimit info came from. string Endpoint { get; } Property Value string IsGlobal Gets whether this ratelimit info is global. bool IsGlobal { get; } Property Value bool Lag Gets the amount of lag for the request. This is used to denote the precise time of when the ratelimit expires. TimeSpan? Lag { get; } Property Value TimeSpan? Limit Gets the number of requests that can be made. int? Limit { get; } Property Value int? Remaining Gets the number of remaining requests that can be made. int? Remaining { get; } Property Value int? ResetAfter Gets the absolute time when this ratelimit resets. TimeSpan? ResetAfter { get; } Property Value TimeSpan?"
  },
  "api/Kook.IReaction.html": {
    "href": "api/Kook.IReaction.html",
    "title": "Interface IReaction | Kook.Net 文档",
    "keywords": "Interface IReaction Namespace Kook Assembly Kook.Net.Core.dll Represents a generic reaction object. public interface IReaction Properties Emote The IEmote used in the reaction. IEmote Emote { get; } Property Value IEmote"
  },
  "api/Kook.IRecommendInfo.html": {
    "href": "api/Kook.IRecommendInfo.html",
    "title": "Interface IRecommendInfo | Kook.Net 文档",
    "keywords": "Interface IRecommendInfo Namespace Kook Assembly Kook.Net.Core.dll Represents a generic recommendation information. public interface IRecommendInfo Properties AuditStatus TODO: To be documented. int AuditStatus { get; } Property Value int Banner Gets the banner URL of the recommended guild. string Banner { get; } Property Value string A string representing the banner URL of the recommended guild. BoostLevel Gets the boost level of the recommended guild. BoostLevel BoostLevel { get; } Property Value BoostLevel A BoostLevel representing the boost level of the recommended guild. Certifications Gets the certifications of the recommended guild. IReadOnlyCollection<GuildCertification>? Certifications { get; } Property Value IReadOnlyCollection<GuildCertification> CustomId TODO: To be documented. string CustomId { get; } Property Value string DaysBeforeModify Gets the number of days need to be waited before the recommendation information can be modified again. int DaysBeforeModify { get; } Property Value int An int representing the number of days need to be waited before the recommendation information can be modified again. DefaultChannelId Gets the default channel ID of the recommended guild. ulong DefaultChannelId { get; } Property Value ulong A ulong representing the default channel ID of the recommended guild. Description Gets the description of the recommended guild. string Description { get; } Property Value string A string representing the description of the recommended guild. Features Gets the features of the recommended guild. GuildFeatures Features { get; } Property Value GuildFeatures GuildId Gets the ID of the recommended guild. ulong GuildId { get; } Property Value ulong A ulong representing the ID of the recommended guild. Icon Gets the icon URL of the recommended guild. string Icon { get; } Property Value string A string representing the icon URL of the recommended guild. IsOfficialPartner Gets whether the recommended guild is an official partner. bool IsOfficialPartner { get; } Property Value bool A bool representing whether the recommended guild is an official partner. Name Gets the name of the recommended guild. string Name { get; } Property Value string A string representing the name of the recommended guild. OpenId Gets the open ID for the recommended guild. uint? OpenId { get; } Property Value uint? Sort TODO: To be documented. int Sort { get; } Property Value int Status Gets the status of the recommended guild. int Status { get; } Property Value int A int representing the status of the recommended guild. Tag Gets the tag of the recommended guild. string Tag { get; } Property Value string A string representing the tag of the recommended guild."
  },
  "api/Kook.IRole.html": {
    "href": "api/Kook.IRole.html",
    "title": "Interface IRole | Kook.Net 文档",
    "keywords": "Interface IRole Namespace Kook Assembly Kook.Net.Core.dll Represents a generic role object to be given to a guild user. public interface IRole : IEntity<uint>, IDeletable, IMentionable, IComparable<IRole> Inherited Members IEntity<uint>.Id IDeletable.DeleteAsync(RequestOptions) IMentionable.PlainTextMention IMentionable.KMarkdownMention IComparable<IRole>.CompareTo(IRole) Properties Color Gets the color given to users of this role. Color Color { get; } Property Value Color A Color struct representing the color of this role. ColorType Gets the type of the color given to users of this role. ColorType ColorType { get; } Property Value ColorType A ColorType struct representing the color type of this role. GradientColor Gets the gradient color given to users of this role. GradientColor? GradientColor { get; } Property Value GradientColor? A GradientColor struct representing the gradient color of this role; null if the role does not have a gradient color. Guild Gets the guild that owns this role. IGuild Guild { get; } Property Value IGuild A guild representing the parent guild of this role. IsHoisted Gets a value that indicates whether the role can be separated in the user list. bool IsHoisted { get; } Property Value bool true if users of this role are separated in the user list; otherwise false. IsMentionable Gets a value that indicates whether the role is mentionable. bool IsMentionable { get; } Property Value bool true if this role may be mentioned in messages; otherwise false. Name Gets the name of this role. string Name { get; } Property Value string A string containing the name of this role. Permissions Gets the permissions granted to members of this role. GuildPermissions Permissions { get; } Property Value GuildPermissions A GuildPermissions struct that this role possesses. Position Gets this role's position relative to other roles in the same guild. int Position { get; } Property Value int An int representing the position of the role in the role list of the guild. Type Gets the type of this role. RoleType Type { get; } Property Value RoleType A RoleType representing the type of this role. Methods GetUsersAsync(CacheMode, RequestOptions?) Gets a collection of users with this role. IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> GetUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> Paged collection of users with this role. ModifyAsync(Action<RoleProperties>, RequestOptions?) Modifies this role. Task ModifyAsync(Action<RoleProperties> func, RequestOptions? options = null) Parameters func Action<RoleProperties> A delegate containing the properties to modify the role with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies this role with the specified properties. To see an example of this method and what properties are available, please refer to RoleProperties."
  },
  "api/Kook.ISelfUser.html": {
    "href": "api/Kook.ISelfUser.html",
    "title": "Interface ISelfUser | Kook.Net 文档",
    "keywords": "Interface ISelfUser Namespace Kook Assembly Kook.Net.Core.dll Represents the logged-in Kook user. public interface ISelfUser : IUser, IEntity<ulong>, IMentionable, IPresence Inherited Members IUser.Username IUser.IdentifyNumber IUser.IdentifyNumberValue IUser.IsBot IUser.IsBanned IUser.HasBuff IUser.HasAnnualBuff IUser.Avatar IUser.BuffAvatar IUser.Banner IUser.IsDenoiseEnabled IUser.UserTag IUser.Nameplates IUser.IsSystemUser IUser.CreateDMChannelAsync(RequestOptions) IUser.GetIntimacyAsync(RequestOptions) IUser.UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) IUser.BlockAsync(RequestOptions) IUser.UnblockAsync(RequestOptions) IUser.RequestFriendAsync(RequestOptions) IUser.RemoveFriendAsync(RequestOptions) IEntity<ulong>.Id IMentionable.PlainTextMention IMentionable.KMarkdownMention IPresence.IsOnline IPresence.ActiveClient Extension Methods Format.UsernameAndIdentifyNumber(IUser, bool) UserExtensions.SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendTextAsync(IUser, string, IQuote?, RequestOptions?) Properties InvitedCount TODO: To be documented. int InvitedCount { get; } Property Value int IsMobileVerified Gets whether the mobile number of the logged-in user is verified. bool IsMobileVerified { get; } Property Value bool Mobile Gets the mobile number of the logged-in user. string? Mobile { get; } Property Value string MobilePrefix Gets the mobile prefix of the logged-in user. string? MobilePrefix { get; } Property Value string Methods StartPlayingAsync(IGame, RequestOptions?) Starts a new game activity. After this operation, a game activity will be displayed on the currently connected user's profile. Task StartPlayingAsync(IGame game, RequestOptions? options = null) Parameters game IGame The game to be played. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for starting a game activity. StartPlayingAsync(Music, RequestOptions?) Starts a new music activity. After this operation, a music activity will be displayed on the currently connected user's profile. Task StartPlayingAsync(Music music, RequestOptions? options = null) Parameters music Music The music being listened to be showed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for starting a music activity. StopPlayingAsync(ActivityType, RequestOptions?) Stops an activity. After this operation, the activity on the currently connected user's profile will disappear. Task StopPlayingAsync(ActivityType type, RequestOptions? options = null) Parameters type ActivityType The type of the activity to stop options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for stopping an activity."
  },
  "api/Kook.ISystemMessage.html": {
    "href": "api/Kook.ISystemMessage.html",
    "title": "Interface ISystemMessage | Kook.Net 文档",
    "keywords": "Interface ISystemMessage Namespace Kook Assembly Kook.Net.Core.dll Represents a generic message sent by the system. public interface ISystemMessage : IMessage, IEntity<Guid>, IDeletable Inherited Members IMessage.Type IMessage.Source IMessage.IsPinned IMessage.Channel IMessage.Author IMessage.Content IMessage.CleanContent IMessage.Timestamp IMessage.EditedTimestamp IMessage.MentionedUserIds IMessage.MentionedRoleIds IMessage.MentionedEveryone IMessage.MentionedHere IMessage.Tags IMessage.Attachments IMessage.Cards IMessage.Embeds IMessage.Pokes IMessage.Reactions IMessage.AddReactionAsync(IEmote, RequestOptions) IMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) IMessage.RemoveReactionAsync(IEmote, ulong, RequestOptions) IMessage.GetReactionUsersAsync(IEmote, RequestOptions) IEntity<Guid>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods MessageExtensions.GetJumpUrl(IMessage) Properties SystemMessageType Gets the type of the system message. SystemMessageType SystemMessageType { get; } Property Value SystemMessageType Remarks warning Because the data from Kook does not describe the type of the message in detail, this property is not implemented yet. Accessing this property will always result in an exception at present."
  },
  "api/Kook.ITag.html": {
    "href": "api/Kook.ITag.html",
    "title": "Interface ITag | Kook.Net 文档",
    "keywords": "Interface ITag Namespace Kook Assembly Kook.Net.Core.dll Gets a generic tag found in messages. public interface ITag Properties Index Gets position of the tag in the message. int Index { get; } Property Value int Key Gets the key of the tag. dynamic Key { get; } Property Value dynamic Length Gets the length of the tag. int Length { get; } Property Value int Type Gets the type of the tag. TagType Type { get; } Property Value TagType Value Gets the value of the tag. object? Value { get; } Property Value object See Also Tags"
  },
  "api/Kook.ITextChannel.html": {
    "href": "api/Kook.ITextChannel.html",
    "title": "Interface ITextChannel | Kook.Net 文档",
    "keywords": "Interface ITextChannel Namespace Kook Assembly Kook.Net.Core.dll Represents a generic channel in a guild that can send and receive messages. public interface ITextChannel : INestedChannel, IGuildChannel, IDeletable, IMentionable, IMessageChannel, IChannel, IEntity<ulong> Inherited Members INestedChannel.CategoryId INestedChannel.IsPermissionSynced INestedChannel.SyncPermissionsAsync(RequestOptions) INestedChannel.GetCategoryAsync(CacheMode, RequestOptions) INestedChannel.GetInvitesAsync(RequestOptions) INestedChannel.CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions) INestedChannel.CreateInviteAsync(int?, int?, RequestOptions) IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.Position IGuildChannel.Type IGuildChannel.CreatorId IGuildChannel.RolePermissionOverwrites IGuildChannel.UserPermissionOverwrites IGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) IGuildChannel.GetCreatorAsync(CacheMode, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IDeletable.DeleteAsync(RequestOptions) IMentionable.PlainTextMention IMentionable.KMarkdownMention IMessageChannel.SendFileAsync(string, string, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(Stream, string, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(FileAttachment, IQuote, IUser, RequestOptions) IMessageChannel.SendTextAsync(string, IQuote, IUser, RequestOptions) IMessageChannel.SendCardAsync(ICard, IQuote, IUser, RequestOptions) IMessageChannel.SendCardsAsync(IEnumerable<ICard>, IQuote, IUser, RequestOptions) IMessageChannel.GetMessageAsync(Guid, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(Guid, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions) IMessageChannel.DeleteMessageAsync(Guid, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) IMessageChannel.ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions) IChannel.Name IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties SlowModeInterval Gets the current slow-mode delay for this channel. int SlowModeInterval { get; } Property Value int An int representing the time in seconds required before the user can send another message; 0 if disabled. Topic Gets the current topic for this text channel. string Topic { get; } Property Value string A string representing the topic set in the channel; null if none is set. Methods GetPinnedMessagesAsync(RequestOptions?) Gets a collection of pinned messages in this channel. Task<IReadOnlyCollection<IMessage>> GetPinnedMessagesAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IMessage>> A task that represents the asynchronous get operation for retrieving pinned messages in this channel. The task result contains a collection of messages found in the pinned messages. ModifyAsync(Action<ModifyTextChannelProperties>, RequestOptions?) Modifies this text channel. Task ModifyAsync(Action<ModifyTextChannelProperties> func, RequestOptions? options = null) Parameters func Action<ModifyTextChannelProperties> The delegate containing the properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. See Also ModifyTextChannelProperties"
  },
  "api/Kook.IUpdateable.html": {
    "href": "api/Kook.IUpdateable.html",
    "title": "Interface IUpdateable | Kook.Net 文档",
    "keywords": "Interface IUpdateable Namespace Kook Assembly Kook.Net.Core.dll Defines whether the object is updateable or not. public interface IUpdateable Methods UpdateAsync(RequestOptions?) Updates this object's properties with its current state. Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents an asynchronous reloading operation. Remarks warning This method will fetch the latest data from REST API, and replace the current object's properties with the new data."
  },
  "api/Kook.IUser.html": {
    "href": "api/Kook.IUser.html",
    "title": "Interface IUser | Kook.Net 文档",
    "keywords": "Interface IUser Namespace Kook Assembly Kook.Net.Core.dll Represents a generic user. public interface IUser : IEntity<ulong>, IMentionable, IPresence Inherited Members IEntity<ulong>.Id IMentionable.PlainTextMention IMentionable.KMarkdownMention IPresence.IsOnline IPresence.ActiveClient Extension Methods Format.UsernameAndIdentifyNumber(IUser, bool) UserExtensions.SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendTextAsync(IUser, string, IQuote?, RequestOptions?) Properties Avatar Gets the link to this user's avatar. string Avatar { get; } Property Value string Banner Gets the link to this user's banner. string? Banner { get; } Property Value string BuffAvatar Gets the link to this user's BUFF avatar. string? BuffAvatar { get; } Property Value string HasAnnualBuff Gets whether this user's BUFF subscription is annual; null if unknown. bool? HasAnnualBuff { get; } Property Value bool? HasBuff Gets whether this user has subscribed to BUFF; null if unknown. bool? HasBuff { get; } Property Value bool? IdentifyNumber Gets the per-username unique ID for this user. string IdentifyNumber { get; } Property Value string IdentifyNumberValue Gets the per-username unique ID for this user. ushort IdentifyNumberValue { get; } Property Value ushort IsBanned Gets whether this user is banned; null if unknown. bool? IsBanned { get; } Property Value bool? IsBot Gets whether this user is a bot; null if unknown. bool? IsBot { get; } Property Value bool? IsDenoiseEnabled Gets whether this user enabled denoise feature; null if unknown. bool? IsDenoiseEnabled { get; } Property Value bool? IsSystemUser Gets whether this user is a system user. bool IsSystemUser { get; } Property Value bool Nameplates Gets the nameplates this user has. IReadOnlyCollection<Nameplate> Nameplates { get; } Property Value IReadOnlyCollection<Nameplate> UserTag Get the tag this user has. UserTag? UserTag { get; } Property Value UserTag Username Gets the username for this user. string Username { get; } Property Value string Methods BlockAsync(RequestOptions?) Gets the friend state with this user. Task BlockAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for getting the friend state. CreateDMChannelAsync(RequestOptions?) Creates the direct message channel of this user. Task<IDMChannel> CreateDMChannelAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IDMChannel> A task that represents the asynchronous operation for getting or creating a DM channel. The task result contains the DM channel associated with this user. Remarks This method is used to obtain or create a channel used to send a direct message. warning In event that the current user cannot send a message to the target user, a channel can and will still be created by Kook. However, attempting to send a message will yield a HttpException with a 403 as its HttpCode. There are currently no official workarounds by Kook. GetIntimacyAsync(RequestOptions?) Gets the intimacy information with this user. Task<IIntimacy> GetIntimacyAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IIntimacy> A task that represents the asynchronous operation for getting the intimacy information. The task result contains the intimacy information associated with this user. RemoveFriendAsync(RequestOptions?) Gets the friend state with this user. Task RemoveFriendAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for getting the friend state. RequestFriendAsync(RequestOptions?) Sends a friend request to this user. Task RequestFriendAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for sending the friend request. UnblockAsync(RequestOptions?) Gets the friend state with this user. Task UnblockAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for getting the friend state. UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions?) Updates the intimacy information with this user. Task UpdateIntimacyAsync(Action<IntimacyProperties> func, RequestOptions? options = null) Parameters func Action<IntimacyProperties> A delegate containing the properties to modify the IIntimacy with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for updating the intimacy information."
  },
  "api/Kook.IUserMessage.html": {
    "href": "api/Kook.IUserMessage.html",
    "title": "Interface IUserMessage | Kook.Net 文档",
    "keywords": "Interface IUserMessage Namespace Kook Assembly Kook.Net.Core.dll Represents a generic message sent by a user. public interface IUserMessage : IMessage, IEntity<Guid>, IDeletable Inherited Members IMessage.Type IMessage.Source IMessage.IsPinned IMessage.Channel IMessage.Author IMessage.Content IMessage.CleanContent IMessage.Timestamp IMessage.EditedTimestamp IMessage.MentionedUserIds IMessage.MentionedRoleIds IMessage.MentionedEveryone IMessage.MentionedHere IMessage.Tags IMessage.Attachments IMessage.Cards IMessage.Embeds IMessage.Pokes IMessage.Reactions IMessage.AddReactionAsync(IEmote, RequestOptions) IMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) IMessage.RemoveReactionAsync(IEmote, ulong, RequestOptions) IMessage.GetReactionUsersAsync(IEmote, RequestOptions) IEntity<Guid>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods MessageExtensions.GetJumpUrl(IMessage) MessageExtensions.HasCharPrefix(IUserMessage, char, ref int) MessageExtensions.HasMentionPrefix(IUserMessage, IUser, ref int) MessageExtensions.HasStringPrefix(IUserMessage, string, ref int, StringComparison) MessageExtensions.TryExpandCardContent(IUserMessage, out string?) MessageExtensions.AddReactionsAsync(IUserMessage, IEnumerable<IEmote>, RequestOptions?) MessageExtensions.MaybeTextImageMixedMessage(IUserMessage) MessageExtensions.RemoveReactionsAsync(IUserMessage, IUser, IEnumerable<IEmote>, RequestOptions?) MessageExtensions.ReplyCardAsync(IUserMessage, ICard, bool, bool, RequestOptions?) MessageExtensions.ReplyCardsAsync(IUserMessage, IEnumerable<ICard>, bool, bool, RequestOptions?) MessageExtensions.ReplyFileAsync(IUserMessage, FileAttachment, bool, bool, RequestOptions?) MessageExtensions.ReplyFileAsync(IUserMessage, Stream, string, AttachmentType, bool, bool, RequestOptions?) MessageExtensions.ReplyFileAsync(IUserMessage, string, string?, AttachmentType, bool, bool, RequestOptions?) MessageExtensions.ReplyTextAsync(IUserMessage, string, bool, bool, RequestOptions?) Properties Quote Gets the message quote. IQuote? Quote { get; } Property Value IQuote The message quote. Methods ModifyAsync(Action<MessageProperties>, RequestOptions?) Modifies this message. Task ModifyAsync(Action<MessageProperties> func, RequestOptions? options = null) Parameters func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties. Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) Transforms this message's text into a human-readable form by resolving its tags. string Resolve(TagHandling userHandling = TagHandling.Name, TagHandling channelHandling = TagHandling.Name, TagHandling roleHandling = TagHandling.Name, TagHandling everyoneHandling = TagHandling.Name, TagHandling emojiHandling = TagHandling.Name) Parameters userHandling TagHandling Determines how the user tag should be handled. channelHandling TagHandling Determines how the channel tag should be handled. roleHandling TagHandling Determines how the role tag should be handled. everyoneHandling TagHandling Determines how the @everyone tag should be handled. emojiHandling TagHandling Determines how the emoji tag should be handled. Returns string"
  },
  "api/Kook.IVoiceChannel.html": {
    "href": "api/Kook.IVoiceChannel.html",
    "title": "Interface IVoiceChannel | Kook.Net 文档",
    "keywords": "Interface IVoiceChannel Namespace Kook Assembly Kook.Net.Core.dll Represents a generic voice channel in a guild. public interface IVoiceChannel : ITextChannel, INestedChannel, IGuildChannel, IDeletable, IMentionable, IMessageChannel, IAudioChannel, IChannel, IEntity<ulong> Inherited Members ITextChannel.Topic ITextChannel.SlowModeInterval ITextChannel.ModifyAsync(Action<ModifyTextChannelProperties>, RequestOptions) ITextChannel.GetPinnedMessagesAsync(RequestOptions) INestedChannel.CategoryId INestedChannel.IsPermissionSynced INestedChannel.SyncPermissionsAsync(RequestOptions) INestedChannel.GetCategoryAsync(CacheMode, RequestOptions) INestedChannel.GetInvitesAsync(RequestOptions) INestedChannel.CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions) INestedChannel.CreateInviteAsync(int?, int?, RequestOptions) IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.Position IGuildChannel.Type IGuildChannel.CreatorId IGuildChannel.RolePermissionOverwrites IGuildChannel.UserPermissionOverwrites IGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) IGuildChannel.GetCreatorAsync(CacheMode, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IDeletable.DeleteAsync(RequestOptions) IMentionable.PlainTextMention IMentionable.KMarkdownMention IMessageChannel.SendFileAsync(string, string, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(Stream, string, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(FileAttachment, IQuote, IUser, RequestOptions) IMessageChannel.SendTextAsync(string, IQuote, IUser, RequestOptions) IMessageChannel.SendCardAsync(ICard, IQuote, IUser, RequestOptions) IMessageChannel.SendCardsAsync(IEnumerable<ICard>, IQuote, IUser, RequestOptions) IMessageChannel.GetMessageAsync(Guid, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(Guid, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions) IMessageChannel.DeleteMessageAsync(Guid, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) IMessageChannel.ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions) IAudioChannel.IsVoiceRegionOverwritten IAudioChannel.VoiceRegion IAudioChannel.ServerUrl IAudioChannel.ConnectAsync(bool, bool, string) IAudioChannel.DisconnectAsync() IChannel.Name IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties HasPassword Gets whether this voice channel is locked by a password. bool HasPassword { get; } Property Value bool A bool representing whether this voice channel is locked by a password. UserLimit Gets the max number of users allowed to be connected to this channel at once. int UserLimit { get; } Property Value int An int representing the maximum number of users that are allowed to be connected to this channel at once; 0 if a limit is not set. VoiceQuality Gets the voice quality that the clients in this voice channel are requested to use. VoiceQuality? VoiceQuality { get; } Property Value VoiceQuality? A VoiceQuality representing the voice quality that this voice channel defines and requests the client(s) to use. Methods GetConnectedUsersAsync(CacheMode, RequestOptions?) Gets the users connected to this voice channel. Task<IReadOnlyCollection<IUser>> GetConnectedUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IUser>> A task that represents the asynchronous get operation. The task result contains a collection of IGuildUsers that are connected to this voice channel. ModifyAsync(Action<ModifyVoiceChannelProperties>, RequestOptions?) Modifies this voice channel. Task ModifyAsync(Action<ModifyVoiceChannelProperties> func, RequestOptions? options = null) Parameters func Action<ModifyVoiceChannelProperties> The properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. See Also ModifyVoiceChannelProperties"
  },
  "api/Kook.IVoiceRegion.html": {
    "href": "api/Kook.IVoiceRegion.html",
    "title": "Interface IVoiceRegion | Kook.Net 文档",
    "keywords": "Interface IVoiceRegion Namespace Kook Assembly Kook.Net.Experimental.dll Represents a region of which the user connects to when using voice. public interface IVoiceRegion Remarks warning This entity is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future. Properties Crowding Gets the crowding of this voice region. decimal Crowding { get; } Property Value decimal A decimal between 0.0 and 1.0 that represents the crowding of this voice region. Id Gets the unique identifier for this voice region. string Id { get; } Property Value string A string that represents the identifier for this voice region (e.g. eu-central). MinimumBoostLevel Gets the minimum boost level required to use this voice region. BoostLevel MinimumBoostLevel { get; } Property Value BoostLevel A BoostLevel that represents the minimum boost level required to use this voice region. Name Gets the name of this voice region. string Name { get; } Property Value string A string that represents the human-readable name of this voice region (e.g. Central Europe)."
  },
  "api/Kook.IVoiceState.html": {
    "href": "api/Kook.IVoiceState.html",
    "title": "Interface IVoiceState | Kook.Net 文档",
    "keywords": "Interface IVoiceState Namespace Kook Assembly Kook.Net.Core.dll Represents a user's voice connection status. public interface IVoiceState Properties IsDeafened Gets a value that indicates whether this user is deafened by the guild. bool? IsDeafened { get; } Property Value bool? true if the user is deafened (i.e. not permitted to listen to or speak to others) by the guild; otherwise false; null if unknown. IsMuted Gets a value that indicates whether this user is muted (i.e. not permitted to speak via voice) by the guild. bool? IsMuted { get; } Property Value bool? true if this user is muted by the guild; otherwise false; null if unknown. VoiceChannel Gets the voice channel this user is currently in. IVoiceChannel? VoiceChannel { get; } Property Value IVoiceChannel A generic voice channel object representing the voice channel that the user is currently in; null if none."
  },
  "api/Kook.Image.html": {
    "href": "api/Kook.Image.html",
    "title": "Struct Image | Kook.Net 文档",
    "keywords": "Struct Image Namespace Kook Assembly Kook.Net.Core.dll An image that will be uploaded to Kook. public struct Image : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Image(Stream) Create the image with a Stream. public Image(Stream stream) Parameters stream Stream The Stream to create the image with. Note that this must be some type of stream with the contents of a file in it. Image(string) Create the image from a file path. public Image(string path) Parameters path string The path to the file. Remarks This file path is NOT validated and is passed directly into a OpenRead(string). Exceptions ArgumentException path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by GetInvalidPathChars(). ArgumentNullException path is null. PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. NotSupportedException path is in an invalid format. DirectoryNotFoundException The specified path is invalid, (for example, it is on an unmapped drive). UnauthorizedAccessException path specified a directory.-or- The caller does not have the required permission. FileNotFoundException The file specified in path was not found. IOException An I/O error occurred while opening the file. Properties Stream Gets the stream to be uploaded to Kook. public readonly Stream Stream { get; } Property Value Stream Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/Kook.ImageAnimationPokeResource.html": {
    "href": "api/Kook.ImageAnimationPokeResource.html",
    "title": "Struct ImageAnimationPokeResource | Kook.Net 文档",
    "keywords": "Struct ImageAnimationPokeResource Namespace Kook Assembly Kook.Net.Core.dll Represents an image animation poke resource. public struct ImageAnimationPokeResource : IPokeResource Implements IPokeResource Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Duration Gets how long this animation should last filling the full screen. public readonly TimeSpan Duration { get; } Property Value TimeSpan Height Gets the height of the image animation. public readonly int Height { get; } Property Value int Percent // TODO: To be documented. public readonly decimal Percent { get; } Property Value decimal Resources Gets the resources of the image animation. public readonly IReadOnlyDictionary<string, string> Resources { get; } Property Value IReadOnlyDictionary<string, string> Type Gets the type of the poke resource. public PokeResourceType Type { get; } Property Value PokeResourceType Width Gets the width of the image animation. public readonly int Width { get; } Property Value int"
  },
  "api/Kook.ImageElement.html": {
    "href": "api/Kook.ImageElement.html",
    "title": "Class ImageElement | Kook.Net 文档",
    "keywords": "Class ImageElement Namespace Kook Assembly Kook.Net.Core.dll An image element that can be used in an IModule. public class ImageElement : IElement, IEquatable<ImageElement>, IEquatable<IElement> Inheritance object ImageElement Implements IElement IEquatable<ImageElement> IEquatable<IElement> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(IElement) CardExtensions.ToBuilder(ImageElement) Properties Alternative Gets the alternative text of the image. public string? Alternative { get; } Property Value string A string that represents the alternative text of the image. Circle Gets a value indicating whether the image should be rendered as a circle. public bool? Circle { get; } Property Value bool? true if the image should be rendered as a circle; otherwise, false; or null if whether the image should be rendered as a circle is not specified. Size Gets the size of the image. public ImageSize? Size { get; } Property Value ImageSize? An ImageSize that represents the size of the image; or null if the size is not specified. Source Gets the source of the image. public string Source { get; } Property Value string A string that represents the source of the image. Type Gets the type of the element. public ElementType Type { get; } Property Value ElementType An ElementType value that represents the theme of the button. Methods Equals(ImageElement?) Determines whether the specified ImageElement is equal to the current ImageElement. public bool Equals(ImageElement? imageElement) Parameters imageElement ImageElement The ImageElement to compare with the current ImageElement. Returns bool true if the specified ImageElement is equal to the current ImageElement; otherwise, false. Equals(object?) Determines whether the specified ImageElement is equal to the current ImageElement. public override bool Equals(object? obj) Parameters obj object The object to compare with the current ImageElement. Returns bool true if the specified ImageElement is equal to the current ImageElement; otherwise, false. Remarks If the object passes is an ImageElement, Equals(ImageElement?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ImageElement?, ImageElement?) Determines whether the specified ImageElement is equal to the current ImageElement. public static bool operator ==(ImageElement? left, ImageElement? right) Parameters left ImageElement right ImageElement Returns bool true if the specified ImageElement is equal to the current ImageElement; otherwise, false. operator !=(ImageElement?, ImageElement?) Determines whether the specified ImageElement is not equal to the current ImageElement. public static bool operator !=(ImageElement? left, ImageElement? right) Parameters left ImageElement right ImageElement Returns bool true if the specified ImageElement is not equal to the current ImageElement; otherwise, false."
  },
  "api/Kook.ImageElementBuilder.html": {
    "href": "api/Kook.ImageElementBuilder.html",
    "title": "Class ImageElementBuilder | Kook.Net 文档",
    "keywords": "Class ImageElementBuilder Namespace Kook Assembly Kook.Net.Core.dll An element builder to build an ImageElement. public class ImageElementBuilder : IElementBuilder, IEquatable<ImageElementBuilder>, IEquatable<IElementBuilder> Inheritance object ImageElementBuilder Implements IElementBuilder IEquatable<ImageElementBuilder> IEquatable<IElementBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ImageElementBuilder() Initialized a new instance of the ImageElementBuilder class. public ImageElementBuilder() ImageElementBuilder(string, string?, ImageSize, bool) Initialized a new instance of the ImageElementBuilder class. public ImageElementBuilder(string source, string? alternative = null, ImageSize size = ImageSize.Small, bool circle = false) Parameters source string The source of the image. alternative string The alternative text of the image. size ImageSize The size of the image. circle bool Whether the image should be rendered as a circle. Fields MaxAlternativeLength Gets the maximum image alternative text length allowed by Kook. public const int MaxAlternativeLength = 20 Field Value int Properties Alternative Gets or sets the alternative text of an ImageElementBuilder. public string? Alternative { get; set; } Property Value string A string that represents the alternative text of the ImageElementBuilder. Circle Gets or sets whether the image should be rendered as a circle. public bool? Circle { get; set; } Property Value bool? true if the image should be rendered as a circle; otherwise, false; or null if whether the image should be rendered as a circle is not specified. Size Gets or sets the size of the image of an ImageElementBuilder. public ImageSize? Size { get; set; } Property Value ImageSize? An ImageSize that represents the size of the image of the ImageElementBuilder; null if the size is not specified. Source Gets or sets the source of an ImageElementBuilder. public string? Source { get; set; } Property Value string A string that represents the source of the ImageElementBuilder. Type Gets the type of the element that this builder builds. public ElementType Type { get; } Property Value ElementType An ElementType that represents the type of element that this builder builds. Methods Build() Builds the ImageElementBuilder into an ImageElement. public ImageElement Build() Returns ImageElement An ImageElement represents the built element object. Exceptions ArgumentNullException The Source url is null. ArgumentException The Source url is empty. InvalidOperationException The Source url does not include a protocol (either HTTP or HTTPS). ArgumentException The length of Alternative is greater than MaxAlternativeLength. Equals(ImageElementBuilder?) Determines whether the specified ImageElementBuilder is equal to the current ImageElementBuilder. public bool Equals(ImageElementBuilder? imageElementBuilder) Parameters imageElementBuilder ImageElementBuilder The ImageElementBuilder to compare with the current ImageElementBuilder. Returns bool true if the specified ImageElementBuilder is equal to the current ImageElementBuilder; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current ImageElementBuilder. public override bool Equals(object? obj) Parameters obj object The object to compare with the current ImageElementBuilder. Returns bool true if the specified object is equal to the current ImageElementBuilder; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithAlternative(string?) Sets the alternative text of an ImageElementBuilder. public ImageElementBuilder WithAlternative(string? alternative) Parameters alternative string The alternative text to be set. Returns ImageElementBuilder The current builder. WithCircle(bool?) Sets whether the image should be rendered as a circle. public ImageElementBuilder WithCircle(bool? circle) Parameters circle bool? true if the image should be rendered as a circle; otherwise, false. Returns ImageElementBuilder The current builder. WithSize(ImageSize?) Sets the size of the image of an ImageElementBuilder. public ImageElementBuilder WithSize(ImageSize? size) Parameters size ImageSize? The size to be set. Returns ImageElementBuilder The current builder. WithSource(string?) Sets the source of an ImageElementBuilder. public ImageElementBuilder WithSource(string? source) Parameters source string The source to be set. Returns ImageElementBuilder The current builder. Operators operator ==(ImageElementBuilder?, ImageElementBuilder?) Determines whether the specified ImageElementBuilder is equal to the current ImageElementBuilder. public static bool operator ==(ImageElementBuilder? left, ImageElementBuilder? right) Parameters left ImageElementBuilder right ImageElementBuilder Returns bool true if the specified ImageElementBuilder is equal to the current ImageElementBuilder; otherwise, false. implicit operator ImageElementBuilder(string) Initialized a new instance of the ImageElementBuilder class with the specified content. public static implicit operator ImageElementBuilder(string source) Parameters source string The content of the ImageElement. Returns ImageElementBuilder An ImageElementBuilder object that is initialized with the specified image source. operator !=(ImageElementBuilder?, ImageElementBuilder?) Determines whether the specified ImageElementBuilder is not equal to the current ImageElementBuilder. public static bool operator !=(ImageElementBuilder? left, ImageElementBuilder? right) Parameters left ImageElementBuilder right ImageElementBuilder Returns bool true if the specified ImageElementBuilder is not equal to the current ImageElementBuilder; otherwise, false."
  },
  "api/Kook.ImageEmbed.html": {
    "href": "api/Kook.ImageEmbed.html",
    "title": "Struct ImageEmbed | Kook.Net 文档",
    "keywords": "Struct ImageEmbed Namespace Kook Assembly Kook.Net.Core.dll Represents an image embed. public struct ImageEmbed : IEmbed Implements IEmbed Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties OriginUrl Gets the original URL of the image. public readonly string OriginUrl { get; } Property Value string A string representing the original URL of the image. Type Gets the type of this embed. public EmbedType Type { get; } Property Value EmbedType A EmbedType that represents the type of this embed. Url Gets the URL of this embed. public readonly string Url { get; } Property Value string A string that represents the URL of this embed."
  },
  "api/Kook.ImageGroupModule.html": {
    "href": "api/Kook.ImageGroupModule.html",
    "title": "Class ImageGroupModule | Kook.Net 文档",
    "keywords": "Class ImageGroupModule Namespace Kook Assembly Kook.Net.Core.dll Represents an image group module that can be used in an ICard. public class ImageGroupModule : IModule, IEquatable<ImageGroupModule>, IEquatable<IModule> Inheritance object ImageGroupModule Implements IModule IEquatable<ImageGroupModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(IModule) CardExtensions.ToBuilder(ImageGroupModule) Properties Elements Gets the image elements in this image group module. public ImmutableArray<ImageElement> Elements { get; } Property Value ImmutableArray<ImageElement> An ImmutableArray<T> representing the images in this image group module. Type Gets the type of the module. public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Methods Equals(ImageGroupModule?) Determines whether the specified ImageGroupModule is equal to the current ImageGroupModule. public bool Equals(ImageGroupModule? imageGroupModule) Parameters imageGroupModule ImageGroupModule The ImageGroupModule to compare with the current ImageGroupModule. Returns bool true if the specified ImageGroupModule is equal to the current ImageGroupModule; otherwise, false. Equals(object?) Determines whether the specified ImageGroupModule is equal to the current ImageGroupModule. public override bool Equals(object? obj) Parameters obj object The object to compare with the current ImageGroupModule. Returns bool true if the specified ImageGroupModule is equal to the current ImageGroupModule; otherwise, false. Remarks If the object passes is an ImageGroupModule, Equals(ImageGroupModule?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ImageGroupModule, ImageGroupModule) Determines whether the specified ImageGroupModule is equal to the current ImageGroupModule. public static bool operator ==(ImageGroupModule left, ImageGroupModule right) Parameters left ImageGroupModule right ImageGroupModule Returns bool true if the specified ImageGroupModule is equal to the current ImageGroupModule; operator !=(ImageGroupModule, ImageGroupModule) Determines whether the specified ImageGroupModule is not equal to the current ImageGroupModule. public static bool operator !=(ImageGroupModule left, ImageGroupModule right) Parameters left ImageGroupModule right ImageGroupModule Returns bool true if the specified ImageGroupModule is not equal to the current ImageGroupModule;"
  },
  "api/Kook.ImageGroupModuleBuilder.html": {
    "href": "api/Kook.ImageGroupModuleBuilder.html",
    "title": "Class ImageGroupModuleBuilder | Kook.Net 文档",
    "keywords": "Class ImageGroupModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll Representing an image group module builder for create an ImageGroupModule. public class ImageGroupModuleBuilder : IModuleBuilder, IEquatable<ImageGroupModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object ImageGroupModuleBuilder Implements IModuleBuilder IEquatable<ImageGroupModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ImageGroupModuleBuilder() Initializes a new instance of the ImageGroupModuleBuilder class. public ImageGroupModuleBuilder() ImageGroupModuleBuilder(IList<ImageElementBuilder>) Initializes a new instance of the ImageGroupModuleBuilder class. public ImageGroupModuleBuilder(IList<ImageElementBuilder> elements) Parameters elements IList<ImageElementBuilder> Fields MaxElementCount Returns the maximum number of elements allowed by Kook. public const int MaxElementCount = 9 Field Value int Properties Elements Gets or sets the elements of the image group. public IList<ImageElementBuilder> Elements { get; set; } Property Value IList<ImageElementBuilder> An ImageElementBuilder containing the elements of the image group. Exceptions ArgumentException The addition operation would cause the number of elements to exceed MaxElementCount. Type Specifies the module type of the IModule this builder creates. public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Methods AddElement(ImageElementBuilder) Adds an image element to the image group. public ImageGroupModuleBuilder AddElement(ImageElementBuilder field) Parameters field ImageElementBuilder The image element to add. Returns ImageGroupModuleBuilder The current builder. Exceptions ArgumentException The addition operation would cause the number of elements to exceed MaxElementCount. AddElement(Action<ImageElementBuilder>) Adds an image element to the image group. public ImageGroupModuleBuilder AddElement(Action<ImageElementBuilder> action) Parameters action Action<ImageElementBuilder> The action to add an image element to the image group. Returns ImageGroupModuleBuilder The current builder. Exceptions ArgumentException The addition operation would cause the number of elements to exceed MaxElementCount. Build() Builds this builder into an ImageGroupModule. public ImageGroupModule Build() Returns ImageGroupModule An ImageGroupModule representing the built image group module object. Exceptions ArgumentNullException The Elements is null. ArgumentException The Elements is an empty list. ArgumentException Element count is greater than MaxElementCount. Equals(ImageGroupModuleBuilder?) Determines whether the specified ImageGroupModuleBuilder is equal to the current ImageGroupModuleBuilder. public bool Equals(ImageGroupModuleBuilder? imageGroupModuleBuilder) Parameters imageGroupModuleBuilder ImageGroupModuleBuilder The ImageGroupModuleBuilder to compare with the current ImageGroupModuleBuilder. Returns bool true if the specified ImageGroupModuleBuilder is equal to the current ImageGroupModuleBuilder; otherwise, false. Equals(object?) Determines whether the specified ImageGroupModuleBuilder is equal to the current ImageGroupModuleBuilder. public override bool Equals(object? obj) Parameters obj object The object to compare with the current ImageGroupModuleBuilder. Returns bool true if the specified ImageGroupModuleBuilder is equal to the current ImageGroupModuleBuilder; otherwise, false. Remarks If the object passes is an ImageGroupModuleBuilder, Equals(ImageGroupModuleBuilder?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ImageGroupModuleBuilder?, ImageGroupModuleBuilder?) Determines whether the specified ImageGroupModuleBuilder is equal to the current ImageGroupModuleBuilder. public static bool operator ==(ImageGroupModuleBuilder? left, ImageGroupModuleBuilder? right) Parameters left ImageGroupModuleBuilder right ImageGroupModuleBuilder Returns bool true if the specified ImageGroupModuleBuilder is equal to the current ImageGroupModuleBuilder; otherwise, false. operator !=(ImageGroupModuleBuilder?, ImageGroupModuleBuilder?) Determines whether the specified ImageGroupModuleBuilder is not equal to the current ImageGroupModuleBuilder. public static bool operator !=(ImageGroupModuleBuilder? left, ImageGroupModuleBuilder? right) Parameters left ImageGroupModuleBuilder right ImageGroupModuleBuilder Returns bool true if the specified ImageGroupModuleBuilder is not equal to the current ImageGroupModuleBuilder; otherwise, false."
  },
  "api/Kook.ImageSize.html": {
    "href": "api/Kook.ImageSize.html",
    "title": "Enum ImageSize | Kook.Net 文档",
    "keywords": "Enum ImageSize Namespace Kook Assembly Kook.Net.Core.dll Specifies the size of the image in ImageElement. public enum ImageSize Fields Large = 1 The image is displayed at large size. Small = 0 The image is displayed at small size."
  },
  "api/Kook.IntimacyImage.html": {
    "href": "api/Kook.IntimacyImage.html",
    "title": "Class IntimacyImage | Kook.Net 文档",
    "keywords": "Class IntimacyImage Namespace Kook Assembly Kook.Net.Core.dll Represents a single image of an intimacy. public class IntimacyImage Inheritance object IntimacyImage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id Gets the ID of the image of an intimacy. public uint Id { get; } Property Value uint An int representing the ID of the image of an intimacy. Url Gets the URL of the image of an intimacy. public string Url { get; } Property Value string A string representing the URL of the image of an intimacy."
  },
  "api/Kook.IntimacyProperties.html": {
    "href": "api/Kook.IntimacyProperties.html",
    "title": "Class IntimacyProperties | Kook.Net 文档",
    "keywords": "Class IntimacyProperties Namespace Kook Assembly Kook.Net.Core.dll Properties that are used to modify an IIntimacy with the specified changes. public class IntimacyProperties Inheritance object IntimacyProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ImageId The ID of the image to be updated on the IIntimacy. public uint? ImageId { get; set; } Property Value uint? Score The score to be set on the IIntimacy. public int Score { get; set; } Property Value int SocialInfo The social information to be set on the IIntimacy. public string SocialInfo { get; set; } Property Value string See Also UpdateAsync(Action<IntimacyProperties>, RequestOptions)"
  },
  "api/Kook.InviteMaxAge.html": {
    "href": "api/Kook.InviteMaxAge.html",
    "title": "Enum InviteMaxAge | Kook.Net 文档",
    "keywords": "Enum InviteMaxAge Namespace Kook Assembly Kook.Net.Core.dll Specifies the time in second after which an IInvite will be expired. public enum InviteMaxAge Fields NeverExpires = 0 The invite will never expire. _1800 = 1800 The invite will expire after half an hour (1800 seconds). _21600 = 21600 The invite will expire after 6 hours (21600 seconds). _3600 = 3600 The invite will expire after one hour (3600 seconds). _43200 = 43200 The invite will expire after half a day (43200 seconds). _604800 = 604800 The invite will expire after one week (604800 seconds). _86400 = 86400 The invite will expire after one day (86400 seconds)."
  },
  "api/Kook.InviteMaxUses.html": {
    "href": "api/Kook.InviteMaxUses.html",
    "title": "Enum InviteMaxUses | Kook.Net 文档",
    "keywords": "Enum InviteMaxUses Namespace Kook Assembly Kook.Net.Core.dll Specifies the number of uses after which an IInvite will be expired. public enum InviteMaxUses Fields Unlimited = -1 This IInvite can be used for unlimited times. _1 = 1 This IInvite can be used only once. _10 = 10 This IInvite can be used for 10 times. _100 = 100 This IInvite can be used for 100 times. _25 = 25 This IInvite can be used for 25 times. _5 = 5 This IInvite can be used for 5 times. _50 = 50 This IInvite can be used for 50 times."
  },
  "api/Kook.InviteModule.html": {
    "href": "api/Kook.InviteModule.html",
    "title": "Class InviteModule | Kook.Net 文档",
    "keywords": "Class InviteModule Namespace Kook Assembly Kook.Net.Core.dll An invite module that can be used in an ICard. public class InviteModule : IModule, IEquatable<InviteModule>, IEquatable<IModule> Inheritance object InviteModule Implements IModule IEquatable<InviteModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(IModule) CardExtensions.ToBuilder(InviteModule) Properties Code Gets the invite code. public string? Code { get; } Property Value string Type Gets the type of the module. public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Methods Equals(InviteModule?) Determines whether the specified InviteModule is equal to the current InviteModule. public bool Equals(InviteModule? inviteModule) Parameters inviteModule InviteModule The InviteModule to compare with the current InviteModule. Returns bool true if the specified InviteModule is equal to the current InviteModule; otherwise, false. Equals(object?) Determines whether the specified InviteModule is equal to the current InviteModule. public override bool Equals(object? obj) Parameters obj object The object to compare with the current InviteModule. Returns bool true if the specified InviteModule is equal to the current InviteModule; otherwise, false. Remarks If the object passes is an InviteModule, Equals(InviteModule?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(InviteModule, InviteModule) Determines whether the specified InviteModule is equal to the current InviteModule. public static bool operator ==(InviteModule left, InviteModule right) Parameters left InviteModule right InviteModule Returns bool true if the specified InviteModule is equal to the current InviteModule; operator !=(InviteModule, InviteModule) Determines whether the specified InviteModule is not equal to the current InviteModule. public static bool operator !=(InviteModule left, InviteModule right) Parameters left InviteModule right InviteModule Returns bool true if the specified InviteModule is not equal to the current InviteModule;"
  },
  "api/Kook.InviteModuleBuilder.html": {
    "href": "api/Kook.InviteModuleBuilder.html",
    "title": "Class InviteModuleBuilder | Kook.Net 文档",
    "keywords": "Class InviteModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll Represents a invite module builder for creating an InviteModule. public class InviteModuleBuilder : IModuleBuilder, IEquatable<InviteModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object InviteModuleBuilder Implements IModuleBuilder IEquatable<InviteModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InviteModuleBuilder() Initializes a new instance of the InviteModuleBuilder class. public InviteModuleBuilder() InviteModuleBuilder(string) Initializes a new instance of the InviteModuleBuilder class. public InviteModuleBuilder(string code) Parameters code string Properties Code Gets or sets the code of the invite. public string? Code { get; set; } Property Value string A string representing the code of the invite. Type Specifies the module type of the IModule this builder creates. public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Methods Build() Builds this builder into an InviteModule. public InviteModule Build() Returns InviteModule An InviteModule representing the built invite module object. Exceptions ArgumentNullException The Code is null. ArgumentException The Code is empty or whitespace. Equals(InviteModuleBuilder?) Determines whether the specified InviteModuleBuilder is equal to the current InviteModuleBuilder. public bool Equals(InviteModuleBuilder? inviteModuleBuilder) Parameters inviteModuleBuilder InviteModuleBuilder The InviteModuleBuilder to compare with the current InviteModuleBuilder. Returns bool true if the specified InviteModuleBuilder is equal to the current InviteModuleBuilder; otherwise, false. Equals(object?) Determines whether the specified InviteModuleBuilder is equal to the current InviteModuleBuilder. public override bool Equals(object? obj) Parameters obj object The object to compare with the current InviteModuleBuilder. Returns bool true if the specified InviteModuleBuilder is equal to the current InviteModuleBuilder; otherwise, false. Remarks If the object passes is an InviteModuleBuilder, Equals(InviteModuleBuilder?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithCode(string) Sets the code of the invite. public InviteModuleBuilder WithCode(string code) Parameters code string The code of the invite to be set. Returns InviteModuleBuilder The current builder. Operators operator ==(InviteModuleBuilder?, InviteModuleBuilder?) Determines whether the specified InviteModuleBuilder is equal to the current InviteModuleBuilder. public static bool operator ==(InviteModuleBuilder? left, InviteModuleBuilder? right) Parameters left InviteModuleBuilder right InviteModuleBuilder Returns bool true if the specified InviteModuleBuilder is equal to the current InviteModuleBuilder; otherwise, false. implicit operator InviteModuleBuilder(string) Initialized a new instance of the InviteModuleBuilder class with the specified code. public static implicit operator InviteModuleBuilder(string code) Parameters code string The code representing the invite. Returns InviteModuleBuilder An InviteModuleBuilder object that is initialized with the specified code. operator !=(InviteModuleBuilder?, InviteModuleBuilder?) Determines whether the specified InviteModuleBuilder is not equal to the current InviteModuleBuilder. public static bool operator !=(InviteModuleBuilder? left, InviteModuleBuilder? right) Parameters left InviteModuleBuilder right InviteModuleBuilder Returns bool true if the specified InviteModuleBuilder is not equal to the current InviteModuleBuilder; otherwise, false."
  },
  "api/Kook.KMarkdownElement.html": {
    "href": "api/Kook.KMarkdownElement.html",
    "title": "Class KMarkdownElement | Kook.Net 文档",
    "keywords": "Class KMarkdownElement Namespace Kook Assembly Kook.Net.Core.dll A KMarkdown element that can be used in an IModule. public class KMarkdownElement : IElement, IEquatable<KMarkdownElement>, IEquatable<IElement> Inheritance object KMarkdownElement Implements IElement IEquatable<KMarkdownElement> IEquatable<IElement> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CardExtensions.ToBuilder(IElement) CardExtensions.ToBuilder(KMarkdownElement) Properties Content Gets the KMarkdown content of the element. public string Content { get; } Property Value string A string that represents the KMarkdown content of the element. Type Gets the type of the element. public ElementType Type { get; } Property Value ElementType An ElementType value that represents the theme of the button. Methods Equals(KMarkdownElement?) Determines whether the specified KMarkdownElement is equal to the current KMarkdownElement. public bool Equals(KMarkdownElement? kMarkdownElement) Parameters kMarkdownElement KMarkdownElement The KMarkdownElement to compare with the current KMarkdownElement. Returns bool true if the specified KMarkdownElement is equal to the current KMarkdownElement; otherwise, false. Equals(object?) Determines whether the specified KMarkdownElement is equal to the current KMarkdownElement. public override bool Equals(object? obj) Parameters obj object The object to compare with the current KMarkdownElement. Returns bool true if the specified KMarkdownElement is equal to the current KMarkdownElement; otherwise, false. Remarks If the object passes is an KMarkdownElement, Equals(KMarkdownElement?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators operator ==(KMarkdownElement?, KMarkdownElement?) Determines whether the specified KMarkdownElement is equal to the current KMarkdownElement. public static bool operator ==(KMarkdownElement? left, KMarkdownElement? right) Parameters left KMarkdownElement right KMarkdownElement Returns bool true if the specified KMarkdownElement is equal to the current KMarkdownElement; otherwise, false. operator !=(KMarkdownElement?, KMarkdownElement?) Determines whether the specified KMarkdownElement is not equal to the current KMarkdownElement. public static bool operator !=(KMarkdownElement? left, KMarkdownElement? right) Parameters left KMarkdownElement right KMarkdownElement Returns bool true if the specified KMarkdownElement is not equal to the current KMarkdownElement; otherwise, false."
  },
  "api/Kook.KMarkdownElementBuilder.html": {
    "href": "api/Kook.KMarkdownElementBuilder.html",
    "title": "Class KMarkdownElementBuilder | Kook.Net 文档",
    "keywords": "Class KMarkdownElementBuilder Namespace Kook Assembly Kook.Net.Core.dll An element builder to build a KMarkdownElement. public class KMarkdownElementBuilder : IElementBuilder, IEquatable<KMarkdownElementBuilder>, IEquatable<IElementBuilder> Inheritance object KMarkdownElementBuilder Implements IElementBuilder IEquatable<KMarkdownElementBuilder> IEquatable<IElementBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors KMarkdownElementBuilder() Initializes a new instance of the KMarkdownElementBuilder class. public KMarkdownElementBuilder() KMarkdownElementBuilder(string?) Initializes a new instance of the KMarkdownElementBuilder class. public KMarkdownElementBuilder(string? content) Parameters content string Fields MaxKMarkdownLength Gets the maximum KMarkdown length allowed by Kook. public const int MaxKMarkdownLength = 5000 Field Value int Properties Content Gets or sets the content of a KMarkdownElementBuilder. public string? Content { get; set; } Property Value string The content of the KMarkdownElementBuilder. Type Gets the type of the element that this builder builds. public ElementType Type { get; } Property Value ElementType An ElementType that represents the type of element that this builder builds. Methods Build() Builds the KMarkdownElementBuilder into a KMarkdownElement. public KMarkdownElement Build() Returns KMarkdownElement A KMarkdownElement represents the built element object. Exceptions ArgumentNullException The Content is null. ArgumentException The length of Content is greater than MaxKMarkdownLength. Equals(KMarkdownElementBuilder?) Determines whether the specified KMarkdownElementBuilder is equal to the current KMarkdownElementBuilder. public bool Equals(KMarkdownElementBuilder? kMarkdownElementBuilder) Parameters kMarkdownElementBuilder KMarkdownElementBuilder The KMarkdownElementBuilder to compare with the current KMarkdownElementBuilder. Returns bool true if the specified KMarkdownElementBuilder is equal to the current KMarkdownElementBuilder; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current KMarkdownElementBuilder. public override bool Equals(object? obj) Parameters obj object The object to compare with the current KMarkdownElementBuilder. Returns bool true if the specified object is equal to the current KMarkdownElementBuilder; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithContent(string) Sets the content of a KMarkdownElementBuilder. public KMarkdownElementBuilder WithContent(string content) Parameters content string The text to be set as the content. Returns KMarkdownElementBuilder The current builder. Operators operator ==(KMarkdownElementBuilder?, KMarkdownElementBuilder?) Determines whether the specified KMarkdownElementBuilder is equal to the current KMarkdownElementBuilder. public static bool operator ==(KMarkdownElementBuilder? left, KMarkdownElementBuilder? right) Parameters left KMarkdownElementBuilder right KMarkdownElementBuilder Returns bool true if the specified KMarkdownElementBuilder is equal to the current KMarkdownElementBuilder; otherwise, false. implicit operator KMarkdownElementBuilder(string) Initialized a new instance of the KMarkdownElementBuilder class with the specified content. public static implicit operator KMarkdownElementBuilder(string content) Parameters content string The content of the KMarkdownElement. Returns KMarkdownElementBuilder A KMarkdownElementBuilder object that is initialized with the specified content. operator !=(KMarkdownElementBuilder?, KMarkdownElementBuilder?) Determines whether the specified KMarkdownElementBuilder is not equal to the current KMarkdownElementBuilder. public static bool operator !=(KMarkdownElementBuilder? left, KMarkdownElementBuilder? right) Parameters left KMarkdownElementBuilder right KMarkdownElementBuilder Returns bool true if the specified KMarkdownElementBuilder is not equal to the current KMarkdownElementBuilder; otherwise, false."
  },
  "api/Kook.KookConfig.html": {
    "href": "api/Kook.KookConfig.html",
    "title": "Class KookConfig | Kook.Net 文档",
    "keywords": "Class KookConfig Namespace Kook Assembly Kook.Net.Core.dll Defines various behaviors of Kook.Net. public class KookConfig Inheritance object KookConfig Derived KookRestConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields APIUrl Returns the base Kook API URL. public static readonly string APIUrl Field Value string The Kook API URL using APIVersion. APIVersion Returns the API version Kook.Net uses. public const int APIVersion = 3 Field Value int An int representing the API version that Kook.Net uses to communicate with Kook. A list of available API version can be seen on the official Kook API documentation . BoostPackDuration Returns the duration of a Kook boost pack. public static readonly TimeSpan BoostPackDuration Field Value TimeSpan DefaultRequestTimeout Returns the default timeout for requests. public const int DefaultRequestTimeout = 6000 Field Value int The amount of time it takes in milliseconds before a request is timed out. MaxIntimacyScore Returns the max value for a Kook intimacy score. public const int MaxIntimacyScore = 2200 Field Value int The maximum value of an intimacy score allowed by Kook. MaxItemsPerBatchByDefault Returns the max items allowed to be in a request by default. public const int MaxItemsPerBatchByDefault = 100 Field Value int The maximum number of items that can be gotten per-batch by default. MaxMessageSize Returns the max length for a Kook message. public const int MaxMessageSize = 20000 Field Value int The maximum length of a message allowed by Kook. Remarks warning The accurate value of this property is not known. It is set to int.MaxValue at current so that it does not work. MaxMessagesPerBatch Returns the max messages allowed to be in a request. public const int MaxMessagesPerBatch = 50 Field Value int The maximum number of messages that can be gotten per-batch. MaxNicknameSize Returns the max length for a Kook guild nickname. public const int MaxNicknameSize = 64 Field Value int The maximum length of a nickname allowed by Kook. MaxUsersPerBatch Returns the max users allowed to be in a request. public const int MaxUsersPerBatch = 50 Field Value int The maximum number of users that can be gotten per-batch. MinIntimacyScore Returns the min value for a Kook intimacy score. public const int MinIntimacyScore = 0 Field Value int The minimum value of an intimacy score allowed by Kook. MinNicknameSize Returns the min length for a Kook guild nickname. public const int MinNicknameSize = 2 Field Value int The minimum length of a nickname allowed by Kook. VoiceAPIVersion Returns the Voice API version Kook.Net uses. public const int VoiceAPIVersion = 1 Field Value int An int representing the API version that Kook.Net uses to communicate with KOOK's voice server. Properties AcceptLanguage Gets the accept language that Kook.Net uses in its clients. public string AcceptLanguage { get; set; } Property Value string The accept language used in each Kook.Net request. DefaultRatelimitCallback Gets or sets the default callback for rate limits. public Func<IRateLimitInfo, Task>? DefaultRatelimitCallback { get; set; } Property Value Func<IRateLimitInfo, Task> Remarks This property is mutually exclusive with RatelimitCallback. DefaultRetryMode Gets or sets how a request should act in the case of an error, by default. public RetryMode DefaultRetryMode { get; set; } Property Value RetryMode The currently set RetryMode. FormatUsersInBidirectionalUnicode Gets or sets if the Rest/Socket user ToString() override formats the string in respect to bidirectional unicode. public bool FormatUsersInBidirectionalUnicode { get; set; } Property Value bool Remarks By default, the returned value will be \"?Kook?#1234\", to work with bidirectional usernames. If set to false, this value will be \"Kook#1234\". LogLevel Gets or sets the minimum log level severity that will be sent to the Log event. public LogSeverity LogLevel { get; set; } Property Value LogSeverity The currently set LogSeverity for logging level. UserAgent Gets the user agent that Kook.Net uses in its clients. public static string UserAgent { get; } Property Value string The user agent used in each Kook.Net request. Version Gets the Kook.Net version, including the build number. public static string Version { get; } Property Value string A string containing the detailed version information, including its build number; Unknown when the version fails to be fetched."
  },
  "api/Kook.KookError.html": {
    "href": "api/Kook.KookError.html",
    "title": "Struct KookError | Kook.Net 文档",
    "keywords": "Struct KookError Namespace Kook Assembly Kook.Net.Core.dll Represents an error with a property. public struct KookError Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Code Gets the code of the error. public readonly string Code { get; } Property Value string Message Gets the message describing what went wrong. public readonly string Message { get; } Property Value string"
  },
  "api/Kook.KookErrorCode.html": {
    "href": "api/Kook.KookErrorCode.html",
    "title": "Enum KookErrorCode | Kook.Net 文档",
    "keywords": "Enum KookErrorCode Namespace Kook Assembly Kook.Net.Core.dll Represents a set of json error codes received by Kook. public enum KookErrorCode Fields GeneralError = 40000 The operation failed due to an unspecified error. HasBeenFriend = 42007 The operation failed because the user has become a friend of the current user. InvalidAuthenticationToken = 40101 The operation failed due to an invalid authentication token. InvalidSequenceNumber = 40108 The KOOK gateway requested a reconnect due to an invalid sequence number. MissingArgument = 40100 The operation failed due to an missing argument. MissingPermissions = 40300 The operation failed due to missing permissions. MissingResumeArgument = 40106 The KOOK gateway requested a reconnect due to missing resume arguments. RequestEntityTooLarge = 40014 The operation failed because the request was too large. RequestFriendTooFast = 42008 The operation failed because the current user has requested to be friends with the user too fast. SessionExpired = 40107 The KOOK gateway requested a reconnect because the session has expired. Success = 0 The operation was successful. TokenExpired = 40103 The operation failed because the authentication token has expired. TokenVerificationFailed = 40102 The operation failed because the authentication token verification failed."
  },
  "api/Kook.KookJsonError.html": {
    "href": "api/Kook.KookJsonError.html",
    "title": "Struct KookJsonError | Kook.Net 文档",
    "keywords": "Struct KookJsonError Namespace Kook Assembly Kook.Net.Core.dll Represents a generic parsed json error received from Kook after performing a rest request. public struct KookJsonError Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Errors Gets a collection of errors associated with the specific property at the path. public readonly IReadOnlyCollection<KookError> Errors { get; } Property Value IReadOnlyCollection<KookError> Path Gets the json path of the error. public readonly string Path { get; } Property Value string"
  },
  "api/Kook.LinkEmbed.html": {
    "href": "api/Kook.LinkEmbed.html",
    "title": "Struct LinkEmbed | Kook.Net 文档",
    "keywords": "Struct LinkEmbed Namespace Kook Assembly Kook.Net.Core.dll Represents a link embed. public struct LinkEmbed : IEmbed Implements IEmbed Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Color Gets the color displayed along the left side of the card. public readonly Color Color { get; } Property Value Color A string representing the color displayed along the left side of the card. Description Gets the description of the website the link directs to. public readonly string Description { get; } Property Value string A string representing the description of the website the link directs to. Image Gets the URL of the image related to the website the link directs to. public readonly string Image { get; } Property Value string A string representing the URL of the image related to the website the link directs to. SiteName Gets the name of the website the link directs to. public readonly string SiteName { get; } Property Value string A string representing the name of the website the link directs to. Title Gets the title of the website the link directs to. public readonly string Title { get; } Property Value string A string representing the title of the website the link directs to. Type Gets the type of this embed. public EmbedType Type { get; } Property Value EmbedType A EmbedType that represents the type of this embed. Url Gets the URL of this embed. public readonly string Url { get; } Property Value string A string that represents the URL of this embed."
  },
  "api/Kook.LogMessage.html": {
    "href": "api/Kook.LogMessage.html",
    "title": "Struct LogMessage | Kook.Net 文档",
    "keywords": "Struct LogMessage Namespace Kook Assembly Kook.Net.Core.dll Provides a message object used for logging purposes. public readonly struct LogMessage Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors LogMessage(LogSeverity, string, string?, Exception?) Initializes a new LogMessage struct with the severity, source, message of the event, and optionally, an exception. public LogMessage(LogSeverity severity, string source, string? message, Exception? exception = null) Parameters severity LogSeverity The severity of the event. source string The source of the event. message string The message of the event. exception Exception The exception of the event. Properties Exception Gets the exception of this log entry. public Exception? Exception { get; } Property Value Exception A Exception object associated with an incident; otherwise null. Message Gets the message of this log entry. public string? Message { get; } Property Value string A string containing the message of this log entry. Severity Gets the severity of the log entry. public LogSeverity Severity { get; } Property Value LogSeverity A LogSeverity enum to indicate the severeness of the incident or event. Source Gets the source of the log entry. public string Source { get; } Property Value string A string representing the source of the log entry. Methods ToString() Returns a string representation of this log message. public override string ToString() Returns string A string representation of this log message. ToString(StringBuilder?, bool, bool, DateTimeKind, int?) Returns a string representation of this log message. public string ToString(StringBuilder? builder = null, bool fullException = true, bool prependTimestamp = true, DateTimeKind timestampKind = DateTimeKind.Local, int? padSource = 11) Parameters builder StringBuilder The string builder to use. fullException bool Whether to include the full exception in the string. prependTimestamp bool Whether to prepend the timestamp to the string. timestampKind DateTimeKind The kind of timestamp to use. padSource int? The amount of padding to use for the source. Returns string A string representation of this log message."
  },
  "api/Kook.LogSeverity.html": {
    "href": "api/Kook.LogSeverity.html",
    "title": "Enum LogSeverity | Kook.Net 文档",
    "keywords": "Enum LogSeverity Namespace Kook Assembly Kook.Net.Core.dll Specifies the severity of the log message. public enum LogSeverity Fields Critical = 0 Logs that contain the most severe level of error. This type of error indicate that immediate attention may be required. Debug = 5 Logs that contain the most detailed messages. Error = 1 Logs that highlight when the flow of execution is stopped due to a failure. Info = 3 Logs that track the general flow of the application. Verbose = 4 Logs that are used for interactive investigation during development. Warning = 2 Logs that highlight an abnormal activity in the flow of execution."
  },
  "api/Kook.LoginState.html": {
    "href": "api/Kook.LoginState.html",
    "title": "Enum LoginState | Kook.Net 文档",
    "keywords": "Enum LoginState Namespace Kook Assembly Kook.Net.Core.dll Specifies the state of the client's login status. public enum LoginState : byte Fields LoggedIn = 2 The client is currently logged in. LoggedOut = 0 The client is currently logged out. LoggingIn = 1 The client is currently logging in. LoggingOut = 3 The client is currently logging out."
  },
  "api/Kook.MentionUtils.html": {
    "href": "api/Kook.MentionUtils.html",
    "title": "Class MentionUtils | Kook.Net 文档",
    "keywords": "Class MentionUtils Namespace Kook Assembly Kook.Net.Core.dll Provides a series of helper methods for parsing mentions. public static class MentionUtils Inheritance object MentionUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods KMarkdownMentionChannel(ulong) Returns a KMarkdown formatted mention string based on the channel ID. public static string KMarkdownMentionChannel(ulong id) Parameters id ulong Returns string A channel mention string formatted to KMarkdown. KMarkdownMentionRole(uint) Returns a KMarkdown formatted mention string based on the role ID. public static string KMarkdownMentionRole(uint id) Parameters id uint Returns string A role mention string formatted to KMarkdown. KMarkdownMentionUser(ulong) Returns a KMarkdown formatted mention string based on the user ID. public static string KMarkdownMentionUser(ulong id) Parameters id ulong Returns string A user mention string formatted to KMarkdown. ParseChannel(string, TagMode) Parses a provided channel mention string. public static ulong ParseChannel(string text, TagMode tagMode) Parameters text string tagMode TagMode Returns ulong Exceptions ArgumentException Invalid mention format. ParseRole(string, TagMode) Parses a provided role mention string. public static ulong ParseRole(string text, TagMode tagMode) Parameters text string tagMode TagMode Returns ulong Exceptions ArgumentException Invalid mention format. ParseUser(string, TagMode) Parses a provided user mention string. public static ulong ParseUser(string text, TagMode tagMode) Parameters text string The user mention. tagMode TagMode Returns ulong Exceptions ArgumentException Invalid mention format. PlainTextMentionChannel(ulong) Returns a plain text formatted mention string based on the channel ID. public static string PlainTextMentionChannel(ulong id) Parameters id ulong Returns string A channel mention string formatted to plain text. PlainTextMentionRole(uint) Returns a plain text formatted mention string based on the role ID. public static string PlainTextMentionRole(uint id) Parameters id uint Returns string A role mention string formatted to plain text. PlainTextMentionUser(string, ulong) Returns a plain text formatted mention string based on the user ID. public static string PlainTextMentionUser(string username, ulong id) Parameters username string id ulong Returns string A user mention string formatted to plain text. TryParseChannel(string, out ulong, TagMode) Tries to parse a provided channel mention string. public static bool TryParseChannel(string text, out ulong channelId, TagMode tagMode) Parameters text string channelId ulong tagMode TagMode Returns bool TryParseRole(string, out uint, TagMode) Tries to parse a provided role mention string. public static bool TryParseRole(string text, out uint roleId, TagMode tagMode) Parameters text string roleId uint tagMode TagMode Returns bool TryParseUser(string, out ulong, TagMode) Tries to parse a provided user mention string. public static bool TryParseUser(string text, out ulong userId, TagMode tagMode) Parameters text string The user mention. userId ulong The UserId of the user. tagMode TagMode Parse as PlainText or KMarkdown. Returns bool"
  },
  "api/Kook.MessageExtensions.html": {
    "href": "api/Kook.MessageExtensions.html",
    "title": "Class MessageExtensions | Kook.Net 文档",
    "keywords": "Class MessageExtensions Namespace Kook Assembly Kook.Net.Core.dll Provides extension methods for IMessage. public static class MessageExtensions Inheritance object MessageExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddReactionsAsync(IUserMessage, IEnumerable<IEmote>, RequestOptions?) Add multiple reactions to a message. public static Task AddReactionsAsync(this IUserMessage msg, IEnumerable<IEmote> reactions, RequestOptions? options = null) Parameters msg IUserMessage The message to add reactions to. reactions IEnumerable<IEmote> An array of reactions to add to the message. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for adding a reaction to this message. Examples IEmote a = new Emoji(\"🅰\"); IEmote b = new Emoji(\"🅱\"); await msg.AddReactionsAsync([a, b]); Remarks This method does not bulk add reactions! It will send a request for each reaction included. See Also AddReactionAsync(IEmote, RequestOptions) IEmote GetJumpUrl(IMessage) Gets a URL that jumps to the message. public static string GetJumpUrl(this IMessage msg) Parameters msg IMessage The message to jump to. Returns string A string that contains a URL for jumping to the message in chat. MaybeTextImageMixedMessage(IUserMessage) Gets whether the message may be a text image mixed message. public static bool MaybeTextImageMixedMessage(this IUserMessage msg) Parameters msg IUserMessage The message to check against. Returns bool true if the message may be a text image mixed message; otherwise, false. RemoveReactionsAsync(IUserMessage, IUser, IEnumerable<IEmote>, RequestOptions?) Remove multiple reactions from a message. public static Task RemoveReactionsAsync(this IUserMessage msg, IUser user, IEnumerable<IEmote> reactions, RequestOptions? options = null) Parameters msg IUserMessage The message to remove reactions from. user IUser The user who removed the reaction. reactions IEnumerable<IEmote> An array of reactions to remove from the message. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for removing a reaction to this message. Examples await msg.RemoveReactionsAsync(currentUser, [A, B]); Remarks This method does not bulk remove reactions! It will send a request for each reaction included. See Also RemoveReactionAsync(IEmote, IUser, RequestOptions) IEmote ReplyCardAsync(IUserMessage, ICard, bool, bool, RequestOptions?) Sends a card message to the source channel. public static Task<Cacheable<IUserMessage, Guid>> ReplyCardAsync(this IUserMessage message, ICard card, bool isQuote = false, bool isEphemeral = false, RequestOptions? options = null) Parameters message IUserMessage The message that is being replied on. card ICard The card to be sent. isQuote bool true if the source message will be quoted in this message; otherwise, false. isEphemeral bool true if the message to be sent can be seen only by the command invoker; otherwise, false. options RequestOptions The request options for this async request. Returns Task<Cacheable<IUserMessage, Guid>> ReplyCardsAsync(IUserMessage, IEnumerable<ICard>, bool, bool, RequestOptions?) Sends a card message to the source channel. public static Task<Cacheable<IUserMessage, Guid>> ReplyCardsAsync(this IUserMessage message, IEnumerable<ICard> cards, bool isQuote = false, bool isEphemeral = false, RequestOptions? options = null) Parameters message IUserMessage The message that is being replied on. cards IEnumerable<ICard> The cards to be sent. isQuote bool true if the source message will be quoted in this message; otherwise, false. isEphemeral bool true if the message to be sent can be seen only by the command invoker; otherwise, false. options RequestOptions The request options for this async request. Returns Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(IUserMessage, FileAttachment, bool, bool, RequestOptions?) Sends an inline reply of file that references a message. public static Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(this IUserMessage message, FileAttachment attachment, bool isQuote = false, bool isEphemeral = false, RequestOptions? options = null) Parameters message IUserMessage The message that is being replied on. attachment FileAttachment The attachment containing the file. isQuote bool true if the source message will be quoted in this message; otherwise, false. isEphemeral bool true if the message to be sent can be seen only by the command invoker; otherwise, false. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(IUserMessage, Stream, string, AttachmentType, bool, bool, RequestOptions?) Sends an inline reply of file that references a message. public static Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(this IUserMessage message, Stream stream, string filename, AttachmentType type = AttachmentType.File, bool isQuote = false, bool isEphemeral = false, RequestOptions? options = null) Parameters message IUserMessage The message that is being replied on. stream Stream Stream of the file to be sent. filename string The name of the file. type AttachmentType The type of the file. isQuote bool true if the source message will be quoted in this message; otherwise, false. isEphemeral bool true if the message to be sent can be seen only by the command invoker; otherwise, false. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(IUserMessage, string, string?, AttachmentType, bool, bool, RequestOptions?) Sends an inline reply of file that references a message. public static Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(this IUserMessage message, string path, string? filename = null, AttachmentType type = AttachmentType.File, bool isQuote = false, bool isEphemeral = false, RequestOptions? options = null) Parameters message IUserMessage The message that is being replied on. path string The file path of the file. filename string The name of the file. type AttachmentType The type of the file. isQuote bool true if the source message will be quoted in this message; otherwise, false. isEphemeral bool true if the message to be sent can be seen only by the command invoker; otherwise, false. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> ReplyTextAsync(IUserMessage, string, bool, bool, RequestOptions?) Sends an inline reply of text that references a message. public static Task<Cacheable<IUserMessage, Guid>> ReplyTextAsync(this IUserMessage message, string content, bool isQuote = false, bool isEphemeral = false, RequestOptions? options = null) Parameters message IUserMessage The message that is being replied on. content string Contents of the message. isQuote bool true if the source message will be quoted in this message; otherwise, false. isEphemeral bool true if the message to be sent can be seen only by the command invoker; otherwise, false. options RequestOptions The request options for this async request. Returns Task<Cacheable<IUserMessage, Guid>>"
  },
  "api/Kook.MessageProperties.html": {
    "href": "api/Kook.MessageProperties.html",
    "title": "Class MessageProperties | Kook.Net 文档",
    "keywords": "Class MessageProperties Namespace Kook Assembly Kook.Net.Core.dll Properties that are used to modify an IUserMessage with the specified changes. public class MessageProperties Inheritance object MessageProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Cards Gets or sets the cards of the message. public IEnumerable<ICard>? Cards { get; set; } Property Value IEnumerable<ICard> Content Gets or sets the content of the message. public string? Content { get; set; } Property Value string Remarks This must be less than the constant defined by MaxMessageSize. EphemeralUser Gets or sets the only user that can see this message. public IUser? EphemeralUser { get; set; } Property Value IUser Quote Gets or sets the quote of the message. public IQuote? Quote { get; set; } Property Value IQuote See Also ModifyAsync(Action<MessageProperties>, RequestOptions)"
  },
  "api/Kook.MessageReference.html": {
    "href": "api/Kook.MessageReference.html",
    "title": "Class MessageReference | Kook.Net 文档",
    "keywords": "Class MessageReference Namespace Kook Assembly Kook.Net.Core.dll Represents a message reference. public class MessageReference : IQuote Inheritance object MessageReference Implements IQuote Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageReference(Guid) Creates a new instance of MessageReference with the specified quoted message identifier. public MessageReference(Guid quotedMessageId) Parameters quotedMessageId Guid The identifier of the message that will be quoted. If null, the quote will be empty. Properties Empty Gets an empty quote whose quoted message is null. public static MessageReference Empty { get; } Property Value MessageReference Remarks Used to delete a quote when modifying a message. QuotedMessageId Gets the identifier of the message this quote refers to. public Guid QuotedMessageId { get; } Property Value Guid"
  },
  "api/Kook.MessageSource.html": {
    "href": "api/Kook.MessageSource.html",
    "title": "Enum MessageSource | Kook.Net 文档",
    "keywords": "Enum MessageSource Namespace Kook Assembly Kook.Net.Core.dll Specifies the source of the Kook message. public enum MessageSource Fields Bot = 2 The message is sent by a bot. System = 0 The message is sent by the system. User = 1 The message is sent by a user."
  },
  "api/Kook.MessageType.html": {
    "href": "api/Kook.MessageType.html",
    "title": "Enum MessageType | Kook.Net 文档",
    "keywords": "Enum MessageType Namespace Kook Assembly Kook.Net.Core.dll Represents the type of a message. public enum MessageType Fields Audio = 8 Represents that the type of the message contains a voice message. Card = 10 Represents that the type of the message contains cards. File = 4 Represents that the type of the message contains a file. Image = 2 Represents that the type of the message contains an image. KMarkdown = 9 Represents that the type of the message contains a KMarkdown message. Poke = 12 Represents that the type of the message contains a poke action. System = 255 Represents that the type of the message originates from KOOK system. Text = 1 Represents that the type of the message contains plain text. Video = 3 Represents that the type of the message contains a video."
  },
  "api/Kook.ModifyGuildChannelProperties.html": {
    "href": "api/Kook.ModifyGuildChannelProperties.html",
    "title": "Class ModifyGuildChannelProperties | Kook.Net 文档",
    "keywords": "Class ModifyGuildChannelProperties Namespace Kook Assembly Kook.Net.Core.dll Properties that are used to modify an IGuildChannel with the specified properties. public class ModifyGuildChannelProperties Inheritance object ModifyGuildChannelProperties Derived ModifyTextChannelProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CategoryId Gets or sets the category ID for this channel. public ulong? CategoryId { get; set; } Property Value ulong? Remarks Setting this value to a category's identifier will change this channel's parent to the specified channel; setting this value to 0 will detach this channel from its parent if one is set; if this is null, the parent of this channel will not be modified. Name Gets or sets the channel to this name to be modified. public string? Name { get; set; } Property Value string Remarks This property defines the new name for this channel; if this is null, the name will not be modified. Position Moves the channel to the following position. This property is one-based. public int? Position { get; set; } Property Value int? Remarks If this is null, the position will not be modified. See Also ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions)"
  },
  "api/Kook.ModifyTextChannelProperties.html": {
    "href": "api/Kook.ModifyTextChannelProperties.html",
    "title": "Class ModifyTextChannelProperties | Kook.Net 文档",
    "keywords": "Class ModifyTextChannelProperties Namespace Kook Assembly Kook.Net.Core.dll Provides properties that are used to modify an ITextChannel with the specified properties. public class ModifyTextChannelProperties : ModifyGuildChannelProperties Inheritance object ModifyGuildChannelProperties ModifyTextChannelProperties Derived ModifyVoiceChannelProperties Inherited Members ModifyGuildChannelProperties.Name ModifyGuildChannelProperties.Position ModifyGuildChannelProperties.CategoryId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties SlowModeInterval Gets or sets the slow-mode ratelimit in seconds for this channel. public SlowModeInterval? SlowModeInterval { get; set; } Property Value SlowModeInterval? Remarks Setting this value will require each user to wait before sending another message; setting this value to None will disable slow-mode for this channel; if this value is set to null, the slow-mode interval will not be modified. note Users with ManageMessages or ManageChannels will be exempt from slow-mode. Topic Gets or sets the topic of the channel. public string? Topic { get; set; } Property Value string Remarks Setting this value to any string other than null or Empty will set the channel topic or description to the desired value. See Also ModifyAsync(Action<ModifyTextChannelProperties>, RequestOptions)"
  },
  "api/Kook.ModifyVoiceChannelProperties.html": {
    "href": "api/Kook.ModifyVoiceChannelProperties.html",
    "title": "Class ModifyVoiceChannelProperties | Kook.Net 文档",
    "keywords": "Class ModifyVoiceChannelProperties Namespace Kook Assembly Kook.Net.Core.dll Provides properties that are used to modify an IVoiceChannel with the specified properties. public class ModifyVoiceChannelProperties : ModifyTextChannelProperties Inheritance object ModifyGuildChannelProperties ModifyTextChannelProperties ModifyVoiceChannelProperties Inherited Members ModifyTextChannelProperties.Topic ModifyTextChannelProperties.SlowModeInterval ModifyGuildChannelProperties.Name ModifyGuildChannelProperties.Position ModifyGuildChannelProperties.CategoryId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties OverwriteVoiceRegion Gets or sets a value that indicates whether the voice region of the channel is overwritten; null if not set. public bool? OverwriteVoiceRegion { get; set; } Property Value bool? Password Gets or sets the password of the channel, or empty string to clear the password; null if not set. public string? Password { get; set; } Property Value string UserLimit Gets or sets the maximum number of users that can be present in a channel, or 0 if none; null if not set. public int? UserLimit { get; set; } Property Value int? VoiceQuality Gets or sets the voice quality that the clients in this voice channel are requested to use; null if not set. public VoiceQuality? VoiceQuality { get; set; } Property Value VoiceQuality? Remarks warning This property cannot be set to the quality equivalent or higher than _128kbps via Kook REST API because of the server-side limitation despite of the fact that the voice channel exists in a boosted guild. VoiceRegion Gets or sets the voice region of the channel; null if not set. public string? VoiceRegion { get; set; } Property Value string See Also ModifyAsync(Action<ModifyVoiceChannelProperties>, RequestOptions)"
  },
  "api/Kook.ModuleType.html": {
    "href": "api/Kook.ModuleType.html",
    "title": "Enum ModuleType | Kook.Net 文档",
    "keywords": "Enum ModuleType Namespace Kook Assembly Kook.Net.Core.dll Specifies the type of an IModule. public enum ModuleType Fields ActionGroup = 4 An ActionGroupModule. Audio = 8 An AudioModule. Container = 3 A ContainerModule. Context = 5 A ContextModule. Countdown = 10 A CountdownModule. Divider = 6 A DividerModule. File = 7 A FileModule. Header = 0 A HeaderModule. ImageGroup = 2 An ImageGroupModule. Invite = 11 An InviteModule. Section = 1 A SectionModule. Video = 9 A VideoModule."
  },
  "api/Kook.Music.html": {
    "href": "api/Kook.Music.html",
    "title": "Class Music | Kook.Net 文档",
    "keywords": "Class Music Namespace Kook Assembly Kook.Net.Core.dll Represents a music activity. public class Music Inheritance object Music Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets or sets the music ID. public string? Name { get; set; } Property Value string Provider Gets or sets the music provider. public MusicProvider Provider { get; set; } Property Value MusicProvider Singer Gets or sets the singer. public string? Singer { get; set; } Property Value string"
  },
  "api/Kook.MusicProvider.html": {
    "href": "api/Kook.MusicProvider.html",
    "title": "Enum MusicProvider | Kook.Net 文档",
    "keywords": "Enum MusicProvider Namespace Kook Assembly Kook.Net.Core.dll Specifies the provider of music. public enum MusicProvider Fields KuGouMusic = 3 Specifies that the music provider is KuGou. NetEaseCloudMusic = 1 Specifies that the music provider is NetEase. TencentMusic = 2 Specifies that the music provider is Tencent QQ. Unspecified = 0 Specifies that the music provider is unspecified."
  },
  "api/Kook.Nameplate.html": {
    "href": "api/Kook.Nameplate.html",
    "title": "Class Nameplate | Kook.Net 文档",
    "keywords": "Class Nameplate Namespace Kook Assembly Kook.Net.Core.dll Representing a nameplate an IUser can have. public class Nameplate : IEquatable<Nameplate> Inheritance object Nameplate Implements IEquatable<Nameplate> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Icon Gets the resource uri of the icon of the nameplate given to user. public string Icon { get; } Property Value string Name Gets the name of the nameplate given to user. public string Name { get; } Property Value string Tips Gets the tips of the nameplate given to user. public string Tips { get; } Property Value string Type Gets the type of the nameplate given to user. public int Type { get; } Property Value int Methods Create(string, int, string, string) Initializes a new instance of the Nameplate class. public static Nameplate Create(string name, int type, string icon, string tips) Parameters name string The name of the nameplate given to user. type int The type of the nameplate given to user. icon string The resource uri of the icon of the nameplate given to user. tips string The tips of the nameplate given to user. Returns Nameplate A Nameplate representing the given parameters. Equals(Nameplate?) Indicates whether the current object is equal to another object of the same type. public bool Equals(Nameplate? other) Parameters other Nameplate An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/Kook.Net.BucketId.html": {
    "href": "api/Kook.Net.BucketId.html",
    "title": "Class BucketId | Kook.Net 文档",
    "keywords": "Class BucketId Namespace Kook.Net Assembly Kook.Net.Core.dll Represents a ratelimit bucket. public sealed class BucketId : IEquatable<BucketId> Inheritance object BucketId Implements IEquatable<BucketId> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties BucketHash Gets the hash of this bucket. public string? BucketHash { get; } Property Value string Remarks The hash is provided by Kook to group ratelimits. Endpoint Gets the endpoint that is going to be requested if available. public string? Endpoint { get; } Property Value string HttpMethod Gets the http method used to make the request if available. public HttpMethod? HttpMethod { get; } Property Value HttpMethod IsHashBucket Gets if this bucket is a hash type. public bool IsHashBucket { get; } Property Value bool MajorParameters Gets the major parameters of the route. public IOrderedEnumerable<KeyValuePair<string, string>> MajorParameters { get; } Property Value IOrderedEnumerable<KeyValuePair<string, string>> Methods Create(HttpMethod?, string?, Dictionary<string, string>?) Creates a new BucketId based on the HttpMethod and Endpoint. public static BucketId Create(HttpMethod? httpMethod, string? endpoint, Dictionary<string, string>? majorParams) Parameters httpMethod HttpMethod Http method used to make the request. endpoint string Endpoint that is going to receive requests. majorParams Dictionary<string, string> Major parameters of the route of this endpoint. Returns BucketId A BucketId based on the HttpMethod and the Endpoint with the provided data. Create(string, BucketId) Creates a new BucketId based on a BucketHash and a previous BucketId. public static BucketId Create(string hash, BucketId oldBucket) Parameters hash string Bucket hash provided by Kook. oldBucket BucketId BucketId that is going to be upgraded to a hash type. Returns BucketId A BucketId based on the BucketHash and MajorParameters. Equals(BucketId?) Indicates whether the current object is equal to another object of the same type. public bool Equals(BucketId? other) Parameters other BucketId An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetBucketHash() Gets the string that will define this bucket as a hash based one. public string? GetBucketHash() Returns string A string that defines this bucket as a hash based one. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetUniqueEndpoint() Gets the string that will define this bucket as an endpoint based one. public string? GetUniqueEndpoint() Returns string A string that defines this bucket as an endpoint based one. ToString() Returns a string that represents the current object. public override string? ToString() Returns string A string that represents the current object."
  },
  "api/Kook.Net.DependencyInjection.Microsoft.IKookClientConfigurator-2.html": {
    "href": "api/Kook.Net.DependencyInjection.Microsoft.IKookClientConfigurator-2.html",
    "title": "Interface IKookClientConfigurator<TClient, TConfig> | Kook.Net 文档",
    "keywords": "Interface IKookClientConfigurator<TClient, TConfig> Namespace Kook.Net.DependencyInjection.Microsoft Assembly Kook.Net.DependencyInjection.Microsoft.dll Represents a configurator for a Kook client. public interface IKookClientConfigurator<TClient, TConfig> where TClient : IKookClient where TConfig : KookConfig Type Parameters TClient The type of the client. TConfig The type of the configuration. Properties ServiceCollection Gets the service collection to append services. IServiceCollection ServiceCollection { get; } Property Value IServiceCollection Methods AppendConfigure(Action<IServiceProvider, TConfig>) Appends a configuration action, which is executed on the created configuration instance. IKookClientConfigurator<TClient, TConfig> AppendConfigure(Action<IServiceProvider, TConfig> configure) Parameters configure Action<IServiceProvider, TConfig> The configuration action. Returns IKookClientConfigurator<TClient, TConfig> The configurator. AppendService(Action<IServiceCollection>) Appends a service action, which is executed on the service collection. IKookClientConfigurator<TClient, TConfig> AppendService(Action<IServiceCollection> service) Parameters service Action<IServiceCollection> The service action. Returns IKookClientConfigurator<TClient, TConfig> The configurator."
  },
  "api/Kook.Net.DependencyInjection.Microsoft.IKookClientConfiguratorCompleter.html": {
    "href": "api/Kook.Net.DependencyInjection.Microsoft.IKookClientConfiguratorCompleter.html",
    "title": "Interface IKookClientConfiguratorCompleter | Kook.Net 文档",
    "keywords": "Interface IKookClientConfiguratorCompleter Namespace Kook.Net.DependencyInjection.Microsoft Assembly Kook.Net.DependencyInjection.Microsoft.dll Represents a generic completer for a Kook client configurator. public interface IKookClientConfiguratorCompleter Methods Complete() Completes the configuration. void Complete()"
  },
  "api/Kook.Net.DependencyInjection.Microsoft.IKookClientServiceConfigurator.html": {
    "href": "api/Kook.Net.DependencyInjection.Microsoft.IKookClientServiceConfigurator.html",
    "title": "Interface IKookClientServiceConfigurator | Kook.Net 文档",
    "keywords": "Interface IKookClientServiceConfigurator Namespace Kook.Net.DependencyInjection.Microsoft Assembly Kook.Net.DependencyInjection.Microsoft.dll Represents a configurator for a Kook client. public interface IKookClientServiceConfigurator : IKookClientConfiguratorCompleter Inherited Members IKookClientConfiguratorCompleter.Complete() Extension Methods KookClientConfiguratorExtensions.UseHostedRestClient(IKookClientServiceConfigurator, Action<KookRestConfig>, TokenType, string, bool) KookClientConfiguratorExtensions.UseHostedRestClient(IKookClientServiceConfigurator, Action<KookRestConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) KookClientConfiguratorExtensions.UseHostedSocketClient(IKookClientServiceConfigurator, Action<KookSocketConfig>, TokenType, string, bool) KookClientConfiguratorExtensions.UseHostedSocketClient(IKookClientServiceConfigurator, Action<KookSocketConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) KookClientConfiguratorExtensions.UseHostedWebhookClient<TClient, TConfig>(IKookClientServiceConfigurator, Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>, TokenType, string, bool) KookClientConfiguratorExtensions.UseHostedWebhookClient<TClient, TConfig>(IKookClientServiceConfigurator, Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) KookWebhookClientExtension.UseAspNetWebhookClient(IKookClientServiceConfigurator, Action<KookAspNetWebhookConfig>) Methods UseRestClient(Action<KookRestConfig>) Configures the Kook service to use the REST client. IKookClientConfigurator<KookRestClient, KookRestConfig> UseRestClient(Action<KookRestConfig> configure) Parameters configure Action<KookRestConfig> The configuration action. Returns IKookClientConfigurator<KookRestClient, KookRestConfig> The configurator. UseSocketClient(Action<KookSocketConfig>) Configures the Kook service to use the socket client. IKookClientConfigurator<KookSocketClient, KookSocketConfig> UseSocketClient(Action<KookSocketConfig> configure) Parameters configure Action<KookSocketConfig> The configuration action. Returns IKookClientConfigurator<KookSocketClient, KookSocketConfig> The configurator. UseWebhookClient<TClient, TConfig>(Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>) Configures the Kook service to use the webhook client. IKookClientConfigurator<TClient, TConfig> UseWebhookClient<TClient, TConfig>(Func<IServiceProvider, IOptions<TConfig>, TClient> clientFactory, Action<TConfig> configure) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters clientFactory Func<IServiceProvider, IOptions<TConfig>, TClient> The client factory. configure Action<TConfig> The configuration action. Returns IKookClientConfigurator<TClient, TConfig> The configurator. Type Parameters TClient The type of the client. TConfig The type of the configuration."
  },
  "api/Kook.Net.DependencyInjection.Microsoft.KookClientConfigurator-2.html": {
    "href": "api/Kook.Net.DependencyInjection.Microsoft.KookClientConfigurator-2.html",
    "title": "Class KookClientConfigurator<TClient, TConfig> | Kook.Net 文档",
    "keywords": "Class KookClientConfigurator<TClient, TConfig> Namespace Kook.Net.DependencyInjection.Microsoft Assembly Kook.Net.DependencyInjection.Microsoft.dll Represents a configurator for a Kook client. public abstract class KookClientConfigurator<TClient, TConfig> : IKookClientConfigurator<TClient, TConfig>, IKookClientConfiguratorCompleter where TClient : IKookClient where TConfig : KookConfig Type Parameters TClient The type of the client. TConfig The type of the configuration. Inheritance object KookClientConfigurator<TClient, TConfig> Implements IKookClientConfigurator<TClient, TConfig> IKookClientConfiguratorCompleter Derived KookRestClientConfigurator KookSocketClientConfigurator KookWebhookClientConfigurator<TClient, TConfig> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ServiceCollection Gets the service collection to append services. public IServiceCollection ServiceCollection { get; } Property Value IServiceCollection Methods AppendConfigure(Action<IServiceProvider, TConfig>) Appends a configuration action, which is executed on the created configuration instance. public IKookClientConfigurator<TClient, TConfig> AppendConfigure(Action<IServiceProvider, TConfig> configure) Parameters configure Action<IServiceProvider, TConfig> The configuration action. Returns IKookClientConfigurator<TClient, TConfig> The configurator. AppendService(Action<IServiceCollection>) Appends a service action, which is executed on the service collection. public IKookClientConfigurator<TClient, TConfig> AppendService(Action<IServiceCollection> service) Parameters service Action<IServiceCollection> The service action. Returns IKookClientConfigurator<TClient, TConfig> The configurator. Complete() Completes the configuration. public void Complete()"
  },
  "api/Kook.Net.DependencyInjection.Microsoft.KookClientConfiguratorExtensions.html": {
    "href": "api/Kook.Net.DependencyInjection.Microsoft.KookClientConfiguratorExtensions.html",
    "title": "Class KookClientConfiguratorExtensions | Kook.Net 文档",
    "keywords": "Class KookClientConfiguratorExtensions Namespace Kook.Net.DependencyInjection.Microsoft Assembly Kook.Net.DependencyInjection.Microsoft.dll Provides extension methods for IKookClientConfigurator<TClient, TConfig> to configure Kook clients. public static class KookClientConfiguratorExtensions Inheritance object KookClientConfiguratorExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UseMessageQueue<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, MessageQueueProvider) Configures a Kook client to use a message queue provider. public static IKookClientConfigurator<TClient, TConfig> UseMessageQueue<TClient, TConfig>(this IKookClientConfigurator<TClient, TConfig> configurator, MessageQueueProvider messageQueueProvider) where TClient : BaseSocketClient where TConfig : KookSocketConfig Parameters configurator IKookClientConfigurator<TClient, TConfig> The configurator. messageQueueProvider MessageQueueProvider The message queue provider. Returns IKookClientConfigurator<TClient, TConfig> The configurator. Type Parameters TClient The type of the client. TConfig The type of the configuration. UseMessageQueue<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, Func<IServiceProvider, MessageQueueProvider>) Configures a Kook client to use a message queue provider. public static IKookClientConfigurator<TClient, TConfig> UseMessageQueue<TClient, TConfig>(this IKookClientConfigurator<TClient, TConfig> configurator, Func<IServiceProvider, MessageQueueProvider> messageQueueProvider) where TClient : BaseSocketClient where TConfig : KookSocketConfig Parameters configurator IKookClientConfigurator<TClient, TConfig> The configurator. messageQueueProvider Func<IServiceProvider, MessageQueueProvider> The message queue provider. Returns IKookClientConfigurator<TClient, TConfig> The configurator. Type Parameters TClient The type of the client. TConfig The type of the configuration."
  },
  "api/Kook.Net.DependencyInjection.Microsoft.KookClientDependencyInjectionExtensions.html": {
    "href": "api/Kook.Net.DependencyInjection.Microsoft.KookClientDependencyInjectionExtensions.html",
    "title": "Class KookClientDependencyInjectionExtensions | Kook.Net 文档",
    "keywords": "Class KookClientDependencyInjectionExtensions Namespace Kook.Net.DependencyInjection.Microsoft Assembly Kook.Net.DependencyInjection.Microsoft.dll Provides extension methods for Kook.Net to add clients using the IServiceCollection. public static class KookClientDependencyInjectionExtensions Inheritance object KookClientDependencyInjectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddKookRestClient(IServiceCollection) Adds a KookRestClient to the specified IServiceCollection with the specified configuration action and login information. public static IServiceCollection AddKookRestClient(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to add the services. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddKookRestClient(IServiceCollection, KookRestConfig) Adds a KookRestClient to the specified IServiceCollection with the specified configuration action and login information. public static IServiceCollection AddKookRestClient(this IServiceCollection services, KookRestConfig config) Parameters services IServiceCollection The IServiceCollection to add the services. config KookRestConfig The action to configure the KookRestConfig. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddKookRestClient(IServiceCollection, Action<KookRestConfig>) Adds a KookRestClient to the specified IServiceCollection with the specified configuration action and login information. public static IServiceCollection AddKookRestClient(this IServiceCollection services, Action<KookRestConfig> configure) Parameters services IServiceCollection The IServiceCollection to add the services. configure Action<KookRestConfig> The action to configure the KookRestConfig. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddKookSocketClient(IServiceCollection) Adds a KookSocketClient to the specified IServiceCollection with the specified configuration action and login information. public static IServiceCollection AddKookSocketClient(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to add the services. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddKookSocketClient(IServiceCollection, KookSocketConfig) Adds a KookSocketClient to the specified IServiceCollection with the specified configuration action and login information. public static IServiceCollection AddKookSocketClient(this IServiceCollection services, KookSocketConfig config) Parameters services IServiceCollection The IServiceCollection to add the services. config KookSocketConfig The action to configure the KookSocketConfig. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddKookSocketClient(IServiceCollection, Action<KookSocketConfig>) Adds a KookSocketClient to the specified IServiceCollection with the specified configuration action and login information. public static IServiceCollection AddKookSocketClient(this IServiceCollection services, Action<KookSocketConfig> configure) Parameters services IServiceCollection The IServiceCollection to add the services. configure Action<KookSocketConfig> The action to configure the KookSocketConfig. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddKookWebhookClient<TClient>(IServiceCollection, Func<IServiceProvider, TClient>) Adds a KookWebhookClient to the specified IServiceCollection with public static IServiceCollection AddKookWebhookClient<TClient>(this IServiceCollection services, Func<IServiceProvider, TClient> clientFactory) where TClient : KookWebhookClient Parameters services IServiceCollection The IServiceCollection to add the services. clientFactory Func<IServiceProvider, TClient> The factory to create the KookWebhookClient. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. Type Parameters TClient The type of the KookWebhookClient. AddKookWebhookClient<TClient, TConfig>(IServiceCollection, Func<IServiceProvider, IOptions<TConfig>, TClient>) Adds a KookWebhookClient to the specified IServiceCollection with public static IServiceCollection AddKookWebhookClient<TClient, TConfig>(this IServiceCollection services, Func<IServiceProvider, IOptions<TConfig>, TClient> clientFactory) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters services IServiceCollection The IServiceCollection to add the services. clientFactory Func<IServiceProvider, IOptions<TConfig>, TClient> The factory to create the KookWebhookClient. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. Type Parameters TClient The type of the KookWebhookClient. TConfig The type of the KookWebhookConfig. AddKookWebhookClient<TClient, TConfig>(IServiceCollection, Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>) Adds a KookWebhookClient to the specified IServiceCollection with public static IServiceCollection AddKookWebhookClient<TClient, TConfig>(this IServiceCollection services, Func<IServiceProvider, IOptions<TConfig>, TClient> clientFactory, Action<TConfig> configure) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters services IServiceCollection The IServiceCollection to add the services. clientFactory Func<IServiceProvider, IOptions<TConfig>, TClient> The factory to create the KookWebhookClient. configure Action<TConfig> The action to configure the KookWebhookConfig. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. Type Parameters TClient The type of the KookWebhookClient. TConfig The type of the KookWebhookConfig. AddKookWebhookClient<TClient, TConfig>(IServiceCollection, Func<IServiceProvider, TConfig, TClient>) Adds a KookWebhookClient to the specified IServiceCollection with public static IServiceCollection AddKookWebhookClient<TClient, TConfig>(this IServiceCollection services, Func<IServiceProvider, TConfig, TClient> clientFactory) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters services IServiceCollection The IServiceCollection to add the services. clientFactory Func<IServiceProvider, TConfig, TClient> The factory to create the KookWebhookClient. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. Type Parameters TClient The type of the KookWebhookClient. TConfig The type of the KookWebhookConfig. AddKookWebhookClient<TClient, TConfig>(IServiceCollection, Func<IServiceProvider, TConfig, TClient>, TConfig) Adds a KookWebhookClient to the specified IServiceCollection with public static IServiceCollection AddKookWebhookClient<TClient, TConfig>(this IServiceCollection services, Func<IServiceProvider, TConfig, TClient> clientFactory, TConfig config) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters services IServiceCollection The IServiceCollection to add the services. clientFactory Func<IServiceProvider, TConfig, TClient> The factory to create the KookWebhookClient. config TConfig The action to configure the KookWebhookConfig. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. Type Parameters TClient The type of the KookWebhookClient. TConfig The type of the KookWebhookConfig."
  },
  "api/Kook.Net.DependencyInjection.Microsoft.KookClientServiceConfigurator.html": {
    "href": "api/Kook.Net.DependencyInjection.Microsoft.KookClientServiceConfigurator.html",
    "title": "Class KookClientServiceConfigurator | Kook.Net 文档",
    "keywords": "Class KookClientServiceConfigurator Namespace Kook.Net.DependencyInjection.Microsoft Assembly Kook.Net.DependencyInjection.Microsoft.dll Represents a configurator for a Kook client. public class KookClientServiceConfigurator : IKookClientServiceConfigurator, IKookClientConfiguratorCompleter Inheritance object KookClientServiceConfigurator Implements IKookClientServiceConfigurator IKookClientConfiguratorCompleter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods KookClientConfiguratorExtensions.UseHostedRestClient(IKookClientServiceConfigurator, Action<KookRestConfig>, TokenType, string, bool) KookClientConfiguratorExtensions.UseHostedRestClient(IKookClientServiceConfigurator, Action<KookRestConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) KookClientConfiguratorExtensions.UseHostedSocketClient(IKookClientServiceConfigurator, Action<KookSocketConfig>, TokenType, string, bool) KookClientConfiguratorExtensions.UseHostedSocketClient(IKookClientServiceConfigurator, Action<KookSocketConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) KookClientConfiguratorExtensions.UseHostedWebhookClient<TClient, TConfig>(IKookClientServiceConfigurator, Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>, TokenType, string, bool) KookClientConfiguratorExtensions.UseHostedWebhookClient<TClient, TConfig>(IKookClientServiceConfigurator, Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) KookWebhookClientExtension.UseAspNetWebhookClient(IKookClientServiceConfigurator, Action<KookAspNetWebhookConfig>) Methods Complete() Completes the configuration. public void Complete() UseRestClient(Action<KookRestConfig>) Configures the Kook service to use the REST client. public IKookClientConfigurator<KookRestClient, KookRestConfig> UseRestClient(Action<KookRestConfig> configure) Parameters configure Action<KookRestConfig> The configuration action. Returns IKookClientConfigurator<KookRestClient, KookRestConfig> The configurator. UseSocketClient(Action<KookSocketConfig>) Configures the Kook service to use the socket client. public IKookClientConfigurator<KookSocketClient, KookSocketConfig> UseSocketClient(Action<KookSocketConfig> configure) Parameters configure Action<KookSocketConfig> The configuration action. Returns IKookClientConfigurator<KookSocketClient, KookSocketConfig> The configurator. UseWebhookClient<TClient, TConfig>(Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>) Configures the Kook service to use the webhook client. public IKookClientConfigurator<TClient, TConfig> UseWebhookClient<TClient, TConfig>(Func<IServiceProvider, IOptions<TConfig>, TClient> clientFactory, Action<TConfig> configure) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters clientFactory Func<IServiceProvider, IOptions<TConfig>, TClient> The client factory. configure Action<TConfig> The configuration action. Returns IKookClientConfigurator<TClient, TConfig> The configurator. Type Parameters TClient The type of the client. TConfig The type of the configuration."
  },
  "api/Kook.Net.DependencyInjection.Microsoft.KookConfiguratorExtensions.html": {
    "href": "api/Kook.Net.DependencyInjection.Microsoft.KookConfiguratorExtensions.html",
    "title": "Class KookConfiguratorExtensions | Kook.Net 文档",
    "keywords": "Class KookConfiguratorExtensions Namespace Kook.Net.DependencyInjection.Microsoft Assembly Kook.Net.DependencyInjection.Microsoft.dll Provides extension methods for IServiceCollection to add Kook clients and services. public static class KookConfiguratorExtensions Inheritance object KookConfiguratorExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddKook(IServiceCollection, Action<IKookClientServiceConfigurator>) Adds a Kook client to the service collection. public static IServiceCollection AddKook(this IServiceCollection services, Action<IKookClientServiceConfigurator> configure) Parameters services IServiceCollection The service collection. configure Action<IKookClientServiceConfigurator> The configuration action. Returns IServiceCollection The service collection."
  },
  "api/Kook.Net.DependencyInjection.Microsoft.KookRestClientConfigurator.html": {
    "href": "api/Kook.Net.DependencyInjection.Microsoft.KookRestClientConfigurator.html",
    "title": "Class KookRestClientConfigurator | Kook.Net 文档",
    "keywords": "Class KookRestClientConfigurator Namespace Kook.Net.DependencyInjection.Microsoft Assembly Kook.Net.DependencyInjection.Microsoft.dll Represents a configurator for a Kook REST client. public class KookRestClientConfigurator : KookClientConfigurator<KookRestClient, KookRestConfig>, IKookClientConfigurator<KookRestClient, KookRestConfig>, IKookClientConfiguratorCompleter Inheritance object KookClientConfigurator<KookRestClient, KookRestConfig> KookRestClientConfigurator Implements IKookClientConfigurator<KookRestClient, KookRestConfig> IKookClientConfiguratorCompleter Inherited Members KookClientConfigurator<KookRestClient, KookRestConfig>.ServiceCollection KookClientConfigurator<KookRestClient, KookRestConfig>.AppendConfigure(Action<IServiceProvider, KookRestConfig>) KookClientConfigurator<KookRestClient, KookRestConfig>.AppendService(Action<IServiceCollection>) KookClientConfigurator<KookRestClient, KookRestConfig>.Complete() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods KookClientConfiguratorExtensions.UseHostedClient<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, TokenType, string, bool) KookClientConfiguratorExtensions.UseHostedClient<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?)"
  },
  "api/Kook.Net.DependencyInjection.Microsoft.KookSocketClientConfigurator.html": {
    "href": "api/Kook.Net.DependencyInjection.Microsoft.KookSocketClientConfigurator.html",
    "title": "Class KookSocketClientConfigurator | Kook.Net 文档",
    "keywords": "Class KookSocketClientConfigurator Namespace Kook.Net.DependencyInjection.Microsoft Assembly Kook.Net.DependencyInjection.Microsoft.dll Represents a configurator for a Kook socket client. public class KookSocketClientConfigurator : KookClientConfigurator<KookSocketClient, KookSocketConfig>, IKookClientConfigurator<KookSocketClient, KookSocketConfig>, IKookClientConfiguratorCompleter Inheritance object KookClientConfigurator<KookSocketClient, KookSocketConfig> KookSocketClientConfigurator Implements IKookClientConfigurator<KookSocketClient, KookSocketConfig> IKookClientConfiguratorCompleter Inherited Members KookClientConfigurator<KookSocketClient, KookSocketConfig>.ServiceCollection KookClientConfigurator<KookSocketClient, KookSocketConfig>.AppendConfigure(Action<IServiceProvider, KookSocketConfig>) KookClientConfigurator<KookSocketClient, KookSocketConfig>.AppendService(Action<IServiceCollection>) KookClientConfigurator<KookSocketClient, KookSocketConfig>.Complete() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods KookClientConfiguratorExtensions.UseMessageQueue<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, MessageQueueProvider) KookClientConfiguratorExtensions.UseMessageQueue<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, Func<IServiceProvider, MessageQueueProvider>) KookClientConfiguratorExtensions.UseHostedClient<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, TokenType, string, bool) KookClientConfiguratorExtensions.UseHostedClient<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) KookMassTransitMessageQueueExtensions.UseMassTransitMessageQueue<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>) KookMassTransitMessageQueueExtensions.UseMassTransitMessageQueue<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, Action<IBusRegistrationConfigurator>)"
  },
  "api/Kook.Net.DependencyInjection.Microsoft.KookWebhookClientConfigurator-2.html": {
    "href": "api/Kook.Net.DependencyInjection.Microsoft.KookWebhookClientConfigurator-2.html",
    "title": "Class KookWebhookClientConfigurator<TClient, TConfig> | Kook.Net 文档",
    "keywords": "Class KookWebhookClientConfigurator<TClient, TConfig> Namespace Kook.Net.DependencyInjection.Microsoft Assembly Kook.Net.DependencyInjection.Microsoft.dll Represents a configurator for a Kook webhook client. public class KookWebhookClientConfigurator<TClient, TConfig> : KookClientConfigurator<TClient, TConfig>, IKookClientConfigurator<TClient, TConfig>, IKookClientConfiguratorCompleter where TClient : KookWebhookClient where TConfig : KookWebhookConfig Type Parameters TClient The type of the client. TConfig The type of the configuration. Inheritance object KookClientConfigurator<TClient, TConfig> KookWebhookClientConfigurator<TClient, TConfig> Implements IKookClientConfigurator<TClient, TConfig> IKookClientConfiguratorCompleter Inherited Members KookClientConfigurator<TClient, TConfig>.ServiceCollection KookClientConfigurator<TClient, TConfig>.AppendConfigure(Action<IServiceProvider, TConfig>) KookClientConfigurator<TClient, TConfig>.AppendService(Action<IServiceCollection>) KookClientConfigurator<TClient, TConfig>.Complete() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods KookClientConfiguratorExtensions.UseMessageQueue<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, MessageQueueProvider) KookClientConfiguratorExtensions.UseMessageQueue<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, Func<IServiceProvider, MessageQueueProvider>) KookClientConfiguratorExtensions.UseHostedClient<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, TokenType, string, bool) KookClientConfiguratorExtensions.UseHostedClient<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) KookMassTransitMessageQueueExtensions.UseMassTransitMessageQueue<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>) KookMassTransitMessageQueueExtensions.UseMassTransitMessageQueue<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, Action<IBusRegistrationConfigurator>)"
  },
  "api/Kook.Net.DependencyInjection.Microsoft.html": {
    "href": "api/Kook.Net.DependencyInjection.Microsoft.html",
    "title": "Namespace Kook.Net.DependencyInjection.Microsoft | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.DependencyInjection.Microsoft Classes KookClientConfiguratorExtensions Provides extension methods for IKookClientConfigurator<TClient, TConfig> to configure Kook clients. KookClientConfigurator<TClient, TConfig> Represents a configurator for a Kook client. KookClientDependencyInjectionExtensions Provides extension methods for Kook.Net to add clients using the IServiceCollection. KookClientServiceConfigurator Represents a configurator for a Kook client. KookConfiguratorExtensions Provides extension methods for IServiceCollection to add Kook clients and services. KookRestClientConfigurator Represents a configurator for a Kook REST client. KookSocketClientConfigurator Represents a configurator for a Kook socket client. KookWebhookClientConfigurator<TClient, TConfig> Represents a configurator for a Kook webhook client. Interfaces IKookClientConfiguratorCompleter Represents a generic completer for a Kook client configurator. IKookClientConfigurator<TClient, TConfig> Represents a configurator for a Kook client. IKookClientServiceConfigurator Represents a configurator for a Kook client."
  },
  "api/Kook.Net.Hosting.KookClientConfiguratorExtensions.html": {
    "href": "api/Kook.Net.Hosting.KookClientConfiguratorExtensions.html",
    "title": "Class KookClientConfiguratorExtensions | Kook.Net 文档",
    "keywords": "Class KookClientConfiguratorExtensions Namespace Kook.Net.Hosting Assembly Kook.Net.Hosting.dll Provides extension methods for IKookClientConfigurator<TClient, TConfig> to configure hosted clients. public static class KookClientConfiguratorExtensions Inheritance object KookClientConfiguratorExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UseHostedClient<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, TokenType, string, bool) Configures a hosted client with the specified token. public static IKookClientConfigurator<TClient, TConfig> UseHostedClient<TClient, TConfig>(this IKookClientConfigurator<TClient, TConfig> configurator, TokenType tokenType, string token, bool validateToken = true) where TClient : BaseKookClient where TConfig : KookConfig Parameters configurator IKookClientConfigurator<TClient, TConfig> The configurator. tokenType TokenType The token type. token string The token. validateToken bool The value indicating whether to validate the token. Returns IKookClientConfigurator<TClient, TConfig> The configurator. Type Parameters TClient TConfig UseHostedClient<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) Configures a hosted client with the specified token. public static IKookClientConfigurator<TClient, TConfig> UseHostedClient<TClient, TConfig>(this IKookClientConfigurator<TClient, TConfig> configurator, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) where TClient : BaseKookClient where TConfig : KookConfig Parameters configurator IKookClientConfigurator<TClient, TConfig> The configurator. tokenType Func<IServiceProvider, TokenType> The token type. token Func<IServiceProvider, string> The token. validateToken Func<IServiceProvider, bool> The value indicating whether to validate the token. Returns IKookClientConfigurator<TClient, TConfig> The configurator. Type Parameters TClient TConfig UseHostedRestClient(IKookClientServiceConfigurator, Action<KookRestConfig>, TokenType, string, bool) Configures a hosted REST client with the specified token. public static IKookClientConfigurator<KookRestClient, KookRestConfig> UseHostedRestClient(this IKookClientServiceConfigurator configurator, Action<KookRestConfig> configure, TokenType tokenType, string token, bool validateToken = true) Parameters configurator IKookClientServiceConfigurator The configurator. configure Action<KookRestConfig> The configuration action. tokenType TokenType The token type. token string The token. validateToken bool The value indicating whether to validate the token. Returns IKookClientConfigurator<KookRestClient, KookRestConfig> The configurator. UseHostedRestClient(IKookClientServiceConfigurator, Action<KookRestConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) Configures a hosted REST client with the specified token. public static IKookClientConfigurator<KookRestClient, KookRestConfig> UseHostedRestClient(this IKookClientServiceConfigurator configurator, Action<KookRestConfig> configure, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) Parameters configurator IKookClientServiceConfigurator The configurator. configure Action<KookRestConfig> The configuration action. tokenType Func<IServiceProvider, TokenType> The token type. token Func<IServiceProvider, string> The token. validateToken Func<IServiceProvider, bool> The value indicating whether to validate the token. Returns IKookClientConfigurator<KookRestClient, KookRestConfig> The configurator. UseHostedSocketClient(IKookClientServiceConfigurator, Action<KookSocketConfig>, TokenType, string, bool) Configures a hosted socket client with the specified token. public static IKookClientConfigurator<KookSocketClient, KookSocketConfig> UseHostedSocketClient(this IKookClientServiceConfigurator configurator, Action<KookSocketConfig> configure, TokenType tokenType, string token, bool validateToken = true) Parameters configurator IKookClientServiceConfigurator The configurator. configure Action<KookSocketConfig> The configuration action. tokenType TokenType The token type. token string The token. validateToken bool The value indicating whether to validate the token. Returns IKookClientConfigurator<KookSocketClient, KookSocketConfig> The configurator. UseHostedSocketClient(IKookClientServiceConfigurator, Action<KookSocketConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) Configures a hosted socket client with the specified token. public static IKookClientConfigurator<KookSocketClient, KookSocketConfig> UseHostedSocketClient(this IKookClientServiceConfigurator configurator, Action<KookSocketConfig> configure, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) Parameters configurator IKookClientServiceConfigurator The configurator. configure Action<KookSocketConfig> The configuration action. tokenType Func<IServiceProvider, TokenType> The token type. token Func<IServiceProvider, string> The token. validateToken Func<IServiceProvider, bool> The value indicating whether to validate the token. Returns IKookClientConfigurator<KookSocketClient, KookSocketConfig> The configurator. UseHostedWebhookClient<TClient, TConfig>(IKookClientServiceConfigurator, Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>, TokenType, string, bool) Configures a hosted webhook client with the specified token. public static IKookClientConfigurator<TClient, TConfig> UseHostedWebhookClient<TClient, TConfig>(this IKookClientServiceConfigurator configurator, Func<IServiceProvider, IOptions<TConfig>, TClient> clientFactory, Action<TConfig> configure, TokenType tokenType, string token, bool validateToken = true) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters configurator IKookClientServiceConfigurator The configurator. clientFactory Func<IServiceProvider, IOptions<TConfig>, TClient> The client factory. configure Action<TConfig> The configuration action. tokenType TokenType The token type. token string The token. validateToken bool The value indicating whether to validate the token. Returns IKookClientConfigurator<TClient, TConfig> The configurator. Type Parameters TClient The type of the client. TConfig The type of the configuration. UseHostedWebhookClient<TClient, TConfig>(IKookClientServiceConfigurator, Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) Configures a hosted webhook client with the specified token. public static IKookClientConfigurator<TClient, TConfig> UseHostedWebhookClient<TClient, TConfig>(this IKookClientServiceConfigurator configurator, Func<IServiceProvider, IOptions<TConfig>, TClient> clientFactory, Action<TConfig> configure, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters configurator IKookClientServiceConfigurator The configurator. clientFactory Func<IServiceProvider, IOptions<TConfig>, TClient> The client factory. configure Action<TConfig> The configuration action. tokenType Func<IServiceProvider, TokenType> The token type. token Func<IServiceProvider, string> The token. validateToken Func<IServiceProvider, bool> The value indicating whether to validate the token. Returns IKookClientConfigurator<TClient, TConfig> The configurator. Type Parameters TClient The type of the client. TConfig The type of the configuration."
  },
  "api/Kook.Net.Hosting.KookClientHostExtensions.html": {
    "href": "api/Kook.Net.Hosting.KookClientHostExtensions.html",
    "title": "Class KookClientHostExtensions | Kook.Net 文档",
    "keywords": "Class KookClientHostExtensions Namespace Kook.Net.Hosting Assembly Kook.Net.Hosting.dll Provides extension methods for Kook.Net to host clients using the IHost. public static class KookClientHostExtensions Inheritance object KookClientHostExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddHostedKookRestClient(IServiceCollection, KookRestConfig, TokenType, string, bool) Adds a KookRestClient to the specified IServiceCollection with the specified configuration action and login information. public static IServiceCollection AddHostedKookRestClient(this IServiceCollection services, KookRestConfig config, TokenType tokenType, string token, bool validateToken = true) Parameters services IServiceCollection The IServiceCollection to add the services. config KookRestConfig The action to configure the KookRestConfig. tokenType TokenType The type of token to use. token string The token to use. validateToken bool Whether to validate the token before logging in. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddHostedKookRestClient(IServiceCollection, KookRestConfig, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) Adds a KookRestClient to the specified IServiceCollection with the specified configuration action and login information. public static IServiceCollection AddHostedKookRestClient(this IServiceCollection services, KookRestConfig config, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) Parameters services IServiceCollection The IServiceCollection to add the services. config KookRestConfig The action to configure the KookRestConfig. tokenType Func<IServiceProvider, TokenType> The type of token to use. token Func<IServiceProvider, string> The token to use. validateToken Func<IServiceProvider, bool> Whether to validate the token before logging in. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddHostedKookRestClient(IServiceCollection, Action<KookRestConfig>, TokenType, string, bool) Adds a KookRestClient to the specified IServiceCollection with the specified configuration action and login information. public static IServiceCollection AddHostedKookRestClient(this IServiceCollection services, Action<KookRestConfig> configure, TokenType tokenType, string token, bool validateToken = true) Parameters services IServiceCollection The IServiceCollection to add the services. configure Action<KookRestConfig> The action to configure the KookRestConfig. tokenType TokenType The type of token to use. token string The token to use. validateToken bool Whether to validate the token before logging in. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddHostedKookRestClient(IServiceCollection, Action<KookRestConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) Adds a KookRestClient to the specified IServiceCollection with the specified configuration action and login information. public static IServiceCollection AddHostedKookRestClient(this IServiceCollection services, Action<KookRestConfig> configure, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) Parameters services IServiceCollection The IServiceCollection to add the services. configure Action<KookRestConfig> The action to configure the KookRestConfig. tokenType Func<IServiceProvider, TokenType> The type of token to use. token Func<IServiceProvider, string> The token to use. validateToken Func<IServiceProvider, bool> Whether to validate the token before logging in. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddHostedKookSocketClient(IServiceCollection, KookSocketConfig, TokenType, string, bool) Adds a KookSocketClient to the specified IServiceCollection with the specified configuration action and login information. public static IServiceCollection AddHostedKookSocketClient(this IServiceCollection services, KookSocketConfig config, TokenType tokenType, string token, bool validateToken = true) Parameters services IServiceCollection The IServiceCollection to add the services. config KookSocketConfig The action to configure the KookSocketConfig. tokenType TokenType The type of token to use. token string The token to use. validateToken bool Whether to validate the token before logging in. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddHostedKookSocketClient(IServiceCollection, KookSocketConfig, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) Adds a KookSocketClient to the specified IServiceCollection with the specified configuration action and login information. public static IServiceCollection AddHostedKookSocketClient(this IServiceCollection services, KookSocketConfig config, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) Parameters services IServiceCollection The IServiceCollection to add the services. config KookSocketConfig The action to configure the KookSocketConfig. tokenType Func<IServiceProvider, TokenType> The type of token to use. token Func<IServiceProvider, string> The token to use. validateToken Func<IServiceProvider, bool> Whether to validate the token before logging in. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddHostedKookSocketClient(IServiceCollection, Action<KookSocketConfig>, TokenType, string, bool) Adds a KookSocketClient to the specified IServiceCollection with the specified configuration action and login information. public static IServiceCollection AddHostedKookSocketClient(this IServiceCollection services, Action<KookSocketConfig> configure, TokenType tokenType, string token, bool validateToken = true) Parameters services IServiceCollection The IServiceCollection to add the services. configure Action<KookSocketConfig> The action to configure the KookSocketConfig. tokenType TokenType The type of token to use. token string The token to use. validateToken bool Whether to validate the token before logging in. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddHostedKookSocketClient(IServiceCollection, Action<KookSocketConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) Adds a KookSocketClient to the specified IServiceCollection with the specified configuration action and login information. public static IServiceCollection AddHostedKookSocketClient(this IServiceCollection services, Action<KookSocketConfig> configure, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) Parameters services IServiceCollection The IServiceCollection to add the services. configure Action<KookSocketConfig> The action to configure the KookSocketConfig. tokenType Func<IServiceProvider, TokenType> The type of token to use. token Func<IServiceProvider, string> The token to use. validateToken Func<IServiceProvider, bool> Whether to validate the token before logging in. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddHostedKookWebhookClient<TClient, TConfig>(IServiceCollection, Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>, TokenType, string, bool) Adds a KookWebhookClient to the specified IServiceCollection with public static IServiceCollection AddHostedKookWebhookClient<TClient, TConfig>(this IServiceCollection services, Func<IServiceProvider, IOptions<TConfig>, TClient> clientFactory, Action<TConfig> configure, TokenType tokenType, string token, bool validateToken = true) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters services IServiceCollection The IServiceCollection to add the services. clientFactory Func<IServiceProvider, IOptions<TConfig>, TClient> The factory to create the KookWebhookClient. configure Action<TConfig> The action to configure the KookWebhookConfig. tokenType TokenType The type of token to use. token string The token to use. validateToken bool Whether to validate the token before logging in. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. Type Parameters TClient The type of the KookWebhookClient. TConfig The type of the KookWebhookConfig. AddHostedKookWebhookClient<TClient, TConfig>(IServiceCollection, Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) Adds a KookWebhookClient to the specified IServiceCollection with public static IServiceCollection AddHostedKookWebhookClient<TClient, TConfig>(this IServiceCollection services, Func<IServiceProvider, IOptions<TConfig>, TClient> clientFactory, Action<TConfig> configure, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters services IServiceCollection The IServiceCollection to add the services. clientFactory Func<IServiceProvider, IOptions<TConfig>, TClient> The factory to create the KookWebhookClient. configure Action<TConfig> The action to configure the KookWebhookConfig. tokenType Func<IServiceProvider, TokenType> The type of token to use. token Func<IServiceProvider, string> The token to use. validateToken Func<IServiceProvider, bool> Whether to validate the token before logging in. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. Type Parameters TClient The type of the KookWebhookClient. TConfig The type of the KookWebhookConfig. AddHostedKookWebhookClient<TClient, TConfig>(IServiceCollection, Func<IServiceProvider, TConfig, TClient>, TConfig, TokenType, string, bool) Adds a KookWebhookClient to the specified IServiceCollection with public static IServiceCollection AddHostedKookWebhookClient<TClient, TConfig>(this IServiceCollection services, Func<IServiceProvider, TConfig, TClient> clientFactory, TConfig config, TokenType tokenType, string token, bool validateToken = true) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters services IServiceCollection The IServiceCollection to add the services. clientFactory Func<IServiceProvider, TConfig, TClient> The factory to create the KookWebhookClient. config TConfig The action to configure the KookWebhookConfig. tokenType TokenType The type of token to use. token string The token to use. validateToken bool Whether to validate the token before logging in. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. Type Parameters TClient The type of the KookWebhookClient. TConfig The type of the KookWebhookConfig. AddHostedKookWebhookClient<TClient, TConfig>(IServiceCollection, Func<IServiceProvider, TConfig, TClient>, TConfig, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) Adds a KookWebhookClient to the specified IServiceCollection with public static IServiceCollection AddHostedKookWebhookClient<TClient, TConfig>(this IServiceCollection services, Func<IServiceProvider, TConfig, TClient> clientFactory, TConfig config, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters services IServiceCollection The IServiceCollection to add the services. clientFactory Func<IServiceProvider, TConfig, TClient> The factory to create the KookWebhookClient. config TConfig The action to configure the KookWebhookConfig. tokenType Func<IServiceProvider, TokenType> The type of token to use. token Func<IServiceProvider, string> The token to use. validateToken Func<IServiceProvider, bool> Whether to validate the token before logging in. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. Type Parameters TClient The type of the KookWebhookClient. TConfig The type of the KookWebhookConfig."
  },
  "api/Kook.Net.Hosting.html": {
    "href": "api/Kook.Net.Hosting.html",
    "title": "Namespace Kook.Net.Hosting | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Hosting Classes KookClientConfiguratorExtensions Provides extension methods for IKookClientConfigurator<TClient, TConfig> to configure hosted clients. KookClientHostExtensions Provides extension methods for Kook.Net to host clients using the IHost."
  },
  "api/Kook.Net.HttpException.html": {
    "href": "api/Kook.Net.HttpException.html",
    "title": "Class HttpException | Kook.Net 文档",
    "keywords": "Class HttpException Namespace Kook.Net Assembly Kook.Net.Core.dll The exception that is thrown if an error occurs while processing an Kook HTTP request. public class HttpException : Exception, ISerializable Inheritance object Exception HttpException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors HttpException(HttpStatusCode, IRequest, KookErrorCode?, string?, KookJsonError[]?) Initializes a new instance of the HttpException class. public HttpException(HttpStatusCode httpCode, IRequest request, KookErrorCode? kookCode = null, string? reason = null, KookJsonError[]? errors = null) Parameters httpCode HttpStatusCode The HTTP status code returned. request IRequest The request that was sent prior to the exception. kookCode KookErrorCode? The Kook status code returned. reason string The reason behind the exception. errors KookJsonError[] A collection of json errors describing what went wrong with the request. Properties Errors Gets a collection of json errors describing what went wrong with the request. public IReadOnlyCollection<KookJsonError> Errors { get; } Property Value IReadOnlyCollection<KookJsonError> HttpCode Gets the HTTP status code returned by Kook. public HttpStatusCode HttpCode { get; } Property Value HttpStatusCode An HTTP status code from Kook. KookCode Gets the JSON error code returned by Kook. public KookErrorCode? KookCode { get; } Property Value KookErrorCode? A JSON error code from Kook, or null if none. Reason Gets the reason of the exception. public string? Reason { get; } Property Value string Request Gets the request object used to send the request. public IRequest Request { get; } Property Value IRequest"
  },
  "api/Kook.Net.IRequest.html": {
    "href": "api/Kook.Net.IRequest.html",
    "title": "Interface IRequest | Kook.Net 文档",
    "keywords": "Interface IRequest Namespace Kook.Net Assembly Kook.Net.Core.dll Represents a generic request to be sent to Kook. public interface IRequest Properties Options Gets the options to be used when sending the request. RequestOptions Options { get; } Property Value RequestOptions TimeoutAt Gets how long the request should wait before timing out. DateTimeOffset? TimeoutAt { get; } Property Value DateTimeOffset?"
  },
  "api/Kook.Net.Queue.BaseMessageQueue.html": {
    "href": "api/Kook.Net.Queue.BaseMessageQueue.html",
    "title": "Class BaseMessageQueue | Kook.Net 文档",
    "keywords": "Class BaseMessageQueue Namespace Kook.Net.Queue Assembly Kook.Net.Core.dll Represents a base class for message queue. public abstract class BaseMessageQueue : IMessageQueue Inheritance object BaseMessageQueue Implements IMessageQueue Derived SynchronousImmediateMessageQueue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseMessageQueue(Func<JsonElement, Task>) Initializes a new instance of the BaseMessageQueue class. protected BaseMessageQueue(Func<JsonElement, Task> eventHandler) Parameters eventHandler Func<JsonElement, Task> The event handler for the message queue. Properties EventHandler Gets the event handler for the message queue. protected Func<JsonElement, Task> EventHandler { get; } Property Value Func<JsonElement, Task> Methods EnqueueAsync(JsonElement, int, CancellationToken) Enqueues a message to the queue. public abstract Task EnqueueAsync(JsonElement payload, int sequence, CancellationToken cancellationToken = default) Parameters payload JsonElement The payload of the message. sequence int The sequence of the message. cancellationToken CancellationToken Returns Task A task that represents the asynchronous operation. StartAsync(CancellationToken) Starts the message queue processing. public abstract Task StartAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task A task that represents the asynchronous operation. StopAsync(CancellationToken) Stops the message queue processing. public abstract Task StopAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task A task that represents the asynchronous operation."
  },
  "api/Kook.Net.Queue.IMessageQueue.html": {
    "href": "api/Kook.Net.Queue.IMessageQueue.html",
    "title": "Interface IMessageQueue | Kook.Net 文档",
    "keywords": "Interface IMessageQueue Namespace Kook.Net.Queue Assembly Kook.Net.Core.dll Represents a message queue used to send and receive messages from KOOK gateway. public interface IMessageQueue Methods EnqueueAsync(JsonElement, int, CancellationToken) Enqueues a message to the queue. Task EnqueueAsync(JsonElement payload, int sequence, CancellationToken cancellationToken = default) Parameters payload JsonElement The payload of the message. sequence int The sequence of the message. cancellationToken CancellationToken Returns Task A task that represents the asynchronous operation."
  },
  "api/Kook.Net.Queue.InMemory.InMemoryMessageQueueProvider.html": {
    "href": "api/Kook.Net.Queue.InMemory.InMemoryMessageQueueProvider.html",
    "title": "Class InMemoryMessageQueueProvider | Kook.Net 文档",
    "keywords": "Class InMemoryMessageQueueProvider Namespace Kook.Net.Queue.InMemory Assembly Kook.Net.MessageQueue.InMemory.dll Represents a delegate that provides a new IMessageQueue instance of InMemoryMessageQueue. public static class InMemoryMessageQueueProvider Inheritance object InMemoryMessageQueueProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance A delegate that creates a default MessageQueueProvider instance. public static readonly MessageQueueProvider Instance Field Value MessageQueueProvider"
  },
  "api/Kook.Net.Queue.InMemory.html": {
    "href": "api/Kook.Net.Queue.InMemory.html",
    "title": "Namespace Kook.Net.Queue.InMemory | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Queue.InMemory Classes InMemoryMessageQueueProvider Represents a delegate that provides a new IMessageQueue instance of InMemoryMessageQueue."
  },
  "api/Kook.Net.Queue.MassTransit.DefaultMassTransitMessageQueueProvider.html": {
    "href": "api/Kook.Net.Queue.MassTransit.DefaultMassTransitMessageQueueProvider.html",
    "title": "Class DefaultMassTransitMessageQueueProvider | Kook.Net 文档",
    "keywords": "Class DefaultMassTransitMessageQueueProvider Namespace Kook.Net.Queue.MassTransit Assembly Kook.Net.MessageQueue.MassTransit.dll Represents a delegate that provides a new IMessageQueue instance of MassTransitMessageQueue. public class DefaultMassTransitMessageQueueProvider Inheritance object DefaultMassTransitMessageQueueProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(IBus) Creates a delegate that provides a new IMessageQueue instance of MassTransitMessageQueue. public static MessageQueueProvider Create(IBus bus) Parameters bus IBus The MassTransit bus. Returns MessageQueueProvider A new IMessageQueue instance of MassTransitMessageQueue. Exceptions PlatformNotSupportedException The default DefaultMassTransitMessageQueueProvider is not supported on this platform."
  },
  "api/Kook.Net.Queue.MassTransit.KookMassTransitMessageQueueExtensions.html": {
    "href": "api/Kook.Net.Queue.MassTransit.KookMassTransitMessageQueueExtensions.html",
    "title": "Class KookMassTransitMessageQueueExtensions | Kook.Net 文档",
    "keywords": "Class KookMassTransitMessageQueueExtensions Namespace Kook.Net.Queue.MassTransit Assembly Kook.Net.MessageQueue.MassTransit.dll Provides extension methods for IKookClientConfigurator<TClient, TConfig> to configure MassTransit message queues. public static class KookMassTransitMessageQueueExtensions Inheritance object KookMassTransitMessageQueueExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddMessageQueueMassTransitConsumer(IBusRegistrationConfigurator) Adds a MassTransit message queue consumer to the MassTransit.IBusRegistrationConfigurator. public static IBusRegistrationConfigurator AddMessageQueueMassTransitConsumer(this IBusRegistrationConfigurator configurator) Parameters configurator IBusRegistrationConfigurator The configurator. Returns IBusRegistrationConfigurator The configurator. UseMassTransitMessageQueue<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>) Configures a Kook client to use a MassTransit message queue. public static IKookClientConfigurator<TClient, TConfig> UseMassTransitMessageQueue<TClient, TConfig>(this IKookClientConfigurator<TClient, TConfig> configurator) where TClient : BaseSocketClient where TConfig : KookSocketConfig Parameters configurator IKookClientConfigurator<TClient, TConfig> The configurator. Returns IKookClientConfigurator<TClient, TConfig> The configurator. Type Parameters TClient TConfig UseMassTransitMessageQueue<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, Action<IBusRegistrationConfigurator>) Configures a Kook client to use a MassTransit message queue. public static IKookClientConfigurator<TClient, TConfig> UseMassTransitMessageQueue<TClient, TConfig>(this IKookClientConfigurator<TClient, TConfig> configurator, Action<IBusRegistrationConfigurator> massTransitConfigure) where TClient : BaseSocketClient where TConfig : KookSocketConfig Parameters configurator IKookClientConfigurator<TClient, TConfig> The configurator. massTransitConfigure Action<IBusRegistrationConfigurator> The MassTransit configuration action. Returns IKookClientConfigurator<TClient, TConfig> The configurator. Type Parameters TClient TConfig"
  },
  "api/Kook.Net.Queue.MassTransit.html": {
    "href": "api/Kook.Net.Queue.MassTransit.html",
    "title": "Namespace Kook.Net.Queue.MassTransit | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Queue.MassTransit Classes DefaultMassTransitMessageQueueProvider Represents a delegate that provides a new IMessageQueue instance of MassTransitMessageQueue. KookMassTransitMessageQueueExtensions Provides extension methods for IKookClientConfigurator<TClient, TConfig> to configure MassTransit message queues."
  },
  "api/Kook.Net.Queue.MessageQueueProvider.html": {
    "href": "api/Kook.Net.Queue.MessageQueueProvider.html",
    "title": "Delegate MessageQueueProvider | Kook.Net 文档",
    "keywords": "Delegate MessageQueueProvider Namespace Kook.Net.Queue Assembly Kook.Net.Core.dll Represents a delegate that provides a new IMessageQueue instance. public delegate BaseMessageQueue MessageQueueProvider(Func<JsonElement, Task> eventHandler) Parameters eventHandler Func<JsonElement, Task> Represents a delegate that provides a new instance. Returns BaseMessageQueue Represents a delegate that provides a new instance."
  },
  "api/Kook.Net.Queue.SynchronousImmediate.SynchronousImmediateMessageQueue.html": {
    "href": "api/Kook.Net.Queue.SynchronousImmediate.SynchronousImmediateMessageQueue.html",
    "title": "Class SynchronousImmediateMessageQueue | Kook.Net 文档",
    "keywords": "Class SynchronousImmediateMessageQueue Namespace Kook.Net.Queue.SynchronousImmediate Assembly Kook.Net.Core.dll Represents a synchronous immediate message queue. public class SynchronousImmediateMessageQueue : BaseMessageQueue, IMessageQueue Inheritance object BaseMessageQueue SynchronousImmediateMessageQueue Implements IMessageQueue Inherited Members BaseMessageQueue.EventHandler object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SynchronousImmediateMessageQueue(Func<JsonElement, Task>) Initializes a new instance of the BaseMessageQueue class. public SynchronousImmediateMessageQueue(Func<JsonElement, Task> eventHandler) Parameters eventHandler Func<JsonElement, Task> The event handler for the message queue. Methods EnqueueAsync(JsonElement, int, CancellationToken) Enqueues a message to the queue. public override Task EnqueueAsync(JsonElement payload, int sequence, CancellationToken cancellationToken = default) Parameters payload JsonElement The payload of the message. sequence int The sequence of the message. cancellationToken CancellationToken Returns Task A task that represents the asynchronous operation. StartAsync(CancellationToken) Starts the message queue processing. public override Task StartAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task A task that represents the asynchronous operation. StopAsync(CancellationToken) Stops the message queue processing. public override Task StopAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task A task that represents the asynchronous operation."
  },
  "api/Kook.Net.Queue.SynchronousImmediate.SynchronousImmediateMessageQueueProvider.html": {
    "href": "api/Kook.Net.Queue.SynchronousImmediate.SynchronousImmediateMessageQueueProvider.html",
    "title": "Class SynchronousImmediateMessageQueueProvider | Kook.Net 文档",
    "keywords": "Class SynchronousImmediateMessageQueueProvider Namespace Kook.Net.Queue.SynchronousImmediate Assembly Kook.Net.Core.dll Represents a delegate that provides a new IMessageQueue instance of SynchronousImmediateMessageQueue. public static class SynchronousImmediateMessageQueueProvider Inheritance object SynchronousImmediateMessageQueueProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance A delegate that creates a default MessageQueueProvider instance. public static readonly MessageQueueProvider Instance Field Value MessageQueueProvider"
  },
  "api/Kook.Net.Queue.SynchronousImmediate.html": {
    "href": "api/Kook.Net.Queue.SynchronousImmediate.html",
    "title": "Namespace Kook.Net.Queue.SynchronousImmediate | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Queue.SynchronousImmediate Classes SynchronousImmediateMessageQueue Represents a synchronous immediate message queue. SynchronousImmediateMessageQueueProvider Represents a delegate that provides a new IMessageQueue instance of SynchronousImmediateMessageQueue."
  },
  "api/Kook.Net.Queue.html": {
    "href": "api/Kook.Net.Queue.html",
    "title": "Namespace Kook.Net.Queue | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Queue Classes BaseMessageQueue Represents a base class for message queue. Interfaces IMessageQueue Represents a message queue used to send and receive messages from KOOK gateway. Delegates MessageQueueProvider Represents a delegate that provides a new IMessageQueue instance."
  },
  "api/Kook.Net.RateLimitInfo.html": {
    "href": "api/Kook.Net.RateLimitInfo.html",
    "title": "Struct RateLimitInfo | Kook.Net 文档",
    "keywords": "Struct RateLimitInfo Namespace Kook.Net Assembly Kook.Net.Rest.dll Represents a REST-Based ratelimit info. public struct RateLimitInfo : IRateLimitInfo Implements IRateLimitInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Bucket Gets a unique string denoting the rate limit being encountered (non-inclusive of major parameters in the route path). public readonly string? Bucket { get; } Property Value string Endpoint Gets the endpoint that this ratelimit info came from. public readonly string Endpoint { get; } Property Value string IsGlobal Gets whether this ratelimit info is global. public readonly bool IsGlobal { get; } Property Value bool Lag Gets the amount of lag for the request. This is used to denote the precise time of when the ratelimit expires. public readonly TimeSpan? Lag { get; } Property Value TimeSpan? Limit Gets the number of requests that can be made. public readonly int? Limit { get; } Property Value int? Remaining Gets the number of remaining requests that can be made. public readonly int? Remaining { get; } Property Value int? ResetAfter Gets the absolute time when this ratelimit resets. public readonly TimeSpan? ResetAfter { get; } Property Value TimeSpan?"
  },
  "api/Kook.Net.RateLimitedException.html": {
    "href": "api/Kook.Net.RateLimitedException.html",
    "title": "Class RateLimitedException | Kook.Net 文档",
    "keywords": "Class RateLimitedException Namespace Kook.Net Assembly Kook.Net.Core.dll The exception that is thrown when the user is being rate limited by Kook. public class RateLimitedException : TimeoutException, ISerializable Inheritance object Exception SystemException TimeoutException RateLimitedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RateLimitedException(IRequest) Initializes a new instance of the RateLimitedException class using the request sent. public RateLimitedException(IRequest request) Parameters request IRequest Properties Request Gets the request object used to send the request. public IRequest Request { get; } Property Value IRequest"
  },
  "api/Kook.Net.Rest.DefaultRestClientProvider.html": {
    "href": "api/Kook.Net.Rest.DefaultRestClientProvider.html",
    "title": "Class DefaultRestClientProvider | Kook.Net 文档",
    "keywords": "Class DefaultRestClientProvider Namespace Kook.Net.Rest Assembly Kook.Net.Rest.dll Represents a default RestClientProvider that creates DefaultRestClient instances. public static class DefaultRestClientProvider Inheritance object DefaultRestClientProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance Gets a RestClientProvider delegate that creates IRestClient instances. public static readonly RestClientProvider Instance Field Value RestClientProvider Methods Create(bool) Creates a delegate that creates a new DefaultRestClient instance. public static RestClientProvider Create(bool useProxy = false) Parameters useProxy bool Whether to use the system proxy. Returns RestClientProvider A delegate that creates a new DefaultRestClient instance."
  },
  "api/Kook.Net.Rest.IRestClient.html": {
    "href": "api/Kook.Net.Rest.IRestClient.html",
    "title": "Interface IRestClient | Kook.Net 文档",
    "keywords": "Interface IRestClient Namespace Kook.Net.Rest Assembly Kook.Net.Core.dll Represents a generic REST-based client. public interface IRestClient : IDisposable Inherited Members IDisposable.Dispose() Methods SendAsync(HttpMethod, string, IReadOnlyDictionary<string, object>, CancellationToken, string?, IEnumerable<KeyValuePair<string, IEnumerable<string>>>?) Sends a REST request with multipart parameters. Task<RestResponse> SendAsync(HttpMethod method, string endpoint, IReadOnlyDictionary<string, object> multipartParams, CancellationToken cancellationToken, string? reason = null, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? requestHeaders = null) Parameters method HttpMethod The method used to send this request (see HttpMethod). endpoint string The endpoint to send this request to. multipartParams IReadOnlyDictionary<string, object> The multipart parameters. cancellationToken CancellationToken The cancellation token used to cancel the task. reason string The audit log reason. requestHeaders IEnumerable<KeyValuePair<string, IEnumerable<string>>> Additional headers to be sent with the request. Returns Task<RestResponse> A task that represents an asynchronous send operation. The task result contains the REST response of the request. SendAsync(HttpMethod, string, string, CancellationToken, string?, IEnumerable<KeyValuePair<string, IEnumerable<string>>>?) Sends a REST request with a JSON body. Task<RestResponse> SendAsync(HttpMethod method, string endpoint, string json, CancellationToken cancellationToken, string? reason = null, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? requestHeaders = null) Parameters method HttpMethod The method used to send this request (see HttpMethod). endpoint string The endpoint to send this request to. json string The JSON body of the request. cancellationToken CancellationToken The cancellation token used to cancel the task. reason string The audit log reason. requestHeaders IEnumerable<KeyValuePair<string, IEnumerable<string>>> Additional headers to be sent with the request. Returns Task<RestResponse> A task that represents an asynchronous send operation. The task result contains the REST response of the request. SendAsync(HttpMethod, string, CancellationToken, string?, IEnumerable<KeyValuePair<string, IEnumerable<string>>>?) Sends a REST request. Task<RestResponse> SendAsync(HttpMethod method, string endpoint, CancellationToken cancellationToken, string? reason = null, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? requestHeaders = null) Parameters method HttpMethod The method used to send this request (see HttpMethod). endpoint string The endpoint to send this request to. cancellationToken CancellationToken The cancellation token used to cancel the task. reason string The audit log reason. requestHeaders IEnumerable<KeyValuePair<string, IEnumerable<string>>> Additional headers to be sent with the request. Returns Task<RestResponse> A task that represents an asynchronous send operation. The task result contains the REST response of the request. SetCancellationToken(CancellationToken) Sets the cancellation token for this client. void SetCancellationToken(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The cancellation token. SetHeader(string, string?) Sets the HTTP header of this client for all requests. void SetHeader(string key, string? value) Parameters key string The field name of the header. value string The value of the header."
  },
  "api/Kook.Net.Rest.RestClientProvider.html": {
    "href": "api/Kook.Net.Rest.RestClientProvider.html",
    "title": "Delegate RestClientProvider | Kook.Net 文档",
    "keywords": "Delegate RestClientProvider Namespace Kook.Net.Rest Assembly Kook.Net.Core.dll Represents a delegate that provides a IRestClient instance. public delegate IRestClient RestClientProvider(string baseUrl) Parameters baseUrl string Represents a delegate that provides a instance. Returns IRestClient Represents a delegate that provides a instance."
  },
  "api/Kook.Net.Rest.RestResponse.html": {
    "href": "api/Kook.Net.Rest.RestResponse.html",
    "title": "Struct RestResponse | Kook.Net 文档",
    "keywords": "Struct RestResponse Namespace Kook.Net.Rest Assembly Kook.Net.Core.dll Represents a REST response. public struct RestResponse Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Headers Gets the headers of the response. public readonly Dictionary<string, string?> Headers { get; } Property Value Dictionary<string, string> MediaTypeHeader Gets the media type header of the response. public readonly MediaTypeHeaderValue? MediaTypeHeader { get; } Property Value MediaTypeHeaderValue StatusCode Gets the status code of the response. public readonly HttpStatusCode StatusCode { get; } Property Value HttpStatusCode Stream Gets the stream of the response. public readonly Stream Stream { get; } Property Value Stream"
  },
  "api/Kook.Net.Rest.html": {
    "href": "api/Kook.Net.Rest.html",
    "title": "Namespace Kook.Net.Rest | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Rest Classes DefaultRestClientProvider Represents a default RestClientProvider that creates DefaultRestClient instances. Structs RestResponse Represents a REST response. Interfaces IRestClient Represents a generic REST-based client. Delegates RestClientProvider Represents a delegate that provides a IRestClient instance."
  },
  "api/Kook.Net.Udp.DefaultUdpSocketProvider.html": {
    "href": "api/Kook.Net.Udp.DefaultUdpSocketProvider.html",
    "title": "Class DefaultUdpSocketProvider | Kook.Net 文档",
    "keywords": "Class DefaultUdpSocketProvider Namespace Kook.Net.Udp Assembly Kook.Net.WebSocket.dll Represents a delegate that provides a IUdpSocket instance. public static class DefaultUdpSocketProvider Inheritance object DefaultUdpSocketProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance A delegate that creates a default UdpSocketProvider instance. public static readonly UdpSocketProvider Instance Field Value UdpSocketProvider"
  },
  "api/Kook.Net.Udp.IUdpSocket.html": {
    "href": "api/Kook.Net.Udp.IUdpSocket.html",
    "title": "Interface IUdpSocket | Kook.Net 文档",
    "keywords": "Interface IUdpSocket Namespace Kook.Net.Udp Assembly Kook.Net.Core.dll Represents a generic UDP socket. public interface IUdpSocket : IDisposable Inherited Members IDisposable.Dispose() Properties Port Gets the port of the socket. ushort Port { get; } Property Value ushort Methods SendAsync(byte[], int, int) Sends a datagram. Task SendAsync(byte[] data, int index, int count) Parameters data byte[] The data to send. index int The index of the data to start sending from. count int The number of bytes to send. Returns Task A task that represents the asynchronous operation. SetCancellationToken(CancellationToken) Sets the cancellation token. void SetCancellationToken(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The cancellation token. SetDestination(string, int) Sets the destination of the socket. void SetDestination(string ip, int port) Parameters ip string The IP address of the destination. port int The port of the destination. StartAsync() Starts the socket. Task StartAsync() Returns Task A task that represents the asynchronous operation. StopAsync() Stops the socket. Task StopAsync() Returns Task A task that represents the asynchronous operation. Events ReceivedDatagram Fired when a datagram is received. event Func<byte[], int, int, Task>? ReceivedDatagram Event Type Func<byte[], int, int, Task>"
  },
  "api/Kook.Net.Udp.UdpSocketProvider.html": {
    "href": "api/Kook.Net.Udp.UdpSocketProvider.html",
    "title": "Delegate UdpSocketProvider | Kook.Net 文档",
    "keywords": "Delegate UdpSocketProvider Namespace Kook.Net.Udp Assembly Kook.Net.Core.dll Represents a delegate that provides a new IUdpSocket instance. public delegate IUdpSocket UdpSocketProvider() Returns IUdpSocket Represents a delegate that provides a new instance."
  },
  "api/Kook.Net.Udp.html": {
    "href": "api/Kook.Net.Udp.html",
    "title": "Namespace Kook.Net.Udp | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Udp Classes DefaultUdpSocketProvider Represents a delegate that provides a IUdpSocket instance. Interfaces IUdpSocket Represents a generic UDP socket. Delegates UdpSocketProvider Represents a delegate that provides a new IUdpSocket instance."
  },
  "api/Kook.Net.WebSocketClosedException.html": {
    "href": "api/Kook.Net.WebSocketClosedException.html",
    "title": "Class WebSocketClosedException | Kook.Net 文档",
    "keywords": "Class WebSocketClosedException Namespace Kook.Net Assembly Kook.Net.Core.dll The exception that is thrown when the WebSocket session is closed by Kook. public class WebSocketClosedException : Exception, ISerializable Inheritance object Exception WebSocketClosedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WebSocketClosedException(int?, string?) Initializes a new instance of the WebSocketClosedException using a Kook close code and an optional reason. public WebSocketClosedException(int? closeCode, string? reason = null) Parameters closeCode int? reason string Properties CloseCode Gets the close code sent by Kook. public int? CloseCode { get; } Property Value int? A close code from Kook. See https://developer.kookapp.cn/doc/websocket Reason Gets the reason of the interruption. public string? Reason { get; } Property Value string"
  },
  "api/Kook.Net.WebSockets.DefaultWebSocketProvider.html": {
    "href": "api/Kook.Net.WebSockets.DefaultWebSocketProvider.html",
    "title": "Class DefaultWebSocketProvider | Kook.Net 文档",
    "keywords": "Class DefaultWebSocketProvider Namespace Kook.Net.WebSockets Assembly Kook.Net.WebSocket.dll Represents a default WebSocketProvider that creates DefaultWebSocketClient instances. public static class DefaultWebSocketProvider Inheritance object DefaultWebSocketProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance A delegate that creates a default WebSocketProvider instance. public static readonly WebSocketProvider Instance Field Value WebSocketProvider Methods Create(IWebProxy?) Creates a delegate that creates a new DefaultWebSocketClient instance. public static WebSocketProvider Create(IWebProxy? proxy = null) Parameters proxy IWebProxy The proxy to use. Returns WebSocketProvider A delegate that creates a new DefaultWebSocketClient instance. Exceptions PlatformNotSupportedException The default WebSocketProvider is not supported on this platform."
  },
  "api/Kook.Net.WebSockets.IWebSocketClient.html": {
    "href": "api/Kook.Net.WebSockets.IWebSocketClient.html",
    "title": "Interface IWebSocketClient | Kook.Net 文档",
    "keywords": "Interface IWebSocketClient Namespace Kook.Net.WebSockets Assembly Kook.Net.Core.dll Represents a generic WebSocket client. public interface IWebSocketClient : IDisposable Inherited Members IDisposable.Dispose() Methods ConnectAsync(string) Connects to the specified host. Task ConnectAsync(string host) Parameters host string The host to connect to. Returns Task A task that represents an asynchronous connect operation. DisconnectAsync(int) Disconnects from the host. Task DisconnectAsync(int closeCode = 1000) Parameters closeCode int The close code to be sent to the host. Returns Task A task that represents an asynchronous disconnect operation. SendAsync(byte[], int, int, bool) Sends a message to the host. Task SendAsync(byte[] data, int index, int count, bool isText) Parameters data byte[] The data to be sent. index int The index of the data to start sending from. count int The amount of data to send. isText bool Whether the data is text or binary. Returns Task A task that represents an asynchronous send operation. SetCancellationToken(CancellationToken) Sets the cancellation token for this client. void SetCancellationToken(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The cancellation token to be used. SetHeader(string, string) Sets a header to be sent with the future requests. void SetHeader(string key, string value) Parameters key string The field name of the header. value string The value of the header. SetKeepAliveInterval(TimeSpan) Sets the keep-alive interval for this client. void SetKeepAliveInterval(TimeSpan keepAliveInterval) Parameters keepAliveInterval TimeSpan The keep-alive interval to be used. Remarks If this method is not called, the default keep-alive interval will be DefaultKeepAliveInterval. Events BinaryMessage Fired when a binary message is received. event Func<byte[], int, int, Task>? BinaryMessage Event Type Func<byte[], int, int, Task> Closed Fired when the WebSocket connection is closed. event Func<Exception, Task>? Closed Event Type Func<Exception, Task> TextMessage Fired when a text message is received. event Func<string, Task>? TextMessage Event Type Func<string, Task>"
  },
  "api/Kook.Net.WebSockets.WebSocketProvider.html": {
    "href": "api/Kook.Net.WebSockets.WebSocketProvider.html",
    "title": "Delegate WebSocketProvider | Kook.Net 文档",
    "keywords": "Delegate WebSocketProvider Namespace Kook.Net.WebSockets Assembly Kook.Net.Core.dll Represents a delegate that provides a new IWebSocketClient instance. public delegate IWebSocketClient WebSocketProvider() Returns IWebSocketClient Represents a delegate that provides a new instance."
  },
  "api/Kook.Net.WebSockets.html": {
    "href": "api/Kook.Net.WebSockets.html",
    "title": "Namespace Kook.Net.WebSockets | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.WebSockets Classes DefaultWebSocketProvider Represents a default WebSocketProvider that creates DefaultWebSocketClient instances. Interfaces IWebSocketClient Represents a generic WebSocket client. Delegates WebSocketProvider Represents a delegate that provides a new IWebSocketClient instance."
  },
  "api/Kook.Net.Webhooks.AspNet.DefaultAspNetWebhookProvider.html": {
    "href": "api/Kook.Net.Webhooks.AspNet.DefaultAspNetWebhookProvider.html",
    "title": "Class DefaultAspNetWebhookProvider | Kook.Net 文档",
    "keywords": "Class DefaultAspNetWebhookProvider Namespace Kook.Net.Webhooks.AspNet Assembly Kook.Net.Webhook.AspNet.dll Represents a default WebhookProvider that creates AspNetWebhookClient instances. public static class DefaultAspNetWebhookProvider Inheritance object DefaultAspNetWebhookProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance A delegate that creates a default WebhookProvider instance. public static readonly WebhookProvider Instance Field Value WebhookProvider Methods Create() Creates a delegate that creates a new AspNetWebhookClient instance. public static WebhookProvider Create() Returns WebhookProvider A delegate that creates a new AspNetWebhookClient instance. Exceptions PlatformNotSupportedException The default WebhookProvider is not supported on this platform."
  },
  "api/Kook.Net.Webhooks.AspNet.html": {
    "href": "api/Kook.Net.Webhooks.AspNet.html",
    "title": "Namespace Kook.Net.Webhooks.AspNet | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Webhooks.AspNet Classes DefaultAspNetWebhookProvider Represents a default WebhookProvider that creates AspNetWebhookClient instances."
  },
  "api/Kook.Net.Webhooks.HttpListener.DefaultHttpListenerWebhookProvider.html": {
    "href": "api/Kook.Net.Webhooks.HttpListener.DefaultHttpListenerWebhookProvider.html",
    "title": "Class DefaultHttpListenerWebhookProvider | Kook.Net 文档",
    "keywords": "Class DefaultHttpListenerWebhookProvider Namespace Kook.Net.Webhooks.HttpListener Assembly Kook.Net.Webhook.HttpListener.dll Represents a default WebhookProvider that creates HttpListenerWebhookClient instances. public static class DefaultHttpListenerWebhookProvider Inheritance object DefaultHttpListenerWebhookProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance A delegate that creates a default WebhookProvider instance. public static readonly WebhookProvider Instance Field Value WebhookProvider Methods Create() Creates a delegate that creates a new HttpListenerWebhookClient instance. public static WebhookProvider Create() Returns WebhookProvider A delegate that creates a new HttpListenerWebhookClient instance. Exceptions PlatformNotSupportedException The default WebhookProvider is not supported on this platform."
  },
  "api/Kook.Net.Webhooks.HttpListener.html": {
    "href": "api/Kook.Net.Webhooks.HttpListener.html",
    "title": "Namespace Kook.Net.Webhooks.HttpListener | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Webhooks.HttpListener Classes DefaultHttpListenerWebhookProvider Represents a default WebhookProvider that creates HttpListenerWebhookClient instances."
  },
  "api/Kook.Net.Webhooks.IWebhookClient.html": {
    "href": "api/Kook.Net.Webhooks.IWebhookClient.html",
    "title": "Interface IWebhookClient | Kook.Net 文档",
    "keywords": "Interface IWebhookClient Namespace Kook.Net.Webhooks Assembly Kook.Net.Webhook.dll Represents a generic WebSocket client. public interface IWebhookClient : IDisposable Inherited Members IDisposable.Dispose() Methods HandleBinaryMessageAsync(byte[], int, int) Handles a binary message. Task<string?> HandleBinaryMessageAsync(byte[] data, int index, int count) Parameters data byte[] The data. index int The index. count int The count. Returns Task<string> A task that represents the asynchronous operation. HandleTextMessageAsync(string) Handles a text message. Task<string?> HandleTextMessageAsync(string requestBody) Parameters requestBody string The request body. Returns Task<string> A task that represents the asynchronous operation. Events BinaryMessage Fired when a binary message is received. event Func<byte[], int, int, Task<string?>>? BinaryMessage Event Type Func<byte[], int, int, Task<string>> Closed Fired when the HttpListener is closed. event Func<Exception, Task>? Closed Event Type Func<Exception, Task> TextMessage Fired when a text message is received. event Func<string, Task<string?>>? TextMessage Event Type Func<string, Task<string>>"
  },
  "api/Kook.Net.Webhooks.WebhookProvider.html": {
    "href": "api/Kook.Net.Webhooks.WebhookProvider.html",
    "title": "Delegate WebhookProvider | Kook.Net 文档",
    "keywords": "Delegate WebhookProvider Namespace Kook.Net.Webhooks Assembly Kook.Net.Webhook.dll Represents a delegate that provides a new IWebhookClient instance. public delegate IWebhookClient WebhookProvider() Returns IWebhookClient Represents a delegate that provides a new instance."
  },
  "api/Kook.Net.Webhooks.html": {
    "href": "api/Kook.Net.Webhooks.html",
    "title": "Namespace Kook.Net.Webhooks | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Webhooks Interfaces IWebhookClient Represents a generic WebSocket client. Delegates WebhookProvider Represents a delegate that provides a new IWebhookClient instance."
  },
  "api/Kook.Net.html": {
    "href": "api/Kook.Net.html",
    "title": "Namespace Kook.Net | Kook.Net 文档",
    "keywords": "Namespace Kook.Net Classes BucketId Represents a ratelimit bucket. HttpException The exception that is thrown if an error occurs while processing an Kook HTTP request. RateLimitedException The exception that is thrown when the user is being rate limited by Kook. WebSocketClosedException The exception that is thrown when the WebSocket session is closed by Kook. Structs RateLimitInfo Represents a REST-Based ratelimit info. Interfaces IRequest Represents a generic request to be sent to Kook."
  },
  "api/Kook.NotImplementedEmbed.html": {
    "href": "api/Kook.NotImplementedEmbed.html",
    "title": "Struct NotImplementedEmbed | Kook.Net 文档",
    "keywords": "Struct NotImplementedEmbed Namespace Kook Assembly Kook.Net.Core.dll Represents a unimplemented embed. public struct NotImplementedEmbed : IEmbed Implements IEmbed Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties JsonNode Gets the raw JSON of the embed. public readonly JsonNode JsonNode { get; } Property Value JsonNode A JsonNode representing the raw JSON of the embed. RawType Gets the type of the embed. public readonly string RawType { get; } Property Value string A string representing the type of the embed. Remarks This value originally came from the type field of the JsonNode. Type Gets the type of this embed. public EmbedType Type { get; } Property Value EmbedType A EmbedType that represents the type of this embed. Methods Resolve<T>(Func<NotImplementedEmbed, T>) Resolves the embed to a concrete type via delegate. public T Resolve<T>(Func<NotImplementedEmbed, T> resolvingFunc) where T : IEmbed Parameters resolvingFunc Func<NotImplementedEmbed, T> The resolving function to use when resolves the embed. Returns T A T representing the resolved embed. Type Parameters T The concrete type to deserialize the embed to. Resolve<T>(JsonSerializerOptions?) Resolves the embed to a concrete type via JSON deserialization. public T? Resolve<T>(JsonSerializerOptions? options = null) where T : IEmbed Parameters options JsonSerializerOptions The options to use when deserializing the embed. Returns T A T representing the resolved embed. Type Parameters T The concrete type to deserialize the embed to."
  },
  "api/Kook.NotImplementedPokeResource.html": {
    "href": "api/Kook.NotImplementedPokeResource.html",
    "title": "Struct NotImplementedPokeResource | Kook.Net 文档",
    "keywords": "Struct NotImplementedPokeResource Namespace Kook Assembly Kook.Net.Core.dll Represents a poke resource that is not implemented to be resolved yet. public struct NotImplementedPokeResource : IPokeResource Implements IPokeResource Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties JsonNode Gets the raw JSON of the embed. public readonly JsonNode JsonNode { get; } Property Value JsonNode A JsonNode representing the raw JSON of the embed. RawType Gets the type of the poke resource. public readonly string RawType { get; } Property Value string A string representing the type of the poke resource. Remarks This value originally came from the type field of the JsonNode. Type Gets the type of the poke resource. public PokeResourceType Type { get; } Property Value PokeResourceType Methods Resolve<T>(Func<NotImplementedPokeResource, T>) Resolves the embed to a concrete type via delegate. public T Resolve<T>(Func<NotImplementedPokeResource, T> resolvingFunc) where T : IPokeResource Parameters resolvingFunc Func<NotImplementedPokeResource, T> The resolving function to use when resolves the embed. Returns T A T representing the resolved embed. Type Parameters T The concrete type to deserialize the embed to. Resolve<T>(JsonSerializerOptions?) Resolves the embed to a concrete type via JSON deserialization. public T? Resolve<T>(JsonSerializerOptions? options = null) where T : IPokeResource Parameters options JsonSerializerOptions The options to use when deserializing the embed. Returns T A T representing the resolved embed. Type Parameters T The concrete type to deserialize the embed to."
  },
  "api/Kook.NotifyType.html": {
    "href": "api/Kook.NotifyType.html",
    "title": "Enum NotifyType | Kook.Net 文档",
    "keywords": "Enum NotifyType Namespace Kook Assembly Kook.Net.Core.dll Specifies that how the guild should notify the user. public enum NotifyType Fields AcceptAll = 1 Notifies the user of all messages. Default = 0 Notifies the user as the default behavior of the guild. Muted = 3 ]Never notifies the user. OnlyMentioned = 2 Notifies the user of the messages which mention the user."
  },
  "api/Kook.OverwritePermissions.html": {
    "href": "api/Kook.OverwritePermissions.html",
    "title": "Struct OverwritePermissions | Kook.Net 文档",
    "keywords": "Struct OverwritePermissions Namespace Kook Assembly Kook.Net.Core.dll Represents a container for a series of overwrite permissions. public struct OverwritePermissions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors OverwritePermissions(PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue) Initializes a new ChannelPermissions struct with the provided permissions. public OverwritePermissions(PermValue createInvites = PermValue.Inherit, PermValue manageChannels = PermValue.Inherit, PermValue manageRoles = PermValue.Inherit, PermValue viewChannel = PermValue.Inherit, PermValue sendMessages = PermValue.Inherit, PermValue manageMessages = PermValue.Inherit, PermValue attachFiles = PermValue.Inherit, PermValue connect = PermValue.Inherit, PermValue manageVoice = PermValue.Inherit, PermValue mentionEveryone = PermValue.Inherit, PermValue addReactions = PermValue.Inherit, PermValue passiveConnect = PermValue.Inherit, PermValue useVoiceActivity = PermValue.Inherit, PermValue speak = PermValue.Inherit, PermValue deafenMembers = PermValue.Inherit, PermValue muteMembers = PermValue.Inherit, PermValue playSoundtrack = PermValue.Inherit, PermValue shareScreen = PermValue.Inherit) Parameters createInvites PermValue manageChannels PermValue manageRoles PermValue viewChannel PermValue sendMessages PermValue manageMessages PermValue attachFiles PermValue connect PermValue manageVoice PermValue mentionEveryone PermValue addReactions PermValue passiveConnect PermValue useVoiceActivity PermValue speak PermValue deafenMembers PermValue muteMembers PermValue playSoundtrack PermValue shareScreen PermValue OverwritePermissions(string, string) Creates a new OverwritePermissions with the provided allow and deny packed values after converting to ulong. public OverwritePermissions(string allowValue, string denyValue) Parameters allowValue string denyValue string OverwritePermissions(ulong, ulong) Creates a new OverwritePermissions with the provided allow and deny packed values. public OverwritePermissions(ulong allowValue, ulong denyValue) Parameters allowValue ulong denyValue ulong Properties AddReactions If Allowed, a user may add reactions. public PermValue AddReactions { get; } Property Value PermValue AllowValue Gets a packed value representing all the allowed permissions in this OverwritePermissions. public readonly ulong AllowValue { get; } Property Value ulong AttachFiles If Allowed, a user may send files. public PermValue AttachFiles { get; } Property Value PermValue Connect If Allowed, a user may connect to a voice channel. public PermValue Connect { get; } Property Value PermValue CreateInvites If Allowed, a user may create invites. public PermValue CreateInvites { get; } Property Value PermValue DeafenMembers If Allowed, a user may deafen users. public PermValue DeafenMembers { get; } Property Value PermValue DenyValue Gets a packed value representing all the denied permissions in this OverwritePermissions. public readonly ulong DenyValue { get; } Property Value ulong InheritAll Gets a blank OverwritePermissions that inherits all permissions. public static OverwritePermissions InheritAll { get; } Property Value OverwritePermissions ManageChannels If Allowed, a user may create, delete and modify channels. public PermValue ManageChannels { get; } Property Value PermValue ManageMessages If Allowed, a user may delete messages. public PermValue ManageMessages { get; } Property Value PermValue ManageRoles If Allowed, a user may adjust roles. public PermValue ManageRoles { get; } Property Value PermValue ManageVoice If Allowed, a user may kick other users from voice channels, and move other users between voice channels. public PermValue ManageVoice { get; } Property Value PermValue MentionEveryone If Allowed, a user may mention all users. public PermValue MentionEveryone { get; } Property Value PermValue MuteMembers If Allowed, a user may mute users. public PermValue MuteMembers { get; } Property Value PermValue PassiveConnect If Allowed, a user may connect to a voice channel only when the user is invited or moved by other users. public PermValue PassiveConnect { get; } Property Value PermValue PlaySoundtrack If Allowed, a user may play soundtracks in a voice channel. public PermValue PlaySoundtrack { get; } Property Value PermValue SendMessages If Allowed, a user may send messages. public PermValue SendMessages { get; } Property Value PermValue ShareScreen If Allowed, a user may share screen in a voice channel. public PermValue ShareScreen { get; } Property Value PermValue Speak If Allowed, a user may speak in a voice channel. public PermValue Speak { get; } Property Value PermValue UseVoiceActivity If Allowed, a user may use voice activation. public PermValue UseVoiceActivity { get; } Property Value PermValue ViewChannel If Allowed, a user may view channels. public PermValue ViewChannel { get; } Property Value PermValue Methods AllowAll(IChannel) Gets a OverwritePermissions that grants all permissions for the given channel. public static OverwritePermissions AllowAll(IChannel channel) Parameters channel IChannel Returns OverwritePermissions Exceptions ArgumentException Unknown channel type. DenyAll(IChannel) Gets a OverwritePermissions that denies all permissions for the given channel. public static OverwritePermissions DenyAll(IChannel channel) Parameters channel IChannel Returns OverwritePermissions Exceptions ArgumentException Unknown channel type. Modify(PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?) Initializes a new OverwritePermissions from the current one, changing the provided non-null permissions. public OverwritePermissions Modify(PermValue? createInvites = null, PermValue? manageChannels = null, PermValue? manageRoles = null, PermValue? viewChannel = null, PermValue? sendMessages = null, PermValue? manageMessages = null, PermValue? attachFiles = null, PermValue? connect = null, PermValue? manageVoice = null, PermValue? mentionEveryone = null, PermValue? addReactions = null, PermValue? passiveConnect = null, PermValue? useVoiceActivity = null, PermValue? speak = null, PermValue? deafenMembers = null, PermValue? muteMembers = null, PermValue? playSoundtrack = null, PermValue? shareScreen = null) Parameters createInvites PermValue? manageChannels PermValue? manageRoles PermValue? viewChannel PermValue? sendMessages PermValue? manageMessages PermValue? attachFiles PermValue? connect PermValue? manageVoice PermValue? mentionEveryone PermValue? addReactions PermValue? passiveConnect PermValue? useVoiceActivity PermValue? speak PermValue? deafenMembers PermValue? muteMembers PermValue? playSoundtrack PermValue? shareScreen PermValue? Returns OverwritePermissions ToAllowList() Creates a List<T> of all the ChannelPermission values that are allowed. public List<ChannelPermission> ToAllowList() Returns List<ChannelPermission> A List<T> of all allowed ChannelPermission flags. If none, the list will be empty. ToDenyList() Creates a List<T> of all the ChannelPermission values that are denied. public List<ChannelPermission> ToDenyList() Returns List<ChannelPermission> A List<T> of all denied ChannelPermission flags. If none, the list will be empty. ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/Kook.ParagraphStruct.html": {
    "href": "api/Kook.ParagraphStruct.html",
    "title": "Class ParagraphStruct | Kook.Net 文档",
    "keywords": "Class ParagraphStruct Namespace Kook Assembly Kook.Net.Core.dll A paragraph struct that can be used in modules. public class ParagraphStruct : IElement, IEquatable<ParagraphStruct>, IEquatable<IElement> Inheritance object ParagraphStruct Implements IElement IEquatable<ParagraphStruct> IEquatable<IElement> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(IElement) CardExtensions.ToBuilder(ParagraphStruct) Properties ColumnCount Gets the number of columns in the paragraph. public int? ColumnCount { get; } Property Value int? An int value that represents the number of columns in the paragraph. Fields Gets the fields in the paragraph. public ImmutableArray<IElement> Fields { get; } Property Value ImmutableArray<IElement> An ImmutableArray<T> array that contains the fields in the paragraph. Type Gets the type of the element. public ElementType Type { get; } Property Value ElementType An ElementType value that represents the theme of the button. Methods Equals(ParagraphStruct?) Determines whether the specified ParagraphStruct is equal to the current ParagraphStruct. public bool Equals(ParagraphStruct? paragraphStruct) Parameters paragraphStruct ParagraphStruct The ParagraphStruct to compare with the current ParagraphStruct. Returns bool true if the specified ParagraphStruct is equal to the current ParagraphStruct; otherwise, false. Equals(object?) Determines whether the specified ParagraphStruct is equal to the current ParagraphStruct. public override bool Equals(object? obj) Parameters obj object The object to compare with the current ParagraphStruct. Returns bool true if the specified ParagraphStruct is equal to the current ParagraphStruct; otherwise, false. Remarks If the object passes is an ParagraphStruct, Equals(ParagraphStruct?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ParagraphStruct?, ParagraphStruct?) Determines whether the specified ParagraphStruct is equal to the current ParagraphStruct. public static bool operator ==(ParagraphStruct? left, ParagraphStruct? right) Parameters left ParagraphStruct right ParagraphStruct Returns bool true if the specified ParagraphStruct is equal to the current ParagraphStruct; otherwise, false. operator !=(ParagraphStruct?, ParagraphStruct?) Determines whether the specified ParagraphStruct is not equal to the current ParagraphStruct. public static bool operator !=(ParagraphStruct? left, ParagraphStruct? right) Parameters left ParagraphStruct right ParagraphStruct Returns bool true if the specified ParagraphStruct is not equal to the current ParagraphStruct; otherwise, false."
  },
  "api/Kook.ParagraphStructBuilder.html": {
    "href": "api/Kook.ParagraphStructBuilder.html",
    "title": "Class ParagraphStructBuilder | Kook.Net 文档",
    "keywords": "Class ParagraphStructBuilder Namespace Kook Assembly Kook.Net.Core.dll An element builder to build a ParagraphStruct. public class ParagraphStructBuilder : IElementBuilder, IEquatable<ParagraphStructBuilder>, IEquatable<IElementBuilder> Inheritance object ParagraphStructBuilder Implements IElementBuilder IEquatable<ParagraphStructBuilder> IEquatable<IElementBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ParagraphStructBuilder() Initializes a new ParagraphStructBuilder class. public ParagraphStructBuilder() ParagraphStructBuilder(int, IList<IElementBuilder>?) Initializes a new ParagraphStructBuilder class. public ParagraphStructBuilder(int columnCount, IList<IElementBuilder>? fields = null) Parameters columnCount int fields IList<IElementBuilder> Fields MaxColumnCount Returns the maximum number of columns allowed by Kook. public const int MaxColumnCount = 3 Field Value int MaxFieldCount Returns the maximum number of fields allowed by Kook. public const int MaxFieldCount = 50 Field Value int MinColumnCount Returns the minimum number of columns allowed by Kook. public const int MinColumnCount = 1 Field Value int Properties ColumnCount Gets or sets the number of columns of the paragraph. public int ColumnCount { get; set; } Property Value int An int that represents the number of columns of the paragraph. Fields Gets or sets the fields of the paragraph. public IList<IElementBuilder> Fields { get; set; } Property Value IList<IElementBuilder> An IList<T> that represents the fields of the paragraph. Type Gets the type of the element that this builder builds. public ElementType Type { get; } Property Value ElementType An ElementType that represents the type of element that this builder builds. Methods AddField(KMarkdownElementBuilder) Adds a field to the paragraph. public ParagraphStructBuilder AddField(KMarkdownElementBuilder field) Parameters field KMarkdownElementBuilder A KMarkdownElementBuilder that represents the field to add. Returns ParagraphStructBuilder The current builder. AddField(PlainTextElementBuilder) Adds a field to the paragraph. public ParagraphStructBuilder AddField(PlainTextElementBuilder field) Parameters field PlainTextElementBuilder A PlainTextElementBuilder that represents the field to add. Returns ParagraphStructBuilder The current builder. AddField<T>(Action<T>?) Adds a field to the paragraph. public ParagraphStructBuilder AddField<T>(Action<T>? action = null) where T : IElementBuilder, new() Parameters action Action<T> The action to create a builder of a KMarkdownElement, which will be added to the paragraph. Returns ParagraphStructBuilder The current builder. Type Parameters T Build() Builds the ParagraphStructBuilder into a ParagraphStruct. public ParagraphStruct Build() Returns ParagraphStruct A ParagraphStruct represents the built element object. Exceptions ArgumentOutOfRangeException The ColumnCount is less than MinColumnCount. ArgumentOutOfRangeException The ColumnCount is greater than MaxColumnCount. ArgumentNullException The Fields is null. ArgumentException The number of Fields is greater than MaxFieldCount. ArgumentException The Fields contain an element that is not a PlainTextElementBuilder or KMarkdownElementBuilder. Equals(ParagraphStructBuilder?) Determines whether the specified ParagraphStructBuilder is equal to the current ParagraphStructBuilder. public bool Equals(ParagraphStructBuilder? paragraphStructBuilder) Parameters paragraphStructBuilder ParagraphStructBuilder The ParagraphStructBuilder to compare with the current ParagraphStructBuilder. Returns bool true if the specified ParagraphStructBuilder is equal to the current ParagraphStructBuilder; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current ParagraphStructBuilder. public override bool Equals(object? obj) Parameters obj object The object to compare with the current ParagraphStructBuilder. Returns bool true if the specified object is equal to the current ParagraphStructBuilder; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithColumnCount(int) Sets the number of columns of the paragraph. public ParagraphStructBuilder WithColumnCount(int count) Parameters count int An int that represents the number of columns of the paragraph. Returns ParagraphStructBuilder The current builder. Operators operator ==(ParagraphStructBuilder?, ParagraphStructBuilder?) Determines whether the specified ParagraphStructBuilder is equal to the current ParagraphStructBuilder. public static bool operator ==(ParagraphStructBuilder? left, ParagraphStructBuilder? right) Parameters left ParagraphStructBuilder right ParagraphStructBuilder Returns bool true if the specified ParagraphStructBuilder is equal to the current ParagraphStructBuilder; otherwise, false. operator !=(ParagraphStructBuilder?, ParagraphStructBuilder?) Determines whether the specified ParagraphStructBuilder is not equal to the current ParagraphStructBuilder. public static bool operator !=(ParagraphStructBuilder? left, ParagraphStructBuilder? right) Parameters left ParagraphStructBuilder right ParagraphStructBuilder Returns bool true if the specified ParagraphStructBuilder is not equal to the current ParagraphStructBuilder; otherwise, false."
  },
  "api/Kook.PermValue.html": {
    "href": "api/Kook.PermValue.html",
    "title": "Enum PermValue | Kook.Net 文档",
    "keywords": "Enum PermValue Namespace Kook Assembly Kook.Net.Core.dll Specifies the permission value. public enum PermValue Fields Allow = 0 Allows this permission. Deny = 1 Denies this permission. Inherit = 2 Inherits the permission settings."
  },
  "api/Kook.PlainTextElement.html": {
    "href": "api/Kook.PlainTextElement.html",
    "title": "Class PlainTextElement | Kook.Net 文档",
    "keywords": "Class PlainTextElement Namespace Kook Assembly Kook.Net.Core.dll A plain text element that can be used in an IModule. public class PlainTextElement : IElement, IEquatable<PlainTextElement>, IEquatable<IElement> Inheritance object PlainTextElement Implements IElement IEquatable<PlainTextElement> IEquatable<IElement> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CardExtensions.ToBuilder(IElement) CardExtensions.ToBuilder(PlainTextElement) Properties Content Gets the KMarkdown content of the element. public string Content { get; } Property Value string A string that represents the KMarkdown content of the element. Emoji Gets whether the shortcuts should be translated into emojis. public bool? Emoji { get; } Property Value bool? A boolean value that indicates whether the shortcuts should be translated into emojis. true if the shortcuts should be translated into emojis; false if the text should be displayed as is. Type Gets the type of the element. public ElementType Type { get; } Property Value ElementType An ElementType value that represents the theme of the button. Methods Equals(PlainTextElement?) Determines whether the specified PlainTextElement is equal to the current PlainTextElement. public bool Equals(PlainTextElement? plainTextElement) Parameters plainTextElement PlainTextElement The PlainTextElement to compare with the current PlainTextElement. Returns bool true if the specified PlainTextElement is equal to the current PlainTextElement; otherwise, false. Equals(object?) Determines whether the specified PlainTextElement is equal to the current PlainTextElement. public override bool Equals(object? obj) Parameters obj object The object to compare with the current PlainTextElement. Returns bool true if the specified PlainTextElement is equal to the current PlainTextElement; otherwise, false. Remarks If the object passes is an PlainTextElement, Equals(PlainTextElement?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators operator ==(PlainTextElement?, PlainTextElement?) Determines whether the specified PlainTextElement is equal to the current PlainTextElement. public static bool operator ==(PlainTextElement? left, PlainTextElement? right) Parameters left PlainTextElement right PlainTextElement Returns bool true if the specified PlainTextElement is equal to the current PlainTextElement; otherwise, false. operator !=(PlainTextElement?, PlainTextElement?) Determines whether the specified PlainTextElement is not equal to the current PlainTextElement. public static bool operator !=(PlainTextElement? left, PlainTextElement? right) Parameters left PlainTextElement right PlainTextElement Returns bool true if the specified PlainTextElement is not equal to the current PlainTextElement; otherwise, false."
  },
  "api/Kook.PlainTextElementBuilder.html": {
    "href": "api/Kook.PlainTextElementBuilder.html",
    "title": "Class PlainTextElementBuilder | Kook.Net 文档",
    "keywords": "Class PlainTextElementBuilder Namespace Kook Assembly Kook.Net.Core.dll An element builder to build a PlainTextElement. public class PlainTextElementBuilder : IElementBuilder, IEquatable<PlainTextElementBuilder>, IEquatable<IElementBuilder> Inheritance object PlainTextElementBuilder Implements IElementBuilder IEquatable<PlainTextElementBuilder> IEquatable<IElementBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlainTextElementBuilder() Initializes a new instance of the PlainTextElementBuilder class. public PlainTextElementBuilder() PlainTextElementBuilder(string?, bool) Initializes a new instance of the PlainTextElementBuilder class. public PlainTextElementBuilder(string? content, bool emoji = true) Parameters content string The content of the PlainTextElement. emoji bool A boolean value that indicates whether the shortcuts should be translated into emojis. Fields MaxPlainTextLength Gets the maximum plain text length allowed by Kook. public const int MaxPlainTextLength = 2000 Field Value int An int that represents the maximum plain text length allowed by Kook. Properties Content Gets or sets the content of a PlainTextElement. public string? Content { get; set; } Property Value string The content of the PlainTextElement. Emoji Gets whether the shortcuts should be translated into emojis. public bool Emoji { get; set; } Property Value bool A boolean value that indicates whether the shortcuts should be translated into emojis. true if the shortcuts should be translated into emojis; false if the text should be displayed as is. Type Gets the type of the element that this builder builds. public ElementType Type { get; } Property Value ElementType An ElementType that represents the type of element that this builder builds. Methods Build() Builds the PlainTextElementBuilder into a PlainTextElement. public PlainTextElement Build() Returns PlainTextElement A PlainTextElement represents the built element object. Exceptions ArgumentNullException The Content is null. ArgumentException The length of the Content is greater than MaxPlainTextLength. Equals(PlainTextElementBuilder?) Determines whether the specified PlainTextElementBuilder is equal to the current PlainTextElementBuilder. public bool Equals(PlainTextElementBuilder? plainTextElementBuilder) Parameters plainTextElementBuilder PlainTextElementBuilder The PlainTextElementBuilder to compare with the current PlainTextElementBuilder. Returns bool true if the specified PlainTextElementBuilder is equal to the current PlainTextElementBuilder; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current PlainTextElementBuilder. public override bool Equals(object? obj) Parameters obj object The object to compare with the current PlainTextElementBuilder. Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithContent(string) Sets the content of a PlainTextElement. public PlainTextElementBuilder WithContent(string content) Parameters content string The text to be set as the content. Returns PlainTextElementBuilder The current builder. WithEmoji(bool) Sets whether the shortcuts should be translated into emojis. public PlainTextElementBuilder WithEmoji(bool emoji) Parameters emoji bool A boolean value that indicates whether the shortcuts should be translated into emojis. true if the shortcuts should be translated into emojis; false if the text should be displayed as is. Returns PlainTextElementBuilder The current builder. Operators operator ==(PlainTextElementBuilder?, PlainTextElementBuilder?) Determines whether the specified PlainTextElementBuilder is equal to the current PlainTextElementBuilder. public static bool operator ==(PlainTextElementBuilder? left, PlainTextElementBuilder? right) Parameters left PlainTextElementBuilder right PlainTextElementBuilder Returns bool true if the specified PlainTextElementBuilder is equal to the current PlainTextElementBuilder; otherwise, false. implicit operator PlainTextElementBuilder(string) Initialized a new instance of the PlainTextElementBuilder class with the specified content. public static implicit operator PlainTextElementBuilder(string content) Parameters content string The content of the PlainTextElement. Returns PlainTextElementBuilder A PlainTextElementBuilder object that is initialized with the specified content. operator !=(PlainTextElementBuilder?, PlainTextElementBuilder?) Determines whether the specified PlainTextElementBuilder is not equal to the current PlainTextElementBuilder. public static bool operator !=(PlainTextElementBuilder? left, PlainTextElementBuilder? right) Parameters left PlainTextElementBuilder right PlainTextElementBuilder Returns bool true if the specified PlainTextElementBuilder is not equal to the current PlainTextElementBuilder; otherwise, false."
  },
  "api/Kook.PokeIcon.html": {
    "href": "api/Kook.PokeIcon.html",
    "title": "Struct PokeIcon | Kook.Net 文档",
    "keywords": "Struct PokeIcon Namespace Kook Assembly Kook.Net.Core.dll Represents an icon of an IPoke. public struct PokeIcon Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Resource Gets the resource uri of the icon. public readonly string Resource { get; } Property Value string ResourceExpired Gets the resource uri of the icon when the IPoke is expired. public readonly string ResourceExpired { get; } Property Value string"
  },
  "api/Kook.PokeLabel.html": {
    "href": "api/Kook.PokeLabel.html",
    "title": "Struct PokeLabel | Kook.Net 文档",
    "keywords": "Struct PokeLabel Namespace Kook Assembly Kook.Net.Core.dll Represents the label of a IPoke. public struct PokeLabel : IEntity<uint> Implements IEntity<uint> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Id Gets the ID of the poke action label. public readonly uint Id { get; } Property Value uint Name Gets the name of the poke action label. public readonly string Name { get; } Property Value string"
  },
  "api/Kook.PokeQuality.html": {
    "href": "api/Kook.PokeQuality.html",
    "title": "Struct PokeQuality | Kook.Net 文档",
    "keywords": "Struct PokeQuality Namespace Kook Assembly Kook.Net.Core.dll Represents the quality of a IPoke. public struct PokeQuality : IEntity<uint> Implements IEntity<uint> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Color Gets the color of the PokeQuality. public readonly Color Color { get; } Property Value Color Id Gets the identifier of the PokeQuality. public readonly uint Id { get; } Property Value uint Resources Gets the resources of the PokeQuality. public readonly IReadOnlyDictionary<string, string> Resources { get; } Property Value IReadOnlyDictionary<string, string>"
  },
  "api/Kook.PokeResourceType.html": {
    "href": "api/Kook.PokeResourceType.html",
    "title": "Enum PokeResourceType | Kook.Net 文档",
    "keywords": "Enum PokeResourceType Namespace Kook Assembly Kook.Net.Core.dll Represents the type of a IPokeResource. public enum PokeResourceType Fields ImageAnimation = 1 Represents a resource that is an image. NotImplemented = 0 Represents a resource that is not implemented."
  },
  "api/Kook.Preconditions.html": {
    "href": "api/Kook.Preconditions.html",
    "title": "Class Preconditions | Kook.Net 文档",
    "keywords": "Class Preconditions Namespace Kook Assembly Kook.Net.Core.dll Provides methods to check preconditions. public static class Preconditions Inheritance object Preconditions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AtLeast(byte, byte, string, string?) public static void AtLeast(byte obj, byte value, string name, string? msg = null) Parameters obj byte value byte name string msg string Exceptions ArgumentException Value must be at least value. AtLeast(short, short, string, string?) public static void AtLeast(short obj, short value, string name, string? msg = null) Parameters obj short value short name string msg string Exceptions ArgumentException Value must be at least value. AtLeast(int, int, string, string?) public static void AtLeast(int obj, int value, string name, string? msg = null) Parameters obj int value int name string msg string Exceptions ArgumentException Value must be at least value. AtLeast(long, long, string, string?) public static void AtLeast(long obj, long value, string name, string? msg = null) Parameters obj long value long name string msg string Exceptions ArgumentException Value must be at least value. AtLeast(byte?, byte, string, string?) public static void AtLeast(byte? obj, byte value, string name, string? msg = null) Parameters obj byte? value byte name string msg string Exceptions ArgumentException Value must be at least value. AtLeast(short?, short, string, string?) public static void AtLeast(short? obj, short value, string name, string? msg = null) Parameters obj short? value short name string msg string Exceptions ArgumentException Value must be at least value. AtLeast(int?, int, string, string?) public static void AtLeast(int? obj, int value, string name, string? msg = null) Parameters obj int? value int name string msg string Exceptions ArgumentException Value must be at least value. AtLeast(long?, long, string, string?) public static void AtLeast(long? obj, long value, string name, string? msg = null) Parameters obj long? value long name string msg string Exceptions ArgumentException Value must be at least value. AtLeast(sbyte?, sbyte, string, string?) public static void AtLeast(sbyte? obj, sbyte value, string name, string? msg = null) Parameters obj sbyte? value sbyte name string msg string Exceptions ArgumentException Value must be at least value. AtLeast(ushort?, ushort, string, string?) public static void AtLeast(ushort? obj, ushort value, string name, string? msg = null) Parameters obj ushort? value ushort name string msg string Exceptions ArgumentException Value must be at least value. AtLeast(uint?, uint, string, string?) public static void AtLeast(uint? obj, uint value, string name, string? msg = null) Parameters obj uint? value uint name string msg string Exceptions ArgumentException Value must be at least value. AtLeast(ulong?, ulong, string, string?) public static void AtLeast(ulong? obj, ulong value, string name, string? msg = null) Parameters obj ulong? value ulong name string msg string Exceptions ArgumentException Value must be at least value. AtLeast(sbyte, sbyte, string, string?) public static void AtLeast(sbyte obj, sbyte value, string name, string? msg = null) Parameters obj sbyte value sbyte name string msg string Exceptions ArgumentException Value must be at least value. AtLeast(ushort, ushort, string, string?) public static void AtLeast(ushort obj, ushort value, string name, string? msg = null) Parameters obj ushort value ushort name string msg string Exceptions ArgumentException Value must be at least value. AtLeast(uint, uint, string, string?) public static void AtLeast(uint obj, uint value, string name, string? msg = null) Parameters obj uint value uint name string msg string Exceptions ArgumentException Value must be at least value. AtLeast(ulong, ulong, string, string?) public static void AtLeast(ulong obj, ulong value, string name, string? msg = null) Parameters obj ulong value ulong name string msg string Exceptions ArgumentException Value must be at least value. AtMost(byte, byte, string, string?) public static void AtMost(byte obj, byte value, string name, string? msg = null) Parameters obj byte value byte name string msg string Exceptions ArgumentException Value must be at most value. AtMost(short, short, string, string?) public static void AtMost(short obj, short value, string name, string? msg = null) Parameters obj short value short name string msg string Exceptions ArgumentException Value must be at most value. AtMost(int, int, string, string?) public static void AtMost(int obj, int value, string name, string? msg = null) Parameters obj int value int name string msg string Exceptions ArgumentException Value must be at most value. AtMost(long, long, string, string?) public static void AtMost(long obj, long value, string name, string? msg = null) Parameters obj long value long name string msg string Exceptions ArgumentException Value must be at most value. AtMost(byte?, byte, string, string?) public static void AtMost(byte? obj, byte value, string name, string? msg = null) Parameters obj byte? value byte name string msg string Exceptions ArgumentException Value must be at most value. AtMost(short?, short, string, string?) public static void AtMost(short? obj, short value, string name, string? msg = null) Parameters obj short? value short name string msg string Exceptions ArgumentException Value must be at most value. AtMost(int?, int, string, string?) public static void AtMost(int? obj, int value, string name, string? msg = null) Parameters obj int? value int name string msg string Exceptions ArgumentException Value must be at most value. AtMost(long?, long, string, string?) public static void AtMost(long? obj, long value, string name, string? msg = null) Parameters obj long? value long name string msg string Exceptions ArgumentException Value must be at most value. AtMost(sbyte?, sbyte, string, string?) public static void AtMost(sbyte? obj, sbyte value, string name, string? msg = null) Parameters obj sbyte? value sbyte name string msg string Exceptions ArgumentException Value must be at most value. AtMost(ushort?, ushort, string, string?) public static void AtMost(ushort? obj, ushort value, string name, string? msg = null) Parameters obj ushort? value ushort name string msg string Exceptions ArgumentException Value must be at most value. AtMost(uint?, uint, string, string?) public static void AtMost(uint? obj, uint value, string name, string? msg = null) Parameters obj uint? value uint name string msg string Exceptions ArgumentException Value must be at most value. AtMost(ulong?, ulong, string, string?) public static void AtMost(ulong? obj, ulong value, string name, string? msg = null) Parameters obj ulong? value ulong name string msg string Exceptions ArgumentException Value must be at most value. AtMost(sbyte, sbyte, string, string?) public static void AtMost(sbyte obj, sbyte value, string name, string? msg = null) Parameters obj sbyte value sbyte name string msg string Exceptions ArgumentException Value must be at most value. AtMost(ushort, ushort, string, string?) public static void AtMost(ushort obj, ushort value, string name, string? msg = null) Parameters obj ushort value ushort name string msg string Exceptions ArgumentException Value must be at most value. AtMost(uint, uint, string, string?) public static void AtMost(uint obj, uint value, string name, string? msg = null) Parameters obj uint value uint name string msg string Exceptions ArgumentException Value must be at most value. AtMost(ulong, ulong, string, string?) public static void AtMost(ulong obj, ulong value, string name, string? msg = null) Parameters obj ulong value ulong name string msg string Exceptions ArgumentException Value must be at most value. GreaterThan(byte, byte, string, string?) public static void GreaterThan(byte obj, byte value, string name, string? msg = null) Parameters obj byte value byte name string msg string Exceptions ArgumentException Value must be greater than value. GreaterThan(short, short, string, string?) public static void GreaterThan(short obj, short value, string name, string? msg = null) Parameters obj short value short name string msg string Exceptions ArgumentException Value must be greater than value. GreaterThan(int, int, string, string?) public static void GreaterThan(int obj, int value, string name, string? msg = null) Parameters obj int value int name string msg string Exceptions ArgumentException Value must be greater than value. GreaterThan(long, long, string, string?) public static void GreaterThan(long obj, long value, string name, string? msg = null) Parameters obj long value long name string msg string Exceptions ArgumentException Value must be greater than value. GreaterThan(byte?, byte, string, string?) public static void GreaterThan(byte? obj, byte value, string name, string? msg = null) Parameters obj byte? value byte name string msg string Exceptions ArgumentException Value must be greater than value. GreaterThan(short?, short, string, string?) public static void GreaterThan(short? obj, short value, string name, string? msg = null) Parameters obj short? value short name string msg string Exceptions ArgumentException Value must be greater than value. GreaterThan(int?, int, string, string?) public static void GreaterThan(int? obj, int value, string name, string? msg = null) Parameters obj int? value int name string msg string Exceptions ArgumentException Value must be greater than value. GreaterThan(long?, long, string, string?) public static void GreaterThan(long? obj, long value, string name, string? msg = null) Parameters obj long? value long name string msg string Exceptions ArgumentException Value must be greater than value. GreaterThan(sbyte?, sbyte, string, string?) public static void GreaterThan(sbyte? obj, sbyte value, string name, string? msg = null) Parameters obj sbyte? value sbyte name string msg string Exceptions ArgumentException Value must be greater than value. GreaterThan(ushort?, ushort, string, string?) public static void GreaterThan(ushort? obj, ushort value, string name, string? msg = null) Parameters obj ushort? value ushort name string msg string Exceptions ArgumentException Value must be greater than value. GreaterThan(uint?, uint, string, string?) public static void GreaterThan(uint? obj, uint value, string name, string? msg = null) Parameters obj uint? value uint name string msg string Exceptions ArgumentException Value must be greater than value. GreaterThan(ulong?, ulong, string, string?) public static void GreaterThan(ulong? obj, ulong value, string name, string? msg = null) Parameters obj ulong? value ulong name string msg string Exceptions ArgumentException Value must be greater than value. GreaterThan(sbyte, sbyte, string, string?) public static void GreaterThan(sbyte obj, sbyte value, string name, string? msg = null) Parameters obj sbyte value sbyte name string msg string Exceptions ArgumentException Value must be greater than value. GreaterThan(ushort, ushort, string, string?) public static void GreaterThan(ushort obj, ushort value, string name, string? msg = null) Parameters obj ushort value ushort name string msg string Exceptions ArgumentException Value must be greater than value. GreaterThan(uint, uint, string, string?) public static void GreaterThan(uint obj, uint value, string name, string? msg = null) Parameters obj uint value uint name string msg string Exceptions ArgumentException Value must be greater than value. GreaterThan(ulong, ulong, string, string?) public static void GreaterThan(ulong obj, ulong value, string name, string? msg = null) Parameters obj ulong value ulong name string msg string Exceptions ArgumentException Value must be greater than value. LessThan(byte, byte, string, string?) public static void LessThan(byte obj, byte value, string name, string? msg = null) Parameters obj byte value byte name string msg string Exceptions ArgumentException Value must be less than value. LessThan(short, short, string, string?) public static void LessThan(short obj, short value, string name, string? msg = null) Parameters obj short value short name string msg string Exceptions ArgumentException Value must be less than value. LessThan(int, int, string, string?) public static void LessThan(int obj, int value, string name, string? msg = null) Parameters obj int value int name string msg string Exceptions ArgumentException Value must be less than value. LessThan(long, long, string, string?) public static void LessThan(long obj, long value, string name, string? msg = null) Parameters obj long value long name string msg string Exceptions ArgumentException Value must be less than value. LessThan(byte?, byte, string, string?) public static void LessThan(byte? obj, byte value, string name, string? msg = null) Parameters obj byte? value byte name string msg string Exceptions ArgumentException Value must be less than value. LessThan(short?, short, string, string?) public static void LessThan(short? obj, short value, string name, string? msg = null) Parameters obj short? value short name string msg string Exceptions ArgumentException Value must be less than value. LessThan(int?, int, string, string?) public static void LessThan(int? obj, int value, string name, string? msg = null) Parameters obj int? value int name string msg string Exceptions ArgumentException Value must be less than value. LessThan(long?, long, string, string?) public static void LessThan(long? obj, long value, string name, string? msg = null) Parameters obj long? value long name string msg string Exceptions ArgumentException Value must be less than value. LessThan(sbyte?, sbyte, string, string?) public static void LessThan(sbyte? obj, sbyte value, string name, string? msg = null) Parameters obj sbyte? value sbyte name string msg string Exceptions ArgumentException Value must be less than value. LessThan(ushort?, ushort, string, string?) public static void LessThan(ushort? obj, ushort value, string name, string? msg = null) Parameters obj ushort? value ushort name string msg string Exceptions ArgumentException Value must be less than value. LessThan(uint?, uint, string, string?) public static void LessThan(uint? obj, uint value, string name, string? msg = null) Parameters obj uint? value uint name string msg string Exceptions ArgumentException Value must be less than value. LessThan(ulong?, ulong, string, string?) public static void LessThan(ulong? obj, ulong value, string name, string? msg = null) Parameters obj ulong? value ulong name string msg string Exceptions ArgumentException Value must be less than value. LessThan(sbyte, sbyte, string, string?) public static void LessThan(sbyte obj, sbyte value, string name, string? msg = null) Parameters obj sbyte value sbyte name string msg string Exceptions ArgumentException Value must be less than value. LessThan(ushort, ushort, string, string?) public static void LessThan(ushort obj, ushort value, string name, string? msg = null) Parameters obj ushort value ushort name string msg string Exceptions ArgumentException Value must be less than value. LessThan(uint, uint, string, string?) public static void LessThan(uint obj, uint value, string name, string? msg = null) Parameters obj uint value uint name string msg string Exceptions ArgumentException Value must be less than value. LessThan(ulong, ulong, string, string?) public static void LessThan(ulong obj, ulong value, string name, string? msg = null) Parameters obj ulong value ulong name string msg string Exceptions ArgumentException Value must be less than value. NotEmpty(string, string, string?) public static void NotEmpty(string obj, string name, string? msg = null) Parameters obj string name string msg string Exceptions ArgumentException obj cannot be blank. NotEqual(byte, byte, string, string?) public static void NotEqual(byte obj, byte value, string name, string? msg = null) Parameters obj byte value byte name string msg string Exceptions ArgumentException Value may not be equal to value. NotEqual(Guid, Guid, string, string?) public static void NotEqual(Guid obj, Guid value, string name, string? msg = null) Parameters obj Guid value Guid name string msg string Exceptions ArgumentException Value may not be equal to value. NotEqual(short, short, string, string?) public static void NotEqual(short obj, short value, string name, string? msg = null) Parameters obj short value short name string msg string Exceptions ArgumentException Value may not be equal to value. NotEqual(int, int, string, string?) public static void NotEqual(int obj, int value, string name, string? msg = null) Parameters obj int value int name string msg string Exceptions ArgumentException Value may not be equal to value. NotEqual(long, long, string, string?) public static void NotEqual(long obj, long value, string name, string? msg = null) Parameters obj long value long name string msg string Exceptions ArgumentException Value may not be equal to value. NotEqual(byte?, byte, string, string?) public static void NotEqual(byte? obj, byte value, string name, string? msg = null) Parameters obj byte? value byte name string msg string Exceptions ArgumentException Value may not be equal to value. NotEqual(Guid?, Guid, string, string?) public static void NotEqual(Guid? obj, Guid value, string name, string? msg = null) Parameters obj Guid? value Guid name string msg string Exceptions ArgumentException Value may not be equal to value. NotEqual(short?, short, string, string?) public static void NotEqual(short? obj, short value, string name, string? msg = null) Parameters obj short? value short name string msg string Exceptions ArgumentException Value may not be equal to value. NotEqual(int?, int, string, string?) public static void NotEqual(int? obj, int value, string name, string? msg = null) Parameters obj int? value int name string msg string Exceptions ArgumentException Value may not be equal to value. NotEqual(long?, long, string, string?) public static void NotEqual(long? obj, long value, string name, string? msg = null) Parameters obj long? value long name string msg string Exceptions ArgumentException Value may not be equal to value. NotEqual(sbyte?, sbyte, string, string?) public static void NotEqual(sbyte? obj, sbyte value, string name, string? msg = null) Parameters obj sbyte? value sbyte name string msg string Exceptions ArgumentException Value may not be equal to value. NotEqual(ushort?, ushort, string, string?) public static void NotEqual(ushort? obj, ushort value, string name, string? msg = null) Parameters obj ushort? value ushort name string msg string Exceptions ArgumentException Value may not be equal to value. NotEqual(uint?, uint, string, string?) public static void NotEqual(uint? obj, uint value, string name, string? msg = null) Parameters obj uint? value uint name string msg string Exceptions ArgumentException Value may not be equal to value. NotEqual(ulong?, ulong, string, string?) public static void NotEqual(ulong? obj, ulong value, string name, string? msg = null) Parameters obj ulong? value ulong name string msg string Exceptions ArgumentException Value may not be equal to value. NotEqual(sbyte, sbyte, string, string?) public static void NotEqual(sbyte obj, sbyte value, string name, string? msg = null) Parameters obj sbyte value sbyte name string msg string Exceptions ArgumentException Value may not be equal to value. NotEqual(ushort, ushort, string, string?) public static void NotEqual(ushort obj, ushort value, string name, string? msg = null) Parameters obj ushort value ushort name string msg string Exceptions ArgumentException Value may not be equal to value. NotEqual(uint, uint, string, string?) public static void NotEqual(uint obj, uint value, string name, string? msg = null) Parameters obj uint value uint name string msg string Exceptions ArgumentException Value may not be equal to value. NotEqual(ulong, ulong, string, string?) public static void NotEqual(ulong obj, ulong value, string name, string? msg = null) Parameters obj ulong value ulong name string msg string Exceptions ArgumentException Value may not be equal to value. NotNullOrEmpty(string?, string, string?) public static void NotNullOrEmpty(string? obj, string name, string? msg = null) Parameters obj string name string msg string Exceptions ArgumentException obj cannot be blank. ArgumentNullException obj must not be null. NotNullOrWhitespace(string?, string, string?) public static void NotNullOrWhitespace(string? obj, string name, string? msg = null) Parameters obj string name string msg string Exceptions ArgumentException obj cannot be blank. ArgumentNullException obj must not be null. NotNull<T>(T?, string, string?) public static void NotNull<T>(T? obj, string name, string? msg = null) where T : class Parameters obj T name string msg string Type Parameters T Exceptions ArgumentNullException obj must not be null."
  },
  "api/Kook.Quote.html": {
    "href": "api/Kook.Quote.html",
    "title": "Class Quote | Kook.Net 文档",
    "keywords": "Class Quote Namespace Kook Assembly Kook.Net.Core.dll Represents a quoted message. public class Quote : IQuote Inheritance object Quote Implements IQuote Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Quote(Guid) Initializes a new instance of the Quote class. [Obsolete(\"Use MessageReference instead.\")] public Quote(Guid quotedMessageId) Parameters quotedMessageId Guid The quoted message identifier. Properties Author Gets the author of this message. public IUser Author { get; } Property Value IUser Content Gets the content of the message this quote refers to. public string Content { get; } Property Value string A string that contains the body of the message; note that this field may be empty or the original code if the message is not a text based message. CreateAt Gets the time this message was sent. public DateTimeOffset CreateAt { get; } Property Value DateTimeOffset Time of when the message was sent. Empty Gets an empty quote whose quoted message is null. [Obsolete(\"Use MessageReference.Empty instead.\")] public static MessageReference Empty { get; } Property Value MessageReference Remarks Used to delete a quote when modifying a message. QuotedMessageId Gets the identifier of the message this quote refers to. public Guid QuotedMessageId { get; } Property Value Guid Type Gets the type of the message this quote refers to. public MessageType Type { get; } Property Value MessageType"
  },
  "api/Kook.ReactionMetadata.html": {
    "href": "api/Kook.ReactionMetadata.html",
    "title": "Struct ReactionMetadata | Kook.Net 文档",
    "keywords": "Struct ReactionMetadata Namespace Kook Assembly Kook.Net.Core.dll A metadata containing reaction information. public struct ReactionMetadata Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties IsMe Gets a value that indicates whether the current user has reacted to this. public readonly bool IsMe { get; } Property Value bool true if the user has reacted to the message; otherwise false. ReactionCount Gets the number of reactions. public readonly int ReactionCount { get; } Property Value int An int representing the number of this reactions that has been added to this message."
  },
  "api/Kook.RequestFriendSource.html": {
    "href": "api/Kook.RequestFriendSource.html",
    "title": "Enum RequestFriendSource | Kook.Net 文档",
    "keywords": "Enum RequestFriendSource Namespace Kook Assembly Kook.Net.Core.dll Represents a source from which a friend request is sent. public enum RequestFriendSource Fields FullQualification = 0 Represents the friend request is sent via the user's full qualification, such as username#1234. Guild = 2 Represents the friend request is sent via a guild where the user and the current user are in."
  },
  "api/Kook.RequestOptions.html": {
    "href": "api/Kook.RequestOptions.html",
    "title": "Class RequestOptions | Kook.Net 文档",
    "keywords": "Class RequestOptions Namespace Kook Assembly Kook.Net.Core.dll Represents options that should be used when sending a request. public class RequestOptions Inheritance object RequestOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequestOptions() Initializes a new RequestOptions class with the default request timeout set in KookConfig. public RequestOptions() Properties AuditLogReason Gets or sets the reason for this action in the guild's audit log. public string? AuditLogReason { get; set; } Property Value string Remarks Gets or sets the reason that will be written to the guild's audit log if applicable. This may not apply to all actions. CancellationToken Gets or sets the cancellation token for this request. public CancellationToken CancellationToken { get; set; } Property Value CancellationToken A CancellationToken for this request. Default Creates a new RequestOptions class with its default settings. public static RequestOptions Default { get; } Property Value RequestOptions RatelimitCallback Gets or sets the callback to execute regarding ratelimits for this request. public Func<IRateLimitInfo, Task>? RatelimitCallback { get; set; } Property Value Func<IRateLimitInfo, Task> RetryMode Gets or sets the retry behavior when the request fails. public RetryMode? RetryMode { get; set; } Property Value RetryMode? Timeout Gets or sets the maximum time to wait for this request to complete. public int? Timeout { get; set; } Property Value int? An int in milliseconds for when the request times out. Remarks Gets or set the max time, in milliseconds, to wait for this request to complete. If null, a request will not time out. If a rate limit has been triggered for this request's bucket and will not be unpaused in time, this request will fail immediately. Methods Clone() Memberwise clones this RequestOptions object. public RequestOptions Clone() Returns RequestOptions A cloned RequestOptions object."
  },
  "api/Kook.Rest.Attachment.html": {
    "href": "api/Kook.Rest.Attachment.html",
    "title": "Class Attachment | Kook.Net 文档",
    "keywords": "Class Attachment Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a message attachment found in a IUserMessage. public class Attachment : IAttachment Inheritance object Attachment Implements IAttachment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Duration Gets the duration of the attachment. public TimeSpan? Duration { get; } Property Value TimeSpan? Remarks A timespan representing the duration of the attachment; null if the duration is unknown or not applicable. FileType Gets the file type of the attachment. public string? FileType { get; } Property Value string A string representing the file type of the attachment; null if the file type is unknown or not applicable. Filename Gets the filename of this attachment. public string? Filename { get; } Property Value string A string containing the full filename of this attachment. Height Gets the height of the attachment. public int? Height { get; } Property Value int? An int representing the height of the attachment; null if the height is unknown or not applicable. Size Gets the file size of the attachment. public int? Size { get; } Property Value int? An int representing the file size of the attachment; null if the file size is unknown or not applicable. Type Gets the type of the attachment. public AttachmentType Type { get; } Property Value AttachmentType An AttachmentType representing the type of the attachment. Url Gets the URL of the attachment. public string Url { get; } Property Value string A string representing the URL of the attachment. Width Gets the width of the attachment. public int? Width { get; } Property Value int? An int representing the width of the attachment; null if the width is unknown or not applicable. Methods ToString() Returns the filename of this attachment. public override string? ToString() Returns string A string containing the filename of this attachment."
  },
  "api/Kook.Rest.BaseKookClient.html": {
    "href": "api/Kook.Rest.BaseKookClient.html",
    "title": "Class BaseKookClient | Kook.Net 文档",
    "keywords": "Class BaseKookClient Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a client that can connect to the Kook API. public abstract class BaseKookClient : IKookClient, IDisposable Inheritance object BaseKookClient Implements IKookClient IDisposable Derived KookRestClient BaseSocketClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ConnectionState Gets the current state of connection. public virtual ConnectionState ConnectionState { get; } Property Value ConnectionState CurrentUser Gets the logged-in user. public ISelfUser? CurrentUser { get; protected set; } Property Value ISelfUser LoginState Gets the login state of the client. public LoginState LoginState { get; protected set; } Property Value LoginState TokenType Gets the token type of the logged-in user. public TokenType TokenType { get; } Property Value TokenType Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() LoginAsync(TokenType, string, bool) Logs in to the Kook API. public Task LoginAsync(TokenType tokenType, string token, bool validateToken = true) Parameters tokenType TokenType The type of token to use. token string The token to use. validateToken bool Whether to validate the token before logging in. Returns Task LogoutAsync() Logs out from the Kook API. public Task LogoutAsync() Returns Task Events Log Fired when a log message is sent. public event Func<LogMessage, Task> Log Event Type Func<LogMessage, Task> LoggedIn Fired when the client has logged in. public event Func<Task> LoggedIn Event Type Func<Task> LoggedOut Fired when the client has logged out. public event Func<Task> LoggedOut Event Type Func<Task> SentRequest Fired when a REST request is sent to the API. First parameter is the HTTP method, second is the endpoint, and third is the time taken to complete the request. public event Func<HttpMethod, string, double, Task> SentRequest Event Type Func<HttpMethod, string, double, Task>"
  },
  "api/Kook.Rest.CardJsonExtension.html": {
    "href": "api/Kook.Rest.CardJsonExtension.html",
    "title": "Class CardJsonExtension | Kook.Net 文档",
    "keywords": "Class CardJsonExtension Namespace Kook.Rest Assembly Kook.Net.Rest.dll Provides extension methods for Card and CardBuilder. public static class CardJsonExtension Inheritance object CardJsonExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ParseMany(string) Parses a string into a collection of ICardBuilders. public static IEnumerable<ICardBuilder> ParseMany(string json) Parameters json string The json string to parse. Returns IEnumerable<ICardBuilder> A collection of ICardBuilders with populated values from the passed json. Exceptions InvalidOperationException Thrown if the string passed is not valid json. ParseSingle(string) Parses a string into an ICardBuilder. public static ICardBuilder ParseSingle(string json) Parameters json string The json string to parse. Returns ICardBuilder An ICardBuilder with populated values from the passed json. Exceptions InvalidOperationException Thrown if the string passed is not valid json. ToJsonString(ICard, bool) Gets a Json formatted string from an Card. public static string ToJsonString(this ICard card, bool writeIndented = true) Parameters card ICard The card to format as Json string. writeIndented bool Whether to write the json with indents. Returns string A Json string containing the data from the card. Remarks See TryParseSingle(string, out ICardBuilder?) to parse Json back into card. ToJsonString(ICardBuilder, bool) Gets a Json formatted string from an CardBuilder. public static string ToJsonString(this ICardBuilder builder, bool writeIndented = true) Parameters builder ICardBuilder The builder to format as Json string. writeIndented bool Whether to write the json with indents. Returns string A Json string containing the data from the builder. Remarks See TryParseSingle(string, out ICardBuilder?) to parse Json back into card. TryParseMany(string, out IEnumerable<ICardBuilder>?) Tries to parse a string into an ICardBuilder. public static bool TryParseMany(string json, out IEnumerable<ICardBuilder>? builders) Parameters json string The json string to parse. builders IEnumerable<ICardBuilder> A collection of ICardBuilder with populated values. An empty instance if method returns false. Returns bool true if json was successfully parsed. false if not. TryParseSingle(string, out ICardBuilder?) Tries to parse a string into an ICardBuilder. public static bool TryParseSingle(string json, out ICardBuilder? builder) Parameters json string The json string to parse. builder ICardBuilder The ICardBuilder with populated values. An empty instance if method returns false. Returns bool true if json was successfully parsed. false if not."
  },
  "api/Kook.Rest.IRestAudioChannel.html": {
    "href": "api/Kook.Rest.IRestAudioChannel.html",
    "title": "Interface IRestAudioChannel | Kook.Net 文档",
    "keywords": "Interface IRestAudioChannel Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a generic REST-based audio channel. public interface IRestAudioChannel : IAudioChannel, IChannel, IEntity<ulong> Inherited Members IAudioChannel.IsVoiceRegionOverwritten IAudioChannel.VoiceRegion IAudioChannel.ServerUrl IAudioChannel.ConnectAsync(bool, bool, string) IAudioChannel.DisconnectAsync() IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel)"
  },
  "api/Kook.Rest.IRestMessageChannel.html": {
    "href": "api/Kook.Rest.IRestMessageChannel.html",
    "title": "Interface IRestMessageChannel | Kook.Net 文档",
    "keywords": "Interface IRestMessageChannel Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a REST-based channel that can send and receive messages. public interface IRestMessageChannel : IMessageChannel, IChannel, IEntity<ulong> Inherited Members IMessageChannel.SendFileAsync(string, string, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(Stream, string, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(FileAttachment, IQuote, IUser, RequestOptions) IMessageChannel.SendTextAsync(string, IQuote, IUser, RequestOptions) IMessageChannel.SendCardAsync(ICard, IQuote, IUser, RequestOptions) IMessageChannel.SendCardsAsync(IEnumerable<ICard>, IQuote, IUser, RequestOptions) IMessageChannel.GetMessageAsync(Guid, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(Guid, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions) IMessageChannel.DeleteMessageAsync(Guid, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) IMessageChannel.ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions) IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Methods GetMessageAsync(Guid, RequestOptions?) Gets a message from this message channel. Task<RestMessage> GetMessageAsync(Guid id, RequestOptions? options = null) Parameters id Guid The identifier of the message. options RequestOptions The options to be used when sending the request. Returns Task<RestMessage> A task that represents an asynchronous get operation for retrieving the message. The task result contains the retrieved message; null if no message is found with the specified identifier. Remarks This method follows the same behavior as described in GetMessageAsync(Guid, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. GetMessagesAsync(IMessage, Direction, int, RequestOptions?) Gets a collection of messages in this channel. IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessage IMessage The starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. GetMessagesAsync(Guid, Direction, int, RequestOptions?) Gets a collection of messages in this channel. IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessageId Guid The ID of the starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(Guid, Direction, int, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. GetMessagesAsync(int, RequestOptions?) Gets the last N messages from this message channel. IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(int limit = 50, RequestOptions? options = null) Parameters limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(int, CacheMode, RequestOptions?). Please visit its documentation for more details on this method."
  },
  "api/Kook.Rest.IRestPrivateChannel.html": {
    "href": "api/Kook.Rest.IRestPrivateChannel.html",
    "title": "Interface IRestPrivateChannel | Kook.Net 文档",
    "keywords": "Interface IRestPrivateChannel Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a REST-based channel that is private to select recipients. public interface IRestPrivateChannel : IPrivateChannel, IChannel, IEntity<ulong> Inherited Members IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties Recipients Users that can access this channel. IReadOnlyCollection<RestUser> Recipients { get; } Property Value IReadOnlyCollection<RestUser>"
  },
  "api/Kook.Rest.KookRestClient.html": {
    "href": "api/Kook.Rest.KookRestClient.html",
    "title": "Class KookRestClient | Kook.Net 文档",
    "keywords": "Class KookRestClient Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a REST-based KOOK client. public class KookRestClient : BaseKookClient, IKookClient, IDisposable Inheritance object BaseKookClient KookRestClient Implements IKookClient IDisposable Derived KookSocketRestClient Inherited Members BaseKookClient.Log BaseKookClient.LoggedIn BaseKookClient.LoggedOut BaseKookClient.SentRequest BaseKookClient.LoginState BaseKookClient.TokenType BaseKookClient.Dispose() BaseKookClient.LoginAsync(TokenType, string, bool) BaseKookClient.LogoutAsync() BaseKookClient.ConnectionState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods KookRestClientExperimentalExtensions.CreateGuildAsync(KookRestClient, string, IVoiceRegion?, Stream?, int?, RequestOptions?) KookRestClientExperimentalExtensions.GetAdminGuildsAsync(KookRestClient, RequestOptions?) KookRestClientExperimentalExtensions.GetVoiceRegionAsync(KookRestClient, string, RequestOptions?) KookRestClientExperimentalExtensions.GetVoiceRegionsAsync(KookRestClient, RequestOptions?) KookRestClientExperimentalExtensions.ValidateCardAsync(KookRestClient, ICard, RequestOptions?) KookRestClientExperimentalExtensions.ValidateCardsAsync(KookRestClient, IEnumerable<ICard>, RequestOptions?) KookRestClientExperimentalExtensions.ValidateCardsAsync(KookRestClient, string, RequestOptions?) Constructors KookRestClient() Initializes a new REST-based KOOK client with the default configuration. public KookRestClient() KookRestClient(KookRestConfig) Initializes a new REST-based KOOK client with the specified configuration. public KookRestClient(KookRestConfig config) Parameters config KookRestConfig The configuration to use. Properties CurrentUser Gets the logged-in user. public RestSelfUser? CurrentUser { get; } Property Value RestSelfUser Methods AddDirectMessageReactionAsync(Guid, IEmote, RequestOptions?) Adds a reaction to a direct message. public Task AddDirectMessageReactionAsync(Guid messageId, IEmote emote, RequestOptions? options = null) Parameters messageId Guid The identifier of the direct message. emote IEmote The emoji used to react to the message. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for adding a reaction to the direct message. See Also IEmote AddReactionAsync(Guid, IEmote, RequestOptions?) Adds a reaction to a message. public Task AddReactionAsync(Guid messageId, IEmote emote, RequestOptions? options = null) Parameters messageId Guid The identifier of the message. emote IEmote The emoji used to react to the message. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for adding a reaction to the message. See Also IEmote AddRoleAsync(ulong, ulong, uint) Adds the specified role to this user in the guild. public Task AddRoleAsync(ulong guildId, ulong userId, uint roleId) Parameters guildId ulong The guild where the role and user are located. userId ulong The user to add the role to. roleId uint The role to be added to the user. Returns Task A task that represents the asynchronous role addition operation. CreateAssetAsync(Stream, string, RequestOptions?) Creates an asset from a stream. public Task<string> CreateAssetAsync(Stream stream, string filename, RequestOptions? options = null) Parameters stream Stream The stream to the file. filename string The name of the file. options RequestOptions The options to be used when sending the request. Returns Task<string> The asset resource URI of the uploaded file. CreateAssetAsync(string, string?, RequestOptions?) Creates an asset from a file path. public Task<string> CreateAssetAsync(string path, string? filename = null, RequestOptions? options = null) Parameters path string The path to the file. filename string The name of the file. options RequestOptions The options to be used when sending the request. Returns Task<string> The asset resource URI of the uploaded file. CreateGameAsync(string, string?, string?, RequestOptions?) Creates game information. public Task<RestGame> CreateGameAsync(string name, string? processName = null, string? iconUrl = null, RequestOptions? options = null) Parameters name string The name of the game. processName string The process name of the game. iconUrl string The icon URI of the game. options RequestOptions The options to be used when sending the request. Returns Task<RestGame> GetBlockedUsersAsync(RequestOptions?) Gets blocked users. public Task<IReadOnlyCollection<RestUser>> GetBlockedUsersAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestUser>> A task that represents the asynchronous get operation. The task result contains a collection of users that are blocked by the current user. GetChannelAsync(ulong, RequestOptions?) Gets a generic channel. public Task<RestChannel> GetChannelAsync(ulong id, RequestOptions? options = null) Parameters id ulong The identifier of the channel. options RequestOptions The options to be used when sending the request. Returns Task<RestChannel> A task that represents the asynchronous get operation. The task result contains the channel associated with the identifier; null when the channel cannot be found. GetDMChannelAsync(Guid, RequestOptions?) Gets a direct message channel. public Task<RestDMChannel> GetDMChannelAsync(Guid chatCode, RequestOptions? options = null) Parameters chatCode Guid The identifier of the channel. options RequestOptions The options to be used when sending the request. Returns Task<RestDMChannel> A task that represents the asynchronous get operation. The task result contains a read-only collection of direct-message channels that the user currently partakes in. GetDMChannelsAsync(RequestOptions?) Gets a collection of direct message channels opened in this session. public Task<IReadOnlyCollection<RestDMChannel>> GetDMChannelsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestDMChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of direct-message channels that the user currently partakes in. Remarks This method returns a collection of currently opened direct message channels. warning This method will not return previously opened DM channels outside of the current session! If you have just started the client, this may return an empty collection. GetFriendRequestsAsync(RequestOptions?) Gets friend requests. public Task<IReadOnlyCollection<RestFriendRequest>> GetFriendRequestsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestFriendRequest>> A task that represents the asynchronous get operation. The task result contains a collection of friend requests that the current user has received. GetFriendsAsync(RequestOptions?) Gets friends. public Task<IReadOnlyCollection<RestUser>> GetFriendsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestUser>> A task that represents the asynchronous get operation. The task result contains a collection of users that are friends with the current user. GetGamesAsync(GameCreationSource?, RequestOptions?) Gets games information. public IAsyncEnumerable<IReadOnlyCollection<RestGame>> GetGamesAsync(GameCreationSource? source = null, RequestOptions? options = null) Parameters source GameCreationSource? Specifies whether to return games information created by the current user or by the system by default; null to return all games information. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestGame>> A collection of games information. GetGuildAsync(ulong, RequestOptions?) Gets a guild. public Task<RestGuild> GetGuildAsync(ulong id, RequestOptions? options = null) Parameters id ulong The guild identifier. options RequestOptions The options to be used when sending the request. Returns Task<RestGuild> A task that represents the asynchronous get operation. The task result contains the guild associated with the identifier; null when the guild cannot be found. GetGuildUserAsync(ulong, ulong, RequestOptions?) Gets a user from a guild. public Task<RestGuildUser?> GetGuildUserAsync(ulong guildId, ulong id, RequestOptions? options = null) Parameters guildId ulong The identifier of the guild where the user is located. id ulong The identifier of the user (e.g. 168693960628371456). options RequestOptions The options to be used when sending the request. Returns Task<RestGuildUser> A task that represents the asynchronous get operation. The task result contains the user from a guild associated with the identifier; null if the user is not found in the guild. GetGuildsAsync(RequestOptions?) Gets a collection of guilds that the user is currently in. public Task<IReadOnlyCollection<RestGuild>> GetGuildsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestGuild>> A task that represents the asynchronous get operation. The task result contains a read-only collection of guilds that the current user is in. GetUserAsync(ulong, RequestOptions?) Gets a user. public Task<RestUser> GetUserAsync(ulong id, RequestOptions? options = null) Parameters id ulong The identifier of the user (e.g. 168693960628371456). options RequestOptions The options to be used when sending the request. Returns Task<RestUser> A task that represents the asynchronous get operation. The task result contains the user associated with the identifier; null if the user is not found. RemoveDirectMessageReactionAsync(Guid, ulong, IEmote, RequestOptions?) Removes a reaction from a direct message. public Task RemoveDirectMessageReactionAsync(Guid messageId, ulong userId, IEmote emote, RequestOptions? options = null) Parameters messageId Guid The identifier of the direct message. userId ulong The identifier of the user who added the reaction. emote IEmote The emoji used to remove from the message. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for removing a reaction from the direct message. See Also IEmote RemoveReactionAsync(Guid, ulong, IEmote, RequestOptions?) Removes a reaction from a message. public Task RemoveReactionAsync(Guid messageId, ulong userId, IEmote emote, RequestOptions? options = null) Parameters messageId Guid The identifier of the message. userId ulong The identifier of the user who added the reaction. emote IEmote The emoji used to remove from the message. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for removing a reaction from the message. See Also IEmote RemoveRoleAsync(ulong, ulong, uint) Removes the specified roleId from this user in the guild. public Task RemoveRoleAsync(ulong guildId, ulong userId, uint roleId) Parameters guildId ulong The guild where the role and user are located. userId ulong The user to remove the role from. roleId uint The role to be removed from the user. Returns Task A task that represents the asynchronous role removal operation."
  },
  "api/Kook.Rest.KookRestClientExperimentalExtensions.html": {
    "href": "api/Kook.Rest.KookRestClientExperimentalExtensions.html",
    "title": "Class KookRestClientExperimentalExtensions | Kook.Net 文档",
    "keywords": "Class KookRestClientExperimentalExtensions Namespace Kook.Rest Assembly Kook.Net.Experimental.dll Provides extension methods of experimental functionalities for KookRestClients. public static class KookRestClientExperimentalExtensions Inheritance object KookRestClientExperimentalExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateGuildAsync(KookRestClient, string, IVoiceRegion?, Stream?, int?, RequestOptions?) Creates a guild for the logged-in user. public static Task<RestGuild> CreateGuildAsync(this KookRestClient client, string name, IVoiceRegion? region = null, Stream? icon = null, int? templateId = null, RequestOptions? options = null) Parameters client KookRestClient The KOOK rest client instance. name string The name of the new guild. region IVoiceRegion The voice region to create the guild with. icon Stream The icon of the new guild. templateId int? The identifier of the guild template to be used to create the new guild. options RequestOptions The options to be used when sending the request. Returns Task<RestGuild> A task that represents the asynchronous creation operation. The task result contains the created guild. Remarks This method creates a new guild on behalf of the logged-in user. warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future. GetAdminGuildsAsync(KookRestClient, RequestOptions?) Gets a collection of guilds where the current user has the Administrator permission. public static Task<IReadOnlyCollection<RestGuild>> GetAdminGuildsAsync(this KookRestClient client, RequestOptions? options = null) Parameters client KookRestClient The KOOK rest client instance. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestGuild>> A task that represents the asynchronous get operation. The task result contains a read-only collection of guilds where the current user has the Administrator permission. GetVoiceRegionAsync(KookRestClient, string, RequestOptions?) Gets a voice region. public static Task<RestVoiceRegion?> GetVoiceRegionAsync(this KookRestClient client, string id, RequestOptions? options = null) Parameters client KookRestClient The KOOK rest client instance. id string The identifier of the voice region (e.g. eu-central ). options RequestOptions The options to be used when sending the request. Returns Task<RestVoiceRegion> A task that represents the asynchronous get operation. The task result contains the voice region associated with the identifier; null if the voice region is not found. Remarks warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future. GetVoiceRegionsAsync(KookRestClient, RequestOptions?) Gets a collection of the available voice regions. public static Task<IReadOnlyCollection<RestVoiceRegion>> GetVoiceRegionsAsync(this KookRestClient client, RequestOptions? options = null) Parameters client KookRestClient The KOOK rest client instance. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestVoiceRegion>> A task that represents the asynchronous get operation. The task result contains a read-only collection with all of the available voice regions in this session. Remarks warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future. ValidateCardAsync(KookRestClient, ICard, RequestOptions?) Validates a card. public static Task ValidateCardAsync(this KookRestClient client, ICard card, RequestOptions? options = null) Parameters client KookRestClient The KOOK rest client instance. card ICard The card to be validated. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous validation operation. ValidateCardsAsync(KookRestClient, IEnumerable<ICard>, RequestOptions?) Validates a collection of cards. public static Task ValidateCardsAsync(this KookRestClient client, IEnumerable<ICard> cards, RequestOptions? options = null) Parameters client KookRestClient The KOOK rest client instance. cards IEnumerable<ICard> The cards to be validated. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous validation operation. ValidateCardsAsync(KookRestClient, string, RequestOptions?) Validates a collection of cards. public static Task ValidateCardsAsync(this KookRestClient client, string cardsJson, RequestOptions? options = null) Parameters client KookRestClient The KOOK rest client instance. cardsJson string The JSON representation of the cards to be validated. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous validation operation."
  },
  "api/Kook.Rest.KookRestConfig.html": {
    "href": "api/Kook.Rest.KookRestConfig.html",
    "title": "Class KookRestConfig | Kook.Net 文档",
    "keywords": "Class KookRestConfig Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a configuration class for KookRestClient. public class KookRestConfig : KookConfig Inheritance object KookConfig KookRestConfig Derived KookSocketConfig Inherited Members KookConfig.APIVersion KookConfig.VoiceAPIVersion KookConfig.Version KookConfig.UserAgent KookConfig.AcceptLanguage KookConfig.APIUrl KookConfig.DefaultRequestTimeout KookConfig.MaxMessageSize KookConfig.MaxUsersPerBatch KookConfig.MaxMessagesPerBatch KookConfig.MaxItemsPerBatchByDefault KookConfig.MinNicknameSize KookConfig.MaxNicknameSize KookConfig.MinIntimacyScore KookConfig.MaxIntimacyScore KookConfig.BoostPackDuration KookConfig.DefaultRetryMode KookConfig.DefaultRatelimitCallback KookConfig.LogLevel KookConfig.FormatUsersInBidirectionalUnicode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties RestClientProvider Gets or sets the RestClientProvider to use. public RestClientProvider RestClientProvider { get; set; } Property Value RestClientProvider"
  },
  "api/Kook.Rest.Poke.html": {
    "href": "api/Kook.Rest.Poke.html",
    "title": "Class Poke | Kook.Net 文档",
    "keywords": "Class Poke Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a poke in messages. public class Poke : IPoke, IEntity<uint> Inheritance object Poke Implements IPoke IEntity<uint> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Categories Gets the categories of the poke. public IReadOnlyCollection<string> Categories { get; } Property Value IReadOnlyCollection<string> Cooldown Gets how long a user needs to wait before they can use the poke again. public TimeSpan Cooldown { get; } Property Value TimeSpan Description Gets the description of the poke. public string Description { get; } Property Value string Icon Gets the icon resources of the poke. public PokeIcon Icon { get; } Property Value PokeIcon Id Gets the unique identifier for this object. public uint Id { get; } Property Value uint Label Gets the label of the poke. public PokeLabel Label { get; } Property Value PokeLabel MessageScenarios Gets how the poke can be used and displayed in message contexts. public IReadOnlyDictionary<string, string> MessageScenarios { get; } Property Value IReadOnlyDictionary<string, string> Name Gets the name of the poke. public string Name { get; } Property Value string Quality Gets the quality of the poke. public PokeQuality Quality { get; } Property Value PokeQuality Resource Gets the resource of the poke. public IPokeResource Resource { get; } Property Value IPokeResource Methods ToString() Returns the name of the poke. public override string ToString() Returns string A string containing the name of the poke."
  },
  "api/Kook.Rest.RecommendInfo.html": {
    "href": "api/Kook.Rest.RecommendInfo.html",
    "title": "Class RecommendInfo | Kook.Net 文档",
    "keywords": "Class RecommendInfo Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a recommendation information for a guild. public class RecommendInfo : IRecommendInfo Inheritance object RecommendInfo Implements IRecommendInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AuditStatus TODO: To be documented. public int AuditStatus { get; } Property Value int Banner Gets the banner URL of the recommended guild. public string Banner { get; } Property Value string A string representing the banner URL of the recommended guild. BoostLevel Gets the boost level of the recommended guild. public BoostLevel BoostLevel { get; } Property Value BoostLevel A BoostLevel representing the boost level of the recommended guild. Certifications Gets the certifications of the recommended guild. public IReadOnlyCollection<GuildCertification>? Certifications { get; } Property Value IReadOnlyCollection<GuildCertification> CustomId TODO: To be documented. public string CustomId { get; } Property Value string DaysBeforeModify Gets the number of days need to be waited before the recommendation information can be modified again. public int DaysBeforeModify { get; } Property Value int An int representing the number of days need to be waited before the recommendation information can be modified again. DefaultChannelId Gets the default channel ID of the recommended guild. public ulong DefaultChannelId { get; } Property Value ulong A ulong representing the default channel ID of the recommended guild. Description Gets the description of the recommended guild. public string Description { get; } Property Value string A string representing the description of the recommended guild. Features Gets the features of the recommended guild. public GuildFeatures Features { get; } Property Value GuildFeatures GuildId Gets the ID of the recommended guild. public ulong GuildId { get; } Property Value ulong A ulong representing the ID of the recommended guild. Icon Gets the icon URL of the recommended guild. public string Icon { get; } Property Value string A string representing the icon URL of the recommended guild. IsOfficialPartner Gets whether the recommended guild is an official partner. public bool IsOfficialPartner { get; } Property Value bool A bool representing whether the recommended guild is an official partner. Name Gets the name of the recommended guild. public string Name { get; } Property Value string A string representing the name of the recommended guild. OpenId Gets the open ID for the recommended guild. public uint? OpenId { get; } Property Value uint? Sort TODO: To be documented. public int Sort { get; } Property Value int Status Gets the status of the recommended guild. public int Status { get; } Property Value int A int representing the status of the recommended guild. Tag Gets the tag of the recommended guild. public string Tag { get; } Property Value string A string representing the tag of the recommended guild."
  },
  "api/Kook.Rest.RestBan.html": {
    "href": "api/Kook.Rest.RestBan.html",
    "title": "Class RestBan | Kook.Net 文档",
    "keywords": "Class RestBan Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a REST-based ban object. public class RestBan : IBan Inheritance object RestBan Implements IBan Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties CreatedAt Gets the time when the ban was issued. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTime object that represents the time when the ban was issued. Reason Gets the reason why the user is banned if specified. public string Reason { get; } Property Value string A string containing the reason behind the ban; null if none is specified. User Gets the banned user. public RestUser User { get; } Property Value RestUser A generic RestUser object that was banned. Methods ToString() Gets the name of the banned user. public override string ToString() Returns string A string containing the name of the user that was banned."
  },
  "api/Kook.Rest.RestCategoryChannel.html": {
    "href": "api/Kook.Rest.RestCategoryChannel.html",
    "title": "Class RestCategoryChannel | Kook.Net 文档",
    "keywords": "Class RestCategoryChannel Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a REST-based category channel. public class RestCategoryChannel : RestGuildChannel, IUpdateable, ICategoryChannel, IGuildChannel, IChannel, IEntity<ulong>, IDeletable Inheritance object RestEntity<ulong> RestChannel RestGuildChannel RestCategoryChannel Implements IUpdateable ICategoryChannel IGuildChannel IChannel IEntity<ulong> IDeletable Inherited Members RestGuildChannel.RolePermissionOverwrites RestGuildChannel.UserPermissionOverwrites RestGuildChannel.Type RestGuildChannel.Name RestGuildChannel.Position RestGuildChannel.GuildId RestGuildChannel.CreatorId RestGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) RestGuildChannel.GetCreatorAsync(RequestOptions) RestGuildChannel.DeleteAsync(RequestOptions) RestGuildChannel.UpdateAsync(RequestOptions) RestGuildChannel.GetPermissionOverwrite(IUser) RestGuildChannel.GetPermissionOverwrite(IRole) RestGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) RestGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) RestGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) RestGuildChannel.ToString() RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel)"
  },
  "api/Kook.Rest.RestChannel.html": {
    "href": "api/Kook.Rest.RestChannel.html",
    "title": "Class RestChannel | Kook.Net 文档",
    "keywords": "Class RestChannel Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a generic REST-based channel. public class RestChannel : RestEntity<ulong>, IChannel, IEntity<ulong>, IUpdateable Inheritance object RestEntity<ulong> RestChannel Implements IChannel IEntity<ulong> IUpdateable Derived RestDMChannel RestGuildChannel Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Methods UpdateAsync(RequestOptions?) Updates this object's properties with its current state. public virtual Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents an asynchronous reloading operation. Remarks warning This method will fetch the latest data from REST API, and replace the current object's properties with the new data."
  },
  "api/Kook.Rest.RestDMChannel.html": {
    "href": "api/Kook.Rest.RestDMChannel.html",
    "title": "Class RestDMChannel | Kook.Net 文档",
    "keywords": "Class RestDMChannel Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a REST-based direct-message channel. public class RestDMChannel : RestChannel, IUpdateable, IDMChannel, IEntity<Guid>, IRestPrivateChannel, IPrivateChannel, IRestMessageChannel, IMessageChannel, IChannel, IEntity<ulong> Inheritance object RestEntity<ulong> RestChannel RestDMChannel Implements IUpdateable IDMChannel IEntity<Guid> IRestPrivateChannel IPrivateChannel IRestMessageChannel IMessageChannel IChannel IEntity<ulong> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties ChatCode Gets the chat code of the direct-message channel. public Guid ChatCode { get; } Property Value Guid A Guid that represents the chat code of the direct-message channel. Remarks This property is the same as Id. CurrentUser Gets the current logged-in user. public RestUser CurrentUser { get; } Property Value RestUser Id Get the identifier of the DM channel. public Guid Id { get; } Property Value Guid Remarks This property is the same as ChatCode. Recipient Gets the recipient of the channel. public RestUser Recipient { get; } Property Value RestUser Users Gets a collection that is the current logged-in user and the recipient. public IReadOnlyCollection<RestUser> Users { get; } Property Value IReadOnlyCollection<RestUser> Methods CloseAsync(RequestOptions?) Closes this private channel, removing it from your channel list. public Task CloseAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous close operation. DeleteMessageAsync(IMessage, RequestOptions?) Deletes a message based on the provided message in this channel. public Task DeleteMessageAsync(IMessage message, RequestOptions? options = null) Parameters message IMessage The message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DeleteMessageAsync(Guid, RequestOptions?) Deletes a message. public Task DeleteMessageAsync(Guid messageId, RequestOptions? options = null) Parameters messageId Guid The identifier of the message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. GetMessageAsync(Guid, RequestOptions?) Gets a message from this message channel. public Task<RestMessage> GetMessageAsync(Guid id, RequestOptions? options = null) Parameters id Guid The identifier of the message. options RequestOptions The options to be used when sending the request. Returns Task<RestMessage> A task that represents an asynchronous get operation for retrieving the message. The task result contains the retrieved message; null if no message is found with the specified identifier. Remarks This method follows the same behavior as described in GetMessageAsync(Guid, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. GetMessagesAsync(IMessage, Direction, int, RequestOptions?) Gets a collection of messages in this channel. public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessage IMessage The starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. GetMessagesAsync(Guid, Direction, int, RequestOptions?) Gets a collection of messages in this channel. public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessageId Guid The ID of the starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(Guid, Direction, int, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. GetMessagesAsync(int, RequestOptions?) Gets the last N messages from this message channel. public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(int limit = 50, RequestOptions? options = null) Parameters limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(int, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. GetUser(ulong) Gets a user in this channel from the provided id. public RestUser? GetUser(ulong id) Parameters id ulong The identifier of the user. Returns RestUser A RestUser object that is a recipient of this channel; otherwise null. ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions?) Modifies a message. public Task ModifyMessageAsync(Guid messageId, Action<MessageProperties> func, RequestOptions? options = null) Parameters messageId Guid The identifier of the message that would be changed. func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties. SendCardAsync(ICard, IQuote?, RequestOptions?) Sends a card message to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendCardAsync(ICard card, IQuote? quote = null, RequestOptions? options = null) Parameters card ICard The card to be sent. quote IQuote The message quote to be included. Used to reply to specific messages. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendCardsAsync(IEnumerable<ICard>, IQuote?, RequestOptions?) Sends a card message to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(IEnumerable<ICard> cards, IQuote? quote = null, RequestOptions? options = null) Parameters cards IEnumerable<ICard> The cards to be sent. quote IQuote The message quote to be included. Used to reply to specific messages. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendFileAsync(FileAttachment, IQuote?, RequestOptions?) Sends a file to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(FileAttachment attachment, IQuote? quote = null, RequestOptions? options = null) Parameters attachment FileAttachment The attachment containing the file. quote IQuote The message quote to be included. Used to reply to specific messages. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendFileAsync(Stream, string, AttachmentType, IQuote?, RequestOptions?) Sends a file to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(Stream stream, string filename, AttachmentType type = AttachmentType.File, IQuote? quote = null, RequestOptions? options = null) Parameters stream Stream The stream of the file. filename string The name of the file. type AttachmentType The type of the file. quote IQuote The message quote to be included. Used to reply to specific messages. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendFileAsync(string, string?, AttachmentType, IQuote?, RequestOptions?) Sends a file to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(string path, string? filename = null, AttachmentType type = AttachmentType.File, IQuote? quote = null, RequestOptions? options = null) Parameters path string The file path of the file. filename string The name of the file. type AttachmentType The type of the file. quote IQuote The message quote to be included. Used to reply to specific messages. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendTextAsync(string, IQuote?, RequestOptions?) Sends a text message to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendTextAsync(string text, IQuote? quote = null, RequestOptions? options = null) Parameters text string The message to be sent. quote IQuote The message quote to be included. Used to reply to specific messages. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. ToString() Gets a string that represents the Username#IdentifyNumber of the recipient. public override string ToString() Returns string A string that resolves to the Recipient of this channel. UpdateAsync(RequestOptions?) Updates this object's properties with its current state. public override Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents an asynchronous reloading operation. Remarks warning This method will fetch the latest data from REST API, and replace the current object's properties with the new data."
  },
  "api/Kook.Rest.RestEntity-1.html": {
    "href": "api/Kook.Rest.RestEntity-1.html",
    "title": "Class RestEntity<T> | Kook.Net 文档",
    "keywords": "Class RestEntity<T> Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a generic REST-based entity. public abstract class RestEntity<T> : IEntity<T> where T : IEquatable<T> Type Parameters T Inheritance object RestEntity<T> Implements IEntity<T> Derived RestChannel RestFriendRequest RestGame RestGuild RestIntimacy RestInvite RestMessage RestRole RestUser RestVoiceRegion Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id Gets the unique identifier for this object. public T Id { get; } Property Value T"
  },
  "api/Kook.Rest.RestFriendRequest.html": {
    "href": "api/Kook.Rest.RestFriendRequest.html",
    "title": "Class RestFriendRequest | Kook.Net 文档",
    "keywords": "Class RestFriendRequest Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a REST-based friend request. public class RestFriendRequest : RestEntity<ulong>, IFriendRequest, IEntity<ulong> Inheritance object RestEntity<ulong> RestFriendRequest Implements IFriendRequest IEntity<ulong> Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties User Gets the user who sent this friend request. public IUser User { get; } Property Value IUser Methods AcceptAsync(RequestOptions?) Accepts this friend request. public Task AcceptAsync(RequestOptions? options = null) Parameters options RequestOptions The options to use when accepting this friend request. Returns Task A task that represents the asynchronous accept operation. DeclineAsync(RequestOptions?) Declines this friend request. public Task DeclineAsync(RequestOptions? options = null) Parameters options RequestOptions The options to use when declining this friend request. Returns Task A task that represents the asynchronous decline operation."
  },
  "api/Kook.Rest.RestGame.html": {
    "href": "api/Kook.Rest.RestGame.html",
    "title": "Class RestGame | Kook.Net 文档",
    "keywords": "Class RestGame Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a game object. public class RestGame : RestEntity<int>, IGame, IActivity, IEntity<int>, IDeletable Inheritance object RestEntity<int> RestGame Implements IGame IActivity IEntity<int> IDeletable Inherited Members RestEntity<int>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties GameType Gets the type of the game. public GameType GameType { get; } Property Value GameType The type of the game. Icon Gets the URL of the game's icon. public string? Icon { get; } Property Value string A string representing the URL of the game's icon. Name Gets the name of the game. public string Name { get; } Property Value string A string containing the name of the game. Options Gets the additional information about the game. public string? Options { get; } Property Value string A string containing the additional information about the game. ProcessNames Gets the process names of the game. public IReadOnlyCollection<string> ProcessNames { get; } Property Value IReadOnlyCollection<string> An IReadOnlyCollection<T> containing the process names of the game. ProductNames Gets the product names of the game. public IReadOnlyCollection<string> ProductNames { get; } Property Value IReadOnlyCollection<string> An IReadOnlyCollection<T> containing the product names of the game. RequireAdminPrivilege Gets whether the Kook client needs administrator privileges to detect the game. public bool RequireAdminPrivilege { get; } Property Value bool true if the Kook client needs administrator privileges to detect the game; otherwise, false. Methods DeleteAsync(RequestOptions?) Deletes this object and all its children. public Task DeleteAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task ModifyAsync(Action<GameProperties>, RequestOptions?) Modifies this game. public Task<RestGame> ModifyAsync(Action<GameProperties> func, RequestOptions? options = null) Parameters func Action<GameProperties> A delegate containing the properties to modify the game with. options RequestOptions The options to be used when sending the request. Returns Task<RestGame> A task that represents the asynchronous modification operation. Remarks This method modifies this game with the specified properties. To see an example of this method and what properties are available, please refer to GameProperties."
  },
  "api/Kook.Rest.RestGuild.html": {
    "href": "api/Kook.Rest.RestGuild.html",
    "title": "Class RestGuild | Kook.Net 文档",
    "keywords": "Class RestGuild Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a REST-based guild/server. public class RestGuild : RestEntity<ulong>, IGuild, IEntity<ulong>, IUpdateable Inheritance object RestEntity<ulong> RestGuild Implements IGuild IEntity<ulong> IUpdateable Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods RestGuildExperimentalExtensions.DeleteAsync(RestGuild, RequestOptions?) RestGuildExperimentalExtensions.ModifyAsync(RestGuild, Action<GuildProperties>, RequestOptions?) Properties AutoDeleteTime TODO: To be documented. public string? AutoDeleteTime { get; } Property Value string Banner Gets the URL of this guild's banner image. public string Banner { get; } Property Value string A URL pointing to the guild's banner image; null if none is set. BoostLevel Gets the level of guild boosting in this guild. public BoostLevel BoostLevel { get; } Property Value BoostLevel The level of guild boosting in this guild. BoostSubscriptionCount Gets the number of boost subscribers of this guild. public int BoostSubscriptionCount { get; } Property Value int The number of boost subscribers of this guild. BufferBoostSubscriptionCount Gets the number of boost subscribers who activates buffer of this guild. public int BufferBoostSubscriptionCount { get; } Property Value int The number of boost subscribers who activates buffer of this guild. CategoryChannels Gets a collection of all stage channels in this guild. public IReadOnlyCollection<RestCategoryChannel> CategoryChannels { get; } Property Value IReadOnlyCollection<RestCategoryChannel> A read-only collection of stage channels found within this guild. Channels Gets a collection of all channels in this guild. public IReadOnlyCollection<RestGuildChannel> Channels { get; } Property Value IReadOnlyCollection<RestGuildChannel> CurrentUserDisplayName Gets the display name of the current user in this guild. public string CurrentUserDisplayName { get; } Property Value string CurrentUserNickname Gets the nickname of the current user in this guild. public string? CurrentUserNickname { get; } Property Value string CurrentUserRoles Gets the roles of the current user in this guild. public IReadOnlyCollection<RestRole> CurrentUserRoles { get; } Property Value IReadOnlyCollection<RestRole> DefaultChannelId Gets the default channel ID for this guild. public ulong? DefaultChannelId { get; } Property Value ulong? A ulong representing the default channel ID for this guild. Emotes Gets a collection of all custom emotes for this guild. public IReadOnlyCollection<GuildEmote> Emotes { get; } Property Value IReadOnlyCollection<GuildEmote> A read-only collection of all custom emotes for this guild. Remarks warning This property may contain no elements if the current guild is fetched via GetGuildAsync(ulong, RequestOptions?). In this case, you must use GetEmoteAsync(string, RequestOptions?) to retrieve all emotes. See Also GetEmotesAsync(RequestOptions) EveryoneRole Gets the built-in role containing all users in this guild. public RestRole EveryoneRole { get; } Property Value RestRole Features Gets the features of this guild. public GuildFeatures Features { get; } Property Value GuildFeatures An array of objects representing the features of this guild. Remarks important What this property represents is not well investigated. Icon Gets the URL of this guild's icon. public string Icon { get; } Property Value string A URL pointing to the guild's icon; null if none is set. IsOpenEnabled Gets whether this guild is public. public bool IsOpenEnabled { get; } Property Value bool true if this guild is public; false otherwise. MaxBitrate Gets the max bitrate for voice channels in this guild. public int MaxBitrate { get; } Property Value int A int representing the maximum bitrate value allowed by Kook in this guild. MaxUploadLimit Gets the upload limit in bytes for this guild. This number is dependent on the guild's boost status. public ulong MaxUploadLimit { get; } Property Value ulong Name Gets the name of this guild. public string Name { get; } Property Value string A string containing the name of this guild. NotifyType Gets the default notification type for this guild. public NotifyType NotifyType { get; } Property Value NotifyType A NotifyType representing the default notification type for this guild. OpenId Gets the open ID for this guild. public uint? OpenId { get; } Property Value uint? A uint representing the open ID for this guild; this property should be null if IsOpenEnabled is false. OwnerId Gets the ID of the user that owns this guild. public ulong OwnerId { get; } Property Value ulong A ulong representing the identifier of the user that owns this guild. RecommendInfo Gets the recommendation information for this guild. public RecommendInfo? RecommendInfo { get; } Property Value RecommendInfo A recommendation object that represents the recommendation information for this guild; null if the guild does not have a recommendation. Region Gets the default voice region for this guild. public string Region { get; } Property Value string A string representing the default voice region for this guild. Roles Gets a collection of all roles in this guild. public IReadOnlyCollection<RestRole> Roles { get; } Property Value IReadOnlyCollection<RestRole> Status TODO: To be documented. public int Status { get; } Property Value int TextChannels Gets a collection of all text channels in this guild. public IReadOnlyCollection<RestTextChannel> TextChannels { get; } Property Value IReadOnlyCollection<RestTextChannel> A read-only collection of message channels found within this guild. Topic Gets the topic for the guild. public string Topic { get; } Property Value string The description for the guild; null if none is set. VoiceChannels Gets a collection of all voice channels in this guild. public IReadOnlyCollection<RestVoiceChannel> VoiceChannels { get; } Property Value IReadOnlyCollection<RestVoiceChannel> A read-only collection of voice channels found within this guild. WelcomeChannelId Gets the welcome channel ID for this guild. public ulong? WelcomeChannelId { get; } Property Value ulong? A ulong representing the welcome channel ID for this guild. Methods AddBanAsync(IUser, int, string?, RequestOptions?) Bans the user from this guild and optionally prunes their recent messages. public Task AddBanAsync(IUser user, int pruneDays = 0, string? reason = null, RequestOptions? options = null) Parameters user IUser The user to ban. pruneDays int The number of days to remove messages from this user for, and this number must be between [0, 7]. reason string The reason of the ban to be written in the audit log. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous add operation for the ban. Exceptions ArgumentException pruneDays is not between 0 to 7. AddBanAsync(ulong, int, string?, RequestOptions?) Bans the user from this guild and optionally prunes their recent messages. public Task AddBanAsync(ulong userId, int pruneDays = 0, string? reason = null, RequestOptions? options = null) Parameters userId ulong The identifier of the user to ban. pruneDays int The number of days to remove messages from this user for, and this number must be between [0, 7]. reason string The reason of the ban to be written in the audit log. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous add operation for the ban. Exceptions ArgumentException pruneDays is not between 0 to 7. CreateCategoryChannelAsync(string, Action<CreateCategoryChannelProperties>?, RequestOptions?) Creates a category channel with the provided name. public Task<RestCategoryChannel> CreateCategoryChannelAsync(string name, Action<CreateCategoryChannelProperties>? func = null, RequestOptions? options = null) Parameters name string The name of the new channel. func Action<CreateCategoryChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<RestCategoryChannel> The created category channel. Exceptions ArgumentNullException name is null. CreateEmoteAsync(string, Image, RequestOptions?) Creates a new GuildEmote in this guild. public Task<GuildEmote> CreateEmoteAsync(string name, Image image, RequestOptions? options = null) Parameters name string The name of the guild emote. image Image The image of the new emote. options RequestOptions The options to be used when sending the request. Returns Task<GuildEmote> A task that represents the asynchronous creation operation. The task result contains the created emote. CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions?) Creates a new invite to this channel. public Task<RestInvite> CreateInviteAsync(InviteMaxAge maxAge = InviteMaxAge._604800, InviteMaxUses maxUses = InviteMaxUses.Unlimited, RequestOptions? options = null) Parameters maxAge InviteMaxAge The time (in seconds) until the invite expires. Set to null to never expire. maxUses InviteMaxUses The max amount of times this invite may be used. Set to null to have unlimited uses. options RequestOptions The options to be used when sending the request. Returns Task<RestInvite> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateInviteAsync(int?, int?, RequestOptions?) Creates a new invite to this channel. public Task<RestInvite> CreateInviteAsync(int? maxAge = 604800, int? maxUses = null, RequestOptions? options = null) Parameters maxAge int? The time until the invite expires. Set to InviteMaxAge.NeverExpires to never expire. maxUses int? The max amount of times this invite may be used. Set to InviteMaxUses.Unlimited to have unlimited uses. options RequestOptions The options to be used when sending the request. Returns Task<RestInvite> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateRoleAsync(string?, RequestOptions?) Creates a new role with the provided name. public Task<RestRole> CreateRoleAsync(string? name = null, RequestOptions? options = null) Parameters name string The new name for the role. options RequestOptions The options to be used when sending the request. Returns Task<RestRole> A task that represents the asynchronous creation operation. The task result contains the newly created role. CreateTextChannelAsync(string, Action<CreateTextChannelProperties>?, RequestOptions?) Creates a new text channel in this guild. public Task<RestTextChannel> CreateTextChannelAsync(string name, Action<CreateTextChannelProperties>? func = null, RequestOptions? options = null) Parameters name string The new name for the text channel. func Action<CreateTextChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<RestTextChannel> A task that represents the asynchronous creation operation. The task result contains the newly created text channel. CreateVoiceChannelAsync(string, Action<CreateVoiceChannelProperties>?, RequestOptions?) Creates a voice channel with the provided name. public Task<RestVoiceChannel> CreateVoiceChannelAsync(string name, Action<CreateVoiceChannelProperties>? func = null, RequestOptions? options = null) Parameters name string The name of the new channel. func Action<CreateVoiceChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<RestVoiceChannel> The created voice channel. Exceptions ArgumentNullException name is null. DeleteEmoteAsync(GuildEmote, RequestOptions?) Deletes an existing GuildEmote from this guild. public Task DeleteEmoteAsync(GuildEmote emote, RequestOptions? options = null) Parameters emote GuildEmote The emote to delete. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. GetActiveBoostSubscriptionsAsync(RequestOptions?) Gets subscriptions which are not expired for this guild. public Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> GetActiveBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> A task that represents the asynchronous retrieval operation. The task result contains a collection of BoostSubscriptionMetadata which are not expired, each representing the subscriptions information. GetBadgeAsync(BadgeStyle, RequestOptions?) Gets a badge which is associated with this guild. public Task<Stream> GetBadgeAsync(BadgeStyle style = BadgeStyle.GuildName, RequestOptions? options = null) Parameters style BadgeStyle The BadgeStyle that specifies the style of the badge. options RequestOptions The options to be used when sending the request. Returns Task<Stream> A task that represents the asynchronous get operation. The task result contains the stream of the badge associated with this guild. GetBanAsync(IUser, RequestOptions?) Gets a ban object for a banned user. public Task<RestBan?> GetBanAsync(IUser user, RequestOptions? options = null) Parameters user IUser The banned user. options RequestOptions The options to be used when sending the request. Returns Task<RestBan> A task that represents the asynchronous get operation. The task result contains a ban object, which contains the user information and the reason for the ban; null if the ban entry cannot be found. GetBanAsync(ulong, RequestOptions?) Gets a ban object for a banned user. public Task<RestBan?> GetBanAsync(ulong userId, RequestOptions? options = null) Parameters userId ulong The identifier for the banned user. options RequestOptions The options to be used when sending the request. Returns Task<RestBan> A task that represents the asynchronous get operation. The task result contains a ban object, which contains the user information and the reason for the ban; null if the ban entry cannot be found. GetBansAsync(RequestOptions?) Gets a collection of all users banned in this guild. public Task<IReadOnlyCollection<RestBan>> GetBansAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestBan>> A task that represents the asynchronous get operation. The task result contains a read-only collection of ban objects that this guild currently possesses, with each object containing the user banned and reason behind the ban. GetBoostSubscriptionsAsync(RequestOptions?) Gets all subscriptions for this guild. public Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> GetBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> A task that represents the asynchronous retrieval operation. The task result contains a collection of BoostSubscriptionMetadata, each representing the subscriptions information. GetCategoryChannelAsync(ulong, RequestOptions?) Gets a category channel in this guild. public Task<RestCategoryChannel?> GetCategoryChannelAsync(ulong id, RequestOptions? options = null) Parameters id ulong The identifier for the category channel. options RequestOptions The options to be used when sending the request. Returns Task<RestCategoryChannel> A task that represents the asynchronous get operation. The task result contains the category channel associated with the specified id; null if none is found. GetCategoryChannelsAsync(RequestOptions?) Gets a collection of all category channels in this guild. public Task<IReadOnlyCollection<RestCategoryChannel>> GetCategoryChannelsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestCategoryChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of category channels found within this guild. GetChannelAsync(ulong, RequestOptions?) Gets a channel in this guild. public Task<RestGuildChannel> GetChannelAsync(ulong id, RequestOptions? options = null) Parameters id ulong The identifier for the channel. options RequestOptions The options to be used when sending the request. Returns Task<RestGuildChannel> A task that represents the asynchronous get operation. The task result contains the generic channel associated with the specified id; null if none is found. GetChannelsAsync(RequestOptions?) Gets a collection of all channels in this guild. public Task<IReadOnlyCollection<RestGuildChannel>> GetChannelsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestGuildChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of generic channels found within this guild. GetCurrentUserAsync(RequestOptions?) Gets the current user for this guild. public Task<RestGuildUser> GetCurrentUserAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestGuildUser> A task that represents the asynchronous get operation. The task result contains the currently logged-in user within this guild. GetDefaultChannelAsync(RequestOptions?) Gets the default text channel in this guild. public Task<RestTextChannel?> GetDefaultChannelAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestTextChannel> A task that represents the asynchronous get operation. The task result contains the default text channel of this guild; null if none is found. GetEmoteAsync(string, RequestOptions?) Gets a specific emote from this guild. public Task<GuildEmote?> GetEmoteAsync(string id, RequestOptions? options = null) Parameters id string The identifier for the guild emote. options RequestOptions The options to be used when sending the request. Returns Task<GuildEmote> A task that represents the asynchronous get operation. The task result contains the emote found with the specified id; null if none is found. GetEmotesAsync(RequestOptions?) Gets a collection of emotes from this guild. public Task<IReadOnlyCollection<GuildEmote>> GetEmotesAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<GuildEmote>> A task that represents the asynchronous get operation. The task result contains a read-only collection of emotes found within the guild. GetInvitesAsync(RequestOptions?) Gets a collection of all invites in this guild. public Task<IReadOnlyCollection<IInvite>> GetInvitesAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IInvite>> A task that represents the asynchronous get operation. The task result contains a read-only collection of invite, each representing information for an invite found within this guild. GetOwnerAsync(RequestOptions?) Gets the owner of this guild. public Task<RestGuildUser> GetOwnerAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestGuildUser> A task that represents the asynchronous get operation. The task result contains the owner of this guild. GetRole(uint) Gets a role in this guild. public RestRole? GetRole(uint id) Parameters id uint The identifier for the role. Returns RestRole A role that is associated with the specified id; null if none is found. GetTextChannelAsync(ulong, RequestOptions?) Gets a text channel in this guild. public Task<RestTextChannel?> GetTextChannelAsync(ulong id, RequestOptions? options = null) Parameters id ulong The identifier for the text channel. options RequestOptions The options to be used when sending the request. Returns Task<RestTextChannel> A task that represents the asynchronous get operation. The task result contains the text channel associated with the specified id; null if none is found. GetTextChannelsAsync(RequestOptions?) Gets a collection of all text channels in this guild. public Task<IReadOnlyCollection<RestTextChannel>> GetTextChannelsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestTextChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of message channels found within this guild. GetUserAsync(ulong, RequestOptions?) Gets a user from this guild. public Task<RestGuildUser> GetUserAsync(ulong id, RequestOptions? options = null) Parameters id ulong The identifier of the user. options RequestOptions The options to be used when sending the request. Returns Task<RestGuildUser> A task that represents the asynchronous get operation. The task result contains the guild user associated with the specified id; null if none is found. Remarks This method retrieves a user found within this guild. GetUsersAsync(RequestOptions?) Gets a collection of all users in this guild. public IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> GetUsersAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> A task that represents the asynchronous get operation. The task result contains a collection of guild users found within this guild. Remarks This method retrieves all users found within this guild. GetVoiceChannelAsync(ulong, RequestOptions?) Gets a voice channel in this guild. public Task<RestVoiceChannel?> GetVoiceChannelAsync(ulong id, RequestOptions? options = null) Parameters id ulong The identifier for the voice channel. options RequestOptions The options to be used when sending the request. Returns Task<RestVoiceChannel> A task that represents the asynchronous get operation. The task result contains the voice channel associated with the specified id; null if none is found. GetVoiceChannelsAsync(RequestOptions?) Gets a collection of all voice channels in this guild. public Task<IReadOnlyCollection<RestVoiceChannel>> GetVoiceChannelsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestVoiceChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of voice channels found within this guild. GetWelcomeChannelAsync(RequestOptions?) Gets the welcome text channel in this guild. public Task<RestTextChannel?> GetWelcomeChannelAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestTextChannel> A task that represents the asynchronous get operation. The task result contains the welcome text channel of this guild; null if none is found. LeaveAsync(RequestOptions?) Leaves this guild. public Task LeaveAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous leave operation. Remarks This method will make the currently logged-in user leave the guild. note If the user is the owner of this guild, use DeleteAsync(RequestOptions?) instead. ModifyEmoteNameAsync(GuildEmote, string, RequestOptions?) Modifies an existing GuildEmote in this guild. public Task ModifyEmoteNameAsync(GuildEmote emote, string name, RequestOptions? options = null) Parameters emote GuildEmote The emote to be modified. name string The new name of the emote. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. The task result contains the modified emote. Exceptions ArgumentNullException name is null. MoveUsersAsync(IEnumerable<IGuildUser>, IVoiceChannel, RequestOptions?) Moves the user to the voice channel. public Task MoveUsersAsync(IEnumerable<IGuildUser> users, IVoiceChannel targetChannel, RequestOptions? options = null) Parameters users IEnumerable<IGuildUser> The users to move. targetChannel IVoiceChannel the channel where the user gets moved to. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for moving a user. RemoveBanAsync(IUser, RequestOptions?) Unbans the user if they are currently banned. public Task RemoveBanAsync(IUser user, RequestOptions? options = null) Parameters user IUser The user to be unbanned. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation for the ban. RemoveBanAsync(ulong, RequestOptions?) Unbans the user if they are currently banned. public Task RemoveBanAsync(ulong userId, RequestOptions? options = null) Parameters userId ulong The identifier of the user to be unbanned. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation for the ban. SearchUsersAsync(Action<SearchGuildMemberProperties>, int, RequestOptions?) Gets a collection of users in this guild that the name or nickname contains the provided string at func. public IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> SearchUsersAsync(Action<SearchGuildMemberProperties> func, int limit = 50, RequestOptions? options = null) Parameters func Action<SearchGuildMemberProperties> A delegate containing the properties to search users with. limit int The maximum number of users to be gotten. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> A task that represents the asynchronous get operation. The task result contains a collection of guild users that matches the properties with the provided Action<T> at func. Remarks The limit can not be higher than MaxUsersPerBatch. ToString() Returns the name of the guild. public override string ToString() Returns string The name of the guild. UpdateAsync(RequestOptions?) Updates this object's properties with its current state. public Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents an asynchronous reloading operation. Remarks warning This method will fetch the latest data from REST API, and replace the current object's properties with the new data."
  },
  "api/Kook.Rest.RestGuildChannel.html": {
    "href": "api/Kook.Rest.RestGuildChannel.html",
    "title": "Class RestGuildChannel | Kook.Net 文档",
    "keywords": "Class RestGuildChannel Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a REST-based guild channel in a guild. public class RestGuildChannel : RestChannel, IUpdateable, IGuildChannel, IChannel, IEntity<ulong>, IDeletable Inheritance object RestEntity<ulong> RestChannel RestGuildChannel Implements IUpdateable IGuildChannel IChannel IEntity<ulong> IDeletable Derived RestCategoryChannel RestTextChannel Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties CreatorId Gets the identifier of the user who created this channel. public ulong? CreatorId { get; } Property Value ulong? A ulong representing the identifier of the user who created this channel. GuildId Gets the guild ID associated with this channel. public ulong GuildId { get; } Property Value ulong An ulong representing the guild identifier for the guild that this channel belongs to. Name Gets the name of this channel. public string Name { get; } Property Value string A string containing the name of this channel. Position Gets the position of this channel. public int? Position { get; } Property Value int? An int representing the position of this channel in the guild's channel list relative to others of the same type. RolePermissionOverwrites Gets a collection of permission overwrites for roles for this channel. public virtual IReadOnlyCollection<RolePermissionOverwrite> RolePermissionOverwrites { get; } Property Value IReadOnlyCollection<RolePermissionOverwrite> A collection of overwrites for roles associated with this channel. Type Gets the type of this channel. public ChannelType Type { get; } Property Value ChannelType A ChannelType representing the type of this channel. UserPermissionOverwrites Gets a collection of permission overwrites for users for this channel. public virtual IReadOnlyCollection<UserPermissionOverwrite> UserPermissionOverwrites { get; } Property Value IReadOnlyCollection<UserPermissionOverwrite> A collection of overwrites for users associated with this channel. Methods AddPermissionOverwriteAsync(IGuildUser, RequestOptions?) Adds the permission overwrite for the given user. public Task AddPermissionOverwriteAsync(IGuildUser user, RequestOptions? options = null) Parameters user IGuildUser The user to add the overwrite to. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. AddPermissionOverwriteAsync(IRole, RequestOptions?) Adds the permission overwrite for the given role. public Task AddPermissionOverwriteAsync(IRole role, RequestOptions? options = null) Parameters role IRole The role to add the overwrite to. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. DeleteAsync(RequestOptions?) Deletes this object and all its children. public Task DeleteAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task GetCreatorAsync(RequestOptions?) Gets the creator of this channel. public Task<RestUser?> GetCreatorAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestUser> A task that represents the asynchronous get operation. The task result contains the creator of this channel. Remarks This method will try to get the user as a global user. To get the creator as a guild member, you will need to get the user through GetUserAsync(ulong, CacheMode, RequestOptions?).\"/> GetPermissionOverwrite(IRole) Gets the permission overwrite for a specific role. public OverwritePermissions? GetPermissionOverwrite(IRole role) Parameters role IRole The role to get the overwrite from. Returns OverwritePermissions? An overwrite object for the targeted role; null if none is set. GetPermissionOverwrite(IUser) Gets the permission overwrite for a specific user. public OverwritePermissions? GetPermissionOverwrite(IUser user) Parameters user IUser The user to get the overwrite from. Returns OverwritePermissions? An overwrite object for the targeted user; null if none is set. ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions?) Modifies this guild channel. public Task ModifyAsync(Action<ModifyGuildChannelProperties> func, RequestOptions? options = null) Parameters func Action<ModifyGuildChannelProperties> The delegate containing the properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies the current guild channel with the specified properties. To see an example of this method and what properties are available, please refer to ModifyGuildChannelProperties. ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions?) Updates the permission overwrite for the given user, if one exists. public Task ModifyPermissionOverwriteAsync(IGuildUser user, Func<OverwritePermissions, OverwritePermissions> func, RequestOptions? options = null) Parameters user IGuildUser The user to modify the overwrite for. func Func<OverwritePermissions, OverwritePermissions> A delegate containing the values to modify the permission overwrite with. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions?) Updates the permission overwrite for the given role, if one exists. public Task ModifyPermissionOverwriteAsync(IRole role, Func<OverwritePermissions, OverwritePermissions> func, RequestOptions? options = null) Parameters role IRole The role to remove the overwrite for. func Func<OverwritePermissions, OverwritePermissions> A delegate containing the values to modify the permission overwrite with. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. RemovePermissionOverwriteAsync(IGuildUser, RequestOptions?) Removes the permission overwrite for the given user, if one exists. public Task RemovePermissionOverwriteAsync(IGuildUser user, RequestOptions? options = null) Parameters user IGuildUser The user to remove the overwrite from. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. RemovePermissionOverwriteAsync(IRole, RequestOptions?) Removes the permission overwrite for the given role, if one exists. public Task RemovePermissionOverwriteAsync(IRole role, RequestOptions? options = null) Parameters role IRole The role to remove the overwrite from. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. ToString() Gets the name of this channel. public override string ToString() Returns string A string that is the name of this channel. UpdateAsync(RequestOptions?) Updates this object's properties with its current state. public override Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents an asynchronous reloading operation. Remarks warning This method will fetch the latest data from REST API, and replace the current object's properties with the new data."
  },
  "api/Kook.Rest.RestGuildExperimentalExtensions.html": {
    "href": "api/Kook.Rest.RestGuildExperimentalExtensions.html",
    "title": "Class RestGuildExperimentalExtensions | Kook.Net 文档",
    "keywords": "Class RestGuildExperimentalExtensions Namespace Kook.Rest Assembly Kook.Net.Experimental.dll Provides extension methods of experimental functionalities for RestGuilds. public static class RestGuildExperimentalExtensions Inheritance object RestGuildExperimentalExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DeleteAsync(RestGuild, RequestOptions?) Deletes this guild. public static Task DeleteAsync(this RestGuild guild, RequestOptions? options = null) Parameters guild RestGuild The guild to delete. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous deletion operation. Remarks warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future. ModifyAsync(RestGuild, Action<GuildProperties>, RequestOptions?) Modifies this guild. public static Task ModifyAsync(this RestGuild guild, Action<GuildProperties> func, RequestOptions? options = null) Parameters guild RestGuild The guild to modify. func Action<GuildProperties> The delegate containing the properties to modify the guild with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Exceptions ArgumentNullException func is null."
  },
  "api/Kook.Rest.RestGuildUser.html": {
    "href": "api/Kook.Rest.RestGuildUser.html",
    "title": "Class RestGuildUser | Kook.Net 文档",
    "keywords": "Class RestGuildUser Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a REST-based guild user. public class RestGuildUser : RestUser, IUpdateable, IGuildUser, IUser, IEntity<ulong>, IMentionable, IPresence, IVoiceState Inheritance object RestEntity<ulong> RestUser RestGuildUser Implements IUpdateable IGuildUser IUser IEntity<ulong> IMentionable IPresence IVoiceState Inherited Members RestUser.Username RestUser.IdentifyNumberValue RestUser.IsBot RestUser.IsBanned RestUser.HasBuff RestUser.HasAnnualBuff RestUser.Avatar RestUser.BuffAvatar RestUser.Banner RestUser.IsDenoiseEnabled RestUser.UserTag RestUser.Nameplates RestUser.IsSystemUser RestUser.IdentifyNumber RestUser.KMarkdownMention RestUser.IsOnline RestUser.ActiveClient RestUser.CreateDMChannelAsync(RequestOptions) RestUser.GetIntimacyAsync(RequestOptions) RestUser.UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) RestUser.BlockAsync(RequestOptions) RestUser.UnblockAsync(RequestOptions) RestUser.RemoveFriendAsync(RequestOptions) RestUser.ToString() RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods UserExtensions.BanAsync(IGuildUser, int, string?, RequestOptions?) Format.UsernameAndIdentifyNumber(IUser, bool) UserExtensions.SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendTextAsync(IUser, string, IQuote?, RequestOptions?) Properties ActiveAt Gets when this user was activated. public DateTimeOffset? ActiveAt { get; } Property Value DateTimeOffset? The time of which the user was activated. Color Gets the color the user's displayed name is being displayed in. public Color? Color { get; } Property Value Color? A Color struct representing the color the user's display name is being displayed in. Remarks warning At present, the color of a role may be a solid color or a gradient. See ColorType, which is guaranteed due to the fact that the guild's user list API endpoint returns the color type and the gradient color information if exists. However, the value of this property is fetched from the guild's user list API endpoint, which does not return the color type and the gradient color information. Hence, the value of this property may be incorrect if the color of a role is a gradient. DisplayName Gets the displayed name for this user. public string DisplayName { get; } Property Value string A string representing the display name of the user; If the nickname is null, this will be the username. GuildId Gets the ID of the guild for this user. public ulong GuildId { get; } Property Value ulong An ulong representing the identifier of the guild that this user belongs to. GuildPermissions Gets the guild-level permissions for this user. public GuildPermissions GuildPermissions { get; } Property Value GuildPermissions A GuildPermissions structure for this user, representing what permissions this user has in the guild. Exceptions InvalidOperationException Resolving permissions requires the parent guild to be downloaded. IsMobileVerified Gets whether the mobile number has been verified for this user. public bool? IsMobileVerified { get; } Property Value bool? true if the mobile number has been verified; false otherwise. IsOwner Gets whether this user owns the current guild. public bool? IsOwner { get; } Property Value bool? true if this user owns the current guild; false otherwise. JoinedAt Gets when this user joined the guild. public DateTimeOffset? JoinedAt { get; } Property Value DateTimeOffset? The time of which the user has joined the guild. Nickname Gets the nickname for this user. public string? Nickname { get; } Property Value string A string representing the nickname of the user; null if none is set. PlainTextMention Returns a special string used to mention this object in plain text formatted text. public string PlainTextMention { get; } Property Value string A string that is recognized by Kook as a mention in plain text formatted text. RoleIds Gets a collection of IDs for the roles that this user currently possesses in the guild. public IReadOnlyCollection<uint> RoleIds { get; } Property Value IReadOnlyCollection<uint> A read-only collection of uint, each representing an identifier for a role that this user possesses. Remarks This property returns a read-only collection of the identifiers of the roles that this user possesses. For WebSocket users, a Roles property can be found in place of this property. Due to the REST implementation, only a collection of identifiers can be retrieved instead of the full role objects. Methods AddRoleAsync(IRole, RequestOptions?) Adds the specified role to this user in the guild. public Task AddRoleAsync(IRole role, RequestOptions? options = null) Parameters role IRole The role to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRoleAsync(uint, RequestOptions?) Adds the specified role to this user in the guild. public Task AddRoleAsync(uint roleId, RequestOptions? options = null) Parameters roleId uint The role to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRolesAsync(IEnumerable<IRole>, RequestOptions?) Adds the specified roles to this user in the guild. public Task AddRolesAsync(IEnumerable<IRole> roles, RequestOptions? options = null) Parameters roles IEnumerable<IRole> The roles to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRolesAsync(IEnumerable<uint>, RequestOptions?) Adds the specified roleIds to this user in the guild. public Task AddRolesAsync(IEnumerable<uint> roleIds, RequestOptions? options = null) Parameters roleIds IEnumerable<uint> The roles to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. DeafenAsync(RequestOptions?) Deafen this user in this guild. public Task DeafenAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous deafening operation. GetBoostSubscriptionsAsync(RequestOptions?) Gets all subscriptions of this user for this guild. public Task<IReadOnlyCollection<BoostSubscriptionMetadata>> GetBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<BoostSubscriptionMetadata>> A task that represents the asynchronous retrieval operation. The task result contains a collection of BoostSubscriptionMetadata, each representing the subscription information. GetConnectedVoiceChannelsAsync(RequestOptions?) Gets a collection of voice channels a user. public Task<IReadOnlyCollection<IVoiceChannel>> GetConnectedVoiceChannelsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IVoiceChannel>> A task that represents the asynchronous get operation. The task result contains a collection of voice channels the user is connected to. GetPermissions(IGuildChannel) Gets the level permissions granted to this user to a given channel. public ChannelPermissions GetPermissions(IGuildChannel channel) Parameters channel IGuildChannel The channel to get the permission from. Returns ChannelPermissions A ChannelPermissions structure representing the permissions that a user has in the specified channel. Exceptions InvalidOperationException Resolving permissions requires the parent guild to be downloaded. KickAsync(RequestOptions?) Kicks this user from this guild. public Task KickAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous kick operation. ModifyNicknameAsync(string?, RequestOptions?) Modifies this user's nickname in this guild. public Task ModifyNicknameAsync(string? name, RequestOptions? options = null) Parameters name string The nickname to modify the user with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies the nickname of current guild user. warning The KOOK API will clear the nickname if the nickname is set to the same as the username at present. Hence either setting the nickname to the same as the username or setting the nickname to null will clear the nickname. MuteAsync(RequestOptions?) Mute this user in this guild. public Task MuteAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous muting operation. RemoveRoleAsync(IRole, RequestOptions?) Removes the specified role from this user in the guild. public Task RemoveRoleAsync(IRole role, RequestOptions? options = null) Parameters role IRole The role to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRoleAsync(uint, RequestOptions?) Removes the specified roleId from this user in the guild. public Task RemoveRoleAsync(uint roleId, RequestOptions? options = null) Parameters roleId uint The role to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRolesAsync(IEnumerable<IRole>, RequestOptions?) Removes the specified roles from this user in the guild. public Task RemoveRolesAsync(IEnumerable<IRole> roles, RequestOptions? options = null) Parameters roles IEnumerable<IRole> The roles to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRolesAsync(IEnumerable<uint>, RequestOptions?) Removes the specified roleIds from this user in the guild. public Task RemoveRolesAsync(IEnumerable<uint> roleIds, RequestOptions? options = null) Parameters roleIds IEnumerable<uint> The roles to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RequestFriendAsync(RequestOptions?) Sends a friend request to this user. public override Task RequestFriendAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for sending the friend request. UndeafenAsync(RequestOptions?) Undeafen this user in this guild. public Task UndeafenAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous undeafening operation. UnmuteAsync(RequestOptions?) Unmute this user in this guild. public Task UnmuteAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous unmuting operation. UpdateAsync(RequestOptions?) Updates this object's properties with its current state. public override Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents an asynchronous reloading operation. Remarks warning This method will fetch the latest data from REST API, and replace the current object's properties with the new data."
  },
  "api/Kook.Rest.RestIntimacy.html": {
    "href": "api/Kook.Rest.RestIntimacy.html",
    "title": "Class RestIntimacy | Kook.Net 文档",
    "keywords": "Class RestIntimacy Namespace Kook.Rest Assembly Kook.Net.Rest.dll Gets the intimacy information associated with the specified user. public class RestIntimacy : RestEntity<ulong>, IIntimacy, IEntity<ulong> Inheritance object RestEntity<ulong> RestIntimacy Implements IIntimacy IEntity<ulong> Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Images Gets the images associated with this intimacy. public IReadOnlyCollection<IntimacyImage> Images { get; } Property Value IReadOnlyCollection<IntimacyImage> An IReadOnlyCollection<T> containing the images associated with this intimacy. LastModifyAt Gets the time at which this intimacy was modified last time. public DateTimeOffset? LastModifyAt { get; } Property Value DateTimeOffset? A time at which this intimacy was modified last time. LastReadAt Gets the time at which the user read the message. public DateTimeOffset LastReadAt { get; } Property Value DateTimeOffset A time at which the user read the message. Score Gets the score associated with this intimacy. public int Score { get; } Property Value int A int representing the score associated with this intimacy. SocialInfo Gets the social information associated with this intimacy. public string SocialInfo { get; } Property Value string A string representing the social information associated with this intimacy. User Gets the user associated with this intimacy. public IUser User { get; } Property Value IUser An IUser representing the user associated with this intimacy. Methods UpdateAsync(Action<IntimacyProperties>, RequestOptions?) Updates the intimacy information with this user. public Task UpdateAsync(Action<IntimacyProperties> func, RequestOptions? options = null) Parameters func Action<IntimacyProperties> A delegate containing the properties to modify the IIntimacy with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for updating the intimacy information."
  },
  "api/Kook.Rest.RestInvite.html": {
    "href": "api/Kook.Rest.RestInvite.html",
    "title": "Class RestInvite | Kook.Net 文档",
    "keywords": "Class RestInvite Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a REST-based invite. public class RestInvite : RestEntity<uint>, IInvite, IEntity<uint>, IDeletable, IUpdateable Inheritance object RestEntity<uint> RestInvite Implements IInvite IEntity<uint> IDeletable IUpdateable Inherited Members RestEntity<uint>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties ChannelId Gets the ID of the channel this invite is linked to. public ulong? ChannelId { get; } Property Value ulong? A ulong representing the channel identifier that the invite points to. ChannelName Gets the name of the channel this invite is linked to. public string? ChannelName { get; } Property Value string A string containing the name of the channel that the invite points to. ChannelType Gets the type of the channel this invite is linked to. public ChannelType ChannelType { get; } Property Value ChannelType Code Gets the unique identifier for this invite. public string Code { get; } Property Value string A string containing the invite code (e.g. wEAF5t). CreatedAt Gets the time at which this invite was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing the time at which this invite was created. ExpiresAt Gets the time at which this invite will expire. public DateTimeOffset? ExpiresAt { get; } Property Value DateTimeOffset? A DateTimeOffset representing the time until this invite expires; null if this invite never expires. GuildId Gets the ID of the guild this invite is linked to. public ulong? GuildId { get; } Property Value ulong? A ulong representing the guild identifier that the invite points to. GuildName Gets the name of the guild this invite is linked to. public string GuildName { get; } Property Value string A string containing the name of the guild that the invite points to. InvitedUsersCount Gets the number of users that have accepted this invite. public int InvitedUsersCount { get; } Property Value int An int representing the number of users that have accepted this invite. Inviter Gets the user that created this invite. public IUser Inviter { get; } Property Value IUser A user that created this invite. MaxAge Gets the time span until the invite expires. public TimeSpan? MaxAge { get; } Property Value TimeSpan? A TimeSpan representing the time span until this invite expires; null if this invite never expires. MaxUses Gets the max number of uses this invite may have. public int? MaxUses { get; } Property Value int? An int representing the number of uses this invite may be accepted until it is removed from the guild; null if none is set. RemainingUses Gets the number of times this invite still remains. public int? RemainingUses { get; } Property Value int? An int representing the number of times this invite still remains; null if none is set. Url Gets the URL used to accept this invite using Code. public string Url { get; } Property Value string A string containing the full invite URL (e.g. https://kaihei.co/wEAF5t). Uses Gets the number of times this invite has been used. public int? Uses { get; } Property Value int? An int representing the number of times this invite has been used; null if none is set. Methods DeleteAsync(RequestOptions?) Deletes this object and all its children. public Task DeleteAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task ToString() Gets the URL of the invite. public override string ToString() Returns string A string that resolves to the Url of the invite. UpdateAsync(RequestOptions?) Updates this object's properties with its current state. public Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents an asynchronous reloading operation. Remarks warning This method will fetch the latest data from REST API, and replace the current object's properties with the new data."
  },
  "api/Kook.Rest.RestMessage.html": {
    "href": "api/Kook.Rest.RestMessage.html",
    "title": "Class RestMessage | Kook.Net 文档",
    "keywords": "Class RestMessage Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a REST-based message. public abstract class RestMessage : RestEntity<Guid>, IMessage, IEntity<Guid>, IDeletable, IUpdateable Inheritance object RestEntity<Guid> RestMessage Implements IMessage IEntity<Guid> IDeletable IUpdateable Derived RestSystemMessage RestUserMessage Inherited Members RestEntity<Guid>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods MessageExtensions.GetJumpUrl(IMessage) Properties Attachments Gets the attachment included in this message. public virtual IReadOnlyCollection<Attachment> Attachments { get; } Property Value IReadOnlyCollection<Attachment> The attachment included in this message; Author Gets the Author of the message. public IUser Author { get; } Property Value IUser Cards Gets a collection of the ICard's on the message. public virtual IReadOnlyCollection<ICard> Cards { get; } Property Value IReadOnlyCollection<ICard> Channel Gets the source channel of the message. public IMessageChannel Channel { get; } Property Value IMessageChannel CleanContent Gets the clean content for this message. public string CleanContent { get; } Property Value string A string that contains the body of the message stripped of mentions, markdown, emojis and pings; note that this field may be empty or the original code if the message is not a text based message. Content Gets the content for this message. public string Content { get; protected set; } Property Value string A string that contains the body of the message; note that this field may be empty or the original code if the message is not a text based message. EditedTimestamp Gets the time of this message's last edit. public DateTimeOffset? EditedTimestamp { get; } Property Value DateTimeOffset? Time of when the message was last edited; null if the message is never edited. Embeds Gets a collection of the IEmbed's on the message. public virtual IReadOnlyCollection<IEmbed> Embeds { get; } Property Value IReadOnlyCollection<IEmbed> IsPinned Gets the value that indicates whether this message is pinned. public virtual bool? IsPinned { get; } Property Value bool? true if this message was added to its channel's pinned messages; otherwise false. MentionedEveryone Gets the value that indicates whether this message mentioned everyone. public virtual bool MentionedEveryone { get; } Property Value bool true if this message mentioned everyone; otherwise false. MentionedHere Gets the value that indicates whether this message mentioned online users. public virtual bool MentionedHere { get; } Property Value bool true if this message mentioned online users; otherwise false. MentionedRoleIds Gets the IDs of roles mentioned in this message. public virtual IReadOnlyCollection<uint> MentionedRoleIds { get; } Property Value IReadOnlyCollection<uint> A read-only collection of role IDs. MentionedUsers Gets a collection of the mentioned users in the message. public IReadOnlyCollection<RestUser> MentionedUsers { get; } Property Value IReadOnlyCollection<RestUser> Pokes Gets a collection of the RestPokeAction's on the message. public virtual IReadOnlyCollection<RestPokeAction> Pokes { get; } Property Value IReadOnlyCollection<RestPokeAction> Reactions Gets all reactions included in this message. public IReadOnlyDictionary<IEmote, ReactionMetadata> Reactions { get; } Property Value IReadOnlyDictionary<IEmote, ReactionMetadata> Source Gets the source type of this message. public MessageSource Source { get; } Property Value MessageSource Tags Gets all tags included in this message's content. public virtual IReadOnlyCollection<ITag> Tags { get; } Property Value IReadOnlyCollection<ITag> Timestamp Gets the time this message was sent. public DateTimeOffset Timestamp { get; } Property Value DateTimeOffset Time of when the message was sent. Type Gets the type of this message. public MessageType Type { get; } Property Value MessageType Methods AddReactionAsync(IEmote, RequestOptions?) Adds a reaction to this message. public Task AddReactionAsync(IEmote emote, RequestOptions? options = null) Parameters emote IEmote The emoji used to react to this message. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for adding a reaction to this message. See Also IEmote DeleteAsync(RequestOptions?) Deletes this object and all its children. public Task DeleteAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task GetReactionUsersAsync(IEmote, RequestOptions?) Gets all users that reacted to a message with a given emote. public Task<IReadOnlyCollection<IUser>> GetReactionUsersAsync(IEmote emote, RequestOptions? options = null) Parameters emote IEmote The emoji that represents the reaction that you wish to get. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IUser>> Collection of users. RemoveReactionAsync(IEmote, IUser, RequestOptions?) Removes a reaction from message. public Task RemoveReactionAsync(IEmote emote, IUser user, RequestOptions? options = null) Parameters emote IEmote The emoji used to react to this message. user IUser The user that added the emoji. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for removing a reaction to this message. See Also IEmote RemoveReactionAsync(IEmote, ulong, RequestOptions?) Removes a reaction from message. public Task RemoveReactionAsync(IEmote emote, ulong userId, RequestOptions? options = null) Parameters emote IEmote The emoji used to react to this message. userId ulong The ID of the user that added the emoji. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for removing a reaction to this message. See Also IEmote ToString() Gets the Content of the message. public override string ToString() Returns string A string that is the Content of the message. UpdateAsync(RequestOptions?) Updates this object's properties with its current state. public Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents an asynchronous reloading operation. Remarks warning This method will fetch the latest data from REST API, and replace the current object's properties with the new data. Exceptions InvalidOperationException This message is neither a guild channel message nor a direct message."
  },
  "api/Kook.Rest.RestPokeAction.html": {
    "href": "api/Kook.Rest.RestPokeAction.html",
    "title": "Class RestPokeAction | Kook.Net 文档",
    "keywords": "Class RestPokeAction Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a single REST-based poke action. public class RestPokeAction : IPokeAction Inheritance object RestPokeAction Implements IPokeAction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Operator Gets the user who performed the action. public IUser Operator { get; } Property Value IUser Poke Gets the poke this action is associated with. public Poke Poke { get; } Property Value Poke Targets Gets the users who were poked by the action. public IReadOnlyCollection<IUser> Targets { get; } Property Value IReadOnlyCollection<IUser>"
  },
  "api/Kook.Rest.RestPresence.html": {
    "href": "api/Kook.Rest.RestPresence.html",
    "title": "Class RestPresence | Kook.Net 文档",
    "keywords": "Class RestPresence Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents the REST user's presence status. This may include their online status and their activity. public class RestPresence : IPresence Inheritance object RestPresence Implements IPresence Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ActiveClient Gets the type of the client where this user is currently active. public ClientType? ActiveClient { get; } Property Value ClientType? IsOnline Gets the current status of this user. public bool? IsOnline { get; } Property Value bool?"
  },
  "api/Kook.Rest.RestReaction.html": {
    "href": "api/Kook.Rest.RestReaction.html",
    "title": "Class RestReaction | Kook.Net 文档",
    "keywords": "Class RestReaction Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a single REST-based reaction. public class RestReaction : IReaction Inheritance object RestReaction Implements IReaction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count Gets the number of reactions added. public int Count { get; } Property Value int Emote The IEmote used in the reaction. public IEmote Emote { get; } Property Value IEmote Me Gets whether the reactions is added by the user. public bool Me { get; } Property Value bool"
  },
  "api/Kook.Rest.RestRole.html": {
    "href": "api/Kook.Rest.RestRole.html",
    "title": "Class RestRole | Kook.Net 文档",
    "keywords": "Class RestRole Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a REST-based role. public class RestRole : RestEntity<uint>, IRole, IEntity<uint>, IDeletable, IMentionable, IComparable<IRole> Inheritance object RestEntity<uint> RestRole Implements IRole IEntity<uint> IDeletable IMentionable IComparable<IRole> Inherited Members RestEntity<uint>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Color Gets the color given to users of this role. public Color Color { get; } Property Value Color A Color struct representing the color of this role. ColorType Gets the type of the color given to users of this role. public ColorType ColorType { get; } Property Value ColorType A ColorType struct representing the color type of this role. GradientColor Gets the gradient color given to users of this role. public GradientColor? GradientColor { get; } Property Value GradientColor? A GradientColor struct representing the gradient color of this role; null if the role does not have a gradient color. IsEveryone Returns a value that determines if the role is an @everyone role. public bool IsEveryone { get; } Property Value bool true if the role is @everyone; otherwise false. IsHoisted Gets a value that indicates whether the role can be separated in the user list. public bool IsHoisted { get; } Property Value bool true if users of this role are separated in the user list; otherwise false. IsMentionable Gets a value that indicates whether the role is mentionable. public bool IsMentionable { get; } Property Value bool true if this role may be mentioned in messages; otherwise false. KMarkdownMention Returns a special string used to mention this object in KMarkdown formatted text. public string KMarkdownMention { get; } Property Value string A string that is recognized by Kook as a mention in KMarkdown formatted text. Name Gets the name of this role. public string Name { get; } Property Value string A string containing the name of this role. Permissions Gets the permissions granted to members of this role. public GuildPermissions Permissions { get; } Property Value GuildPermissions A GuildPermissions struct that this role possesses. PlainTextMention Returns a special string used to mention this object in plain text formatted text. public string PlainTextMention { get; } Property Value string A string that is recognized by Kook as a mention in plain text formatted text. Position Gets this role's position relative to other roles in the same guild. public int Position { get; } Property Value int An int representing the position of the role in the role list of the guild. Type Gets the type of this role. public RoleType Type { get; } Property Value RoleType A RoleType representing the type of this role. Methods CompareTo(IRole?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(IRole? role) Parameters role IRole Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. DeleteAsync(RequestOptions?) Deletes this object and all its children. public Task DeleteAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task GetUsersAsync(RequestOptions?) Gets a collection of users that have this role. public IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> GetUsersAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when fetching the users. Returns IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> An asynchronous enumerable that contains a collection of users that have this role. ModifyAsync(Action<RoleProperties>, RequestOptions?) Modifies this role. public Task ModifyAsync(Action<RoleProperties> func, RequestOptions? options = null) Parameters func Action<RoleProperties> A delegate containing the properties to modify the role with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies this role with the specified properties. To see an example of this method and what properties are available, please refer to RoleProperties. ToString() Gets the name of the role. public override string ToString() Returns string A string that is the name of the role."
  },
  "api/Kook.Rest.RestSelfUser.html": {
    "href": "api/Kook.Rest.RestSelfUser.html",
    "title": "Class RestSelfUser | Kook.Net 文档",
    "keywords": "Class RestSelfUser Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents the logged-in REST-based user. public class RestSelfUser : RestUser, IUpdateable, ISelfUser, IUser, IEntity<ulong>, IMentionable, IPresence Inheritance object RestEntity<ulong> RestUser RestSelfUser Implements IUpdateable ISelfUser IUser IEntity<ulong> IMentionable IPresence Inherited Members RestUser.Username RestUser.IdentifyNumberValue RestUser.IsBot RestUser.IsBanned RestUser.HasBuff RestUser.HasAnnualBuff RestUser.Avatar RestUser.BuffAvatar RestUser.Banner RestUser.IsDenoiseEnabled RestUser.UserTag RestUser.Nameplates RestUser.IsSystemUser RestUser.IdentifyNumber RestUser.KMarkdownMention RestUser.PlainTextMention RestUser.IsOnline RestUser.ActiveClient RestUser.CreateDMChannelAsync(RequestOptions) RestUser.GetIntimacyAsync(RequestOptions) RestUser.UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) RestUser.BlockAsync(RequestOptions) RestUser.UnblockAsync(RequestOptions) RestUser.RequestFriendAsync(RequestOptions) RestUser.RemoveFriendAsync(RequestOptions) RestUser.ToString() RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Format.UsernameAndIdentifyNumber(IUser, bool) UserExtensions.SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendTextAsync(IUser, string, IQuote?, RequestOptions?) Properties InvitedCount TODO: To be documented. public int InvitedCount { get; } Property Value int IsMobileVerified Gets whether the mobile number of the logged-in user is verified. public bool IsMobileVerified { get; } Property Value bool Mobile Gets the mobile number of the logged-in user. public string? Mobile { get; } Property Value string MobilePrefix Gets the mobile prefix of the logged-in user. public string? MobilePrefix { get; } Property Value string Methods StartPlayingAsync(IGame, RequestOptions?) Starts a new game activity. After this operation, a game activity will be displayed on the currently connected user's profile. public Task StartPlayingAsync(IGame game, RequestOptions? options = null) Parameters game IGame The game to be played. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for starting a game activity. StartPlayingAsync(Music, RequestOptions?) Starts a new music activity. After this operation, a music activity will be displayed on the currently connected user's profile. public Task StartPlayingAsync(Music music, RequestOptions? options = null) Parameters music Music The music being listened to be showed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for starting a music activity. StopPlayingAsync(ActivityType, RequestOptions?) Stops an activity. After this operation, the activity on the currently connected user's profile will disappear. public Task StopPlayingAsync(ActivityType type, RequestOptions? options = null) Parameters type ActivityType The type of the activity to stop options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for stopping an activity. UpdateAsync(RequestOptions?) Updates this object's properties with its current state. public override Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents an asynchronous reloading operation. Remarks warning This method will fetch the latest data from REST API, and replace the current object's properties with the new data. Exceptions InvalidOperationException Unable to update this object using a different token."
  },
  "api/Kook.Rest.RestSystemMessage.html": {
    "href": "api/Kook.Rest.RestSystemMessage.html",
    "title": "Class RestSystemMessage | Kook.Net 文档",
    "keywords": "Class RestSystemMessage Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a REST-based system message. public class RestSystemMessage : RestMessage, IUpdateable, ISystemMessage, IMessage, IEntity<Guid>, IDeletable Inheritance object RestEntity<Guid> RestMessage RestSystemMessage Implements IUpdateable ISystemMessage IMessage IEntity<Guid> IDeletable Inherited Members RestMessage.Type RestMessage.Channel RestMessage.Author RestMessage.Source RestMessage.Content RestMessage.CleanContent RestMessage.Attachments RestMessage.Timestamp RestMessage.EditedTimestamp RestMessage.MentionedEveryone RestMessage.MentionedHere RestMessage.Cards RestMessage.Embeds RestMessage.Pokes RestMessage.MentionedRoleIds RestMessage.MentionedUsers RestMessage.Tags RestMessage.IsPinned RestMessage.ToString() RestMessage.Reactions RestMessage.DeleteAsync(RequestOptions) RestMessage.UpdateAsync(RequestOptions) RestMessage.AddReactionAsync(IEmote, RequestOptions) RestMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) RestMessage.RemoveReactionAsync(IEmote, ulong, RequestOptions) RestMessage.GetReactionUsersAsync(IEmote, RequestOptions) RestEntity<Guid>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods MessageExtensions.GetJumpUrl(IMessage) Properties SystemMessageType Gets the type of the system message. public SystemMessageType SystemMessageType { get; } Property Value SystemMessageType Remarks warning Because the data from Kook does not describe the type of the message in detail, this property is not implemented yet. Accessing this property will always result in an exception at present."
  },
  "api/Kook.Rest.RestTextChannel.html": {
    "href": "api/Kook.Rest.RestTextChannel.html",
    "title": "Class RestTextChannel | Kook.Net 文档",
    "keywords": "Class RestTextChannel Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a REST-based channel in a guild that can send and receive messages. public class RestTextChannel : RestGuildChannel, IUpdateable, IRestMessageChannel, ITextChannel, INestedChannel, IGuildChannel, IDeletable, IMentionable, IMessageChannel, IChannel, IEntity<ulong> Inheritance object RestEntity<ulong> RestChannel RestGuildChannel RestTextChannel Implements IUpdateable IRestMessageChannel ITextChannel INestedChannel IGuildChannel IDeletable IMentionable IMessageChannel IChannel IEntity<ulong> Derived RestVoiceChannel Inherited Members RestGuildChannel.RolePermissionOverwrites RestGuildChannel.UserPermissionOverwrites RestGuildChannel.Type RestGuildChannel.Name RestGuildChannel.Position RestGuildChannel.GuildId RestGuildChannel.CreatorId RestGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) RestGuildChannel.GetCreatorAsync(RequestOptions) RestGuildChannel.DeleteAsync(RequestOptions) RestGuildChannel.GetPermissionOverwrite(IUser) RestGuildChannel.GetPermissionOverwrite(IRole) RestGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) RestGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) RestGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) RestGuildChannel.ToString() RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) RestTextChannelExperimentalExtensions.SyncPermissionsAsync(RestTextChannel, RequestOptions?) Properties CategoryId Gets the parent (category) ID of this channel in the guild's channel list. public ulong? CategoryId { get; } Property Value ulong? A ulong representing the identifier of the parent of this channel; null if none is set. IsPermissionSynced Specifies whether the permissions of this channel is synchronized with its parent channel. public bool? IsPermissionSynced { get; } Property Value bool? A bool indicating whether the permissions of this channel is synchronized with its parent channel. KMarkdownMention Returns a special string used to mention this object in KMarkdown formatted text. public string KMarkdownMention { get; } Property Value string A string that is recognized by Kook as a mention in KMarkdown formatted text. PlainTextMention Returns a special string used to mention this object in plain text formatted text. public string PlainTextMention { get; } Property Value string A string that is recognized by Kook as a mention in plain text formatted text. SlowModeInterval Gets the current slow-mode delay for this channel. public virtual int SlowModeInterval { get; } Property Value int An int representing the time in seconds required before the user can send another message; 0 if disabled. Topic Gets the current topic for this text channel. public string Topic { get; } Property Value string A string representing the topic set in the channel; null if none is set. Methods CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions?) Creates a new invite to this channel. public Task<IInvite> CreateInviteAsync(InviteMaxAge maxAge = InviteMaxAge._604800, InviteMaxUses maxUses = InviteMaxUses.Unlimited, RequestOptions? options = null) Parameters maxAge InviteMaxAge The time until the invite expires. Set to InviteMaxAge.NeverExpires to never expire. maxUses InviteMaxUses The max amount of times this invite may be used. Set to InviteMaxUses.Unlimited to have unlimited uses. options RequestOptions The options to be used when sending the request. Returns Task<IInvite> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateInviteAsync(int?, int?, RequestOptions?) Creates a new invite to this channel. public Task<IInvite> CreateInviteAsync(int? maxAge = 604800, int? maxUses = null, RequestOptions? options = null) Parameters maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. options RequestOptions The options to be used when sending the request. Returns Task<IInvite> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. DeleteMessageAsync(IMessage, RequestOptions?) Deletes a message based on the provided message in this channel. public Task DeleteMessageAsync(IMessage message, RequestOptions? options = null) Parameters message IMessage The message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DeleteMessageAsync(Guid, RequestOptions?) Deletes a message. public Task DeleteMessageAsync(Guid messageId, RequestOptions? options = null) Parameters messageId Guid The identifier of the message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. GetCategoryAsync(RequestOptions?) Gets the parent (category) channel of this channel. public Task<ICategoryChannel?> GetCategoryAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<ICategoryChannel> A task that represents the asynchronous get operation. The task result contains the category channel representing the parent of this channel; null if none is set. GetInvitesAsync(RequestOptions?) Gets a collection of all invites from this guild channel. public Task<IReadOnlyCollection<IInvite>> GetInvitesAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IInvite>> A task that represents the asynchronous get operation. The task result contains a read-only collection of invite, each representing information for an invite found within this guild. GetMessageAsync(Guid, RequestOptions?) Gets a message from this message channel. public Task<RestMessage> GetMessageAsync(Guid id, RequestOptions? options = null) Parameters id Guid The identifier of the message. options RequestOptions The options to be used when sending the request. Returns Task<RestMessage> A task that represents an asynchronous get operation for retrieving the message. The task result contains the retrieved message; null if no message is found with the specified identifier. Remarks This method follows the same behavior as described in GetMessageAsync(Guid, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. GetMessagesAsync(IMessage, Direction, int, RequestOptions?) Gets a collection of messages in this channel. public virtual IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessage IMessage The starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. GetMessagesAsync(Guid, Direction, int, RequestOptions?) Gets a collection of messages in this channel. public virtual IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessageId Guid The ID of the starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(Guid, Direction, int, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. GetMessagesAsync(int, RequestOptions?) Gets the last N messages from this message channel. public virtual IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(int limit = 50, RequestOptions? options = null) Parameters limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(int, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. GetPinnedMessagesAsync(RequestOptions?) Gets a collection of pinned messages in this channel. public virtual Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestMessage>> A task that represents the asynchronous get operation for retrieving pinned messages in this channel. The task result contains a collection of messages found in the pinned messages. GetUserAsync(ulong, RequestOptions?) Gets a user in this channel. public Task<RestGuildUser?> GetUserAsync(ulong id, RequestOptions? options = null) Parameters id ulong The identifier of the user. options RequestOptions The options to be used when sending the request. Returns Task<RestGuildUser> A task representing the asynchronous get operation. The task result contains a guild user object that represents the user; null if none is found. Exceptions InvalidOperationException Resolving permissions requires the parent guild to be downloaded. GetUsersAsync(RequestOptions?) Gets a collection of users that are able to view the channel. public IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> GetUsersAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> A paged collection containing a collection of guild users that can access this channel. Flattening the paginated response into a collection of users with FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) is required if you wish to access the users. Exceptions InvalidOperationException Resolving permissions requires the parent guild to be downloaded. ModifyAsync(Action<ModifyTextChannelProperties>, RequestOptions?) Modifies this text channel. public virtual Task ModifyAsync(Action<ModifyTextChannelProperties> func, RequestOptions? options = null) Parameters func Action<ModifyTextChannelProperties> The delegate containing the properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. See Also ModifyTextChannelProperties ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions?) Modifies a message. public Task ModifyMessageAsync(Guid messageId, Action<MessageProperties> func, RequestOptions? options = null) Parameters messageId Guid The identifier of the message that would be changed. func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties. SendCardAsync(ICard, IQuote?, IUser?, RequestOptions?) Sends a card message to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendCardAsync(ICard card, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters card ICard The card to be sent. quote IQuote The message quote to be included. Used to reply to specific messages. ephemeralUser IUser The user only who can see the message. Leave null to let everyone see the message. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendCardsAsync(IEnumerable<ICard>, IQuote?, IUser?, RequestOptions?) Sends a card message to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(IEnumerable<ICard> cards, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters cards IEnumerable<ICard> The cards to be sent. quote IQuote The message quote to be included. Used to reply to specific messages. ephemeralUser IUser The user only who can see the message. Leave null to let everyone see the message. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendFileAsync(FileAttachment, IQuote?, IUser?, RequestOptions?) Sends a file to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(FileAttachment attachment, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters attachment FileAttachment The attachment containing the file. quote IQuote The message quote to be included. Used to reply to specific messages. ephemeralUser IUser The user only who can see the message. Leave null to let everyone see the message. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendFileAsync(Stream, string, AttachmentType, IQuote?, IUser?, RequestOptions?) Sends a file to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(Stream stream, string filename, AttachmentType type = AttachmentType.File, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters stream Stream The stream of the file. filename string The name of the file. type AttachmentType The type of the file. quote IQuote The message quote to be included. Used to reply to specific messages. ephemeralUser IUser The user only who can see the message. Leave null to let everyone see the message. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendFileAsync(string, string?, AttachmentType, IQuote?, IUser?, RequestOptions?) Sends a file to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(string path, string? filename = null, AttachmentType type = AttachmentType.File, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters path string The file path of the file. filename string The name of the file. type AttachmentType The type of the file. quote IQuote The message quote to be included. Used to reply to specific messages. ephemeralUser IUser The user only who can see the message. Leave null to let everyone see the message. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendTextAsync(string, IQuote?, IUser?, RequestOptions?) Sends a text message to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendTextAsync(string text, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters text string The message to be sent. quote IQuote The message quote to be included. Used to reply to specific messages. ephemeralUser IUser The user only who can see the message. Leave null to let everyone see the message. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SyncPermissionsAsync(RequestOptions?) Syncs the permissions of this nested channel with its parent's. public Task SyncPermissionsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for syncing channel permissions with its parent's. UpdateAsync(RequestOptions?) Updates this object's properties with its current state. public override Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents an asynchronous reloading operation. Remarks warning This method will fetch the latest data from REST API, and replace the current object's properties with the new data."
  },
  "api/Kook.Rest.RestTextChannelExperimentalExtensions.html": {
    "href": "api/Kook.Rest.RestTextChannelExperimentalExtensions.html",
    "title": "Class RestTextChannelExperimentalExtensions | Kook.Net 文档",
    "keywords": "Class RestTextChannelExperimentalExtensions Namespace Kook.Rest Assembly Kook.Net.Experimental.dll Provides extension methods of experimental functionalities for RestTextChannels. public static class RestTextChannelExperimentalExtensions Inheritance object RestTextChannelExperimentalExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SyncPermissionsAsync(RestTextChannel, RequestOptions?) Syncs the permissions of this nested channel with its parent's. public static Task SyncPermissionsAsync(this RestTextChannel channel, RequestOptions? options = null) Parameters channel RestTextChannel The nested channel whose permissions will be synced. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for syncing channel permissions with its parent's. Remarks warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future."
  },
  "api/Kook.Rest.RestUser.html": {
    "href": "api/Kook.Rest.RestUser.html",
    "title": "Class RestUser | Kook.Net 文档",
    "keywords": "Class RestUser Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a REST-based user. public class RestUser : RestEntity<ulong>, IUser, IEntity<ulong>, IMentionable, IPresence, IUpdateable Inheritance object RestEntity<ulong> RestUser Implements IUser IEntity<ulong> IMentionable IPresence IUpdateable Derived RestGuildUser RestSelfUser Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Format.UsernameAndIdentifyNumber(IUser, bool) UserExtensions.SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendTextAsync(IUser, string, IQuote?, RequestOptions?) Properties ActiveClient Gets the type of the client where this user is currently active. public ClientType? ActiveClient { get; } Property Value ClientType? Avatar Gets the link to this user's avatar. public string Avatar { get; } Property Value string Banner Gets the link to this user's banner. public string? Banner { get; } Property Value string BuffAvatar Gets the link to this user's BUFF avatar. public string? BuffAvatar { get; } Property Value string HasAnnualBuff Gets whether this user's BUFF subscription is annual; null if unknown. public bool? HasAnnualBuff { get; } Property Value bool? HasBuff Gets whether this user has subscribed to BUFF; null if unknown. public bool? HasBuff { get; } Property Value bool? IdentifyNumber Gets the per-username unique ID for this user. public string IdentifyNumber { get; } Property Value string IdentifyNumberValue Gets the per-username unique ID for this user. public ushort IdentifyNumberValue { get; } Property Value ushort IsBanned Gets whether this user is banned; null if unknown. public bool? IsBanned { get; } Property Value bool? IsBot Gets whether this user is a bot; null if unknown. public bool? IsBot { get; } Property Value bool? IsDenoiseEnabled Gets whether this user enabled denoise feature; null if unknown. public bool? IsDenoiseEnabled { get; } Property Value bool? IsOnline Gets the current status of this user. public bool? IsOnline { get; } Property Value bool? IsSystemUser Gets whether this user is a system user. public bool IsSystemUser { get; } Property Value bool KMarkdownMention Returns a special string used to mention this object in KMarkdown formatted text. public string KMarkdownMention { get; } Property Value string A string that is recognized by Kook as a mention in KMarkdown formatted text. Nameplates Gets the nameplates this user has. public IReadOnlyCollection<Nameplate> Nameplates { get; } Property Value IReadOnlyCollection<Nameplate> PlainTextMention Returns a special string used to mention this object in plain text formatted text. public string PlainTextMention { get; } Property Value string A string that is recognized by Kook as a mention in plain text formatted text. UserTag Get the tag this user has. public UserTag? UserTag { get; } Property Value UserTag Username Gets the username for this user. public string Username { get; } Property Value string Methods BlockAsync(RequestOptions?) Gets the friend state with this user. public Task BlockAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for getting the friend state. CreateDMChannelAsync(RequestOptions?) Creates a direct message channel to this user. public Task<RestDMChannel> CreateDMChannelAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestDMChannel> A task that represents the asynchronous get operation. The task result contains a rest DM channel where the user is the recipient. GetIntimacyAsync(RequestOptions?) Gets the intimacy information with this user. public Task<RestIntimacy> GetIntimacyAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestIntimacy> A task that represents the asynchronous operation for getting the intimacy information. The task result contains the intimacy information associated with this user. RemoveFriendAsync(RequestOptions?) Gets the friend state with this user. public Task RemoveFriendAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for getting the friend state. RequestFriendAsync(RequestOptions?) Sends a friend request to this user. public virtual Task RequestFriendAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for sending the friend request. ToString() Gets the Username#IdentifyNumber of the user. public override string ToString() Returns string A string that resolves to Username#IdentifyNumber of the user. UnblockAsync(RequestOptions?) Gets the friend state with this user. public Task UnblockAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for getting the friend state. UpdateAsync(RequestOptions?) Updates this object's properties with its current state. public virtual Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents an asynchronous reloading operation. Remarks warning This method will fetch the latest data from REST API, and replace the current object's properties with the new data. UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions?) Updates the intimacy information with this user. public Task UpdateIntimacyAsync(Action<IntimacyProperties> func, RequestOptions? options = null) Parameters func Action<IntimacyProperties> A delegate containing the properties to modify the IIntimacy with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for updating the intimacy information."
  },
  "api/Kook.Rest.RestUserMessage.html": {
    "href": "api/Kook.Rest.RestUserMessage.html",
    "title": "Class RestUserMessage | Kook.Net 文档",
    "keywords": "Class RestUserMessage Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a REST-based message sent by a user. public class RestUserMessage : RestMessage, IUpdateable, IUserMessage, IMessage, IEntity<Guid>, IDeletable Inheritance object RestEntity<Guid> RestMessage RestUserMessage Implements IUpdateable IUserMessage IMessage IEntity<Guid> IDeletable Inherited Members RestMessage.Type RestMessage.Channel RestMessage.Author RestMessage.Source RestMessage.Content RestMessage.CleanContent RestMessage.Timestamp RestMessage.EditedTimestamp RestMessage.MentionedUsers RestMessage.ToString() RestMessage.Reactions RestMessage.DeleteAsync(RequestOptions) RestMessage.UpdateAsync(RequestOptions) RestMessage.AddReactionAsync(IEmote, RequestOptions) RestMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) RestMessage.RemoveReactionAsync(IEmote, ulong, RequestOptions) RestMessage.GetReactionUsersAsync(IEmote, RequestOptions) RestEntity<Guid>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods MessageExtensions.GetJumpUrl(IMessage) MessageExtensions.HasCharPrefix(IUserMessage, char, ref int) MessageExtensions.HasMentionPrefix(IUserMessage, IUser, ref int) MessageExtensions.HasStringPrefix(IUserMessage, string, ref int, StringComparison) MessageExtensions.TryExpandCardContent(IUserMessage, out string?) MessageExtensions.AddReactionsAsync(IUserMessage, IEnumerable<IEmote>, RequestOptions?) MessageExtensions.MaybeTextImageMixedMessage(IUserMessage) MessageExtensions.RemoveReactionsAsync(IUserMessage, IUser, IEnumerable<IEmote>, RequestOptions?) MessageExtensions.ReplyCardAsync(IUserMessage, ICard, bool, bool, RequestOptions?) MessageExtensions.ReplyCardsAsync(IUserMessage, IEnumerable<ICard>, bool, bool, RequestOptions?) MessageExtensions.ReplyFileAsync(IUserMessage, FileAttachment, bool, bool, RequestOptions?) MessageExtensions.ReplyFileAsync(IUserMessage, Stream, string, AttachmentType, bool, bool, RequestOptions?) MessageExtensions.ReplyFileAsync(IUserMessage, string, string?, AttachmentType, bool, bool, RequestOptions?) MessageExtensions.ReplyTextAsync(IUserMessage, string, bool, bool, RequestOptions?) Properties Attachments Gets the attachment included in this message. public override IReadOnlyCollection<Attachment> Attachments { get; } Property Value IReadOnlyCollection<Attachment> The attachment included in this message; Cards Gets a collection of the ICard's on the message. public override IReadOnlyCollection<ICard> Cards { get; } Property Value IReadOnlyCollection<ICard> Embeds Gets a collection of the IEmbed's on the message. public override IReadOnlyCollection<IEmbed> Embeds { get; } Property Value IReadOnlyCollection<IEmbed> IsPinned Gets the value that indicates whether this message is pinned. public override bool? IsPinned { get; } Property Value bool? true if this message was added to its channel's pinned messages; otherwise false. MentionedChannels Gets a collection of the mentioned channels in the message. public IReadOnlyCollection<RestGuildChannel> MentionedChannels { get; } Property Value IReadOnlyCollection<RestGuildChannel> MentionedEveryone Gets the value that indicates whether this message mentioned everyone. public override bool MentionedEveryone { get; } Property Value bool true if this message mentioned everyone; otherwise false. MentionedHere Gets the value that indicates whether this message mentioned online users. public override bool MentionedHere { get; } Property Value bool true if this message mentioned online users; otherwise false. MentionedRoleIds Gets the IDs of roles mentioned in this message. public override IReadOnlyCollection<uint> MentionedRoleIds { get; } Property Value IReadOnlyCollection<uint> A read-only collection of role IDs. MentionedRoles Gets a collection of the mentioned roles in the message. public IReadOnlyCollection<RestRole> MentionedRoles { get; } Property Value IReadOnlyCollection<RestRole> Pokes Gets a collection of the RestPokeAction's on the message. public override IReadOnlyCollection<RestPokeAction> Pokes { get; } Property Value IReadOnlyCollection<RestPokeAction> Quote Gets the message quote. public IQuote? Quote { get; } Property Value IQuote The message quote. Tags Gets all tags included in this message's content. public override IReadOnlyCollection<ITag> Tags { get; } Property Value IReadOnlyCollection<ITag> Methods ModifyAsync(Action<MessageProperties>, RequestOptions?) Modifies this message. public Task ModifyAsync(Action<MessageProperties> func, RequestOptions? options = null) Parameters func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties. Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) Transforms this message's text into a human-readable form by resolving its tags. public string Resolve(TagHandling userHandling = TagHandling.Name, TagHandling channelHandling = TagHandling.Name, TagHandling roleHandling = TagHandling.Name, TagHandling everyoneHandling = TagHandling.Name, TagHandling emojiHandling = TagHandling.Name) Parameters userHandling TagHandling Determines how the user tag should be handled. channelHandling TagHandling Determines how the channel tag should be handled. roleHandling TagHandling Determines how the role tag should be handled. everyoneHandling TagHandling Determines how the @everyone tag should be handled. emojiHandling TagHandling Determines how the emoji tag should be handled. Returns string Resolve(int, TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) Transforms this message's text into a human-readable form by resolving its tags. public string Resolve(int startIndex, TagHandling userHandling = TagHandling.Name, TagHandling channelHandling = TagHandling.Name, TagHandling roleHandling = TagHandling.Name, TagHandling everyoneHandling = TagHandling.Ignore, TagHandling emojiHandling = TagHandling.Name) Parameters startIndex int The zero-based index at which to begin the resolving for the specified value. userHandling TagHandling Determines how the user tag should be handled. channelHandling TagHandling Determines how the channel tag should be handled. roleHandling TagHandling Determines how the role tag should be handled. everyoneHandling TagHandling Determines how the @everyone tag should be handled. emojiHandling TagHandling Determines how the emoji tag should be handled. Returns string"
  },
  "api/Kook.Rest.RestVoiceChannel.html": {
    "href": "api/Kook.Rest.RestVoiceChannel.html",
    "title": "Class RestVoiceChannel | Kook.Net 文档",
    "keywords": "Class RestVoiceChannel Namespace Kook.Rest Assembly Kook.Net.Rest.dll Represents a REST-based voice channel in a guild. public class RestVoiceChannel : RestTextChannel, IUpdateable, IRestMessageChannel, IVoiceChannel, ITextChannel, INestedChannel, IGuildChannel, IDeletable, IMentionable, IMessageChannel, IRestAudioChannel, IAudioChannel, IChannel, IEntity<ulong> Inheritance object RestEntity<ulong> RestChannel RestGuildChannel RestTextChannel RestVoiceChannel Implements IUpdateable IRestMessageChannel IVoiceChannel ITextChannel INestedChannel IGuildChannel IDeletable IMentionable IMessageChannel IRestAudioChannel IAudioChannel IChannel IEntity<ulong> Inherited Members RestTextChannel.Topic RestTextChannel.SlowModeInterval RestTextChannel.CategoryId RestTextChannel.IsPermissionSynced RestTextChannel.KMarkdownMention RestTextChannel.PlainTextMention RestTextChannel.ModifyAsync(Action<ModifyTextChannelProperties>, RequestOptions) RestTextChannel.GetUserAsync(ulong, RequestOptions) RestTextChannel.GetUsersAsync(RequestOptions) RestTextChannel.GetMessageAsync(Guid, RequestOptions) RestTextChannel.SendFileAsync(string, string, AttachmentType, IQuote, IUser, RequestOptions) RestTextChannel.SendFileAsync(Stream, string, AttachmentType, IQuote, IUser, RequestOptions) RestTextChannel.SendFileAsync(FileAttachment, IQuote, IUser, RequestOptions) RestTextChannel.SendTextAsync(string, IQuote, IUser, RequestOptions) RestTextChannel.SendCardsAsync(IEnumerable<ICard>, IQuote, IUser, RequestOptions) RestTextChannel.SendCardAsync(ICard, IQuote, IUser, RequestOptions) RestTextChannel.GetCategoryAsync(RequestOptions) RestTextChannel.SyncPermissionsAsync(RequestOptions) RestTextChannel.GetInvitesAsync(RequestOptions) RestTextChannel.CreateInviteAsync(int?, int?, RequestOptions) RestTextChannel.CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions) RestTextChannel.DeleteMessageAsync(Guid, RequestOptions) RestTextChannel.DeleteMessageAsync(IMessage, RequestOptions) RestTextChannel.ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions) RestGuildChannel.RolePermissionOverwrites RestGuildChannel.UserPermissionOverwrites RestGuildChannel.Type RestGuildChannel.Name RestGuildChannel.Position RestGuildChannel.GuildId RestGuildChannel.CreatorId RestGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) RestGuildChannel.GetCreatorAsync(RequestOptions) RestGuildChannel.DeleteAsync(RequestOptions) RestGuildChannel.GetPermissionOverwrite(IUser) RestGuildChannel.GetPermissionOverwrite(IRole) RestGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) RestGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) RestGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) RestGuildChannel.ToString() RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) RestTextChannelExperimentalExtensions.SyncPermissionsAsync(RestTextChannel, RequestOptions?) RestVoiceChannelExperimentalExtensions.DisconnectUserAsync(RestVoiceChannel, IGuildUser, RequestOptions?) RestVoiceChannelExperimentalExtensions.SyncPermissionsAsync(RestVoiceChannel, RequestOptions?) Properties HasPassword Gets whether this voice channel is locked by a password. public bool HasPassword { get; } Property Value bool A bool representing whether this voice channel is locked by a password. IsVoiceRegionOverwritten Gets whether the voice region of this audio channel is overwritten. public bool? IsVoiceRegionOverwritten { get; } Property Value bool? ServerUrl Gets the server url that clients should connect to to join this voice channel. public string? ServerUrl { get; } Property Value string A string representing the url that clients should connect to to join this voice channel. UserLimit Gets the max number of users allowed to be connected to this channel at once. public int UserLimit { get; } Property Value int An int representing the maximum number of users that are allowed to be connected to this channel at once; 0 if a limit is not set. VoiceQuality Gets the voice quality that the clients in this voice channel are requested to use. public VoiceQuality? VoiceQuality { get; } Property Value VoiceQuality? A VoiceQuality representing the voice quality that this voice channel defines and requests the client(s) to use. VoiceRegion Gets the voice region for this audio channel. public string? VoiceRegion { get; } Property Value string Remarks warning This property may be empty if the voice channel is created before this feature was released. Methods GetConnectedUsersAsync(RequestOptions?) Gets the users connected to this voice channel. public Task<IReadOnlyCollection<IUser>> GetConnectedUsersAsync(RequestOptions? options) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IUser>> A task that represents the asynchronous get operation. The task result contains a collection of users. GetMessagesAsync(IMessage, Direction, int, RequestOptions?) Gets a collection of messages in this channel. public override IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessage IMessage The starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. Exceptions NotSupportedException Getting messages from a voice channel is not supported. GetMessagesAsync(Guid, Direction, int, RequestOptions?) Gets a collection of messages in this channel. public override IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessageId Guid The ID of the starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(Guid, Direction, int, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. Exceptions NotSupportedException Getting messages from a voice channel is not supported. GetMessagesAsync(int, RequestOptions?) Gets the last N messages from this message channel. public override IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(int limit = 50, RequestOptions? options = null) Parameters limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(int, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. Exceptions NotSupportedException Getting messages from a voice channel is not supported. GetPinnedMessagesAsync(RequestOptions?) Gets a collection of pinned messages in this channel. public override Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestMessage>> A task that represents the asynchronous get operation for retrieving pinned messages in this channel. The task result contains a collection of messages found in the pinned messages. Exceptions NotSupportedException Getting messages from a voice channel is not supported. ModifyAsync(Action<ModifyVoiceChannelProperties>, RequestOptions?) Modifies this voice channel. public Task ModifyAsync(Action<ModifyVoiceChannelProperties> func, RequestOptions? options = null) Parameters func Action<ModifyVoiceChannelProperties> The properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. See Also ModifyVoiceChannelProperties UpdateAsync(RequestOptions?) Updates this object's properties with its current state. public override Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents an asynchronous reloading operation. Remarks warning This method will fetch the latest data from REST API, and replace the current object's properties with the new data."
  },
  "api/Kook.Rest.RestVoiceChannelExperimentalExtensions.html": {
    "href": "api/Kook.Rest.RestVoiceChannelExperimentalExtensions.html",
    "title": "Class RestVoiceChannelExperimentalExtensions | Kook.Net 文档",
    "keywords": "Class RestVoiceChannelExperimentalExtensions Namespace Kook.Rest Assembly Kook.Net.Experimental.dll Provides extension methods of experimental functionalities for RestVoiceChannels. public static class RestVoiceChannelExperimentalExtensions Inheritance object RestVoiceChannelExperimentalExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DisconnectUserAsync(RestVoiceChannel, IGuildUser, RequestOptions?) Disconnects the specified user from the voice channel. public static Task DisconnectUserAsync(this RestVoiceChannel channel, IGuildUser user, RequestOptions? options = null) Parameters channel RestVoiceChannel The voice channel where the use is connected to. user IGuildUser The user to disconnect. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for disconnecting the user from the voice channel. Remarks warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future. SyncPermissionsAsync(RestVoiceChannel, RequestOptions?) Syncs the permissions of this nested channel with its parent's. public static Task SyncPermissionsAsync(this RestVoiceChannel channel, RequestOptions? options = null) Parameters channel RestVoiceChannel The nested channel whose permissions will be synced. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for syncing channel permissions with its parent's. Remarks warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future."
  },
  "api/Kook.Rest.RestVoiceRegion.html": {
    "href": "api/Kook.Rest.RestVoiceRegion.html",
    "title": "Class RestVoiceRegion | Kook.Net 文档",
    "keywords": "Class RestVoiceRegion Namespace Kook.Rest Assembly Kook.Net.Experimental.dll Represents a REST-based voice region. public class RestVoiceRegion : RestEntity<string>, IEntity<string>, IVoiceRegion Inheritance object RestEntity<string> RestVoiceRegion Implements IEntity<string> IVoiceRegion Inherited Members RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks warning This entity is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future. Properties Crowding Gets the crowding of this voice region. public decimal Crowding { get; } Property Value decimal A decimal between 0.0 and 1.0 that represents the crowding of this voice region. MinimumBoostLevel Gets the minimum boost level required to use this voice region. public BoostLevel MinimumBoostLevel { get; set; } Property Value BoostLevel A BoostLevel that represents the minimum boost level required to use this voice region. Name Gets the name of this voice region. public string Name { get; } Property Value string A string that represents the human-readable name of this voice region (e.g. Central Europe). Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Kook.Rest.html": {
    "href": "api/Kook.Rest.html",
    "title": "Namespace Kook.Rest | Kook.Net 文档",
    "keywords": "Namespace Kook.Rest Classes Attachment Represents a message attachment found in a IUserMessage. BaseKookClient Represents a client that can connect to the Kook API. CardJsonExtension Provides extension methods for Card and CardBuilder. KookRestClient Represents a REST-based KOOK client. KookRestClientExperimentalExtensions Provides extension methods of experimental functionalities for KookRestClients. KookRestConfig Represents a configuration class for KookRestClient. Poke Represents a poke in messages. RecommendInfo Represents a recommendation information for a guild. RestBan Represents a REST-based ban object. RestCategoryChannel Represents a REST-based category channel. RestChannel Represents a generic REST-based channel. RestDMChannel Represents a REST-based direct-message channel. RestEntity<T> Represents a generic REST-based entity. RestFriendRequest Represents a REST-based friend request. RestGame Represents a game object. RestGuild Represents a REST-based guild/server. RestGuildChannel Represents a REST-based guild channel in a guild. RestGuildExperimentalExtensions Provides extension methods of experimental functionalities for RestGuilds. RestGuildUser Represents a REST-based guild user. RestIntimacy Gets the intimacy information associated with the specified user. RestInvite Represents a REST-based invite. RestMessage Represents a REST-based message. RestPokeAction Represents a single REST-based poke action. RestPresence Represents the REST user's presence status. This may include their online status and their activity. RestReaction Represents a single REST-based reaction. RestRole Represents a REST-based role. RestSelfUser Represents the logged-in REST-based user. RestSystemMessage Represents a REST-based system message. RestTextChannel Represents a REST-based channel in a guild that can send and receive messages. RestTextChannelExperimentalExtensions Provides extension methods of experimental functionalities for RestTextChannels. RestUser Represents a REST-based user. RestUserMessage Represents a REST-based message sent by a user. RestVoiceChannel Represents a REST-based voice channel in a guild. RestVoiceChannelExperimentalExtensions Provides extension methods of experimental functionalities for RestVoiceChannels. RestVoiceRegion Represents a REST-based voice region. Interfaces IRestAudioChannel Represents a generic REST-based audio channel. IRestMessageChannel Represents a REST-based channel that can send and receive messages. IRestPrivateChannel Represents a REST-based channel that is private to select recipients."
  },
  "api/Kook.RetryMode.html": {
    "href": "api/Kook.RetryMode.html",
    "title": "Enum RetryMode | Kook.Net 文档",
    "keywords": "Enum RetryMode Namespace Kook Assembly Kook.Net.Core.dll Specifies how a request should act in the case of an error. [Flags] public enum RetryMode Fields AlwaysFail = 0 If a request fails, an exception is thrown immediately. AlwaysRetry = RetryTimeouts | RetryRatelimit | Retry502 Continuously retry a request until it times out, its cancel token is triggered, or the server responds with a non-502 error. Retry502 = 8 Retry if a request failed due to an HTTP error 502. RetryRatelimit = 4 Retry if a request failed due to a rate-limit. RetryTimeouts = 1 Retry if a request timed out."
  },
  "api/Kook.RolePermissionOverwrite.html": {
    "href": "api/Kook.RolePermissionOverwrite.html",
    "title": "Class RolePermissionOverwrite | Kook.Net 文档",
    "keywords": "Class RolePermissionOverwrite Namespace Kook Assembly Kook.Net.Core.dll Represent a permission object for a role. public class RolePermissionOverwrite : IPermissionOverwrite<uint> Inheritance object RolePermissionOverwrite Implements IPermissionOverwrite<uint> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RolePermissionOverwrite(uint, OverwritePermissions) Initializes a new RolePermissionOverwrite with provided ID of the role and modified permissions. public RolePermissionOverwrite(uint targetId, OverwritePermissions permissions) Parameters targetId uint permissions OverwritePermissions Properties Permissions Gets the permissions associated with this overwrite entry for a role. public OverwritePermissions Permissions { get; } Property Value OverwritePermissions Target Gets the identifier for the role this overwrite is targeting. public uint Target { get; } Property Value uint"
  },
  "api/Kook.RoleProperties.html": {
    "href": "api/Kook.RoleProperties.html",
    "title": "Class RoleProperties | Kook.Net 文档",
    "keywords": "Class RoleProperties Namespace Kook Assembly Kook.Net.Core.dll Properties that are used to modify an IRole with the specified changes. public class RoleProperties Inheritance object RoleProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Color Gets or sets the color of the role. public Color? Color { get; set; } Property Value Color? Remarks This value may not be set if the role is an @everyone role. Hoist Gets or sets whether this role should be displayed independently in the user list. public bool? Hoist { get; set; } Property Value bool? Remarks This value may not be set if the role is an @everyone role. Mentionable Gets or sets whether or not this role can be mentioned. public bool? Mentionable { get; set; } Property Value bool? Remarks This value may not be set if the role is an @everyone role. Name Gets or sets the name of the role. public string? Name { get; set; } Property Value string Remarks This value may not be set if the role is an @everyone role. Permissions Gets or sets the role's GuildPermission. public GuildPermissions? Permissions { get; set; } Property Value GuildPermissions? See Also ModifyAsync(Action<RoleProperties>, RequestOptions)"
  },
  "api/Kook.RoleType.html": {
    "href": "api/Kook.RoleType.html",
    "title": "Enum RoleType | Kook.Net 文档",
    "keywords": "Enum RoleType Namespace Kook Assembly Kook.Net.Core.dll Represents the type of a role. public enum RoleType : ushort Fields Booster = 2 Represents the role representing a booster. BotSpecified = 1 Represents the role was created by system when a bot joined the guild. Everyone = 255 Represents the role is the default everyone role. UserCreated = 0 Represents the role was created by a user."
  },
  "api/Kook.SearchGuildMemberProperties.html": {
    "href": "api/Kook.SearchGuildMemberProperties.html",
    "title": "Class SearchGuildMemberProperties | Kook.Net 文档",
    "keywords": "Class SearchGuildMemberProperties Namespace Kook Assembly Kook.Net.Core.dll Properties that are used to search for a IGuildUser in a IGuild. public class SearchGuildMemberProperties Inheritance object SearchGuildMemberProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsMobileVerified Gets or sets whether the user must have his/her mobile verified to be searched for; null to not search via a verified status. public bool? IsMobileVerified { get; set; } Property Value bool? RoleId Gets or sets the ID of the role the user must have to be searched for; null to not search via a role. public uint? RoleId { get; set; } Property Value uint? SearchName Gets or sets the name of the user to be searched for; null to not search via a name. public string? SearchName { get; set; } Property Value string SortedByActiveTime Gets or sets whether and how the searching results should be sorted by the activating time of the user; null to not sort by active time. public SortMode? SortedByActiveTime { get; set; } Property Value SortMode? SortedByJoinTime Gets or sets whether and how the searching results should be sorted by the joining time of the user; null to not sort by joining time. public SortMode? SortedByJoinTime { get; set; } Property Value SortMode? See Also SearchUsersAsync(Action<SearchGuildMemberProperties>, int, CacheMode, RequestOptions)"
  },
  "api/Kook.SectionAccessoryMode.html": {
    "href": "api/Kook.SectionAccessoryMode.html",
    "title": "Enum SectionAccessoryMode | Kook.Net 文档",
    "keywords": "Enum SectionAccessoryMode Namespace Kook Assembly Kook.Net.Core.dll Specifies the accessory position relative to the text element. public enum SectionAccessoryMode Fields Left = 0 The accessory is positioned to the left of the text element. Right = 1 The accessory is positioned to the right of the text element."
  },
  "api/Kook.SectionModule.html": {
    "href": "api/Kook.SectionModule.html",
    "title": "Class SectionModule | Kook.Net 文档",
    "keywords": "Class SectionModule Namespace Kook Assembly Kook.Net.Core.dll Represents a section module in card. public class SectionModule : IModule, IEquatable<SectionModule>, IEquatable<IModule> Inheritance object SectionModule Implements IModule IEquatable<SectionModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(IModule) CardExtensions.ToBuilder(SectionModule) Properties Accessory Gets the accessory of the section. public IElement? Accessory { get; } Property Value IElement An IElement representing the accessory of the section. Mode Specifies that the Accessory is to the left or right of Text. public SectionAccessoryMode? Mode { get; } Property Value SectionAccessoryMode? Left if the Accessory is to the left of Text, Right if the Accessory is to the right of Text, Text Gets the text of the section. public IElement? Text { get; } Property Value IElement An IElement representing the text of the section. Type Gets the type of the module. public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Methods Equals(SectionModule?) Determines whether the specified SectionModule is equal to the current SectionModule. public bool Equals(SectionModule? sectionModule) Parameters sectionModule SectionModule The SectionModule to compare with the current SectionModule. Returns bool true if the specified SectionModule is equal to the current SectionModule; otherwise, false. Equals(object?) Determines whether the specified SectionModule is equal to the current SectionModule. public override bool Equals(object? obj) Parameters obj object The object to compare with the current SectionModule. Returns bool true if the specified SectionModule is equal to the current SectionModule; otherwise, false. Remarks If the object passes is an SectionModule, Equals(SectionModule?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(SectionModule, SectionModule) Determines whether the specified SectionModule is equal to the current SectionModule. public static bool operator ==(SectionModule left, SectionModule right) Parameters left SectionModule right SectionModule Returns bool true if the specified SectionModule is equal to the current SectionModule; otherwise, false. operator !=(SectionModule, SectionModule) Determines whether the specified SectionModule is not equal to the current SectionModule. public static bool operator !=(SectionModule left, SectionModule right) Parameters left SectionModule right SectionModule Returns bool true if the specified SectionModule is not equal to the current SectionModule; otherwise, false."
  },
  "api/Kook.SectionModuleBuilder.html": {
    "href": "api/Kook.SectionModuleBuilder.html",
    "title": "Class SectionModuleBuilder | Kook.Net 文档",
    "keywords": "Class SectionModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll Represents a section module builder for creating a SectionModule. public class SectionModuleBuilder : IModuleBuilder, IEquatable<SectionModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object SectionModuleBuilder Implements IModuleBuilder IEquatable<SectionModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SectionModuleBuilder() Initializes a new instance of the SectionModuleBuilder class. public SectionModuleBuilder() SectionModuleBuilder(IElementBuilder?, SectionAccessoryMode?, IElementBuilder?) Initializes a new instance of the SectionModuleBuilder class. public SectionModuleBuilder(IElementBuilder? text, SectionAccessoryMode? mode = null, IElementBuilder? accessory = null) Parameters text IElementBuilder mode SectionAccessoryMode? accessory IElementBuilder Exceptions ArgumentException The text is not any form of text element, including PlainTextElementBuilder, KMarkdownElementBuilder, and ParagraphStructBuilder; or the accessory is neither an ImageElementBuilder nor ButtonElementBuilder. SectionModuleBuilder(string?, bool, SectionAccessoryMode?, IElementBuilder?) Initializes a new instance of the SectionModuleBuilder class. public SectionModuleBuilder(string? text, bool isKMarkdown = false, SectionAccessoryMode? mode = null, IElementBuilder? accessory = null) Parameters text string isKMarkdown bool mode SectionAccessoryMode? accessory IElementBuilder Exceptions ArgumentException The text is not any form of text element, including PlainTextElementBuilder, KMarkdownElementBuilder, and ParagraphStructBuilder; or the accessory is neither an ImageElementBuilder nor ButtonElementBuilder. Properties Accessory Gets or sets the accessory of the section. public IElementBuilder? Accessory { get; set; } Property Value IElementBuilder An IElementBuilder representing the accessory of the section. Exceptions ArgumentException The value is neither an ImageElementBuilder nor ButtonElementBuilder. Mode Gets or sets how the Accessory is positioned relative to the Text. public SectionAccessoryMode? Mode { get; set; } Property Value SectionAccessoryMode? A SectionAccessoryMode representing how the Accessory is positioned relative to the Text. Text Gets or sets the text of the section. public IElementBuilder? Text { get; set; } Property Value IElementBuilder An IElementBuilder representing the text of the section. Exceptions ArgumentException The value is not any form of text element, including PlainTextElementBuilder, KMarkdownElementBuilder, and ParagraphStructBuilder. Type Specifies the module type of the IModule this builder creates. public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Methods Build() Builds this builder into a SectionModule. public SectionModule Build() Returns SectionModule A SectionModule representing the built section module object. Exceptions ArgumentException The Text is not any form of text element, including PlainTextElementBuilder, KMarkdownElementBuilder, and ParagraphStructBuilder. ArgumentException The Accessory is neither an ImageElementBuilder nor ButtonElementBuilder. InvalidOperationException The ButtonElement was not positioned to the left of the Text, which is not allowed. Equals(SectionModuleBuilder?) Determines whether the specified SectionModuleBuilder is equal to the current SectionModuleBuilder. public bool Equals(SectionModuleBuilder? sectionModuleBuilder) Parameters sectionModuleBuilder SectionModuleBuilder The SectionModuleBuilder to compare with the current SectionModuleBuilder. Returns bool true if the specified SectionModuleBuilder is equal to the current SectionModuleBuilder; otherwise, false. Equals(object?) Determines whether the specified SectionModuleBuilder is equal to the current SectionModuleBuilder. public override bool Equals(object? obj) Parameters obj object The object to compare with the current SectionModuleBuilder. Returns bool true if the specified SectionModuleBuilder is equal to the current SectionModuleBuilder; otherwise, false. Remarks If the object passes is an SectionModuleBuilder, Equals(SectionModuleBuilder?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithAccessory(ButtonElementBuilder) Sets the accessory of the section. public SectionModuleBuilder WithAccessory(ButtonElementBuilder accessory) Parameters accessory ButtonElementBuilder The accessory to be set for the section. Returns SectionModuleBuilder The current builder. WithAccessory(ImageElementBuilder) Sets the accessory of the section. public SectionModuleBuilder WithAccessory(ImageElementBuilder accessory) Parameters accessory ImageElementBuilder The accessory to be set for the section. Returns SectionModuleBuilder The current builder. WithAccessory<T>(Action<T>?) Sets the accessory of the section. public SectionModuleBuilder WithAccessory<T>(Action<T>? action = null) where T : IElementBuilder, new() Parameters action Action<T> The action to set the accessory of the section. Returns SectionModuleBuilder The current builder. Type Parameters T WithMode(SectionAccessoryMode) Sets how the Accessory is positioned relative to the Text. public SectionModuleBuilder WithMode(SectionAccessoryMode mode) Parameters mode SectionAccessoryMode How the Accessory is positioned relative to the Text. Returns SectionModuleBuilder The current builder. WithText(KMarkdownElementBuilder) Sets the text of the section. public SectionModuleBuilder WithText(KMarkdownElementBuilder text) Parameters text KMarkdownElementBuilder The text to be set for the section. Returns SectionModuleBuilder The current builder. WithText(ParagraphStructBuilder) Sets the text of the section. public SectionModuleBuilder WithText(ParagraphStructBuilder text) Parameters text ParagraphStructBuilder The text to be set for the section. Returns SectionModuleBuilder The current builder. WithText(PlainTextElementBuilder) Sets the text of the section. public SectionModuleBuilder WithText(PlainTextElementBuilder text) Parameters text PlainTextElementBuilder The text to be set for the section. Returns SectionModuleBuilder The current builder. WithText(string?, bool) Sets the text of the section. public SectionModuleBuilder WithText(string? text, bool isKMarkdown = false) Parameters text string The text to be set for the section. isKMarkdown bool A bool indicating whether the text is in KMarkdown format; if true, the text will be set as a KMarkdownElement; if false, the text will be set as a PlainTextElement. Returns SectionModuleBuilder The current builder. WithText<T>(Action<T>?) Sets the text of the section. public SectionModuleBuilder WithText<T>(Action<T>? action = null) where T : IElementBuilder, new() Parameters action Action<T> The action to set the text of the section. Returns SectionModuleBuilder The current builder. Type Parameters T Operators operator ==(SectionModuleBuilder?, SectionModuleBuilder?) Determines whether the specified SectionModuleBuilder is equal to the current SectionModuleBuilder. public static bool operator ==(SectionModuleBuilder? left, SectionModuleBuilder? right) Parameters left SectionModuleBuilder right SectionModuleBuilder Returns bool true if the specified SectionModuleBuilder is equal to the current SectionModuleBuilder; otherwise, false. operator !=(SectionModuleBuilder?, SectionModuleBuilder?) Determines whether the specified SectionModuleBuilder is not equal to the current SectionModuleBuilder. public static bool operator !=(SectionModuleBuilder? left, SectionModuleBuilder? right) Parameters left SectionModuleBuilder right SectionModuleBuilder Returns bool true if the specified SectionModuleBuilder is not equal to the current SectionModuleBuilder; otherwise, false."
  },
  "api/Kook.SlowModeInterval.html": {
    "href": "api/Kook.SlowModeInterval.html",
    "title": "Enum SlowModeInterval | Kook.Net 文档",
    "keywords": "Enum SlowModeInterval Namespace Kook Assembly Kook.Net.Core.dll Specifies the slow-mode ratelimit in seconds for an ITextChannel. public enum SlowModeInterval Fields None = 0 Slow-mode is disabled. _10 = 10 Each user needs to wait for 10 seconds before sending another message. _120 = 120 Each user needs to wait for 2 minutes (120 seconds) before sending another message. _15 = 15 Each user needs to wait for 15 seconds before sending another message. _1800 = 1800 Each user needs to wait for 30 minutes (1800 seconds) before sending another message. _21600 = 21600 Each user needs to wait for 6 hours (21600 seconds) before sending another message. _30 = 30 Each user needs to wait for 30 seconds before sending another message. _300 = 300 Each user needs to wait for 5 minutes (300 seconds) before sending another message. _3600 = 3600 Each user needs to wait for 1 hour (3600 seconds) before sending another message. _5 = 5 Each user needs to wait for 5 seconds before sending another message. _60 = 60 Each user needs to wait for 1 minute (60 seconds) before sending another message. _600 = 600 Each user needs to wait for 10 minutes (600 seconds) before sending another message. _7200 = 7200 Each user needs to wait for 2 hours (7200 seconds) before sending another message. _900 = 900 Each user needs to wait for 15 minutes (900 seconds) before sending another message."
  },
  "api/Kook.SortMode.html": {
    "href": "api/Kook.SortMode.html",
    "title": "Enum SortMode | Kook.Net 文档",
    "keywords": "Enum SortMode Namespace Kook Assembly Kook.Net.Core.dll Specifies the sorting mode. public enum SortMode Fields Ascending = 0 The items are sorted in ascending order. Descending = 1 The items are sorted in descending order."
  },
  "api/Kook.SystemMessageType.html": {
    "href": "api/Kook.SystemMessageType.html",
    "title": "Enum SystemMessageType | Kook.Net 文档",
    "keywords": "Enum SystemMessageType Namespace Kook Assembly Kook.Net.Core.dll Gets the type of a ISystemMessage public enum SystemMessageType"
  },
  "api/Kook.Tag-1.html": {
    "href": "api/Kook.Tag-1.html",
    "title": "Class Tag<T> | Kook.Net 文档",
    "keywords": "Class Tag<T> Namespace Kook Assembly Kook.Net.Core.dll Represents a tag found in IMessage. public class Tag<T> : ITag Type Parameters T Inheritance object Tag<T> Implements ITag Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Index Gets position of the tag in the message. public int Index { get; } Property Value int Key Gets the key of the tag. public dynamic Key { get; } Property Value dynamic Length Gets the length of the tag. public int Length { get; } Property Value int Type Gets the type of the tag. public TagType Type { get; } Property Value TagType Value Gets the value of the tag. public T? Value { get; } Property Value T Remarks When Type is HereMention, this property returns the same entity as EveryoneRole for convenience. because there is no actual entities representing a group of online users. Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Kook.TagHandling.html": {
    "href": "api/Kook.TagHandling.html",
    "title": "Enum TagHandling | Kook.Net 文档",
    "keywords": "Enum TagHandling Namespace Kook Assembly Kook.Net.Core.dll Specifies the handling type the tag should use. public enum TagHandling Fields FullName = 4 Resolves to username with identify number value (e.g. (met)2810246202(met) -> @Someone#1234). FullNameNoPrefix = 5 Resolves to username with identify number value without mention prefix (e.g. (met)2810246202(met) -> Someone#1234). Ignore = 0 Tag handling is ignored. (e.g. (met)2810246202(met) -> (met)2810246202(met)) Name = 2 Resolves to username (e.g. (met)2810246202(met) -> @Someone). NameNoPrefix = 3 Resolves to username without mention prefix (e.g. (met)2810246202(met) -> Someone). Remove = 1 Removes the tag entirely. Sanitize = 6 Sanitizes the tag. (e.g. (met)2810246202(met) -> (met)2810246202(met) (an nbsp is inserted before the key)). See Also MentionUtils Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling)"
  },
  "api/Kook.TagMode.html": {
    "href": "api/Kook.TagMode.html",
    "title": "Enum TagMode | Kook.Net 文档",
    "keywords": "Enum TagMode Namespace Kook Assembly Kook.Net.Core.dll Represents the mode to parse tags. public enum TagMode Fields KMarkdown = 1 Parse tags as KMarkdown. PlainText = 0 Parse tags as plain text."
  },
  "api/Kook.TagType.html": {
    "href": "api/Kook.TagType.html",
    "title": "Enum TagType | Kook.Net 文档",
    "keywords": "Enum TagType Namespace Kook Assembly Kook.Net.Core.dll Specifies the type of Kook tag. public enum TagType Fields ChannelMention = 1 The object is a channel mention. Emoji = 5 The object is an emoji. EveryoneMention = 3 The object is an everyone mention. HereMention = 4 The object is a here mention. RoleMention = 2 The object is a role mention. UserMention = 0 The object is an user mention."
  },
  "api/Kook.TextTheme.html": {
    "href": "api/Kook.TextTheme.html",
    "title": "Enum TextTheme | Kook.Net 文档",
    "keywords": "Enum TextTheme Namespace Kook Assembly Kook.Net.Core.dll Represents text themes used in Colorize(string?, TextTheme, bool). public enum TextTheme : ushort Fields Body = 6 Represents a body theme. Danger = 2 Represents a danger theme. Info = 4 Represents an info theme. Pink = 8 Represents a pink theme. Primary = 0 Represents a primary theme. Purple = 9 Represents a purple theme. Secondary = 5 Represents a secondary theme. Success = 1 Represents a success theme. Tips = 7 Represents a tips theme. Warning = 3 Represents a warning theme. Remarks warning The text themes of KMarkdown are currently only supported in card messages. KMarkdown messages theming is not supported yet. warning The color of the text themes vary on different platforms. It is recommended to test your card messages on different platforms to ensure that the text themes are displayed correctly."
  },
  "api/Kook.TokenType.html": {
    "href": "api/Kook.TokenType.html",
    "title": "Enum TokenType | Kook.Net 文档",
    "keywords": "Enum TokenType Namespace Kook Assembly Kook.Net.Core.dll Specifies the type of token to use with the client. public enum TokenType Fields Bearer = 0 An OAuth2 token type. Bot = 1 A bot token type."
  },
  "api/Kook.TokenUtils.html": {
    "href": "api/Kook.TokenUtils.html",
    "title": "Class TokenUtils | Kook.Net 文档",
    "keywords": "Class TokenUtils Namespace Kook Assembly Kook.Net.Core.dll Provides a series of helper methods for handling Kook login tokens. public static class TokenUtils Inheritance object TokenUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ValidateToken(TokenType, string) Checks the validity of the supplied token of a specific type. public static void ValidateToken(TokenType tokenType, string token) Parameters tokenType TokenType The type of token to validate. token string The token value to validate. Exceptions ArgumentNullException Thrown when the supplied token string is null, empty, or contains only whitespace. ArgumentException Thrown when the supplied TokenType or token value is invalid."
  },
  "api/Kook.UserExtensions.html": {
    "href": "api/Kook.UserExtensions.html",
    "title": "Class UserExtensions | Kook.Net 文档",
    "keywords": "Class UserExtensions Namespace Kook Assembly Kook.Net.Core.dll An extension class for various Kook user objects. public static class UserExtensions Inheritance object UserExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BanAsync(IGuildUser, int, string?, RequestOptions?) Bans the user from the guild and optionally prunes their recent messages. public static Task BanAsync(this IGuildUser user, int pruneDays = 0, string? reason = null, RequestOptions? options = null) Parameters user IGuildUser The user to ban. pruneDays int The number of days to remove messages from this user for - must be between [0, 7] reason string The reason of the ban to be written in the audit log. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for banning a user. Exceptions ArgumentException pruneDays is not between 0 to 7. SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) Sends a card message message via DM. public static Task<Cacheable<IUserMessage, Guid>> SendCardAsync(this IUser user, ICard card, IQuote? quote = null, RequestOptions? options = null) Parameters user IUser The user to send the DM to. card ICard The card to be sent. quote IQuote The message quote to be included. Used to reply to specific messages. options RequestOptions The request options for this async request. Returns Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) Sends a card message message via DM. public static Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(this IUser user, IEnumerable<ICard> cards, IQuote? quote = null, RequestOptions? options = null) Parameters user IUser The user to send the DM to. cards IEnumerable<ICard> The cards to be sent. quote IQuote The message quote to be included. Used to reply to specific messages. options RequestOptions The request options for this async request. Returns Task<Cacheable<IUserMessage, Guid>> SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) Sends a file via DM. public static Task<Cacheable<IUserMessage, Guid>> SendFileAsync(this IUser user, FileAttachment attachment, IQuote? quote = null, RequestOptions? options = null) Parameters user IUser The user to send the DM to. attachment FileAttachment The attachment containing the file. quote IQuote The message quote to be included. Used to reply to specific messages. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) Sends a file via DM. public static Task<Cacheable<IUserMessage, Guid>> SendFileAsync(this IUser user, Stream stream, string filename, AttachmentType type = AttachmentType.File, IQuote? quote = null, RequestOptions? options = null) Parameters user IUser The user to send the DM to. stream Stream The stream of the file. filename string The name of the file. type AttachmentType The type of the file. quote IQuote The message quote to be included. Used to reply to specific messages. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) Sends a file via DM. public static Task<Cacheable<IUserMessage, Guid>> SendFileAsync(this IUser user, string path, string? filename = null, AttachmentType type = AttachmentType.File, IQuote? quote = null, RequestOptions? options = null) Parameters user IUser The user to send the DM to. path string The file path of the file. filename string The name of the file. type AttachmentType The type of the file. quote IQuote The message quote to be included. Used to reply to specific messages. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> SendTextAsync(IUser, string, IQuote?, RequestOptions?) Sends a text message via DM. public static Task<Cacheable<IUserMessage, Guid>> SendTextAsync(this IUser user, string content, IQuote? quote = null, RequestOptions? options = null) Parameters user IUser The user to send the DM to. content string The KMarkdown content to be sent. quote IQuote The message quote to be included. Used to reply to specific messages. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>>"
  },
  "api/Kook.UserPermissionOverwrite.html": {
    "href": "api/Kook.UserPermissionOverwrite.html",
    "title": "Class UserPermissionOverwrite | Kook.Net 文档",
    "keywords": "Class UserPermissionOverwrite Namespace Kook Assembly Kook.Net.Core.dll Represent a permission object for a user. public class UserPermissionOverwrite : IPermissionOverwrite<IUser> Inheritance object UserPermissionOverwrite Implements IPermissionOverwrite<IUser> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserPermissionOverwrite(IUser, OverwritePermissions) Initializes a new UserPermissionOverwrite with provided user information and modified permissions. public UserPermissionOverwrite(IUser target, OverwritePermissions permissions) Parameters target IUser permissions OverwritePermissions Properties Permissions Gets the permissions associated with this overwrite entry for a user. public OverwritePermissions Permissions { get; } Property Value OverwritePermissions Target Gets the user this overwrite is targeting. public IUser Target { get; } Property Value IUser"
  },
  "api/Kook.UserTag.html": {
    "href": "api/Kook.UserTag.html",
    "title": "Class UserTag | Kook.Net 文档",
    "keywords": "Class UserTag Namespace Kook Assembly Kook.Net.Core.dll Representing a tag an IUser can have. public class UserTag : IEquatable<UserTag> Inheritance object UserTag Implements IEquatable<UserTag> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BackgroundColor Gets the background color of the tag given to user. public AlphaColor BackgroundColor { get; } Property Value AlphaColor A AlphaColor struct representing the background color of this tag. Color Gets the color of the tag given to user. public Color Color { get; } Property Value Color A Color struct representing the color of this tag. Text Gets the text of the tag given to user. public string Text { get; } Property Value string A string representing the text of this tag. Methods Create(Color, AlphaColor, string) Initializes a new instance of the UserTag class. public static UserTag Create(Color color, AlphaColor backgroundColor, string text) Parameters color Color The color of the tag given to user. backgroundColor AlphaColor The background color of the tag given to user. text string The text of the tag given to user. Returns UserTag A UserTag representing the given parameters. Equals(UserTag?) Indicates whether the current object is equal to another object of the same type. public bool Equals(UserTag? other) Parameters other UserTag An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/Kook.VideoModule.html": {
    "href": "api/Kook.VideoModule.html",
    "title": "Class VideoModule | Kook.Net 文档",
    "keywords": "Class VideoModule Namespace Kook Assembly Kook.Net.Core.dll Represents a video module in an ICard. public class VideoModule : IMediaModule, IModule, IEquatable<VideoModule>, IEquatable<IModule> Inheritance object VideoModule Implements IMediaModule IModule IEquatable<VideoModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(IModule) CardExtensions.ToBuilder(VideoModule) Properties Source Gets the source of the media associated with this module. public string Source { get; } Property Value string A string representing the source of the audio associated with this module. Title Gets the title of the media associated with this module. public string? Title { get; } Property Value string A string representing the title of the media associated with this module. Type Gets the type of the module. public ModuleType Type { get; } Property Value ModuleType A ModuleType value that represents the type of the module. Methods Equals(VideoModule?) Determines whether the specified VideoModule is equal to the current VideoModule. public bool Equals(VideoModule? videoModule) Parameters videoModule VideoModule The VideoModule to compare with the current VideoModule. Returns bool true if the specified VideoModule is equal to the current VideoModule; otherwise, false. Equals(object?) Determines whether the specified VideoModule is equal to the current VideoModule. public override bool Equals(object? obj) Parameters obj object The object to compare with the current VideoModule. Returns bool true if the specified VideoModule is equal to the current VideoModule; otherwise, false. Remarks If the object passes is an VideoModule, Equals(VideoModule?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(VideoModule, VideoModule) Determines whether the specified VideoModule is equal to the current VideoModule. public static bool operator ==(VideoModule left, VideoModule right) Parameters left VideoModule right VideoModule Returns bool true if the specified VideoModule is equal to the current VideoModule; otherwise, false. operator !=(VideoModule, VideoModule) Determines whether the specified VideoModule is not equal to the current VideoModule. public static bool operator !=(VideoModule left, VideoModule right) Parameters left VideoModule right VideoModule Returns bool true if the specified VideoModule is not equal to the current VideoModule; otherwise, false."
  },
  "api/Kook.VideoModuleBuilder.html": {
    "href": "api/Kook.VideoModuleBuilder.html",
    "title": "Class VideoModuleBuilder | Kook.Net 文档",
    "keywords": "Class VideoModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll Represents a video module builder for creating a VideoModule. public class VideoModuleBuilder : IModuleBuilder, IEquatable<VideoModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object VideoModuleBuilder Implements IModuleBuilder IEquatable<VideoModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VideoModuleBuilder() Initializes a new instance of the VideoModuleBuilder class. public VideoModuleBuilder() VideoModuleBuilder(string, string?) Initializes a new instance of the VideoModuleBuilder class. public VideoModuleBuilder(string source, string? title = null) Parameters source string The source URL of the video. title string The title of the video. Properties Source Gets or sets the source URL of the video. public string? Source { get; set; } Property Value string The source URL of the video. Title Gets or sets the title of the video. public string? Title { get; set; } Property Value string The title of the video. Type Specifies the module type of the IModule this builder creates. public ModuleType Type { get; } Property Value ModuleType A ModuleType representing the module type of the IModule this builder creates. Methods Build() Builds this builder into a VideoModule. public VideoModule Build() Returns VideoModule A VideoModule representing the built video module object. Exceptions ArgumentNullException The Source url is null. ArgumentException The Source url is empty. InvalidOperationException The Source url does not include a protocol (either HTTP or HTTPS). Equals(VideoModuleBuilder?) Determines whether the specified VideoModuleBuilder is equal to the current VideoModuleBuilder. public bool Equals(VideoModuleBuilder? videoModuleBuilder) Parameters videoModuleBuilder VideoModuleBuilder The VideoModuleBuilder to compare with the current VideoModuleBuilder. Returns bool true if the specified VideoModuleBuilder is equal to the current VideoModuleBuilder; otherwise, false. Equals(object?) Determines whether the specified VideoModuleBuilder is equal to the current VideoModuleBuilder. public override bool Equals(object? obj) Parameters obj object The object to compare with the current VideoModuleBuilder. Returns bool true if the specified VideoModuleBuilder is equal to the current VideoModuleBuilder; otherwise, false. Remarks If the object passes is an VideoModuleBuilder, Equals(VideoModuleBuilder?) will be called to compare the 2 instances. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithSource(string?) Sets the source URL of the video. public VideoModuleBuilder WithSource(string? source) Parameters source string The source URL of the video to be set. Returns VideoModuleBuilder The current builder. WithTitle(string) Sets the title of the video. public VideoModuleBuilder WithTitle(string title) Parameters title string The title of the video to be set. Returns VideoModuleBuilder The current builder. Operators operator ==(VideoModuleBuilder?, VideoModuleBuilder?) Determines whether the specified VideoModuleBuilder is equal to the current VideoModuleBuilder. public static bool operator ==(VideoModuleBuilder? left, VideoModuleBuilder? right) Parameters left VideoModuleBuilder right VideoModuleBuilder Returns bool true if the specified VideoModuleBuilder is equal to the current VideoModuleBuilder; otherwise, false. operator !=(VideoModuleBuilder?, VideoModuleBuilder?) Determines whether the specified VideoModuleBuilder is not equal to the current VideoModuleBuilder. public static bool operator !=(VideoModuleBuilder? left, VideoModuleBuilder? right) Parameters left VideoModuleBuilder right VideoModuleBuilder Returns bool true if the specified VideoModuleBuilder is not equal to the current VideoModuleBuilder; otherwise, false."
  },
  "api/Kook.VoiceQuality.html": {
    "href": "api/Kook.VoiceQuality.html",
    "title": "Enum VoiceQuality | Kook.Net 文档",
    "keywords": "Enum VoiceQuality Namespace Kook Assembly Kook.Net.Core.dll Specifies the voice quality of an IVoiceChannel. public enum VoiceQuality Fields _128kbps = 4 Equivalent to approximately 128 kbps. _18kbps = 1 Equivalent to approximately 18 kbps. _192kbps = 5 Equivalent to approximately 192 kbps. _256kbps = 6 Equivalent to approximately 256 kbps. _320kbps = 7 Equivalent to approximately 320 kbps. _48kbps = 2 Equivalent to approximately is 48 kbps. _96kbps = 3 Equivalent to approximately is 96 kbps."
  },
  "api/Kook.WebSocket.BaseSocketClient.html": {
    "href": "api/Kook.WebSocket.BaseSocketClient.html",
    "title": "Class BaseSocketClient | Kook.Net 文档",
    "keywords": "Class BaseSocketClient Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents an abstract base class for WebSocket-based clients. public abstract class BaseSocketClient : BaseKookClient, IKookClient, IDisposable Inheritance object BaseKookClient BaseSocketClient Implements IKookClient IDisposable Derived KookSocketClient Inherited Members BaseKookClient.Log BaseKookClient.LoggedIn BaseKookClient.LoggedOut BaseKookClient.SentRequest BaseKookClient.LoginState BaseKookClient.TokenType BaseKookClient.Dispose() BaseKookClient.LoginAsync(TokenType, string, bool) BaseKookClient.LogoutAsync() BaseKookClient.ConnectionState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSocketClientExperimentalExtensions.CreateGuildAsync(BaseSocketClient, string, IVoiceRegion?, Stream?, int?, RequestOptions?) Fields BaseConfig Gets the configuration used by this client. protected readonly KookSocketConfig BaseConfig Field Value KookSocketConfig Properties CurrentUser Gets the current logged-in user. public virtual SocketSelfUser? CurrentUser { get; protected set; } Property Value SocketSelfUser Guilds Gets a collection of guilds that the user is currently in. public abstract IReadOnlyCollection<SocketGuild> Guilds { get; } Property Value IReadOnlyCollection<SocketGuild> A read-only collection of guilds that the current user is in. Latency Gets the estimated round-trip latency, in milliseconds, to the gateway server. public abstract int Latency { get; protected set; } Property Value int An int that represents the round-trip latency to the WebSocket server. Please note that this value does not represent a \"true\" latency for operations such as sending a message. Rest Provides access to a REST-only client with a shared state from this client. public abstract KookSocketRestClient Rest { get; } Property Value KookSocketRestClient Methods DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>?, RequestOptions?) Downloads all boost subscriptions for the specified guilds. public abstract Task DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>? guilds = null, RequestOptions? options = null) Parameters guilds IEnumerable<IGuild> The guilds to download the boost subscriptions for. If null, all available guilds will be downloaded. To download all boost subscriptions, the current user must has the ManageGuild permission. options RequestOptions The options to be used when sending the request. Returns Task DownloadUsersAsync(IEnumerable<IGuild>?, RequestOptions?) Attempts to download users into the user cache for the selected guilds. public abstract Task DownloadUsersAsync(IEnumerable<IGuild>? guilds = null, RequestOptions? options = null) Parameters guilds IEnumerable<IGuild> The guilds to download the members from. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous download operation. DownloadVoiceStatesAsync(IEnumerable<IGuild>?, RequestOptions?) Downloads all voice states for the specified guilds. public abstract Task DownloadVoiceStatesAsync(IEnumerable<IGuild>? guilds = null, RequestOptions? options = null) Parameters guilds IEnumerable<IGuild> The guilds to download the voice states for. If null, all available guilds will be downloaded. options RequestOptions The options to be used when sending the request. Returns Task GetChannel(ulong) Gets a channel. public abstract SocketChannel? GetChannel(ulong id) Parameters id ulong The identifier of the channel. Returns SocketChannel A generic WebSocket-based channel object (voice, text, category, etc.) associated with the identifier; null when the channel cannot be found. GetDMChannel(Guid) Gets a channel. public abstract SocketDMChannel? GetDMChannel(Guid chatCode) Parameters chatCode Guid The chat code of the direct-message channel. Returns SocketDMChannel A generic WebSocket-based channel object (voice, text, category, etc.) associated with the identifier; null when the channel cannot be found. GetDMChannel(ulong) Gets a channel. public abstract SocketDMChannel? GetDMChannel(ulong userId) Parameters userId ulong The user identifier of the direct-message channel. Returns SocketDMChannel A generic WebSocket-based channel object (voice, text, category, etc.) associated with the identifier; null when the channel cannot be found. GetGuild(ulong) Gets a guild. public abstract SocketGuild? GetGuild(ulong id) Parameters id ulong The guild identifier. Returns SocketGuild A WebSocket-based guild associated with the identifier; null when the guild cannot be found. GetUser(string, string) Gets a user. public abstract SocketUser? GetUser(string username, string identifyNumber) Parameters username string The name of the user. identifyNumber string The identify value of the user. Returns SocketUser A generic WebSocket-based user; null when the user cannot be found. Remarks This method gets the user present in the WebSocket cache with the given condition. warning Sometimes a user may return null due to Kook not sending offline users in large guilds (i.e. guild with 100+ members) actively. To download users on startup and to see more information about this subject, see AlwaysDownloadUsers. note This method does not attempt to fetch users that the logged-in user does not have access to (i.e. users who don't share mutual guild(s) with the current user). If you wish to get a user that you do not have access to, consider using the REST implementation of GetUserAsync(ulong, RequestOptions?). GetUser(ulong) Gets a generic user. public abstract SocketUser? GetUser(ulong id) Parameters id ulong The user ID. Returns SocketUser A generic WebSocket-based user; null when the user cannot be found. Remarks This method gets the user present in the WebSocket cache with the given condition. warning Sometimes a user may return null due to Kook not sending offline users in large guilds (i.e. guild with 100+ members) actively. To download users on startup and to see more information about this subject, see AlwaysDownloadUsers. note This method does not attempt to fetch users that the logged-in user does not have access to (i.e. users who don't share mutual guild(s) with the current user). If you wish to get a user that you do not have access to, consider using the REST implementation of GetUserAsync(ulong, RequestOptions?). StartAsync() Starts the WebSocket connection. public abstract Task StartAsync() Returns Task A task that represents the asynchronous start operation. StopAsync() Stops the WebSocket connection. public abstract Task StopAsync() Returns Task A task that represents the asynchronous stop operation. Events ChannelCreated Fired when a channel is created. public event Func<SocketChannel, Task> ChannelCreated Event Type Func<SocketChannel, Task> Remarks This event is fired when a generic channel has been created. The event handler must return a Task and accept a SocketChannel as its parameter. The newly created channel is passed into the event handler parameter. The given channel type may include, but not limited to, Private Channels (DM, Group), Guild Channels (Text, Voice, Category); see the derived classes of SocketChannel for more details. ChannelDestroyed Fired when a channel is destroyed. public event Func<SocketChannel, Task> ChannelDestroyed Event Type Func<SocketChannel, Task> Remarks This event is fired when a generic channel has been destroyed. The event handler must return a Task and accept a SocketChannel as its parameter. The destroyed channel is passed into the event handler parameter. The given channel type may include, but not limited to, Private Channels (DM, Group), Guild Channels (Text, Voice, Category); see the derived classes of SocketChannel for more details. ChannelUpdated Fired when a channel is updated. public event Func<SocketChannel, SocketChannel, Task> ChannelUpdated Event Type Func<SocketChannel, SocketChannel, Task> Remarks This event is fired when a generic channel has been updated. The event handler must return a Task and accept 2 SocketChannel as its parameters. The original (prior to update) channel is passed into the first SocketChannel, while the updated channel is passed into the second. The given channel type may include, but not limited to, Private Channels (DM, Group), Guild Channels (Text, Voice, Category); see the derived classes of SocketChannel for more details. CurrentUserUpdated Fired when the connected account is updated. public event Func<SocketSelfUser, SocketSelfUser, Task> CurrentUserUpdated Event Type Func<SocketSelfUser, SocketSelfUser, Task> Remarks This event is fired when the connected account is updated. The event handler must return a Task and accept a SocketSelfUser, and a SocketSelfUser as its parameter. The current user before the update is passed into the event handler parameter as SocketSelfUser. The current user after the update is passed into the event handler parameter as SocketSelfUser. DirectMessageButtonClicked Fired when a button is clicked in a direct card message. public event Func<string, Cacheable<SocketUser, ulong>, Cacheable<IMessage, Guid>, SocketDMChannel, Task> DirectMessageButtonClicked Event Type Func<string, Cacheable<SocketUser, ulong>, Cacheable<IMessage, Guid>, SocketDMChannel, Task> Remarks This event is fired when a button is clicked in a direct card message. The event handler must return a Task and accept a string, a Cacheable<TEntity, TId>, a Cacheable<TEntity, TId>, and a SocketTextChannel as its parameter. The button value is passed into the event handler parameter as string. The users who clicked the button is passed into the event handler parameter as Cacheable<TEntity, TId>, which contains a SocketUser when the user presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user is preserved in the ulong. If caching is enabled via KookSocketConfig, the Cacheable<TEntity, TId> entity will contain the direct card message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the Guid The channel where the button is clicked is passed into the event handler parameter as SocketTextChannel. DirectMessageDeleted Fired when a direct message is deleted. public event Func<Cacheable<IMessage, Guid>, Cacheable<SocketUser, ulong>, Cacheable<SocketDMChannel, Guid>, Task> DirectMessageDeleted Event Type Func<Cacheable<IMessage, Guid>, Cacheable<SocketUser, ulong>, Cacheable<SocketDMChannel, Guid>, Task> Remarks This event is fired when a direct message is deleted. The event handler must return a Task and accept a Cacheable<TEntity, TId>, a Cacheable<TEntity, TId>, and a Cacheable<TEntity, TId> as its parameters. important It is not possible to retrieve the direct message via DownloadAsync(); the original direct message cannot be retrieved by Kook after the message has been deleted. If caching is enabled via KookSocketConfig, the Cacheable<TEntity, TId> entity will contain the deleted direct message; otherwise, in event that the message cannot be retrieved, the ID of the direct message is preserved in the Guid. The user that originally sent this direct message is passed into the event handler parameter as Cacheable<TEntity, TId>, which contains a SocketGuildUser when the guild member presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member is preserved in the ulong. If a direct message was sent by the current user to this user, or the recipient had sent a message before in current session, the Cacheable<TEntity, TId> entity will contains the direct message channel; otherwise, the direct message channel has not been created yet, and the Guid as chat code will be preserved. DirectMessageReceived Fired when a direct message is received. public event Func<SocketMessage, SocketUser, SocketDMChannel, Task> DirectMessageReceived Event Type Func<SocketMessage, SocketUser, SocketDMChannel, Task> Remarks This event is fired when a direct message is received. The event handler must return a Task and accept a SocketMessage, a SocketUser, and a SocketDMChannel as its parameters. The message that is sent to the client is passed into the event handler parameter as SocketMessage. This message may be a system message (i.e. SocketSystemMessage) or a user message (i.e. SocketUserMessage. See the derived classes of SocketMessage for more details. The user that sent this direct message is passed into the event handler parameter as SocketUser. The source direct channel of the removed message will be passed into the SocketTextChannel parameter. DirectMessageUpdated Fired when a message is updated. public event Func<Cacheable<IMessage, Guid>, Cacheable<IMessage, Guid>, Cacheable<SocketUser, ulong>, Cacheable<SocketDMChannel, Guid>, Task> DirectMessageUpdated Event Type Func<Cacheable<IMessage, Guid>, Cacheable<IMessage, Guid>, Cacheable<SocketUser, ulong>, Cacheable<SocketDMChannel, Guid>, Task> Remarks This event is fired when a direct message is updated. The event handler must return a Task and accept a Cacheable<TEntity, TId>, a Cacheable<TEntity, TId>, a Cacheable<TEntity, TId>, and a Cacheable<TEntity, TId> as its parameters. important It is not possible to retrieve the direct message via DownloadAsync(); the original direct message cannot be retrieved by Kook after the message has been updated. If caching is enabled via KookSocketConfig, the Cacheable<TEntity, TId> entity will contain the updated direct message; otherwise, in event that the message cannot be retrieved, the ID of the direct message is preserved in the Guid. The user that originally sent this direct message is passed into the event handler parameter as Cacheable<TEntity, TId>, which contains a SocketGuildUser when the guild member presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member is preserved in the ulong. If a direct message was sent by the current user to this user, or the recipient had sent a message before in current session, the Cacheable<TEntity, TId> entity will contains the direct message channel; otherwise, the direct message channel has not been created yet, and the Guid as chat code will be preserved. DirectReactionAdded Fired when a reaction is added to a direct message. public event Func<Cacheable<IMessage, Guid>, Cacheable<SocketDMChannel, Guid>, Cacheable<SocketUser, ulong>, SocketReaction, Task> DirectReactionAdded Event Type Func<Cacheable<IMessage, Guid>, Cacheable<SocketDMChannel, Guid>, Cacheable<SocketUser, ulong>, SocketReaction, Task> Remarks This event is fired when a reaction is added to a user message in a private channel. The event handler must return a Task and accept a Cacheable<TEntity, TId>, a Cacheable<TEntity, TId>, a Cacheable<TEntity, TId>, and a SocketReaction as its parameter. If caching is enabled via KookSocketConfig, the Cacheable<TEntity, TId> entity will contain the original message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the Guid. If a direct message was sent by the current user to this user, or the recipient had sent a message before in current session, the Cacheable<TEntity, TId> entity will contains the direct message channel; otherwise, the direct message channel has not been created yet, and the Guid as chat code will be preserved. The user who removed the reaction will be passed into the Cacheable<TEntity, TId>. The reaction that was added will be passed into the SocketReaction parameter. note When fetching the reaction from this event, a user may not be provided under User. Please see the documentation of the property for more information. DirectReactionRemoved Fired when a reaction is removed from a message. public event Func<Cacheable<IMessage, Guid>, Cacheable<SocketDMChannel, Guid>, Cacheable<SocketUser, ulong>, SocketReaction, Task> DirectReactionRemoved Event Type Func<Cacheable<IMessage, Guid>, Cacheable<SocketDMChannel, Guid>, Cacheable<SocketUser, ulong>, SocketReaction, Task> Remarks This event is fired when a reaction is removed from a user message in a private channel. The event handler must return a Task and accept a Cacheable<TEntity, TId>, a Cacheable<TEntity, TId>, a Cacheable<TEntity, TId>, and a SocketReaction as its parameter. If caching is enabled via KookSocketConfig, the Cacheable<TEntity, TId> entity will contain the original message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the Guid. If a direct message was sent by the current user to this user, or the recipient had sent a message before in current session, the Cacheable<TEntity, TId> entity will contains the direct message channel; otherwise, the direct message channel has not been created yet, and the Guid as chat code will be preserved. The user who added the reaction will be passed into the Cacheable<TEntity, TId>. The reaction that was added will be passed into the SocketReaction parameter. note When fetching the reaction from this event, a user may not be provided under User. Please see the documentation of the property for more information. EmoteCreated Fired when an emote is created. public event Func<GuildEmote, SocketGuild, Task> EmoteCreated Event Type Func<GuildEmote, SocketGuild, Task> Remarks This event is fired when an emote is created. The event handler must return a Task and accept a GuildEmote and a SocketGuild as its parameter. The emote that is created is passed into the event handler parameter as GuildEmote. The guild where the emote is created is passed into the event handler parameter as SocketGuild. EmoteDeleted Fired when a emote is deleted. public event Func<GuildEmote, SocketGuild, Task> EmoteDeleted Event Type Func<GuildEmote, SocketGuild, Task> Remarks This event is fired when an emote is deleted. The event handler must return a Task and accept a GuildEmote and a SocketGuild as its parameter. The emote that is deleted is passed into the event handler parameter as GuildEmote. The guild where the emote is deleted is passed into the event handler parameter as SocketGuild. EmoteUpdated Fired when a emote is updated. public event Func<GuildEmote?, GuildEmote, SocketGuild, Task> EmoteUpdated Event Type Func<GuildEmote, GuildEmote, SocketGuild, Task> Remarks This event is fired when an emote is updated. The event handler must return a Task and accept a GuildEmote, a GuildEmote and a SocketGuild as its parameter. The original emote entity is passed into the event handler parameter as GuildEmote. The updated emote entity is passed into the event handler parameter as GuildEmote. The guild where the emote is updated is passed into the event handler parameter as SocketGuild. GuildAvailable Fired when a guild becomes available. public event Func<SocketGuild, Task> GuildAvailable Event Type Func<SocketGuild, Task> Remarks This event is fired when a guild becomes available. The event handler must return a Task and accept a SocketGuild as its parameter. The guild that becomes available is passed into the event handler parameter as SocketGuild. GuildMemberOffline Fired when a guild member is offline. public event Func<IReadOnlyCollection<Cacheable<SocketGuildUser, ulong>>, DateTimeOffset, Task> GuildMemberOffline Event Type Func<IReadOnlyCollection<Cacheable<SocketGuildUser, ulong>>, DateTimeOffset, Task> Remarks This event is fired when a guild member is offline. The event handler must return a Task and accept a Cacheable<TEntity, TId>, and a DateTimeOffset as its parameter. The guild member that is offline is passed into the event handler parameter as Cacheable<TEntity, TId>, which contains the original SocketGuildUser when the guild member presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member is preserved in the ulong. The time when the guild member is offline is passed into the event handler parameter as DateTimeOffset. GuildMemberOnline Fired when a guild member is online. public event Func<IReadOnlyCollection<Cacheable<SocketGuildUser, ulong>>, DateTimeOffset, Task> GuildMemberOnline Event Type Func<IReadOnlyCollection<Cacheable<SocketGuildUser, ulong>>, DateTimeOffset, Task> Remarks This event is fired when a guild member is online. The event handler must return a Task and accept a Cacheable<TEntity, TId>, and a DateTimeOffset as its parameter. The guild member that is online is passed into the event handler parameter as Cacheable<TEntity, TId>, which contains the original SocketGuildUser when the guild member presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member is preserved in the ulong. The time when the guild member is online is passed into the event handler parameter as DateTimeOffset. GuildMemberUpdated Fired when a guild member is updated. public event Func<Cacheable<SocketGuildUser, ulong>, Cacheable<SocketGuildUser, ulong>, Task> GuildMemberUpdated Event Type Func<Cacheable<SocketGuildUser, ulong>, Cacheable<SocketGuildUser, ulong>, Task> Remarks This event is fired when a guild member is updated. The event handler must return a Task and accept a Cacheable<TEntity, TId>, and a Cacheable<TEntity, TId> as its parameter. important It is not possible to retrieve the guild member via DownloadAsync(); the original guild member cannot be retrieved by Kook after the guild member has been updated. The guild member that is updated is passed into the event handler parameter as Cacheable<TEntity, TId>, which contains the original SocketGuildUser when the guild member presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member is preserved in the ulong. The guild member that is updated is passed into the event handler parameter as Cacheable<TEntity, TId>, which contains a SocketGuildUser when the guild member presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member is preserved in the ulong. GuildUnavailable Fired when a guild becomes unavailable. public event Func<SocketGuild, Task> GuildUnavailable Event Type Func<SocketGuild, Task> Remarks This event is fired when a guild becomes unavailable. The event handler must return a Task and accept a SocketGuild as its parameter. The guild that becomes unavailable is passed into the event handler parameter as SocketGuild. GuildUpdated Fired when a guild is updated. public event Func<SocketGuild, SocketGuild, Task> GuildUpdated Event Type Func<SocketGuild, SocketGuild, Task> Remarks This event is fired when a guild is updated. The event handler must return a Task and accept a SocketGuild, and a SocketGuild as its parameter. The guild before the update is passed into the event handler parameter as SocketGuild. The guild after the update is passed into the event handler parameter as SocketGuild. JoinedGuild Fired when the connected account joins a guild. public event Func<SocketGuild, Task> JoinedGuild Event Type Func<SocketGuild, Task> Remarks This event is fired when the connected account joins a guild. The event handler must return a Task and accept a SocketGuild as its parameter. The guild where the account joins is passed into the event handler parameter as SocketGuild. LeftGuild Fired when the connected account leaves a guild. public event Func<SocketGuild, Task> LeftGuild Event Type Func<SocketGuild, Task> Remarks This event is fired when the connected account leaves a guild. The event handler must return a Task and accept a SocketGuild as its parameter. important This parameter must be accessed within the current thread context. After waiting for completion of the task in this asynchronous event, the object passed to it will be disposed. The guild where the account leaves is passed into the event handler parameter as SocketGuild. MessageButtonClicked Fired when a button is clicked in a card message. public event Func<string, Cacheable<SocketGuildUser, ulong>, Cacheable<IMessage, Guid>, SocketTextChannel, Task> MessageButtonClicked Event Type Func<string, Cacheable<SocketGuildUser, ulong>, Cacheable<IMessage, Guid>, SocketTextChannel, Task> Remarks This event is fired when a button is clicked in a card message. The event handler must return a Task and accept a string, a Cacheable<TEntity, TId>, a Cacheable<TEntity, TId>, a SocketTextChannel, and a SocketGuild as its parameter. The button value is passed into the event handler parameter as string. The users who clicked the button is passed into the event handler parameter as Cacheable<TEntity, TId>, which contains a SocketUser when the user presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user is preserved in the ulong. If caching is enabled via KookSocketConfig, the Cacheable<TEntity, TId> entity will contain the card message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the Guid The channel where the button is clicked is passed into the event handler parameter as SocketTextChannel. MessageDeleted Fired when a message is deleted. public event Func<Cacheable<IMessage, Guid>, SocketTextChannel, Task> MessageDeleted Event Type Func<Cacheable<IMessage, Guid>, SocketTextChannel, Task> Remarks This event is fired when a message is deleted. The event handler must return a Task and accept a Cacheable<TEntity, TId>, and a SocketTextChannel as its parameter. important It is not possible to retrieve the message via DownloadAsync(); the message cannot be retrieved by Kook after the message has been deleted. If caching is enabled via KookSocketConfig, the Cacheable<TEntity, TId> entity will contain the deleted message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the Guid. The source channel of the removed message will be passed into the SocketTextChannel parameter. MessagePinned Fired when a message is pinned. public event Func<Cacheable<IMessage, Guid>, Cacheable<IMessage, Guid>, SocketTextChannel, Cacheable<SocketGuildUser, ulong>, Task> MessagePinned Event Type Func<Cacheable<IMessage, Guid>, Cacheable<IMessage, Guid>, SocketTextChannel, Cacheable<SocketGuildUser, ulong>, Task> Remarks This event is fired when a message is pinned. The event handler must return a Task and accept a Cacheable<TEntity, TId>, SocketMessage, and SocketTextChannel as its parameters. important It is not possible to retrieve the message via DownloadAsync(); the original message cannot be retrieved by Kook after the message has been updated. If caching is enabled via KookSocketConfig, the Cacheable<TEntity, TId> entity will contain the original message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the Guid. If caching is enabled via KookSocketConfig, the Cacheable<TEntity, TId> entity will contain the pinned message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the Guid. The source channel of the updated message will be passed into the SocketTextChannel parameter. The guild member that pinned this message is passed into the event handler parameter as Cacheable<TEntity, TId>, which contains a SocketGuildUser when the guild member presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member is preserved in the ulong. MessageReceived Fired when a message is received. public event Func<SocketMessage, SocketGuildUser, SocketTextChannel, Task> MessageReceived Event Type Func<SocketMessage, SocketGuildUser, SocketTextChannel, Task> Remarks This event is fired when a message is received. The event handler must return a Task and accept a SocketMessage, a SocketGuildUser, and a SocketTextChannel as its parameter. The message that is sent to the client is passed into the event handler parameter as SocketMessage. This message may be a system message (i.e. SocketSystemMessage) or a user message (i.e. SocketUserMessage. See the derived classes of SocketMessage for more details. The guild member that sent this message is passed into the event handler parameter as SocketGuildUser. The source channel of the removed message will be passed into the SocketTextChannel parameter. MessageUnpinned Fired when a message is unpinned. public event Func<Cacheable<IMessage, Guid>, Cacheable<IMessage, Guid>, SocketTextChannel, Cacheable<SocketGuildUser, ulong>, Task> MessageUnpinned Event Type Func<Cacheable<IMessage, Guid>, Cacheable<IMessage, Guid>, SocketTextChannel, Cacheable<SocketGuildUser, ulong>, Task> Remarks This event is fired when a message is unpinned. The event handler must return a Task and accept a Cacheable<TEntity, TId>, SocketMessage, and SocketTextChannel as its parameters. important It is not possible to retrieve the message via DownloadAsync(); the original message cannot be retrieved by Kook after the message has been updated. If caching is enabled via KookSocketConfig, the Cacheable<TEntity, TId> entity will contain the original message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the Guid. If caching is enabled via KookSocketConfig, the Cacheable<TEntity, TId> entity will contain the unpinned message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the Guid. The source channel of the updated message will be passed into the SocketTextChannel parameter. The guild member that unpinned this message is passed into the event handler parameter as Cacheable<TEntity, TId>, which contains a SocketGuildUser when the guild member presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member is preserved in the ulong. MessageUpdated Fired when a message is updated. public event Func<Cacheable<IMessage, Guid>, Cacheable<IMessage, Guid>, SocketTextChannel, Task> MessageUpdated Event Type Func<Cacheable<IMessage, Guid>, Cacheable<IMessage, Guid>, SocketTextChannel, Task> Remarks This event is fired when a message is updated. The event handler must return a Task and accept a Cacheable<TEntity, TId>, a Cacheable<TEntity, TId>, and SocketTextChannel as its parameters. important It is not possible to retrieve the message via DownloadAsync(); the original message cannot be retrieved by Kook after the message has been updated. If caching is enabled via KookSocketConfig, the Cacheable<TEntity, TId> entity will contain the original message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the Guid. If caching is enabled via KookSocketConfig, the Cacheable<TEntity, TId> entity will contain the updated message; otherwise, in event that the entire message entity cannot be retrieved, the ID of the message is preserved in the Guid. The source channel of the updated message will be passed into the SocketTextChannel parameter. ReactionAdded Fired when a reaction is added to a channel message. public event Func<Cacheable<IMessage, Guid>, SocketTextChannel, Cacheable<SocketGuildUser, ulong>, SocketReaction, Task> ReactionAdded Event Type Func<Cacheable<IMessage, Guid>, SocketTextChannel, Cacheable<SocketGuildUser, ulong>, SocketReaction, Task> Remarks This event is fired when a reaction is added to a message in a channel. The event handler must return a Task and accept a Cacheable<TEntity, TId>, an SocketTextChannel, a Cacheable<TEntity, TId>, and a SocketReaction as its parameter. If caching is enabled via KookSocketConfig, the Cacheable<TEntity, TId> entity will contain the original message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the Guid The source channel of the reaction addition will be passed into the SocketTextChannel parameter. The user who added the reaction will be passed into the Cacheable<TEntity, TId>. The reaction that was added will be passed into the SocketReaction parameter. note When fetching the reaction from this event, a user may not be provided under User. Please see the documentation of the property for more information. ReactionRemoved Fired when a reaction is removed from a message. public event Func<Cacheable<IMessage, Guid>, SocketTextChannel, Cacheable<SocketGuildUser, ulong>, SocketReaction, Task> ReactionRemoved Event Type Func<Cacheable<IMessage, Guid>, SocketTextChannel, Cacheable<SocketGuildUser, ulong>, SocketReaction, Task> Remarks This event is fired when a reaction is removed from a message in a channel. The event handler must return a Task and accept a Cacheable<TEntity, TId>, an SocketTextChannel, a Cacheable<TEntity, TId>, and a SocketReaction as its parameter. If caching is enabled via KookSocketConfig, the Cacheable<TEntity, TId> entity will contain the original message; otherwise, in event that the message cannot be retrieved, the ID of the message is preserved in the Guid The source channel of the reaction addition will be passed into the SocketTextChannel parameter. The user who removed the reaction will be passed into the Cacheable<TEntity, TId>. The reaction that was removed will be passed into the SocketReaction parameter. note When fetching the reaction from this event, a user may not be provided under User. Please see the documentation of the property for more information. RoleCreated Fired when a role is created. public event Func<SocketRole, Task> RoleCreated Event Type Func<SocketRole, Task> Remarks This event is fired when a role is created. The event handler must return a Task and accept a SocketRole as its parameter. The role that is created is passed into the event handler parameter as SocketRole. RoleDeleted Fired when a role is deleted. public event Func<SocketRole, Task> RoleDeleted Event Type Func<SocketRole, Task> Remarks This event is fired when a role is deleted. The event handler must return a Task and accept a SocketRole as its parameter. The role that is deleted is passed into the event handler parameter as SocketRole. RoleUpdated Fired when a role is updated. public event Func<SocketRole, SocketRole, Task> RoleUpdated Event Type Func<SocketRole, SocketRole, Task> Remarks This event is fired when a role is deleted. The event handler must return a Task and accept a SocketRole and a SocketRole as its parameter. The original role entity is passed into the event handler parameter as SocketRole. The updated role entity is passed into the event handler parameter as SocketRole. UserBanned Fired when a user is banned from a guild. public event Func<IReadOnlyCollection<Cacheable<SocketUser, ulong>>, Cacheable<SocketGuildUser, ulong>, SocketGuild, string?, Task> UserBanned Event Type Func<IReadOnlyCollection<Cacheable<SocketUser, ulong>>, Cacheable<SocketGuildUser, ulong>, SocketGuild, string, Task> Remarks This event is fired when a user is banned. The event handler must return a Task and accept an IReadOnlyCollection<T>, a SocketMessage, a string and a SocketGuild as its parameter. important It is not possible to retrieve the user via DownloadAsync(); the original user cannot be retrieved by Kook after the user has been banned. The users that are banned are passed into the event handler parameter as IReadOnlyCollection<T>, where T is Cacheable<TEntity, TId>, each of which contains a SocketUser when the user presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user is preserved in the ulong. The users who operated the bans is passed into the event handler parameter as Cacheable<TEntity, TId>, which contains a SocketGuildUser when the user presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user is preserved in the ulong. The guild where the banning action takes place is passed in the event handler parameter as SocketGuild. The reason of the ban is passed into the event handler parameter as string. UserConnected Fired when a user connected to a voice channel. public event Func<Cacheable<SocketGuildUser, ulong>, SocketVoiceChannel, DateTimeOffset, Task> UserConnected Event Type Func<Cacheable<SocketGuildUser, ulong>, SocketVoiceChannel, DateTimeOffset, Task> Remarks This event is fired when a user connected to a voice channel. The event handler must return a Task and accept a Cacheable<TEntity, TId>, a SocketVoiceChannel, a SocketGuild, and a DateTimeOffset as its parameter. The user that connected to a voice channel is passed into the event handler parameter as Cacheable<TEntity, TId>, which contains the original SocketGuildUser when the user presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user is preserved in the ulong. The voice channel that the user connected to is passed into the event handler parameter as SocketVoiceChannel. The time when the user is offline is passed into the event handler parameter as DateTimeOffset. UserDisconnected Fired when a user disconnected to a voice channel. public event Func<Cacheable<SocketGuildUser, ulong>, SocketVoiceChannel, DateTimeOffset, Task> UserDisconnected Event Type Func<Cacheable<SocketGuildUser, ulong>, SocketVoiceChannel, DateTimeOffset, Task> Remarks This event is fired when a user disconnected to a voice channel. The event handler must return a Task and accept a Cacheable<TEntity, TId>, a SocketVoiceChannel, a SocketGuild, and a DateTimeOffset as its parameter. The user that disconnected to a voice channel is passed into the event handler parameter as Cacheable<TEntity, TId>, which contains the original SocketGuildUser when the user presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user is preserved in the ulong. The voice channel that the user disconnected to is passed into the event handler parameter as SocketVoiceChannel. The time when the user is offline is passed into the event handler parameter as DateTimeOffset. UserJoined Fired when a user joins a guild. public event Func<Cacheable<SocketGuildUser, ulong>, DateTimeOffset, Task> UserJoined Event Type Func<Cacheable<SocketGuildUser, ulong>, DateTimeOffset, Task> Remarks warning It is reported that this event will not be fired if a guild contains more than 2000 members. This event is fired when a user joins a guild. The event handler must return a Task and accept a SocketGuildUser and a DateTimeOffset as its parameters. The joined user will be passed into the SocketGuildUser parameter. The time at which the user joined the guild will be passed into the DateTimeOffset parameter. UserLeft Fired when a user leaves a guild. public event Func<SocketGuild, Cacheable<SocketUser, ulong>, DateTimeOffset, Task> UserLeft Event Type Func<SocketGuild, Cacheable<SocketUser, ulong>, DateTimeOffset, Task> Remarks warning It is reported that this event will not be fired if a guild contains more than 2000 members. This event is fired when a user leaves a guild. The event handler must return a Task and accept a SocketGuildUser and a DateTimeOffset as its parameters. If the left user presents in the cache, the Cacheable<TEntity, TId> entity will contain the left user; otherwise, in event that the user cannot be retrieved, the ID of the left user is preserved in the ulong. The time at which the user left the guild will be passed into the DateTimeOffset parameter. UserUnbanned Fired when a user is unbanned from a guild. public event Func<IReadOnlyCollection<Cacheable<SocketUser, ulong>>, Cacheable<SocketGuildUser, ulong>, SocketGuild, Task> UserUnbanned Event Type Func<IReadOnlyCollection<Cacheable<SocketUser, ulong>>, Cacheable<SocketGuildUser, ulong>, SocketGuild, Task> Remarks This event is fired when a user is unbanned. The event handler must return a Task and accept an IReadOnlyCollection<T>, a SocketMessage and a SocketGuild as its parameter. important It is not possible to retrieve the user via DownloadAsync(); the original user cannot be retrieved by Kook after the user has been unbanned. The users that are unbanned are passed into the event handler parameter as IReadOnlyCollection<T>, where T is Cacheable<TEntity, TId>, each of which contains a SocketUser when the user presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user is preserved in the ulong. The users who operated the unbans is passed into the event handler parameter as Cacheable<TEntity, TId>, which contains a SocketGuildUser when the user presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user is preserved in the ulong. The guild where the unbanning action takes place is passed in the event handler parameter as SocketGuild. UserUpdated Fired when a user is updated. public event Func<Cacheable<SocketUser, ulong>, Cacheable<SocketUser, ulong>, Task> UserUpdated Event Type Func<Cacheable<SocketUser, ulong>, Cacheable<SocketUser, ulong>, Task> Remarks This event is fired when a user is updated. The event handler must return a Task and accept a Cacheable<TEntity, TId>, and a Cacheable<TEntity, TId> as its parameter. important It is not possible to retrieve the user via DownloadAsync(); the original user cannot be retrieved by Kook after the user has been updated. The user that is updated is passed into the event handler parameter as Cacheable<TEntity, TId>, which contains the original SocketUser when the user presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user is preserved in the ulong. The user that is updated is passed into the event handler parameter as Cacheable<TEntity, TId>, which contains a SocketUser when the user presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user is preserved in the ulong. UserVoiceStateUpdated Fired when a user's voice state is updated. public event Func<Cacheable<SocketGuildUser, ulong>, SocketVoiceState, SocketVoiceState, Task> UserVoiceStateUpdated Event Type Func<Cacheable<SocketGuildUser, ulong>, SocketVoiceState, SocketVoiceState, Task> A Task representing the result of the asynchronous operation. The task result contains the updated SocketGuildUser, the previous SocketVoiceState, and the current SocketVoiceState."
  },
  "api/Kook.WebSocket.BaseSocketClientExperimentalExtensions.html": {
    "href": "api/Kook.WebSocket.BaseSocketClientExperimentalExtensions.html",
    "title": "Class BaseSocketClientExperimentalExtensions | Kook.Net 文档",
    "keywords": "Class BaseSocketClientExperimentalExtensions Namespace Kook.WebSocket Assembly Kook.Net.Experimental.dll Provides extension methods of experimental functionalities for BaseSocketClients. public static class BaseSocketClientExperimentalExtensions Inheritance object BaseSocketClientExperimentalExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateGuildAsync(BaseSocketClient, string, IVoiceRegion?, Stream?, int?, RequestOptions?) Creates a guild for the logged-in user. public static Task<RestGuild> CreateGuildAsync(this BaseSocketClient client, string name, IVoiceRegion? region = null, Stream? icon = null, int? templateId = null, RequestOptions? options = null) Parameters client BaseSocketClient The KOOK rest client instance. name string The name of the new guild. region IVoiceRegion The voice region to create the guild with. icon Stream The icon of the new guild. templateId int? The identifier of the guild template to be used to create the new guild. options RequestOptions The options to be used when sending the request. Returns Task<RestGuild> A task that represents the asynchronous creation operation. The task result contains the created guild. Remarks This method creates a new guild on behalf of the logged-in user. warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable,and may be changed or removed in the future."
  },
  "api/Kook.WebSocket.GatewayReconnectException.html": {
    "href": "api/Kook.WebSocket.GatewayReconnectException.html",
    "title": "Class GatewayReconnectException | Kook.Net 文档",
    "keywords": "Class GatewayReconnectException Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll The exception thrown when the gateway client has been requested to reconnect. public class GatewayReconnectException : Exception, ISerializable Inheritance object Exception GatewayReconnectException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors GatewayReconnectException(string) Initializes a new instance of the GatewayReconnectException class with the reconnection message. public GatewayReconnectException(string message) Parameters message string The reason why the gateway has been requested to reconnect."
  },
  "api/Kook.WebSocket.ISocketAudioChannel.html": {
    "href": "api/Kook.WebSocket.ISocketAudioChannel.html",
    "title": "Interface ISocketAudioChannel | Kook.Net 文档",
    "keywords": "Interface ISocketAudioChannel Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a generic WebSocket-based audio channel. public interface ISocketAudioChannel : IAudioChannel, IChannel, IEntity<ulong> Inherited Members IAudioChannel.IsVoiceRegionOverwritten IAudioChannel.VoiceRegion IAudioChannel.ServerUrl IAudioChannel.ConnectAsync(bool, bool, string) IAudioChannel.DisconnectAsync() IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel)"
  },
  "api/Kook.WebSocket.ISocketMessageChannel.html": {
    "href": "api/Kook.WebSocket.ISocketMessageChannel.html",
    "title": "Interface ISocketMessageChannel | Kook.Net 文档",
    "keywords": "Interface ISocketMessageChannel Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a generic WebSocket-based channel that can send and receive messages. public interface ISocketMessageChannel : IMessageChannel, IChannel, IEntity<ulong> Inherited Members IMessageChannel.SendFileAsync(string, string, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(Stream, string, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(FileAttachment, IQuote, IUser, RequestOptions) IMessageChannel.SendTextAsync(string, IQuote, IUser, RequestOptions) IMessageChannel.SendCardAsync(ICard, IQuote, IUser, RequestOptions) IMessageChannel.SendCardsAsync(IEnumerable<ICard>, IQuote, IUser, RequestOptions) IMessageChannel.GetMessageAsync(Guid, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(Guid, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions) IMessageChannel.DeleteMessageAsync(Guid, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) IMessageChannel.ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions) IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties CachedMessages Gets all messages in this channel's cache. IReadOnlyCollection<SocketMessage> CachedMessages { get; } Property Value IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Methods GetCachedMessage(Guid) Gets a cached message from this channel. SocketMessage? GetCachedMessage(Guid id) Parameters id Guid The Guid of the message. Returns SocketMessage A WebSocket-based message object; null if it does not exist in the cache or if caching is not enabled. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return null. Please refer to MessageCacheSize for more details. This method retrieves the message from the local WebSocket cache and does not send any additional request to Kook. This message may be a message that has been deleted. GetCachedMessages(IMessage, Direction, int) Gets the last N cached messages starting from a certain message in this message channel. IReadOnlyCollection<SocketMessage> GetCachedMessages(IMessage fromMessage, Direction dir, int limit = 50) Parameters fromMessage IMessage The message to start the fetching from. dir Direction The direction of which the message should be gotten from. limit int The number of messages to get. Returns IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Kook. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetCachedMessages(Guid, Direction, int) Gets the last N cached messages starting from a certain message in this message channel. IReadOnlyCollection<SocketMessage> GetCachedMessages(Guid fromMessageId, Direction dir, int limit = 50) Parameters fromMessageId Guid The message ID to start the fetching from. dir Direction The direction of which the message should be gotten from. limit int The number of messages to get. Returns IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Kook. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetCachedMessages(int) Gets the last N cached messages from this message channel. IReadOnlyCollection<SocketMessage> GetCachedMessages(int limit = 50) Parameters limit int The number of messages to get. Returns IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Kook. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set."
  },
  "api/Kook.WebSocket.ISocketPrivateChannel.html": {
    "href": "api/Kook.WebSocket.ISocketPrivateChannel.html",
    "title": "Interface ISocketPrivateChannel | Kook.Net 文档",
    "keywords": "Interface ISocketPrivateChannel Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a generic WebSocket-based channel that is private to select recipients. public interface ISocketPrivateChannel : IPrivateChannel, IChannel, IEntity<ulong> Inherited Members IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties Recipients Gets the users that can access this channel. IReadOnlyCollection<SocketUser> Recipients { get; } Property Value IReadOnlyCollection<SocketUser> A read-only collection of users that can access this channel."
  },
  "api/Kook.WebSocket.KookSocketClient.html": {
    "href": "api/Kook.WebSocket.KookSocketClient.html",
    "title": "Class KookSocketClient | Kook.Net 文档",
    "keywords": "Class KookSocketClient Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a WebSocket-based KOOK client. public class KookSocketClient : BaseSocketClient, IKookClient, IDisposable Inheritance object BaseKookClient BaseSocketClient KookSocketClient Implements IKookClient IDisposable Derived KookWebhookClient Inherited Members BaseSocketClient.BaseConfig BaseSocketClient.CurrentUser BaseSocketClient.ChannelCreated BaseSocketClient.ChannelDestroyed BaseSocketClient.ChannelUpdated BaseSocketClient.ReactionAdded BaseSocketClient.ReactionRemoved BaseSocketClient.DirectReactionAdded BaseSocketClient.DirectReactionRemoved BaseSocketClient.MessageReceived BaseSocketClient.MessageDeleted BaseSocketClient.MessageUpdated BaseSocketClient.MessagePinned BaseSocketClient.MessageUnpinned BaseSocketClient.DirectMessageReceived BaseSocketClient.DirectMessageDeleted BaseSocketClient.DirectMessageUpdated BaseSocketClient.UserJoined BaseSocketClient.UserLeft BaseSocketClient.UserBanned BaseSocketClient.UserUnbanned BaseSocketClient.UserUpdated BaseSocketClient.CurrentUserUpdated BaseSocketClient.GuildMemberUpdated BaseSocketClient.GuildMemberOnline BaseSocketClient.GuildMemberOffline BaseSocketClient.UserVoiceStateUpdated BaseSocketClient.UserConnected BaseSocketClient.UserDisconnected BaseSocketClient.RoleCreated BaseSocketClient.RoleDeleted BaseSocketClient.RoleUpdated BaseSocketClient.EmoteCreated BaseSocketClient.EmoteDeleted BaseSocketClient.EmoteUpdated BaseSocketClient.JoinedGuild BaseSocketClient.LeftGuild BaseSocketClient.GuildUpdated BaseSocketClient.GuildAvailable BaseSocketClient.GuildUnavailable BaseSocketClient.MessageButtonClicked BaseSocketClient.DirectMessageButtonClicked BaseKookClient.Log BaseKookClient.LoggedIn BaseKookClient.LoggedOut BaseKookClient.SentRequest BaseKookClient.LoginState BaseKookClient.TokenType BaseKookClient.Dispose() BaseKookClient.LoginAsync(TokenType, string, bool) BaseKookClient.LogoutAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSocketClientExperimentalExtensions.CreateGuildAsync(BaseSocketClient, string, IVoiceRegion?, Stream?, int?, RequestOptions?) Constructors KookSocketClient() Initializes a new REST/WebSocket-based Kook client. public KookSocketClient() KookSocketClient(KookSocketConfig) Initializes a new REST/WebSocket-based Kook client with the provided configuration. public KookSocketClient(KookSocketConfig config) Parameters config KookSocketConfig The configuration to be used with the client. Properties ConnectionState Gets the current state of connection. public override ConnectionState ConnectionState { get; } Property Value ConnectionState DMChannels Gets a collection of direct message channels opened in this session. public IReadOnlyCollection<SocketDMChannel> DMChannels { get; } Property Value IReadOnlyCollection<SocketDMChannel> A collection of DM channels that have been opened in this session. Remarks This method returns a collection of currently opened direct message channels. warning This method will not return previously opened DM channels outside of the current session! If you have just started the client, this may return an empty collection. Guilds Gets a collection of guilds that the user is currently in. public override IReadOnlyCollection<SocketGuild> Guilds { get; } Property Value IReadOnlyCollection<SocketGuild> A read-only collection of guilds that the current user is in. Latency Gets the estimated round-trip latency, in milliseconds, to the gateway server. public override int Latency { get; protected set; } Property Value int An int that represents the round-trip latency to the WebSocket server. Please note that this value does not represent a \"true\" latency for operations such as sending a message. Rest Provides access to a REST-only client with a shared state from this client. public override KookSocketRestClient Rest { get; } Property Value KookSocketRestClient Methods DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>?, RequestOptions?) Downloads all boost subscriptions for the specified guilds. public override Task DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>? guilds = null, RequestOptions? options = null) Parameters guilds IEnumerable<IGuild> The guilds to download the boost subscriptions for. If null, all available guilds will be downloaded. To download all boost subscriptions, the current user must has the ManageGuild permission. options RequestOptions The options to be used when sending the request. Returns Task DownloadUsersAsync(IEnumerable<IGuild>?, RequestOptions?) Downloads all users for the specified guilds. public override Task DownloadUsersAsync(IEnumerable<IGuild>? guilds = null, RequestOptions? options = null) Parameters guilds IEnumerable<IGuild> The guilds to download the users for. If null, all available guilds will be downloaded. options RequestOptions The options to be used when sending the request. Returns Task DownloadVoiceStatesAsync(IEnumerable<IGuild>?, RequestOptions?) Downloads all voice states for the specified guilds. public override Task DownloadVoiceStatesAsync(IEnumerable<IGuild>? guilds = null, RequestOptions? options = null) Parameters guilds IEnumerable<IGuild> The guilds to download the voice states for. If null, all available guilds will be downloaded. options RequestOptions The options to be used when sending the request. Returns Task GetChannel(ulong) Gets a channel. public override SocketChannel? GetChannel(ulong id) Parameters id ulong The identifier of the channel. Returns SocketChannel A generic WebSocket-based channel object (voice, text, category, etc.) associated with the identifier; null when the channel cannot be found. GetChannelAsync(ulong, RequestOptions?) Gets a generic channel from the cache or does a rest request if unavailable. public Task<IChannel> GetChannelAsync(ulong id, RequestOptions? options = null) Parameters id ulong The identifier of the channel. options RequestOptions The options to be used when sending the request. Returns Task<IChannel> A task that represents the asynchronous get operation. The task result contains the channel associated with the identifier; null when the channel cannot be found. GetDMChannel(Guid) Gets a channel. public override SocketDMChannel? GetDMChannel(Guid chatCode) Parameters chatCode Guid The chat code of the direct-message channel. Returns SocketDMChannel A generic WebSocket-based channel object (voice, text, category, etc.) associated with the identifier; null when the channel cannot be found. GetDMChannel(ulong) Gets a channel. public override SocketDMChannel? GetDMChannel(ulong userId) Parameters userId ulong The user identifier of the direct-message channel. Returns SocketDMChannel A generic WebSocket-based channel object (voice, text, category, etc.) associated with the identifier; null when the channel cannot be found. GetDMChannelAsync(Guid, RequestOptions?) Gets a direct message channel from the cache or does a rest request if unavailable. public Task<IDMChannel> GetDMChannelAsync(Guid chatCode, RequestOptions? options = null) Parameters chatCode Guid The identifier of the channel. options RequestOptions The options to be used when sending the request. Returns Task<IDMChannel> A task that represents the asynchronous get operation. The task result contains the channel associated with the identifier; null when the channel cannot be found. GetDMChannelsAsync(RequestOptions?) Gets a collection of direct message channels from the cache or does a rest request if unavailable. public Task<IReadOnlyCollection<IDMChannel>> GetDMChannelsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IDMChannel>> A task that represents the asynchronous get operation. The task result contains the channel associated with the identifier; null when the channel cannot be found. GetGuild(ulong) Gets a guild. public override SocketGuild? GetGuild(ulong id) Parameters id ulong The guild identifier. Returns SocketGuild A WebSocket-based guild associated with the identifier; null when the guild cannot be found. GetUser(string, string) Gets a user. public override SocketUser? GetUser(string username, string identifyNumber) Parameters username string The name of the user. identifyNumber string The identify value of the user. Returns SocketUser A generic WebSocket-based user; null when the user cannot be found. Remarks This method gets the user present in the WebSocket cache with the given condition. warning Sometimes a user may return null due to Kook not sending offline users in large guilds (i.e. guild with 100+ members) actively. To download users on startup and to see more information about this subject, see AlwaysDownloadUsers. note This method does not attempt to fetch users that the logged-in user does not have access to (i.e. users who don't share mutual guild(s) with the current user). If you wish to get a user that you do not have access to, consider using the REST implementation of GetUserAsync(ulong, RequestOptions?). GetUser(ulong) Gets a generic user. public override SocketUser? GetUser(ulong id) Parameters id ulong The user ID. Returns SocketUser A generic WebSocket-based user; null when the user cannot be found. Remarks This method gets the user present in the WebSocket cache with the given condition. warning Sometimes a user may return null due to Kook not sending offline users in large guilds (i.e. guild with 100+ members) actively. To download users on startup and to see more information about this subject, see AlwaysDownloadUsers. note This method does not attempt to fetch users that the logged-in user does not have access to (i.e. users who don't share mutual guild(s) with the current user). If you wish to get a user that you do not have access to, consider using the REST implementation of GetUserAsync(ulong, RequestOptions?). GetUserAsync(ulong, RequestOptions?) Gets a user from the cache or does a rest request if unavailable. public Task<IUser> GetUserAsync(ulong id, RequestOptions? options = null) Parameters id ulong The identifier of the user (e.g. 168693960628371456). options RequestOptions The options to be used when sending the request. Returns Task<IUser> A task that represents the asynchronous get operation. The task result contains the user associated with the identifier; null if the user is not found. StartAsync() Starts the WebSocket connection. public override Task StartAsync() Returns Task A task that represents the asynchronous start operation. StopAsync() Stops the WebSocket connection. public override Task StopAsync() Returns Task A task that represents the asynchronous stop operation. Events Connected Fired when connected to the Kook gateway. public event Func<Task> Connected Event Type Func<Task> Disconnected Fired when disconnected to the Kook gateway. public event Func<Exception, Task> Disconnected Event Type Func<Exception, Task> LatencyUpdated Fired when a heartbeat is received from the Kook gateway. public event Func<int, int, Task> LatencyUpdated Event Type Func<int, int, Task> Ready Fired when guild data has finished downloading. public event Func<Task> Ready Event Type Func<Task> Remarks warning Because guilds may contain a large amount of members, this event will not wait for all users, subscriptions, and voice states to be downloaded. It will only wait for guilds, channels, roles, and emojis to be downloaded."
  },
  "api/Kook.WebSocket.KookSocketConfig.html": {
    "href": "api/Kook.WebSocket.KookSocketConfig.html",
    "title": "Class KookSocketConfig | Kook.Net 文档",
    "keywords": "Class KookSocketConfig Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a configuration class for KookSocketClient. public class KookSocketConfig : KookRestConfig Inheritance object KookConfig KookRestConfig KookSocketConfig Derived KookWebhookConfig Inherited Members KookRestConfig.RestClientProvider KookConfig.APIVersion KookConfig.VoiceAPIVersion KookConfig.Version KookConfig.UserAgent KookConfig.AcceptLanguage KookConfig.APIUrl KookConfig.DefaultRequestTimeout KookConfig.MaxMessageSize KookConfig.MaxUsersPerBatch KookConfig.MaxMessagesPerBatch KookConfig.MaxItemsPerBatchByDefault KookConfig.MinNicknameSize KookConfig.MaxNicknameSize KookConfig.MinIntimacyScore KookConfig.MaxIntimacyScore KookConfig.BoostPackDuration KookConfig.DefaultRetryMode KookConfig.DefaultRatelimitCallback KookConfig.LogLevel KookConfig.FormatUsersInBidirectionalUnicode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples The following config enables the message cache and configures the client to always download user upon guild availability. var config = new KookSocketConfig { AlwaysDownloadUsers = true, MessageCacheSize = 100 }; var client = new KookSocketClient(config); Remarks This configuration, based on KookRestConfig, helps determine several key configurations the socket client depend on. For instance, message cache and connection timeout. Constructors KookSocketConfig() Initializes a new instance of the KookSocketConfig class. public KookSocketConfig() Fields GatewayEncoding Returns the encoding gateway should use. public const string GatewayEncoding = \"json\" Field Value string RtcpIntervalMilliseconds Gets the RTCP interval of RTP connection in milliseconds. public const int RtcpIntervalMilliseconds = 5000 Field Value int Properties AlwaysDownloadBoostSubscriptions Gets or sets whether or not all boost subscriptions should be downloaded as guilds come available. public bool AlwaysDownloadBoostSubscriptions { get; set; } Property Value bool Remarks note Setting this property to true will cause the client to download all boost subscriptions for all guilds upon startup and when GuildUpdated is triggered with changes occurring to BoostSubscriptionCount. Please note that it can be difficult to fill the cache completely on large guilds depending on the traffic. If you are experiencing issues, try setting this to false and manually call DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>?, RequestOptions?) on the guilds you want. AlwaysDownloadUsers Gets or sets whether or not all users should be downloaded as guilds come available. public bool AlwaysDownloadUsers { get; set; } Property Value bool Remarks note Setting this property to true will cause the client to download all users for all guilds upon startup. Please note that it can be difficult to fill the cache completely on large guilds depending on the traffic. If you are experiencing issues, try setting this to false and manually call DownloadUsersAsync(IEnumerable<IGuild>?, RequestOptions?) on the guilds you want. AlwaysDownloadVoiceStates Gets or sets whether or not all voice states should be downloaded as guilds come available. public bool AlwaysDownloadVoiceStates { get; set; } Property Value bool Remarks note Setting this property to true will cause the client to download all voice states for all guilds upon startup. Please note that it can be difficult to fill the cache completely on large guilds depending on the traffic. If you are experiencing issues, try setting this to false and manually call DownloadVoiceStatesAsync(IEnumerable<IGuild>?, RequestOptions?) on the guilds you want. AudioClientIdleTimeout Gets or sets the timeout for the audio client to be considered idle, in milliseconds. public int AudioClientIdleTimeout { get; set; } Property Value int AutoUpdateChannelPositions Gets or sets whether to update guild channels via API when gateway publishes sort_channel events. public bool AutoUpdateChannelPositions { get; set; } Property Value bool AutoUpdateRolePositions Gets or sets whether to update guild role positions via API when GuildUpdated fires. public bool AutoUpdateRolePositions { get; set; } Property Value bool ConnectionTimeout Gets or sets the time, in milliseconds, to wait for a connection to complete before aborting. public int ConnectionTimeout { get; set; } Property Value int GatewayHost Gets or sets the WebSocket host to connect to. If null, the client will use the /gateway endpoint. public string? GatewayHost { get; set; } Property Value string HandlerTimeout Gets or sets the timeout for event handlers, in milliseconds, after which a warning will be logged. Setting this property to nulldisables this check. public int? HandlerTimeout { get; set; } Property Value int? HeartbeatIntervalMilliseconds Gets the heartbeat interval of WebSocket connection in milliseconds. public int HeartbeatIntervalMilliseconds { get; } Property Value int JoinedGuildDataFetchingRetryDelay Gets or sets the delay in milliseconds between each retry of fetching joined guild data. public int JoinedGuildDataFetchingRetryDelay { get; set; } Property Value int Exceptions ArgumentException Value must be at least 0. LargeNumberOfGuildsThreshold Get or set the threshold quantity considered as joining a large number of guilds. public uint LargeNumberOfGuildsThreshold { get; set; } Property Value uint MaxJoinedGuildDataFetchingRetryTimes Gets or sets the maximum number of times to retry fetching joined guild data. public int MaxJoinedGuildDataFetchingRetryTimes { get; set; } Property Value int Remarks Due to the KOOK API cannot return the newly joined guilds immediately well, this property is used to control the maximum number of times to retry fetching joined guild data. Each retry will be delayed by JoinedGuildDataFetchingRetryDelay milliseconds. Set to 0 or negative value to disable retrying. MessageCacheSize Gets or sets the number of messages per channel that should be kept in cache. Setting this to zero disables the message cache entirely. public int MessageCacheSize { get; set; } Property Value int MessageQueueProvider Gets or sets the provider used to generate new message queues. public MessageQueueProvider MessageQueueProvider { get; set; } Property Value MessageQueueProvider SmallNumberOfGuildsThreshold Gets or sets the threshold quantity considered as joining a small number of guilds. public uint SmallNumberOfGuildsThreshold { get; set; } Property Value uint StartupCacheFetchMode Gets or sets the startup mode of the socket client. public StartupCacheFetchMode StartupCacheFetchMode { get; set; } Property Value StartupCacheFetchMode UdpSocketProvider Gets or sets the provider used to generate new UDP sockets. public UdpSocketProvider UdpSocketProvider { get; set; } Property Value UdpSocketProvider WebSocketProvider Gets or sets the provider used to generate new WebSocket connections. public WebSocketProvider WebSocketProvider { get; set; } Property Value WebSocketProvider"
  },
  "api/Kook.WebSocket.KookSocketRestClient.html": {
    "href": "api/Kook.WebSocket.KookSocketRestClient.html",
    "title": "Class KookSocketRestClient | Kook.Net 文档",
    "keywords": "Class KookSocketRestClient Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents an REST-only client that is used in a WebSocket-based client. public class KookSocketRestClient : KookRestClient, IKookClient, IDisposable Inheritance object BaseKookClient KookRestClient KookSocketRestClient Implements IKookClient IDisposable Inherited Members KookRestClient.CurrentUser KookRestClient.GetGuildAsync(ulong, RequestOptions) KookRestClient.GetGuildsAsync(RequestOptions) KookRestClient.GetChannelAsync(ulong, RequestOptions) KookRestClient.GetDMChannelAsync(Guid, RequestOptions) KookRestClient.GetDMChannelsAsync(RequestOptions) KookRestClient.AddRoleAsync(ulong, ulong, uint) KookRestClient.RemoveRoleAsync(ulong, ulong, uint) KookRestClient.GetUserAsync(ulong, RequestOptions) KookRestClient.GetGuildUserAsync(ulong, ulong, RequestOptions) KookRestClient.GetFriendsAsync(RequestOptions) KookRestClient.GetFriendRequestsAsync(RequestOptions) KookRestClient.GetBlockedUsersAsync(RequestOptions) KookRestClient.AddReactionAsync(Guid, IEmote, RequestOptions) KookRestClient.RemoveReactionAsync(Guid, ulong, IEmote, RequestOptions) KookRestClient.AddDirectMessageReactionAsync(Guid, IEmote, RequestOptions) KookRestClient.RemoveDirectMessageReactionAsync(Guid, ulong, IEmote, RequestOptions) KookRestClient.CreateAssetAsync(string, string, RequestOptions) KookRestClient.CreateAssetAsync(Stream, string, RequestOptions) KookRestClient.GetGamesAsync(GameCreationSource?, RequestOptions) KookRestClient.CreateGameAsync(string, string, string, RequestOptions) BaseKookClient.Log BaseKookClient.LoggedIn BaseKookClient.LoggedOut BaseKookClient.SentRequest BaseKookClient.LoginState BaseKookClient.TokenType BaseKookClient.Dispose() BaseKookClient.ConnectionState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods KookRestClientExperimentalExtensions.CreateGuildAsync(KookRestClient, string, IVoiceRegion?, Stream?, int?, RequestOptions?) KookRestClientExperimentalExtensions.GetAdminGuildsAsync(KookRestClient, RequestOptions?) KookRestClientExperimentalExtensions.GetVoiceRegionAsync(KookRestClient, string, RequestOptions?) KookRestClientExperimentalExtensions.GetVoiceRegionsAsync(KookRestClient, RequestOptions?) KookRestClientExperimentalExtensions.ValidateCardAsync(KookRestClient, ICard, RequestOptions?) KookRestClientExperimentalExtensions.ValidateCardsAsync(KookRestClient, IEnumerable<ICard>, RequestOptions?) KookRestClientExperimentalExtensions.ValidateCardsAsync(KookRestClient, string, RequestOptions?) Methods LoginAsync(TokenType, string, bool) Throws a NotSupportedException when trying to log in. public Task LoginAsync(TokenType tokenType, string token, bool validateToken = true) Parameters tokenType TokenType token string validateToken bool Returns Task Exceptions NotSupportedException The Socket REST wrapper cannot be used to log in or out. LogoutAsync() Throws a NotSupportedException when trying to log out. public Task LogoutAsync() Returns Task Exceptions NotSupportedException The Socket REST wrapper cannot be used to log in or out."
  },
  "api/Kook.WebSocket.LiveStreamStatus.html": {
    "href": "api/Kook.WebSocket.LiveStreamStatus.html",
    "title": "Struct LiveStreamStatus | Kook.Net 文档",
    "keywords": "Struct LiveStreamStatus Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents the status of a live stream. public struct LiveStreamStatus Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors LiveStreamStatus() Initializes a new instance of the LiveStreamStatus structure. public LiveStreamStatus() Properties AudienceCount Gets the number of audience members. public readonly int AudienceCount { get; } Property Value int AudienceLimit Gets the maximum number of audience members. public readonly int AudienceLimit { get; } Property Value int Color Gets the color of the live stream. public readonly AlphaColor Color { get; } Property Value AlphaColor CoverThumbnail Gets the thumbnail of the live stream. public readonly string? CoverThumbnail { get; } Property Value string FrameRate Gets the frame rate of the live stream. public readonly int? FrameRate { get; } Property Value int? Image Gets the image URL of the live stream. public readonly string Image { get; } Property Value string IsLive Gets whether the stream is live. public readonly bool IsLive { get; } Property Value bool Mode Gets the mode of the live stream. public readonly int Mode { get; } Property Value int Resolution Gets the resolution of the live stream. public readonly int? Resolution { get; } Property Value int? StartTime Gets the start time of the live stream. public readonly DateTimeOffset? StartTime { get; } Property Value DateTimeOffset? Tag Gets the tag of the live stream. public readonly string Tag { get; } Property Value string VoiceChannel Gets the voice channel that the user is currently in; or null if none. public readonly SocketVoiceChannel? VoiceChannel { get; } Property Value SocketVoiceChannel"
  },
  "api/Kook.WebSocket.SocketCategoryChannel.html": {
    "href": "api/Kook.WebSocket.SocketCategoryChannel.html",
    "title": "Class SocketCategoryChannel | Kook.Net 文档",
    "keywords": "Class SocketCategoryChannel Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a WebSocket-based category channel. public class SocketCategoryChannel : SocketGuildChannel, IUpdateable, ICategoryChannel, IGuildChannel, IChannel, IEntity<ulong>, IDeletable Inheritance object SocketEntity<ulong> SocketChannel SocketGuildChannel SocketCategoryChannel Implements IUpdateable ICategoryChannel IGuildChannel IChannel IEntity<ulong> IDeletable Inherited Members SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Position SocketGuildChannel.Type SocketGuildChannel.CreatorId SocketGuildChannel.Creator SocketGuildChannel.RolePermissionOverwrites SocketGuildChannel.UserPermissionOverwrites SocketGuildChannel.UpdateAsync(RequestOptions) SocketGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) SocketGuildChannel.DeleteAsync(RequestOptions) SocketGuildChannel.GetPermissionOverwrite(IUser) SocketGuildChannel.GetPermissionOverwrite(IRole) SocketGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) SocketGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) SocketGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) SocketGuildChannel.ToString() SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties Channels Gets the child channels of this category. public IReadOnlyCollection<SocketGuildChannel> Channels { get; } Property Value IReadOnlyCollection<SocketGuildChannel> A read-only collection of SocketGuildChannel whose CategoryId matches the identifier of this category channel. Users Gets a collection of users that are able to view the channel. public override IReadOnlyCollection<SocketGuildUser> Users { get; } Property Value IReadOnlyCollection<SocketGuildUser> A read-only collection of users that can access the channel (i.e. the users seen in the user list). Methods GetUser(ulong) Gets a SocketGuildUser from this channel. public override SocketGuildUser? GetUser(ulong id) Parameters id ulong The user's identifier. Returns SocketGuildUser A SocketGuildUser with the provided identifier; null if none is found."
  },
  "api/Kook.WebSocket.SocketChannel.html": {
    "href": "api/Kook.WebSocket.SocketChannel.html",
    "title": "Class SocketChannel | Kook.Net 文档",
    "keywords": "Class SocketChannel Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a WebSocket-based channel. public abstract class SocketChannel : SocketEntity<ulong>, IChannel, IEntity<ulong>, IUpdateable Inheritance object SocketEntity<ulong> SocketChannel Implements IChannel IEntity<ulong> IUpdateable Derived SocketDMChannel SocketGuildChannel Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties Users Gets a collection of users from the WebSocket cache. public IReadOnlyCollection<SocketUser> Users { get; } Property Value IReadOnlyCollection<SocketUser> Methods GetUser(ulong) Gets a generic user from this channel. public SocketUser? GetUser(ulong id) Parameters id ulong The identifier of the user. Returns SocketUser A generic WebSocket-based user associated with the identifier. UpdateAsync(RequestOptions?) Updates this object's properties with its current state. public abstract Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents an asynchronous reloading operation. Remarks warning This method will fetch the latest data from REST API, and replace the current object's properties with the new data."
  },
  "api/Kook.WebSocket.SocketDMChannel.html": {
    "href": "api/Kook.WebSocket.SocketDMChannel.html",
    "title": "Class SocketDMChannel | Kook.Net 文档",
    "keywords": "Class SocketDMChannel Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a WebSocket-based direct-message channel. public class SocketDMChannel : SocketChannel, IUpdateable, IDMChannel, IEntity<Guid>, ISocketPrivateChannel, IPrivateChannel, ISocketMessageChannel, IMessageChannel, IChannel, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketChannel SocketDMChannel Implements IUpdateable IDMChannel IEntity<Guid> ISocketPrivateChannel IPrivateChannel ISocketMessageChannel IMessageChannel IChannel IEntity<ulong> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties CachedMessages Gets all messages in this channel's cache. public IReadOnlyCollection<SocketMessage> CachedMessages { get; } Property Value IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. ChatCode Gets the chat code of the direct-message channel. public Guid ChatCode { get; } Property Value Guid A Guid that represents the chat code of the direct-message channel. Remarks This property is the same as Id. Id Get the identifier of the DM channel. public Guid Id { get; } Property Value Guid Remarks This property is the same as ChatCode. Recipient Gets the recipient of the channel. public SocketUser Recipient { get; } Property Value SocketUser Users Gets a collection that is the current logged-in user and the recipient. public IReadOnlyCollection<SocketUser> Users { get; } Property Value IReadOnlyCollection<SocketUser> Methods CloseAsync(RequestOptions?) Closes this private channel, removing it from your channel list. public Task CloseAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous close operation. DeleteMessageAsync(IMessage, RequestOptions?) Deletes a message based on the provided message in this channel. public Task DeleteMessageAsync(IMessage message, RequestOptions? options = null) Parameters message IMessage The message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DeleteMessageAsync(Guid, RequestOptions?) Deletes a message. public Task DeleteMessageAsync(Guid messageId, RequestOptions? options = null) Parameters messageId Guid The identifier of the message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. GetCachedMessage(Guid) Gets a cached message from this channel. public SocketMessage? GetCachedMessage(Guid id) Parameters id Guid The Guid of the message. Returns SocketMessage A WebSocket-based message object; null if it does not exist in the cache or if caching is not enabled. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return null. Please refer to MessageCacheSize for more details. This method retrieves the message from the local WebSocket cache and does not send any additional request to Kook. This message may be a message that has been deleted. GetCachedMessages(IMessage, Direction, int) Gets the last N cached messages starting from a certain message in this message channel. public IReadOnlyCollection<SocketMessage> GetCachedMessages(IMessage fromMessage, Direction dir, int limit = 50) Parameters fromMessage IMessage The message to start the fetching from. dir Direction The direction of which the message should be gotten from. limit int The number of messages to get. Returns IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Kook. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetCachedMessages(Guid, Direction, int) Gets the last N cached messages starting from a certain message in this message channel. public IReadOnlyCollection<SocketMessage> GetCachedMessages(Guid fromMessageId, Direction dir, int limit = 50) Parameters fromMessageId Guid The message ID to start the fetching from. dir Direction The direction of which the message should be gotten from. limit int The number of messages to get. Returns IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Kook. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetCachedMessages(int) Gets the last N cached messages from this message channel. public IReadOnlyCollection<SocketMessage> GetCachedMessages(int limit = 50) Parameters limit int The number of messages to get. Returns IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Kook. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetMessageAsync(Guid, RequestOptions?) Gets the message associated with the given id. public Task<IMessage> GetMessageAsync(Guid id, RequestOptions? options = null) Parameters id Guid TThe ID of the message. options RequestOptions The options to be used when sending the request. Returns Task<IMessage> The message gotten from either the cache or the download, or null if none is found. GetMessagesAsync(IMessage, Direction, int, RequestOptions?) Gets a collection of messages in this channel. public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessage IMessage The starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. GetMessagesAsync(Guid, Direction, int, RequestOptions?) Gets a collection of messages in this channel. public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessageId Guid The ID of the starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(Guid, Direction, int, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. GetMessagesAsync(int, RequestOptions?) Gets the last N messages from this message channel. public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(int limit = 50, RequestOptions? options = null) Parameters limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(int, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. GetUser(ulong) Gets a user in this channel from the provided id. public SocketUser? GetUser(ulong id) Parameters id ulong The identifier of the user. Returns SocketUser A SocketUser object that is a recipient of this channel; otherwise null. ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions?) Modifies a message. public Task ModifyMessageAsync(Guid messageId, Action<MessageProperties> func, RequestOptions? options = null) Parameters messageId Guid The identifier of the message that would be changed. func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties. SendCardAsync(ICard, IQuote?, RequestOptions?) Sends a card message to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendCardAsync(ICard card, IQuote? quote = null, RequestOptions? options = null) Parameters card ICard The card to be sent. quote IQuote The message quote to be included. Used to reply to specific messages. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendCardsAsync(IEnumerable<ICard>, IQuote?, RequestOptions?) Sends a card message to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(IEnumerable<ICard> cards, IQuote? quote = null, RequestOptions? options = null) Parameters cards IEnumerable<ICard> The cards to be sent. quote IQuote The message quote to be included. Used to reply to specific messages. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendFileAsync(FileAttachment, IQuote?, RequestOptions?) Sends a file to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(FileAttachment attachment, IQuote? quote = null, RequestOptions? options = null) Parameters attachment FileAttachment The attachment containing the file. quote IQuote The message quote to be included. Used to reply to specific messages. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendFileAsync(Stream, string, AttachmentType, IQuote?, RequestOptions?) Sends a file to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(Stream stream, string filename, AttachmentType type = AttachmentType.File, IQuote? quote = null, RequestOptions? options = null) Parameters stream Stream The stream of the file. filename string The name of the file. type AttachmentType The type of the file. quote IQuote The message quote to be included. Used to reply to specific messages. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendFileAsync(string, string?, AttachmentType, IQuote?, RequestOptions?) Sends a file to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(string path, string? filename = null, AttachmentType type = AttachmentType.File, IQuote? quote = null, RequestOptions? options = null) Parameters path string The file path of the file. filename string The name of the file. type AttachmentType The type of the file. quote IQuote The message quote to be included. Used to reply to specific messages. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendTextAsync(string, IQuote?, RequestOptions?) Sends a text message to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendTextAsync(string text, IQuote? quote = null, RequestOptions? options = null) Parameters text string The message to be sent. quote IQuote The message quote to be included. Used to reply to specific messages. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. ToString() Returns the recipient user. public override string ToString() Returns string UpdateAsync(RequestOptions?) Updates this object's properties with its current state. public override Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents an asynchronous reloading operation. Remarks warning This method will fetch the latest data from REST API, and replace the current object's properties with the new data."
  },
  "api/Kook.WebSocket.SocketEntity-1.html": {
    "href": "api/Kook.WebSocket.SocketEntity-1.html",
    "title": "Class SocketEntity<T> | Kook.Net 文档",
    "keywords": "Class SocketEntity<T> Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a WebSocket-based entity. public abstract class SocketEntity<T> : IEntity<T> where T : IEquatable<T> Type Parameters T The type of the entity's identifier. Inheritance object SocketEntity<T> Implements IEntity<T> Derived SocketChannel SocketGuild SocketInvite SocketMessage SocketRole SocketUser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id Gets the unique identifier for this object. public T Id { get; } Property Value T"
  },
  "api/Kook.WebSocket.SocketGuild.html": {
    "href": "api/Kook.WebSocket.SocketGuild.html",
    "title": "Class SocketGuild | Kook.Net 文档",
    "keywords": "Class SocketGuild Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a WebSocket-based guild object. public class SocketGuild : SocketEntity<ulong>, IGuild, IEntity<ulong>, IDisposable, IUpdateable Inheritance object SocketEntity<ulong> SocketGuild Implements IGuild IEntity<ulong> IDisposable IUpdateable Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods SocketGuildExperimentalExtensions.DeleteAsync(SocketGuild, RequestOptions?) SocketGuildExperimentalExtensions.ModifyAsync(SocketGuild, Action<GuildProperties>, RequestOptions?) Properties AudioClient Gets the IAudioClient associated with this guild. [Obsolete(\"Use AudioClients instead.\")] public IAudioClient? AudioClient { get; } Property Value IAudioClient AudioClients Gets a collection of all audio clients in this guild. public IReadOnlyDictionary<ulong, IAudioClient> AudioClients { get; } Property Value IReadOnlyDictionary<ulong, IAudioClient> AutoDeleteTime TODO: To be documented. public string? AutoDeleteTime { get; } Property Value string Banner Gets the URL of this guild's banner image. public string Banner { get; } Property Value string A URL pointing to the guild's banner image; null if none is set. BoostLevel Gets the level of guild boosting in this guild. public BoostLevel BoostLevel { get; } Property Value BoostLevel The level of guild boosting in this guild. BoostSubscriptionCount Gets the number of boost subscribers of this guild. public int BoostSubscriptionCount { get; } Property Value int The number of boost subscribers of this guild. BoostSubscriptions Gets a dictionary of all boost subscriptions for this guild. public ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>> BoostSubscriptions { get; } Property Value ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>> A read-only dictionary containing all boost subscription metadata for this guild grouped by users; or null if the boost subscription data has never been cached. Remarks warning Only when AlwaysDownloadBoostSubscriptions is set to true will this property be populated upon startup. Due to the lack of event support for boost subscriptions, this property will never be updated. The changes of BoostSubscriptionCount will trigger the update of this property, but KOOK gateway will not publish this event resulting from the changes of total boost subscription count. To fetch the latest boost subscription data, use DownloadBoostSubscriptionsAsync(RequestOptions?) or DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>?, RequestOptions?) upon a KookSocketClient to manually download the latest boost subscription data, or GetBoostSubscriptionsAsync(RequestOptions?). See Also ValidBoostSubscriptions DownloadBoostSubscriptionsAsync(RequestOptions?) DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>, RequestOptions) BufferBoostSubscriptionCount Gets the number of boost subscribers who activates buffer of this guild. public int BufferBoostSubscriptionCount { get; } Property Value int The number of boost subscribers who activates buffer of this guild. CategoryChannels Gets a collection of all stage channels in this guild. public IReadOnlyCollection<SocketCategoryChannel> CategoryChannels { get; } Property Value IReadOnlyCollection<SocketCategoryChannel> A read-only collection of stage channels found within this guild. Channels Gets a collection of all channels in this guild. public IReadOnlyCollection<SocketGuildChannel> Channels { get; } Property Value IReadOnlyCollection<SocketGuildChannel> A read-only collection of generic channels found within this guild. CurrentUser Gets the current logged-in user. public SocketGuildUser? CurrentUser { get; } Property Value SocketGuildUser DefaultChannel Gets the default text channel for this guild. public SocketTextChannel? DefaultChannel { get; } Property Value SocketTextChannel A SocketTextChannel representing the default text channel for this guild. Remarks This property retrieves default text channel for this guild. DefaultChannelId Gets the default channel ID for this guild. public ulong? DefaultChannelId { get; } Property Value ulong? A ulong representing the default channel ID for this guild. DownloadedMemberCount Gets the number of members downloaded to the local guild cache. public int DownloadedMemberCount { get; } Property Value int Emotes Gets a collection of all custom emotes for this guild. public IReadOnlyCollection<GuildEmote> Emotes { get; } Property Value IReadOnlyCollection<GuildEmote> A read-only collection of all custom emotes for this guild. See Also GetEmotesAsync(RequestOptions) EveryoneRole Gets the built-in role containing all users in this guild. public SocketRole EveryoneRole { get; } Property Value SocketRole A role object that represents an @everyone role in this guild. Features Gets the features of this guild. public GuildFeatures Features { get; } Property Value GuildFeatures An array of string representing the features of this guild. HasAllMembers Indicates whether the client has all the members downloaded to the local guild cache. public bool? HasAllMembers { get; } Property Value bool? Remarks warning If MemberCount is null, this property will always return null, which means that the client is unable to determine whether all the members are downloaded or not. Icon Gets the URL of this guild's icon. public string Icon { get; } Property Value string A URL pointing to the guild's icon; null if none is set. IsConnected Indicates whether the client is connected to this guild. public bool IsConnected { get; } Property Value bool IsOpenEnabled Gets whether this guild is public. public bool IsOpenEnabled { get; } Property Value bool true if this guild is public; false otherwise. MaxBitrate Gets the max bitrate for voice channels in this guild. public int MaxBitrate { get; } Property Value int A int representing the maximum bitrate value allowed by Kook in this guild. MaxUploadLimit Gets the upload limit in bytes for this guild. This number is dependent on the guild's boost status. public ulong MaxUploadLimit { get; } Property Value ulong MemberCount Gets the number of members. public int? MemberCount { get; } Property Value int? Remarks This property retrieves the number of members returned by Kook. tip Due to how this property is returned by Kook instead of relying on the WebSocket cache, the number here is the most accurate in terms of counting the number of users within this guild. Use this instead of enumerating the count of the Users collection, as you may see discrepancy between that and this property. warning Only when AlwaysDownloadUsers is set to true will this property be populated upon startup. Otherwise, this property will be null, and will be populated when DownloadUsersAsync(RequestOptions?) is called. Name Gets the name of this guild. public string Name { get; } Property Value string A string containing the name of this guild. NotifyType Gets the default notification type for this guild. public NotifyType NotifyType { get; } Property Value NotifyType A NotifyType representing the default notification type for this guild. OpenId Gets the open ID for this guild. public uint? OpenId { get; } Property Value uint? A uint representing the open ID for this guild; this property should be null if IsOpenEnabled is false. Owner Gets the user that owns this guild. public SocketGuildUser? Owner { get; } Property Value SocketGuildUser OwnerId Gets the ID of the user that owns this guild. public ulong OwnerId { get; } Property Value ulong A ulong representing the identifier of the user that owns this guild. RecommendInfo Gets the recommendation information for this guild. public RecommendInfo? RecommendInfo { get; } Property Value RecommendInfo A recommendation object that represents the recommendation information for this guild; null if the guild does not have a recommendation. Region Gets the default voice region for this guild. public string Region { get; } Property Value string A string representing the default voice region for this guild. Roles Gets a collection of all roles in this guild. public IReadOnlyCollection<SocketRole> Roles { get; } Property Value IReadOnlyCollection<SocketRole> A read-only collection of roles found within this guild. Remarks warning Due to the lack of event args which should contains the reordered roles data when roles are reordered, this property may not be completely accurate. To ensure the most accurate results, it is recommended to call UpdateAsync(RequestOptions?) before this property is used. Status TODO: To be documented. public int Status { get; } Property Value int TextChannels Gets a collection of all text channels in this guild. public IReadOnlyCollection<SocketTextChannel> TextChannels { get; } Property Value IReadOnlyCollection<SocketTextChannel> A read-only collection of message channels found within this guild. Topic Gets the topic for the guild. public string Topic { get; } Property Value string The description for the guild; null if none is set. Users Gets a collection of users in this guild. public IReadOnlyCollection<SocketGuildUser> Users { get; } Property Value IReadOnlyCollection<SocketGuildUser> A collection of guild users found within this guild. Remarks This property retrieves all users found within this guild. warning This property may not always return all the members for large guilds (i.e. guilds containing 100+ users). If you are simply looking to get the number of users present in this guild, consider using MemberCount instead. Otherwise, you may need to enable AlwaysDownloadUsers to fetch the full user list upon startup, or use DownloadUsersAsync(RequestOptions?) to manually download the users. See Also DownloadUsersAsync(RequestOptions?) DownloadUsersAsync(IEnumerable<IGuild>, RequestOptions) ValidBoostSubscriptions Gets a dictionary of all boost subscriptions which have not expired for this guild. public ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>> ValidBoostSubscriptions { get; } Property Value ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>> A read-only dictionary containing all boost subscription metadata which have not expired for this guild grouped by users; or null if the boost subscription data has never been cached. Remarks warning Only when AlwaysDownloadBoostSubscriptions is set to true will this property be populated upon startup. Due to the lack of event support for boost subscriptions, this property will never be updated. The changes of BoostSubscriptionCount will trigger the update of this property, but KOOK gateway will not publish this event resulting from the changes of total boost subscription count. To fetch the latest boost subscription data, use DownloadBoostSubscriptionsAsync(RequestOptions?) or DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>?, RequestOptions?) upon a KookSocketClient to manually download the latest boost subscription data, or GetBoostSubscriptionsAsync(RequestOptions?). See Also BoostSubscriptions DownloadBoostSubscriptionsAsync(RequestOptions?) DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>, RequestOptions) VoiceChannels Gets a collection of all voice channels in this guild. public IReadOnlyCollection<SocketVoiceChannel> VoiceChannels { get; } Property Value IReadOnlyCollection<SocketVoiceChannel> A read-only collection of voice channels found within this guild. WelcomeChannel Gets the welcome text channel for this guild. public SocketTextChannel? WelcomeChannel { get; } Property Value SocketTextChannel A SocketTextChannel representing the default text channel for this guild. Remarks This property retrieves default text channel for this guild. WelcomeChannelId Gets the welcome channel ID for this guild. public ulong? WelcomeChannelId { get; } Property Value ulong? A ulong representing the welcome channel ID for this guild. Methods AddBanAsync(IUser, int, string?, RequestOptions?) Bans the user from this guild and optionally prunes their recent messages. public Task AddBanAsync(IUser user, int pruneDays = 0, string? reason = null, RequestOptions? options = null) Parameters user IUser The user to ban. pruneDays int The number of days to remove messages from this user for, and this number must be between [0, 7]. reason string The reason of the ban to be written in the audit log. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous add operation for the ban. Exceptions ArgumentException pruneDays is not between 0 to 7. AddBanAsync(ulong, int, string?, RequestOptions?) Bans the user from this guild and optionally prunes their recent messages. public Task AddBanAsync(ulong userId, int pruneDays = 0, string? reason = null, RequestOptions? options = null) Parameters userId ulong The identifier of the user to ban. pruneDays int The number of days to remove messages from this user for, and this number must be between [0, 7]. reason string The reason of the ban to be written in the audit log. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous add operation for the ban. Exceptions ArgumentException pruneDays is not between 0 to 7. CreateCategoryChannelAsync(string, Action<CreateCategoryChannelProperties>?, RequestOptions?) Creates a new channel category in this guild. public Task<RestCategoryChannel> CreateCategoryChannelAsync(string name, Action<CreateCategoryChannelProperties>? func = null, RequestOptions? options = null) Parameters name string The new name for the category. func Action<CreateCategoryChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<RestCategoryChannel> A task that represents the asynchronous creation operation. The task result contains the newly created category channel. Exceptions ArgumentNullException name is null. CreateEmoteAsync(string, Image, RequestOptions?) Creates a new GuildEmote in this guild. public Task<GuildEmote> CreateEmoteAsync(string name, Image image, RequestOptions? options = null) Parameters name string The name of the guild emote. image Image The image of the new emote. options RequestOptions The options to be used when sending the request. Returns Task<GuildEmote> A task that represents the asynchronous creation operation. The task result contains the created emote. CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions?) Creates a new invite to this channel. public Task<IInvite> CreateInviteAsync(InviteMaxAge maxAge = InviteMaxAge._604800, InviteMaxUses maxUses = InviteMaxUses.Unlimited, RequestOptions? options = null) Parameters maxAge InviteMaxAge The time until the invite expires. Set to InviteMaxAge.NeverExpires to never expire. maxUses InviteMaxUses The max amount of times this invite may be used. Set to InviteMaxUses.Unlimited to have unlimited uses. options RequestOptions The options to be used when sending the request. Returns Task<IInvite> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateInviteAsync(int?, int?, RequestOptions?) Creates a new invite to this channel. public Task<IInvite> CreateInviteAsync(int? maxAge = 604800, int? maxUses = null, RequestOptions? options = null) Parameters maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. options RequestOptions The options to be used when sending the request. Returns Task<IInvite> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateRoleAsync(string, RequestOptions?) Creates a new role with the provided name. public Task<RestRole> CreateRoleAsync(string name, RequestOptions? options = null) Parameters name string The new name for the role. options RequestOptions The options to be used when sending the request. Returns Task<RestRole> A task that represents the asynchronous creation operation. The task result contains the newly created role. Exceptions ArgumentNullException name is null. CreateTextChannelAsync(string, Action<CreateTextChannelProperties>?, RequestOptions?) Creates a new text channel in this guild. public Task<RestTextChannel> CreateTextChannelAsync(string name, Action<CreateTextChannelProperties>? func = null, RequestOptions? options = null) Parameters name string The new name for the text channel. func Action<CreateTextChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<RestTextChannel> A task that represents the asynchronous creation operation. The task result contains the newly created text channel. CreateVoiceChannelAsync(string, Action<CreateVoiceChannelProperties>?, RequestOptions?) Creates a new voice channel in this guild. public Task<RestVoiceChannel> CreateVoiceChannelAsync(string name, Action<CreateVoiceChannelProperties>? func = null, RequestOptions? options = null) Parameters name string The new name for the voice channel. func Action<CreateVoiceChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<RestVoiceChannel> A task that represents the asynchronous creation operation. The task result contains the newly created voice channel. Exceptions ArgumentNullException name is null. DeleteEmoteAsync(GuildEmote, RequestOptions?) Deletes an existing GuildEmote from this guild. public Task DeleteEmoteAsync(GuildEmote emote, RequestOptions? options = null) Parameters emote GuildEmote The emote to delete. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DownloadBoostSubscriptionsAsync(RequestOptions?) Downloads all boost subscriptions for this guild. public Task DownloadBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous download operation. Remarks This method downloads all boost subscriptions for this guild through the Gateway and caches them. To download all boost subscriptions, the current user must has the ManageGuild permission. DownloadUsersAsync(RequestOptions?) Downloads all users for this guild if the current list is incomplete. public Task DownloadUsersAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous download operation. Remarks This method downloads all users found within this guild through the Gateway and caches them. DownloadVoiceStatesAsync(RequestOptions?) Downloads all voice states for this guild. public Task DownloadVoiceStatesAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous download operation. Remarks This method downloads all voice states for this guild through the Gateway and caches them. GetActiveBoostSubscriptionsAsync(RequestOptions?) Gets subscriptions which are not expired for this guild. public Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> GetActiveBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> A task that represents the asynchronous retrieval operation. The task result contains a collection of BoostSubscriptionMetadata which are not expired, each representing the subscriptions information. GetBadgeAsync(BadgeStyle, RequestOptions?) Gets a badge which is associated with this guild. public Task<Stream> GetBadgeAsync(BadgeStyle style = BadgeStyle.GuildName, RequestOptions? options = null) Parameters style BadgeStyle The BadgeStyle that specifies the style of the badge. options RequestOptions The options to be used when sending the request. Returns Task<Stream> A task that represents the asynchronous get operation. The task result contains the stream of the badge associated with this guild. GetBanAsync(IUser, RequestOptions?) Gets a ban object for a banned user. public Task<RestBan?> GetBanAsync(IUser user, RequestOptions? options = null) Parameters user IUser The banned user. options RequestOptions The options to be used when sending the request. Returns Task<RestBan> A task that represents the asynchronous get operation. The task result contains a ban object, which contains the user information and the reason for the ban; null if the ban entry cannot be found. GetBanAsync(ulong, RequestOptions?) Gets a ban object for a banned user. public Task<RestBan?> GetBanAsync(ulong userId, RequestOptions? options = null) Parameters userId ulong The identifier for the banned user. options RequestOptions The options to be used when sending the request. Returns Task<RestBan> A task that represents the asynchronous get operation. The task result contains a ban object, which contains the user information and the reason for the ban; null if the ban entry cannot be found. GetBansAsync(RequestOptions?) Gets a collection of all users banned in this guild. public Task<IReadOnlyCollection<RestBan>> GetBansAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestBan>> A task that represents the asynchronous get operation. The task result contains a read-only collection of ban objects that this guild currently possesses, with each object containing the user banned and reason behind the ban. GetBoostSubscriptionsAsync(RequestOptions?) Gets all subscriptions for this guild. public Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> GetBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> A task that represents the asynchronous retrieval operation. The task result contains a collection of BoostSubscriptionMetadata, each representing the subscriptions information. GetCategoryChannel(ulong) Gets a category channel in this guild. public SocketCategoryChannel? GetCategoryChannel(ulong id) Parameters id ulong The snowflake identifier for the category channel. Returns SocketCategoryChannel A category channel associated with the specified id; null if none is found. GetChannel(ulong) Gets a channel in this guild. public SocketGuildChannel? GetChannel(ulong id) Parameters id ulong The identifier for the channel. Returns SocketGuildChannel A generic channel associated with the specified id; null if none is found. GetEmote(string) Gets a guild emoji in this guild. public GuildEmote? GetEmote(string id) Parameters id string The identifier for the guild emoji. Returns GuildEmote A guild emoji associated with the specified id; null if none is found. GetEmoteAsync(string, RequestOptions?) Gets a specific emote from this guild. public Task<GuildEmote?> GetEmoteAsync(string id, RequestOptions? options = null) Parameters id string The identifier for the guild emote. options RequestOptions The options to be used when sending the request. Returns Task<GuildEmote> A task that represents the asynchronous get operation. The task result contains the emote found with the specified id; null if none is found. GetEmotesAsync(RequestOptions?) Gets a collection of emotes from this guild. public Task<IReadOnlyCollection<GuildEmote>> GetEmotesAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<GuildEmote>> A task that represents the asynchronous get operation. The task result contains a read-only collection of emotes found within the guild. GetInvitesAsync(RequestOptions?) Gets a collection of all invites in this guild. public Task<IReadOnlyCollection<IInvite>> GetInvitesAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IInvite>> A task that represents the asynchronous get operation. The task result contains a read-only collection of invite, each representing information for an invite found within this guild. GetRole(uint) Gets a role in this guild. public SocketRole? GetRole(uint id) Parameters id uint The identifier for the role. Returns SocketRole A role that is associated with the specified id; null if none is found. GetTextChannel(ulong) Gets a text channel in this guild. public SocketTextChannel? GetTextChannel(ulong id) Parameters id ulong The identifier for the text channel. Returns SocketTextChannel A text channel associated with the specified id; null if none is found. GetUser(ulong) Gets a user from this guild. public SocketGuildUser? GetUser(ulong id) Parameters id ulong The identifier of the user. Returns SocketGuildUser A guild user associated with the specified id; null if none is found. Remarks This method retrieves a user found within this guild. note This may return null in the WebSocket implementation due to incomplete user collection in large guilds. GetUsersAsync(RequestOptions?) Gets a collection of all users in this guild. public IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> GetUsersAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> A task that represents the asynchronous get operation. The task result contains a collection of guild users found within this guild. Remarks This method retrieves all users found within this guild through REST. Users returned by this method are not cached. GetVoiceChannel(ulong) Gets a voice channel in this guild. public SocketVoiceChannel? GetVoiceChannel(ulong id) Parameters id ulong The identifier for the voice channel. Returns SocketVoiceChannel A voice channel associated with the specified id; null if none is found. LeaveAsync(RequestOptions?) Leaves this guild. public Task LeaveAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous leave operation. Remarks This method will make the currently logged-in user leave the guild. note If the user is the owner of this guild, use DeleteAsync(RequestOptions?) instead. ModifyEmoteNameAsync(GuildEmote, string, RequestOptions?) Modifies an existing GuildEmote in this guild. public Task ModifyEmoteNameAsync(GuildEmote emote, string name, RequestOptions? options = null) Parameters emote GuildEmote The emote to be modified. name string The new name of the emote. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. The task result contains the modified emote. Exceptions ArgumentNullException name is null. MoveUsersAsync(IEnumerable<IGuildUser>, IVoiceChannel, RequestOptions?) Moves the user to the voice channel. public Task MoveUsersAsync(IEnumerable<IGuildUser> users, IVoiceChannel targetChannel, RequestOptions? options = null) Parameters users IEnumerable<IGuildUser> The users to move. targetChannel IVoiceChannel the channel where the user gets moved to. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for moving a user. PurgeUserCache() Purges this guild's user cache. public void PurgeUserCache() PurgeUserCache(Func<SocketGuildUser, bool>) Purges this guild's user cache. public void PurgeUserCache(Func<SocketGuildUser, bool> predicate) Parameters predicate Func<SocketGuildUser, bool> The predicate used to select which users to clear. RemoveBanAsync(IUser, RequestOptions?) Unbans the user if they are currently banned. public Task RemoveBanAsync(IUser user, RequestOptions? options = null) Parameters user IUser The user to be unbanned. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation for the ban. RemoveBanAsync(ulong, RequestOptions?) Unbans the user if they are currently banned. public Task RemoveBanAsync(ulong userId, RequestOptions? options = null) Parameters userId ulong The identifier of the user to be unbanned. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation for the ban. SearchUsersAsync(Action<SearchGuildMemberProperties>, int, RequestOptions?) Gets a collection of users in this guild that the name or nickname contains the provided string at func. public IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> SearchUsersAsync(Action<SearchGuildMemberProperties> func, int limit = 50, RequestOptions? options = null) Parameters func Action<SearchGuildMemberProperties> A delegate containing the properties to search users with. limit int The maximum number of users to be gotten. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> A task that represents the asynchronous get operation. The task result contains a collection of guild users that matches the properties with the provided Action<T> at func. Remarks The limit can not be higher than MaxUsersPerBatch. ToString() Gets the name of the guild. public override string ToString() Returns string A string that resolves to Name. UpdateAsync(RequestOptions?) Updates this object's properties with its current state. public Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents an asynchronous reloading operation. Remarks warning This method will fetch the latest data from REST API, and replace the current object's properties with the new data."
  },
  "api/Kook.WebSocket.SocketGuildChannel.html": {
    "href": "api/Kook.WebSocket.SocketGuildChannel.html",
    "title": "Class SocketGuildChannel | Kook.Net 文档",
    "keywords": "Class SocketGuildChannel Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represent a WebSocket-based guild channel. public class SocketGuildChannel : SocketChannel, IUpdateable, IGuildChannel, IChannel, IEntity<ulong>, IDeletable Inheritance object SocketEntity<ulong> SocketChannel SocketGuildChannel Implements IUpdateable IGuildChannel IChannel IEntity<ulong> IDeletable Derived SocketCategoryChannel SocketTextChannel Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties Creator Gets the creator of this channel. public SocketGuildUser? Creator { get; } Property Value SocketGuildUser A task that represents the asynchronous get operation. The task result contains the creator of this channel. Remarks This method will try to get the user as a member of this channel. If the user is not a member of this guild, this method will return null. To get the creator under this circumstance, use GetUserAsync(ulong, RequestOptions?). CreatorId Gets the identifier of the user who created this channel. public ulong? CreatorId { get; } Property Value ulong? A ulong representing the identifier of the user who created this channel. Guild Gets the guild associated with this channel. public SocketGuild Guild { get; } Property Value SocketGuild A guild object that this channel belongs to. Name Gets the name of this channel. public string Name { get; } Property Value string A string containing the name of this channel. Position Gets the position of this channel. public int? Position { get; } Property Value int? An int representing the position of this channel in the guild's channel list relative to others of the same type. RolePermissionOverwrites Gets a collection of permission overwrites for roles for this channel. public IReadOnlyCollection<RolePermissionOverwrite> RolePermissionOverwrites { get; } Property Value IReadOnlyCollection<RolePermissionOverwrite> A collection of overwrites for roles associated with this channel. Type Gets the type of this channel. public ChannelType Type { get; } Property Value ChannelType A ChannelType representing the type of this channel. UserPermissionOverwrites Gets a collection of permission overwrites for users for this channel. public IReadOnlyCollection<UserPermissionOverwrite> UserPermissionOverwrites { get; } Property Value IReadOnlyCollection<UserPermissionOverwrite> A collection of overwrites for users associated with this channel. Users Gets a collection of users that are able to view the channel. public virtual IReadOnlyCollection<SocketGuildUser> Users { get; } Property Value IReadOnlyCollection<SocketGuildUser> A read-only collection of users that can access the channel (i.e. the users seen in the user list). Methods AddPermissionOverwriteAsync(IGuildUser, RequestOptions?) Adds or updates the permission overwrite for the given user. public Task AddPermissionOverwriteAsync(IGuildUser user, RequestOptions? options = null) Parameters user IGuildUser The user to add the overwrite to. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. AddPermissionOverwriteAsync(IRole, RequestOptions?) Adds or updates the permission overwrite for the given role. public Task AddPermissionOverwriteAsync(IRole role, RequestOptions? options = null) Parameters role IRole The role to add the overwrite to. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. DeleteAsync(RequestOptions?) Deletes this object and all its children. public Task DeleteAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task GetPermissionOverwrite(IRole) Gets the permission overwrite for a specific role. public virtual OverwritePermissions? GetPermissionOverwrite(IRole role) Parameters role IRole The role to get the overwrite from. Returns OverwritePermissions? An overwrite object for the targeted role; null if none is set. GetPermissionOverwrite(IUser) Gets the permission overwrite for a specific user. public virtual OverwritePermissions? GetPermissionOverwrite(IUser user) Parameters user IUser The user to get the overwrite from. Returns OverwritePermissions? An overwrite object for the targeted user; null if none is set. GetUser(ulong) Gets a SocketGuildUser from this channel. public virtual SocketGuildUser? GetUser(ulong id) Parameters id ulong The user's identifier. Returns SocketGuildUser A SocketGuildUser with the provided identifier; null if none is found. ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions?) Modifies this guild channel. public Task ModifyAsync(Action<ModifyGuildChannelProperties> func, RequestOptions? options = null) Parameters func Action<ModifyGuildChannelProperties> The delegate containing the properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies the current guild channel with the specified properties. To see an example of this method and what properties are available, please refer to ModifyGuildChannelProperties. ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions?) Updates the permission overwrite for the given user, if one exists. public Task ModifyPermissionOverwriteAsync(IGuildUser user, Func<OverwritePermissions, OverwritePermissions> func, RequestOptions? options = null) Parameters user IGuildUser The user to modify the overwrite for. func Func<OverwritePermissions, OverwritePermissions> A delegate containing the values to modify the permission overwrite with. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions?) Updates the permission overwrite for the given role, if one exists. public Task ModifyPermissionOverwriteAsync(IRole role, Func<OverwritePermissions, OverwritePermissions> func, RequestOptions? options = null) Parameters role IRole The role to remove the overwrite for. func Func<OverwritePermissions, OverwritePermissions> A delegate containing the values to modify the permission overwrite with. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. RemovePermissionOverwriteAsync(IGuildUser, RequestOptions?) Removes the permission overwrite for the given user, if one exists. public Task RemovePermissionOverwriteAsync(IGuildUser user, RequestOptions? options = null) Parameters user IGuildUser The user to remove the overwrite from. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. RemovePermissionOverwriteAsync(IRole, RequestOptions?) Removes the permission overwrite for the given role, if one exists. public Task RemovePermissionOverwriteAsync(IRole role, RequestOptions? options = null) Parameters role IRole The role to remove the overwrite from. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. ToString() Gets the name of the channel. public override string ToString() Returns string A string that resolves to Name. UpdateAsync(RequestOptions?) Updates this object's properties with its current state. public override Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents an asynchronous reloading operation. Remarks warning This method will fetch the latest data from REST API, and replace the current object's properties with the new data."
  },
  "api/Kook.WebSocket.SocketGuildExperimentalExtensions.html": {
    "href": "api/Kook.WebSocket.SocketGuildExperimentalExtensions.html",
    "title": "Class SocketGuildExperimentalExtensions | Kook.Net 文档",
    "keywords": "Class SocketGuildExperimentalExtensions Namespace Kook.WebSocket Assembly Kook.Net.Experimental.dll Provides extension methods of experimental functionalities for SocketGuilds. public static class SocketGuildExperimentalExtensions Inheritance object SocketGuildExperimentalExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DeleteAsync(SocketGuild, RequestOptions?) Deletes this guild. public static Task DeleteAsync(this SocketGuild guild, RequestOptions? options = null) Parameters guild SocketGuild The guild to delete. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous deletion operation. Remarks warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future. ModifyAsync(SocketGuild, Action<GuildProperties>, RequestOptions?) Modifies this guild. public static Task ModifyAsync(this SocketGuild guild, Action<GuildProperties> func, RequestOptions? options = null) Parameters guild SocketGuild The guild to modify. func Action<GuildProperties> The delegate containing the properties to modify the guild with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future. Exceptions ArgumentNullException func is null."
  },
  "api/Kook.WebSocket.SocketGuildUser.html": {
    "href": "api/Kook.WebSocket.SocketGuildUser.html",
    "title": "Class SocketGuildUser | Kook.Net 文档",
    "keywords": "Class SocketGuildUser Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a WebSocket-based guild user. public class SocketGuildUser : SocketUser, IGuildUser, IUser, IEntity<ulong>, IMentionable, IPresence, IVoiceState, IUpdateable Inheritance object SocketEntity<ulong> SocketUser SocketGuildUser Implements IGuildUser IUser IEntity<ulong> IMentionable IPresence IVoiceState IUpdateable Inherited Members SocketUser.IsSystemUser SocketUser.IdentifyNumber SocketUser.KMarkdownMention SocketUser.IsOnline SocketUser.ActiveClient SocketUser.CreateDMChannelAsync(RequestOptions) SocketUser.GetIntimacyAsync(RequestOptions) SocketUser.UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) SocketUser.BlockAsync(RequestOptions) SocketUser.UnblockAsync(RequestOptions) SocketUser.RequestFriendAsync(RequestOptions) SocketUser.RemoveFriendAsync(RequestOptions) SocketUser.ToString() SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods UserExtensions.BanAsync(IGuildUser, int, string?, RequestOptions?) Format.UsernameAndIdentifyNumber(IUser, bool) UserExtensions.SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendTextAsync(IUser, string, IQuote?, RequestOptions?) Properties ActiveAt Gets when this user was activated. public DateTimeOffset? ActiveAt { get; } Property Value DateTimeOffset? The time of which the user was activated. Avatar Gets the link to this user's avatar. public override string Avatar { get; } Property Value string Banner Gets the link to this user's banner. public override string? Banner { get; } Property Value string BoostSubscriptions Gets a collection of all boost subscriptions of this user for this guild. public IReadOnlyCollection<BoostSubscriptionMetadata> BoostSubscriptions { get; } Property Value IReadOnlyCollection<BoostSubscriptionMetadata> A read-only collection of boost subscription metadata of this user for this guild; or null if the boost subscription data has never been cached. Remarks warning Only when AlwaysDownloadBoostSubscriptions is set to true will this property be populated upon startup. Due to the lack of event support for boost subscriptions, this property may be not up-to-date. The changes of BoostSubscriptionCount will trigger the update of this property, but KOOK gateway will not publish this event resulting from the changes of total boost subscription count. To fetch the latest boost subscription data, use DownloadBoostSubscriptionsAsync(RequestOptions?) upon SocketGuild or DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>?, RequestOptions?) upon a KookSocketClient to manually download the latest boost subscription data, or GetBoostSubscriptionsAsync(RequestOptions?). See Also DownloadBoostSubscriptionsAsync(RequestOptions) DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>, RequestOptions) BuffAvatar Gets the link to this user's BUFF avatar. public override string? BuffAvatar { get; } Property Value string Color Gets the color the user's displayed name is being displayed in. public Color? Color { get; } Property Value Color? A Color struct representing the color the user's display name is being displayed in. Remarks warning At present, the color of a role may be a solid color or a gradient. See ColorType, which is guaranteed due to the fact that the guild's user list API endpoint returns the color type and the gradient color information if exists. However, the value of this property is fetched from the guild's user list API endpoint, which does not return the color type and the gradient color information. Hence, the value of this property may be incorrect if the color of a role is a gradient. DisplayName Gets the displayed name for this user. public string DisplayName { get; } Property Value string A string representing the display name of the user; If the nickname is null, this will be the username. Guild Gets the guild the user is in. public SocketGuild Guild { get; } Property Value SocketGuild GuildPermissions Gets the guild-level permissions for this user. public GuildPermissions GuildPermissions { get; } Property Value GuildPermissions A GuildPermissions structure for this user, representing what permissions this user has in the guild. HasAnnualBuff Gets whether this user's BUFF subscription is annual; null if unknown. public override bool? HasAnnualBuff { get; } Property Value bool? HasBuff Gets whether this user has subscribed to BUFF; null if unknown. public override bool? HasBuff { get; } Property Value bool? IdentifyNumberValue Gets the per-username unique ID for this user. public override ushort IdentifyNumberValue { get; } Property Value ushort IsBanned Gets whether this user is banned; null if unknown. public override bool? IsBanned { get; } Property Value bool? IsBot Gets whether this user is a bot; null if unknown. public override bool? IsBot { get; } Property Value bool? IsDeafened Gets a value that indicates whether this user is deafened by the guild. public bool? IsDeafened { get; } Property Value bool? true if the user is deafened (i.e. not permitted to listen to or speak to others) by the guild; otherwise false; null if unknown. IsDenoiseEnabled Gets whether this user enabled denoise feature; null if unknown. public override bool? IsDenoiseEnabled { get; } Property Value bool? IsMobileVerified Gets whether the mobile number has been verified for this user. public bool? IsMobileVerified { get; } Property Value bool? true if the mobile number has been verified; false otherwise. IsMuted Gets a value that indicates whether this user is muted (i.e. not permitted to speak via voice) by the guild. public bool? IsMuted { get; } Property Value bool? true if this user is muted by the guild; otherwise false; null if unknown. IsOwner Gets whether this user owns the current guild. public bool? IsOwner { get; } Property Value bool? true if this user owns the current guild; false otherwise. JoinedAt Gets when this user joined the guild. public DateTimeOffset? JoinedAt { get; } Property Value DateTimeOffset? The time of which the user has joined the guild. LiveStreamStatus Gets the live stream status of the user. public LiveStreamStatus? LiveStreamStatus { get; } Property Value LiveStreamStatus? Nameplates Gets the nameplates this user has. public override IReadOnlyCollection<Nameplate> Nameplates { get; } Property Value IReadOnlyCollection<Nameplate> Nickname Gets the nickname for this user. public string? Nickname { get; } Property Value string A string representing the nickname of the user; null if none is set. PlainTextMention Returns a special string used to mention this object in plain text formatted text. public string PlainTextMention { get; } Property Value string A string that is recognized by Kook as a mention in plain text formatted text. Roles Returns a collection of roles that the user possesses. public IReadOnlyCollection<SocketRole> Roles { get; } Property Value IReadOnlyCollection<SocketRole> Remarks warning Due to the lack of events which should be raised when a role is added or removed from a user, this property may not be completely accurate. To ensure the most accurate results, it is recommended to call UpdateAsync(RequestOptions?) before this property is used. UserTag Get the tag this user has. public override UserTag? UserTag { get; } Property Value UserTag Username Gets the username for this user. public override string Username { get; } Property Value string VoiceChannel Returns the voice channel the user is in, or null if none or unknown. warning If a user connects to a voice channel before the bot has connected to the gateway, this property will be null until DownloadVoiceStatesAsync(RequestOptions?) or DownloadVoiceStatesAsync(IEnumerable<IGuild>?, RequestOptions?) is called. To ensure whether the user is in a voice channel or not, use those methods above, or GetConnectedVoiceChannelsAsync(RequestOptions?). public SocketVoiceChannel? VoiceChannel { get; } Property Value SocketVoiceChannel VoiceState Gets the voice status of the user if any. public SocketVoiceState? VoiceState { get; } Property Value SocketVoiceState? A SocketVoiceState representing the user's voice status; null if the user is neither connected to a voice channel nor is muted or deafened by the guild. Methods AddRoleAsync(IRole, RequestOptions?) Adds the specified role to this user in the guild. public Task AddRoleAsync(IRole role, RequestOptions? options = null) Parameters role IRole The role to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRoleAsync(uint, RequestOptions?) Adds the specified role to this user in the guild. public Task AddRoleAsync(uint roleId, RequestOptions? options = null) Parameters roleId uint The role to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRolesAsync(IEnumerable<IRole>, RequestOptions?) Adds the specified roles to this user in the guild. public Task AddRolesAsync(IEnumerable<IRole> roles, RequestOptions? options = null) Parameters roles IEnumerable<IRole> The roles to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRolesAsync(IEnumerable<uint>, RequestOptions?) Adds the specified roleIds to this user in the guild. public Task AddRolesAsync(IEnumerable<uint> roleIds, RequestOptions? options = null) Parameters roleIds IEnumerable<uint> The roles to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. DeafenAsync(RequestOptions?) Deafen this user in this guild. public Task DeafenAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous deafening operation. GetBoostSubscriptionsAsync(RequestOptions?) Gets all subscriptions of this user for this guild. public Task<IReadOnlyCollection<BoostSubscriptionMetadata>> GetBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<BoostSubscriptionMetadata>> A task that represents the asynchronous retrieval operation. The task result contains a collection of BoostSubscriptionMetadata, each representing the subscription information. GetConnectedVoiceChannelsAsync(RequestOptions?) Gets a collection of voice channels a user. public Task<IReadOnlyCollection<SocketVoiceChannel>> GetConnectedVoiceChannelsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<SocketVoiceChannel>> A task that represents the asynchronous get operation. The task result contains a collection of voice channels the user is connected to. GetPermissions(IGuildChannel) Gets the level permissions granted to this user to a given channel. public ChannelPermissions GetPermissions(IGuildChannel channel) Parameters channel IGuildChannel The channel to get the permission from. Returns ChannelPermissions A ChannelPermissions structure representing the permissions that a user has in the specified channel. KickAsync(RequestOptions?) Kicks this user from this guild. public Task KickAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous kick operation. ModifyNicknameAsync(string?, RequestOptions?) Modifies this user's nickname in this guild. public Task ModifyNicknameAsync(string? name, RequestOptions? options = null) Parameters name string The nickname to modify the user with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies the nickname of current guild user. warning The KOOK API will clear the nickname if the nickname is set to the same as the username at present. Hence either setting the nickname to the same as the username or setting the nickname to null will clear the nickname. MuteAsync(RequestOptions?) Mute this user in this guild. public Task MuteAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous muting operation. RemoveRoleAsync(IRole, RequestOptions?) Removes the specified role from this user in the guild. public Task RemoveRoleAsync(IRole role, RequestOptions? options = null) Parameters role IRole The role to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRoleAsync(uint, RequestOptions?) Removes the specified roleId from this user in the guild. public Task RemoveRoleAsync(uint roleId, RequestOptions? options = null) Parameters roleId uint The role to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRolesAsync(IEnumerable<IRole>, RequestOptions?) Removes the specified roles from this user in the guild. public Task RemoveRolesAsync(IEnumerable<IRole> roles, RequestOptions? options = null) Parameters roles IEnumerable<IRole> The roles to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRolesAsync(IEnumerable<uint>, RequestOptions?) Removes the specified roleIds from this user in the guild. public Task RemoveRolesAsync(IEnumerable<uint> roleIds, RequestOptions? options = null) Parameters roleIds IEnumerable<uint> The roles to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. UndeafenAsync(RequestOptions?) Undeafen this user in this guild. public Task UndeafenAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous undeafening operation. UnmuteAsync(RequestOptions?) Unmute this user in this guild. public Task UnmuteAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous unmuting operation. UpdateAsync(RequestOptions?) Fetches the users data from the REST API to update this object, especially the Roles property. public Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous reloading operation."
  },
  "api/Kook.WebSocket.SocketInvite.html": {
    "href": "api/Kook.WebSocket.SocketInvite.html",
    "title": "Class SocketInvite | Kook.Net 文档",
    "keywords": "Class SocketInvite Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a WebSocket-based invite to a guild. public class SocketInvite : SocketEntity<uint>, IInvite, IEntity<uint>, IDeletable Inheritance object SocketEntity<uint> SocketInvite Implements IInvite IEntity<uint> IDeletable Inherited Members SocketEntity<uint>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Channel Gets the channel where this invite was created. public SocketGuildChannel Channel { get; } Property Value SocketGuildChannel ChannelId Gets the ID of the channel this invite is linked to. public ulong? ChannelId { get; } Property Value ulong? A ulong representing the channel identifier that the invite points to. Code Gets the unique identifier for this invite. public string Code { get; } Property Value string A string containing the invite code (e.g. wEAF5t). CreatedAt Gets the time at which this invite was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing the time at which this invite was created. ExpiresAt Gets the time at which this invite will expire. public DateTimeOffset? ExpiresAt { get; } Property Value DateTimeOffset? A DateTimeOffset representing the time until this invite expires; null if this invite never expires. Guild Gets the guild where this invite was created. public SocketGuild Guild { get; } Property Value SocketGuild GuildId Gets the ID of the guild this invite is linked to. public ulong? GuildId { get; } Property Value ulong? A ulong representing the guild identifier that the invite points to. InvitedUsersCount Gets the number of users that have accepted this invite. public int InvitedUsersCount { get; } Property Value int An int representing the number of users that have accepted this invite. Inviter Gets the user that created this invite if available. public SocketGuildUser Inviter { get; } Property Value SocketGuildUser MaxAge Gets the time span until the invite expires. public TimeSpan? MaxAge { get; } Property Value TimeSpan? A TimeSpan representing the time span until this invite expires; null if this invite never expires. MaxUses Gets the max number of uses this invite may have. public int? MaxUses { get; } Property Value int? An int representing the number of uses this invite may be accepted until it is removed from the guild; null if none is set. RemainingUses Gets the number of times this invite still remains. public int? RemainingUses { get; } Property Value int? An int representing the number of times this invite still remains; null if none is set. Url Gets the URL used to accept this invite using Code. public string Url { get; } Property Value string A string containing the full invite URL (e.g. https://kaihei.co/wEAF5t). Uses Gets the number of times this invite has been used. public int? Uses { get; } Property Value int? An int representing the number of times this invite has been used; null if none is set. Methods DeleteAsync(RequestOptions?) Deletes this object and all its children. public Task DeleteAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task ToString() Gets the URL of the invite. public override string ToString() Returns string A string that resolves to the Url of the invite."
  },
  "api/Kook.WebSocket.SocketMessage.html": {
    "href": "api/Kook.WebSocket.SocketMessage.html",
    "title": "Class SocketMessage | Kook.Net 文档",
    "keywords": "Class SocketMessage Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a WebSocket-based message. public abstract class SocketMessage : SocketEntity<Guid>, IMessage, IEntity<Guid>, IDeletable, IUpdateable Inheritance object SocketEntity<Guid> SocketMessage Implements IMessage IEntity<Guid> IDeletable IUpdateable Derived SocketSystemMessage SocketUserMessage Inherited Members SocketEntity<Guid>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods MessageExtensions.GetJumpUrl(IMessage) Properties Attachments Gets the attachment included in this message. public virtual IReadOnlyCollection<Attachment> Attachments { get; } Property Value IReadOnlyCollection<Attachment> Author Gets the author of this message. public SocketUser Author { get; } Property Value SocketUser A WebSocket-based user object. Cards Returns all cards included in this message. public virtual IReadOnlyCollection<ICard> Cards { get; } Property Value IReadOnlyCollection<ICard> Collection of card objects. Channel Gets the source channel of the message. public ISocketMessageChannel Channel { get; } Property Value ISocketMessageChannel A WebSocket-based message channel. CleanContent Gets the clean content for this message. public string CleanContent { get; } Property Value string A string that contains the body of the message stripped of mentions, markdown, emojis and pings; note that this field may be empty or the original code if the message is not a text based message. Content Gets the content for this message. public string Content { get; } Property Value string A string that contains the body of the message; note that this field may be empty or the original code if the message is not a text based message. EditedTimestamp Gets the time of this message's last edit. public DateTimeOffset? EditedTimestamp { get; } Property Value DateTimeOffset? Time of when the message was last edited; null if the message is never edited. Embeds Returns all embeds included in this message. public virtual IReadOnlyCollection<IEmbed> Embeds { get; } Property Value IReadOnlyCollection<IEmbed> Collection of embed objects. IsPinned Gets the value that indicates whether this message is pinned. public virtual bool IsPinned { get; protected set; } Property Value bool true if this message was added to its channel's pinned messages; otherwise false. MentionedEveryone Gets the value that indicates whether this message mentioned everyone. public virtual bool MentionedEveryone { get; } Property Value bool true if this message mentioned everyone; otherwise false. MentionedHere Gets the value that indicates whether this message mentioned online users. public virtual bool MentionedHere { get; } Property Value bool true if this message mentioned online users; otherwise false. MentionedRoles Returns the roles mentioned in this message. public virtual IReadOnlyCollection<SocketRole> MentionedRoles { get; } Property Value IReadOnlyCollection<SocketRole> Collection of WebSocket-based roles. MentionedUsers Returns the users mentioned in this message. public IReadOnlyCollection<SocketUser> MentionedUsers { get; } Property Value IReadOnlyCollection<SocketUser> Collection of WebSocket-based users. Pokes Gets a collection of the SocketPokeAction's on the message. public virtual IReadOnlyCollection<SocketPokeAction> Pokes { get; } Property Value IReadOnlyCollection<SocketPokeAction> Collection of poke action objects. RawContent Gets the raw content of the message. public string RawContent { get; } Property Value string Remarks This property is only available for messages that were received from the gateway. Reactions Gets all reactions included in this message. public IReadOnlyDictionary<IEmote, ReactionMetadata> Reactions { get; } Property Value IReadOnlyDictionary<IEmote, ReactionMetadata> Source Gets the source type of this message. public MessageSource Source { get; } Property Value MessageSource Tags Gets all tags included in this message's content. public virtual IReadOnlyCollection<ITag> Tags { get; } Property Value IReadOnlyCollection<ITag> Timestamp Gets the time this message was sent. public DateTimeOffset Timestamp { get; } Property Value DateTimeOffset Time of when the message was sent. Type Gets the type of this message. public MessageType Type { get; } Property Value MessageType Methods AddReactionAsync(IEmote, RequestOptions?) Adds a reaction to this message. public Task AddReactionAsync(IEmote emote, RequestOptions? options = null) Parameters emote IEmote The emoji used to react to this message. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for adding a reaction to this message. See Also IEmote DeleteAsync(RequestOptions?) Deletes this object and all its children. public Task DeleteAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task GetReactionUsersAsync(IEmote, RequestOptions?) Gets all users that reacted to a message with a given emote. public Task<IReadOnlyCollection<IUser>> GetReactionUsersAsync(IEmote emote, RequestOptions? options = null) Parameters emote IEmote The emoji that represents the reaction that you wish to get. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IUser>> Collection of users. RemoveReactionAsync(IEmote, IUser, RequestOptions?) Removes a reaction from message. public Task RemoveReactionAsync(IEmote emote, IUser user, RequestOptions? options = null) Parameters emote IEmote The emoji used to react to this message. user IUser The user that added the emoji. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for removing a reaction to this message. See Also IEmote RemoveReactionAsync(IEmote, ulong, RequestOptions?) Removes a reaction from message. public Task RemoveReactionAsync(IEmote emote, ulong userId, RequestOptions? options = null) Parameters emote IEmote The emoji used to react to this message. userId ulong The ID of the user that added the emoji. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for removing a reaction to this message. See Also IEmote ToString() Gets the content of the message. public override string ToString() Returns string Content of the message. UpdateAsync(RequestOptions?) Updates this object's properties with its current state. public Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents an asynchronous reloading operation. Remarks warning This method will fetch the latest data from REST API, and replace the current object's properties with the new data."
  },
  "api/Kook.WebSocket.SocketPokeAction.html": {
    "href": "api/Kook.WebSocket.SocketPokeAction.html",
    "title": "Class SocketPokeAction | Kook.Net 文档",
    "keywords": "Class SocketPokeAction Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a single WebSocket-based poke action. public class SocketPokeAction : IPokeAction Inheritance object SocketPokeAction Implements IPokeAction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Operator Gets the user who performed the action. public SocketUser Operator { get; } Property Value SocketUser Poke Gets the poke this action is associated with. public Poke Poke { get; } Property Value Poke Targets Gets the users who were poked by the action. public IReadOnlyCollection<SocketUser> Targets { get; } Property Value IReadOnlyCollection<SocketUser>"
  },
  "api/Kook.WebSocket.SocketPresence.html": {
    "href": "api/Kook.WebSocket.SocketPresence.html",
    "title": "Class SocketPresence | Kook.Net 文档",
    "keywords": "Class SocketPresence Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents the WebSocket user's presence status. This may include their online status and their activity. public class SocketPresence : IPresence Inheritance object SocketPresence Implements IPresence Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ActiveClient Gets the type of the client where this user is currently active. public ClientType? ActiveClient { get; } Property Value ClientType? IsOnline Gets the current status of this user. public bool? IsOnline { get; } Property Value bool?"
  },
  "api/Kook.WebSocket.SocketReaction.html": {
    "href": "api/Kook.WebSocket.SocketReaction.html",
    "title": "Class SocketReaction | Kook.Net 文档",
    "keywords": "Class SocketReaction Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a WebSocket-based reaction. public class SocketReaction : IReaction Inheritance object SocketReaction Implements IReaction Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Channel Gets the channel where the reaction takes place in. public ISocketMessageChannel? Channel { get; } Property Value ISocketMessageChannel A WebSocket-based message channel. Emote The IEmote used in the reaction. public IEmote Emote { get; } Property Value IEmote Message Gets the message that has been reacted to if possible. public IMessage? Message { get; } Property Value IMessage A WebSocket-based message where possible; a value is not always returned. MessageId Gets the ID of the message that has been reacted to. public Guid MessageId { get; } Property Value Guid A message Guid associated with the message. User Gets the user who added the reaction if possible. public IUser? User { get; } Property Value IUser A user object where possible; a value is not always returned. Remarks This property attempts to retrieve a WebSocket-cached user that is responsible for this reaction from the client. In other words, when the user is not in the WebSocket cache, this property may not contain a value, leaving the only identifiable information to be UserId. If you wish to obtain an identifiable user object, consider utilizing KookRestClient which will attempt to retrieve the user from REST. UserId Gets the ID of the user who added the reaction. public ulong UserId { get; } Property Value ulong A user identifier associated with the user. Remarks This property retrieves the identifier of the user responsible for this reaction. This property will always contain the user identifier in event that User cannot be retrieved. Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/Kook.WebSocket.SocketRole.html": {
    "href": "api/Kook.WebSocket.SocketRole.html",
    "title": "Class SocketRole | Kook.Net 文档",
    "keywords": "Class SocketRole Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a WebSocket-based role to be given to a guild user. public class SocketRole : SocketEntity<uint>, IRole, IEntity<uint>, IDeletable, IMentionable, IComparable<IRole> Inheritance object SocketEntity<uint> SocketRole Implements IRole IEntity<uint> IDeletable IMentionable IComparable<IRole> Inherited Members SocketEntity<uint>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Color Gets the color given to users of this role. public Color Color { get; } Property Value Color A Color struct representing the color of this role. ColorType Gets the type of the color given to users of this role. public ColorType ColorType { get; } Property Value ColorType A ColorType struct representing the color type of this role. GradientColor Gets the gradient color given to users of this role. public GradientColor? GradientColor { get; } Property Value GradientColor? A GradientColor struct representing the gradient color of this role; null if the role does not have a gradient color. Guild Gets the guild that owns this role. public SocketGuild Guild { get; } Property Value SocketGuild A SocketGuild representing the parent guild of this role. IsEveryone Returns a value that determines if the role is an @everyone role. public bool IsEveryone { get; } Property Value bool true if the role is @everyone; otherwise false. IsHoisted Gets a value that indicates whether the role can be separated in the user list. public bool IsHoisted { get; } Property Value bool true if users of this role are separated in the user list; otherwise false. IsMentionable Gets a value that indicates whether the role is mentionable. public bool IsMentionable { get; } Property Value bool true if this role may be mentioned in messages; otherwise false. KMarkdownMention Returns a special string used to mention this object in KMarkdown formatted text. public string KMarkdownMention { get; } Property Value string A string that is recognized by Kook as a mention in KMarkdown formatted text. Name Gets the name of this role. public string Name { get; } Property Value string A string containing the name of this role. Permissions Gets the permissions granted to members of this role. public GuildPermissions Permissions { get; } Property Value GuildPermissions A GuildPermissions struct that this role possesses. PlainTextMention Returns a special string used to mention this object in plain text formatted text. public string PlainTextMention { get; } Property Value string A string that is recognized by Kook as a mention in plain text formatted text. Position Gets this role's position relative to other roles in the same guild. public int Position { get; } Property Value int An int representing the position of the role in the role list of the guild. Type Gets the type of this role. public RoleType Type { get; } Property Value RoleType A RoleType representing the type of this role. Methods CompareTo(IRole?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(IRole? role) Parameters role IRole Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. DeleteAsync(RequestOptions?) Deletes this object and all its children. public Task DeleteAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task GetUsersAsync(RequestOptions?) Gets a collection of users with this role. public IAsyncEnumerable<IReadOnlyCollection<SocketGuildUser>> GetUsersAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<SocketGuildUser>> Paged collection of users with this role. Remarks If the guild this role belongs to does not has all members cached locally by checking HasAllMembers, this method will request the data via REST and update the guild users cache, otherwise it will return the cached data. ModifyAsync(Action<RoleProperties>, RequestOptions?) Modifies this role. public Task ModifyAsync(Action<RoleProperties> func, RequestOptions? options = null) Parameters func Action<RoleProperties> A delegate containing the properties to modify the role with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies this role with the specified properties. To see an example of this method and what properties are available, please refer to RoleProperties. ToString() Gets the name of the role. public override string ToString() Returns string A string that resolves to Name."
  },
  "api/Kook.WebSocket.SocketSelfUser.html": {
    "href": "api/Kook.WebSocket.SocketSelfUser.html",
    "title": "Class SocketSelfUser | Kook.Net 文档",
    "keywords": "Class SocketSelfUser Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents the logged-in WebSocket-based user. public class SocketSelfUser : SocketUser, ISelfUser, IUser, IEntity<ulong>, IMentionable, IPresence, IUpdateable Inheritance object SocketEntity<ulong> SocketUser SocketSelfUser Implements ISelfUser IUser IEntity<ulong> IMentionable IPresence IUpdateable Inherited Members SocketUser.IsSystemUser SocketUser.IdentifyNumber SocketUser.KMarkdownMention SocketUser.PlainTextMention SocketUser.IsOnline SocketUser.ActiveClient SocketUser.CreateDMChannelAsync(RequestOptions) SocketUser.GetIntimacyAsync(RequestOptions) SocketUser.UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) SocketUser.BlockAsync(RequestOptions) SocketUser.UnblockAsync(RequestOptions) SocketUser.RequestFriendAsync(RequestOptions) SocketUser.RemoveFriendAsync(RequestOptions) SocketUser.ToString() SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Format.UsernameAndIdentifyNumber(IUser, bool) UserExtensions.SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendTextAsync(IUser, string, IQuote?, RequestOptions?) Properties Avatar Gets the link to this user's avatar. public override string Avatar { get; } Property Value string Banner Gets the link to this user's banner. public override string? Banner { get; } Property Value string BuffAvatar Gets the link to this user's BUFF avatar. public override string? BuffAvatar { get; } Property Value string HasAnnualBuff Gets whether this user's BUFF subscription is annual; null if unknown. public override bool? HasAnnualBuff { get; } Property Value bool? HasBuff Gets whether this user has subscribed to BUFF; null if unknown. public override bool? HasBuff { get; } Property Value bool? IdentifyNumberValue Gets the per-username unique ID for this user. public override ushort IdentifyNumberValue { get; } Property Value ushort InvitedCount TODO: To be documented. public int InvitedCount { get; } Property Value int IsBanned Gets whether this user is banned; null if unknown. public override bool? IsBanned { get; } Property Value bool? IsBot Gets whether this user is a bot; null if unknown. public override bool? IsBot { get; } Property Value bool? IsDenoiseEnabled Gets whether this user enabled denoise feature; null if unknown. public override bool? IsDenoiseEnabled { get; } Property Value bool? IsMobileVerified Gets whether the mobile number of the logged-in user is verified. public bool IsMobileVerified { get; } Property Value bool Mobile Gets the mobile number of the logged-in user. public string? Mobile { get; } Property Value string MobilePrefix Gets the mobile prefix of the logged-in user. public string? MobilePrefix { get; } Property Value string Nameplates Gets the nameplates this user has. public override IReadOnlyCollection<Nameplate> Nameplates { get; } Property Value IReadOnlyCollection<Nameplate> UserTag Get the tag this user has. public override UserTag? UserTag { get; } Property Value UserTag Username Gets the username for this user. public override string Username { get; } Property Value string Methods StartPlayingAsync(IGame, RequestOptions?) Starts a new game activity. After this operation, a game activity will be displayed on the currently connected user's profile. public Task StartPlayingAsync(IGame game, RequestOptions? options = null) Parameters game IGame The game to be played. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for starting a game activity. StartPlayingAsync(Music, RequestOptions?) Starts a new music activity. After this operation, a music activity will be displayed on the currently connected user's profile. public Task StartPlayingAsync(Music music, RequestOptions? options = null) Parameters music Music The music being listened to be showed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for starting a music activity. StopPlayingAsync(ActivityType, RequestOptions?) Stops an activity. After this operation, the activity on the currently connected user's profile will disappear. public Task StopPlayingAsync(ActivityType type, RequestOptions? options = null) Parameters type ActivityType The type of the activity to stop options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for stopping an activity. UpdateAsync(RequestOptions?) Fetches the users data from the REST API to update this object, especially the Username property. public Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous reloading operation."
  },
  "api/Kook.WebSocket.SocketSystemMessage.html": {
    "href": "api/Kook.WebSocket.SocketSystemMessage.html",
    "title": "Class SocketSystemMessage | Kook.Net 文档",
    "keywords": "Class SocketSystemMessage Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a WebSocket-based message sent by the system. public class SocketSystemMessage : SocketMessage, IUpdateable, ISystemMessage, IMessage, IEntity<Guid>, IDeletable Inheritance object SocketEntity<Guid> SocketMessage SocketSystemMessage Implements IUpdateable ISystemMessage IMessage IEntity<Guid> IDeletable Inherited Members SocketMessage.Author SocketMessage.Channel SocketMessage.Source SocketMessage.Content SocketMessage.RawContent SocketMessage.CleanContent SocketMessage.Timestamp SocketMessage.EditedTimestamp SocketMessage.IsPinned SocketMessage.MentionedEveryone SocketMessage.MentionedHere SocketMessage.Type SocketMessage.Attachments SocketMessage.Cards SocketMessage.Embeds SocketMessage.Pokes SocketMessage.MentionedRoles SocketMessage.MentionedUsers SocketMessage.Tags SocketMessage.Reactions SocketMessage.DeleteAsync(RequestOptions) SocketMessage.UpdateAsync(RequestOptions) SocketMessage.AddReactionAsync(IEmote, RequestOptions) SocketMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) SocketMessage.RemoveReactionAsync(IEmote, ulong, RequestOptions) SocketMessage.GetReactionUsersAsync(IEmote, RequestOptions) SocketMessage.ToString() SocketEntity<Guid>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods MessageExtensions.GetJumpUrl(IMessage) Properties SystemMessageType Gets the type of the system message. public SystemMessageType SystemMessageType { get; } Property Value SystemMessageType Remarks warning Because the data from Kook does not describe the type of the message in detail, this property is not implemented yet. Accessing this property will always result in an exception at present."
  },
  "api/Kook.WebSocket.SocketTextChannel.html": {
    "href": "api/Kook.WebSocket.SocketTextChannel.html",
    "title": "Class SocketTextChannel | Kook.Net 文档",
    "keywords": "Class SocketTextChannel Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a WebSocket-based channel in a guild that can send and receive messages. public class SocketTextChannel : SocketGuildChannel, IUpdateable, ITextChannel, INestedChannel, IGuildChannel, IDeletable, IMentionable, ISocketMessageChannel, IMessageChannel, IChannel, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketChannel SocketGuildChannel SocketTextChannel Implements IUpdateable ITextChannel INestedChannel IGuildChannel IDeletable IMentionable ISocketMessageChannel IMessageChannel IChannel IEntity<ulong> Derived SocketVoiceChannel Inherited Members SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Position SocketGuildChannel.Type SocketGuildChannel.CreatorId SocketGuildChannel.Creator SocketGuildChannel.RolePermissionOverwrites SocketGuildChannel.UserPermissionOverwrites SocketGuildChannel.UpdateAsync(RequestOptions) SocketGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) SocketGuildChannel.DeleteAsync(RequestOptions) SocketGuildChannel.GetPermissionOverwrite(IUser) SocketGuildChannel.GetPermissionOverwrite(IRole) SocketGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) SocketGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) SocketGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) SocketGuildChannel.ToString() SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties CachedMessages Gets all messages in this channel's cache. public IReadOnlyCollection<SocketMessage> CachedMessages { get; } Property Value IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks This property is only available if the MessageCacheSize is set to a value greater than zero. See Also MessageCacheSize Category Gets the parent (category) of this channel in the guild's channel list. public ICategoryChannel? Category { get; } Property Value ICategoryChannel An ICategoryChannel representing the parent of this channel; null if none is set. CategoryId Gets the parent (category) ID of this channel in the guild's channel list. public ulong? CategoryId { get; } Property Value ulong? A ulong representing the identifier of the parent of this channel; null if none is set. IsPermissionSynced Specifies whether the permissions of this channel is synchronized with its parent channel. public bool? IsPermissionSynced { get; } Property Value bool? A bool indicating whether the permissions of this channel is synchronized with its parent channel. KMarkdownMention Returns a special string used to mention this object in KMarkdown formatted text. public string KMarkdownMention { get; } Property Value string A string that is recognized by Kook as a mention in KMarkdown formatted text. PlainTextMention Returns a special string used to mention this object in plain text formatted text. public string PlainTextMention { get; } Property Value string A string that is recognized by Kook as a mention in plain text formatted text. SlowModeInterval Gets the current slow-mode delay for this channel. public int SlowModeInterval { get; } Property Value int An int representing the time in seconds required before the user can send another message; 0 if disabled. Topic Gets the current topic for this text channel. public string Topic { get; } Property Value string A string representing the topic set in the channel; null if none is set. Users Gets a collection of users that are able to view the channel. public override IReadOnlyCollection<SocketGuildUser> Users { get; } Property Value IReadOnlyCollection<SocketGuildUser> A read-only collection of users that can access the channel (i.e. the users seen in the user list). Methods CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions?) Creates a new invite to this channel. public Task<IInvite> CreateInviteAsync(InviteMaxAge maxAge = InviteMaxAge._604800, InviteMaxUses maxUses = InviteMaxUses.Unlimited, RequestOptions? options = null) Parameters maxAge InviteMaxAge The time until the invite expires. Set to InviteMaxAge.NeverExpires to never expire. maxUses InviteMaxUses The max amount of times this invite may be used. Set to InviteMaxUses.Unlimited to have unlimited uses. options RequestOptions The options to be used when sending the request. Returns Task<IInvite> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateInviteAsync(int?, int?, RequestOptions?) Creates a new invite to this channel. public Task<IInvite> CreateInviteAsync(int? maxAge = 604800, int? maxUses = null, RequestOptions? options = null) Parameters maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. options RequestOptions The options to be used when sending the request. Returns Task<IInvite> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. DeleteMessageAsync(IMessage, RequestOptions?) Deletes a message based on the provided message in this channel. public Task DeleteMessageAsync(IMessage message, RequestOptions? options = null) Parameters message IMessage The message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DeleteMessageAsync(Guid, RequestOptions?) Deletes a message. public Task DeleteMessageAsync(Guid messageId, RequestOptions? options = null) Parameters messageId Guid The identifier of the message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. GetCachedMessage(Guid) Gets a cached message from this channel. public SocketMessage? GetCachedMessage(Guid id) Parameters id Guid The Guid of the message. Returns SocketMessage A WebSocket-based message object; null if it does not exist in the cache or if caching is not enabled. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return null. Please refer to MessageCacheSize for more details. This method retrieves the message from the local WebSocket cache and does not send any additional request to Kook. This message may be a message that has been deleted. GetCachedMessages(IMessage, Direction, int) Gets the last N cached messages starting from a certain message in this message channel. public IReadOnlyCollection<SocketMessage> GetCachedMessages(IMessage fromMessage, Direction dir, int limit = 50) Parameters fromMessage IMessage The message to start the fetching from. dir Direction The direction of which the message should be gotten from. limit int The number of messages to get. Returns IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Kook. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetCachedMessages(Guid, Direction, int) Gets the last N cached messages starting from a certain message in this message channel. public IReadOnlyCollection<SocketMessage> GetCachedMessages(Guid fromMessageId, Direction dir, int limit = 50) Parameters fromMessageId Guid The message ID to start the fetching from. dir Direction The direction of which the message should be gotten from. limit int The number of messages to get. Returns IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Kook. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetCachedMessages(int) Gets the last N cached messages from this message channel. public IReadOnlyCollection<SocketMessage> GetCachedMessages(int limit = 50) Parameters limit int The number of messages to get. Returns IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Kook. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetInvitesAsync(RequestOptions?) Gets a collection of all invites from this guild channel. public Task<IReadOnlyCollection<IInvite>> GetInvitesAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IInvite>> A task that represents the asynchronous get operation. The task result contains a read-only collection of invite, each representing information for an invite found within this guild. GetMessageAsync(Guid, RequestOptions?) Gets a message from this message channel. public Task<IMessage> GetMessageAsync(Guid id, RequestOptions? options = null) Parameters id Guid The identifier of the message. options RequestOptions The options to be used when sending the request. Returns Task<IMessage> A task that represents an asynchronous get operation for retrieving the message. The task result contains the retrieved message; null if no message is found with the specified identifier. Remarks This method follows the same behavior as described in GetMessageAsync(Guid, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. GetMessagesAsync(IMessage, Direction, int, RequestOptions?) Gets a collection of messages in this channel. public virtual IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessage IMessage The starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. GetMessagesAsync(Guid, Direction, int, RequestOptions?) Gets a collection of messages in this channel. public virtual IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessageId Guid The ID of the starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(Guid, Direction, int, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. GetMessagesAsync(int, RequestOptions?) Gets the last N messages from this message channel. public virtual IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(int limit = 50, RequestOptions? options = null) Parameters limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(int, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. GetPinnedMessagesAsync(RequestOptions?) Gets a collection of pinned messages in this channel. public Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestMessage>> A task that represents the asynchronous get operation for retrieving pinned messages in this channel. The task result contains a collection of messages found in the pinned messages. GetUser(ulong) Gets a SocketGuildUser from this channel. public override SocketGuildUser? GetUser(ulong id) Parameters id ulong The user's identifier. Returns SocketGuildUser A SocketGuildUser with the provided identifier; null if none is found. ModifyAsync(Action<ModifyTextChannelProperties>, RequestOptions?) Modifies this text channel. public virtual Task ModifyAsync(Action<ModifyTextChannelProperties> func, RequestOptions? options = null) Parameters func Action<ModifyTextChannelProperties> The delegate containing the properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. See Also ModifyTextChannelProperties ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions?) Modifies a message. public Task ModifyMessageAsync(Guid messageId, Action<MessageProperties> func, RequestOptions? options = null) Parameters messageId Guid The identifier of the message that would be changed. func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties. SendCardAsync(ICard, IQuote?, IUser?, RequestOptions?) Sends a card message to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendCardAsync(ICard card, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters card ICard The card to be sent. quote IQuote The message quote to be included. Used to reply to specific messages. ephemeralUser IUser The user only who can see the message. Leave null to let everyone see the message. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendCardsAsync(IEnumerable<ICard>, IQuote?, IUser?, RequestOptions?) Sends a card message to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(IEnumerable<ICard> cards, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters cards IEnumerable<ICard> The cards to be sent. quote IQuote The message quote to be included. Used to reply to specific messages. ephemeralUser IUser The user only who can see the message. Leave null to let everyone see the message. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SendFileAsync(FileAttachment, IQuote?, IUser?, RequestOptions?) Sends a file to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(FileAttachment attachment, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters attachment FileAttachment The attachment containing the file. quote IQuote The message quote to be included. Used to reply to specific messages. ephemeralUser IUser The user only who can see the message. Leave null to let everyone see the message. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendFileAsync(Stream, string, AttachmentType, IQuote?, IUser?, RequestOptions?) Sends a file to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(Stream stream, string filename, AttachmentType type = AttachmentType.File, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters stream Stream The stream of the file. filename string The name of the file. type AttachmentType The type of the file. quote IQuote The message quote to be included. Used to reply to specific messages. ephemeralUser IUser The user only who can see the message. Leave null to let everyone see the message. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendFileAsync(string, string?, AttachmentType, IQuote?, IUser?, RequestOptions?) Sends a file to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(string path, string? filename = null, AttachmentType type = AttachmentType.File, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters path string The file path of the file. filename string The name of the file. type AttachmentType The type of the file. quote IQuote The message quote to be included. Used to reply to specific messages. ephemeralUser IUser The user only who can see the message. Leave null to let everyone see the message. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. Remarks This method sends a file as if you are uploading a file directly from your Kook client. SendTextAsync(string, IQuote?, IUser?, RequestOptions?) Sends a text message to this message channel. public Task<Cacheable<IUserMessage, Guid>> SendTextAsync(string text, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters text string The message to be sent. quote IQuote The message quote to be included. Used to reply to specific messages. ephemeralUser IUser The user only who can see the message. Leave null to let everyone see the message. options RequestOptions The options to be used when sending the request. Returns Task<Cacheable<IUserMessage, Guid>> A task that represents an asynchronous send operation for delivering the message. The task result contains the identifier and timestamp of the sent message. SyncPermissionsAsync(RequestOptions?) Syncs the permissions of this nested channel with its parent's. public virtual Task SyncPermissionsAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for syncing channel permissions with its parent's."
  },
  "api/Kook.WebSocket.SocketUnknownUser.html": {
    "href": "api/Kook.WebSocket.SocketUnknownUser.html",
    "title": "Class SocketUnknownUser | Kook.Net 文档",
    "keywords": "Class SocketUnknownUser Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a WebSocket-based user that is yet to be recognized by the client. public class SocketUnknownUser : SocketUser, IUser, IEntity<ulong>, IMentionable, IPresence Inheritance object SocketEntity<ulong> SocketUser SocketUnknownUser Implements IUser IEntity<ulong> IMentionable IPresence Inherited Members SocketUser.IsSystemUser SocketUser.IdentifyNumber SocketUser.KMarkdownMention SocketUser.PlainTextMention SocketUser.IsOnline SocketUser.ActiveClient SocketUser.CreateDMChannelAsync(RequestOptions) SocketUser.GetIntimacyAsync(RequestOptions) SocketUser.UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) SocketUser.BlockAsync(RequestOptions) SocketUser.UnblockAsync(RequestOptions) SocketUser.RequestFriendAsync(RequestOptions) SocketUser.RemoveFriendAsync(RequestOptions) SocketUser.ToString() SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Format.UsernameAndIdentifyNumber(IUser, bool) UserExtensions.SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendTextAsync(IUser, string, IQuote?, RequestOptions?) Remarks A user may not be recognized due to the user missing from the cache or failed to be recognized properly. Properties Avatar Gets the link to this user's avatar. public override string Avatar { get; } Property Value string Banner Gets the link to this user's banner. public override string? Banner { get; } Property Value string BuffAvatar Gets the link to this user's BUFF avatar. public override string? BuffAvatar { get; } Property Value string HasAnnualBuff Gets whether this user's BUFF subscription is annual; null if unknown. public override bool? HasAnnualBuff { get; } Property Value bool? HasBuff Gets whether this user has subscribed to BUFF; null if unknown. public override bool? HasBuff { get; } Property Value bool? IdentifyNumberValue Gets the per-username unique ID for this user. public override ushort IdentifyNumberValue { get; } Property Value ushort IsBanned Gets whether this user is banned; null if unknown. public override bool? IsBanned { get; } Property Value bool? IsBot Gets whether this user is a bot; null if unknown. public override bool? IsBot { get; } Property Value bool? IsDenoiseEnabled Gets whether this user enabled denoise feature; null if unknown. public override bool? IsDenoiseEnabled { get; } Property Value bool? Nameplates Gets the nameplates this user has. public override IReadOnlyCollection<Nameplate> Nameplates { get; } Property Value IReadOnlyCollection<Nameplate> UserTag Get the tag this user has. public override UserTag? UserTag { get; } Property Value UserTag Username Gets the username for this user. public override string Username { get; } Property Value string"
  },
  "api/Kook.WebSocket.SocketUser.html": {
    "href": "api/Kook.WebSocket.SocketUser.html",
    "title": "Class SocketUser | Kook.Net 文档",
    "keywords": "Class SocketUser Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a WebSocket-based user. public abstract class SocketUser : SocketEntity<ulong>, IUser, IEntity<ulong>, IMentionable, IPresence Inheritance object SocketEntity<ulong> SocketUser Implements IUser IEntity<ulong> IMentionable IPresence Derived SocketGuildUser SocketSelfUser SocketUnknownUser Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Format.UsernameAndIdentifyNumber(IUser, bool) UserExtensions.SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendTextAsync(IUser, string, IQuote?, RequestOptions?) Constructors SocketUser(KookSocketClient, ulong) Initializes a new WebSocket-based user. protected SocketUser(KookSocketClient kook, ulong id) Parameters kook KookSocketClient The WebSocket client. id ulong The identifier of the user. Properties ActiveClient Gets the type of the client where this user is currently active. public ClientType? ActiveClient { get; } Property Value ClientType? Avatar Gets the link to this user's avatar. public abstract string Avatar { get; } Property Value string Banner Gets the link to this user's banner. public abstract string? Banner { get; } Property Value string BuffAvatar Gets the link to this user's BUFF avatar. public abstract string? BuffAvatar { get; } Property Value string HasAnnualBuff Gets whether this user's BUFF subscription is annual; null if unknown. public abstract bool? HasAnnualBuff { get; } Property Value bool? HasBuff Gets whether this user has subscribed to BUFF; null if unknown. public abstract bool? HasBuff { get; } Property Value bool? IdentifyNumber Gets the per-username unique ID for this user. public string IdentifyNumber { get; } Property Value string IdentifyNumberValue Gets the per-username unique ID for this user. public abstract ushort IdentifyNumberValue { get; } Property Value ushort IsBanned Gets whether this user is banned; null if unknown. public abstract bool? IsBanned { get; } Property Value bool? IsBot Gets whether this user is a bot; null if unknown. public abstract bool? IsBot { get; } Property Value bool? IsDenoiseEnabled Gets whether this user enabled denoise feature; null if unknown. public abstract bool? IsDenoiseEnabled { get; } Property Value bool? IsOnline Gets the current status of this user. public bool? IsOnline { get; } Property Value bool? IsSystemUser Gets whether this user is a system user. public bool IsSystemUser { get; } Property Value bool KMarkdownMention Returns a special string used to mention this object in KMarkdown formatted text. public string KMarkdownMention { get; } Property Value string A string that is recognized by Kook as a mention in KMarkdown formatted text. Nameplates Gets the nameplates this user has. public abstract IReadOnlyCollection<Nameplate> Nameplates { get; } Property Value IReadOnlyCollection<Nameplate> PlainTextMention Returns a special string used to mention this object in plain text formatted text. public string PlainTextMention { get; } Property Value string A string that is recognized by Kook as a mention in plain text formatted text. UserTag Get the tag this user has. public abstract UserTag? UserTag { get; } Property Value UserTag Username Gets the username for this user. public abstract string Username { get; } Property Value string Methods BlockAsync(RequestOptions?) Gets the friend state with this user. public Task BlockAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for getting the friend state. CreateDMChannelAsync(RequestOptions?) Creates the direct message channel of this user. public Task<SocketDMChannel> CreateDMChannelAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<SocketDMChannel> A task that represents the asynchronous operation for getting or creating a DM channel. The task result contains the DM channel associated with this user. Remarks This method is used to obtain or create a channel used to send a direct message. warning In event that the current user cannot send a message to the target user, a channel can and will still be created by Kook. However, attempting to send a message will yield a HttpException with a 403 as its HttpCode. There are currently no official workarounds by Kook. GetIntimacyAsync(RequestOptions?) Gets the intimacy information with this user. public Task<RestIntimacy> GetIntimacyAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestIntimacy> A task that represents the asynchronous operation for getting the intimacy information. The task result contains the intimacy information associated with this user. RemoveFriendAsync(RequestOptions?) Gets the friend state with this user. public Task RemoveFriendAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for getting the friend state. RequestFriendAsync(RequestOptions?) Sends a friend request to this user. public Task RequestFriendAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for sending the friend request. ToString() Gets the full name of the user (e.g. Example#0001). public override string ToString() Returns string The full name of the user. UnblockAsync(RequestOptions?) Gets the friend state with this user. public Task UnblockAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for getting the friend state. UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions?) Updates the intimacy information with this user. public Task UpdateIntimacyAsync(Action<IntimacyProperties> func, RequestOptions? options = null) Parameters func Action<IntimacyProperties> A delegate containing the properties to modify the IIntimacy with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for updating the intimacy information."
  },
  "api/Kook.WebSocket.SocketUserMessage.html": {
    "href": "api/Kook.WebSocket.SocketUserMessage.html",
    "title": "Class SocketUserMessage | Kook.Net 文档",
    "keywords": "Class SocketUserMessage Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a WebSocket-based message sent by a user. public class SocketUserMessage : SocketMessage, IUpdateable, IUserMessage, IMessage, IEntity<Guid>, IDeletable Inheritance object SocketEntity<Guid> SocketMessage SocketUserMessage Implements IUpdateable IUserMessage IMessage IEntity<Guid> IDeletable Inherited Members SocketMessage.Author SocketMessage.Channel SocketMessage.Source SocketMessage.Content SocketMessage.RawContent SocketMessage.CleanContent SocketMessage.Timestamp SocketMessage.EditedTimestamp SocketMessage.Type SocketMessage.MentionedUsers SocketMessage.Reactions SocketMessage.DeleteAsync(RequestOptions) SocketMessage.UpdateAsync(RequestOptions) SocketMessage.AddReactionAsync(IEmote, RequestOptions) SocketMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) SocketMessage.RemoveReactionAsync(IEmote, ulong, RequestOptions) SocketMessage.GetReactionUsersAsync(IEmote, RequestOptions) SocketMessage.ToString() SocketEntity<Guid>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods MessageExtensions.GetJumpUrl(IMessage) MessageExtensions.HasCharPrefix(IUserMessage, char, ref int) MessageExtensions.HasMentionPrefix(IUserMessage, IUser, ref int) MessageExtensions.HasStringPrefix(IUserMessage, string, ref int, StringComparison) MessageExtensions.TryExpandCardContent(IUserMessage, out string?) MessageExtensions.AddReactionsAsync(IUserMessage, IEnumerable<IEmote>, RequestOptions?) MessageExtensions.MaybeTextImageMixedMessage(IUserMessage) MessageExtensions.RemoveReactionsAsync(IUserMessage, IUser, IEnumerable<IEmote>, RequestOptions?) MessageExtensions.ReplyCardAsync(IUserMessage, ICard, bool, bool, RequestOptions?) MessageExtensions.ReplyCardsAsync(IUserMessage, IEnumerable<ICard>, bool, bool, RequestOptions?) MessageExtensions.ReplyFileAsync(IUserMessage, FileAttachment, bool, bool, RequestOptions?) MessageExtensions.ReplyFileAsync(IUserMessage, Stream, string, AttachmentType, bool, bool, RequestOptions?) MessageExtensions.ReplyFileAsync(IUserMessage, string, string?, AttachmentType, bool, bool, RequestOptions?) MessageExtensions.ReplyTextAsync(IUserMessage, string, bool, bool, RequestOptions?) Properties Attachments Gets the attachment included in this message. public override IReadOnlyCollection<Attachment> Attachments { get; } Property Value IReadOnlyCollection<Attachment> Cards Returns all cards included in this message. public override IReadOnlyCollection<ICard> Cards { get; } Property Value IReadOnlyCollection<ICard> Collection of card objects. Embeds Returns all embeds included in this message. public override IReadOnlyCollection<IEmbed> Embeds { get; } Property Value IReadOnlyCollection<IEmbed> Collection of embed objects. Guild Gets the SocketGuild that the message was sent from. public SocketGuild? Guild { get; } Property Value SocketGuild The SocketGuild that the message was sent from. IsPinned Gets the value that indicates whether this message is pinned. public override bool IsPinned { get; protected set; } Property Value bool true if this message was added to its channel's pinned messages; otherwise false. MentionedChannels Gets a collection of the mentioned channels in the message. public IReadOnlyCollection<SocketGuildChannel> MentionedChannels { get; } Property Value IReadOnlyCollection<SocketGuildChannel> MentionedEveryone Gets the value that indicates whether this message mentioned everyone. public override bool MentionedEveryone { get; } Property Value bool true if this message mentioned everyone; otherwise false. MentionedHere Gets the value that indicates whether this message mentioned online users. public override bool MentionedHere { get; } Property Value bool true if this message mentioned online users; otherwise false. MentionedRoles Returns the roles mentioned in this message. public override IReadOnlyCollection<SocketRole> MentionedRoles { get; } Property Value IReadOnlyCollection<SocketRole> Collection of WebSocket-based roles. Pokes Gets a collection of the SocketPokeAction's on the message. public override IReadOnlyCollection<SocketPokeAction> Pokes { get; } Property Value IReadOnlyCollection<SocketPokeAction> Collection of poke action objects. Quote Gets the message quote. public IQuote? Quote { get; } Property Value IQuote The message quote. Tags Gets all tags included in this message's content. public override IReadOnlyCollection<ITag> Tags { get; } Property Value IReadOnlyCollection<ITag> Methods ModifyAsync(Action<MessageProperties>, RequestOptions?) Modifies this message. public Task ModifyAsync(Action<MessageProperties> func, RequestOptions? options = null) Parameters func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties. Exceptions InvalidOperationException Only the author of a message may modify the message. ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) Transforms this message's text into a human-readable form by resolving its tags. public string Resolve(TagHandling userHandling = TagHandling.Name, TagHandling channelHandling = TagHandling.Name, TagHandling roleHandling = TagHandling.Name, TagHandling everyoneHandling = TagHandling.Name, TagHandling emojiHandling = TagHandling.Name) Parameters userHandling TagHandling Determines how the user tag should be handled. channelHandling TagHandling Determines how the channel tag should be handled. roleHandling TagHandling Determines how the role tag should be handled. everyoneHandling TagHandling Determines how the @everyone tag should be handled. emojiHandling TagHandling Determines how the emoji tag should be handled. Returns string Resolve(int, TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) Transforms this message's text into a human-readable form by resolving its tags. public string Resolve(int startIndex, TagHandling userHandling = TagHandling.Name, TagHandling channelHandling = TagHandling.Name, TagHandling roleHandling = TagHandling.Name, TagHandling everyoneHandling = TagHandling.Name, TagHandling emojiHandling = TagHandling.Name) Parameters startIndex int The zero-based index at which to begin the resolving for the specified value. userHandling TagHandling Determines how the user tag should be handled. channelHandling TagHandling Determines how the channel tag should be handled. roleHandling TagHandling Determines how the role tag should be handled. everyoneHandling TagHandling Determines how the @everyone tag should be handled. emojiHandling TagHandling Determines how the emoji tag should be handled. Returns string"
  },
  "api/Kook.WebSocket.SocketVoiceChannel.html": {
    "href": "api/Kook.WebSocket.SocketVoiceChannel.html",
    "title": "Class SocketVoiceChannel | Kook.Net 文档",
    "keywords": "Class SocketVoiceChannel Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a WebSocket-based voice channel in a guild. public class SocketVoiceChannel : SocketTextChannel, IUpdateable, ISocketMessageChannel, IVoiceChannel, ITextChannel, INestedChannel, IGuildChannel, IDeletable, IMentionable, IMessageChannel, ISocketAudioChannel, IAudioChannel, IChannel, IEntity<ulong>, IDisposable Inheritance object SocketEntity<ulong> SocketChannel SocketGuildChannel SocketTextChannel SocketVoiceChannel Implements IUpdateable ISocketMessageChannel IVoiceChannel ITextChannel INestedChannel IGuildChannel IDeletable IMentionable IMessageChannel ISocketAudioChannel IAudioChannel IChannel IEntity<ulong> IDisposable Inherited Members SocketTextChannel.Topic SocketTextChannel.SlowModeInterval SocketTextChannel.CategoryId SocketTextChannel.Category SocketTextChannel.IsPermissionSynced SocketTextChannel.KMarkdownMention SocketTextChannel.PlainTextMention SocketTextChannel.CachedMessages SocketTextChannel.ModifyAsync(Action<ModifyTextChannelProperties>, RequestOptions) SocketTextChannel.SyncPermissionsAsync(RequestOptions) SocketTextChannel.GetCachedMessage(Guid) SocketTextChannel.GetMessageAsync(Guid, RequestOptions) SocketTextChannel.GetCachedMessages(int) SocketTextChannel.GetCachedMessages(Guid, Direction, int) SocketTextChannel.GetCachedMessages(IMessage, Direction, int) SocketTextChannel.GetPinnedMessagesAsync(RequestOptions) SocketTextChannel.SendFileAsync(string, string, AttachmentType, IQuote, IUser, RequestOptions) SocketTextChannel.SendFileAsync(Stream, string, AttachmentType, IQuote, IUser, RequestOptions) SocketTextChannel.SendFileAsync(FileAttachment, IQuote, IUser, RequestOptions) SocketTextChannel.SendTextAsync(string, IQuote, IUser, RequestOptions) SocketTextChannel.SendCardsAsync(IEnumerable<ICard>, IQuote, IUser, RequestOptions) SocketTextChannel.SendCardAsync(ICard, IQuote, IUser, RequestOptions) SocketTextChannel.ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions) SocketTextChannel.DeleteMessageAsync(Guid, RequestOptions) SocketTextChannel.DeleteMessageAsync(IMessage, RequestOptions) SocketTextChannel.GetInvitesAsync(RequestOptions) SocketTextChannel.CreateInviteAsync(int?, int?, RequestOptions) SocketTextChannel.CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions) SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Position SocketGuildChannel.Type SocketGuildChannel.CreatorId SocketGuildChannel.Creator SocketGuildChannel.RolePermissionOverwrites SocketGuildChannel.UserPermissionOverwrites SocketGuildChannel.UpdateAsync(RequestOptions) SocketGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) SocketGuildChannel.DeleteAsync(RequestOptions) SocketGuildChannel.GetPermissionOverwrite(IUser) SocketGuildChannel.GetPermissionOverwrite(IRole) SocketGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) SocketGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) SocketGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) SocketGuildChannel.ToString() SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) SocketVoiceChannelExperimentalExtensions.DisconnectUserAsync(SocketVoiceChannel, IGuildUser, RequestOptions?) Properties AudioClient Gets the IAudioClient associated with this guild. public IAudioClient? AudioClient { get; } Property Value IAudioClient ConnectedUsers Gets a collection of users that are currently connected to this voice channel. public IReadOnlyCollection<SocketGuildUser> ConnectedUsers { get; } Property Value IReadOnlyCollection<SocketGuildUser> A read-only collection of users that are currently connected to this voice channel. Remarks warning This property may not always return all the members that are connected to this voice channel, because uses may connected this voice channel before the bot has connected to the gateway. To ensure accuracy, you may need to enable AlwaysDownloadVoiceStates to fetch the full voice states upon startup, or use DownloadVoiceStatesAsync(RequestOptions?) on the guild this voice channel belongs to to manually download the users voice states, or use GetConnectedUsersAsync(CacheMode, RequestOptions?) to fetch the connected users from the API. HasPassword Gets whether this voice channel is locked by a password. public bool HasPassword { get; } Property Value bool A bool representing whether this voice channel is locked by a password. IsVoiceRegionOverwritten Gets whether the voice region of this audio channel is overwritten. public bool? IsVoiceRegionOverwritten { get; } Property Value bool? ServerUrl Gets the server url that clients should connect to to join this voice channel. public string? ServerUrl { get; } Property Value string A string representing the url that clients should connect to to join this voice channel. UserLimit Gets the max number of users allowed to be connected to this channel at once. public int UserLimit { get; } Property Value int An int representing the maximum number of users that are allowed to be connected to this channel at once; 0 if a limit is not set. Users Gets a collection of users that are able to view the channel. public override IReadOnlyCollection<SocketGuildUser> Users { get; } Property Value IReadOnlyCollection<SocketGuildUser> A read-only collection of users that can access the channel (i.e. the users seen in the user list). See Also ConnectedUsers VoiceQuality Gets the voice quality that the clients in this voice channel are requested to use. public VoiceQuality? VoiceQuality { get; } Property Value VoiceQuality? A VoiceQuality representing the voice quality that this voice channel defines and requests the client(s) to use. VoiceRegion Gets the voice region for this audio channel. public string? VoiceRegion { get; } Property Value string Remarks warning This property may be empty if the voice channel is created before this feature was released. Methods ConnectAsync(bool, bool, string?) Connects to this audio channel. public Task<IAudioClient?> ConnectAsync(bool external = false, bool disconnect = true, string? password = null) Parameters external bool Determines whether the audio client is an external one or not. disconnect bool Determines whether the client should send a disconnect call before connecting to a new voice channel. password string The password to use when connecting to the audio channel. Returns Task<IAudioClient> A task representing the asynchronous connection operation. The task result contains the IAudioClient responsible for the connection. DisconnectAsync() Disconnects from this audio channel. public Task DisconnectAsync() Returns Task A task representing the asynchronous operation for disconnecting from the audio channel. GetConnectedUsersAsync(CacheMode, RequestOptions?) Gets a collection of users that are currently connected to this voice channel. public Task<IReadOnlyCollection<SocketGuildUser>> GetConnectedUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<SocketGuildUser>> A task that represents the asynchronous get operation. The task result contains a read-only collection of users that are currently connected to this voice channel. GetMessagesAsync(IMessage, Direction, int, RequestOptions?) Gets a collection of messages in this channel. public override IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessage IMessage The starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. Exceptions NotSupportedException Getting messages from a voice channel is not supported. GetMessagesAsync(Guid, Direction, int, RequestOptions?) Gets a collection of messages in this channel. public override IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessageId Guid The ID of the starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(Guid, Direction, int, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. Exceptions NotSupportedException Getting messages from a voice channel is not supported. GetMessagesAsync(int, RequestOptions?) Gets the last N messages from this message channel. public override IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(int limit = 50, RequestOptions? options = null) Parameters limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(int, CacheMode, RequestOptions?). Please visit its documentation for more details on this method. Exceptions NotSupportedException Getting messages from a voice channel is not supported. GetUser(ulong) Gets a SocketGuildUser from this channel. public override SocketGuildUser? GetUser(ulong id) Parameters id ulong The user's identifier. Returns SocketGuildUser A SocketGuildUser with the provided identifier; null if none is found. ModifyAsync(Action<ModifyVoiceChannelProperties>, RequestOptions?) Modifies this voice channel. public Task ModifyAsync(Action<ModifyVoiceChannelProperties> func, RequestOptions? options = null) Parameters func Action<ModifyVoiceChannelProperties> The properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. See Also ModifyVoiceChannelProperties"
  },
  "api/Kook.WebSocket.SocketVoiceChannelExperimentalExtensions.html": {
    "href": "api/Kook.WebSocket.SocketVoiceChannelExperimentalExtensions.html",
    "title": "Class SocketVoiceChannelExperimentalExtensions | Kook.Net 文档",
    "keywords": "Class SocketVoiceChannelExperimentalExtensions Namespace Kook.WebSocket Assembly Kook.Net.Experimental.dll Provides extension methods of experimental functionalities for SocketVoiceChannels. public static class SocketVoiceChannelExperimentalExtensions Inheritance object SocketVoiceChannelExperimentalExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DisconnectUserAsync(SocketVoiceChannel, IGuildUser, RequestOptions?) Disconnects the specified user from the voice channel. public static Task DisconnectUserAsync(this SocketVoiceChannel channel, IGuildUser user, RequestOptions? options = null) Parameters channel SocketVoiceChannel The voice channel where the use is connected to. user IGuildUser The user to disconnect. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for disconnecting the user from the voice channel. Remarks warning This method is still in experimental state, which means that it is not for official API implementation usage, may violate the developer rules or policies, not guaranteed to be stable, and may be changed or removed in the future."
  },
  "api/Kook.WebSocket.SocketVoiceState.html": {
    "href": "api/Kook.WebSocket.SocketVoiceState.html",
    "title": "Struct SocketVoiceState | Kook.Net 文档",
    "keywords": "Struct SocketVoiceState Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents a WebSocket user's voice connection status. public struct SocketVoiceState : IVoiceState Implements IVoiceState Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors SocketVoiceState() Initializes a new SocketVoiceState with the specified voice channel. public SocketVoiceState() Properties Default Initializes a default SocketVoiceState with everything set to null or false. public static SocketVoiceState Default { get; } Property Value SocketVoiceState IsDeafened Gets a value that indicates whether this user is deafened by the guild. public readonly bool? IsDeafened { get; } Property Value bool? true if the user is deafened (i.e. not permitted to listen to or speak to others) by the guild; otherwise false; null if unknown. IsMuted Gets a value that indicates whether this user is muted (i.e. not permitted to speak via voice) by the guild. public readonly bool? IsMuted { get; } Property Value bool? true if this user is muted by the guild; otherwise false; null if unknown. LiveStreamStatus Gets the live stream status of the user. public readonly LiveStreamStatus? LiveStreamStatus { get; } Property Value LiveStreamStatus? VoiceChannel Gets the voice channel that the user is currently in; or null if none. public SocketVoiceChannel? VoiceChannel { get; } Property Value SocketVoiceChannel VoiceChannels Gets a collection of voice channels that the user is connected to. public IReadOnlyCollection<SocketVoiceChannel> VoiceChannels { get; } Property Value IReadOnlyCollection<SocketVoiceChannel> Remarks Currently, KOOK only allows a user to be in one voice channel at a time, but allows a Bot user to be in multiple voice channels at a time. Methods ToString() Gets the name of this voice channel. public override string ToString() Returns string A string that resolves to name of this voice channel; otherwise \"Unknown\"."
  },
  "api/Kook.WebSocket.StartupCacheFetchMode.html": {
    "href": "api/Kook.WebSocket.StartupCacheFetchMode.html",
    "title": "Enum StartupCacheFetchMode | Kook.Net 文档",
    "keywords": "Enum StartupCacheFetchMode Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll Represents the mode in which the socket client fetches the cache when starting up. public enum StartupCacheFetchMode Fields Asynchronous = 2 Fetches the cache asynchronously. Auto = 0 Automatically selects the best mode based on the number of guilds. Lazy = 3 Fetches the cache lazily. Synchronous = 1 Fetches the cache synchronously."
  },
  "api/Kook.WebSocket.html": {
    "href": "api/Kook.WebSocket.html",
    "title": "Namespace Kook.WebSocket | Kook.Net 文档",
    "keywords": "Namespace Kook.WebSocket Classes BaseSocketClient Represents an abstract base class for WebSocket-based clients. BaseSocketClientExperimentalExtensions Provides extension methods of experimental functionalities for BaseSocketClients. GatewayReconnectException The exception thrown when the gateway client has been requested to reconnect. KookSocketClient Represents a WebSocket-based KOOK client. KookSocketConfig Represents a configuration class for KookSocketClient. KookSocketRestClient Represents an REST-only client that is used in a WebSocket-based client. SocketCategoryChannel Represents a WebSocket-based category channel. SocketChannel Represents a WebSocket-based channel. SocketDMChannel Represents a WebSocket-based direct-message channel. SocketEntity<T> Represents a WebSocket-based entity. SocketGuild Represents a WebSocket-based guild object. SocketGuildChannel Represent a WebSocket-based guild channel. SocketGuildExperimentalExtensions Provides extension methods of experimental functionalities for SocketGuilds. SocketGuildUser Represents a WebSocket-based guild user. SocketInvite Represents a WebSocket-based invite to a guild. SocketMessage Represents a WebSocket-based message. SocketPokeAction Represents a single WebSocket-based poke action. SocketPresence Represents the WebSocket user's presence status. This may include their online status and their activity. SocketReaction Represents a WebSocket-based reaction. SocketRole Represents a WebSocket-based role to be given to a guild user. SocketSelfUser Represents the logged-in WebSocket-based user. SocketSystemMessage Represents a WebSocket-based message sent by the system. SocketTextChannel Represents a WebSocket-based channel in a guild that can send and receive messages. SocketUnknownUser Represents a WebSocket-based user that is yet to be recognized by the client. SocketUser Represents a WebSocket-based user. SocketUserMessage Represents a WebSocket-based message sent by a user. SocketVoiceChannel Represents a WebSocket-based voice channel in a guild. SocketVoiceChannelExperimentalExtensions Provides extension methods of experimental functionalities for SocketVoiceChannels. Structs LiveStreamStatus Represents the status of a live stream. SocketVoiceState Represents a WebSocket user's voice connection status. Interfaces ISocketAudioChannel Represents a generic WebSocket-based audio channel. ISocketMessageChannel Represents a generic WebSocket-based channel that can send and receive messages. ISocketPrivateChannel Represents a generic WebSocket-based channel that is private to select recipients. Enums StartupCacheFetchMode Represents the mode in which the socket client fetches the cache when starting up."
  },
  "api/Kook.Webhook.AspNet.KookAspNetWebhookClient.html": {
    "href": "api/Kook.Webhook.AspNet.KookAspNetWebhookClient.html",
    "title": "Class KookAspNetWebhookClient | Kook.Net 文档",
    "keywords": "Class KookAspNetWebhookClient Namespace Kook.Webhook.AspNet Assembly Kook.Net.Webhook.AspNet.dll Represents a KOOK webhook client using ASP.NET. public class KookAspNetWebhookClient : KookWebhookClient, IKookClient, IDisposable, IHostedService Inheritance object BaseKookClient BaseSocketClient KookSocketClient KookWebhookClient KookAspNetWebhookClient Implements IKookClient IDisposable IHostedService Inherited Members KookSocketClient.Rest KookSocketClient.ConnectionState KookSocketClient.Latency KookSocketClient.Guilds KookSocketClient.DMChannels KookSocketClient.GetGuild(ulong) KookSocketClient.GetChannel(ulong) KookSocketClient.GetDMChannel(Guid) KookSocketClient.GetDMChannel(ulong) KookSocketClient.GetChannelAsync(ulong, RequestOptions) KookSocketClient.GetDMChannelAsync(Guid, RequestOptions) KookSocketClient.GetDMChannelsAsync(RequestOptions) KookSocketClient.GetUserAsync(ulong, RequestOptions) KookSocketClient.GetUser(ulong) KookSocketClient.GetUser(string, string) KookSocketClient.DownloadUsersAsync(IEnumerable<IGuild>, RequestOptions) KookSocketClient.DownloadVoiceStatesAsync(IEnumerable<IGuild>, RequestOptions) KookSocketClient.DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>, RequestOptions) KookSocketClient.Connected KookSocketClient.Disconnected KookSocketClient.Ready KookSocketClient.LatencyUpdated BaseSocketClient.BaseConfig BaseSocketClient.CurrentUser BaseSocketClient.ChannelCreated BaseSocketClient.ChannelDestroyed BaseSocketClient.ChannelUpdated BaseSocketClient.ReactionAdded BaseSocketClient.ReactionRemoved BaseSocketClient.DirectReactionAdded BaseSocketClient.DirectReactionRemoved BaseSocketClient.MessageReceived BaseSocketClient.MessageDeleted BaseSocketClient.MessageUpdated BaseSocketClient.MessagePinned BaseSocketClient.MessageUnpinned BaseSocketClient.DirectMessageReceived BaseSocketClient.DirectMessageDeleted BaseSocketClient.DirectMessageUpdated BaseSocketClient.UserJoined BaseSocketClient.UserLeft BaseSocketClient.UserBanned BaseSocketClient.UserUnbanned BaseSocketClient.UserUpdated BaseSocketClient.CurrentUserUpdated BaseSocketClient.GuildMemberUpdated BaseSocketClient.GuildMemberOnline BaseSocketClient.GuildMemberOffline BaseSocketClient.UserVoiceStateUpdated BaseSocketClient.UserConnected BaseSocketClient.UserDisconnected BaseSocketClient.RoleCreated BaseSocketClient.RoleDeleted BaseSocketClient.RoleUpdated BaseSocketClient.EmoteCreated BaseSocketClient.EmoteDeleted BaseSocketClient.EmoteUpdated BaseSocketClient.JoinedGuild BaseSocketClient.LeftGuild BaseSocketClient.GuildUpdated BaseSocketClient.GuildAvailable BaseSocketClient.GuildUnavailable BaseSocketClient.MessageButtonClicked BaseSocketClient.DirectMessageButtonClicked BaseKookClient.Log BaseKookClient.LoggedIn BaseKookClient.LoggedOut BaseKookClient.SentRequest BaseKookClient.LoginState BaseKookClient.TokenType BaseKookClient.Dispose() BaseKookClient.LoginAsync(TokenType, string, bool) BaseKookClient.LogoutAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods StartAsync() Starts the WebSocket connection. public override Task StartAsync() Returns Task A task that represents the asynchronous start operation. StopAsync() Stops the WebSocket connection. public override Task StopAsync() Returns Task A task that represents the asynchronous stop operation."
  },
  "api/Kook.Webhook.AspNet.KookAspNetWebhookConfig.html": {
    "href": "api/Kook.Webhook.AspNet.KookAspNetWebhookConfig.html",
    "title": "Class KookAspNetWebhookConfig | Kook.Net 文档",
    "keywords": "Class KookAspNetWebhookConfig Namespace Kook.Webhook.AspNet Assembly Kook.Net.Webhook.AspNet.dll Represents a KOOK webhook client configuration for ASP.NET. public class KookAspNetWebhookConfig : KookWebhookConfig Inheritance object KookConfig KookRestConfig KookSocketConfig KookWebhookConfig KookAspNetWebhookConfig Inherited Members KookWebhookConfig.VerifyToken KookWebhookConfig.EncryptKey KookWebhookConfig.AutoLogin KookWebhookConfig.AutoLogout KookWebhookConfig.WebhookProvider KookWebhookConfig.HeartbeatIntervalMilliseconds KookSocketConfig.GatewayEncoding KookSocketConfig.GatewayHost KookSocketConfig.ConnectionTimeout KookSocketConfig.RtcpIntervalMilliseconds KookSocketConfig.HandlerTimeout KookSocketConfig.SmallNumberOfGuildsThreshold KookSocketConfig.LargeNumberOfGuildsThreshold KookSocketConfig.MessageCacheSize KookSocketConfig.WebSocketProvider KookSocketConfig.UdpSocketProvider KookSocketConfig.StartupCacheFetchMode KookSocketConfig.AudioClientIdleTimeout KookSocketConfig.AlwaysDownloadUsers KookSocketConfig.AlwaysDownloadVoiceStates KookSocketConfig.AlwaysDownloadBoostSubscriptions KookSocketConfig.MaxJoinedGuildDataFetchingRetryTimes KookSocketConfig.JoinedGuildDataFetchingRetryDelay KookSocketConfig.AutoUpdateRolePositions KookSocketConfig.AutoUpdateChannelPositions KookSocketConfig.MessageQueueProvider KookRestConfig.RestClientProvider KookConfig.APIVersion KookConfig.VoiceAPIVersion KookConfig.Version KookConfig.UserAgent KookConfig.AcceptLanguage KookConfig.APIUrl KookConfig.DefaultRequestTimeout KookConfig.MaxMessageSize KookConfig.MaxUsersPerBatch KookConfig.MaxMessagesPerBatch KookConfig.MaxItemsPerBatchByDefault KookConfig.MinNicknameSize KookConfig.MaxNicknameSize KookConfig.MinIntimacyScore KookConfig.MaxIntimacyScore KookConfig.BoostPackDuration KookConfig.DefaultRetryMode KookConfig.DefaultRatelimitCallback KookConfig.LogLevel KookConfig.FormatUsersInBidirectionalUnicode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors KookAspNetWebhookConfig() Initializes a new instance of the KookAspNetWebhookConfig class. public KookAspNetWebhookConfig() Properties RoutePattern Gets or sets the route endpoint for the webhook. public string RoutePattern { get; set; } Property Value string Token Gets or sets the token used to authenticate with the KOOK API. public string? Token { get; set; } Property Value string TokenType Gets or sets the token type used to authenticate with the KOOK API. public TokenType? TokenType { get; set; } Property Value TokenType? ValidateToken Gets or sets a value indicating whether the token should be validated before logging in. public bool ValidateToken { get; set; } Property Value bool"
  },
  "api/Kook.Webhook.AspNet.KookWebhookClientExtension.html": {
    "href": "api/Kook.Webhook.AspNet.KookWebhookClientExtension.html",
    "title": "Class KookWebhookClientExtension | Kook.Net 文档",
    "keywords": "Class KookWebhookClientExtension Namespace Kook.Webhook.AspNet Assembly Kook.Net.Webhook.AspNet.dll Provides extension methods for Kook webhook client. public static class KookWebhookClientExtension Inheritance object KookWebhookClientExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddKookAspNetWebhookClient(IServiceCollection) Adds a KOOK webhook client to the specified IServiceCollection. public static IServiceCollection AddKookAspNetWebhookClient(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to add the KOOK webhook client to. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddKookAspNetWebhookClient(IServiceCollection, KookAspNetWebhookConfig) Adds a KOOK webhook client to the specified IServiceCollection. public static IServiceCollection AddKookAspNetWebhookClient(this IServiceCollection services, KookAspNetWebhookConfig config) Parameters services IServiceCollection The IServiceCollection to add the KOOK webhook client to. config KookAspNetWebhookConfig The KookSocketConfig to configure the KOOK webhook client with. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddKookAspNetWebhookClient(IServiceCollection, Action<KookAspNetWebhookConfig>) Adds a KOOK webhook client to the specified IServiceCollection. public static IServiceCollection AddKookAspNetWebhookClient(this IServiceCollection services, Action<KookAspNetWebhookConfig> configure) Parameters services IServiceCollection The IServiceCollection to add the KOOK webhook client to. configure Action<KookAspNetWebhookConfig> The KookSocketConfig to configure the KOOK webhook client with. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. UseAspNetWebhookClient(IKookClientServiceConfigurator, Action<KookAspNetWebhookConfig>) Configures the KOOK service to use the ASP.NET webhook client. public static IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig> UseAspNetWebhookClient(this IKookClientServiceConfigurator configurator, Action<KookAspNetWebhookConfig> configure) Parameters configurator IKookClientServiceConfigurator The KOOK service configurator. configure Action<KookAspNetWebhookConfig> The configuration action. Returns IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig> The KOOK service configurator. UseHostedClient(IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig>, TokenType, string, bool) Configures the KOOK service to use the ASP.NET webhook client. [Obsolete(\"The KookAspNetWebhookClient itself is a hosted service, configure the token in the KookAspNetWebhookConfig.\")] public static IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig> UseHostedClient(this IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig> configurator, TokenType tokenType, string token, bool validateToken = true) Parameters configurator IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig> The KOOK service configurator. tokenType TokenType The token type. token string The token. validateToken bool The value indicating whether to validate the token. Returns IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig> The KOOK service configurator. UseHostedClient(IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) Configures the KOOK service to use the ASP.NET webhook client. [Obsolete(\"The KookAspNetWebhookClient itself is a hosted service, configure the token in the KookAspNetWebhookConfig.\")] public static IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig> UseHostedClient(this IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig> configurator, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) Parameters configurator IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig> The KOOK service configurator. tokenType Func<IServiceProvider, TokenType> The token type. token Func<IServiceProvider, string> The token. validateToken Func<IServiceProvider, bool> The value indicating whether to validate the token. Returns IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig> The KOOK service configurator. UseKookEndpoint<T>(T, string?) Adds a KOOK webhook endpoint to the specified IApplicationBuilder. public static T UseKookEndpoint<T>(this T builder, string? routePattern = null) where T : IHost, IEndpointRouteBuilder Parameters builder T The IApplicationBuilder to add the KOOK webhook endpoint to. routePattern string The route pattern to use for the KOOK webhook endpoint. Returns T A reference to this instance after the operation has completed. Type Parameters T"
  },
  "api/Kook.Webhook.AspNet.html": {
    "href": "api/Kook.Webhook.AspNet.html",
    "title": "Namespace Kook.Webhook.AspNet | Kook.Net 文档",
    "keywords": "Namespace Kook.Webhook.AspNet Classes KookAspNetWebhookClient Represents a KOOK webhook client using ASP.NET. KookAspNetWebhookConfig Represents a KOOK webhook client configuration for ASP.NET. KookWebhookClientExtension Provides extension methods for Kook webhook client."
  },
  "api/Kook.Webhook.HttpListener.KookHttpListenerWebhookClient.html": {
    "href": "api/Kook.Webhook.HttpListener.KookHttpListenerWebhookClient.html",
    "title": "Class KookHttpListenerWebhookClient | Kook.Net 文档",
    "keywords": "Class KookHttpListenerWebhookClient Namespace Kook.Webhook.HttpListener Assembly Kook.Net.Webhook.HttpListener.dll Represents a KOOK webhook client using HTTP listener. public class KookHttpListenerWebhookClient : KookWebhookClient, IKookClient, IDisposable Inheritance object BaseKookClient BaseSocketClient KookSocketClient KookWebhookClient KookHttpListenerWebhookClient Implements IKookClient IDisposable Inherited Members KookSocketClient.Rest KookSocketClient.ConnectionState KookSocketClient.Latency KookSocketClient.Guilds KookSocketClient.DMChannels KookSocketClient.GetGuild(ulong) KookSocketClient.GetChannel(ulong) KookSocketClient.GetDMChannel(Guid) KookSocketClient.GetDMChannel(ulong) KookSocketClient.GetChannelAsync(ulong, RequestOptions) KookSocketClient.GetDMChannelAsync(Guid, RequestOptions) KookSocketClient.GetDMChannelsAsync(RequestOptions) KookSocketClient.GetUserAsync(ulong, RequestOptions) KookSocketClient.GetUser(ulong) KookSocketClient.GetUser(string, string) KookSocketClient.DownloadUsersAsync(IEnumerable<IGuild>, RequestOptions) KookSocketClient.DownloadVoiceStatesAsync(IEnumerable<IGuild>, RequestOptions) KookSocketClient.DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>, RequestOptions) KookSocketClient.Connected KookSocketClient.Disconnected KookSocketClient.Ready KookSocketClient.LatencyUpdated BaseSocketClient.BaseConfig BaseSocketClient.CurrentUser BaseSocketClient.ChannelCreated BaseSocketClient.ChannelDestroyed BaseSocketClient.ChannelUpdated BaseSocketClient.ReactionAdded BaseSocketClient.ReactionRemoved BaseSocketClient.DirectReactionAdded BaseSocketClient.DirectReactionRemoved BaseSocketClient.MessageReceived BaseSocketClient.MessageDeleted BaseSocketClient.MessageUpdated BaseSocketClient.MessagePinned BaseSocketClient.MessageUnpinned BaseSocketClient.DirectMessageReceived BaseSocketClient.DirectMessageDeleted BaseSocketClient.DirectMessageUpdated BaseSocketClient.UserJoined BaseSocketClient.UserLeft BaseSocketClient.UserBanned BaseSocketClient.UserUnbanned BaseSocketClient.UserUpdated BaseSocketClient.CurrentUserUpdated BaseSocketClient.GuildMemberUpdated BaseSocketClient.GuildMemberOnline BaseSocketClient.GuildMemberOffline BaseSocketClient.UserVoiceStateUpdated BaseSocketClient.UserConnected BaseSocketClient.UserDisconnected BaseSocketClient.RoleCreated BaseSocketClient.RoleDeleted BaseSocketClient.RoleUpdated BaseSocketClient.EmoteCreated BaseSocketClient.EmoteDeleted BaseSocketClient.EmoteUpdated BaseSocketClient.JoinedGuild BaseSocketClient.LeftGuild BaseSocketClient.GuildUpdated BaseSocketClient.GuildAvailable BaseSocketClient.GuildUnavailable BaseSocketClient.MessageButtonClicked BaseSocketClient.DirectMessageButtonClicked BaseKookClient.Log BaseKookClient.LoggedIn BaseKookClient.LoggedOut BaseKookClient.SentRequest BaseKookClient.LoginState BaseKookClient.TokenType BaseKookClient.Dispose() BaseKookClient.LoginAsync(TokenType, string, bool) BaseKookClient.LogoutAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSocketClientExperimentalExtensions.CreateGuildAsync(BaseSocketClient, string, IVoiceRegion?, Stream?, int?, RequestOptions?) Constructors KookHttpListenerWebhookClient(KookHttpListenerWebhookConfig) public KookHttpListenerWebhookClient(KookHttpListenerWebhookConfig config) Parameters config KookHttpListenerWebhookConfig Methods StartAsync() Starts the WebSocket connection. public override Task StartAsync() Returns Task A task that represents the asynchronous start operation. StopAsync() Stops the WebSocket connection. public override Task StopAsync() Returns Task A task that represents the asynchronous stop operation."
  },
  "api/Kook.Webhook.HttpListener.KookHttpListenerWebhookConfig.html": {
    "href": "api/Kook.Webhook.HttpListener.KookHttpListenerWebhookConfig.html",
    "title": "Class KookHttpListenerWebhookConfig | Kook.Net 文档",
    "keywords": "Class KookHttpListenerWebhookConfig Namespace Kook.Webhook.HttpListener Assembly Kook.Net.Webhook.HttpListener.dll Represents a KOOK webhook client configuration using HTTP listener. public class KookHttpListenerWebhookConfig : KookWebhookConfig Inheritance object KookConfig KookRestConfig KookSocketConfig KookWebhookConfig KookHttpListenerWebhookConfig Inherited Members KookWebhookConfig.VerifyToken KookWebhookConfig.EncryptKey KookWebhookConfig.AutoLogin KookWebhookConfig.AutoLogout KookWebhookConfig.WebhookProvider KookWebhookConfig.HeartbeatIntervalMilliseconds KookSocketConfig.GatewayEncoding KookSocketConfig.GatewayHost KookSocketConfig.ConnectionTimeout KookSocketConfig.RtcpIntervalMilliseconds KookSocketConfig.HandlerTimeout KookSocketConfig.SmallNumberOfGuildsThreshold KookSocketConfig.LargeNumberOfGuildsThreshold KookSocketConfig.MessageCacheSize KookSocketConfig.WebSocketProvider KookSocketConfig.UdpSocketProvider KookSocketConfig.StartupCacheFetchMode KookSocketConfig.AudioClientIdleTimeout KookSocketConfig.AlwaysDownloadUsers KookSocketConfig.AlwaysDownloadVoiceStates KookSocketConfig.AlwaysDownloadBoostSubscriptions KookSocketConfig.MaxJoinedGuildDataFetchingRetryTimes KookSocketConfig.JoinedGuildDataFetchingRetryDelay KookSocketConfig.AutoUpdateRolePositions KookSocketConfig.AutoUpdateChannelPositions KookSocketConfig.MessageQueueProvider KookRestConfig.RestClientProvider KookConfig.APIVersion KookConfig.VoiceAPIVersion KookConfig.Version KookConfig.UserAgent KookConfig.AcceptLanguage KookConfig.APIUrl KookConfig.DefaultRequestTimeout KookConfig.MaxMessageSize KookConfig.MaxUsersPerBatch KookConfig.MaxMessagesPerBatch KookConfig.MaxItemsPerBatchByDefault KookConfig.MinNicknameSize KookConfig.MaxNicknameSize KookConfig.MinIntimacyScore KookConfig.MaxIntimacyScore KookConfig.BoostPackDuration KookConfig.DefaultRetryMode KookConfig.DefaultRatelimitCallback KookConfig.LogLevel KookConfig.FormatUsersInBidirectionalUnicode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors KookHttpListenerWebhookConfig() Initializes a new instance of the KookHttpListenerWebhookConfig class. public KookHttpListenerWebhookConfig() Properties AutoRestartInterval Gets or sets the interval to wait before restarting the HTTP listener after it has been closed. The same value to Timeout.InfiniteTimeSpan represents that the client will not restart with leaving the application running. Other negative values will cause the client to exit the application. The zero value will cause the client to restart immediately. Any positive value will cause the client to restart after the specified interval. public TimeSpan AutoRestartInterval { get; set; } Property Value TimeSpan UriPrefixes Gets or sets the URI prefixes to listen for incoming webhook requests. public IReadOnlyCollection<string>? UriPrefixes { get; set; } Property Value IReadOnlyCollection<string>"
  },
  "api/Kook.Webhook.HttpListener.html": {
    "href": "api/Kook.Webhook.HttpListener.html",
    "title": "Namespace Kook.Webhook.HttpListener | Kook.Net 文档",
    "keywords": "Namespace Kook.Webhook.HttpListener Classes KookHttpListenerWebhookClient Represents a KOOK webhook client using HTTP listener. KookHttpListenerWebhookConfig Represents a KOOK webhook client configuration using HTTP listener."
  },
  "api/Kook.Webhook.KookWebhookClient.html": {
    "href": "api/Kook.Webhook.KookWebhookClient.html",
    "title": "Class KookWebhookClient | Kook.Net 文档",
    "keywords": "Class KookWebhookClient Namespace Kook.Webhook Assembly Kook.Net.Webhook.dll Represents a KOOK webhook client. public abstract class KookWebhookClient : KookSocketClient, IKookClient, IDisposable Inheritance object BaseKookClient BaseSocketClient KookSocketClient KookWebhookClient Implements IKookClient IDisposable Derived KookAspNetWebhookClient KookHttpListenerWebhookClient Inherited Members KookSocketClient.Rest KookSocketClient.ConnectionState KookSocketClient.Latency KookSocketClient.Guilds KookSocketClient.DMChannels KookSocketClient.GetGuild(ulong) KookSocketClient.GetChannel(ulong) KookSocketClient.GetDMChannel(Guid) KookSocketClient.GetDMChannel(ulong) KookSocketClient.GetChannelAsync(ulong, RequestOptions) KookSocketClient.GetDMChannelAsync(Guid, RequestOptions) KookSocketClient.GetDMChannelsAsync(RequestOptions) KookSocketClient.GetUserAsync(ulong, RequestOptions) KookSocketClient.GetUser(ulong) KookSocketClient.GetUser(string, string) KookSocketClient.DownloadUsersAsync(IEnumerable<IGuild>, RequestOptions) KookSocketClient.DownloadVoiceStatesAsync(IEnumerable<IGuild>, RequestOptions) KookSocketClient.DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>, RequestOptions) KookSocketClient.StartAsync() KookSocketClient.StopAsync() KookSocketClient.Connected KookSocketClient.Disconnected KookSocketClient.Ready KookSocketClient.LatencyUpdated BaseSocketClient.BaseConfig BaseSocketClient.CurrentUser BaseSocketClient.ChannelCreated BaseSocketClient.ChannelDestroyed BaseSocketClient.ChannelUpdated BaseSocketClient.ReactionAdded BaseSocketClient.ReactionRemoved BaseSocketClient.DirectReactionAdded BaseSocketClient.DirectReactionRemoved BaseSocketClient.MessageReceived BaseSocketClient.MessageDeleted BaseSocketClient.MessageUpdated BaseSocketClient.MessagePinned BaseSocketClient.MessageUnpinned BaseSocketClient.DirectMessageReceived BaseSocketClient.DirectMessageDeleted BaseSocketClient.DirectMessageUpdated BaseSocketClient.UserJoined BaseSocketClient.UserLeft BaseSocketClient.UserBanned BaseSocketClient.UserUnbanned BaseSocketClient.UserUpdated BaseSocketClient.CurrentUserUpdated BaseSocketClient.GuildMemberUpdated BaseSocketClient.GuildMemberOnline BaseSocketClient.GuildMemberOffline BaseSocketClient.UserVoiceStateUpdated BaseSocketClient.UserConnected BaseSocketClient.UserDisconnected BaseSocketClient.RoleCreated BaseSocketClient.RoleDeleted BaseSocketClient.RoleUpdated BaseSocketClient.EmoteCreated BaseSocketClient.EmoteDeleted BaseSocketClient.EmoteUpdated BaseSocketClient.JoinedGuild BaseSocketClient.LeftGuild BaseSocketClient.GuildUpdated BaseSocketClient.GuildAvailable BaseSocketClient.GuildUnavailable BaseSocketClient.MessageButtonClicked BaseSocketClient.DirectMessageButtonClicked BaseKookClient.Log BaseKookClient.LoggedIn BaseKookClient.LoggedOut BaseKookClient.SentRequest BaseKookClient.LoginState BaseKookClient.TokenType BaseKookClient.Dispose() BaseKookClient.LoginAsync(TokenType, string, bool) BaseKookClient.LogoutAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSocketClientExperimentalExtensions.CreateGuildAsync(BaseSocketClient, string, IVoiceRegion?, Stream?, int?, RequestOptions?) Constructors KookWebhookClient(KookWebhookConfig) Initializes a new REST/WebSocket-based Kook client with the provided configuration. protected KookWebhookClient(KookWebhookConfig config) Parameters config KookWebhookConfig The configuration to be used with the client."
  },
  "api/Kook.Webhook.KookWebhookConfig.html": {
    "href": "api/Kook.Webhook.KookWebhookConfig.html",
    "title": "Class KookWebhookConfig | Kook.Net 文档",
    "keywords": "Class KookWebhookConfig Namespace Kook.Webhook Assembly Kook.Net.Webhook.dll Represents a KOOK webhook client configuration. public abstract class KookWebhookConfig : KookSocketConfig Inheritance object KookConfig KookRestConfig KookSocketConfig KookWebhookConfig Derived KookAspNetWebhookConfig KookHttpListenerWebhookConfig Inherited Members KookSocketConfig.GatewayEncoding KookSocketConfig.GatewayHost KookSocketConfig.ConnectionTimeout KookSocketConfig.RtcpIntervalMilliseconds KookSocketConfig.HandlerTimeout KookSocketConfig.SmallNumberOfGuildsThreshold KookSocketConfig.LargeNumberOfGuildsThreshold KookSocketConfig.MessageCacheSize KookSocketConfig.WebSocketProvider KookSocketConfig.UdpSocketProvider KookSocketConfig.StartupCacheFetchMode KookSocketConfig.AudioClientIdleTimeout KookSocketConfig.AlwaysDownloadUsers KookSocketConfig.AlwaysDownloadVoiceStates KookSocketConfig.AlwaysDownloadBoostSubscriptions KookSocketConfig.MaxJoinedGuildDataFetchingRetryTimes KookSocketConfig.JoinedGuildDataFetchingRetryDelay KookSocketConfig.AutoUpdateRolePositions KookSocketConfig.AutoUpdateChannelPositions KookSocketConfig.MessageQueueProvider KookRestConfig.RestClientProvider KookConfig.APIVersion KookConfig.VoiceAPIVersion KookConfig.Version KookConfig.UserAgent KookConfig.AcceptLanguage KookConfig.APIUrl KookConfig.DefaultRequestTimeout KookConfig.MaxMessageSize KookConfig.MaxUsersPerBatch KookConfig.MaxMessagesPerBatch KookConfig.MaxItemsPerBatchByDefault KookConfig.MinNicknameSize KookConfig.MaxNicknameSize KookConfig.MinIntimacyScore KookConfig.MaxIntimacyScore KookConfig.BoostPackDuration KookConfig.DefaultRetryMode KookConfig.DefaultRatelimitCallback KookConfig.LogLevel KookConfig.FormatUsersInBidirectionalUnicode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors KookWebhookConfig(WebhookProvider) Initializes a new instance of the KookWebhookConfig class. protected KookWebhookConfig(WebhookProvider webhookProvider) Parameters webhookProvider WebhookProvider The provider used to generate new UDP sockets. Properties AutoLogin Gets or sets a value indicating whether the client should try to automatically log in. public bool AutoLogin { get; set; } Property Value bool AutoLogout Gets or sets a value indicating whether the client should try to automatically log out. public bool AutoLogout { get; set; } Property Value bool EncryptKey Gets or sets the encryption key used to decrypt the webhook payload. public string? EncryptKey { get; set; } Property Value string HeartbeatIntervalMilliseconds Gets the heartbeat interval of WebSocket connection in milliseconds. public int HeartbeatIntervalMilliseconds { get; set; } Property Value int VerifyToken Gets or sets the verification token used to verify the webhook request. public string? VerifyToken { get; set; } Property Value string WebhookProvider Gets or sets the provider used to generate new UDP sockets. public WebhookProvider WebhookProvider { get; set; } Property Value WebhookProvider"
  },
  "api/Kook.Webhook.html": {
    "href": "api/Kook.Webhook.html",
    "title": "Namespace Kook.Webhook | Kook.Net 文档",
    "keywords": "Namespace Kook.Webhook Classes KookWebhookClient Represents a KOOK webhook client. KookWebhookConfig Represents a KOOK webhook client configuration."
  },
  "api/Kook.html": {
    "href": "api/Kook.html",
    "title": "Namespace Kook | Kook.Net 文档",
    "keywords": "Namespace Kook Classes ActionGroupModule Represents an action group module that can be used in an ICard. ActionGroupModuleBuilder Represents a action group module builder for creating an ActionGroupModule. AsyncEnumerableExtensions An extension class for squashing IAsyncEnumerable<T>. AudioModule Represents an audio module that can be used in an ICard. AudioModuleBuilder Represents an audio module builder for creating an AudioModule. BoostSubscriptionMetadata A metadata containing boost subscription information. ButtonElement A button element that can be used in an IModule. ButtonElementBuilder An element builder to build a ButtonElement. Card Represents a card object seen in an IUserMessage. CardBuilder Represents a builder class for creating a Card. CardExtensions Provides extension methods for IElement, IModule and ICard. ChannelExtensions Provides extension methods for IChannel. ContainerModule Represents a container module that can be used in an ICard. ContainerModuleBuilder Represents a container module builder for creating a ContainerModule. ContextModule Represents a context module that can be used in an ICard. ContextModuleBuilder Represents a context module builder for creating a ContextModule. CountdownModule Represents a countdown module that can be used in an ICard. CountdownModuleBuilder Represents a countdown module builder for creating a CountdownModule. CreateCategoryChannelProperties Provides properties that are used to create an ICategoryChannel with the specified properties. CreateGuildChannelProperties Properties that are used to create an IGuildChannel with the specified properties. CreateTextChannelProperties Provides properties that are used to create an ITextChannel with the specified properties. CreateVoiceChannelProperties Provides properties that are used to create an IVoiceChannel with the specified properties. DividerModule A divider module that can be used in an ICard. DividerModuleBuilder Represents a divider module builder for creating a DividerModule. Emoji A Unicode emoji. Emote Represents a guild emote. FileModule A file module that can be used in an ICard. FileModuleBuilder Represents a file module builder for creating a FileModule. Format A helper class for formatting characters. GameProperties Properties that are used to modify an IGame with the specified changes. GuildCertification Represents a guild certification. GuildEmote An image-based emote that is attached to a guild. GuildProperties Provides properties that are used to modify an IGuild with the specified changes. HeaderModule Represents a header module in an ICard. HeaderModuleBuilder Represents a header module builder for creating a HeaderModule. ImageElement An image element that can be used in an IModule. ImageElementBuilder An element builder to build an ImageElement. ImageGroupModule Represents an image group module that can be used in an ICard. ImageGroupModuleBuilder Representing an image group module builder for create an ImageGroupModule. IntimacyImage Represents a single image of an intimacy. IntimacyProperties Properties that are used to modify an IIntimacy with the specified changes. InviteModule An invite module that can be used in an ICard. InviteModuleBuilder Represents a invite module builder for creating an InviteModule. KMarkdownElement A KMarkdown element that can be used in an IModule. KMarkdownElementBuilder An element builder to build a KMarkdownElement. KookConfig Defines various behaviors of Kook.Net. MentionUtils Provides a series of helper methods for parsing mentions. MessageExtensions Provides extension methods for IMessage. MessageProperties Properties that are used to modify an IUserMessage with the specified changes. MessageReference Represents a message reference. ModifyGuildChannelProperties Properties that are used to modify an IGuildChannel with the specified properties. ModifyTextChannelProperties Provides properties that are used to modify an ITextChannel with the specified properties. ModifyVoiceChannelProperties Provides properties that are used to modify an IVoiceChannel with the specified properties. Music Represents a music activity. Nameplate Representing a nameplate an IUser can have. ParagraphStruct A paragraph struct that can be used in modules. ParagraphStructBuilder An element builder to build a ParagraphStruct. PlainTextElement A plain text element that can be used in an IModule. PlainTextElementBuilder An element builder to build a PlainTextElement. Preconditions Provides methods to check preconditions. Quote Represents a quoted message. RequestOptions Represents options that should be used when sending a request. RolePermissionOverwrite Represent a permission object for a role. RoleProperties Properties that are used to modify an IRole with the specified changes. SearchGuildMemberProperties Properties that are used to search for a IGuildUser in a IGuild. SectionModule Represents a section module in card. SectionModuleBuilder Represents a section module builder for creating a SectionModule. Tag<T> Represents a tag found in IMessage. TokenUtils Provides a series of helper methods for handling Kook login tokens. UserExtensions An extension class for various Kook user objects. UserPermissionOverwrite Represent a permission object for a user. UserTag Representing a tag an IUser can have. VideoModule Represents a video module in an ICard. VideoModuleBuilder Represents a video module builder for creating a VideoModule. Structs AlphaColor Represents a Color with an alpha channel. BilibiliVideoEmbed Represents an embed in a message that links to a Bilibili video. Cacheable<TEntity, TId> Represents a cached entity. Cacheable<TCachedEntity, TDownloadableEntity, TRelationship, TId> Represents a cached entity that can be downloaded. CardEmbed Represents an embed in a message that ChannelPermissions Represents a set of permissions for a channel. Color Represents a color used in Kook. FileAttachment Represents a file attachment. GradientColor Represents a gradient color. GuildFeatures Represents a collection of features of a guild. GuildPermissions Represents a set of permissions for a guild. Image An image that will be uploaded to Kook. ImageAnimationPokeResource Represents an image animation poke resource. ImageEmbed Represents an image embed. KookError Represents an error with a property. KookJsonError Represents a generic parsed json error received from Kook after performing a rest request. LinkEmbed Represents a link embed. LogMessage Provides a message object used for logging purposes. NotImplementedEmbed Represents a unimplemented embed. NotImplementedPokeResource Represents a poke resource that is not implemented to be resolved yet. OverwritePermissions Represents a container for a series of overwrite permissions. PokeIcon Represents an icon of an IPoke. PokeLabel Represents the label of a IPoke. PokeQuality Represents the quality of a IPoke. ReactionMetadata A metadata containing reaction information. Interfaces IActivity A user's activity status. IAttachment Represents a message attachment found in a IUserMessage. IAudioChannel Represents a generic audio channel. IBan Represents a generic ban object. ICard Represents a generic card. ICardBuilder Represents a generic card builder for creating a ICard. ICategoryChannel Represents a generic category channel. IChannel Represents a generic channel. IDMChannel Represents a generic direct-message channel. IDeletable Determines whether the object is deletable or not. IElement A generic element used in modules. IElementBuilder A generic builder for creating an IElement. IEmbed Represents a generic embed. IEmote Represents a general container for any type of emote in a message. IEntity<TId> Represents a generic entity that has a unique identifier. IFriendRequest Represents a generic friend request. IGame Represents a generic game object. IGuild Represents a generic guild/server. IGuildChannel Represents a generic guild channel. IGuildUser Represents a generic guild user. IIntimacy Represents a generic intimacy. IInvite Represents a generic invite. IKookClient Represents a generic Kook client. IMediaModule A generic media module that can be used in an ICard. IMentionable Determines whether the object is mentionable or not. IMessage Represents a message object. IMessageChannel Represents a channel that can send and receive messages. IModule Represents a generic module that can be used in an ICard. IModuleBuilder A generic module builder for creating an IModule. INestedChannel Represents a type of guild channel that can be nested within a category. IPermissionOverwrite<TTarget> Represents a generic permission overwrite. IPoke Represents a generic poke. IPokeAction Represents a single generic poke action. IPokeResource Represents a generic poke resource. IPresence Represents the user's presence status. This may include their online status and their activity. IPrivateChannel Represents a generic channel that is private to selected recipients. IQuote Represents a generic message quote. IRateLimitInfo Represents a generic ratelimit info. IReaction Represents a generic reaction object. IRecommendInfo Represents a generic recommendation information. IRole Represents a generic role object to be given to a guild user. ISelfUser Represents the logged-in Kook user. ISystemMessage Represents a generic message sent by the system. ITag Gets a generic tag found in messages. ITextChannel Represents a generic channel in a guild that can send and receive messages. IUpdateable Defines whether the object is updateable or not. IUser Represents a generic user. IUserMessage Represents a generic message sent by a user. IVoiceChannel Represents a generic voice channel in a guild. IVoiceRegion Represents a region of which the user connects to when using voice. IVoiceState Represents a user's voice connection status. Enums ActivityType Specifies the type of activities. AttachmentType Specifies the type of the attachment. BadgeStyle Specifies the style of badges. BoostLevel Specifies the boost level of a guild. ButtonClickEventType Specifies the event type fired when a ButtonElement is clicked. ButtonTheme Specifies the theme of a ButtonElement. CacheMode Specifies the cache mode that should be used. CardSize Specifies the size of a card. CardTheme Specifies the theme of the card. CardType Specifies the type of the card. ChannelPermission Represents a permission can be granted to a channel. ChannelType Specifies the type of a guild channel. ClientType Defines the types of clients a user can be active on. ColorType Represents the type of color a role has. ConnectionState Specifies the connection state of a client. CountdownMode Specifies the display mode for the countdown timer. CreateAttachmentMode Indicates that how the FileAttachment will be operated to attache files. Direction Specifies the direction of where message(s) should be retrieved from. ElementType Specifies the type of an IElement. EmbedType Represents the type of an embed. EmojiType Specifies the type of an emoji. FriendState Represents a state of a friend relationship with the current user. GameCreationSource Represents the creation source of a game. GameType Specifies the type of games. GuildCertificationType Represents a guild certification type. GuildFeature Represents a feature of a guild. GuildPermission Represents a permission can be granted to a guild. ImageSize Specifies the size of the image in ImageElement. InviteMaxAge Specifies the time in second after which an IInvite will be expired. InviteMaxUses Specifies the number of uses after which an IInvite will be expired. KookErrorCode Represents a set of json error codes received by Kook. LogSeverity Specifies the severity of the log message. LoginState Specifies the state of the client's login status. MessageSource Specifies the source of the Kook message. MessageType Represents the type of a message. ModuleType Specifies the type of an IModule. MusicProvider Specifies the provider of music. NotifyType Specifies that how the guild should notify the user. PermValue Specifies the permission value. PokeResourceType Represents the type of a IPokeResource. RequestFriendSource Represents a source from which a friend request is sent. RetryMode Specifies how a request should act in the case of an error. RoleType Represents the type of a role. SectionAccessoryMode Specifies the accessory position relative to the text element. SlowModeInterval Specifies the slow-mode ratelimit in seconds for an ITextChannel. SortMode Specifies the sorting mode. SystemMessageType Gets the type of a ISystemMessage TagHandling Specifies the handling type the tag should use. TagMode Represents the mode to parse tags. TagType Specifies the type of Kook tag. TextTheme Represents text themes used in Colorize(string?, TextTheme, bool). TokenType Specifies the type of token to use with the client. VoiceQuality Specifies the voice quality of an IVoiceChannel."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API 文档 | Kook.Net 文档",
    "keywords": "API 文档 用于浏览 Kook.Net 的全部公开 API 信息。 常见实体 Kook.WebSocket KookSocketClient SocketGuild SocketGuildChannel SocketRole SocketGuildUser SocketMessage"
  },
  "changelog/changelog.html": {
    "href": "changelog/changelog.html",
    "title": "变更日志 | Kook.Net 文档",
    "keywords": "变更日志 v0.8.0 [2024-05-28] 更新路线 由于 KOOK API 变更，Bot 用户现已无法在启动时通过 /guild/index 接口一次性获取全部所需的服务器基础信息，而是需要通过 /guild/view 接口遍历各个服务器，这会导致加入过多服务器的 Bot 会在启动时消耗过长时间，并大量发起 API 请求。因此，当前版本引入 KookSocketConfig.StartupCacheFetchMode 配置项，用于定义 Bot 启动时加载服务器所需基础数据的方式。 Synchronous：同步模式。客户端启动时获取到服务器的简单列表后，会先通过 API 遍历获取所需服务器的基础数据，全部获取完成后再触发 Ready 事件。 Asynchronous：异步模式。客户端启动时在获取到服务器的简单列表后立即触发 Ready 事件，再在启动后台任务拉取所有服务器的基础数据。 Lazy：懒模式。客户端启动时在获取到服务器的简单列表后立即触发 Ready 事件，不主动拉取服务器基础数据，当网关下发涉及到服务器的事件时， 会对未获取基础数据的服务器对象通过 API 获取信息。 Auto：自动模式，默认值。客户端的启动模式根据 Bot 所加入的服务器数量自动判断，当服务器数量达到 LargeNumberOfGuildsThreshold（默认为 50）时为 Lazy ，否则若达到 SmallNumberOfGuildsThreshold（默认为 5）时为 Asynchronous，否则为 Synchronous。该判断将在每次 Bot 连接 WebSocket 时进行。 在未使用 Synchronous 模式时，在 Ready 事件之后，未经事件主动访问缓存的服务器实体时，可能会获取到未完整包含服务器基础数据的缓存实体，IsAvailable 属性指示该服务器实体是否已经通过 API 完整缓存基础数据。在这种情况下，请主动调用 UpdateAsync 方法来通过 API 更新缓存服务器实体。 上述的服务器基础数据主要指服务器的频道、角色、频道权限覆盖、当前用户在服务器内的昵称等信息。 已针对整个框架的代码添加了空引用静态分析诊断的特性，有关可为空引用类型的 C# 概念，请参阅 可为空引用类型 - C# | Microsoft Learn。更新至当前版本后，所有可能为空的类型都会被标记为可为空引用类型， 这可能会导致一些代码在编译时产生警告，这些警告应该被视为潜在的空引用异常，应该根据实际情况进行修复。 另外，IQuote 新增了一个实现 MessageReference，这仅包含要被引用的消息 ID，用于在用户代码调用 API 时传入。原有创建 Quote 的用户代码应尽快迁移至 MessageReference。 fileName 已重命名为 filename；事件参数 Cacheable<SocketMessage, Guid> 变更为 Cacheable<IMessage, Guid>；SectionAccessoryMode.Unspecified 现已由 null 代替；Format.StripMarkDown 被重命名为 StripMarkdown；SendFileAsync 中接收 Steam 类型的重载中的 filename 参数现在为必选参数。请注意这些变更可能会导致编译错误，应根据实际情况进行修复。 新增 KookSocketConfig 新增 StartupCacheFetchMode、LargeNumberOfGuildsThreshold 及 SmallNumberOfGuildsThreshold 配置项，用于自定义 Bot 的 Socket 客户端在启动时通过 API 获取缓存所需服务器基础数据的方式 KookSocketConfig 上新增两个配置项 AutoUpdateRolePositions 与 AutoUpdateChannelPositions，默认为 false 。当启用时，会在相关事件下发时自动通过 API 获取数据，以维护缓存中的角色排序信息与频道排序信息。 Embed 添加了 CardEmbed 卡片实体与构造器现在实现了 IEquatable<T> SocketSelfUser 现在实现了 IUpdateable 添加了 IGuild.RecommendInfo.Certifications IQuote 新增新的实现 MessageReference，这仅包含要被引用的消息 ID，用于在用户代码调用 API 时传入 添加了对事件类型 embeds_append、sort_channel、updated_server_type、batch_added_channel、batch_updated_channel、 batch_deleted_channel、live_status_changed、PERSON 类型的 updated_guild、add_guild_mute、delete_guild_mute、 unread_count_changed 的支持，但暂时无法确认这些事件是否会实际下发。 修复 修复私聊消息的作者不正确的问题 修复 SocketUserMessage.Quote.Author 可能为空的问题 修复消息中引用不存在的实体时，Tags 缺失对应值的问题 修复语音客户端未能正确处理未定义事件导致推流崩溃的问题 修复解析新引入的图文混排消息失败的问题 修正用户昵称更新行为不正确的问题 变更 启用可为空引用类型特性，有关可为空引用类型的 C# 概念，请参阅 可为空引用类型 - C# | Microsoft Learn 卡片构造器的各种验证已推迟到调用 Build 时进行 卡片内涉及到列表的属性的类型已变更为 IList<T> Quote.Empty 及其公开构造函数已标记 Obsolete 特性，应使用 MessageReference fileName 已重命名为 filename SendFileAsync 中接收 Steam 类型的重载中的 filename 参数现在为必选参数 BaseSocketClient._baseConfig 重命名为 BaseConfig 事件参数 Cacheable<SocketMessage, Guid> 变更为 Cacheable<IMessage, Guid>，以解决下载实体失败的问题 SectionAccessoryMode.Unspecified 现已移除，请使用 null 代替 Format.StripMarkDown 被重命名为 StripMarkdown，原方法已标记 Obsolete Format.StripMarkdown 现在会移除连字符 - 其它 在 .NET 7 及以前的目标框架上添加了对 PolySharp 的引用，以支持一些新特性在旧框架上的实现 新增部分 Socket 事件的集成测试 v0.7.0 [2024-04-02] 更新路线 KOOK 客户端现已支持在语音频道内发送消息，与此相关的以下 API 产生了变动： CreateVoiceChannelProperties 现已继承自 CreateTextChannelProperties ModifyVoiceChannelProperties 现已继承自 ModifyTextChannelProperties IVoiceChannel 现已继承自 ITextChannel ChannelPermissions.Voice 的值已附加文字频道的权限 SocketTextChannel.GetMessagesAsync 系列方法现已为虚方法，以供 SocketVoiceChannel 重写 需要注意的是，受限于 KOOK API，语音频道内不支持通过 API 获取历史消息，无置顶消息功能，因此，语音频道上不支持调用 IMessageChannel 的 GetMessagesAsync 与 GetPinnedMessagesAsync 方法。 另外，语音频道在 API 层面支持操作 Topic 及 SlowModeInterval，但 KOOK 客户端暂无相关表现。 创建频道时不支持立即指定 Topic，CreateTextChannelProperties 中的 Topic 属性不生效，现已移除， 请在创建频道后调用 ITextChannel.ModifyAsync 方法进行修改。 新增 新增支持通过 XML 定义卡片消息 IVoiceChannel 现已继承自 ITextChannel，相关实现已更新 BaseKookClient 新增 SentRequest 事件 为卡片消息解析相关的 Try* 方法添加非空结果提示诊断 修复 修正 ConnectionManager 引发 Disconnected 时 State 不正确的问题 变更 CreateTextChannelProperties 中的 Topic 属性已移除 其它 标记项目不支持 AOT 及程序集裁剪 新增示例项目 Kook.Net.Samples.CardMarkup 新增 XML 定义卡片消息的相关文档 新增 Logo v0.6.0 [2024-02-28] 更新路线 KOOK 内不支持在文本消息中提及语音频道，即 IVoiceChannel 不可被提及，现已不再派生自 IMentionable 接口。有关提及 IVoiceChannel 的错误用法应该予以移除或变更。 有关取消令牌的的名称已从 CancelToken 更改为 CancellationToken，现有关于取消用牌的方法、变量、属性、参数的名称都应该更新。 新增 新增语音频道的连接与推流 修复 修复 KookSocketClient 转换为 IKookClient 或 BaseKookClient 时 ConnectionState 不正确的问题 变更 IVoiceChannel 不再派生自的 IMentionable 接口 重命名方法、变量、属性、参数的名称 CancelToken 为 CancellationToken 其它 更改文档模板，新增示例项目页面，新增语音推流文档 v0.5.5 [2024-02-02] 更新路线 RequireUserAttribute 不再支持通过 IUser 参数构造，请改用 IUser.Id 作为参数。 新增 文本命令框架先决条件新增 RequireRoleAttribute 文本命令框架 CommandAttribute 新增 Aliases、Summary、Remarks 属性及可选参数 修复 修复了 Bot 启动时下载数据的异常没有被正确地输出到日志的问题 变更 移除了 RequireUserAttribute 上不切实际地接收 IUser 参数的构造函数 v0.5.4 [2024-01-06] 更新路线 KookRestApiClient 的 AuthTokenType 与 AuthToken 属性的 set 访问性已更改为 private，用户代码对这些属性的更改可能会导致框架运行异常，如需使用不同的身份认证登录 KOOK 网关，请在 LogoutAsync 后重新 LoginAsync。 新增 IUser 接口上新增 HasAnnualBuff、IsSystemUser、Nameplates 属性 UserTag 上新增 BackgroundColor 属性 新增支持解析互动表情 变更 KookRestApiClient 的 AuthTokenType 与 AuthToken 属性的 set 访问性已更改为 private v0.5.3 [2023-11-15] 更新路线 IVoiceChannel.ServerUrl 属性已移动至 IAudioChannel 接口，所有使用此属性的用法都需要更新。 新增 在 IAudioChannel 接口上新增语音区域相关属性 IVoiceChannel.ModifyAsync 方法参数新增支持修改语音区域相关属性 为卡片、模块、元素构造器相关类新增有参构造函数 变更 IVoiceChannel.ServerUrl 属性已移动至 IAudioChannel 接口 移除了部分属性上的意外提供的公开 set 访问器 修复 修复了 SectionModuleBuild 的构建校验条件不正确的问题 其它 替换测试 Mock 框架 Moq 为 NSubstitute 新增 Docker 使用示例 新增面向 .NET 8 的目标框架构建 v0.5.2 [2023-08-18] 更新路线 ModifyEmoteNameAsync 方法的参数 Action<string> 已变更为 string，所有使用此方法的用法都需要更新。 修复 修复了 SocketReaction 的比较不正确导致的回应移除时缓存中的消息的回应未能被正确移除的问题 修复了 Socket 客户端断开连接时未能正确发送关闭代码的问题 修复了 GetMessagesAsync 方法查询参考消息之后的消息时结果不正确的问题 修复了 ModifyEmoteNameAsync 方法未能正确重命名服务器表情的问题 其它 补全了快速参考指南 为示例程序 SimpleBot 加入实际的功能，能够响应一个简单的命令，回复按钮，并对按钮点击事件进行响应 新增了 Visual Basic 及 F# 的调用示例 v0.5.1 [2023-07-29] 新增 添加了 SocketGuild.GetCategoryChannel 和 RestGuild.GetCategoryChannelAsync 方法 修复 修复了 GetJumpUrl 方法返回结果不正确的问题 修复了 KookConfig.MaxMessagesPerBatch 设置不正确的问题 修复了已删除引用的反序列化不正确的问题 修复了 MoveUsersAsync 方法的 RequestOptions 参数不为可选参数的问题 修复了 MoveUsersAsync 方法的失败问题 修复了在 SocketGuildChannel 上创建频道权限复写后立即修改可能会导致失败且无错误信息的问题 优化 优化了 GetDirectMessageAsync 方法的内部实现 统一了注释中 langword 的字符串表示方式 v0.5.0 [2023-05-21] 更新路线 出于便利性原因，此版本对 BaseSocketClient 中的部分事件所传递的参数类型进行了调整，事件参数所发生的具体变更可参阅文末的附录， 对涉及到的事件的应用都需要进行相应的更新。 GuildFeature 与 GuildFeatures 中表示重要客户的枚举值与属性已被重命名为更准确的名称；GuildPermissions 已被重构为结构体，RoleProperties.Permissions 属性的类型也已被相应变更；RestGuild.Channels 的类型被错误地声明为值的类型为 RestChannel 的字典，已被修正为值的类型为 RestGuildChannel 的字典；KookSocketClient 上的部分方法的返回类型为 ValueTask，现已统一为 Task。涉及到以上 API 的用法都需要进行相应的更新。 新增 新增 GuildFeature.Partner 枚举值及 GuildFeatures.IsPartner 属性 新增 IGuild.Banner 属性 新增 RestGuild 上的 CurrentUserNickname、CurrentUserDisplayName 与 CurrentUserRoles 属性 新增 INestedChannel.SyncPermissionsAsync 方法 新增 BaseSocketClient 上的 DownloadVoiceStatesAsync 与 DownloadBoostSubscriptionsAsync 抽象方法 新增 RestGuild 上的 TextChannels、VoiceChannels 与 CategoryChannels 属性 变更 重命名 GuildFeature.Ka 为 GuildFeature.KeyAccount，GuildFeatures.IsKa 为 GuildFeatures.IsKeyAccount 变更 GuildPermissions 为结构体，变更 RoleProperties.Permissions 为 GuildPermissions? 类型 出于便利性目的，为部分 BaseSocketClient 中的事件变更或新增了事件参数，变更详情参见文末的附录 变更 BaseSocketClient 上的 DownloadBoostSubscriptionsAsync 方法参数都为可选参数 变更 RestGuild.Channels 的类型为 ImmutableDictionary<ulong, RestGuildChannel> 变更 KookSocketClient 上的 GetChannelAsync、GetDMChannelAsync、GetDMChannelsAsync 与 GetUserAsync 的方法返回类型为 Task<*> 修复 修复部分 API 对 bool 类型返回字符串 1 或 0 时未能正确解析的问题 修复 IGuild.DefaultChannelId 未能正确设置为服务器实际配置的默认文字频道的问题 修复为下载服务器用户列表时 SocketGuild.CurrentUser 为 null 的问题 修复 SocketUser 上的 IsOnline 与 ActiveClient 可能会抛出空引用异常的问题 修复 MessageType.Poke 类型的消息未被正确解析的问题 修复请求桶未能对 HTTP 429 Too Many Requests 错误进行正确处理的问题 优化 优化 Cacheable 的调试器显示文本 FileAttachment.Stream 现已可以复用 SendFileAsync 与 ReplyFileAsync 方法对通过文件或流创建的 FileAttachment 附件进行多次发送前所创建的资产地址将会被缓存，以避免重复上传相同的文件 其它 修正了一些奇怪的代码缩进 变更文档主题 新增依赖于 doc 分支的文档更新独立工作流 新增 API 快速参考文档 补充权限相关单元测试中缺失的权限值 附录 BaseSocketClient 中变更参数的事件列表： ReactionAdded 与 ReactionRemoved ISocketMessageChannel → SocketTextChannel 新增 Cacheable<SocketGuildUser, ulong> 参数表示添加或取消回应的服务器用户 DirectReactionAdded 与 DirectReactionRemoved 新增 Cacheable<SocketUser, ulong> 参数表示添加或取消回应的用户 MessageReceived 新增 SocketGuildUser 表示发送消息的服务器用户 新增 SocketTextChannel 表示消息所在的服务器文字频道 MessageDeleted、MessageUpdated、MessagePinned 与 MessageUnpinned ISocketMessageChannel → SocketTextChannel DirectMessageReceived 新增 SocketUser 表示发送消息的用户 新增 SocketDMChannel 表示消息所在的私聊频道 DirectMessageDeleted Cacheable<IDMChannel, Guid> → Cacheable<SocketDMChannel, ulong> 新增 Cacheable<SocketUser, ulong> 表示消息的发送者 DirectMessageUpdated IDMChannel → Cacheable<SocketDMChannel, ulong> 新增 Cacheable<SocketUser, ulong> 表示消息的发送者 v0.4.1 [2023-04-05] 修复 修复用户离开服务器或角色被删除时，SocketGuildChannel.UserPermissionOverwrites 与 SocketGuildChannel.RolePermissionOverwrites 属性未移除对应的权限覆盖项的问题 v0.4.0 [2023-04-03] 更新路线 出于以下几项原因，此版本对 BaseSocketClient 中的部分事件所传递的参数类型进行了调整： 部分参数必定可取，无需使用 Cacheable 进行封装，例如 MessageDeleted 与 UserConnected； 网关所下发的数据不完整，导致部分事件传递的参数存在缺失的情况，此类事件参数已调整为 Cacheable 封装的实体，修复实体 ID 未知无法通过 Rest 客户端发起 API 请求获取完整数据的问题； 网关所下发的数据不完整，原处理逻辑为通过 Rest 客户端发起 API 请求获取完整数据，在大型服务器内可能会导致性能不佳或超速等问题，例如 GuildMemberOnline 与 GuildMemberOffline，此类事件参数已调整为 Cacheable 封装的实体，可通过 GetOrDownloadAsync 方法按需获取完整数据； 部分事件所传递的参数类型过于具体，导致类型不匹配而传递空值，例如 ReactionAdded； 部分事件所传递的参数类型过于宽泛，例如 MessageDeleted 与 UserConnected，可以避免不必要的模式匹配 部分事件传递参数缺失，例如 UserBanned 部分事件传递了过度冗余的参数，例如 MessageButtonClicked 事件参数所发生的具体变更可参阅文末的附录，对涉及到的事件的应用都需要进行相应的更新。 KMarkdown 格式化帮助类 Format 中的各格式化方法皆已变更为扩展方法，并新增可选参数 sanitize，以支持是否对文本内的特殊字符进行转义，默认为 true。扩展方法的调用方式仍然兼容原有的静态方法调用方式。 默认情况下，各格式化方法会对文本内与 KMarkdown 语法冲突的特殊字符进行转义，以避免 KMarkdown 语法解析错误。 此特性默认启用，可通过 sanitize 参数禁用。所有涉及到传入此方法的文本参数如已对特殊字符进行转义， 则应将 sanitize 参数设置为 false，或调整传入参数为未转义的原始文本。另外，Format.Quote 与 Format.BlockQuote 方法的逻辑已调整，现在会在文本内按需插入换行符与零宽连字符，以保持文本在 KOOK 客户端中的显示效果。其中，Format.BlockQuote 方法的格式化结果可以保证整段文本在 KOOK 客户端中的显示为一段引用块，而 Format.Quote 方法的格式化结果则将文本按空行分割为多个引用块， 空行不会包括在引用块内。 CardJsonExtension 类中的 Parse 与 TryParse 方法已重命名为 ParseSingle 与 TryParseSingle， 以避免与解析多个卡片时使用的 ParseMany 与 TryParseMany 方法产生冲突。所有涉及到此方法的调用都需要进行相应的更新。 IGuild 及 IRecommendInfo 的 Features 属性类型原为 object[]，现已实现为 GuildFeatures 类型，所有涉及到此属性的调用都需要进行相应的更新。 RestPresence 命名空间已修正为 Kook.Rest。所有涉及到 RestPresence 的调用都需要进行命名空间引用的更新。 新增 新增好友管理与用户屏蔽管理相关方法，变更详情参见文末的附录 为 Cacheable 与 Quote 类新增调试显示文本 KookSocketConfig 新增 MaxJoinedGuildDataFetchingRetryTimes 与 JoinedGuildDataFetchingRetryDelay 属性，控制加入服务器时的数据获取重试次数与重试间隔 CardJsonExtension 新增 ParseMany 与 TryParseMany 方法 （实验性功能）新增 IVoiceRegion.MinimumBoostLevel 属性 （实验性功能）KookRestClient 新增 ValidateCardAsync 与 ValidateCardsAsync 方法 变更 变更 BaseSocketClient 中的部分事件所传递的参数类型，变更详情参见文末的附录 Format 帮助类各格式化方法已变更为扩展方法，并新增可选参数 sanitize，以支持是否对文本内的特殊字符进行转义，默认为 true 重命名 CardJsonExtension 的 Parse 与 TryParse 为 ParseSingle 与 TryParseSingle 实现 IGuild 及 IRecommendInfo 的 Features 属性为 GuildFeatures 类型 修正 RestPresence 命名空间为 Kook.Rest （实验性功能）KookRestClient.GetAdminGuildsAsync 方法现已支持 Bot 类型认证 修复 修复 Format.Quote 与 Format.BlockQuote 方法结果在 KOOK 中显示异常的问题 修复 CountdownModuleBuilder.Build 抛出异常时的错误信息错误的问题 修复 BaseSocketClient.DirectMessageUpdated 可能会传递错误的用户实体的问题 修复 BaseSocketClient 与消息相关的事件在传递包含引用的消息实体时 Author 属性在用户未缓存时为空的问题 修复 IGuild.OwnerId 为 0 的问题 修复 BaseSocketClient.Pinned 与 BaseSocketClient.Unpinned 事件所传递的消息未正确设置 IsPinned 属性的问题 修复 IPresence.ActiveClient 属性可能会被意外清空的问题 修复 IPresence 的调试显示信息格式不正确的问题 修复 IRestClient 的默认实现在源代码启用 DEBUG_REST 预处理器指令调试高并发请求时可能会抛出异常的问题 修复 Quote.Empty 不为静态属性的问题 优化 修复 KookRestApiClient 缺失预处理器指令的问题 优化 SocketUser.UpdateIntimacyAsync 方法对 IUser 接口的实现 优化 NumberBooleanConverter 的使用 KookSocketClient 接收乱序报文或对所接收的事件报文处理不正确时将报文内容到日志 KookSocketClient 打印异常报文时将使用传入的 serializerOptions 序列化选项 完善 BaseSocketClient 事件的 XML 文档 其他 由于 KOOK 服务端已修复创建角色时部分字段值缺失的问题，相关提交已还原 修正部分文档内容错误 修正集成测试所创建的测试服务器未被正确删除的问题 附录 新增接口列表： 获取所有好友：IKookClient.GetFriendsAsync 请求添加好友：IUser.RequestFriendAsync 删除好友：IUser.RemoveFriendAsync 获取所有好友请求：IKookClient.GetFriendRequestsAsync 接受好友请求：IFriendRequest.AcceptAsync 拒绝好友请求：IFriendRequest.DeclineAsync 获取所有被屏蔽用户：IKookClient.GetBlockedUsersAsync 屏蔽用户：IUser.BlockAsync 取消屏蔽用户：IUser.UnblockAsync BaseSocketClient 中变更参数的事件列表： ReactionAdded 与 ReactionRemoved Cacheable<IUserMessage, Guid> → Cacheable<IMessage, ulong> Cacheable<IMessageChannel, ulong> → ISocketMessageChannel DirectReactionAdded 与 DirectReactionRemoved Cacheable<IUserMessage, Guid> → Cacheable<IMessage, ulong> MessageDeleted Cacheable<IMessageChannel, ulong> → ISocketMessageChannel MessageUpdated Cacheable<IMessage, Guid> → Cacheable<SocketMessage, Guid> SocketMessage → Cacheable<SocketMessage, Guid> MessagePinned 与 MessageUnpinned Cacheable<IMessage, Guid> → Cacheable<SocketMessage, Guid> SocketMessage → Cacheable<SocketMessage, Guid> SocketGuildUser → Cacheable<SocketGuildUser, ulong> DirectMessageUpdated SocketMessage → Cacheable<SocketMessage, Guid> UserLeft SocketUser → Cacheable<SocketUser, ulong> UserBanned IReadOnlyCollection<SocketUser> → IReadOnlyCollection<Cacheable<SocketUser, ulong>> SocketUser → Cacheable<SocketUser, ulong> 新增 string 参数表示加入黑名单的原因 UserUnbanned IReadOnlyCollection<SocketUser> → IReadOnlyCollection<Cacheable<SocketUser, ulong>> SocketUser → Cacheable<SocketUser, ulong> UserUpdated SocketUser → Cacheable<SocketUser, ulong> GuildMemberUpdated SocketGuildUser → Cacheable<SocketGuildUser, ulong> GuildMemberOnline 与 GuildMemberOffline IReadOnlyCollection<SocketGuildUser> → IReadOnlyCollection<Cacheable<SocketGuildUser, ulong>> UserConnected 与 UserDisconnected SocketUser → Cacheable<SocketGuildUser, ulong> 移除 SocketGuild 参数，请从 SocketVoiceChannel.Guild 获取 MessageButtonClicked SocketUser → Cacheable<SocketGuildUser, ulong> IMessage → Cacheable<IMessage, Guid> 移除 SocketGuild 参数，请从 SocketTextChannel.Guild 获取 DirectMessageButtonClicked SocketUser → Cacheable<SocketUser, ulong> IMessage → Cacheable<IMessage, Guid> v0.3.1 [2023-03-19] 新增 新增 ICard.ToJsonString 及 ICardBuilder.ToJsonString 以支持卡片 JSON 序列化，新增 CardJsonExtension.Parse 及 CardJsonExtension.TryParse 以支持卡片 JSON 反序列化 v0.3.0 [2023-03-19] 更新路线 此版本将 IUserMessage.Resolve 中的默认参数 everyoneHandling 变更为 TagHandling.Name，所有使用此方法的用法都需要留意此变更。 新增 IKookClient 接口新增方法重载 GetUserAsync，并为 BaseSocketClient 实现接口 IKookClient 新增支持通过 KookConfig.FormatUsersInBidirectionalUnicode 禁用针对双向 Unicode 格式化用户名字符串 修复 修复 IUserMessage.Resolve 对全体成员与在线成员标签文本化不正确的问题 修复 IGuild.CreateRoleAsync 反序列化结果失败的问题 （实验性功能）修复 BaseKookClient.CreateGuildAsync 及 KookSocketClient.CreateGuildAsync 返回所创建的服务器信息不完整的问题 其它 为全部公共 API 添加 XML 文档 应用代码样式 v0.2.5 [2023-03-16] 更新路线 此版本为 KookRestClient.GetGamesAsync 方法签名新增了可选可空参数 GameCreationSource，以支持获取指定创建来源的游戏信息。所有在向此方法传递位置实参 RequestOptions 的用法都需要更新。 新增 为方法 KookRestClient.GetGamesAsync 新增可选可空参数 GameCreationSource v0.2.4 [2023-03-09] 新增 新增支持解析角色 IRole 的颜色类型 ColorType 及渐变色信息 GradientColor v0.2.3 [2023-01-19] 新增 为 Bearer 类型认证新增支持 KookRestClient.GetAdminGuildsAsync 新增 Format.Colorize 用于 KMarkdown 文本颜色格式化 修复 修复 KookRestClient.GetGuildsAsync 在服务器数量较大时下载数据过慢的问题 （实验性功能）修复 KookRestClient.GetGuildsAsync 在 Bearer 类型认证下构造对象失败的问题 修复 Color 部分值不正确的问题 v0.2.2 [2022-12-30] 修复 修复了 SocketTextChannel.SendCardAsync 与 SocketTextChannel.SendCardsAsync 设置 ephemeralUser 参数不生效的问题 v0.2.1 [2022-12-25] 修复 修复了导致启动失败的 JSON 转换器错误 v0.2.0 [2022-12-25] 更新路线 此版本将非官方列出的接口实现分离到单独的包中，即 INestedChannel.SyncPermissionsAsync 等，使用此接口的开发者现在应该安装 Kook.Net.Experimental 包。 移除 移除了接口定义上的方法 INestedChannel.SyncPermissionsAsync，接口的实现现已移动至 Kook.Net.Experimental 包中 新增 新增 Kook.Net.Experimental 包，用于实现非官方列出的接口 修复 修复了 IGuild.OpenId 为空时可能导致的空引用异常 其它 修正了不正确的代码缩进 v0.1.2 [2022-12-18] 更新路线 此版本将 SocketGuild.MemberCount 的类型从 int 更改为 int?，其中 null 值表示未知的服务器成员数量。此外，类似的更改发生也在 SocketGuild.HasAllMembers 上。所有依赖这两个属性的用法都需要更新。 变更 KookSocketConfig.AlwaysDownloadUsers 也将定义是否在启动时加载服务器成员数量 修复 修复了修改语音频道时应用的不正确的先决条件 修复了不正确的文档 v0.1.1 [2022-11-20] 新增 新增 IGuild.GetActiveBoostSubscriptionsAsync JSON 反序列化失败时将输出报文本体至日志管理器 修复 修复 BaseSocketClient.UserUnbanned 未能正常触发的问题 修复 BaseSocketClient.GuildAvailable 事件触发时 DownloadVoiceStatesAsync 与 DownloadBoostSubscriptionsAsync 被意外绕过的问题 v0.1.0 [2022-11-15] 首次发布。"
  },
  "demos/demos-community.html": {
    "href": "demos/demos-community.html",
    "title": "社区示例项目 | Kook.Net 文档",
    "keywords": "社区示例项目"
  },
  "demos/demos.html": {
    "href": "demos/demos.html",
    "title": "示例项目 | Kook.Net 文档",
    "keywords": "示例项目 基础 Kook.Net.Samples.SimpleBot 该项目演示了创建并启动 Bot 的基本方法，并实现了一个简单的 !ping 命令。 当用户调用该命令时，Bot 回复一条包含按钮的卡片消息，用户点击该按钮，Bot 会再回复一条消息。 该示例项目还罗列了 Kook.Net 所公开的所有事件。 Kook.Net.Samples.ReactionRoleBot 该示例项目演示了如何通过订阅到 Kook.Net 中的多个事件，来完成不同的操作。 当用户在指定的消息上添加或撤销回应时，Bot 会为该用户添加或撤销服务器的角色。 Webhook Kook.Net.Samples.Webhook.AspNet 该示例项目演示了如何使用 ASP.NET Core 来创建一个 Webhook 服务，以接收来自 Kook.Net 的事件。 Kook.Net.Samples.Webhook.HttpListener 该示例项目演示了如何使用 HttpListener 来创建一个 Webhook 服务，以接收来自 Kook.Net 的事件。 文本命令框架 Kook.Net.Samples.TextCommands 该示例项目演示了如何使用 Kook.Net 中的文本命令框架，来构建一个易于扩展与维护的基于文本的命令交互 Bot。 XML 卡片消息 Kook.Net.Samples.CardMarkup 该示例项目显示了如何使用 Kook.Net 中的 XML 卡片消息功能，使用 XML 标记语言来构建卡片消息，以及配合使用 Liquid 模版引擎，使用 Fluid.Core 库来在运行时通过模版构建卡片消息。 消息队列 [Kook.Net.Samples.MessageQueue]((https://github.com/gehongyan/Kook.Net/tree/master/samples/Kook.Net.Samples.MessageQueue) 该示例项目演示了如何使用 Kook.Net 所提供的消息队列扩展，利用消息队列来实现 KOOK 网关事件的异步处理。 语音 Kook.Net.Samples.Audio 该示例项目演示了如何使用 Kook.Net 中的语音功能，来构建一个点歌 Bot。 OAuth Kook.Net.Samples.OAuth 该示例项目演示了如何使用 AspNet.Security.OAuth.Providers 库来添加 OAuth 认证功能，以及如何使用 Kook.Net 获取所认证用户的信息。 语言变体 Kook.Net.Samples.FSharp 该示例项目演示了如何使用 F# 构建基于 Kook.Net 的 Bot 的方法。 Kook.Net.Samples.VisualBasic 该示例项目演示了如何使用 Visual Basic 构建基于 Kook.Net 的 Bot 的方法。 部署 Kook.Net.Samples.Docker 该示例项目演示了如何编写 Dockerfile 来创建封装 Bot 能力的镜像。"
  },
  "guides/card_markup/card.html": {
    "href": "guides/card_markup/card.html",
    "title": "卡片 | Kook.Net 文档",
    "keywords": "卡片 属性 属性 类型 默认值 必需 说明 theme string null 卡片主题，可选值为 primary success danger warning info secondary none size string null 卡片尺寸，可选值为 small large color string null 卡片颜色，十六进制 RGB 色彩，以 # 开头 元素 每一个卡片需要包含一个 <modules> 元素，<modules> 元素包含卡片的组件。 <card> <modules> <!-- 卡片组件 --> </modules> </card> 示例 1 使用默认主题、尺寸、颜色的卡片，并包含一个 标题模块。 <card> <modules> <header> <plain>测试卡片</plain> </header> </modules> </card> 示例 2 使用 warning 主题、small 尺寸、#aaaaaa 颜色的卡片，并包含一个 标题模块、一个 图片组模块。 <card theme=\"warning\" color=\"#aaaaaa\" size=\"small\"> <modules> <header> <plain>测试卡片</plain> </header> <images> <image src=\"https://img.kaiheila.cn/assets/2021-01/pWsmcLsPJq08c08c.jpeg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/YIfHfnvxaV0dw0dw.jpg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/YevTY6eGJa0fk0f2.jpeg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/r2K9RjHZ4s0xc0xc.jpeg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/klosFRTVy90jz0k0.jpg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/veHnEhzu6c0dw0dv.jpg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/tiVWPIuTrf0dw0dw.jpg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/wExzRIrTeR0j60j7.jpeg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/AybvLWYQgA0dw0dw.jpg\" /> </images> </modules> </card> 示例 3 KOOK 消息编辑器中的投票消息模版。 <card theme=\"warning\"> <modules> <header> <plain>朋友们，今晚开黑玩什么游戏？</plain> </header> <divider /> <section mode=\"right\"> <text> <kmarkdown> **英雄联盟** 艾欧尼亚，昂扬不灭。 </kmarkdown> </text> <accessory> <button theme=\"primary\" value=\"123\"> <plain>+1</plain> </button> </accessory> </section> <context> <image src=\"https://img.kaiheila.cn/avatars/2020-09/ov2wQ8r2qZ0dc07i.gif/icon\" circle=\"true\"/> <image src=\"https://img.kaiheila.cn/avatars/2020-11/LjtEMkmH3U0hs0hs.jpg/icon\" circle=\"true\"/> <image src=\"https://img.kaiheila.cn/avatars/2021-01/YaJKS70ClV04g04g.png/icon\" circle=\"true\"/> <kmarkdown> 等12人把票投给了英雄联盟 </kmarkdown> </context> <section mode=\"right\"> <text> <kmarkdown> **Warframe** &lt;&lt;网络连接无响应&gt;&gt;。 </kmarkdown> </text> <accessory> <button theme=\"primary\" value=\"123\"> <plain>+1</plain> </button> </accessory> </section> <context> <image src=\"https://img.kaiheila.cn/avatars/2020-11/reWIJpyTQt05k05k.png/icon\" circle=\"true\"/> <image src=\"https://img.kaiheila.cn/assets/2021-01/qcU601U2IH0xc0pn.png/icon\" circle=\"true\"/> <image src=\"https://img.kaiheila.cn/avatars/2020-12/MKUoDHdTVK0u00u0.jpg/icon\" circle=\"true\"/> <kmarkdown> 等12人把票投给了Warframe </kmarkdown> </context> <section mode=\"right\"> <text> <kmarkdown> **CSGO** 不听不听，无甲沙鹰。 </kmarkdown> </text> <accessory> <button theme=\"primary\" value=\"123\"> <plain>+1</plain> </button> </accessory> </section> <context> <image src=\"https://img.kaiheila.cn/avatars/2020-06/q4hNJU6KhU02s02s.jpg/icon\" circle=\"true\"/> <image src=\"https://img.kaiheila.cn/avatars/2020-11/acXV4jRb4A08c08c.jpg/icon\" circle=\"true\"/> <image src=\"https://img.kaiheila.cn/avatars/2020-06/SbFPjoBb5202s02s.jpg/icon\" circle=\"true\"/> <kmarkdown> 等12人把票投给了CSGO </kmarkdown> </context> </modules> </card>"
  },
  "guides/card_markup/elements.html": {
    "href": "guides/card_markup/elements.html",
    "title": "元素 | Kook.Net 文档",
    "keywords": "元素 KOOK 开发者文档 - 卡片消息 - 元素 普通文本 plain 属性 类型 默认值 必需 说明 emoji bool true 如果为 true，会把 emoji 的 shortcut 转为 emoji <plain emoji=\"false\">Some text</plain> KMarkdown kmarkdown <kmarkdown>**hello**</kmarkdown> 图片 image 属性 类型 默认值 必需 说明 src anyURI null ✅ 图片 URL，必须以 https:// 开头 alt string null 图片的替代文本 size string null 图片的尺寸，可选值为 small large circle bool false 是否显示为圆形 <image src=\"https://img.kaiheila.cn/assets/2021-01/pWsmcLsPJq08c08c.jpeg\" alt=\"Alt message\" size=\"large\" circle=\"true\" /> 按钮 button 属性 类型 默认值 必需 说明 theme string null 按钮主题，可选值为 primary success danger warning info secondary value string null 按钮需要传递的 value click string null 按钮事件类型，可选值为 link return-val 元素 数量 说明 plain 1，与 kmarkdown 互斥 按钮文本 kmarkdown 1，与 plain 互斥 按钮文本 <button theme=\"danger\" click=\"return-val\" value=\"TEST_VALUE\"> <kmarkdown>**测试按钮**</kmarkdown> </button>"
  },
  "guides/card_markup/intro.html": {
    "href": "guides/card_markup/intro.html",
    "title": "XML 卡片消息入门 | Kook.Net 文档",
    "keywords": "XML 卡片消息 Kook.CardMarkup 命名空间提供了将使用 XML 标记语言定义的卡片消息反序列化为 ICard 对象的方法。 入门 下面的示例中，我们创建一个简单的，由标题、分割线和 9 张图片组成的一个卡片消息。 XML 标记 创建一个 XML 文件，定义卡片消息的内容： <?xml version=\"1.0\" encoding=\"UTF-8\"?> <card-message xmlns=\"https://kooknet.dev\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"https://kooknet.dev https://kooknet.dev/card-message.xsd\"> <card> <modules> <header> <plain>KOOK：一款出色的文字、语音与组队工具</plain> </header> <divider /> <images> <image src=\"https://img.kaiheila.cn/assets/2021-01/pWsmcLsPJq08c08c.jpeg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/YIfHfnvxaV0dw0dw.jpg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/YevTY6eGJa0fk0f2.jpeg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/r2K9RjHZ4s0xc0xc.jpeg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/klosFRTVy90jz0k0.jpg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/veHnEhzu6c0dw0dv.jpg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/tiVWPIuTrf0dw0dw.jpg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/wExzRIrTeR0j60j7.jpeg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/AybvLWYQgA0dw0dw.jpg\" /> </images> </modules> </card> </card-message> XML 声明 文件第一行为 XML 声明，指定 XML 版本和字符编码： Warning 字符编码必须是 UTF-8。 XML 版本必须是 1.0。 <?xml version=\"1.0\" encoding=\"UTF-8\"?> 卡片消息 XML 根元素为 <card-message>，代表一个卡片消息，每一个 <card-message> 元素可以包含多个 <card> 元素。 <card-message> 元素上需要指定 XML 命名空间，以及 XML Schema 文件的位置： <card-message xmlns=\"https://kooknet.dev\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"https://kooknet.dev https://kooknet.dev/card-message.xsd\"> xmlns=https://kooknet.dev 指定了默认 XML 命名空间，卡片消息所有的元素均在该命名空间下。 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" 指定了 XML Schema 实例命名空间，并设置命名空间前缀为 xsi。 xsi:schemaLocation=\"https://kooknet.dev https://kooknet.dev/card-message.xsd\" 调用了 xsi 命名空间下的 schemaLocation 属性，指定了 https://kooknet.dev 命名空间下的 XML Schema 文件位置在 https://kooknet.dev/card-message.xsd。 卡片 <card> 元素代表一个卡片，每一个 <card> 元素包含一个 <modules> 元素，用于包含卡片的组件。 关于卡片，请参阅 卡片。 反序列化 使用 Kook.CardMarkup.CardMarkupSerializer 将 XML 卡片消息反序列化为 ICard 对象： Warning Try... 方法只适用于同步调用。 Note 此示例传入参数为 XML 文件的 FileInfo 类实例。 所有方法均有传入参数为 Stream 或 string 的重载。 传出参数的类型均为 IEnumerable<ICard> 或 Task<IEnumerable<ICard>>。 var xmlFile = new FileInfo(\"sample-card.xml\"); // 同步调用 var cards = CardMarkupSerializer.Deserialize(xmlFile); // 同步调用，使用 Try... 方法 var canDeserialize = CardMarkupSerializer.TryDeserialize(xmlFile, out var cards); // 异步调用 var cards = await CardMarkupSerializer.DeserializeAsync(xmlFile); // 异步调用，传入 CancellationToken var cts = new CancellationTokenSource(); var cards = await CardMarkupSerializer.DeserializeAsync(xmlFile, cts.Token); 渲染效果 该 XML 卡片消息等效于以下 JSON 格式的卡片消息： [ { \"type\": \"card\", \"theme\": \"secondary\", \"size\": \"lg\", \"modules\": [ { \"type\": \"header\", \"text\": { \"type\": \"plain-text\", \"content\": \"KOOK：一款出色的文字、语音与组队工具\" } }, { \"type\": \"divider\" }, { \"type\": \"image-group\", \"elements\": [ { \"type\": \"image\", \"src\": \"https://img.kaiheila.cn/assets/2021-01/pWsmcLsPJq08c08c.jpeg\" }, { \"type\": \"image\", \"src\": \"https://img.kaiheila.cn/assets/2021-01/YIfHfnvxaV0dw0dw.jpg\" }, { \"type\": \"image\", \"src\": \"https://img.kaiheila.cn/assets/2021-01/YevTY6eGJa0fk0f2.jpeg\" }, { \"type\": \"image\", \"src\": \"https://img.kaiheila.cn/assets/2021-01/r2K9RjHZ4s0xc0xc.jpeg\" }, { \"type\": \"image\", \"src\": \"https://img.kaiheila.cn/assets/2021-01/klosFRTVy90jz0k0.jpg\" }, { \"type\": \"image\", \"src\": \"https://img.kaiheila.cn/assets/2021-01/veHnEhzu6c0dw0dv.jpg\" }, { \"type\": \"image\", \"src\": \"https://img.kaiheila.cn/assets/2021-01/tiVWPIuTrf0dw0dw.jpg\" }, { \"type\": \"image\", \"src\": \"https://img.kaiheila.cn/assets/2021-01/wExzRIrTeR0j60j7.jpeg\" }, { \"type\": \"image\", \"src\": \"https://img.kaiheila.cn/assets/2021-01/AybvLWYQgA0dw0dw.jpg\" } ] } ] } ] 渲染效果如下："
  },
  "guides/card_markup/modules.html": {
    "href": "guides/card_markup/modules.html",
    "title": "模块 | Kook.Net 文档",
    "keywords": "模块 KOOK 开发者文档 - 卡片消息 - 模块 标题 header 元素 数量 说明 plain 1 标题文本 <header> <plain>这是标题</plain> </header> 内容 section 属性 类型 默认值 必需 说明 mode string right 其它元素的放置位置 元素 数量 说明 text 1 内容模块的文本元素 text/plain 1，与 text/markdown 互斥 内容模块的文本元素（纯文本） text/kmarkdown 1，与 text/plain 互斥 内容模块的文本元素（KMarkdown） accessory 0-1 内容模块的其它元素 accessory/image 1，与 accessory/button 互斥 内容模块的其它元素（图片） accessory/button 1，与 accessory/image 互斥 内容模块的其它元素（按钮） <section mode=\"right\"> <text> <kmarkdown>内容模块，**使用 KMarkdown**</kmarkdown> </text> <accessory> <button theme=\"danger\" click=\"return-val\" value=\"TEST_VALUE\"> <kmarkdown>**测试按钮**</kmarkdown> </button> </accessory> </section> 图片组 images 元素 数量 说明 image 1-9 图片 <images> <image src=\"https://img.kaiheila.cn/assets/2021-01/V3zmettTwN0j608y.png\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/V3zmettTwN0j608y.png\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/V3zmettTwN0j608y.png\" /> </images> 容器 container 元素 数量 说明 image 1-9 图片 <container> <image src=\"https://img.kaiheila.cn/assets/2021-01/V3zmettTwN0j608y.png\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/V3zmettTwN0j608y.png\" /> </container> 交互 actions 元素 数量 说明 button 1-4 按钮 <actions> <button theme=\"success\"> <plain>测试按钮</plain> </button> </actions> 备注 context 元素 数量 说明 plain 与 kmarkdown image 合计至多 10，至少 1 纯文本 kmarkdown 与 plain image 合计至多 10，至少 1 KMarkdown image 与 plain kmarkdown 合计至多 10，至少 1 图片 <context> <image src=\"https://img.kaiheila.cn/assets/2021-01/bUZJOyqnMG0d30d3.png/ld\" size=\"small\" /> <plain>测试 Context</plain> <kmarkdown>~~KMarkdown~~ 测试(spl)内容(spl)</kmarkdown> </context> 分割线 divider <divider /> 文件 (文件/视频) file video 属性 类型 默认值 必需 说明 src anyURI null ✅ 文件 URL，必须以 https:// 开头 title string null 文件标题 <file src=\"https://img.kaiheila.cn/attachments/2021-01/21/600972b5d0d31.txt\" title=\"KOOK 介绍\" /> <video src=\"https://img.kaiheila.cn/attachments/2021-01/20/6008127e8c8de.mp4\" title=\"测试视频\" /> 文件 (音频) audio 属性 类型 默认值 必需 说明 src anyURI null ✅ 文件 URL，必须以 https:// 开头 title string null 文件标题 cover anyURI null 封面 URL，必须以 https:// 开头 <audio src=\"https://img.kaiheila.cn/attachments/2021-01/21/600975671b9ab.mp3\" cover=\"https://img.kaiheila.cn/assets/2021-01/rcdqa8fAOO0hs0mc.jpg\" title=\"命运\" /> 倒计时 countdown 属性 类型 默认值 必需 说明 start ulong null ⚠️ 起始的毫秒时间戳，仅 mode=\"second\" 时需要 end ulong null ✅ 到期的毫秒时间戳 mode string null ✅ 显示模式，可选值为 day hour second <countdown end=\"4080251224000\" start=\"4077572824000\" mode=\"second\" /> 邀请 invite 属性 类型 默认值 必需 说明 code string null ✅ 邀请链接或者邀请码 <invite code=\"EvxnOb\"/>"
  },
  "guides/card_markup/structures.html": {
    "href": "guides/card_markup/structures.html",
    "title": "结构体 | Kook.Net 文档",
    "keywords": "结构体 KOOK 开发者文档 - 卡片消息 - 结构体 区域文本 paragraph 属性 类型 默认值 必需 说明 cols integer null ✅ 区域文本的列数，范围为 1-3 元素 数量 说明 plain 与 kmarkdown 合计至多 50，至少 1 区域文本的内容 kmarkdown 与 plain 合计至多 50，至少 1 区域文本的内容 <paragraph cols=\"3\"> <plain>Header 1</plain> <plain>Header 2</plain> <plain>Header 3</plain> <kmarkdown>Value 1</kmarkdown> <kmarkdown>Value 2</kmarkdown> <kmarkdown>Value 3</kmarkdown> </paragraph>"
  },
  "guides/concepts/connections.html": {
    "href": "guides/concepts/connections.html",
    "title": "管理连接 | Kook.Net 文档",
    "keywords": "管理 Kook.Net 中的连接 在 Kook.Net 中，一旦客户端启动，除非客户端被手动关闭， 否则其与 KOOK 网关之间将会尝试一直保持连接。 用法 要启动连接，请在客户端上调用 StartAsync 方法，这会启动一个 WebSocket 连接。 要终止连接，请在客户端上调用 StopAsync 方法，这会关闭任何已经打开的 WebSocket 连接。 由于启动/终止方法仅向底层连接管理器发送信号，指示其启动/终止连接， 启动/终止连接的操作是异步执行的，因此这些方法会在启动/终止操作真正被执行前返回。 因此，您需要订阅基于连接状态的事件，来准确地了解客户端何时启动/终止了连接。 所有的客户端都提供了 Connected 和 Disconnected 事件， 分别在连接启动或关闭时触发。需要注意的是，在 KookSocketClient 中， Connected 并不代表客户端完成了初始化以供业务逻辑进行调用。 KookSocketClient 上提供了一个单独的事件 Ready， 仅当客户端下载完成所有必要的数据（如：服务器频道信息等），且拥有了完整了数据缓存， 该事件才会被触发。 重连 Tip 避免在网关线程上运行耗时代码！如果网关发生了如事件章节中所描述的死锁， 连接管理器将无法恢复并重新连接。 假设客户端由于网络波动、KOOK 服务端的重连请求或错误导致客户端断开连接， 而不是业务逻辑代码造成的死锁，客户端将会一直尝试重连并继续之前的会话。 不必担心如何维护连接，连接管理器的设计保证了重连机制的正常运行。 如果您的客户端没能成功地重连，或许这是一个 Bug，快来 KOOK Kook.Net 社区 找我反馈吧！"
  },
  "guides/concepts/events.html": {
    "href": "guides/concepts/events.html",
    "title": "事件 | Kook.Net 文档",
    "keywords": "Kook.Net 中的事件 Kook.Net 中的事件采用与标准 .NET 事件模式类似的方式实现， 不同的是，Kook.Net 中的事件类型都为 Task， 事件参数传递不使用 EventArgs，而是直接传递到事件处理程序中。 这使得事件处理程序可以直接在异步上下文中执行，事件返回类型为 Task，而不是 async void。 用法 要从事件中接收数据，只需通过 C# 委托的事件模式进行订阅。 订阅事件支持命名函数，也支持匿名函数（Lambda 表达式）。 线程安全性 所有的事件都被设计为线程安全的，所有的事件都拥有与网关线程相同的上下文， 在网关线程之外的任务上同步运行， 但这样做也会存在副作用，这可能会导致网关现成死锁并终止连接。 经验之谈，任何耗时超过 3 秒的任务都不应该直接在事件上下文中等待， 而是应该包装在 Task.Run 中执行，或是卸载到另外一个任务中。 这意味着您不应该在与事件相同的上下文中通过 KOOK 网关请求数据， 由于网关线程将等待所有被调用的事件处理程序完成，然后才会处理所有来自网关的任何其它数据， 这将导致一个无法恢复的死锁。 Warning 如果您需要在网关线程之外的上下文中（下以事件处理线程指代）访问 Kook.Net 的缓存实体，可能会遇到线程安全性问题。 例如，当您在事件处理线程中访问缓存中的某频道实体时，与此同时，如果网关线程正在处理频道删除事件， 则可能会导致频道实体在缓存中被删除，从而导致事件处理线程中在访问频道实体时可能会抛出异常。 又如，当您在时间处理线程中访问频道消息时，与此同时，如果消息的作者编辑了该消息文本，网关线程可能会更新该消息实体， 从而导致事件处理线程中在访问消息实体时可能会取到不正确的消息文本。 因此建议您在开启不在网关线程中等待的、可能会访问缓存实体中的数据的事件处理线程前，先将必要数据取值为局部变量，再进行后续操作。 相同的问题在队列模式或发布订阅模式下也可能会出现，因此，这些可能会被网关线程更新的数据都应包装为队列或发布订阅事件的参数。 Note 等待任务完成：await Task.Run(() => { /* ... */ }); 或 await Task.Run(async () => { /* ... await ... */ }); 此时，异常将会被正确地传播到事件上下文中，但这样做也会导致网关线程等待任务完成。 不等待任务完成：_ = Task.Run(() => { /* ... */ }); 或 _ = Task.Run(async () => { /* ... await ... */ }); 此时，异常不会被传播到事件上下文中，您需要在事件处理线程正确地捕获处理异常。 额外要注意的是，如果异常被抛出到 async void 所标记的方法中，如果异常没有被正确地处理，将会导致程序退出。 常见模式 Kook.Net 中的事件签名都是形如 Func<T1, ..., Task> 的模式，没有额外定义名称， 因此，有关方法签名的详细信息，请参考 IntelliSense 智能提示，或直接浏览 API 文档。 不过，Kook.Net 中的事件签名大多遵循类似的模式，还是可以让您从中推断参数定义。 实体变更 具有 Func<Entity, Entity, Task> 签名的事件处理程序通常表示一个实体中的信息发生了变更， 两个实体中，前者为发生变更前实体的副本，后者为变更执行完成后的实体。 此模式通常仅在 EntityUpdated 事件中出现。 缓存实体 具有 Func<Cacheable, Entity, Task> 签名的事件处理程序则通常表示 API 或网关并未提供实体发生变更前的状态，因此它可以从客户端的缓存中提取或从 API 中下载。 有关此对象的更多信息，请参阅 Cacheable 文档。 Note 许多与消息相关的实体（例如：MessageUpdated 和 ReactionAdded）依赖于客户端的消息缓存， 该特性默认不启用，因此，如果您需要使用它，请在 KookSocketConfig 中通过设置 MessageCacheSize 的值来启用该消息缓存。 示例 using Kook; using Kook.WebSocket; public class Program { private KookSocketClient _client; public static Task Main(string[] args) => new Program().MainAsync(); public async Task MainAsync() { // 如需使用事件中的 Cacheable<IMessage, Guid> 实体， // 您可能需要在客户端配置中启用消息缓存。 var _config = new KookSocketConfig { MessageCacheSize = 100 }; _client = new KookSocketClient(_config); await _client.LoginAsync(TokenType.Bot, Environment.GetEnvironmentVariable(\"KookToken\")); await _client.StartAsync(); _client.MessageUpdated += MessageUpdated; _client.Ready += () => { Console.WriteLine(\"Bot is connected!\"); return Task.CompletedTask; } await Task.Delay(Timeout.Infinite); } private async Task MessageUpdated(Cacheable<IMessage, Guid> before, SocketMessage after, ISocketMessageChannel channel) { // 如果没有启用消息缓存，消息下载方法可能会获得与 `after` 完全相同的实体 var message = await before.GetOrDownloadAsync(); Console.WriteLine($\"{message} -> {after}\"); } }"
  },
  "guides/concepts/logging.html": {
    "href": "guides/concepts/logging.html",
    "title": "日志 | Kook.Net 文档",
    "keywords": "在 Kook.Net 中记录日志 Kook.Net 中提供了一个日志事件，所有的日志消息都会通过此事件传递。 有关 Kook.Net 中的事件，请参阅 事件 章节。 Warning Kook.Net 中所有的日志实现处理程序都将在网关线程上同步执行， 如果您要将日志消息输出到 Web API 中（例如：Sentry、Stackdriver、KOOK 频道等）， 建议将输出程序包装在 Task.Run 中，以避免网关线程在等待数据日志输出时阻塞。 更多有关网关线程的信息，请参阅 事件 章节。 在客户端中记录日志 要处理日志，只需将日志处理程序订阅至 Log 事件， 日志处理程序需接收一个 LogMessage 对象，返回 Task 对象。 在命令中记录日志 Kook.Net 的 CommandService 也提供了 Log 事件，其签名与其它日志事件相同。 通过日志事件记录的数据往往与 CommandException 相结合使用，其中包含了命令上下文与异常信息。 示例 using Kook; using Kook.WebSocket; public class LoggingService { public LoggingService(KookSocketClient client, CommandService command) { client.Log += LogAsync; command.Log += LogAsync; } private Task LogAsync(LogMessage message) { if (message.Exception is CommandException cmdException) { Console.WriteLine($\"[Command/{message.Severity}] {cmdException.Command.Aliases.First()}\" + $\" failed to execute in {cmdException.Context.Channel}.\"); Console.WriteLine(cmdException); } else Console.WriteLine($\"[General/{message.Severity}] {message}\"); return Task.CompletedTask; } }"
  },
  "guides/dependency_injection/basics.html": {
    "href": "guides/dependency_injection/basics.html",
    "title": "概述 | Kook.Net 文档",
    "keywords": "依赖注入 依赖注入并不是 Discord.Net 中必要的功能，但它可以让框架的使用更为简便。与许多其他库相结合使用，可以更好地控制应用程序。 按照 依赖注入不是 .NET 的原生功能。您需要将扩展包安装到项目中才能使用它： Microsoft.Extensions.DependencyInjection Microsoft.Extensions.DependencyInjection.Abstractions Warning 仅下载 Abstractions 包不包含使用依赖注入所需的一些必要类，请确保同时安装两个包，或选择仅安装 Microsoft.Extensions.DependencyInjection 包来隐式同时安装两个包。 Visual Studio 程序包管理控制台 PM> Install-Package Microsoft.Extensions.DependencyInjection. Rider 命令行 dotnet add package Microsoft.Extensions.DependencyInjection Tip ASP.NET 已经在其框架中包含了所有必要的程序集，要在 ASP.NET 中使用依赖注入完整功能，不需要安装任何额外的 NuGet 包。 开始 首先，您需要创建一个基于依赖注入的应用程序，这样就可以在整个项目中访问并注入它们。 public class Program { private readonly IServiceProvider _serviceProvider; public Program() { _serviceProvider = CreateProvider(); } static void Main(string[] args) => new Program().RunAsync(args).GetAwaiter().GetResult(); static IServiceProvider CreateProvider() { var collection = new ServiceCollection(); //... return collection.BuildServiceProvider(); } async Task RunAsync(string[] args) { //... } } 要在不同的类中自由传递依赖项，您需要将它们注册到新的 ServiceCollection 中，并将它们构建到 IServiceProvider 中，如上所示。 然后需要通过启动文件访问 IServiceProvider，以便您可以访问您的提供程序并对其进行管理。 static IServiceProvider CreateServices() { var config = new KookSocketConfig() { //... }; var collection = new ServiceCollection() .AddSingleton(config) .AddSingleton<KookSocketClient>(); return collection.BuildServiceProvider(); } 如上所示，这里创建了一个 KookSocketConfig 的实例，并在添加客户端本身之前将其添加到了服务容器中。 服务容器会优先选择已经存在的服务来填充构造函数，且你已经将配置类注册到服务容器中，因此，带有配置参数的构造函数重载会被优先调用。 使用依赖项 在 Program 类的构造函数中构建服务容器提供程序后，现在可以在您正在使用的实例中使用它了。 通过提供程序，我们可以请求我们之前所注册的 KookSocketClient。 async Task RunAsync(string[] args) { // 从客户端请求实例。 // 我们在这里首先请求它，因此其目标构造函数将会调用，我们会得到一个客户端的实例。 var client = _services.GetRequiredService<KookSocketClient>(); client.Log += async (msg) => { await Task.CompletedTask; Console.WriteLine(msg); } await client.LoginAsync(TokenType.Bot, \"\"); await client.StartAsync(); await Task.Delay(Timeout.Infinite); } Warning 服务实例的构造函数在被首次请求之前不会被调用。要想实例化服务容器里的服务，需要先从提供程序中请求服务。 如果所请求的服务有依赖项，那么在实例化服务本身之前，其未被实例化的依赖项会被实例化。 注入依赖项 您不仅可以直接从字段或属性中访问提供程序，还可以将实例传递给在提供程序中注册的类。有多种方法可以实现这一点。请参考 注入实例 了解更多信息。"
  },
  "guides/dependency_injection/injection.html": {
    "href": "guides/dependency_injection/injection.html",
    "title": "注入实例 | Kook.Net 文档",
    "keywords": "注入实例 在 IServiceProvider 中注册的服务后可以注入到任何注册的类中，这可以通过属性或构造函数来实现。 Note 如上所述，依赖项和目标类必须都进行注册，服务提供程序才可以解析它。 通过构造函数注入 服务可以从类的构造函数中注入。 这是首选的方法，因为这可以将只读字段与提供的服务关联在一起，且在类的外部不可访问。 public class ClientHandler { private readonly KookSocketClient _client; public ClientHandler(KookSocketClient client) { _client = client; } public async Task ConfigureAsync() { //... } } 通过属性注入 也可以通过属性进行注入。 public class ClientHandler { public KookSocketClient Client { get; set; } public async Task ConfigureAsync() { //... } } Warning 依赖项注入不会解析属性注入中缺少的服务，也不会选择构造函数作为替代。如果尝试注入公共可访问属性时其服务缺失，应用程序将抛出错误。 使用提供程序本身 也可以将提供程序本身注入到类中，可用于以下多种用例： 允许库（如 Kook.Net）在内部访问提供程序 注入可选依赖项 如有必要，可以直接在提供程序上调用方法，这通常用于创建作用域 public class UtilizingProvider { private readonly IServiceProvider _provider; private readonly AnyService _service; // 服务可为 null，因为它只有在提供程序中实际可用时才会填充 private readonly AnyOtherService? _otherService; // 该构造函数仅注入服务提供程序，并使用它来填充其他依赖项 public UtilizingProvider(IServiceProvider provider) { _provider = provider; _service = provider.GetRequiredService<AnyService>(); _otherService = provider.GetService<AnyOtherService>(); } // 该构造函数注入服务提供程序和 AnyService，这样无需调用 GetRequiredService页可以确保 AnyService 不为 null public UtilizingProvider(IServiceProvider provider, AnyService service) { _provider = provider; _service = service; _otherService = provider.GetService<AnyOtherService>(); } } Note 请记住，提供程序将选择“最大”的可用构造函数。 如果选择引入多个构造函数，请记住，如在某一个构造函数中缺失了某项服务，提供程序可能会选择另一个可用的构造函数，而不是抛出异常。"
  },
  "guides/dependency_injection/scaling.html": {
    "href": "guides/dependency_injection/scaling.html",
    "title": "隐式注入 | Kook.Net 文档",
    "keywords": "隐式注入 依赖注入有很多用例，并且非常适合大规模应用程序。有几种方法可以使大量服务的注册和使用更加容易。 使用一系列服务 如果您有许多服务都具有相同的用途，例如处理事件或服务模块，您可以通过一些要求一次注册和注入它们： 所有类都需要继承单个接口或抽象类型 虽然不是必需的，但最好是接口和类型在调用时具有相同的方法签名 您需要注册一个所有类型都可以注入的类 隐式注册 通过获取程序集中的所有类型，并检查它们是否实现了指定接口，来进行服务的注册。 public static ServiceCollection RegisterImplicitServices(this ServiceCollection collection, Type interfaceType, Type activatorType) { // 获取当前程序集中的所有类型。有很多方法可以做到这一点，但这是最快的。 foreach (var type in typeof(Program).Assembly.GetTypes()) { if (interfaceType.IsAssignableFrom(type) && !type.IsAbstract) collection.AddSingleton(interfaceType, type); } // 注册可以激活这些实例的类，以便您可以激活这些实例。 collection.AddSingleton(activatorType); } Note 如上所示，interfaceType 和 activatorType 未定义。对于下面的用例，这些是 IService 和 ServiceActivator。 使用隐式依赖 为了使用隐式依赖，您必须访问您之前注册的激活器类。 async Task RunAsync() { //... await _serviceProvider.GetRequiredService<ServiceActivator>() .ActivateAsync(); //... } 当访问并调用激活器类的 ActivateAsync() 方法时，将执行以下代码： public class ServiceActivator { // 这包含了所有已注册的服务类型为 IService 的服务 private readonly IEnumerable<IService> _services; public ServiceActivator(IEnumerable<IService> services) { _services = services; } public async Task ActivateAsync() { foreach(var service in _services) { await service.StartAsync(); } } } 至此，所有通过实现 IService 接口被注册的类上的自动代码都会被执行并启动。"
  },
  "guides/dependency_injection/services.html": {
    "href": "guides/dependency_injection/services.html",
    "title": "命令框架中的依赖注入 | Kook.Net 文档",
    "keywords": "命令框架中的依赖注入 在文本命令框架服务模块中，依赖注入的非常简单。 您可以将任何服务注入到模块中，而无需将模块注册到提供程序中。Kook.Net会在内部解析您的依赖项。 注册服务 前文描述的行为允许已注册的成员作为可用构造函数的参数，因此 Socket 客户端和配置类将会被自动解析，并使用 CommandService(client, config) 重载。 static IServiceProvider CreateServices() { var config = new KookSocketConfig() { //... }; var servConfig = new CommandServiceConfig() { //... } var collection = new ServiceCollection() .AddSingleton(config) .AddSingleton<KookSocketClient>() .AddSingleton(servConfig) .AddSingleton<CommandService>(); return collection.BuildServiceProvider(); } 模块内的用法 在模块的构造函数中，任何参数都将被你所传入的 IServiceProvider 填充。 任何公共可设置属性也将以相同的方式填充。 public class MyModule : InteractionModuleBase { private readonly MyService _service; public MyModule(MyService service) { _service = service; } [Command(\"things\")] public async Task ThingsAsync() { var str = string.Join(\"\\n\", _service.Things) await ReplyTextAsync(str); } } 如果你接受 CommandService 或 IServiceProvider 作为构造函数的参数或可注入的属性，这些条目将会被模块所加载的 CommandService 和传入的 IServiceProvider 填充。 Note 在属性上标记 [DontInjectAttribute] 特性将会阻止该属性被注入。 服务 模块是瞬态的，会在每次请求时重新实例化，因此如果需要在多个命令执行之间保持值，建议创建单例服务来包装。 public class MyService { public List<string> Things { get; } public MyService() { Things = new(); } }"
  },
  "guides/dependency_injection/types.html": {
    "href": "guides/dependency_injection/types.html",
    "title": "生命周期 | Kook.Net 文档",
    "keywords": "生命周期 依赖项可以有三种生命周期。每种生命周期都有不同的用例。 Warning 当使用接口 IServiceType 和类 ImplementationType 注册类型时，只有 IServiceType 可用于注入，而 ImplementationType 将用于底层实例。 单例 单例服务在首次请求时创建单个实例，并应用程序在整个生命周期中维护该单一实例。 在单例中更改的任何值都将在依赖于它的所有实例中更改，因为它们都具有对这一单例服务的相同引用。 注册 // 带有服务接口类型 collection.AddSingleton<ISingletonService, SingletonService>(); // 不带有服务接口类型 collection.AddSingleton<SingletonService>(); Note KOOK 客户端和命令服务等类型都是单例的，因为它们应该在整个应用程序中持续存在，并与对该对象的所有引用共享其状态。 作用域 作用域服务在每次请求时创建一个新实例，但在“作用域”范围内保留。 只要服务在创建的作用域中可见，就会为该类型的所有引用重用同一实例。 这意味着您可以在执行期间重用同一实例，并在请求处于活动状态时保持服务的状态。 注册 // 带有服务接口类型 collection.AddScoped<IScopedService, ScopedService>(); // 不带有服务接口类型 collection.AddScoped<ScopedService>(); Note 在不使用 HTTP 或类似 EF Core 等库的情况下，作用域在 KOOK Bot 中不常见。 瞬时 瞬时服务在每次请求时创建一个新实例，并且不在目标服务的引用之间共享其状态。 它适用于需要很少状态的轻量级类型，以便在执行后快速释放。 注册 // 带有服务接口类型 collection.AddTransient<ITransientService, TransientService>(); // 不带有服务接口类型 collection.AddTransient<TransientService>(); Note Kook.Net 模块的行为与瞬时类型完全相同，并且仅在命令执行所需的时间内存在。 这就是为什么建议应用程序使用单例服务来跟踪跨命令执行的数据。"
  },
  "guides/emoji/emoji-list.html": {
    "href": "guides/emoji/emoji-list.html",
    "title": "受支持的表情符号列表 | Kook.Net 文档",
    "keywords": "受支持的表情符号列表 此列表数据源于 KOOK API。 Emoji 短代码 Unicode 😀 :grinning: \\ud83d\\ude00 😃 :smiley: \\ud83d\\ude03 😄 :smile: \\ud83d\\ude04 😁 :grin: \\ud83d\\ude01 😆 :laughing: \\ud83d\\ude06 😅 :sweat_smile: \\ud83d\\ude05 🤣 :rofl: \\ud83e\\udd23 😂 :joy: \\ud83d\\ude02 🙂 :slightly_smiling_face: \\ud83d\\ude42 🙃 :upside_down_face: \\ud83d\\ude43 😉 :wink: \\ud83d\\ude09 😊 :blush: \\ud83d\\ude0a 😇 :innocent: \\ud83d\\ude07 🥰 :smiling_face_with_hearts: \\ud83e\\udd70 😍 :heart_eyes: \\ud83d\\ude0d 🤩 :star_struck: \\ud83e\\udd29 😘 :kissing_heart: \\ud83d\\ude18 😗 :kissing: \\ud83d\\ude17 ☺ :relaxed: \\u263a 😚 :kissing_closed_eyes: \\ud83d\\ude1a 😙 :kissing_smiling_eyes: \\ud83d\\ude19 😋 :yum: \\ud83d\\ude0b 😛 :stuck_out_tongue: \\ud83d\\ude1b 😜 :stuck_out_tongue_winking_eye: \\ud83d\\ude1c 🤪 :zany_face: \\ud83e\\udd2a 😝 :stuck_out_tongue_closed_eyes: \\ud83d\\ude1d 🤑 :money_mouth_face: \\ud83e\\udd11 🤗 :hugging_face: \\ud83e\\udd17 🤭 :face_with_hand_over_mouth: \\ud83e\\udd2d 🤫 :shushing_face: \\ud83e\\udd2b 🤔 :thinking_face: \\ud83e\\udd14 🤐 :zipper_mouth_face: \\ud83e\\udd10 🤨 :face_with_raised_eyebrow: \\ud83e\\udd28 😐 :neutral_face: \\ud83d\\ude10 😑 :expressionless: \\ud83d\\ude11 😶 :no_mouth: \\ud83d\\ude36 😏 :smirk: \\ud83d\\ude0f 😒 :unamused: \\ud83d\\ude12 🙄 :roll_eyes: \\ud83d\\ude44 😬 :grimacing: \\ud83d\\ude2c 🤥 :lying_face: \\ud83e\\udd25 😌 :relieved: \\ud83d\\ude0c 😔 :pensive: \\ud83d\\ude14 😪 :sleepy: \\ud83d\\ude2a 🤤 :drooling_face: \\ud83e\\udd24 😴 :sleeping: \\ud83d\\ude34 😷 :mask: \\ud83d\\ude37 🤒 :face_with_thermometer: \\ud83e\\udd12 🤕 :face_with_head_bandage: \\ud83e\\udd15 🤢 :nauseated_face: \\ud83e\\udd22 🤮 :face_vomiting: \\ud83e\\udd2e 🤧 :sneezing_face: \\ud83e\\udd27 🥵 :hot_face: \\ud83e\\udd75 🥶 :cold_face: \\ud83e\\udd76 🥴 :woozy_face: \\ud83e\\udd74 😵 :dizzy_face: \\ud83d\\ude35 🤯 :exploding_head: \\ud83e\\udd2f 🤠 :cowboy_hat_face: \\ud83e\\udd20 🥳 :partying_face: \\ud83e\\udd73 😎 :sunglasses: \\ud83d\\ude0e 🤓 :nerd_face: \\ud83e\\udd13 🧐 :face_with_monocle: \\ud83e\\uddd0 😕 :confused: \\ud83d\\ude15 😟 :worried: \\ud83d\\ude1f 🙁 :slightly_frowning_face: \\ud83d\\ude41 ☹ :frowning_face: \\u2639 😮 :open_mouth: \\ud83d\\ude2e 😯 :hushed: \\ud83d\\ude2f 😲 :astonished: \\ud83d\\ude32 😳 :flushed: \\ud83d\\ude33 🥺 :pleading_face: \\ud83e\\udd7a 😦 :frowning: \\ud83d\\ude26 😧 :anguished: \\ud83d\\ude27 😨 :fearful: \\ud83d\\ude28 😰 :cold_sweat: \\ud83d\\ude30 😥 :disappointed_relieved: \\ud83d\\ude25 😢 :cry: \\ud83d\\ude22 😭 :sob: \\ud83d\\ude2d 😱 :scream: \\ud83d\\ude31 😖 :confounded: \\ud83d\\ude16 😣 :persevere: \\ud83d\\ude23 😞 :disappointed: \\ud83d\\ude1e 😓 :sweat: \\ud83d\\ude13 😩 :weary: \\ud83d\\ude29 😫 :tired_face: \\ud83d\\ude2b 🥱 :yawning_face: \\ud83e\\udd71 😤 :triumph: \\ud83d\\ude24 😡 :rage: \\ud83d\\ude21 😠 :angry: \\ud83d\\ude20 🤬 :cursing_face: \\ud83e\\udd2c 😈 :smiling_imp: \\ud83d\\ude08 👿 :imp: \\ud83d\\udc7f 💀 :skull: \\ud83d\\udc80 ☠ :skull_and_crossbones: \\u2620 💩 :poop: \\ud83d\\udca9 🤡 :clown_face: \\ud83e\\udd21 👹 :japanese_ogre: \\ud83d\\udc79 👺 :japanese_goblin: \\ud83d\\udc7a 👻 :ghost: \\ud83d\\udc7b 👽 :alien: \\ud83d\\udc7d 👾 :space_invader: \\ud83d\\udc7e 🤖 :robot: \\ud83e\\udd16 😺 :smiley_cat: \\ud83d\\ude3a 😸 :smile_cat: \\ud83d\\ude38 😹 :joy_cat: \\ud83d\\ude39 😻 :heart_eyes_cat: \\ud83d\\ude3b 😼 :smirk_cat: \\ud83d\\ude3c 😽 :kissing_cat: \\ud83d\\ude3d 🙀 :scream_cat: \\ud83d\\ude40 😿 :crying_cat_face: \\ud83d\\ude3f 😾 :pouting_cat: \\ud83d\\ude3e 💋 :kiss: \\ud83d\\udc8b 👋 :wave: \\ud83d\\udc4b 🤚 :raised_back_of_hand: \\ud83e\\udd1a 🖐 :raised_hand_with_fingers_splayed: \\ud83d\\udd90 ✋ :raised_hand: \\u270b 🖖 :vulcan_salute: \\ud83d\\udd96 👌 :ok_hand: \\ud83d\\udc4c 🤏 :pinching_hand: \\ud83e\\udd0f ✌ :v: \\u270c 🤞 :crossed_fingers: \\ud83e\\udd1e 🤟 :love_you_gesture: \\ud83e\\udd1f 🤘 :metal: \\ud83e\\udd18 🤙 :call_me_hand: \\ud83e\\udd19 👈 :point_left: \\ud83d\\udc48 👉 :point_right: \\ud83d\\udc49 👆 :point_up_2: \\ud83d\\udc46 🖕 :middle_finger: \\ud83d\\udd95 👇 :point_down: \\ud83d\\udc47 ☝ :point_up: \\u261d 👍 👍 \\ud83d\\udc4d 👎 :-1: \\ud83d\\udc4e ✊ :fist: \\u270a 👊 :punch: \\ud83d\\udc4a 🤛 :fist_left: \\ud83e\\udd1b 🤜 :fist_right: \\ud83e\\udd1c 👏 :clap: \\ud83d\\udc4f 🙌 :raised_hands: \\ud83d\\ude4c 👐 :open_hands: \\ud83d\\udc50 🤲 :palms_up_together: \\ud83e\\udd32 🤝 :handshake: \\ud83e\\udd1d 🙏 :pray: \\ud83d\\ude4f ✍ :writing_hand: \\u270d 💅 :nail_care: \\ud83d\\udc85 🤳 :selfie: \\ud83e\\udd33 💪 :muscle: \\ud83d\\udcaa 🦾 :mechanical_arm: \\ud83e\\uddbe 🦿 :mechanical_leg: \\ud83e\\uddbf 🦵 :leg: \\ud83e\\uddb5 🦶 :foot: \\ud83e\\uddb6 👂 :ear: \\ud83d\\udc42 🦻 :ear_with_hearing_aid: \\ud83e\\uddbb 👃 :nose: \\ud83d\\udc43 🧠 :brain: \\ud83e\\udde0 🦷 :tooth: \\ud83e\\uddb7 🦴 :bone: \\ud83e\\uddb4 👀 :eyes: \\ud83d\\udc40 👁 :eye: \\ud83d\\udc41 👅 :tongue: \\ud83d\\udc45 👄 :lips: \\ud83d\\udc44 👶 :baby: \\ud83d\\udc76 🧒 :child: \\ud83e\\uddd2 👦 :boy: \\ud83d\\udc66 👧 :girl: \\ud83d\\udc67 🧑 :adult: \\ud83e\\uddd1 👱 :person_blond_hair: \\ud83d\\udc71 👨 :man: \\ud83d\\udc68 🧔 :bearded_person: \\ud83e\\uddd4 👨‍🦰 :red_haired_man: \\ud83d\\udc68\\u200d\\ud83e\\uddb0 👨‍🦱 :curly_haired_man: \\ud83d\\udc68\\u200d\\ud83e\\uddb1 👨‍🦳 :white_haired_man: \\ud83d\\udc68\\u200d\\ud83e\\uddb3 👨‍🦲 :bald_man: \\ud83d\\udc68\\u200d\\ud83e\\uddb2 👩 :woman: \\ud83d\\udc69 👩‍🦰 :red_haired_woman: \\ud83d\\udc69\\u200d\\ud83e\\uddb0 🧑‍🦰 :person_red_hair: \\ud83e\\uddd1\\u200d\\ud83e\\uddb0 👩‍🦱 :curly_haired_woman: \\ud83d\\udc69\\u200d\\ud83e\\uddb1 🧑‍🦱 :person_curly_hair: \\ud83e\\uddd1\\u200d\\ud83e\\uddb1 👩‍🦳 :white_haired_woman: \\ud83d\\udc69\\u200d\\ud83e\\uddb3 🧑‍🦳 :person_white_hair: \\ud83e\\uddd1\\u200d\\ud83e\\uddb3 👩‍🦲 :bald_woman: \\ud83d\\udc69\\u200d\\ud83e\\uddb2 🧑‍🦲 :person_bald: \\ud83e\\uddd1\\u200d\\ud83e\\uddb2 👱‍♀️ :blonde_woman: \\ud83d\\udc71\\u200d\\u2640\\ufe0f 👱‍♂️ :man_blond_hair: \\ud83d\\udc71\\u200d\\u2642\\ufe0f 🧓 :older_adult: \\ud83e\\uddd3 👴 :older_man: \\ud83d\\udc74 👵 :older_woman: \\ud83d\\udc75 🙍 :person_frowning: \\ud83d\\ude4d 🙍‍♂️ :frowning_man: \\ud83d\\ude4d\\u200d\\u2642\\ufe0f 🙍‍♀️ :frowning_woman: \\ud83d\\ude4d\\u200d\\u2640\\ufe0f 🙎 :pouting_face: \\ud83d\\ude4e 🙎‍♂️ :man_pouting: \\ud83d\\ude4e\\u200d\\u2642\\ufe0f 🙎‍♀️ :pouting_woman: \\ud83d\\ude4e\\u200d\\u2640\\ufe0f 🙅 :no_good: \\ud83d\\ude45 🙅‍♂️ :ng_man: \\ud83d\\ude45\\u200d\\u2642\\ufe0f 🙅‍♀️ :ng_woman: \\ud83d\\ude45\\u200d\\u2640\\ufe0f 🙆 :ok_woman: \\ud83d\\ude46 🙆‍♂️ :ok_man: \\ud83d\\ude46\\u200d\\u2642\\ufe0f 🙆‍♀️ :woman_gesturing_ok: \\ud83d\\ude46\\u200d\\u2640\\ufe0f 💁 :information_desk_person: \\ud83d\\udc81 💁‍♂️ :sassy_man: \\ud83d\\udc81\\u200d\\u2642\\ufe0f 💁‍♀️ :sassy_woman: \\ud83d\\udc81\\u200d\\u2640\\ufe0f 🙋 :raising_hand: \\ud83d\\ude4b 🙋‍♂️ :man_raising_hand: \\ud83d\\ude4b\\u200d\\u2642\\ufe0f 🙋‍♀️ :raising_hand_woman: \\ud83d\\ude4b\\u200d\\u2640\\ufe0f 🧏 :deaf_person: \\ud83e\\uddcf 🧏‍♂️ :deaf_man: \\ud83e\\uddcf\\u200d\\u2642\\ufe0f 🧏‍♀️ :deaf_woman: \\ud83e\\uddcf\\u200d\\u2640\\ufe0f 🙇 :bow: \\ud83d\\ude47 🙇‍♂️ :bowing_man: \\ud83d\\ude47\\u200d\\u2642\\ufe0f 🙇‍♀️ :bowing_woman: \\ud83d\\ude47\\u200d\\u2640\\ufe0f 🤦 :facepalm: \\ud83e\\udd26 🤦‍♂️ :man_facepalming: \\ud83e\\udd26\\u200d\\u2642\\ufe0f 🤦‍♀️ :woman_facepalming: \\ud83e\\udd26\\u200d\\u2640\\ufe0f 🤷 :shrug: \\ud83e\\udd37 🤷‍♂️ :man_shrugging: \\ud83e\\udd37\\u200d\\u2642\\ufe0f 🤷‍♀️ :woman_shrugging: \\ud83e\\udd37\\u200d\\u2640\\ufe0f 🧑‍⚕️ :health_worker: \\ud83e\\uddd1\\u200d\\u2695\\ufe0f 👨‍⚕️ :man_health_worker: \\ud83d\\udc68\\u200d\\u2695\\ufe0f 👩‍⚕️ :woman_health_worker: \\ud83d\\udc69\\u200d\\u2695\\ufe0f 🧑‍🎓 :student: \\ud83e\\uddd1\\u200d\\ud83c\\udf93 👨‍🎓 :man_student: \\ud83d\\udc68\\u200d\\ud83c\\udf93 👩‍🎓 :woman_student: \\ud83d\\udc69\\u200d\\ud83c\\udf93 🧑‍🏫 :teacher: \\ud83e\\uddd1\\u200d\\ud83c\\udfeb 👨‍🏫 :man_teacher: \\ud83d\\udc68\\u200d\\ud83c\\udfeb 👩‍🏫 :woman_teacher: \\ud83d\\udc69\\u200d\\ud83c\\udfeb 🧑‍⚖️ :judge: \\ud83e\\uddd1\\u200d\\u2696\\ufe0f 👨‍⚖️ :man_judge: \\ud83d\\udc68\\u200d\\u2696\\ufe0f 👩‍⚖️ :woman_judge: \\ud83d\\udc69\\u200d\\u2696\\ufe0f 🧑‍🌾 :farmer: \\ud83e\\uddd1\\u200d\\ud83c\\udf3e 👨‍🌾 :man_farmer: \\ud83d\\udc68\\u200d\\ud83c\\udf3e 👩‍🌾 :woman_farmer: \\ud83d\\udc69\\u200d\\ud83c\\udf3e 🧑‍🍳 :cook: \\ud83e\\uddd1\\u200d\\ud83c\\udf73 👨‍🍳 :man_cook: \\ud83d\\udc68\\u200d\\ud83c\\udf73 👩‍🍳 :woman_cook: \\ud83d\\udc69\\u200d\\ud83c\\udf73 🧑‍🔧 :mechanic: \\ud83e\\uddd1\\u200d\\ud83d\\udd27 👨‍🔧 :man_mechanic: \\ud83d\\udc68\\u200d\\ud83d\\udd27 👩‍🔧 :woman_mechanic: \\ud83d\\udc69\\u200d\\ud83d\\udd27 🧑‍🏭 :factory_worker: \\ud83e\\uddd1\\u200d\\ud83c\\udfed 👨‍🏭 :man_factory_worker: \\ud83d\\udc68\\u200d\\ud83c\\udfed 👩‍🏭 :woman_factory_worker: \\ud83d\\udc69\\u200d\\ud83c\\udfed 🧑‍💼 :office_worker: \\ud83e\\uddd1\\u200d\\ud83d\\udcbc 👨‍💼 :man_office_worker: \\ud83d\\udc68\\u200d\\ud83d\\udcbc 👩‍💼 :woman_office_worker: \\ud83d\\udc69\\u200d\\ud83d\\udcbc 🧑‍🔬 :scientist: \\ud83e\\uddd1\\u200d\\ud83d\\udd2c 👨‍🔬 :man_scientist: \\ud83d\\udc68\\u200d\\ud83d\\udd2c 👩‍🔬 :woman_scientist: \\ud83d\\udc69\\u200d\\ud83d\\udd2c 🧑‍💻 :technologist: \\ud83e\\uddd1\\u200d\\ud83d\\udcbb 👨‍💻 :man_technologist: \\ud83d\\udc68\\u200d\\ud83d\\udcbb 👩‍💻 :woman_technologist: \\ud83d\\udc69\\u200d\\ud83d\\udcbb 🧑‍🎤 :singer: \\ud83e\\uddd1\\u200d\\ud83c\\udfa4 👨‍🎤 :man_singer: \\ud83d\\udc68\\u200d\\ud83c\\udfa4 👩‍🎤 :woman_singer: \\ud83d\\udc69\\u200d\\ud83c\\udfa4 🧑‍🎨 :artist: \\ud83e\\uddd1\\u200d\\ud83c\\udfa8 👨‍🎨 :man_artist: \\ud83d\\udc68\\u200d\\ud83c\\udfa8 👩‍🎨 :woman_artist: \\ud83d\\udc69\\u200d\\ud83c\\udfa8 🧑‍✈️ :pilot: \\ud83e\\uddd1\\u200d\\u2708\\ufe0f 👨‍✈️ :man_pilot: \\ud83d\\udc68\\u200d\\u2708\\ufe0f 👩‍✈️ :woman_pilot: \\ud83d\\udc69\\u200d\\u2708\\ufe0f 🧑‍🚀 :astronaut: \\ud83e\\uddd1\\u200d\\ud83d\\ude80 👨‍🚀 :man_astronaut: \\ud83d\\udc68\\u200d\\ud83d\\ude80 👩‍🚀 :woman_astronaut: \\ud83d\\udc69\\u200d\\ud83d\\ude80 🧑‍🚒 :firefighter: \\ud83e\\uddd1\\u200d\\ud83d\\ude92 👨‍🚒 :man_firefighter: \\ud83d\\udc68\\u200d\\ud83d\\ude92 👩‍🚒 :woman_firefighter: \\ud83d\\udc69\\u200d\\ud83d\\ude92 👮 :cop: \\ud83d\\udc6e 👮‍♂️ :policeman: \\ud83d\\udc6e\\u200d\\u2642\\ufe0f 👮‍♀️ :policewoman: \\ud83d\\udc6e\\u200d\\u2640\\ufe0f 🕵 :detective: \\ud83d\\udd75 🕵️‍♂️ :man_detective: \\ud83d\\udd75\\ufe0f\\u200d\\u2642\\ufe0f 🕵️‍♀️ :woman_detective: \\ud83d\\udd75\\ufe0f\\u200d\\u2640\\ufe0f 💂 :guard: \\ud83d\\udc82 💂‍♂️ :guardsman: \\ud83d\\udc82\\u200d\\u2642\\ufe0f 💂‍♀️ :guardswoman: \\ud83d\\udc82\\u200d\\u2640\\ufe0f 👷 :construction_worker: \\ud83d\\udc77 👷‍♂️ :construction_worker_man: \\ud83d\\udc77\\u200d\\u2642\\ufe0f 👷‍♀️ :construction_worker_woman: \\ud83d\\udc77\\u200d\\u2640\\ufe0f 🤴 :prince: \\ud83e\\udd34 👸 :princess: \\ud83d\\udc78 👳 :man_with_turban: \\ud83d\\udc73 👳‍♂️ :man_wearing_turban: \\ud83d\\udc73\\u200d\\u2642\\ufe0f 👳‍♀️ :woman_with_turban: \\ud83d\\udc73\\u200d\\u2640\\ufe0f 👲 :man_with_gua_pi_mao: \\ud83d\\udc72 🧕 :woman_with_headscarf: \\ud83e\\uddd5 🤵 :man_in_tuxedo: \\ud83e\\udd35 👰 :bride_with_veil: \\ud83d\\udc70 🤰 :pregnant_woman: \\ud83e\\udd30 🤱 :breast_feeding: \\ud83e\\udd31 👼 :angel: \\ud83d\\udc7c 🎅 :santa: \\ud83c\\udf85 🤶 :mrs_claus: \\ud83e\\udd36 🦸 :superhero: \\ud83e\\uddb8 🦸‍♂️ :man_superhero: \\ud83e\\uddb8\\u200d\\u2642\\ufe0f 🦸‍♀️ :superhero_woman: \\ud83e\\uddb8\\u200d\\u2640\\ufe0f 🦹 :supervillain: \\ud83e\\uddb9 🦹‍♂️ :man_supervillain: \\ud83e\\uddb9\\u200d\\u2642\\ufe0f 🦹‍♀️ :supervillain_woman: \\ud83e\\uddb9\\u200d\\u2640\\ufe0f 🧙 :mage: \\ud83e\\uddd9 🧙‍♂️ :mage_man: \\ud83e\\uddd9\\u200d\\u2642\\ufe0f 🧙‍♀️ :mage_woman: \\ud83e\\uddd9\\u200d\\u2640\\ufe0f 🧚 :fairy: \\ud83e\\uddda 🧚‍♂️ :fairy_man: \\ud83e\\uddda\\u200d\\u2642\\ufe0f 🧚‍♀️ :fairy_woman: \\ud83e\\uddda\\u200d\\u2640\\ufe0f 🧛 :vampire: \\ud83e\\udddb 🧛‍♂️ :man_vampire: \\ud83e\\udddb\\u200d\\u2642\\ufe0f 🧛‍♀️ :vampire_woman: \\ud83e\\udddb\\u200d\\u2640\\ufe0f 🧜 :merperson: \\ud83e\\udddc 🧜‍♂️ :merman: \\ud83e\\udddc\\u200d\\u2642\\ufe0f 🧜‍♀️ :mermaid: \\ud83e\\udddc\\u200d\\u2640\\ufe0f 🧝 :elf: \\ud83e\\udddd 🧝‍♂️ :elf_man: \\ud83e\\udddd\\u200d\\u2642\\ufe0f 🧝‍♀️ :elf_woman: \\ud83e\\udddd\\u200d\\u2640\\ufe0f 🧞 :genie: \\ud83e\\uddde 🧞‍♂️ :genie_man: \\ud83e\\uddde\\u200d\\u2642\\ufe0f 🧞‍♀️ :genie_woman: \\ud83e\\uddde\\u200d\\u2640\\ufe0f 🧟 :zombie: \\ud83e\\udddf 🧟‍♂️ :man_zombie: \\ud83e\\udddf\\u200d\\u2642\\ufe0f 🧟‍♀️ :woman_zombie: \\ud83e\\udddf\\u200d\\u2640\\ufe0f 💆 :massage: \\ud83d\\udc86 💆‍♂️ :massage_man: \\ud83d\\udc86\\u200d\\u2642\\ufe0f 💆‍♀️ :massage_woman: \\ud83d\\udc86\\u200d\\u2640\\ufe0f 💇 :haircut: \\ud83d\\udc87 💇‍♂️ :haircut_man: \\ud83d\\udc87\\u200d\\u2642\\ufe0f 💇‍♀️ :haircut_woman: \\ud83d\\udc87\\u200d\\u2640\\ufe0f 🚶 :walking: \\ud83d\\udeb6 🚶‍♂️ :man_walking: \\ud83d\\udeb6\\u200d\\u2642\\ufe0f 🚶‍♀️ :walking_woman: \\ud83d\\udeb6\\u200d\\u2640\\ufe0f 🧍 :standing_person: \\ud83e\\uddcd 🧍‍♂️ :man_standing: \\ud83e\\uddcd\\u200d\\u2642\\ufe0f 🧍‍♀️ :woman_standing: \\ud83e\\uddcd\\u200d\\u2640\\ufe0f 🧎 :kneeling_person: \\ud83e\\uddce 🧎‍♂️ :man_kneeling: \\ud83e\\uddce\\u200d\\u2642\\ufe0f 🧎‍♀️ :woman_kneeling: \\ud83e\\uddce\\u200d\\u2640\\ufe0f 🧑‍🦯 :person_with_probing_cane: \\ud83e\\uddd1\\u200d\\ud83e\\uddaf 👨‍🦯 :man_with_probing_cane: \\ud83d\\udc68\\u200d\\ud83e\\uddaf 👩‍🦯 :woman_with_probing_cane: \\ud83d\\udc69\\u200d\\ud83e\\uddaf 🧑‍🦼 :person_in_motorized_wheelchair: \\ud83e\\uddd1\\u200d\\ud83e\\uddbc 👨‍🦼 :man_in_motorized_wheelchair: \\ud83d\\udc68\\u200d\\ud83e\\uddbc 👩‍🦼 :woman_in_motorized_wheelchair: \\ud83d\\udc69\\u200d\\ud83e\\uddbc 🧑‍🦽 :person_in_manual_wheelchair: \\ud83e\\uddd1\\u200d\\ud83e\\uddbd 👨‍🦽 :man_in_manual_wheelchair: \\ud83d\\udc68\\u200d\\ud83e\\uddbd 👩‍🦽 :woman_in_manual_wheelchair: \\ud83d\\udc69\\u200d\\ud83e\\uddbd 🏃 :runner: \\ud83c\\udfc3 🏃‍♂️ :man_running: \\ud83c\\udfc3\\u200d\\u2642\\ufe0f 🏃‍♀️ :running_woman: \\ud83c\\udfc3\\u200d\\u2640\\ufe0f 💃 :dancer: \\ud83d\\udc83 🕺 :man_dancing: \\ud83d\\udd7a 🕴 :business_suit_levitating: \\ud83d\\udd74 👯 :dancers: \\ud83d\\udc6f 👯‍♂️ :dancing_men: \\ud83d\\udc6f\\u200d\\u2642\\ufe0f 👯‍♀️ :dancing_women: \\ud83d\\udc6f\\u200d\\u2640\\ufe0f 🧖 :person_in_steamy_room: \\ud83e\\uddd6 🧖‍♂️ :man_in_steamy_room: \\ud83e\\uddd6\\u200d\\u2642\\ufe0f 🧖‍♀️ :woman_in_steamy_room: \\ud83e\\uddd6\\u200d\\u2640\\ufe0f 🧘 :lotus_position: \\ud83e\\uddd8 🧑‍🤝‍🧑 :people_holding_hands: \\ud83e\\uddd1\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1 👭 :women_holding_hands: \\ud83d\\udc6d 👫 :couple: \\ud83d\\udc6b 👬 :men_holding_hands: \\ud83d\\udc6c 💏 :couplekiss: \\ud83d\\udc8f 👨‍❤️‍💋‍👨 :kiss_man_man: \\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68 👩‍❤️‍💋‍👩 :kiss_woman_woman: \\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69 💑 :couple_with_heart: \\ud83d\\udc91 👨‍❤️‍👨 :man-heart-man: \\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68 👩‍❤️‍👩 :woman-heart-woman: \\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69 👪 :family: \\ud83d\\udc6a 👨‍👩‍👦 :family_man_woman_boy: \\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66 👨‍👩‍👧 :family_man_woman_girl: \\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67 👨‍👩‍👧‍👦 :family_man_woman_girl_boy: \\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc66 👨‍👩‍👦‍👦 :family_man_woman_boy_boy: \\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66 👨‍👩‍👧‍👧 :family_man_woman_girl_girl: \\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc67 👨‍👨‍👦 :family_man_man_boy: \\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc66 👨‍👨‍👧 :family_man_man_girl: \\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc67 👨‍👨‍👧‍👦 :family_man_man_girl_boy: \\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc66 👨‍👨‍👦‍👦 :family_man_man_boy_boy: \\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66 👨‍👨‍👧‍👧 :family_man_man_girl_girl: \\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc67 👩‍👩‍👦 :family_woman_woman_boy: \\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66 👩‍👩‍👧 :family_woman_woman_girl: \\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67 👩‍👩‍👧‍👦 :family_woman_woman_girl_boy: \\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc66 👩‍👩‍👦‍👦 :family_woman_woman_boy_boy: \\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66 👩‍👩‍👧‍👧 :family_woman_woman_girl_girl: \\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc67 👨‍👦 :family_man_boy: \\ud83d\\udc68\\u200d\\ud83d\\udc66 👨‍👦‍👦 :family_man_boy_boy: \\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66 👨‍👧 :family_man_girl: \\ud83d\\udc68\\u200d\\ud83d\\udc67 👨‍👧‍👦 :family_man_girl_boy: \\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc66 👨‍👧‍👧 :family_man_girl_girl: \\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc67 👩‍👦 :family_woman_boy: \\ud83d\\udc69\\u200d\\ud83d\\udc66 👩‍👦‍👦 :family_woman_boy_boy: \\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66 👩‍👧 :family_woman_girl: \\ud83d\\udc69\\u200d\\ud83d\\udc67 👩‍👧‍👦 :family_woman_girl_boy: \\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc66 👩‍👧‍👧 :woman-girl-girl: \\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc67 🗣 :speaking_head: \\ud83d\\udde3 👤 :bust_in_silhouette: \\ud83d\\udc64 👥 :busts_in_silhouette: \\ud83d\\udc65 👣 :footprints: \\ud83d\\udc63 🧳 :luggage: \\ud83e\\uddf3 🌂 :closed_umbrella: \\ud83c\\udf02 ☂ :umbrella: \\u2602 🎃 :jack_o_lantern: \\ud83c\\udf83 🧵 :thread: \\ud83e\\uddf5 🧶 :yarn: \\ud83e\\uddf6 👓 :eyeglasses: \\ud83d\\udc53 🕶 :dark_sunglasses: \\ud83d\\udd76 🥽 :goggles: \\ud83e\\udd7d 🥼 :lab_coat: \\ud83e\\udd7c 🦺 :safety_vest: \\ud83e\\uddba 👔 :necktie: \\ud83d\\udc54 👕 :shirt: \\ud83d\\udc55 👖 :jeans: \\ud83d\\udc56 🧣 :scarf: \\ud83e\\udde3 🧤 :gloves: \\ud83e\\udde4 🧥 :coat: \\ud83e\\udde5 🧦 :socks: \\ud83e\\udde6 👗 :dress: \\ud83d\\udc57 👘 :kimono: \\ud83d\\udc58 🥻 :sari: \\ud83e\\udd7b 🩱 :one_piece_swimsuit: \\ud83e\\ude71 🩲 :briefs: \\ud83e\\ude72 🩳 :shorts: \\ud83e\\ude73 👙 :bikini: \\ud83d\\udc59 👚 :womans_clothes: \\ud83d\\udc5a 👛 :purse: \\ud83d\\udc5b 👜 :handbag: \\ud83d\\udc5c 👝 :pouch: \\ud83d\\udc5d 🎒 :school_satchel: \\ud83c\\udf92 👞 :mans_shoe: \\ud83d\\udc5e 👟 :athletic_shoe: \\ud83d\\udc5f 🥾 :hiking_boot: \\ud83e\\udd7e 🥿 :flat_shoe: \\ud83e\\udd7f 👠 :high_heel: \\ud83d\\udc60 👡 :sandal: \\ud83d\\udc61 🩰 :ballet_shoes: \\ud83e\\ude70 👢 :boot: \\ud83d\\udc62 👑 :crown: \\ud83d\\udc51 👒 :womans_hat: \\ud83d\\udc52 🎩 :tophat: \\ud83c\\udfa9 🎓 :mortar_board: \\ud83c\\udf93 🧢 :billed_cap: \\ud83e\\udde2 ⛑ :rescue_worker_helmet: \\u26d1 💄 :lipstick: \\ud83d\\udc84 💍 :ring: \\ud83d\\udc8d 💼 :briefcase: \\ud83d\\udcbc 🩸 :drop_of_blood: \\ud83e\\ude78 🙈 :see_no_evil: \\ud83d\\ude48 🙉 :hear_no_evil: \\ud83d\\ude49 🙊 :speak_no_evil: \\ud83d\\ude4a 💥 :collision: \\ud83d\\udca5 💫 :dizzy: \\ud83d\\udcab 💦 :sweat_drops: \\ud83d\\udca6 💨 :dash: \\ud83d\\udca8 🐵 :monkey_face: \\ud83d\\udc35 🐒 :monkey: \\ud83d\\udc12 🦍 :gorilla: \\ud83e\\udd8d 🦧 :orangutan: \\ud83e\\udda7 🐶 :dog: \\ud83d\\udc36 🐕 :dog2: \\ud83d\\udc15 🦮 :guide_dog: \\ud83e\\uddae 🐕‍🦺 :service_dog: \\ud83d\\udc15\\u200d\\ud83e\\uddba 🐩 :poodle: \\ud83d\\udc29 🐺 :wolf: \\ud83d\\udc3a 🦊 :fox_face: \\ud83e\\udd8a 🦝 :raccoon: \\ud83e\\udd9d 🐱 :cat: \\ud83d\\udc31 🐈 :cat2: \\ud83d\\udc08 🦁 :lion: \\ud83e\\udd81 🐯 :tiger: \\ud83d\\udc2f 🐅 :tiger2: \\ud83d\\udc05 🐆 :leopard: \\ud83d\\udc06 🐴 :horse: \\ud83d\\udc34 🐎 :racehorse: \\ud83d\\udc0e 🦄 :unicorn: \\ud83e\\udd84 🦓 :zebra: \\ud83e\\udd93 🦌 :deer: \\ud83e\\udd8c 🐮 :cow: \\ud83d\\udc2e 🐂 :ox: \\ud83d\\udc02 🐃 :water_buffalo: \\ud83d\\udc03 🐄 :cow2: \\ud83d\\udc04 🐷 :pig: \\ud83d\\udc37 🐖 :pig2: \\ud83d\\udc16 🐗 :boar: \\ud83d\\udc17 🐽 :pig_nose: \\ud83d\\udc3d 🐏 :ram: \\ud83d\\udc0f 🐑 :sheep: \\ud83d\\udc11 🐐 :goat: \\ud83d\\udc10 🐪 :camel: \\ud83d\\udc2a 🐫 :two_hump_camel: \\ud83d\\udc2b 🦙 :llama: \\ud83e\\udd99 🦒 :giraffe: \\ud83e\\udd92 🐘 :elephant: \\ud83d\\udc18 🦏 :rhinoceros: \\ud83e\\udd8f 🦛 :hippopotamus: \\ud83e\\udd9b 🐭 :mouse: \\ud83d\\udc2d 🐁 :mouse2: \\ud83d\\udc01 🐀 :rat: \\ud83d\\udc00 🐹 :hamster: \\ud83d\\udc39 🐰 :rabbit: \\ud83d\\udc30 🐇 :rabbit2: \\ud83d\\udc07 🐿 :chipmunk: \\ud83d\\udc3f 🦔 :hedgehog: \\ud83e\\udd94 🦇 :bat: \\ud83e\\udd87 🐻 :bear: \\ud83d\\udc3b 🐨 :koala: \\ud83d\\udc28 🐼 :panda_face: \\ud83d\\udc3c 🦥 :sloth: \\ud83e\\udda5 🦦 :otter: \\ud83e\\udda6 🦨 :skunk: \\ud83e\\udda8 🦘 :kangaroo: \\ud83e\\udd98 🦡 :badger: \\ud83e\\udda1 🐾 :paw_prints: \\ud83d\\udc3e 🦃 :turkey: \\ud83e\\udd83 🐔 :chicken: \\ud83d\\udc14 🐓 :rooster: \\ud83d\\udc13 🐣 :hatching_chick: \\ud83d\\udc23 🐤 :baby_chick: \\ud83d\\udc24 🐥 :hatched_chick: \\ud83d\\udc25 🐦 :bird: \\ud83d\\udc26 🐧 :penguin: \\ud83d\\udc27 🕊 :dove: \\ud83d\\udd4a 🦅 :eagle: \\ud83e\\udd85 🦆 :duck: \\ud83e\\udd86 🦢 :swan: \\ud83e\\udda2 🦉 :owl: \\ud83e\\udd89 🦩 :flamingo: \\ud83e\\udda9 🦚 :peacock: \\ud83e\\udd9a 🦜 :parrot: \\ud83e\\udd9c 🐸 :frog: \\ud83d\\udc38 🐊 :crocodile: \\ud83d\\udc0a 🐢 :turtle: \\ud83d\\udc22 🦎 :lizard: \\ud83e\\udd8e 🐍 :snake: \\ud83d\\udc0d 🐲 :dragon_face: \\ud83d\\udc32 🐉 :dragon: \\ud83d\\udc09 🦕 :sauropod: \\ud83e\\udd95 🦖 :t-rex: \\ud83e\\udd96 🐳 :whale: \\ud83d\\udc33 🐋 :whale2: \\ud83d\\udc0b 🐬 :dolphin: \\ud83d\\udc2c 🐟 :fish: \\ud83d\\udc1f 🐠 :tropical_fish: \\ud83d\\udc20 🐡 :blowfish: \\ud83d\\udc21 🦈 :shark: \\ud83e\\udd88 🐙 :octopus: \\ud83d\\udc19 🐚 :shell: \\ud83d\\udc1a 🐌 :snail: \\ud83d\\udc0c 🦋 :butterfly: \\ud83e\\udd8b 🐛 :bug: \\ud83d\\udc1b 🐜 :ant: \\ud83d\\udc1c 🐝 :honeybee: \\ud83d\\udc1d 🐞 :beetle: \\ud83d\\udc1e 🦗 :cricket: \\ud83e\\udd97 🕷 :spider: \\ud83d\\udd77 🕸 :spider_web: \\ud83d\\udd78 🦂 :scorpion: \\ud83e\\udd82 🦟 :mosquito: \\ud83e\\udd9f 🦠 :microbe: \\ud83e\\udda0 💐 :bouquet: \\ud83d\\udc90 🌸 :cherry_blossom: \\ud83c\\udf38 💮 :white_flower: \\ud83d\\udcae 🏵 :rosette: \\ud83c\\udff5 🌹 :rose: \\ud83c\\udf39 🥀 :wilted_flower: \\ud83e\\udd40 🌺 :hibiscus: \\ud83c\\udf3a 🌻 :sunflower: \\ud83c\\udf3b 🌼 :blossom: \\ud83c\\udf3c 🌷 :tulip: \\ud83c\\udf37 🌱 :seedling: \\ud83c\\udf31 🌲 :evergreen_tree: \\ud83c\\udf32 🌳 :deciduous_tree: \\ud83c\\udf33 🌴 :palm_tree: \\ud83c\\udf34 🌵 :cactus: \\ud83c\\udf35 🌾 :ear_of_rice: \\ud83c\\udf3e 🌿 :herb: \\ud83c\\udf3f ☘ :shamrock: \\u2618 🍀 :four_leaf_clover: \\ud83c\\udf40 🍁 :maple_leaf: \\ud83c\\udf41 🍂 :fallen_leaf: \\ud83c\\udf42 🍃 :leaves: \\ud83c\\udf43 🍄 :mushroom: \\ud83c\\udf44 🌰 :chestnut: \\ud83c\\udf30 🦀 :crab: \\ud83e\\udd80 🦞 :lobster: \\ud83e\\udd9e 🦐 :shrimp: \\ud83e\\udd90 🦑 :squid: \\ud83e\\udd91 🌍 :earth_africa: \\ud83c\\udf0d 🌎 :earth_americas: \\ud83c\\udf0e 🌏 :earth_asia: \\ud83c\\udf0f 🌐 :globe_with_meridians: \\ud83c\\udf10 🌑 :new_moon: \\ud83c\\udf11 🌒 :waxing_crescent_moon: \\ud83c\\udf12 🌓 :first_quarter_moon: \\ud83c\\udf13 🌔 :moon: \\ud83c\\udf14 🌕 :full_moon: \\ud83c\\udf15 🌖 :waning_gibbous_moon: \\ud83c\\udf16 🌗 :last_quarter_moon: \\ud83c\\udf17 🌘 :waning_crescent_moon: \\ud83c\\udf18 🌙 :crescent_moon: \\ud83c\\udf19 🌚 :new_moon_with_face: \\ud83c\\udf1a 🌛 :first_quarter_moon_with_face: \\ud83c\\udf1b 🌜 :last_quarter_moon_with_face: \\ud83c\\udf1c ☀ :sunny: \\u2600 🌝 :full_moon_with_face: \\ud83c\\udf1d 🌞 :sun_with_face: \\ud83c\\udf1e ⭐ :star: \\u2b50 🌟 :star2: \\ud83c\\udf1f 🌠 :stars: \\ud83c\\udf20 ☁ :cloud: \\u2601 ⛅ :partly_sunny: \\u26c5 ⛈ :cloud_with_lightning_and_rain: \\u26c8 🌤 :mostly_sunny: \\ud83c\\udf24 🌥 :barely_sunny: \\ud83c\\udf25 🌦 :sun_behind_rain_cloud: \\ud83c\\udf26 🌧 :cloud_with_rain: \\ud83c\\udf27 🌨 :cloud_with_snow: \\ud83c\\udf28 🌩 :lightning: \\ud83c\\udf29 🌪 :tornado: \\ud83c\\udf2a 🌫 :fog: \\ud83c\\udf2b 🌬 :wind_face: \\ud83c\\udf2c 🌈 :rainbow: \\ud83c\\udf08 ☔ :umbrella_with_rain_drops: \\u2614 ⚡ :zap: \\u26a1 ❄ :snowflake: \\u2744 ☃ :snowman: \\u2603 ⛄ :snowman_without_snow: \\u26c4 ☄ :comet: \\u2604 🔥 :fire: \\ud83d\\udd25 💧 :droplet: \\ud83d\\udca7 🌊 :ocean: \\ud83c\\udf0a 🎄 :christmas_tree: \\ud83c\\udf84 ✨ :sparkles: \\u2728 🎋 :tanabata_tree: \\ud83c\\udf8b 🎍 :bamboo: \\ud83c\\udf8d 🍇 :grapes: \\ud83c\\udf47 🍈 :melon: \\ud83c\\udf48 🍉 :watermelon: \\ud83c\\udf49 🍊 :tangerine: \\ud83c\\udf4a 🍋 :lemon: \\ud83c\\udf4b 🍌 :banana: \\ud83c\\udf4c 🍍 :pineapple: \\ud83c\\udf4d 🥭 :mango: \\ud83e\\udd6d 🍎 :apple: \\ud83c\\udf4e 🍏 :green_apple: \\ud83c\\udf4f 🍐 :pear: \\ud83c\\udf50 🍑 :peach: \\ud83c\\udf51 🍒 :cherries: \\ud83c\\udf52 🍓 :strawberry: \\ud83c\\udf53 🥝 :kiwi_fruit: \\ud83e\\udd5d 🍅 :tomato: \\ud83c\\udf45 🥥 :coconut: \\ud83e\\udd65 🥑 :avocado: \\ud83e\\udd51 🍆 :eggplant: \\ud83c\\udf46 🥔 :potato: \\ud83e\\udd54 🥕 :carrot: \\ud83e\\udd55 🌽 :corn: \\ud83c\\udf3d 🌶 :hot_pepper: \\ud83c\\udf36 🥒 :cucumber: \\ud83e\\udd52 🥬 :leafy_green: \\ud83e\\udd6c 🥦 :broccoli: \\ud83e\\udd66 🧄 :garlic: \\ud83e\\uddc4 🧅 :onion: \\ud83e\\uddc5 🥜 :peanuts: \\ud83e\\udd5c 🍞 :bread: \\ud83c\\udf5e 🥐 :croissant: \\ud83e\\udd50 🥖 :baguette_bread: \\ud83e\\udd56 🥨 :pretzel: \\ud83e\\udd68 🥯 :bagel: \\ud83e\\udd6f 🥞 :pancakes: \\ud83e\\udd5e 🧇 :waffle: \\ud83e\\uddc7 🧀 :cheese_wedge: \\ud83e\\uddc0 🍖 :meat_on_bone: \\ud83c\\udf56 🍗 :poultry_leg: \\ud83c\\udf57 🥩 :cut_of_meat: \\ud83e\\udd69 🥓 :bacon: \\ud83e\\udd53 🍔 :hamburger: \\ud83c\\udf54 🍟 :fries: \\ud83c\\udf5f 🍕 :pizza: \\ud83c\\udf55 🌭 :hotdog: \\ud83c\\udf2d 🥪 :sandwich: \\ud83e\\udd6a 🌮 :taco: \\ud83c\\udf2e 🌯 :burrito: \\ud83c\\udf2f 🥙 :stuffed_flatbread: \\ud83e\\udd59 🧆 :falafel: \\ud83e\\uddc6 🍳 :cooking: \\ud83c\\udf73 🥘 :shallow_pan_of_food: \\ud83e\\udd58 🍲 :stew: \\ud83c\\udf72 🥣 :bowl_with_spoon: \\ud83e\\udd63 🥗 :green_salad: \\ud83e\\udd57 🍿 :popcorn: \\ud83c\\udf7f 🧈 :butter: \\ud83e\\uddc8 🧂 :salt: \\ud83e\\uddc2 🥫 :canned_food: \\ud83e\\udd6b 🍱 :bento: \\ud83c\\udf71 🍘 :rice_cracker: \\ud83c\\udf58 🍙 :rice_ball: \\ud83c\\udf59 🍚 :rice: \\ud83c\\udf5a 🍛 :curry: \\ud83c\\udf5b 🍜 :ramen: \\ud83c\\udf5c 🍝 :spaghetti: \\ud83c\\udf5d 🍠 :sweet_potato: \\ud83c\\udf60 🍢 :oden: \\ud83c\\udf62 🍣 :sushi: \\ud83c\\udf63 🍤 :fried_shrimp: \\ud83c\\udf64 🍥 :fish_cake: \\ud83c\\udf65 🥮 :moon_cake: \\ud83e\\udd6e 🍡 :dango: \\ud83c\\udf61 🥟 :dumpling: \\ud83e\\udd5f 🥠 :fortune_cookie: \\ud83e\\udd60 🥡 :takeout_box: \\ud83e\\udd61 🦪 :oyster: \\ud83e\\uddaa 🍦 :icecream: \\ud83c\\udf66 🍧 :shaved_ice: \\ud83c\\udf67 🍨 :ice_cream: \\ud83c\\udf68 🍩 :doughnut: \\ud83c\\udf69 🍪 :cookie: \\ud83c\\udf6a 🎂 :birthday: \\ud83c\\udf82 🍰 :cake: \\ud83c\\udf70 🧁 :cupcake: \\ud83e\\uddc1 🥧 :pie: \\ud83e\\udd67 🍫 :chocolate_bar: \\ud83c\\udf6b 🍬 :candy: \\ud83c\\udf6c 🍭 :lollipop: \\ud83c\\udf6d 🍮 :custard: \\ud83c\\udf6e 🍯 :honey_pot: \\ud83c\\udf6f 🍼 :baby_bottle: \\ud83c\\udf7c 🥛 :glass_of_milk: \\ud83e\\udd5b ☕ :coffee: \\u2615 🍵 :tea: \\ud83c\\udf75 🍶 :sake: \\ud83c\\udf76 🍾 :champagne: \\ud83c\\udf7e 🍷 :wine_glass: \\ud83c\\udf77 🍸 :cocktail: \\ud83c\\udf78 🍹 :tropical_drink: \\ud83c\\udf79 🍺 :beer: \\ud83c\\udf7a 🍻 :beers: \\ud83c\\udf7b 🥂 :clinking_glasses: \\ud83e\\udd42 🥃 :tumbler_glass: \\ud83e\\udd43 🥤 :cup_with_straw: \\ud83e\\udd64 🧃 :beverage_box: \\ud83e\\uddc3 🧉 :mate: \\ud83e\\uddc9 🧊 :ice_cube: \\ud83e\\uddca 🥢 :chopsticks: \\ud83e\\udd62 🍽 :knife_fork_plate: \\ud83c\\udf7d 🍴 :fork_and_knife: \\ud83c\\udf74 🥄 :spoon: \\ud83e\\udd44 🧗 :person_climbing: \\ud83e\\uddd7 🧗‍♂️ :man_climbing: \\ud83e\\uddd7\\u200d\\u2642\\ufe0f 🧗‍♀️ :woman_climbing: \\ud83e\\uddd7\\u200d\\u2640\\ufe0f 🤺 :person_fencing: \\ud83e\\udd3a 🏇 :horse_racing: \\ud83c\\udfc7 ⛷ :skier: \\u26f7 🏂 :snowboarder: \\ud83c\\udfc2 🏌 :golfer: \\ud83c\\udfcc 🏌️‍♂️ :golfing_man: \\ud83c\\udfcc\\ufe0f\\u200d\\u2642\\ufe0f 🏌️‍♀️ :golfing_woman: \\ud83c\\udfcc\\ufe0f\\u200d\\u2640\\ufe0f 🏄 :surfer: \\ud83c\\udfc4 🏄‍♂️ :man_surfing: \\ud83c\\udfc4\\u200d\\u2642\\ufe0f 🏄‍♀️ :surfing_woman: \\ud83c\\udfc4\\u200d\\u2640\\ufe0f 🚣 :rowboat: \\ud83d\\udea3 🚣‍♂️ :rowing_man: \\ud83d\\udea3\\u200d\\u2642\\ufe0f 🚣‍♀️ :rowing_woman: \\ud83d\\udea3\\u200d\\u2640\\ufe0f 🏊 :swimmer: \\ud83c\\udfca 🏊‍♂️ :man_swimming: \\ud83c\\udfca\\u200d\\u2642\\ufe0f 🏊‍♀️ :swimming_woman: \\ud83c\\udfca\\u200d\\u2640\\ufe0f ⛹ :person_with_ball: \\u26f9 ⛹️‍♂️ :basketball_man: \\u26f9\\ufe0f\\u200d\\u2642\\ufe0f ⛹️‍♀️ :basketball_woman: \\u26f9\\ufe0f\\u200d\\u2640\\ufe0f 🏋 :weight_lifter: \\ud83c\\udfcb 🏋️‍♂️ :weight_lifting_man: \\ud83c\\udfcb\\ufe0f\\u200d\\u2642\\ufe0f 🏋️‍♀️ :weight_lifting_woman: \\ud83c\\udfcb\\ufe0f\\u200d\\u2640\\ufe0f 🚴 :bicyclist: \\ud83d\\udeb4 🚴‍♂️ :biking_man: \\ud83d\\udeb4\\u200d\\u2642\\ufe0f 🚴‍♀️ :biking_woman: \\ud83d\\udeb4\\u200d\\u2640\\ufe0f 🚵 :mountain_bicyclist: \\ud83d\\udeb5 🚵‍♂️ :man_mountain_biking: \\ud83d\\udeb5\\u200d\\u2642\\ufe0f 🚵‍♀️ :mountain_biking_woman: \\ud83d\\udeb5\\u200d\\u2640\\ufe0f 🤸 :cartwheeling: \\ud83e\\udd38 🤸‍♂️ :man_cartwheeling: \\ud83e\\udd38\\u200d\\u2642\\ufe0f 🤸‍♀️ :woman_cartwheeling: \\ud83e\\udd38\\u200d\\u2640\\ufe0f 🤼 :wrestlers: \\ud83e\\udd3c 🤼‍♂️ :men_wrestling: \\ud83e\\udd3c\\u200d\\u2642\\ufe0f 🤼‍♀️ :women_wrestling: \\ud83e\\udd3c\\u200d\\u2640\\ufe0f 🤽 :water_polo: \\ud83e\\udd3d 🤽‍♂️ :man_playing_water_polo: \\ud83e\\udd3d\\u200d\\u2642\\ufe0f 🤽‍♀️ :woman_playing_water_polo: \\ud83e\\udd3d\\u200d\\u2640\\ufe0f 🤾 :handball: \\ud83e\\udd3e 🤾‍♂️ :man_playing_handball: \\ud83e\\udd3e\\u200d\\u2642\\ufe0f 🤾‍♀️ :woman_playing_handball: \\ud83e\\udd3e\\u200d\\u2640\\ufe0f 🤹 :juggling: \\ud83e\\udd39 🤹‍♂️ :man_juggling: \\ud83e\\udd39\\u200d\\u2642\\ufe0f 🤹‍♀️ :woman_juggling: \\ud83e\\udd39\\u200d\\u2640\\ufe0f 🧘‍♂️ :man_in_lotus_position: \\ud83e\\uddd8\\u200d\\u2642\\ufe0f 🧘‍♀️ :woman_in_lotus_position: \\ud83e\\uddd8\\u200d\\u2640\\ufe0f 🎪 :circus_tent: \\ud83c\\udfaa 🛹 :skateboard: \\ud83d\\udef9 🛶 :canoe: \\ud83d\\udef6 🎗 :reminder_ribbon: \\ud83c\\udf97 🎟 :admission_tickets: \\ud83c\\udf9f 🎫 :ticket: \\ud83c\\udfab 🎖 :medal: \\ud83c\\udf96 🏆 :trophy: \\ud83c\\udfc6 🏅 :sports_medal: \\ud83c\\udfc5 🥇 :1st_place_medal: \\ud83e\\udd47 🥈 :2nd_place_medal: \\ud83e\\udd48 🥉 :3rd_place_medal: \\ud83e\\udd49 ⚽ :soccer: \\u26bd ⚾ :baseball: \\u26be 🥎 :softball: \\ud83e\\udd4e 🏀 :basketball: \\ud83c\\udfc0 🏐 :volleyball: \\ud83c\\udfd0 🏈 :football: \\ud83c\\udfc8 🏉 :rugby_football: \\ud83c\\udfc9 🎾 :tennis: \\ud83c\\udfbe 🥏 :flying_disc: \\ud83e\\udd4f 🎳 :bowling: \\ud83c\\udfb3 🏏 :cricket_game: \\ud83c\\udfcf 🏑 :field_hockey: \\ud83c\\udfd1 🏒 :ice_hockey: \\ud83c\\udfd2 🥍 :lacrosse: \\ud83e\\udd4d 🏓 :ping_pong: \\ud83c\\udfd3 🏸 :badminton: \\ud83c\\udff8 🥊 :boxing_glove: \\ud83e\\udd4a 🥋 :martial_arts_uniform: \\ud83e\\udd4b 🥅 :goal_net: \\ud83e\\udd45 ⛳ :golf: \\u26f3 ⛸ :ice_skate: \\u26f8 🎣 :fishing_pole_and_fish: \\ud83c\\udfa3 🎽 :running_shirt: \\ud83c\\udfbd 🎿 :ski: \\ud83c\\udfbf 🛷 :sled: \\ud83d\\udef7 🥌 :curling_stone: \\ud83e\\udd4c 🎯 :dart: \\ud83c\\udfaf 🎱 :8ball: \\ud83c\\udfb1 🎮 :video_game: \\ud83c\\udfae 🎰 :slot_machine: \\ud83c\\udfb0 🎲 :game_die: \\ud83c\\udfb2 🧩 :jigsaw: \\ud83e\\udde9 ♟ :chess_pawn: \\u265f 🎭 :performing_arts: \\ud83c\\udfad 🎨 :art: \\ud83c\\udfa8 🎼 :musical_score: \\ud83c\\udfbc 🎤 :microphone: \\ud83c\\udfa4 🎧 :headphones: \\ud83c\\udfa7 🎷 :saxophone: \\ud83c\\udfb7 🎸 :guitar: \\ud83c\\udfb8 🎹 :musical_keyboard: \\ud83c\\udfb9 🎺 :trumpet: \\ud83c\\udfba 🎻 :violin: \\ud83c\\udfbb 🥁 :drum: \\ud83e\\udd41 🎬 :clapper: \\ud83c\\udfac 🏹 :bow_and_arrow: \\ud83c\\udff9 🗾 :japan: \\ud83d\\uddfe 🏔 :snow_capped_mountain: \\ud83c\\udfd4 ⛰ :mountain: \\u26f0 🌋 :volcano: \\ud83c\\udf0b 🗻 :mount_fuji: \\ud83d\\uddfb 🏕 :camping: \\ud83c\\udfd5 🏖 :beach_with_umbrella: \\ud83c\\udfd6 🏜 :desert: \\ud83c\\udfdc 🏝 :desert_island: \\ud83c\\udfdd 🏞 :national_park: \\ud83c\\udfde 🏟 :stadium: \\ud83c\\udfdf 🏛 :classical_building: \\ud83c\\udfdb 🏗 :building_construction: \\ud83c\\udfd7 🏘 :houses: \\ud83c\\udfd8 🏚 :derelict_house: \\ud83c\\udfda 🏠 :house: \\ud83c\\udfe0 🏡 :house_with_garden: \\ud83c\\udfe1 🏢 :office: \\ud83c\\udfe2 🏣 :post_office: \\ud83c\\udfe3 🏤 :european_post_office: \\ud83c\\udfe4 🏥 :hospital: \\ud83c\\udfe5 🏦 :bank: \\ud83c\\udfe6 🏨 :hotel: \\ud83c\\udfe8 🏩 :love_hotel: \\ud83c\\udfe9 🏪 :convenience_store: \\ud83c\\udfea 🏫 :school: \\ud83c\\udfeb 🏬 :department_store: \\ud83c\\udfec 🏭 :factory: \\ud83c\\udfed 🏯 :japanese_castle: \\ud83c\\udfef 🏰 :european_castle: \\ud83c\\udff0 💒 :wedding: \\ud83d\\udc92 🗼 :tokyo_tower: \\ud83d\\uddfc 🗽 :statue_of_liberty: \\ud83d\\uddfd ⛪ :church: \\u26ea 🕌 :mosque: \\ud83d\\udd4c 🛕 :hindu_temple: \\ud83d\\uded5 🕍 :synagogue: \\ud83d\\udd4d ⛩ :shinto_shrine: \\u26e9 🕋 :kaaba: \\ud83d\\udd4b ⛲ :fountain: \\u26f2 ⛺ :tent: \\u26fa 🌁 :foggy: \\ud83c\\udf01 🌃 :night_with_stars: \\ud83c\\udf03 🏙 :cityscape: \\ud83c\\udfd9 🌄 :sunrise_over_mountains: \\ud83c\\udf04 🌅 :sunrise: \\ud83c\\udf05 🌆 :city_sunset: \\ud83c\\udf06 🌇 :city_sunrise: \\ud83c\\udf07 🌉 :bridge_at_night: \\ud83c\\udf09 🎠 :carousel_horse: \\ud83c\\udfa0 🎡 :ferris_wheel: \\ud83c\\udfa1 🎢 :roller_coaster: \\ud83c\\udfa2 🚂 :steam_locomotive: \\ud83d\\ude82 🚃 :railway_car: \\ud83d\\ude83 🚄 :bullettrain_side: \\ud83d\\ude84 🚅 :bullettrain_front: \\ud83d\\ude85 🚆 :train2: \\ud83d\\ude86 🚇 :metro: \\ud83d\\ude87 🚈 :light_rail: \\ud83d\\ude88 🚉 :station: \\ud83d\\ude89 🚊 :tram: \\ud83d\\ude8a 🚝 :monorail: \\ud83d\\ude9d 🚞 :mountain_railway: \\ud83d\\ude9e 🚋 :train: \\ud83d\\ude8b 🚌 :bus: \\ud83d\\ude8c 🚍 :oncoming_bus: \\ud83d\\ude8d 🚎 :trolleybus: \\ud83d\\ude8e 🚐 :minibus: \\ud83d\\ude90 🚑 :ambulance: \\ud83d\\ude91 🚒 :fire_engine: \\ud83d\\ude92 🚓 :police_car: \\ud83d\\ude93 🚔 :oncoming_police_car: \\ud83d\\ude94 🚕 :taxi: \\ud83d\\ude95 🚖 :oncoming_taxi: \\ud83d\\ude96 🚗 :car: \\ud83d\\ude97 🚘 :oncoming_automobile: \\ud83d\\ude98 🚚 :truck: \\ud83d\\ude9a 🚛 :articulated_lorry: \\ud83d\\ude9b 🚜 :tractor: \\ud83d\\ude9c 🏎 :racing_car: \\ud83c\\udfce 🏍 :motorcycle: \\ud83c\\udfcd 🛵 :motor_scooter: \\ud83d\\udef5 🛺 :auto_rickshaw: \\ud83d\\udefa 🚲 :bike: \\ud83d\\udeb2 🛴 :kick_scooter: \\ud83d\\udef4 🚏 :busstop: \\ud83d\\ude8f 🛣 :motorway: \\ud83d\\udee3 🛤 :railway_track: \\ud83d\\udee4 ⛽ :fuelpump: \\u26fd 🚨 :rotating_light: \\ud83d\\udea8 🚥 :traffic_light: \\ud83d\\udea5 🚦 :vertical_traffic_light: \\ud83d\\udea6 🚧 :construction: \\ud83d\\udea7 ⚓ :anchor: \\u2693 ⛵ :sailboat: \\u26f5 🚤 :speedboat: \\ud83d\\udea4 🛳 :passenger_ship: \\ud83d\\udef3 ⛴ :ferry: \\u26f4 🛥 :motor_boat: \\ud83d\\udee5 🚢 :ship: \\ud83d\\udea2 ✈ :airplane: \\u2708 🛩 :small_airplane: \\ud83d\\udee9 🛫 :airplane_departure: \\ud83d\\udeeb 🛬 :flight_arrival: \\ud83d\\udeec 🪂 :parachute: \\ud83e\\ude82 💺 :seat: \\ud83d\\udcba 🚁 :helicopter: \\ud83d\\ude81 🚟 :suspension_railway: \\ud83d\\ude9f 🚠 :mountain_cableway: \\ud83d\\udea0 🚡 :aerial_tramway: \\ud83d\\udea1 🛰 :satellite: \\ud83d\\udef0 🚀 :rocket: \\ud83d\\ude80 🛸 :flying_saucer: \\ud83d\\udef8 🪐 :ringed_planet: \\ud83e\\ude90 🌌 :milky_way: \\ud83c\\udf0c ⛱ :umbrella_on_ground: \\u26f1 🎆 :fireworks: \\ud83c\\udf86 🎇 :sparkler: \\ud83c\\udf87 🎑 :rice_scene: \\ud83c\\udf91 💴 :yen: \\ud83d\\udcb4 💵 :dollar: \\ud83d\\udcb5 💶 :euro: \\ud83d\\udcb6 💷 :pound: \\ud83d\\udcb7 🗿 :moyai: \\ud83d\\uddff 🛂 :passport_control: \\ud83d\\udec2 🛃 :customs: \\ud83d\\udec3 🛄 :baggage_claim: \\ud83d\\udec4 🛅 :left_luggage: \\ud83d\\udec5 💌 :love_letter: \\ud83d\\udc8c 🕳 :hole: \\ud83d\\udd73 💣 :bomb: \\ud83d\\udca3 🛀 :bath: \\ud83d\\udec0 🛌 :sleeping_bed: \\ud83d\\udecc 🔪 :hocho: \\ud83d\\udd2a 🏺 :amphora: \\ud83c\\udffa 🗺 :world_map: \\ud83d\\uddfa 🧭 :compass: \\ud83e\\udded 🧱 :bricks: \\ud83e\\uddf1 💈 :barber: \\ud83d\\udc88 🦽 :manual_wheelchair: \\ud83e\\uddbd 🦼 :motorized_wheelchair: \\ud83e\\uddbc 🛢 :oil_drum: \\ud83d\\udee2 🛎 :bellhop_bell: \\ud83d\\udece ⌛ :hourglass: \\u231b ⏳ :hourglass_flowing_sand: \\u23f3 ⌚ :watch: \\u231a ⏰ :alarm_clock: \\u23f0 ⏱ :stopwatch: \\u23f1 ⏲ :timer_clock: \\u23f2 🕰 :mantelpiece_clock: \\ud83d\\udd70 🌡 :thermometer: \\ud83c\\udf21 🧨 :firecracker: \\ud83e\\udde8 🎈 :balloon: \\ud83c\\udf88 🎉 :tada: \\ud83c\\udf89 🎊 :confetti_ball: \\ud83c\\udf8a 🎎 :dolls: \\ud83c\\udf8e 🎏 :flags: \\ud83c\\udf8f 🎐 :wind_chime: \\ud83c\\udf90 🧧 :red_envelope: \\ud83e\\udde7 🎀 :ribbon: \\ud83c\\udf80 🎁 :gift: \\ud83c\\udf81 🤿 :diving_mask: \\ud83e\\udd3f 🪀 :yo_yo: \\ud83e\\ude80 🪁 :kite: \\ud83e\\ude81 🔮 :crystal_ball: \\ud83d\\udd2e 🧿 :nazar_amulet: \\ud83e\\uddff 🕹 :joystick: \\ud83d\\udd79 🧸 :teddy_bear: \\ud83e\\uddf8 🖼 :framed_picture: \\ud83d\\uddbc 🛍 :shopping_bags: \\ud83d\\udecd 📿 :prayer_beads: \\ud83d\\udcff 💎 :gem: \\ud83d\\udc8e 📯 :postal_horn: \\ud83d\\udcef 🎙 :studio_microphone: \\ud83c\\udf99 🎚 :level_slider: \\ud83c\\udf9a 🎛 :control_knobs: \\ud83c\\udf9b 📻 :radio: \\ud83d\\udcfb 🪕 :banjo: \\ud83e\\ude95 📱 :iphone: \\ud83d\\udcf1 📲 :calling: \\ud83d\\udcf2 ☎ :telephone: \\u260e 📞 :telephone_receiver: \\ud83d\\udcde 📟 :pager: \\ud83d\\udcdf 📠 :fax: \\ud83d\\udce0 🔋 :battery: \\ud83d\\udd0b 🔌 :electric_plug: \\ud83d\\udd0c 💻 :computer: \\ud83d\\udcbb 🖥 :desktop_computer: \\ud83d\\udda5 🖨 :printer: \\ud83d\\udda8 ⌨ :keyboard: \\u2328 🖱 :computer_mouse: \\ud83d\\uddb1 🖲 :trackball: \\ud83d\\uddb2 💽 :minidisc: \\ud83d\\udcbd 💾 :floppy_disk: \\ud83d\\udcbe 💿 :cd: \\ud83d\\udcbf 📀 :dvd: \\ud83d\\udcc0 🧮 :abacus: \\ud83e\\uddee 🎥 :movie_camera: \\ud83c\\udfa5 🎞 :film_frames: \\ud83c\\udf9e 📽 :film_projector: \\ud83d\\udcfd 📺 :tv: \\ud83d\\udcfa 📷 :camera: \\ud83d\\udcf7 📸 :camera_with_flash: \\ud83d\\udcf8 📹 :video_camera: \\ud83d\\udcf9 📼 :vhs: \\ud83d\\udcfc 🔍 :mag: \\ud83d\\udd0d 🔎 :mag_right: \\ud83d\\udd0e 🕯 :candle: \\ud83d\\udd6f 💡 :bulb: \\ud83d\\udca1 🔦 :flashlight: \\ud83d\\udd26 🏮 :lantern: \\ud83c\\udfee 🪔 :diya_lamp: \\ud83e\\ude94 📔 :notebook_with_decorative_cover: \\ud83d\\udcd4 📕 :closed_book: \\ud83d\\udcd5 📖 :open_book: \\ud83d\\udcd6 📗 :green_book: \\ud83d\\udcd7 📘 :blue_book: \\ud83d\\udcd8 📙 :orange_book: \\ud83d\\udcd9 📚 :books: \\ud83d\\udcda 📓 :notebook: \\ud83d\\udcd3 📃 :page_with_curl: \\ud83d\\udcc3 📜 :scroll: \\ud83d\\udcdc 📄 :page_facing_up: \\ud83d\\udcc4 📰 :newspaper: \\ud83d\\udcf0 🗞 :rolled_up_newspaper: \\ud83d\\uddde 📑 :bookmark_tabs: \\ud83d\\udcd1 🔖 :bookmark: \\ud83d\\udd16 🏷 :label: \\ud83c\\udff7 💰 :moneybag: \\ud83d\\udcb0 💸 :money_with_wings: \\ud83d\\udcb8 💳 :credit_card: \\ud83d\\udcb3 🧾 :receipt: \\ud83e\\uddfe ✉ :envelope: \\u2709 📧 :e-mail: \\ud83d\\udce7 📨 :incoming_envelope: \\ud83d\\udce8 📩 :envelope_with_arrow: \\ud83d\\udce9 📤 :outbox_tray: \\ud83d\\udce4 📥 :inbox_tray: \\ud83d\\udce5 📦 :package: \\ud83d\\udce6 📫 :mailbox: \\ud83d\\udceb 📪 :mailbox_closed: \\ud83d\\udcea 📬 :mailbox_with_mail: \\ud83d\\udcec 📭 :mailbox_with_no_mail: \\ud83d\\udced 📮 :postbox: \\ud83d\\udcee 🗳 :ballot_box: \\ud83d\\uddf3 ✏ :pencil2: \\u270f ✒ :black_nib: \\u2712 🖋 :fountain_pen: \\ud83d\\udd8b 🖊 :pen: \\ud83d\\udd8a 🖌 :paintbrush: \\ud83d\\udd8c 🖍 :crayon: \\ud83d\\udd8d 📝 :memo: \\ud83d\\udcdd 📁 :file_folder: \\ud83d\\udcc1 📂 :open_file_folder: \\ud83d\\udcc2 🗂 :card_index_dividers: \\ud83d\\uddc2 📅 :date: \\ud83d\\udcc5 📆 :calendar: \\ud83d\\udcc6 🗒 :spiral_notepad: \\ud83d\\uddd2 🗓 :spiral_calendar: \\ud83d\\uddd3 📇 :card_index: \\ud83d\\udcc7 📈 :chart_with_upwards_trend: \\ud83d\\udcc8 📉 :chart_decreasing: \\ud83d\\udcc9 📊 :bar_chart: \\ud83d\\udcca 📋 :clipboard: \\ud83d\\udccb 📌 :pushpin: \\ud83d\\udccc 📍 :round_pushpin: \\ud83d\\udccd 📎 :paperclip: \\ud83d\\udcce 🖇 :linked_paperclips: \\ud83d\\udd87 📏 :straight_ruler: \\ud83d\\udccf 📐 :triangular_ruler: \\ud83d\\udcd0 ✂ :scissors: \\u2702 🗃 :card_file_box: \\ud83d\\uddc3 🗄 :file_cabinet: \\ud83d\\uddc4 🗑 :wastebasket: \\ud83d\\uddd1 🔒 :lock: \\ud83d\\udd12 🔓 :unlock: \\ud83d\\udd13 🔏 :lock_with_ink_pen: \\ud83d\\udd0f 🔐 :closed_lock_with_key: \\ud83d\\udd10 🔑 :key: \\ud83d\\udd11 🗝 :old_key: \\ud83d\\udddd 🔨 :hammer: \\ud83d\\udd28 🪓 :axe: \\ud83e\\ude93 ⛏ :pick: \\u26cf ⚒ :hammer_and_pick: \\u2692 🛠 :hammer_and_wrench: \\ud83d\\udee0 🗡 :dagger: \\ud83d\\udde1 ⚔ :crossed_swords: \\u2694 🔫 :gun: \\ud83d\\udd2b 🛡 :shield: \\ud83d\\udee1 🔧 :wrench: \\ud83d\\udd27 🔩 :nut_and_bolt: \\ud83d\\udd29 ⚙ :gear: \\u2699 🗜 :clamp: \\ud83d\\udddc ⚖ :balance_scale: \\u2696 🦯 :probing_cane: \\ud83e\\uddaf 🔗 :link: \\ud83d\\udd17 ⛓ :chains: \\u26d3 🧰 :toolbox: \\ud83e\\uddf0 🧲 :magnet: \\ud83e\\uddf2 ⚗ :alembic: \\u2697 🧪 :test_tube: \\ud83e\\uddea 🧫 :petri_dish: \\ud83e\\uddeb 🧬 :dna: \\ud83e\\uddec 🔬 :microscope: \\ud83d\\udd2c 🔭 :telescope: \\ud83d\\udd2d 📡 :satellite_antenna: \\ud83d\\udce1 💉 :syringe: \\ud83d\\udc89 💊 :pill: \\ud83d\\udc8a 🩹 :adhesive_bandage: \\ud83e\\ude79 🩺 :stethoscope: \\ud83e\\ude7a 🚪 :door: \\ud83d\\udeaa 🛏 :bed: \\ud83d\\udecf 🛋 :couch_and_lamp: \\ud83d\\udecb 🪑 :chair: \\ud83e\\ude91 🚽 :toilet: \\ud83d\\udebd 🚿 :shower: \\ud83d\\udebf 🛁 :bathtub: \\ud83d\\udec1 🪒 :razor: \\ud83e\\ude92 🧴 :lotion_bottle: \\ud83e\\uddf4 🧷 :safety_pin: \\ud83e\\uddf7 🧹 :broom: \\ud83e\\uddf9 🧺 :basket: \\ud83e\\uddfa 🧻 :roll_of_paper: \\ud83e\\uddfb 🧼 :soap: \\ud83e\\uddfc 🧽 :sponge: \\ud83e\\uddfd 🧯 :fire_extinguisher: \\ud83e\\uddef 🛒 :shopping_cart: \\ud83d\\uded2 🚬 :smoking: \\ud83d\\udeac ⚰ :coffin: \\u26b0 ⚱ :funeral_urn: \\u26b1 🚰 :potable_water: \\ud83d\\udeb0 💘 :cupid: \\ud83d\\udc98 💝 :gift_heart: \\ud83d\\udc9d 💖 :sparkling_heart: \\ud83d\\udc96 💗 :heartpulse: \\ud83d\\udc97 💓 :heartbeat: \\ud83d\\udc93 💞 :revolving_hearts: \\ud83d\\udc9e 💕 :two_hearts: \\ud83d\\udc95 💟 :heart_decoration: \\ud83d\\udc9f ❣ :heart_exclamation: \\u2763 💔 :broken_heart: \\ud83d\\udc94 ❤ :heart: \\u2764 🧡 :orange_heart: \\ud83e\\udde1 💛 :yellow_heart: \\ud83d\\udc9b 💚 :green_heart: \\ud83d\\udc9a 💙 :blue_heart: \\ud83d\\udc99 💜 :purple_heart: \\ud83d\\udc9c 🤎 :brown_heart: \\ud83e\\udd0e 🖤 :black_heart: \\ud83d\\udda4 🤍 :white_heart: \\ud83e\\udd0d 💯 :100: \\ud83d\\udcaf 💢 :anger: \\ud83d\\udca2 💬 :speech_balloon: \\ud83d\\udcac 👁️‍🗨️ :eye_speech_bubble: \\ud83d\\udc41\\ufe0f\\u200d\\ud83d\\udde8\\ufe0f 🗨 :left_speech_bubble: \\ud83d\\udde8 🗯 :right_anger_bubble: \\ud83d\\uddef 💭 :thought_balloon: \\ud83d\\udcad 💤 :zzz: \\ud83d\\udca4 ♨ :hotsprings: \\u2668 🛑 :stop_sign: \\ud83d\\uded1 🕛 :clock12: \\ud83d\\udd5b 🕧 :clock1230: \\ud83d\\udd67 🕐 :clock1: \\ud83d\\udd50 🕜 :clock130: \\ud83d\\udd5c 🕑 :clock2: \\ud83d\\udd51 🕝 :clock230: \\ud83d\\udd5d 🕒 :clock3: \\ud83d\\udd52 🕞 :clock330: \\ud83d\\udd5e 🕓 :clock4: \\ud83d\\udd53 🕟 :clock430: \\ud83d\\udd5f 🕔 :clock5: \\ud83d\\udd54 🕠 :clock530: \\ud83d\\udd60 🕕 :clock6: \\ud83d\\udd55 🕡 :clock630: \\ud83d\\udd61 🕖 :clock7: \\ud83d\\udd56 🕢 :clock730: \\ud83d\\udd62 🕗 :clock8: \\ud83d\\udd57 🕣 :clock830: \\ud83d\\udd63 🕘 :clock9: \\ud83d\\udd58 🕤 :clock930: \\ud83d\\udd64 🕙 :clock10: \\ud83d\\udd59 🕥 :clock1030: \\ud83d\\udd65 🕚 :clock11: \\ud83d\\udd5a 🕦 :clock1130: \\ud83d\\udd66 🌀 :cyclone: \\ud83c\\udf00 ♠ :spades: \\u2660 ♥ :hearts: \\u2665 ♦ :diamonds: \\u2666 ♣ :clubs: \\u2663 🃏 :black_joker: \\ud83c\\udccf 🀄 :mahjong: \\ud83c\\udc04 🎴 :flower_playing_cards: \\ud83c\\udfb4 🔇 :mute: \\ud83d\\udd07 🔈 :speaker: \\ud83d\\udd08 🔉 :sound: \\ud83d\\udd09 🔊 :loud_sound: \\ud83d\\udd0a 📢 :loudspeaker: \\ud83d\\udce2 📣 :mega: \\ud83d\\udce3 🔔 :bell: \\ud83d\\udd14 🔕 :no_bell: \\ud83d\\udd15 🎵 :musical_note: \\ud83c\\udfb5 🎶 :notes: \\ud83c\\udfb6 💹 :chart: \\ud83d\\udcb9 🏧 :atm: \\ud83c\\udfe7 🚮 :put_litter_in_its_place: \\ud83d\\udeae ♿ :wheelchair: \\u267f 🚹 :mens: \\ud83d\\udeb9 🚺 :womens: \\ud83d\\udeba 🚻 :restroom: \\ud83d\\udebb 🚼 :baby_symbol: \\ud83d\\udebc 🚾 :wc: \\ud83d\\udebe ⚠ :warning: \\u26a0 🚸 :children_crossing: \\ud83d\\udeb8 ⛔ :no_entry: \\u26d4 🚫 :no_entry_sign: \\ud83d\\udeab 🚳 :no_bicycles: \\ud83d\\udeb3 🚭 :no_smoking: \\ud83d\\udead 🚯 :do_not_litter: \\ud83d\\udeaf 🚱 :non-potable_water: \\ud83d\\udeb1 🚷 :no_pedestrians: \\ud83d\\udeb7 📵 :no_mobile_phones: \\ud83d\\udcf5 🔞 :underage: \\ud83d\\udd1e ☢ :radioactive: \\u2622 ☣ :biohazard: \\u2623 ⬆ :arrow_up: \\u2b06 ↗ :arrow_upper_right: \\u2197 ➡ :arrow_right: \\u27a1 ↘ :arrow_lower_right: \\u2198 ⬇ :arrow_down: \\u2b07 ↙ :arrow_lower_left: \\u2199 ⬅ :arrow_left: \\u2b05 ↖ :arrow_upper_left: \\u2196 ↕ :arrow_up_down: \\u2195 ↔ :left_right_arrow: \\u2194 ↩ :leftwards_arrow_with_hook: \\u21a9 ↪ :arrow_right_hook: \\u21aa ⤴ :arrow_heading_up: \\u2934 ⤵ :arrow_heading_down: \\u2935 🔃 :arrows_clockwise: \\ud83d\\udd03 🔄 :arrows_counterclockwise: \\ud83d\\udd04 🔙 :back: \\ud83d\\udd19 🔚 :end: \\ud83d\\udd1a 🔛 :on: \\ud83d\\udd1b 🔜 :soon: \\ud83d\\udd1c 🔝 :top: \\ud83d\\udd1d 🛐 :place_of_worship: \\ud83d\\uded0 ⚛ :atom_symbol: \\u269b 🕉 :om: \\ud83d\\udd49 ✡ :star_of_david: \\u2721 ☸ :wheel_of_dharma: \\u2638 ☯ :yin_yang: \\u262f ✝ :latin_cross: \\u271d ☦ :orthodox_cross: \\u2626 ☪ :star_and_crescent: \\u262a ☮ :peace_symbol: \\u262e 🕎 :menorah: \\ud83d\\udd4e 🔯 :six_pointed_star: \\ud83d\\udd2f ♈ :aries: \\u2648 ♉ :taurus: \\u2649 ♊ :gemini: \\u264a ♋ :cancer: \\u264b ♌ :leo: \\u264c ♍ :virgo: \\u264d ♎ :libra: \\u264e ♏ :scorpius: \\u264f ♐ :sagittarius: \\u2650 ♑ :capricorn: \\u2651 ♒ :aquarius: \\u2652 ♓ :pisces: \\u2653 ⛎ :ophiuchus: \\u26ce 🔀 :twisted_rightwards_arrows: \\ud83d\\udd00 🔁 :repeat: \\ud83d\\udd01 🔂 :repeat_one: \\ud83d\\udd02 ▶ :arrow_forward: \\u25b6 ⏩ :fast_forward: \\u23e9 ◀ :arrow_backward: \\u25c0 ⏪ :rewind: \\u23ea 🔼 :arrow_up_small: \\ud83d\\udd3c ⏫ :arrow_double_up: \\u23eb 🔽 :arrow_down_small: \\ud83d\\udd3d ⏬ :arrow_double_down: \\u23ec ⏹ :stop_button: \\u23f9 ⏏ :eject_button: \\u23cf 🎦 :cinema: \\ud83c\\udfa6 🔅 :low_brightness: \\ud83d\\udd05 🔆 :high_brightness: \\ud83d\\udd06 📶 :signal_strength: \\ud83d\\udcf6 📳 :vibration_mode: \\ud83d\\udcf3 📴 :mobile_phone_off: \\ud83d\\udcf4 ✖ :multiply: \\u2716 ➕ :plus: \\u2795 ➖ :minus: \\u2796 ➗ :divide: \\u2797 ♾ :infinity: \\u267e ‼ :bangbang: \\u203c ⁉ :interrobang: \\u2049 ❓ :question: \\u2753 ❔ :grey_question: \\u2754 ❕ :grey_exclamation: \\u2755 ❗ :exclamation: \\u2757 〰 :wavy_dash: \\u3030 💱 :currency_exchange: \\ud83d\\udcb1 💲 :heavy_dollar_sign: \\ud83d\\udcb2 ⚕ :medical_symbol: \\u2695 ♻ :recycle: \\u267b ⚜ :fleur_de_lis: \\u269c 🔱 :trident: \\ud83d\\udd31 📛 :name_badge: \\ud83d\\udcdb 🔰 :beginner: \\ud83d\\udd30 ⭕ :o: \\u2b55 ✅ :white_check_mark: \\u2705 ☑ :ballot_box_with_check: \\u2611 ✔ :heavy_check_mark: \\u2714 ❌ :x: \\u274c ❎ :cross_mark_button: \\u274e ➰ :curly_loop: \\u27b0 ➿ :loop: \\u27bf 〽 :part_alternation_mark: \\u303d ✳ :eight_spoked_asterisk: \\u2733 ✴ :eight_pointed_black_star: \\u2734 ❇ :sparkle: \\u2747 © :copyright: \\u00a9 ® :registered: \\u00ae ™ :tm: \\u2122 #️⃣ :hash: \\u0023\\ufe0f\\u20e3 0️⃣ :zero: \\u0030\\ufe0f\\u20e3 1️⃣ :one: \\u0031\\ufe0f\\u20e3 2️⃣ :two: \\u0032\\ufe0f\\u20e3 3️⃣ :three: \\u0033\\ufe0f\\u20e3 4️⃣ :four: \\u0034\\ufe0f\\u20e3 5️⃣ :five: \\u0035\\ufe0f\\u20e3 6️⃣ :six: \\u0036\\ufe0f\\u20e3 7️⃣ :seven: \\u0037\\ufe0f\\u20e3 8️⃣ :eight: \\u0038\\ufe0f\\u20e3 9️⃣ :nine: \\u0039\\ufe0f\\u20e3 🔟 :keycap_ten: \\ud83d\\udd1f 🔠 :capital_abcd: \\ud83d\\udd20 🔡 :abcd: \\ud83d\\udd21 🔢 :1234: \\ud83d\\udd22 🔣 :symbols: \\ud83d\\udd23 🔤 :abc: \\ud83d\\udd24 🅰 :a: \\ud83c\\udd70 🆎 :ab: \\ud83c\\udd8e 🅱 :b: \\ud83c\\udd71 🆑 :cl: \\ud83c\\udd91 🆒 :cool: \\ud83c\\udd92 🆓 :free: \\ud83c\\udd93 ℹ :information_source: \\u2139 🆔 :id: \\ud83c\\udd94 Ⓜ :m: \\u24c2 🆕 :new: \\ud83c\\udd95 🆖 :ng: \\ud83c\\udd96 🅾 :o2: \\ud83c\\udd7e 🆗 :ok: \\ud83c\\udd97 🅿 :parking: \\ud83c\\udd7f 🆘 :sos: \\ud83c\\udd98 🆙 :up: \\ud83c\\udd99 🆚 :vs: \\ud83c\\udd9a 🈁 :koko: \\ud83c\\ude01 🈂 :sa: \\ud83c\\ude02 🈷 :u6708: \\ud83c\\ude37 🈶 :u6709: \\ud83c\\ude36 🈯 :u6307: \\ud83c\\ude2f 🉐 :ideograph_advantage: \\ud83c\\ude50 🈹 :u5272: \\ud83c\\ude39 🈚 :u7121: \\ud83c\\ude1a 🈲 :u7981: \\ud83c\\ude32 🉑 :accept: \\ud83c\\ude51 🈸 :u7533: \\ud83c\\ude38 🈴 :u5408: \\ud83c\\ude34 🈳 :u7a7a: \\ud83c\\ude33 ㊗ :congratulations: \\u3297 ㊙ :secret: \\u3299 🈺 :u55b6: \\ud83c\\ude3a 🈵 :u6e80: \\ud83c\\ude35 🔴 :red_circle: \\ud83d\\udd34 🟠 :orange_circle: \\ud83d\\udfe0 🟡 :yellow_circle: \\ud83d\\udfe1 🟢 :green_circle: \\ud83d\\udfe2 🔵 :large_blue_circle: \\ud83d\\udd35 🟣 :purple_circle: \\ud83d\\udfe3 🟤 :brown_circle: \\ud83d\\udfe4 ⚫ :black_circle: \\u26ab ⚪ :white_circle: \\u26aa 🟥 :red_square: \\ud83d\\udfe5 🟧 :orange_square: \\ud83d\\udfe7 🟨 :yellow_square: \\ud83d\\udfe8 🟩 :green_square: \\ud83d\\udfe9 🟦 :blue_square: \\ud83d\\udfe6 🟪 :purple_square: \\ud83d\\udfea 🟫 :brown_square: \\ud83d\\udfeb ⬛ :black_large_square: \\u2b1b ⬜ :white_large_square: \\u2b1c ◼ :black_medium_square: \\u25fc ◻ :white_medium_square: \\u25fb ◾ :black_medium_small_square: \\u25fe ◽ :white_medium_small_square: \\u25fd ▪ :black_small_square: \\u25aa ▫ :white_small_square: \\u25ab 🔶 :large_orange_diamond: \\ud83d\\udd36 🔷 :large_blue_diamond: \\ud83d\\udd37 🔸 :small_orange_diamond: \\ud83d\\udd38 🔹 :small_blue_diamond: \\ud83d\\udd39 🔺 :small_red_triangle: \\ud83d\\udd3a 🔻 :small_red_triangle_down: \\ud83d\\udd3b 💠 :diamond_with_a_dot: \\ud83d\\udca0 🔘 :radio_button: \\ud83d\\udd18 🔳 :white_square_button: \\ud83d\\udd33 🔲 :black_square_button: \\ud83d\\udd32 🏁 :checkered_flag: \\ud83c\\udfc1 🚩 :triangular_flag_on_post: \\ud83d\\udea9 🎌 :crossed_flags: \\ud83c\\udf8c 🏴 :black_flag: \\ud83c\\udff4 🏳 :white_flag: \\ud83c\\udff3 🏳️‍🌈 :rainbow_flag: \\ud83c\\udff3\\ufe0f\\u200d\\ud83c\\udf08 🏳️‍⚧️ :transgender_flag: \\ud83c\\udff3\\ufe0f\\u200d\\u26a7\\ufe0f 🏴‍☠️ :pirate_flag: \\ud83c\\udff4\\u200d\\u2620\\ufe0f 🇦🇩 :andorra: \\ud83c\\udde6\\ud83c\\udde9 🇦🇪 :flag-ae: \\ud83c\\udde6\\ud83c\\uddea 🇦🇫 :flag-af: \\ud83c\\udde6\\ud83c\\uddeb 🇦🇬 :flag-ag: \\ud83c\\udde6\\ud83c\\uddec 🇦🇮 :flag-ai: \\ud83c\\udde6\\ud83c\\uddee 🇦🇱 :albania: \\ud83c\\udde6\\ud83c\\uddf1 🇦🇲 :armenia: \\ud83c\\udde6\\ud83c\\uddf2 🇦🇴 :angola: \\ud83c\\udde6\\ud83c\\uddf4 🇦🇶 :flag-aq: \\ud83c\\udde6\\ud83c\\uddf6 🇦🇷 :flag-ar: \\ud83c\\udde6\\ud83c\\uddf7 🇦🇸 :flag-as: \\ud83c\\udde6\\ud83c\\uddf8 🇦🇹 :austria: \\ud83c\\udde6\\ud83c\\uddf9 🇦🇺 :flag-au: \\ud83c\\udde6\\ud83c\\uddfa 🇦🇼 :aruba: \\ud83c\\udde6\\ud83c\\uddfc 🇦🇽 :flag-ax: \\ud83c\\udde6\\ud83c\\uddfd 🇦🇿 :flag-az: \\ud83c\\udde6\\ud83c\\uddff 🇧🇦 :flag-ba: \\ud83c\\udde7\\ud83c\\udde6 🇧🇧 :flag-bb: \\ud83c\\udde7\\ud83c\\udde7 🇧🇩 :flag-bd: \\ud83c\\udde7\\ud83c\\udde9 🇧🇪 :belgium: \\ud83c\\udde7\\ud83c\\uddea 🇧🇫 :flag-bf: \\ud83c\\udde7\\ud83c\\uddeb 🇧🇬 :flag-bg: \\ud83c\\udde7\\ud83c\\uddec 🇧🇭 :bahrain: \\ud83c\\udde7\\ud83c\\udded 🇧🇮 :burundi: \\ud83c\\udde7\\ud83c\\uddee 🇧🇯 :benin: \\ud83c\\udde7\\ud83c\\uddef 🇧🇱 :flag-bl: \\ud83c\\udde7\\ud83c\\uddf1 🇧🇲 :bermuda: \\ud83c\\udde7\\ud83c\\uddf2 🇧🇳 :brunei: \\ud83c\\udde7\\ud83c\\uddf3 🇧🇴 :bolivia: \\ud83c\\udde7\\ud83c\\uddf4 🇧🇶 :flag-bq: \\ud83c\\udde7\\ud83c\\uddf6 🇧🇷 :brazil: \\ud83c\\udde7\\ud83c\\uddf7 🇧🇸 :bahamas: \\ud83c\\udde7\\ud83c\\uddf8 🇧🇹 :bhutan: \\ud83c\\udde7\\ud83c\\uddf9 🇧🇼 :flag-bw: \\ud83c\\udde7\\ud83c\\uddfc 🇧🇾 :belarus: \\ud83c\\udde7\\ud83c\\uddfe 🇧🇿 :belize: \\ud83c\\udde7\\ud83c\\uddff 🇨🇦 :canada: \\ud83c\\udde8\\ud83c\\udde6 🇨🇨 :flag-cc: \\ud83c\\udde8\\ud83c\\udde8 🇨🇩 :flag-cd: \\ud83c\\udde8\\ud83c\\udde9 🇨🇫 :flag-cf: \\ud83c\\udde8\\ud83c\\uddeb 🇨🇬 :flag-cg: \\ud83c\\udde8\\ud83c\\uddec 🇨🇭 :flag-ch: \\ud83c\\udde8\\ud83c\\udded 🇨🇮 :flag-ci: \\ud83c\\udde8\\ud83c\\uddee 🇨🇰 :flag-ck: \\ud83c\\udde8\\ud83c\\uddf0 🇨🇱 :chile: \\ud83c\\udde8\\ud83c\\uddf1 🇨🇲 :flag-cm: \\ud83c\\udde8\\ud83c\\uddf2 🇨🇳 :cn: \\ud83c\\udde8\\ud83c\\uddf3 🇨🇴 :flag-co: \\ud83c\\udde8\\ud83c\\uddf4 🇨🇷 :flag-cr: \\ud83c\\udde8\\ud83c\\uddf7 🇨🇺 :cuba: \\ud83c\\udde8\\ud83c\\uddfa 🇨🇻 :flag-cv: \\ud83c\\udde8\\ud83c\\uddfb 🇨🇼 :curacao: \\ud83c\\udde8\\ud83c\\uddfc 🇨🇽 :flag-cx: \\ud83c\\udde8\\ud83c\\uddfd 🇨🇾 :cyprus: \\ud83c\\udde8\\ud83c\\uddfe 🇨🇿 :flag-cz: \\ud83c\\udde8\\ud83c\\uddff 🇩🇪 :de: \\ud83c\\udde9\\ud83c\\uddea 🇩🇯 :flag-dj: \\ud83c\\udde9\\ud83c\\uddef 🇩🇰 :denmark: \\ud83c\\udde9\\ud83c\\uddf0 🇩🇲 :flag-dm: \\ud83c\\udde9\\ud83c\\uddf2 🇩🇴 :flag-do: \\ud83c\\udde9\\ud83c\\uddf4 🇩🇿 :algeria: \\ud83c\\udde9\\ud83c\\uddff 🇪🇨 :ecuador: \\ud83c\\uddea\\ud83c\\udde8 🇪🇪 :estonia: \\ud83c\\uddea\\ud83c\\uddea 🇪🇬 :egypt: \\ud83c\\uddea\\ud83c\\uddec 🇪🇭 :flag-eh: \\ud83c\\uddea\\ud83c\\udded 🇪🇷 :eritrea: \\ud83c\\uddea\\ud83c\\uddf7 🇪🇸 :es: \\ud83c\\uddea\\ud83c\\uddf8 🇪🇹 :flag-et: \\ud83c\\uddea\\ud83c\\uddf9 🇪🇺 :eu: \\ud83c\\uddea\\ud83c\\uddfa 🇫🇮 :finland: \\ud83c\\uddeb\\ud83c\\uddee 🇫🇯 :fiji: \\ud83c\\uddeb\\ud83c\\uddef 🇫🇰 :flag-fk: \\ud83c\\uddeb\\ud83c\\uddf0 🇫🇲 :flag-fm: \\ud83c\\uddeb\\ud83c\\uddf2 🇫🇴 :flag-fo: \\ud83c\\uddeb\\ud83c\\uddf4 🇫🇷 :fr: \\ud83c\\uddeb\\ud83c\\uddf7 🇬🇦 :gabon: \\ud83c\\uddec\\ud83c\\udde6 🇬🇧 :gb: \\ud83c\\uddec\\ud83c\\udde7 🇬🇩 :flag-gd: \\ud83c\\uddec\\ud83c\\udde9 🇬🇪 :flag-ge: \\ud83c\\uddec\\ud83c\\uddea 🇬🇫 :flag-gf: \\ud83c\\uddec\\ud83c\\uddeb 🇬🇬 :flag-gg: \\ud83c\\uddec\\ud83c\\uddec 🇬🇭 :ghana: \\ud83c\\uddec\\ud83c\\udded 🇬🇮 :flag-gi: \\ud83c\\uddec\\ud83c\\uddee 🇬🇱 :flag-gl: \\ud83c\\uddec\\ud83c\\uddf1 🇬🇲 :gambia: \\ud83c\\uddec\\ud83c\\uddf2 🇬🇳 :guinea: \\ud83c\\uddec\\ud83c\\uddf3 🇬🇵 :flag-gp: \\ud83c\\uddec\\ud83c\\uddf5 🇬🇶 :flag-gq: \\ud83c\\uddec\\ud83c\\uddf6 🇬🇷 :greece: \\ud83c\\uddec\\ud83c\\uddf7 🇬🇸 :flag-gs: \\ud83c\\uddec\\ud83c\\uddf8 🇬🇹 :flag-gt: \\ud83c\\uddec\\ud83c\\uddf9 🇬🇺 :guam: \\ud83c\\uddec\\ud83c\\uddfa 🇬🇼 :flag-gw: \\ud83c\\uddec\\ud83c\\uddfc 🇬🇾 :guyana: \\ud83c\\uddec\\ud83c\\uddfe 🇭🇰 :flag-hk: \\ud83c\\udded\\ud83c\\uddf0 🇭🇳 :flag-hn: \\ud83c\\udded\\ud83c\\uddf3 🇭🇷 :croatia: \\ud83c\\udded\\ud83c\\uddf7 🇭🇹 :haiti: \\ud83c\\udded\\ud83c\\uddf9 🇭🇺 :flag-hu: \\ud83c\\udded\\ud83c\\uddfa 🇮🇨 :flag-ic: \\ud83c\\uddee\\ud83c\\udde8 🇮🇩 :flag-id: \\ud83c\\uddee\\ud83c\\udde9 🇮🇪 :flag-ie: \\ud83c\\uddee\\ud83c\\uddea 🇮🇱 :israel: \\ud83c\\uddee\\ud83c\\uddf1 🇮🇲 :flag-im: \\ud83c\\uddee\\ud83c\\uddf2 🇮🇳 :india: \\ud83c\\uddee\\ud83c\\uddf3 🇮🇴 :flag-io: \\ud83c\\uddee\\ud83c\\uddf4 🇮🇶 :iraq: \\ud83c\\uddee\\ud83c\\uddf6 🇮🇷 :iran: \\ud83c\\uddee\\ud83c\\uddf7 🇮🇸 :flag-is: \\ud83c\\uddee\\ud83c\\uddf8 🇮🇹 :it: \\ud83c\\uddee\\ud83c\\uddf9 🇯🇪 :jersey: \\ud83c\\uddef\\ud83c\\uddea 🇯🇲 :flag-jm: \\ud83c\\uddef\\ud83c\\uddf2 🇯🇴 :jordan: \\ud83c\\uddef\\ud83c\\uddf4 🇯🇵 :jp: \\ud83c\\uddef\\ud83c\\uddf5 🇰🇪 :kenya: \\ud83c\\uddf0\\ud83c\\uddea 🇰🇬 :flag-kg: \\ud83c\\uddf0\\ud83c\\uddec 🇰🇭 :flag-kh: \\ud83c\\uddf0\\ud83c\\udded 🇰🇮 :flag-ki: \\ud83c\\uddf0\\ud83c\\uddee 🇰🇲 :comoros: \\ud83c\\uddf0\\ud83c\\uddf2 🇰🇳 :flag-kn: \\ud83c\\uddf0\\ud83c\\uddf3 🇰🇵 :flag-kp: \\ud83c\\uddf0\\ud83c\\uddf5 🇰🇷 :kr: \\ud83c\\uddf0\\ud83c\\uddf7 🇰🇼 :kuwait: \\ud83c\\uddf0\\ud83c\\uddfc 🇰🇾 :flag-ky: \\ud83c\\uddf0\\ud83c\\uddfe 🇰🇿 :flag-kz: \\ud83c\\uddf0\\ud83c\\uddff 🇱🇦 :laos: \\ud83c\\uddf1\\ud83c\\udde6 🇱🇧 :flag-lb: \\ud83c\\uddf1\\ud83c\\udde7 🇱🇨 :flag-lc: \\ud83c\\uddf1\\ud83c\\udde8 🇱🇮 :flag-li: \\ud83c\\uddf1\\ud83c\\uddee 🇱🇰 :flag-lk: \\ud83c\\uddf1\\ud83c\\uddf0 🇱🇷 :flag-lr: \\ud83c\\uddf1\\ud83c\\uddf7 🇱🇸 :flag-ls: \\ud83c\\uddf1\\ud83c\\uddf8 🇱🇹 :flag-lt: \\ud83c\\uddf1\\ud83c\\uddf9 🇱🇺 :flag-lu: \\ud83c\\uddf1\\ud83c\\uddfa 🇱🇻 :latvia: \\ud83c\\uddf1\\ud83c\\uddfb 🇱🇾 :libya: \\ud83c\\uddf1\\ud83c\\uddfe 🇲🇦 :flag-ma: \\ud83c\\uddf2\\ud83c\\udde6 🇲🇨 :monaco: \\ud83c\\uddf2\\ud83c\\udde8 🇲🇩 :flag-md: \\ud83c\\uddf2\\ud83c\\udde9 🇲🇪 :flag-me: \\ud83c\\uddf2\\ud83c\\uddea 🇲🇬 :flag-mg: \\ud83c\\uddf2\\ud83c\\uddec 🇲🇭 :flag-mh: \\ud83c\\uddf2\\ud83c\\udded 🇲🇰 :flag-mk: \\ud83c\\uddf2\\ud83c\\uddf0 🇲🇱 :mali: \\ud83c\\uddf2\\ud83c\\uddf1 🇲🇳 :flag-mn: \\ud83c\\uddf2\\ud83c\\uddf3 🇲🇴 :macau: \\ud83c\\uddf2\\ud83c\\uddf4 🇲🇵 :flag-mp: \\ud83c\\uddf2\\ud83c\\uddf5 🇲🇶 :flag-mq: \\ud83c\\uddf2\\ud83c\\uddf6 🇲🇷 :flag-mr: \\ud83c\\uddf2\\ud83c\\uddf7 🇲🇸 :flag-ms: \\ud83c\\uddf2\\ud83c\\uddf8 🇲🇹 :malta: \\ud83c\\uddf2\\ud83c\\uddf9 🇲🇺 :flag-mu: \\ud83c\\uddf2\\ud83c\\uddfa 🇲🇻 :flag-mv: \\ud83c\\uddf2\\ud83c\\uddfb 🇲🇼 :malawi: \\ud83c\\uddf2\\ud83c\\uddfc 🇲🇽 :mexico: \\ud83c\\uddf2\\ud83c\\uddfd 🇲🇾 :flag-my: \\ud83c\\uddf2\\ud83c\\uddfe 🇲🇿 :flag-mz: \\ud83c\\uddf2\\ud83c\\uddff 🇳🇦 :flag-na: \\ud83c\\uddf3\\ud83c\\udde6 🇳🇨 :flag-nc: \\ud83c\\uddf3\\ud83c\\udde8 🇳🇪 :niger: \\ud83c\\uddf3\\ud83c\\uddea 🇳🇫 :flag-nf: \\ud83c\\uddf3\\ud83c\\uddeb 🇳🇬 :flag-ng: \\ud83c\\uddf3\\ud83c\\uddec 🇳🇮 :flag-ni: \\ud83c\\uddf3\\ud83c\\uddee 🇳🇱 :flag-nl: \\ud83c\\uddf3\\ud83c\\uddf1 🇳🇴 :norway: \\ud83c\\uddf3\\ud83c\\uddf4 🇳🇵 :nepal: \\ud83c\\uddf3\\ud83c\\uddf5 🇳🇷 :nauru: \\ud83c\\uddf3\\ud83c\\uddf7 🇳🇺 :niue: \\ud83c\\uddf3\\ud83c\\uddfa 🇳🇿 :flag-nz: \\ud83c\\uddf3\\ud83c\\uddff 🇴🇲 :oman: \\ud83c\\uddf4\\ud83c\\uddf2 🇵🇦 :panama: \\ud83c\\uddf5\\ud83c\\udde6 🇵🇪 :peru: \\ud83c\\uddf5\\ud83c\\uddea 🇵🇫 :flag-pf: \\ud83c\\uddf5\\ud83c\\uddeb 🇵🇬 :flag-pg: \\ud83c\\uddf5\\ud83c\\uddec 🇵🇭 :flag-ph: \\ud83c\\uddf5\\ud83c\\udded 🇵🇰 :flag-pk: \\ud83c\\uddf5\\ud83c\\uddf0 🇵🇱 :poland: \\ud83c\\uddf5\\ud83c\\uddf1 🇵🇲 :flag-pm: \\ud83c\\uddf5\\ud83c\\uddf2 🇵🇳 :flag-pn: \\ud83c\\uddf5\\ud83c\\uddf3 🇵🇷 :flag-pr: \\ud83c\\uddf5\\ud83c\\uddf7 🇵🇸 :flag-ps: \\ud83c\\uddf5\\ud83c\\uddf8 🇵🇹 :flag-pt: \\ud83c\\uddf5\\ud83c\\uddf9 🇵🇼 :palau: \\ud83c\\uddf5\\ud83c\\uddfc 🇵🇾 :flag-py: \\ud83c\\uddf5\\ud83c\\uddfe 🇶🇦 :qatar: \\ud83c\\uddf6\\ud83c\\udde6 🇷🇪 :flag-re: \\ud83c\\uddf7\\ud83c\\uddea 🇷🇴 :flag-ro: \\ud83c\\uddf7\\ud83c\\uddf4 🇷🇸 :serbia: \\ud83c\\uddf7\\ud83c\\uddf8 🇷🇺 :ru: \\ud83c\\uddf7\\ud83c\\uddfa 🇷🇼 :rwanda: \\ud83c\\uddf7\\ud83c\\uddfc 🇸🇦 :flag-sa: \\ud83c\\uddf8\\ud83c\\udde6 🇸🇧 :flag-sb: \\ud83c\\uddf8\\ud83c\\udde7 🇸🇨 :flag-sc: \\ud83c\\uddf8\\ud83c\\udde8 🇸🇩 :sudan: \\ud83c\\uddf8\\ud83c\\udde9 🇸🇪 :sweden: \\ud83c\\uddf8\\ud83c\\uddea 🇸🇬 :flag-sg: \\ud83c\\uddf8\\ud83c\\uddec 🇸🇭 :flag-sh: \\ud83c\\uddf8\\ud83c\\udded 🇸🇮 :flag-si: \\ud83c\\uddf8\\ud83c\\uddee 🇸🇰 :flag-sk: \\ud83c\\uddf8\\ud83c\\uddf0 🇸🇱 :flag-sl: \\ud83c\\uddf8\\ud83c\\uddf1 🇸🇲 :flag-sm: \\ud83c\\uddf8\\ud83c\\uddf2 🇸🇳 :flag-sn: \\ud83c\\uddf8\\ud83c\\uddf3 🇸🇴 :flag-so: \\ud83c\\uddf8\\ud83c\\uddf4 🇸🇷 :flag-sr: \\ud83c\\uddf8\\ud83c\\uddf7 🇸🇸 :flag-ss: \\ud83c\\uddf8\\ud83c\\uddf8 🇸🇹 :flag-st: \\ud83c\\uddf8\\ud83c\\uddf9 🇸🇻 :flag-sv: \\ud83c\\uddf8\\ud83c\\uddfb 🇸🇽 :flag-sx: \\ud83c\\uddf8\\ud83c\\uddfd 🇸🇾 :syria: \\ud83c\\uddf8\\ud83c\\uddfe 🇸🇿 :flag-sz: \\ud83c\\uddf8\\ud83c\\uddff 🇹🇨 :flag-tc: \\ud83c\\uddf9\\ud83c\\udde8 🇹🇩 :chad: \\ud83c\\uddf9\\ud83c\\udde9 🇹🇫 :flag-tf: \\ud83c\\uddf9\\ud83c\\uddeb 🇹🇬 :togo: \\ud83c\\uddf9\\ud83c\\uddec 🇹🇭 :flag-th: \\ud83c\\uddf9\\ud83c\\udded 🇹🇯 :flag-tj: \\ud83c\\uddf9\\ud83c\\uddef 🇹🇰 :flag-tk: \\ud83c\\uddf9\\ud83c\\uddf0 🇹🇱 :flag-tl: \\ud83c\\uddf9\\ud83c\\uddf1 🇹🇲 :flag-tm: \\ud83c\\uddf9\\ud83c\\uddf2 🇹🇳 :flag-tn: \\ud83c\\uddf9\\ud83c\\uddf3 🇹🇴 :tonga: \\ud83c\\uddf9\\ud83c\\uddf4 🇹🇷 :tr: \\ud83c\\uddf9\\ud83c\\uddf7 🇹🇹 :flag-tt: \\ud83c\\uddf9\\ud83c\\uddf9 🇹🇻 :tuvalu: \\ud83c\\uddf9\\ud83c\\uddfb 🇹🇿 :flag-tz: \\ud83c\\uddf9\\ud83c\\uddff 🇺🇦 :flag-ua: \\ud83c\\uddfa\\ud83c\\udde6 🇺🇬 :uganda: \\ud83c\\uddfa\\ud83c\\uddec 🇺🇸 :us: \\ud83c\\uddfa\\ud83c\\uddf8 🇺🇾 :flag-uy: \\ud83c\\uddfa\\ud83c\\uddfe 🇺🇿 :flag-uz: \\ud83c\\uddfa\\ud83c\\uddff 🇻🇦 :flag-va: \\ud83c\\uddfb\\ud83c\\udde6 🇻🇨 :flag-vc: \\ud83c\\uddfb\\ud83c\\udde8 🇻🇪 :flag-ve: \\ud83c\\uddfb\\ud83c\\uddea 🇻🇬 :flag-vg: \\ud83c\\uddfb\\ud83c\\uddec 🇻🇮 :flag-vi: \\ud83c\\uddfb\\ud83c\\uddee 🇻🇳 :flag-vn: \\ud83c\\uddfb\\ud83c\\uddf3 🇻🇺 :flag-vu: \\ud83c\\uddfb\\ud83c\\uddfa 🇼🇫 :flag-wf: \\ud83c\\uddfc\\ud83c\\uddeb 🇼🇸 :samoa: \\ud83c\\uddfc\\ud83c\\uddf8 🇽🇰 :kosovo: \\ud83c\\uddfd\\ud83c\\uddf0 🇾🇪 :yemen: \\ud83c\\uddfe\\ud83c\\uddea 🇾🇹 :flag-yt: \\ud83c\\uddfe\\ud83c\\uddf9 🇿🇦 :flag-za: \\ud83c\\uddff\\ud83c\\udde6 🇿🇲 :zambia: \\ud83c\\uddff\\ud83c\\uddf2 🇿🇼 :flag-zw: \\ud83c\\uddff\\ud83c\\uddfc 🏴󠁧󠁢󠁥󠁮󠁧󠁿 :england: \\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc65\\udb40\\udc6e\\udb40\\udc67\\udb40\\udc7f 🏴󠁧󠁢󠁳󠁣󠁴󠁿 :scotland: \\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc73\\udb40\\udc63\\udb40\\udc74\\udb40\\udc7f 🏴󠁧󠁢󠁷󠁬󠁳󠁿 :wales: \\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc77\\udb40\\udc6c\\udb40\\udc73\\udb40\\udc7f"
  },
  "guides/emoji/emoji.html": {
    "href": "guides/emoji/emoji.html",
    "title": "表情符号 | Kook.Net 文档",
    "keywords": "Kook.Net 中的表情符号 KOOK 中的表情符号包含两种形式，即 Emoji 表情与服务器自定义表情，在 Kook.Net 中分别以 Emoji 与 Emote 表示，这两个类都实现了 IEmote 接口。 Emoji Emoji 是一种通用的表情符号，是 Unicode 标准中的一部分，可以在任何支持 Unicode 标准的平台上使用。因此，诸如 👌、♥、👀 等的字符串都会被 KOOK 解析为 Emoji 表情符号。 每个被 KOOK 所支持的 Emoji 表情符号都有其对应的短代码，其为由两个冒号及其所包围的别名组成，例如 👌、♥、👀 可分别被表示为 :ok_hand:、:heart:、:eyes:。KOOK API 处理有关 Emoji 表情符号的消息时会自动将短代码转换为对应的 Emoji 表情符号。 有关 KOOK 所受支持的短代码，可参考此页面。 声明 Emoji 要创建 Emoji 对象，可将 Emoji 表情符号或其 Unicode 传入 Emoji 的构造函数中，例如 new Emoji(\"👌\"); 或 new Emoji(\"\\uD83D\\uDC4C\");，也可以通过使用 Parse 或 TryParse 解析 Emoji 表情符号或其短代码的方式创建 Emoji 对象，例如 Emoji.Parse(\"👌\")、Emoji.Parse(\":ok_hand:\")、Emoji.TryParse(\":ok_hand:\", out var emoji)。 为消息添加 Emoji 表情符号的代码示例： public async Task ReactAsync(SocketUserMessage userMsg) { // 使用表情符号本身 await userMsg.AddReactionAsync(new Emoji(\"👌\")); // 使用 Unicode await userMsg.AddReactionAsync(new Emoji(\"\\uD83D\\uDC4C\")); // 使用短代码 await userMsg.AddReactionAsync(Emoji.Parse(\":ok_hand:\")); } Emote Kook.Net 中的 Emote 指代 KOOK 中添加到服务器内的自定义表情符号，其在 KMarkdown 中的完全限定形式形如： (emj)kook-logo(emj)[1591057729615250/9nG5PxHkZE074074]。 其中，kook-logo 为表情符号的别名，1591057729615250/9nG5PxHkZE074074 为表情符号的 ID。 目前 KOOK 中尚未提供便捷获取自定义表情符号的完全限定形式的方法，要获取自定义表情符号的完全限定形式，可通过一下几种方式： Kook.Net 对消息体中的表情符号部分进行了解析，可通过 Tags 获取 Type 为 Emoji 的 Emote 对象，通过 ToKMarkdownString 方法获取完全限定形式。 通过 Emotes 属性获取服务器中的全部自定义表情符号，从而获取其完全限定形式。 通过 GetEmotesAsync 方法获取服务器中的全部自定义表情符号，从而获取其完全限定形式。 在 KOOK 网页端或桌面客户端中启用开发者工具 (Ctrl+Alt+Shift+O)，通过跟踪与表情符号相关的网络请求负载或相应获取其完全限定形式。 声明 Emote 要通过服务器自定义表情符号的完全限定形式创建 Emote 对象，请使用 Parse 或 TryParse 方法，例如 Emote.Parse(\"(emj)kook-logo(emj)[1591057729615250/9nG5PxHkZE074074]\")。 public async Task ReactAsync(SocketUserMessage userMsg) { if (Emote.TryParse(emoteString, out var emote)) { await userMsg.AddReactionAsync(emote); } } Tip 要在 Socket 客户端中通过表情符号名称获取指定的表情符号，可以访问 Emotes 属性。 private readonly KookSocketClient _client; public async Task ReactAsync(SocketUserMessage userMsg, string emoteName) { var emote = _client.Guilds .SelectMany(x => x.Emotes) .FirstOrDefault(x => x.Name.IndexOf( emoteName, StringComparison.OrdinalIgnoreCase) != -1); if (emote is null) return; await userMsg.AddReactionAsync(emote); } Tip KOOK 中，激活 BUFF 的用户可以跨服务器使用表情符号，因此，Bot 可能会收到来自 Bot 自身并未加入的服务器的表情符号。 虽然 KOOK Bot API 允许 Bot 跨服务器使用表情符号，但不能使用未加入的服务器的表情符号。 为了安全起见，若在 Socket 客户端中要在消息中引用、或添加新回应时采用未知来源的表情符号，应当访问所有服务器的 Emotes 属性来确定表情符号是否存在于 Bot 所加入的服务器中，或捕获可能的异常。 更多信息 要进一步了解如何使用 Emoji 和 Emote，请参阅 IEmote 文档。"
  },
  "guides/entities/casting.html": {
    "href": "guides/entities/casting.html",
    "title": "类型转换 | Kook.Net 文档",
    "keywords": "类型转换 通过类型转换，实体可以转换为其它定义下的实体，但这种转换仅能在有继承关系的变体间进行。 例如：IUser 可以转换为 IGuildUser，但不能转换为 IMessage。 Note 如果两个接口之间存在继承关系，它们便可以进行互相的转换。 将实体类转换为其所实现的接口也可以合法的。 向上类型转换 通过向上类型转换，实体可以被转换为更通用的变体，例如：将 IGuildUser 转换为 IUser。 尽管向上类型转换的结果往往具有更简化的信息，但由于多态性，基类类型的变量可以保存派生类型。 向上类型转换一般是隐式进行的。 通过向下类型转换，实体可以转换为包含更详细信息的变体，例如：将 IUser 转换为 IGuildUser， 这样便可以访问原始无法直接访问的信息。 向下类型转换 向下类型转换是访问实体的实际定义最直接的方式，如果要访问派生类型的实例成员， 可以直接进行向下类型转换。向下类型转换一般是显式进行的。 IUser user; // 这里使用了内联的向下类型转换来一次性获取字段数据 // 需要注意的是，如果类型转换的结果实体为 null，则会抛出 NullReferenceException 异常 Console.WriteLine(((IGuildUser)user).Nickname); // 如果可以保证转换是合法且结果非空的，则可以为类型转换结果赋值到另一个变量中 IGuildUser guildUser = (IGuildUser)user; Warning 作为一种强制类型转换操作，如果两种类型之间不兼容，向下类型转换可能会在执行时抛出 InvalidCastException 异常，在这种情况下，通过模式匹配来进行类型转换可以有效地避免这种异常。 更一般的类型转换 更一般情况下的类型转换往往使用 as 运算符来向将对象转换为给定的类型。 如果实体确实能被转换为给定的类型，运算结果会返回转换后的类型，来让属性可以为访问。 IChannel channel; // 如果要将通用频道接口 IChannel 转换为服务器文字频道接口 ITextChannel // 来访问 ITextChannel 中存在而 IChannel 中不存在的属性和方法 // 则可进行如下的转换 ITextChannel textChannel = channel as ITextChannel; await textChannel.DoSomethingICantWithIChannelAsync(); Warning 如果类型转换的结果可能为 null，在访问其属性或方法时则会抛出 NullReferenceException 异常， 在这种情况下，通过模式匹配进行安全类型转换则更为实用，这可以阻止此异常的抛出。 安全类型转换 安全类型转换在转换前会进行模式匹配检查，因此可以保证转换结果类型永不为 null。 C# 提供了三种语法来进行安全类型转换： 类型检查 要进行安全类型转换，需要使用 is 运算符来检查值是否属于给定地类型。 如果检查不通过，条件判断语句可以绕过代码，来保证程序不会访问 null 对象的属性。 IUser user; // 这里检查了该用户实体是否为一个 IGuildUser 实体 // 如果检查不通过，条件判断语句可以绕过可能会导致 null 对象访问的代码 if (user is IGuildUser) { Console.WriteLine(\"This user is in a guild!\"); } else { // 检查不通过 } 结合声明的初始化赋值 这里，类型检查、类型声明、初始化赋值组合在一起，可以简化代码， 这样，在类型检查通过后，对象将会被立即转换并赋值到一个新的变量中。 IUser user; // 假设这里的 user 变量内事实上存储的是一个 IGuildUser 对象 // 那么在类型检查通过后，此处的代码可以直接将 user 转换为 IGuildUser // 并赋值到 guildUser 变量中 // 这样就不用再在后面的代码中再次进行类型转换了 if (user is IGuildUser guildUser) { Console.WriteLine(guildUser.JoinedAt); } else { // 检查不通过 } 结合逻辑模式 在之前的示例中，我们通过类型检查来避免程序在进行不正确的类型转换后抛出异常， 在此实例中，代码会在类型转换检查不通过时忽略后续代码来结束整个方法返回结果， 如类型转换成功，其所一并声明的变量也可以在后续的代码中被使用。 private void MyFunction(IMessage message) { // 这里的类型检查与逻辑模式中的 not 相结合 // 当 message 不为 IUserMessage 时，方法会直接返回 if (message is not IUserMessage userMessage) return; // 由于以上代码进行的类型检查是内联的 // 类型转换结果 userMessage 变量在判断语句外也可以访问 Console.WriteLine(userMessage.Author); } Note 在类型转换或类型检查时需使用 is、as 和 not 关键字。 ==、!= 和 = 适用于变量或实例化对象之间，而非它们与类型之间， 如要获取变量或实例化对象的类型，请使用 Object.GetType 方法或 typeof 运算符。"
  },
  "guides/entities/glossary.html": {
    "href": "guides/entities/glossary.html",
    "title": "实体词汇表与图表 | Kook.Net 文档",
    "keywords": "实体类型 所有 Kook.Net 实体的列表及其之间的继承关系，来表示哪些类型之间可以进行相互转换。 Note Socket 和 Rest 实体的所有接口都具有相同的继承树，其中，图中被标记为红色的实体是其所在工程所独有的。 频道 IChannel 消息频道 服务器文字频道 (ITextChannel)：服务器内的消息频道 私聊频道 (IDMChannel)：私信聊天会话频道 Kook.Net 中的私信聊天会话也被抽象为一个频道 私有频道 (IPrivateChannel)：非服务器内的消息频道 由于 KOOK 暂不支持讨论组，所以目前私有频道也只有私聊频道 消息频道 (IMessageChannel)：可以发送文字消息的频道 其它频道 服务器频道 (IGuildChannel)：服务器内的频道 这可以是能出现在服务器内的任何一种频道类型 音频频道 (IAudioChannel)：音频频道 语音频道 (IVoiceChannel)：服务器内的语音频道 分组频道 (ICategoryChannel)：服务器内的分组频道，可以包含多个子频道 嵌套频道 (INestedChannel)：可以出现在分组频道下的频道 消息 IMessage 用户消息 (IUserMessage)：用户所发送的消息 系统消息 (ISystemMessage)：KOOK 系统用户发送的消息 消息 (IMessage)：所有消息的基本类型接口 用户 IUser 用户状态 (IPresence)：用户的状态信息 服务器用户 (IGuildUser)：服务器内的用户 Bot 登录用户 (ISelfUser)：当前客户端登录到 KOOK 的机器人用户 用户 (IUser)：所有用户的基本类型接口 其它类型 表情符号 IEmote Emote (Emote)：服务器内创建的自定义表情 Example: (emj)kaiheila-logo(emj)[1990044438283387/8BZCdG49cL069069] Emoji (Emoji)：Unicode 表示的 Emoji 表情符号 Example: 👍 用户动态 IActivity 游戏 (IGame)：代表用户的游戏活动"
  },
  "guides/entities/introduction.html": {
    "href": "guides/entities/introduction.html",
    "title": "实体简介 | Kook.Net 文档",
    "keywords": "Kook.Net 中的实体 Kook.Net 提供了一系列多用途的实体类，来表示来自 KOOK API 或网关的数据。 Tip 在使用 Get*** 系列方法来获取包含详细信息的实例实体时，需要为方法指定正确的 ID， 因此，建议您启用 KOOK 的开发者模式，以便于获取实体的 ID，开发者模式可在 “用户设置 - 高级设置 - 开发者模式” 处启用。 实体的变体与继承 由于同一对象可能会在 KOOK API 或网关不同的接口或事件中出现， 在不同的数据上下文中包含不同的字段，因此，Kook.Net 中的部分实体拥有多种变体， 例如：IUser 和 IGuildUser 分别表示通用的用户实体和服务器内的用户实体。 尽管部分实体包含的信息很简略，但所有的实体模型都有一个包含尽可能详细的信息的实体变体与之对应。 Socket 与 REST REST 实体通过 HTTP API 获取，其在被使用后会被销毁释放。每一个 REST 实体的获取都会引起一次 API 请求，短时间内发起大量 API 请求可能会触发速率限制， 因此，请尽可能少地通过 REST 获取实体。 有关 REST 的更多信息 Socket 实体中的大多数都是通过 KookSocketClient 的网关连接中的各种事件创建的， 仅当客户端初始化或事件包含的数据过于简略时，客户端才会进一步通过 API 获取的 REST 实体补全信息。 这些 Socket 实体都会进入到客户端的全局缓存中，以在业务逻辑中使用。 以 MessageReceived 事件为例，事件所传递的数据为 SocketMessage 实体， 实体内指示消息所来源的频道的属性为 SocketMessageChannel 实体。 所有的消息都来源于支持发送消息的频道类型， 因此，频道的这种实体变体可以覆盖全部需要发送消息的频道的情况。 但这并不是说消息不能来源于 SocketTextChannel（SocketTextChannel 表示服务器内的文本频道）， 如果要从一个消息实体获取消息所在服务器的信息，则需要将其频道实体类型转换为 SocketTextChannel。 Note 有关各种实体的继承关系及其定义，请参阅 实体词汇表。 导航属性 多数 Socket 实体都有一个内部的导航属性，以便于实体向其父类或派生类的转换与访问。 访问 Socket 实体 实体最基本的形式形如 SocketGuild、SocketUser、SocketChannel 等， 这些实体可以从 KookSocketClient 的全局缓存中获取， 也可以在 KookSocketClient 上通过相应的 Get*** 方法获取。 在这些实体上进一步调用 Get*** 方法可以获得包含更多信息的实体变体，例如： SocketGuild.GetUser 可以获得 SocketGuildUser 实体， SocketGuild.GetChannel 可以获得 SocketGuildChannel 实体。 按业务逻辑的需要，将这些实体进行进一步的类型转换便可获得实体的其它变体。 示例 public string GetChannelTopic(ulong id) { var channel = _client.GetChannel(8708013346475345) as SocketTextChannel; return channel?.Topic; } public SocketGuildUser GetGuildOwner(SocketChannel channel) { var guild = (channel as SocketGuildChannel)?.Guild; return guild?.Owner; } 访问 REST 实体 REST 实体的工作方式几乎与 Socket 实体相同，只是在每一次获取时都会发起一次 API 请求，因此较少使用。 访问 REST 实体需要通过 KookRestClient 的 Rest 属性进行， 或是创建一个新的 KookRestClient 实例，可以独立于网关线程。 示例 // 在 GetUserAsync 的结果中，RestUser 实体包含了用户登录 KOOK 的连接方式， // 而在 RestGuild 上的 GetUsersAsync 结果中的 RestUser 不包含此信息。 // Socket 建立连接后，如果配置指示客户端始终下载全部用户信息， // 客户端则会通过 RestGuild.GetUsersAsync 所实际调用的 API 获取服务器用户信息， // 尽管如此，全局缓存中也不会包含可靠的用户连接方式的信息。 // 在这种少数情况下，则需要通过访问 GetUserAsync 返回的 RestUser 才能获取所需要的连接方式信息。 public static async Task<ClientType?> GetUserClientType(IUser user, KookRestClient restClient) { var restUser = await restClient.GetUserAsync(user.Id); return restUser.ActiveClient; }"
  },
  "guides/getting_started/first-bot.html": {
    "href": "guides/getting_started/first-bot.html",
    "title": "从零开始 | Kook.Net 文档",
    "keywords": "使用 Kook.Net 构建你的第一个 Bot 本指南将引导您使用 Kook.Net 构建一个简单的 Bot。在此之前，请先确保您已参与 KOOK 开发者，并获得开发权限。 创建一个 KOOK 应用 在开始编写代码前，您需要通过 KOOK 开发者中心创建一个 Bot。 访问并登录到 KOOK 开发者中心； 点击 新建应用； 填写应用名称； 点击刚刚创建好的应用； 点击左侧的 机器人； 确保机器人的连接模式为 WebSocket； (可选) 如果要创建公共 Bot，开启 开启公共机器人 开关。 将 Bot 添加到服务器 Bot 无法通过访问服务器的邀请链接进入频道，因此需要 Bot 的邀请链接将 Bot 添加到服务器。 在 KOOK 开发者中心 中访问要添加到服务器的 Bot 应用； 点击左侧的 邀请链接； 在右侧的 角色权限设置 中勾选要在 Bot 进入服务器后直接拥有的权限； Note 这将会在服务器内创建一个仅可授予给该 Bot 的托管角色，该 Bot 将会在进入服务器后自动获得该角色。 如需在进入服务器后变更权限，可通过 服务器设置 中的 角色权限 进行修改。 打开上方生成的邀请链接； 选择要将 Bot 添加到的服务器； 点击邀请。 Note 列表中仅显示您拥有 管理服务器 权限的服务器。 将 Bot 连接至 KOOK 如果您已创建工程，并安装了 Kook.Net，可参考以下步骤， 否则，请参考 安装 Kook.Net 。 异步启动 Kook.Net 广泛采用 .NET 的 异步编程模型，绝大多数操作都是以异步方式完成， 请尽可能地在异步上下文中等待这些操作。 C# 9.0 引入了顶级语句，可以在不显式创建 Program 类和 Main 方法的情况下编写代码， 顶级语句中使用 await 来调用异步方法，会自动建立一个在异步上下文中启动的程序。 Warning 应用程序中异步上下文抛出的任何异常都会被持续向上层抛出直到首个同步方法， 抛出至顶级语句的所有未经处理的异常将导致程序退出。 Kook.Net 会捕获事件处理函数中发生的异常，以避免该异常导致程序退出， 但需要注意的是，如果异常发生在 async void 所标记的方法中， 尽管异常发生在异步上下文中，但该异常仍会导致程序退出。 因此，请合理使用 async Task 与 await 的组合。 创建日志方法 在创建并配置 KOOK Bot 客户端程序前，我们需要创建一个事件处理程序来订阅 Kook.Net 的日志事件。 为了尽可能地广泛支持各种日志提供程序，Kook.Net 通过 Log 事件来记录日志信息， 其事件参数为 LogMessage。有关该事件地详细信息，可参考 API 文档。 如需要使用自己的日志记录框架，请在此该事件行调用。此处，为了简单起见，我们仅将日志记录到控制台中。 // Log 事件，此处以直接输出到控制台为例 Task LogAsync(LogMessage log) { Console.WriteLine(log.ToString()); return Task.CompletedTask; } 创建 KOOK Bot 客户端程序 为了编写一个能与 KOOK 服务端实时互动的 Bot，请使用 KookSocketClient 作为客户端， 使用 Socket 实体，如您不了解 Kook.Net 的多种实现，请参考 术语 。 在异步入口点中创建一个 KookSocketClient 的实例，用于与 KOOK 服务端建立连接， 如有需要，也可向构造函数中传递一个 KookSocketConfig 的可选参数， 多数情况下，默认值即可。 在连接前，将刚刚创建的日志事件处理程序订阅到客户端的 Log 事件中。 Kook.Net 中的事件与 C# 中的任何其他事件的工作机制类似。 使用 LoginAsync 方法登录到 KOOK 服务端，登录过程采用的身份认证信息为机器人的 Token。 通过调用客户端的 StartAsync 方法，客户端启动与服务端的连接/重连机制， 该方法会在连接/重连机制启动后立刻返回，因此，任何依赖于客户端状态的方法 都应以事件处理程序的形式执行。 为了阻止程序在运行期间的异步入口点返回，请在 MainAsync 方法退出前等待一个无限时长的延迟， 获取其它可以阻止程序继续运行的方法，例如，等待控制台中输入信息。 Important Token 可允许您获得对 Bot 的所有访问权限，因此，不要与任何无关人员共享 Token！ 如您要公开 Bot 的源代码，请将该 Token 存储在外部源中。 在下面的示例中，我们从预定义的变量中获取变量，这是极其不安全的， 尤其是在有计划将应用程序以任何形式发布的情况下。 为了能够安全地处理该机密信息，建议以 环境变量、配置文件、机密管理 等形式存储 Token。 using KookSocketClient client = new(); client.Log += LogAsync; // 将 Token 写入字符串变量，用于 Bot 登录过程的身份认证 // 这很不安全，尤其是在有公开源代码的情况下，不应该这么做 string token = \"token\"; // 一些其它存储 Token 的方案，如环境变量、文件等 // string token = Environment.GetEnvironmentVariable(\"NameOfYourEnvironmentVariable\"); // string token = File.ReadAllText(\"token.txt\"); // string token = JsonConvert.DeserializeObject<AConfigurationClass>(File.ReadAllText(\"config.json\")).Token; await client.LoginAsync(TokenType.Bot, token); await client.StartAsync(); // 阻塞程序直到关闭 await Task.Delay(Timeout.Infinite); 到这里，客户端应该可以连接到 KOOK 服务端，运行程序，等待片刻，应该可以在 KOOK 客户端中看到 Bot 上线。"
  },
  "guides/getting_started/installing.html": {
    "href": "guides/getting_started/installing.html",
    "title": "安装 Kook.Net | Kook.Net 文档",
    "keywords": "安装 Kook.Net Kook.Net 通过 NuGet 分发，推荐通过 NuGet 包管理工具安装， 如有需要，也可从源代码进行编译。 支持的平台 Kook.Net 目前支持的目标框架包括 .NET 8.0 .NET 7.0 .NET 6.0 .NET Standard 2.1 .NET Standard 2.0 .NET Framework 4.6.2 通过 NuGet 包管理器安装 支持的 NuGet 源有： NuGet Gallery GitHub Packages 使用 Visual Studio 找到 解决方案资源管理器 窗口，在 Bot 项目下找到 依赖项 右键点击 依赖项，选择 管理 NuGet 程序包 在 浏览 选项卡中，搜索 Kook.Net Note 如要安装预览版 Kook.Net，请勾选 包括预发行版，否则，预览版搜索结果无法展示在列表中。 选择 Kook.Net，点击 安装 使用 JetBrains Rider 找到 Explorer 窗口，在 Bot 项目下找到 Dependencies 右键点击 Dependencies，选择 Manage NuGet Packages 在 Packages 选项卡中，搜索 Kook.Net Note 如要安装预览版 Kook.Net，请勾选 Prerelease ，否则，预览版搜索结果无法展示在列表中。 右键点击 Kook.Net，点击 Install Kook.Net ... 使用 Visual Studio Code 找到 Bot 项目的 *.csproj 文件 添加 Kook.Net 到 *.csproj 中 <Project Sdk=\"Microsoft.NET.Sdk\"> <!-- The following may differ depending on the latest version of .NET Core or Discord.Net. --> <PropertyGroup> <OutputType>Exe</OutputType> <TargetFramework>net8.0</TargetFramework> </PropertyGroup> <ItemGroup> <PackageReference Include=\"Kook.Net\" Version=\"0.6.0\" /> </ItemGroup> </Project> 使用 dotnet CLI 启动终端 导航至 Bot 项目中 *.csproj 文件的所在目录 执行 dotnet add package Kook.Net Note 如要安装预览版 Kook.Net，使用 dotnet CLI 添加 Kook.Net 时需附加 --prerelease 选项， 否则，dotnet CLI 将只尝试为项目添加稳定版本的 NuGet 包。 从源代码编译 要从源代码编译 Kook.Net，请参考： 使用 Visual Studio Visual Studio 2022 或更新版本。 .NET 8 SDK 安装 Visual Studio 期间需选择 .NET 8 工作负载。 使用 JetBrains Rider JetBrains 2021.3 或更新版本。 .NET 8 SDK 使用 Command Line .NET 8 SDK"
  },
  "guides/getting_started/terminology.html": {
    "href": "guides/getting_started/terminology.html",
    "title": "术语 | Kook.Net 文档",
    "keywords": "术语 实现指定实体类 Kook.Net 分为核心库与两个不同的实现：Kook.Net.Core、 Kook.Net.Rest 和 Kook.Net.WebSocket。作为 Bot 的开发者， 您只需要了解如何使用 Kook.Net.WebSocket ，但也需要了解它们之间的区别。 Kook.Net.Core 提供了一组抽象化 KOOK API 的接口，这些接口保证了 Kook.Net 中的所有实现都保持一致。如果您正在编写与实现无关的库，可仅依赖 核心库来确保您的库能够与 Kook.Net 一起在任何类型的实现中都能正常工作。 Kook.Net.Rest 提供了一组具体的类，用于实现 KOOK API 中的 HTTP 接口部分。 该实现中的实体以 Rest 为前缀，例如 RestChannel。 Kook.Net.WebSocket 提供了一组具体的类，用于实现 KOOK API 中的 WebSocket 接口部分， 并支持实体的缓存。开发 Bot 时，您应使用此实现。该实现中的实体以 Socket 为前缀， 例如 SocketChannel。"
  },
  "guides/introduction/intro.html": {
    "href": "guides/introduction/intro.html",
    "title": "Kook.Net 简介 | Kook.Net 文档",
    "keywords": "简介 要准备使用 Kook.Net？ 欢迎！在开始使用本类库前，请先确认您应了解如何开发 .NET 应用程序， 并对 C# 语言有一定的了解，包括 异步编程、多态、接口 等关键内容。 如果想与使用本类库的开发者交流、获取帮助、反馈问题，请访问我们的 KOOK Kook.Net 社区。 Note 请注意，本文档中的代码片段仅为示例，请不要盲目地直接复制使用。 还不熟悉 .NET 与 C#？ 本类库的样例、代码片段、文档都是以 .NET 和 C# 开发的，如有需要，可参考以下文档： C# 编程指南 C# 文档 C# 语言参考 .NET API"
  },
  "guides/other_libs/efcore.html": {
    "href": "guides/other_libs/efcore.html",
    "title": "Entity Framework Core | Kook.Net 文档",
    "keywords": "对象关系映射框架 Entity Framework Core 本向导可以指引您配置并基于 SQL Server 数据库使用 Entity Framework Core，本文末尾罗列了其它数据库的信息。 先决条件 配置好依赖注入服务的 Bot 客户端程序 SQL Server 数据库实例 EF Core CLI 工具 安装所需类库 可通过集成开发环境的用户界面或 dotnet CLI 安装以下类库： 名称 链接 Microsoft.EntityFrameworkCore 链接 Microsoft.EntityFrameworkCore.SqlServer 链接 配置 DbContext EF Core 中的 DbContext 是一个抽象类，它提供了一系列方法来操作数据库。数据库上下文及其包装的实体示例如下： // ApplicationDbContext.cs using Microsoft.EntityFrameworkCore; public class ApplicationDbContext : DbContext { public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { } public DbSet<UserEntity> Users { get; set; } } // UserEntity.cs public class UserEntity { public ulong Id { get; set; } public string Name { get; set; } } Note 有关创建用于 EF Core 的实体模型，请参阅 EF Core 文档。 将数据库上下文添加到依赖注入服务容器中 要将此数据库上下文添加到依赖注入服务容器中，只需调用 EF Core 中所提供的扩展方法，示例如下： private static ServiceProvider ConfigureServices() { return new ServiceCollection() .AddDbContext<ApplicationDbContext>( optionsBuilder => optionsBuilder.UseSqlServer(\"数据库连接字符串\") ) // ... .BuildServiceProvider(); } Note 有关如何书写数据库连接字符串，可参考 EF Core 文档。 迁移 在使用数据库上下文前，需要将代码中的更改迁移到实际的数据库中。有关迁移的更多信息，请参阅 EF Core 文档。 使用数据库上下文 要使用数据库上下文，请通过依赖注入服务将其注入到要使用的类中，示例如下： using Kook.Commands; public class DatabaseModule : ModuleBase<SocketCommandContext> { private readonly ApplicationDbContext _dbContext; public SampleModule(ApplicationDbContext dbContext) { _dbContext = dbContext; } [Command(\"sample\")] public async Task Sample() { // 在命令的业务逻辑中使用所注入的数据库上下文 var user = _dbContext.Users.SingleOrDefault(x => x.Id == Context.User.Id); // ... } } 使用其它数据库提供程序 此处有一些 EF Core 可用的主流的数据库提供程序，及其相关的文档，通常来说，与上文示例代码中不同的仅有 DbContextOptions / DbContextOptionsBuilder 中进行配置的部分。 名称 链接 MySQL 链接 SQLite 链接 PostgreSQL 链接"
  },
  "guides/other_libs/mediatr.html": {
    "href": "guides/other_libs/mediatr.html",
    "title": "MediatR | Kook.Net 文档",
    "keywords": "中介者模式 MediatR 先决条件 配置好依赖注入服务的 Bot 客户端程序 安装所需类库 可通过集成开发环境的用户界面或 dotnet CLI 安装以下类库： 名称 链接 MediatR 链接 MediatR.Extensions.Microsoft.DependencyInjection 链接 将 MediatR 添加到依赖注入服务容器中 MediatR.Extensions.Microsoft.DependencyInjection 提供了方法 .AddMediatR() 允许您以将 MediatR 便捷地添加到依赖注入服务容器中，其参数可以是事件处理程序中将会用到地任何类型，代码示例片段如下： .AddMediatR(typeof(Bot)) 创建消息通知 MediatR 基于消息通知和其处理程序传递事件。下面的示例创建了一个消息通知来处理 KookSocketClient 中的 MessageReceived 事件。 // MessageReceivedNotification.cs using Kook.WebSocket; using MediatR; namespace MediatRSample.Notifications; public class MessageReceivedNotification : INotification { public MessageReceivedNotification(SocketMessage message) { Message = message ?? throw new ArgumentNullException(nameof(message)); } public SocketMessage Message { get; } } 创建事件发布者与订阅者 在 MediatR 中，事件发布者所发布的事件需要通过订阅者的监听来使用，下面的示例创建了一个事件订阅者来监听 KookSocketClient 中的 MessageReceived 事件： // KookEventListener.cs using Kook.WebSocket; using MediatR; using MediatRSample.Notifications; using Microsoft.Extensions.DependencyInjection; using System.Threading; using System.Threading.Tasks; namespace MediatRSample; public class KookEventListener { private readonly CancellationToken _cancellationToken; private readonly KookSocketClient _client; private readonly IServiceScopeFactory _serviceScope; public KookEventListener(KookSocketClient client, IServiceScopeFactory serviceScope) { _client = client; _serviceScope = serviceScope; _cancellationToken = new CancellationTokenSource().Token; } private IMediator Mediator { get { var scope = _serviceScope.CreateScope(); return scope.ServiceProvider.GetRequiredService<IMediator>(); } } public async Task StartAsync() { _client.MessageReceived += OnMessageReceivedAsync; await Task.CompletedTask; } private Task OnMessageReceivedAsync(SocketMessage arg) { return Mediator.Publish(new MessageReceivedNotification(arg), _cancellationToken); } } 此示例代码中，KookEventListener 首先从依赖注入服务中接收 KookSocketClient 实例用于订阅事件，本示例仅演示了 MessageReceived，其他事件也可以使用同样的方式， 但事件处理程序使用了 MediatR 将事件发布到所有监听此事件的的消息通知处理程序。 添加事件订阅者添加到依赖注入服务容器中 要开始监听事件，需在入口点函数内调用 KookEventListener 类的 StartAsync() 方法，在此之前，需在依赖注入容器中注册 KookEventListener 类，并在入口点函数中获取对它的引用。 // Program.cs var listener = services.GetRequiredService<KookEventListener>(); await listener.StartAsync(); 创建消息通知处理程序 MediatR 将消息通知发布到所有监听此消息通知的事件订阅者，下面的示例创建了一个消息通知处理程序： // MessageReceivedHandler.cs using System; using MediatR; using MediatRSample.Notifications; namespace MediatRSample; public class MessageReceivedHandler : INotificationHandler<MessageReceivedNotification> { public async Task Handle(MessageReceivedNotification notification, CancellationToken cancellationToken) { Console.WriteLine($\"MediatR works! (Received a message by {notification.Message.Author.Username})\"); // ... } } 此示例代码实现了 MediatR 提供的 INotificationHandler<> 接口，这告知了 MediatR 需要将 MessageReceivedNotification 通知发送到此消息通知处理程序类。 Note 您可根据需要为同一消息通知创建任意数量的消息通知处理程序。 测试 要测试 MediatR 是否正常工作，可以启动此 Bot 客户端，并在 KOOK 客户端中向此 Bot 可访问的文字频道内发送消息，应该能看到之前在 MessageReceivedHandler 中定义的输出信息： 添加更多的事件类型 要添加更多的事件类型，可遵循以下步骤： 为事件创建消息通知类，其应包含该事件所传递的所有参数（例如：MessageReceived 事件接收一个 SocketMessage 对象作为参数，则消息通知类也应该映射此参数） 将此事件注册到 KookEventListener 类 创建消息通知处理程序来处理此消息通知"
  },
  "guides/other_libs/serilog.html": {
    "href": "guides/other_libs/serilog.html",
    "title": "Serilog | Kook.Net 文档",
    "keywords": "日志框架 Serilog 先决条件 如 使用 Kook.Net 构建你的第一个 Bot 中所描述的带有日志处理方法的 Bot 客户端程序。 安装 Serilog 类库 可通过集成开发环境的用户界面或 dotnet CLI 安装以下类库： 名称 链接 Serilog.Extensions.Logging 链接 Serilog.Sinks.Console 链接 配置 Serilog Serilog 需在异步函数入口点的顶部进行配置： using Kook; using Serilog; using Serilog.Events; public class Program { private KookSocketClient _client; public static Task Main(string[] args) => new Program().MainAsync(); public async Task MainAsync() { Log.Logger = new LoggerConfiguration() .MinimumLevel.Verbose() .Enrich.FromLogContext() .WriteTo.Console() .CreateLogger(); _client = new KookSocketClient(); _client.Log += LogAsync; // 将 Token 写入字符串变量，用于 Bot 登录过程的身份认证 // 这很不安全，尤其是在有公开源代码的情况下，不应该这么做 var token = \"token\"; // 一些其它存储 Token 的方案，如环境变量、文件等 // var token = Environment.GetEnvironmentVariable(\"NameOfYourEnvironmentVariable\"); // var token = File.ReadAllText(\"token.txt\"); // var token = JsonConvert.DeserializeObject<AConfigurationClass>(File.ReadAllText(\"config.json\")).Token; await _client.LoginAsync(TokenType.Bot, token); await _client.StartAsync(); // Block this task until the program is closed. await Task.Delay(Timeout.Infinite); } } 修改日志方法 要想让 Serilog 能够正确地记录 KOOK 的日志，需要将 Kook.Net 的 LogSeverity 映射到 Serilog 的 LogEventLevel，映射的示例如下： private static async Task LogAsync(LogMessage message) { var severity = message.Severity switch { LogSeverity.Critical => LogEventLevel.Fatal, LogSeverity.Error => LogEventLevel.Error, LogSeverity.Warning => LogEventLevel.Warning, LogSeverity.Info => LogEventLevel.Information, // Serilog 中，LogEventLevel.Verbose 相比 LogEventLevel.Debug 会输出更多的信息 LogSeverity.Verbose => LogEventLevel.Debug, LogSeverity.Debug => LogEventLevel.Verbose, _ => LogEventLevel.Information }; Log.Write(severity, message.Exception, \"[{Source}] {Message}\", message.Source, message.Message); await Task.CompletedTask; } 测试 如果现在运行程序，应该会看到以下输出： 在其它位置使用此日志记录器 至此，Serilog 已配置完毕，要想使用此日志记录器，只需按如下方式调用： Log.Debug(\"Your log message, with {Variables}!\", 10); // 这将输出信息：\"[20:36:00 DBG] Your log message, with 10!\" Note 根据所配置的日志级别，部分日志消息可能不会输出。有关日志级别的更多信息，请参见 Serilog 文档。 Note Kook.Net 与 Serilog 对日志级别的定义不完全一致，要简化最低输出日志级别控制，有两种可选策略： 将 Serilog 的 MinimumLevel 配置为 Verbose，转而在 Kook.Net 的 KookConfig 中配置 LogLevel 在 Kook.Net 的 KookConfig 中配置 LogLevel 为 Debug，转而在 Serilog 中配置 MinimumLevel 同时配置两侧的最低日志级别可能会导致预期之外的最低日志级别控制结果。"
  },
  "guides/text_commands/intro.html": {
    "href": "guides/text_commands/intro.html",
    "title": "文本命令框架入门 | Kook.Net 文档",
    "keywords": "文本命令框架 Kook.Commands 命名空间提供了一组基于特性标签的文本命令服务。 入门 要使用文本命令框架，需要先创建 CommandService 及命令处理程序。 下面的代码演示了如何创建命令服务和命令处理程序的最小程序，可在此基础上扩展功能模块。 Note CommandService 可接收一个 CommandServiceConfig 类型的可选参数用于命令服务的配置， 如果不提供此参数，则使用默认配置。建议在使用配置时，通过 IDE 的自动提示与代码注释 浏览并了解各项属性与默认参数值，并在需要时修改。 public class CommandHandler { private readonly KookSocketClient _client; private readonly CommandService _commands; // 从构造函数中获取 KookSocketClient 与 CommandService 的示例 public CommandHandler(KookSocketClient client, CommandService commands) { _commands = commands; _client = client; } public async Task InstallCommandsAsync() { // 将命令服务处理程序订阅至 MessageReceived 事件 _client.MessageReceived += HandleCommandAsync; // 通过反射查找所有命令模块并加载至命令服务 // 如不使用依赖注入，services 参数传 null // 如有需要可参考依赖注入指南 await _commands.AddModulesAsync(assembly: Assembly.GetEntryAssembly(), services: null); } private async Task HandleCommandAsync(SocketMessage messageParam) { // 过滤系统信息 var message = messageParam as SocketUserMessage; if (message == null) return; // 追踪消息前缀结束即文本命令开始的位置 int argPos = 0; // 过滤来自 Bot 的消息，过滤前缀不合命令触发规则的消息 if (!(message.HasCharPrefix('!', ref argPos) || message.HasMentionPrefix(_client.CurrentUser, ref argPos)) || message.Author.IsBot) return; // 基于此消息创建命令上下文 var context = new SocketCommandContext(_client, message); // 执行命令 await _commands.ExecuteAsync( context: context, argPos: argPos, services: null); } } 使用特性 文本命令框架支持通过特性标签来预先定义命令，也可以在运行时通过命令构建类来定义命令。 绝大多数情况下，Bot 的命令服务的确定的，因此推荐使用特性标签来定义命令。 模块 命令的功能由模块定义，在不同的类中可以分别定义不同的命令功能，在启动时可以一并加载。 要使模块能够被自动发现，模块需要满足： 公开 继承自 ModuleBase 则模块类的声明形如： using Kook.Commands; // 模块类 **必须** 为公开类，且继承自 ModuleBase // 否则，AddModulesAsync 将无法发现此模块 public class InfoModule : ModuleBase<SocketCommandContext> { } Note ModuleBase 是一个抽象类，可根据需要进行派生或重写。 模块可以继承自 ModuleBase 的任何派生类。 添加/创建命令 Warning 尽量避免模型内代码运行耗时过长，这可能会导致网关线程的阻塞，进而中断 Bot 与 KOOK 服务端的连接。 创建命令的处理程序，方法的返回类型必须是 Task 或 Task<RuntimeResult>，按需标记 async 关键字。 对该方法标记 [CommandAttribute] 特性标签，并指定命令的名称。 如该方法是 模块组 中的命令，名称可以留空。 命令参数 命令处理函数的参数即为命令的参数，例如： 整型作为参数：int num 用户作为参数：IUser user 命令参数几乎可以是任何类型的，默认支持读取的类型列表参见 类型解析 。 可选参数 默认地，命令参数为必选参数，要设置为可选参数，需为其指定默认值，例如：int num = 0。 参数中的空格 如要接收一个以空格分隔的列表，可指定可变参数关键字 params，例如：params int[]。 如果实参包含空格，在调用命令时，该实参应以双引号进行包装， 例如：对于参数 string food，可通过 !favoritefood \"Key Lime Pie\" 的形式进行调用。 如果某个参数可以包含空格地持续读取到命令末尾，可以为该参数标记 RemainderAttribute， 用户在调用时便不必将实参包装在双引号中。 命令重载 命令处理函数支持重载，命令解析过程将自动地选择类型匹配的方法。 如果两个命令处理函数间在调用时会存在不明确的引用， 可为应优先尝试进行类型匹配的重载标记 PriorityAttribute 。 命令上下文 每个命令都可以通过 ModuleBase 上的 [Context] 属性访问执行上下文。 ICommandContext 支持访问消息、频道、服务器、用户、以及调用命令的底层 KOOK 客户端。 使用 ModuleBase 的派生类可以指定不同类型的上下文。 例如，[SocketCommandContext] 中的上下文中的属性为是 Socket 实体，不再需要进行强制类型转换。 回复消息也可通过调用以 Reply 为前缀的方法完成，无需调用上下文中频道内发送消息的方法来回复命令。 Warning 上下文的类型不应该混合使用，使用 CommandContext 上下文的模块与使用 SocketCommandContext 的模块不可同时使用。 Tip 模块的完整代码示例： // 无前缀的模块 public class InfoModule : ModuleBase<SocketCommandContext> { // !say hello world -> hello world [Command(\"say\")] [Summary(\"回显消息\")] public Task SayAsync([Remainder] [Summary(\"要回显的消息\")] string echo) => ReplyTextAsync(echo); // ReplyTextAsync 为 ModuleBase 上的方法 } // 创建前缀为 'sample' 的模块 [Group(\"sample\")] public class SampleModule : ModuleBase<SocketCommandContext> { // !sample square 20 -> 400 [Command(\"square\")] [Summary(\"计算给定数字的平方\")] public async Task SquareAsync( [Summary(\"要计算的数字\")]) int num) { // 也可通过命令上下文访问频道属性 await Context.Channel.SendTextAsync($\"{num}^2 = {Math.Pow(num, 2)}\"); } // !sample userinfo --> 戈小荷#0439 // !sample userinfo @戈小荷 --> 戈小荷#0439 // !sample userinfo 戈小荷#0439 --> 戈小荷#0439 // !sample userinfo 戈小荷 --> 戈小荷#0439 // !sample userinfo 2810246202 --> 戈小荷#0439 // !sample whois 2810246202 --> 戈小荷#0439 [Command(\"userinfo\")] [Summary(\"打印当前用户的信息，或用户参数指定的用户信息\")] [Alias(\"user\", \"whois\")] public async Task UserInfoAsync( [Summary(\"要获取信息的用户\")] SocketUser user = null) { var userInfo = user ?? Context.Client.CurrentUser; await ReplyTextAsync($\"{userInfo.Username}#{userInfo.IdentifyNumber}\"); } } 自动加载模块 命令服务可以自动发现并加载程序集内继承自 ModuleBase 的类，调用 CommandService.AddModulesAsync 可以进行自动发现与模块加载。如果要指定某个模块跳过自动加载，可对其标记特性 DontAutoLoadAttribute。 手动加载模块 要手动加载模块，可调用 CommandService.AddModuleAsync，模块的类通过泛型传递。 如有需要，也可以向该方法传入 IServiceProvider. 模块构造函数 模块通过 依赖注入 进行构造， 构造函数内的任何参数都应先注入服务容器中。 Tip 模块构造函数也可以将 IServiceProvider 作为参数，并从中手动抽取所需服务，但并不推荐。 模块属性 具有公共 set 访问器属性的模块在模块构造后会被依赖服务注入，详细信息可参考 @Guides.TextCommands.DI 。 模块组 模块组为一组具有相同名称前缀的命令，要声明模块组，可标记特性 GroupAttribute 。 在模块组内，如果命令的 CommandAttribute 特性标签中不传入名称参数，则为创建以该组名称作为命令名称的命令。 子模块 子模块是模块内的模块，可用于创建嵌套组。 [Group(\"admin\")] public class AdminModule : ModuleBase<SocketCommandContext> { [Group(\"ban\")] public class CleanModule : ModuleBase<SocketCommandContext> { // !admin ban @戈小荷 [Command] public Task BanAsync(IGuildUser user) => Context.Guild.AddBanAsync(user); // !admin ban clean @戈小荷 7 [Command(\"clean\")] public Task BanAsync(IGuildUser user, int pruneDays) => Context.Guild.AddBanAsync(user, pruneDays); // !admin ban list [Command(\"list\")] public async Task ListBansAsync() { var bans = await Context.Guild.GetBansAsync(); var banInfo = bans.Select(ban => $\"> {ban.User.Username}#{ban.User.IdentifyNumber} \" + $\"({ban.CreatedAt:yyyy'/'M'/'d HH':'mm}, {ban.Reason})\") .Aggregate((a, b) => $\"{a}\\n{b}\"); await ReplyTextAsync($\"{bans.Count} 条封禁：\\n{banInfo}\"); } } // !admin kick @戈小荷 [Command(\"kick\")] public Task KickAsync(IGuildUser user) => user.KickAsync(); }"
  },
  "guides/text_commands/namedarguments.html": {
    "href": "guides/text_commands/namedarguments.html",
    "title": "命名参数 | Kook.Net 文档",
    "keywords": "命名参数 默认情况下，命令中的参数是按照顺序逐个解析的，位置决定了参数的对应。 如果定义了多个可选参数，对于用户来说，只设置想要传入的可选参数而不全部一一写出会更加方便。 设置参数名称 要想用户能够通过指定参数名称来设置对应的参数，您需要创建一个可选参数容器类， 其中需包含了命令会用到的所有可选参数，并为其添加 NamedArgumentTypeAttribute 特性标签。 示例 [NamedArgumentType] public class NamableArguments { public string First { get; set; } public string Second { get; set; } public string Third { get; set; } public string Fourth { get; set; } } 用法 要使用这些可选参数的命令可以通过如下的方式定义： [Command(\"act\")] public async Task Act(int requiredArg, NamableArguments namedArgs) 该命令则可以按如下方式调用： .act 42 first: Hello fourth: \"A string with spaces must be wrapped in quotes\" second: World 可选参数容器类的类型解析是自动注册的，无需对该容器类创建并注册自定义类型解析。 Important 一个命令只能有用一个被 NamedArgumentTypeAttribute 特性标注的可选参数容器类，且必须位于参数列表的末位。 被该特性标注的类会在解析参数时自动应用 RemainderAttribute 特性的效果。 复杂类型 可选参数容器类中的每个属性在进行匹配时，所有注册到文本命令服务内的类型解析都会如以往正常匹配。 如果要将多个相同类型的值读入单个属性中，则可以将属性声明为形如 IEnumerable<T> 的类型。 例如：如果可选参数容器类中包含了一个这样的属性： public IEnumerable<int> Numbers { get; set; } 那么该命令可以以如下的方式调用： .cmd numbers: \"1, 2, 4, 8, 16, 32\" 补充说明 可选参数容器类中的属性也可以使用 OverrideTypeReader。"
  },
  "guides/text_commands/post-execution.html": {
    "href": "guides/text_commands/post-execution.html",
    "title": "后处理程序 | Kook.Net 文档",
    "keywords": "文本命令执行的后处理程序 在开发命令时，您可能想要在执行命令后执行一些操作，Kook.Net 提供了一些命令执行后处理工作流来实现这个目的。 文本命令框架入门 中展示了下面的示例来执行并处理命令及其内的数据： public class CommandHandler { private readonly KookSocketClient _client; private readonly CommandService _commands; // 从构造函数中获取 KookSocketClient 与 CommandService 的示例 public CommandHandler(KookSocketClient client, CommandService commands) { _commands = commands; _client = client; } public async Task InstallCommandsAsync() { // 将命令服务处理程序订阅至 MessageReceived 事件 _client.MessageReceived += HandleCommandAsync; // 通过反射查找所有命令模块并加载至命令服务 // 如不使用依赖注入，services 参数传 null // 如有需要可参考依赖注入指南 await _commands.AddModulesAsync(assembly: Assembly.GetEntryAssembly(), services: null); } private async Task HandleCommandAsync(SocketMessage messageParam) { // 过滤系统信息 var message = messageParam as SocketUserMessage; if (message == null) return; // 追踪消息前缀结束即文本命令开始的位置 int argPos = 0; // 过滤来自 Bot 的消息，过滤前缀不合命令触发规则的消息 if (!(message.HasCharPrefix('!', ref argPos) || message.HasMentionPrefix(_client.CurrentUser, ref argPos)) || message.Author.IsBot) return; // 基于此消息创建命令上下文 var context = new SocketCommandContext(_client, message); // 执行命令 await _commands.ExecuteAsync( context: context, argPos: argPos, services: null); } } 示例中，ExecuteAsync 方法的运行结果会返回一个 Task<IResult> 对象，要将结果打印到聊天中，可以采用以下的代码示例： // 此部分代码处理命令直接结果的方式不受推荐 // 请不要盲目赋值本示例的代码 IResult result = await _commands.ExecuteAsync(context, argPos, _services); if (result.Error != null) switch (result.Error) { case CommandError.BadArgCount: await context.Channel.SendTextAsync( \"Parameter count does not match any command's.\"); break; default: await context.Channel.SendTextAsync( $\"An error has occurred {result.ErrorReason}\"); break; } 然而，这种处理方式中，命令执行后处理程序被嵌入到了基本的命令执行逻辑中， 这样会导致命令执行逻辑部分的代码更混乱，且可能违反了单一职责原则（SRP），不受推荐。 另一个主要的问题是，如果命令的处理程序被 RunMode.Async 标记为异步模式运行，ExecuteAsync 将总是返回包含执行成功信息的 ExecuteResult，而非真正的执行结果。 CommandExecuted 事件 当命令执行完成时，无论其结果如何，都会触发 CommandExecuted 事件。 该事件可以简化前面示例中混乱的结构，且可以避免 RunMode.Async 模式的问题。 采用事件模式的代码示例如下： public async Task SetupAsync() { await _commands.AddModulesAsync(Assembly.GetEntryAssembly(), _services); // 订阅命令执行后处理程序 _commands.CommandExecuted += OnCommandExecutedAsync; // 订阅命令执行处理程序 _client.MessageReceived += HandleCommandAsync; } public async Task OnCommandExecutedAsync(Optional<CommandInfo> command, ICommandContext context, IResult result) { // CommandExecuted 提供三个参数：所执行的命令、命令执行上下文、命令执行结果 // 可以告知命令调用者异常信息 if (!string.IsNullOrEmpty(result?.ErrorReason)) { await context.Channel.SendTextAsync(result.ErrorReason); } // 或者可以将结果记入日志系统 var commandName = command.IsSpecified ? command.Value.Name : \"A command\"; await _log.LogAsync(new LogMessage(LogSeverity.Info, \"CommandExecution\", $\"{commandName} was executed at {DateTime.UtcNow}.\")); } public async Task HandleCommandAsync(SocketMessage msg) { var message = msg as SocketUserMessage; if (message == null) return; int argPos = 0; if (!(message.HasCharPrefix('!', ref argPos) || message.HasMentionPrefix(_client.CurrentUser, ref argPos)) || (message.Author.IsBot ?? false)) return; var context = new SocketCommandContext(_client, message); await _commands.ExecuteAsync(context, argPos, _services); } RuntimeResult 命令执行完成后可以返回 RuntimeResult 对象，RuntimeResult 是一个结果类，可以用来表示命令执行结果的逻辑。 由于 ExecuteAsync 中异步执行的命令始终无法返回错误信息，RuntimeResult 往往不应与 ExecuteResult 共同使用，而应在 CommandExecuted 事件处理程序中使用。 在实践中，您可以基于 RuntimeResult 派生自定义的结果类，以记录更多的结果信息及逻辑。 下面的示例创建了一个 RuntimeResult 的最小派生类： public class MyCustomResult : RuntimeResult { public MyCustomResult(CommandError? error, string reason) : base(error, reason) { } } 派生类中的信息及逻辑没有什么特殊的限制，您可以添加有关执行结果的任何其他信息。 例如，可能根据命令的执行结果添加更多的方法、字段或属性， 或是一些静态方法来更容易地创建该结果类。 public class MyCustomResult : RuntimeResult { public string Hint { get; set; } public MyCustomResult(CommandError? error, string reason, string hint) : base(error, reason) { Hint = hint; } public static MyCustomResult FromError(string reason, string hint = null) => new MyCustomResult(CommandError.Unsuccessful, reason, hint); public static MyCustomResult FromSuccess(string reason = null) => new MyCustomResult(null, reason); } 要想在命令执行后返回该结果类，请将方法前面的返回类型更改为 Task<RuntimeResult>。 Note 方法签名中的返回类型必须是 Task<RuntimeResult> 而不应是 Task<MyCustomResult>，后者无法被自动模块加载发现并加载。 下面的示例展示了如何使用该自定义结果类： public class MyModule : ModuleBase<SocketCommandContext> { [Command(\"eat\")] public async Task<RuntimeResult> ChooseAsync(string food) { if (food == \"salad\") return MyCustomResult.FromError(\"No, I don't want that!\", \"Give me something others!\"); return MyCustomResult.FromSuccess($\"Give me the {food}!\"). } } 进而可以在 CommandExecuted 的事件处理程序中使用该结果类： public async Task OnCommandExecutedAsync(Optional<CommandInfo> command, ICommandContext context, IResult result) { switch(result) { case MyCustomResult customResult: // 提取自定义结果类中的信息进行进一步的处理 break; default: if (!string.IsNullOrEmpty(result.ErrorReason)) await context.Channel.SendMessageAsync(result.ErrorReason); break; } } CommandService.Log 事件 CommandService.Log 事件可以记录命令执行过程中发生的异常信息, 而这些信息由于业务逻辑抛出异常而中断执行，无法被传递到正常的命令执行后处理程序中。 所有命令执行过程中发生的异常信息都会被捕获并传入 CommandException 类内的 LogMessage.Exception 属性中，CommandException 类记录了抛出的异常及命令执行的上下文。 public async Task LogAsync(LogMessage logMessage) { if (logMessage.Exception is CommandException cmdException) { // 可以告知命令调用者所发生的异常 await cmdException.Context.Channel.SendMessageAsync(\"Something went catastrophically wrong!\"); // 也可以将此异常记入日志系统 Console.WriteLine($\"{cmdException.Context.User} failed to execute '{cmdException.Command.Name}' in {cmdException.Context.Channel}.\"); Console.WriteLine(cmdException.ToString()); } }"
  },
  "guides/text_commands/preconditions.html": {
    "href": "guides/text_commands/preconditions.html",
    "title": "先决条件 | Kook.Net 文档",
    "keywords": "先决条件 先决条件可以被用作为命令服务中的权限系统，但其能力也不仅限于权限， 您也可以通过创建自定义先决条件实现更复杂的先决条件逻辑。 有两种可供使用的先决条件： PreconditionAttribute 可以被应用于模块、组、命令上 ParameterPreconditionAttribute 可以被应用于参数上 有关这两种先决条件的详细信息，请参阅各自的 API 文档。 内置的先决条件 Kook.Commands 提供了几个内置的先决条件。 RequireContextAttribute RequireUserAttribute RequireRoleAttribute RequireBotPermissionAttribute RequireUserPermissionAttribute 用法 要使用先决条件，只需将先决条件特性标记于命令的方法签名上。 示例 [RequireBotPermission(ChannelPermission.SendMessages)] [Command(\"echo\")] public Task EchoAsync(string input) => ReplyTextAsync(input); 先决条件的析取 命令的先决条件可以存在多个，如果想要其中的部分先决条件满足任一即可被是作为先决条件校验通过， 则需要为先决条件进行分组来表示先决条件的析取。 PreconditionAttribute 提供了一个可选的 Group 属性，如果为两个或多个先决条件制定了相同的 Group 属性，则命令系统在进行先决条件检查时，这些条件中的任何一个满足时，分组内的其他先决条件都将被忽略。 示例 // 该示例展示了先决条件的析取的声明方式 // 将 RequireUserPermission 与 RequireUser 中的 Group 属性都设置为 \"Permission\" // 则该命令调用者在当前服务器内拥有管理员权限或其用户 ID 为 2810246202 时都可以通过先决条件检查 [RequireUserPermission(GuildPermission.Administrator, Group = \"Permission\")] [RequireUser(2810246202, Group = \"Permission\")] public class AdminModule : ModuleBase<SocketCommandContext> { [Command(\"ban\")] public Task BanAsync(IUser user) => Context.Guild.AddBanAsync(user); } 自定义先决条件 要创建自定义先决条件，请根据用途创建一个继承自 PreconditionAttribute 或 ParameterPreconditionAttribute 的类。 要实现函数上的先决条件，请重写 CheckPermissionsAsync 方法。 如果命令调用上下文满足条件，则返回 PreconditionResult.FromSuccess 创建的对象，否则，请返回 PreconditionResult.FromError 创建的对象，如有需要，请在返回的对象中添加错误消息。 Note Visual Studio、JetBrains Rider 等集成开发环境中的 IntelliSense 智能提示可以帮助您添加抽象类的实现中缺失的成员。 示例 using System; using System.Linq; using System.Threading.Tasks; using Kook.Commands; using Kook.WebSocket; // 继承自 PreconditionAttribute public class RequireTimeAttribute : PreconditionAttribute { // 创建字段存储指定的时间范围 private readonly TimeOnly _from; private readonly TimeOnly _to; // 创建构造函数，用来在使用时接收时间范围作为参数 public RequireTimeAttribute(TimeOnly from, TimeOnly to) { _from = from; _to = to; } // 重写 CheckPermissions 方法 public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) { // 检查当前时间是否在指定的时间范围内 if ((_from < _to && TimeOnly.FromDateTime(DateTime.Now) >= _from && TimeOnly.FromDateTime(DateTime.Now) <= _to) || (_from > _to && (TimeOnly.FromDateTime(DateTime.Now) >= _from || TimeOnly.FromDateTime(DateTime.Now) <= _to))) // 如果在指定时间范围内，则返回成功 // 由于方法内没有异步代码，要返回的结果需要包装在 `Task.FromResult` 中来避免编译错误 return Task.FromResult(PreconditionResult.FromSuccess()); // 如果不在指定时间范围内，则返回失败及错误信息 return Task.FromResult(PreconditionResult.FromError($\"You can only run this command between {_from} and {_to}\")); } }"
  },
  "guides/text_commands/typereaders.html": {
    "href": "guides/text_commands/typereaders.html",
    "title": "类型解析 | Kook.Net 文档",
    "keywords": "类型解析 通过类型解析，命令中传入的各种参数可以被自动转换为各种类型。 默认支持的类型解析包括： bool char sbyte/byte ushort/short uint/int ulong/long float, double, decimal string enum DateTime/DateTimeOffset/TimeSpan 任何可空的值类型 (例如：int?, bool?) 任何 IChannel/IMessage/IUser/IRole 的实现类 自定义类型解析 要自定义类型解析，可以创建一个类，引入 Kook 和 Kook.Commands 命名空间，继承 @Kook.Commands.TypeReader，并重写 ReadAsync 方法， 该方法内为将输入的字符串解析为指定类型的逻辑。 如果类型解析成功，请将解析结果传入 TypeReaderResult.FromSuccess 返回； 如果类型解析失败，请将错误信息传入 TypeReaderResult.FromError 返回。 Note Visual Studio、JetBrains Rider 等集成开发环境中的 IntelliSense 智能提示可以帮助您添加抽象类的实现中缺失的成员。 示例 // 本类库已对多数基本类型的类型解析进行了实现 // 本示例仅用来展示如何创建一个简单的自定义类型解析 using Kook; using Kook.Commands; public class BooleanTypeReader : TypeReader { public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) { bool result; if (bool.TryParse(input, out result)) return Task.FromResult(TypeReaderResult.FromSuccess(result)); return Task.FromResult(TypeReaderResult.FromError(CommandError.ParseFailed, \"Input could not be parsed as a boolean.\")); } } 注册自定义类型解析 自定义类型解析无法被文本命令服务自动发现，需要显式注册。 要添加自定义类型解析，请调用 CommandService.AddTypeReader 方法。 Important 自定义类型解析注册需要在模块发现前进行，否则自定义类型接解析无法正常工作。 示例 public class CommandHandler { private readonly CommandService _commands; private readonly KookSocketClient _client; private readonly IServiceProvider _services; public CommandHandler(CommandService commands, KookSocketClient client, IServiceProvider services) { _commands = commands; _client = client; _services = services; } public async Task SetupAsync() { _client.MessageReceived += CommandHandleAsync; // 添加 BooleanTypeReader 来解析 `bool` 类型的参数 _commands.AddTypeReader(typeof(bool), new BooleanTypeReader()); // 注册模块 await _commands.AddModulesAsync(Assembly.GetEntryAssembly(), _services); } public async Task CommandHandleAsync(SocketMessage msg) { // ... } }"
  },
  "guides/voice/sending-voice.html": {
    "href": "guides/voice/sending-voice.html",
    "title": "语音推流 | Kook.Net 文档",
    "keywords": "安装 语音推流需要 Opus 编码器的支持，要使用语音功能，请将 opus 原生库放在 Bot 运行目录内。 .NET Framework 中，请将该原生库放在编译或发布的输出目录中，例如 bin/Debug；.NET (Core) 中，该目录应为 csporj 文件所在目录。 Windows 开发者可以在此处 下载预编译的二进制文件。 Linux 开发者需要从源码编译 Opus，或通过包管理器进行安装。 加入语音频道 语音推流前需要先加入语音频道，调用 IAudioChannel 上的 ConnectAsync，该异步操作会返回一个 IAudioClient 对象，用于后续的语音推流操作。 // The command's Run Mode MUST be set to RunMode.Async, otherwise, being connected to a voice channel will block the gateway thread. [Command(\"join\", RunMode = RunMode.Async)] public async Task JoinChannel(IVoiceChannel channel = null) { // Get the audio channel channel ??= (Context.User as IGuildUser)?.VoiceChannel; // If you need to ensure the user's connected voice channel via Rest // if (Context.User is IGuildUser guildUser) // channel ??= (await guildUser.GetConnectedVoiceChannelsAsync()).FirstOrDefault(); if (channel == null) { await Context.Channel.SendTextAsync(\"User must be in a voice channel, or a voice channel must be passed as an argument.\"); return; } // For the next step with transmitting audio, you would want to pass this Audio Client in to a service. _audioClient = await channel.ConnectAsync(); } Warning 改变语音状态的命令，例如加入或离开音频频道、推流时，应该使用 RunMode.Async，这可以防止在客户端的默认配置中产生死锁的反馈循环。 如果你能确保你的命令在与网关任务不同的任务中运行，那么也可以不需要 RunMode.Async。 加入语音频道后，客户端将保持与此频道的连接，直到被踢出频道、掉线、或其它被服务端通知需主动断开连接。 应注意的是，语音连接是基于每个语音频道创建的，对多个语音频道分别调用 ConnectAsync，会创建多个 IAudioClient 的实例。 语音推流 通过 FFmpeg 转码 FFmpeg 是一个开源的、高度多功能的音视频混合工具。这是传输音频前进行转码的推荐方式。 在这之前，你需要安装 FFmpeg CLI，通常的做法是下载一个 FFmpeg 的版本，并将其放置在你的环境变量的 PATH 中（或者与 Bot 在同一位置，与 opus 在同一位置），参见 FFmpeg 的下载页面，或使用操作系统相应的包管理器。 首先，创建一个启动 FFmpeg 的 Process 进程对象，来将输入音频以 PCM 方式转码为 48kHz 采样率的字节流。 using Process ffmpeg = Process.Start(new ProcessStartInfo { FileName = \"ffmpeg\", Arguments = $\"\"\"-hide_banner -loglevel panic -i \"{source}\" -ac 2 -f s16le -ar 48000 pipe:1\"\"\", UseShellExecute = false, RedirectStandardOutput = true, }); 该 ffmpeg 命令的参数中： -hide_banner：用于隐藏启动时的版权和版本信息。 -loglevel panic：设置日志级别为 panic，只有最严重的错误才会被记录。 -i {source}：指定输入文件或流，{source} 是输入的变量，表示具体的文件路径或网络地址。 -ac 2：设置音频通道数量为 2，即立体声。 -f s16le：设置输出格式为 16 位有符号小端（Signed 16-bit Little-Endian）PCM（脉冲编码调制）音频。 -ar 48000：设置音频采样率为 48kHz。 pipe:1：将输出重定向到标准输出，以便在接下来的操作中由程序读取。 由 Kook.Net 进行编码推流 接下来，要向 KOOK 传输音频，需要由 IAudioClient 创建一个 AudioOutStream，由于 ffmpeg 命令输出了 PCM 音频，因此使用 IAudioClient.CreatePcmStream。 最后，音频需要从 FFmpeg 的标准输出流传输到你的 AudioOutStream 对象中。 根据你的业务需要，这个步骤中间可能会进行某些处理，但在大多数情况下，使用 Stream.CopyToAsync 即可。 如果你正在实现一个点歌机，你可能会希望等待音频停止播放后再继续播放下一首歌，等待 AudioOutStream.FlushAsync 可以等待音频客户端的内部缓冲区清空。 await using var output = ffmpeg.StandardOutput.BaseStream; await using var kook = _audioClient.CreatePcmStream(AudioApplication.Voice); try { await output.CopyToAsync(kook, cancellationToken); } finally { await kook.FlushAsync(cancellationToken); }"
  },
  "index.html": {
    "href": "index.html",
    "title": "首页 | Kook.Net 文档",
    "keywords": "本文档是 Kook.Net 的官方文档，包含了 Kook.Net 的使用指南、API 文档以及其他相关信息。文档的源码托管在 GitHub 上，欢迎您为文档做出贡献。 什么是 Kook.Net？ Kook.Net 是一个对 KOOK（原开黑啦）API 进行功能封装的类库，以 C# 编写，编译所采用的目标框架包括 .NET 8.0 .NET 7.0 .NET 6.0 .NET Standard 2.1 .NET Standard 2.0 .NET Framework 4.6.2 Tip 除 .NET 8.0 外的其他目标框架未经完全测试。 我应该从哪里开始？ 如果您是初次使用 Kook.Net，请参考 用户指南。 如果您熟悉 KOOK 开发者文档，想快速了解如何在 Kook.Net 中访问这些接口与事件，请参考 快速参考指南。 如果您想浏览完整的 Kook.Net API，请参考 API 文档。 寻求帮助？ 如果您在开发中遇到无法解决的问题，请访问我们的 KOOK Kook.Net 社区 寻求帮助。"
  },
  "quick_reference/event/channel.html": {
    "href": "quick_reference/event/channel.html",
    "title": "频道相关事件 | Kook.Net 文档",
    "keywords": "频道相关事件 预声明变量 readonly KookSocketClient _client = null; 频道内用户添加 reaction _client.ReactionAdded += (message, channel, user, reaction) => Task.CompletedTask; 频道内用户取消 reaction _client.ReactionRemoved += (message, channel, user, reaction) => Task.CompletedTask; 频道消息更新 _client.MessageUpdated += (before, after, channel) => Task.CompletedTask; 频道消息被删除 _client.MessageDeleted += (message, channel) => Task.CompletedTask; 新增频道 _client.ChannelCreated += channel => Task.CompletedTask; 修改频道信息 _client.ChannelUpdated += (before, after) => Task.CompletedTask; 删除频道 _client.ChannelDestroyed += channel => Task.CompletedTask; 新的频道置顶消息 _client.MessagePinned += (before, after, channel, @operator) => Task.CompletedTask; 取消频道置顶消息 _client.MessageUnpinned += (before, after, channel, @operator) => Task.CompletedTask;"
  },
  "quick_reference/event/direct-message.html": {
    "href": "quick_reference/event/direct-message.html",
    "title": "私聊消息事件 | Kook.Net 文档",
    "keywords": "私聊消息事件 预声明变量 readonly KookSocketClient _client = null; 私聊消息更新 _client.DirectMessageUpdated += (before, after, author, channel) => Task.CompletedTask; 私聊消息被删除 _client.DirectMessageDeleted += (message, author, channel) => Task.CompletedTask; 私聊内用户添加 reaction _client.DirectReactionAdded += (message, channel, user, reaction) => Task.CompletedTask; 私聊内用户取消 reaction _client.DirectReactionRemoved += (message, channel, user, reaction) => Task.CompletedTask;"
  },
  "quick_reference/event/guild-member.html": {
    "href": "quick_reference/event/guild-member.html",
    "title": "服务器成员相关事件 | Kook.Net 文档",
    "keywords": "服务器成员相关事件 预声明变量 readonly KookSocketClient _client = null; 新成员加入服务器 _client.UserJoined += (user, time) => Task.CompletedTask; 服务器成员退出 _client.UserLeft += (guild, user, time) => Task.CompletedTask; 服务器成员信息更新 _client.GuildMemberUpdated += (before, after) => Task.CompletedTask; 服务器成员上线 _client.GuildMemberOnline += (users, time) => Task.CompletedTask; 服务器成员下线 _client.GuildMemberOffline += (users, time) => Task.CompletedTask;"
  },
  "quick_reference/event/guild-role.html": {
    "href": "quick_reference/event/guild-role.html",
    "title": "服务器角色相关事件 | Kook.Net 文档",
    "keywords": "服务器角色相关事件 预声明变量 readonly KookSocketClient _client = null; 服务器角色增加 _client.RoleCreated += role => Task.CompletedTask; 服务器角色删除 _client.RoleDeleted += role => Task.CompletedTask; 服务器角色更新 _client.RoleUpdated += (before, after) => Task.CompletedTask;"
  },
  "quick_reference/event/guild.html": {
    "href": "quick_reference/event/guild.html",
    "title": "服务器相关事件 | Kook.Net 文档",
    "keywords": "服务器相关事件 预声明变量 readonly KookSocketClient _client = null; 服务器信息更新 _client.GuildUpdated += (before, after) => Task.CompletedTask; 服务器删除 视同 自己退出服务器 _client.LeftGuild += guild => Task.CompletedTask; 服务器封禁用户 _client.UserBanned += (users, @operator, guild, reason) => Task.CompletedTask; 服务器取消封禁用户 _client.UserUnbanned += (users, @operator, guild) => Task.CompletedTask; 服务器添加新表情 _client.EmoteCreated += (emote, guild) => Task.CompletedTask; 服务器删除表情 _client.EmoteDeleted += (emote, guild) => Task.CompletedTask; 服务器更新表情 _client.EmoteUpdated += (before, after, guild) => Task.CompletedTask;"
  },
  "quick_reference/event/message.html": {
    "href": "quick_reference/event/message.html",
    "title": "消息相关事件列表 | Kook.Net 文档",
    "keywords": "消息相关事件列表 预声明变量 readonly KookSocketClient _client = null; 本页结构与 KOOK 文档不完全一致，如需浏览 KOOK 文档，请参考： https://developer.kookapp.cn/doc/event/message 接收服务器频道消息 _client.MessageReceived += (message, user, channel) => Task.CompletedTask; 接收私聊消息 _client.DirectMessageReceived += (message, author, channel) => Task.CompletedTask;"
  },
  "quick_reference/event/user.html": {
    "href": "quick_reference/event/user.html",
    "title": "用户相关事件列表 | Kook.Net 文档",
    "keywords": "用户相关事件列表 预声明变量 readonly KookSocketClient _client = null; 用户加入语音频道 _client.UserConnected += (user, channel, time) => Task.CompletedTask; 用户退出语音频道 _client.UserDisconnected += (user, channel, time) => Task.CompletedTask; 用户信息更新 _client.UserUpdated += (before, after) => Task.CompletedTask; _client.CurrentUserUpdated += (before, after) => Task.CompletedTask; 自己新加入服务器 _client.JoinedGuild += guild => Task.CompletedTask; 自己退出服务器 _client.LeftGuild += guild => Task.CompletedTask; Card 消息中的 Button 点击事件 _client.MessageButtonClicked += (value, user, message, channel) => Task.CompletedTask; _client.DirectMessageButtonClicked += (value, user, message, channel) => Task.CompletedTask;"
  },
  "quick_reference/http_api/asset.html": {
    "href": "quick_reference/http_api/asset.html",
    "title": "媒体接口 | Kook.Net 文档",
    "keywords": "媒体接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; 上传文件/图片 POST /api/v3/asset/create Stream stream = null; // 文件流 string path = null; // 文件路径 string filename = null; // 文件名 // API 请求 string assertUri = await _socketClient.Rest.CreateAssetAsync(stream, filename); string assertUri = await _socketClient.Rest.CreateAssetAsync(path, filename); string assertUri = await _restClient.CreateAssetAsync(stream, filename); string assertUri = await _restClient.CreateAssetAsync(path, filename);"
  },
  "quick_reference/http_api/badge.html": {
    "href": "quick_reference/http_api/badge.html",
    "title": "Badge 相关接口 | Kook.Net 文档",
    "keywords": "Badge 相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; IGuild guild = null; 获取服务器 Badge GET /api/v3/badge/guild BadgeStyle style = default; // 样式 // API 请求 Stream badge = await guild.GetBadgeAsync(style);"
  },
  "quick_reference/http_api/blacklist.html": {
    "href": "quick_reference/http_api/blacklist.html",
    "title": "黑名单相关接口 | Kook.Net 文档",
    "keywords": "黑名单相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketGuild socketGuild = null; RestGuild restGuild = null; IGuild guild = null; 获取黑名单列表 GET /api/v3/blacklist/list IUser user = null; // 用户 ulong userId = default; // 用户 ID // API 请求 IReadOnlyCollection<RestBan> restBansFromSocket = await socketGuild.GetBansAsync(); IReadOnlyCollection<RestBan> restBansFromRest = await restGuild.GetBansAsync(); IReadOnlyCollection<IBan> bans = await guild.GetBansAsync(); // API 请求，获取指定用户的封禁信息 IReadOnlyCollection<IBan> bans = await guild.GetBansAsync(); RestBan ban = await socketGuild.GetBanAsync(user); RestBan ban = await socketGuild.GetBanAsync(userId); RestBan ban = await restGuild.GetBanAsync(user); RestBan ban = await restGuild.GetBanAsync(userId); IBan ban = await guild.GetBanAsync(user); IBan ban = await guild.GetBanAsync(userId); 加入黑名单 POST /api/v3/blacklist/create IUser user = null; // 用户 ulong userId = default; // 用户 ID int pruneDays = default; // 清理消息天数 string reason = null; // 理由 // API 请求 await guild.AddBanAsync(user, pruneDays, reason); await guild.AddBanAsync(userId, pruneDays, reason); 移除黑名单 POST /api/v3/blacklist/delete IUser user = null; // 用户 ulong userId = default; // 用户 ID // API 请求 await guild.RemoveBanAsync(user); await guild.RemoveBanAsync(userId);"
  },
  "quick_reference/http_api/channel-user.html": {
    "href": "quick_reference/http_api/channel-user.html",
    "title": "频道用户相关接口 | Kook.Net 文档",
    "keywords": "频道用户相关 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; 根据用户 ID 和服务器 ID 获取用户所在语音频道 GET /api/v3/channel-user/get-joined-channel SocketGuildUser socketGuildUser = null; IGuildUser guildUser = null; // 要支持获取程序连接至 KOOK 网关前加入的语音频道信息，请设置 AlwaysDownloadVoiceStates = true // 缓存获取用户所在语音频道 SocketVoiceChannel socketVoiceChannel = socketGuildUser.VoiceChannel; // API 请求 IVoiceChannel voiceChannel = (await guildUser.GetConnectedVoiceChannelsAsync()).FirstOrDefault();"
  },
  "quick_reference/http_api/channel.html": {
    "href": "quick_reference/http_api/channel.html",
    "title": "频道相关接口 | Kook.Net 文档",
    "keywords": "频道相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketGuild socketGuild = null; SocketVoiceChannel socketVoiceChannel = null; SocketCategoryChannel socketCategoryChannel = null; RestGuild restGuild = null; IGuild guild = null; IGuildUser guildUser = null; IGuildChannel guildChannel = null; ITextChannel textChannel = null; IVoiceChannel voiceChannel = null; INestedChannel nestedChannel = null; ICategoryChannel categoryChannel = null; 获取频道列表 GET /api/v3/channel/list // 缓存获取指定服务器的全部频道 IReadOnlyCollection<SocketGuildChannel> socketGuildChannels = socketGuild.Channels; IReadOnlyCollection<RestGuildChannel> restGuildChannels = restGuild.Channels; // 缓存获取指定服务器的全部文字频道 IReadOnlyCollection<SocketTextChannel> socketTextChannels = socketGuild.TextChannels; IReadOnlyCollection<RestTextChannel> restTextChannels = restGuild.TextChannels; // 缓存获取指定服务器的全部语音频道 IReadOnlyCollection<SocketVoiceChannel> socketVoiceChannels = socketGuild.VoiceChannels; IReadOnlyCollection<RestVoiceChannel> restVoiceChannels = restGuild.VoiceChannels; // 缓存获取指定服务器的全部分组频道 IReadOnlyCollection<SocketCategoryChannel> socketCategoryChannels = socketGuild.CategoryChannels; IReadOnlyCollection<RestCategoryChannel> restCategoryChannels = restGuild.CategoryChannels; // 缓存获取指定服务器分组频道下的全部频道 IReadOnlyCollection<SocketGuildChannel> socketChannelsInCategory = socketCategoryChannel.Channels; // API 请求 IReadOnlyCollection<RestGuildChannel> restGuildChannels = await restGuild.GetChannelsAsync(); IReadOnlyCollection<RestTextChannel> restTextChannels = await restGuild.GetTextChannelsAsync(); IReadOnlyCollection<RestVoiceChannel> restVoiceChannels = await restGuild.GetVoiceChannelsAsync(); IReadOnlyCollection<RestCategoryChannel> restCategoryChannels = await restGuild.GetCategoryChannelsAsync(); // 如果 IGuild 对象是 SocketGuild，则直接返回缓存的频道列表，否则会发起 API 请求获取全部频道信息 IReadOnlyCollection<IGuildChannel> guildChannels = await guild.GetChannelsAsync(); IReadOnlyCollection<ITextChannel> textChannels = await guild.GetTextChannelAsyncs(); IReadOnlyCollection<IVoiceChannel> voiceChannels = await guild.GetVoiceChannelAsyncs(); IReadOnlyCollection<ICategoryChannel> categoryChannels = await guild.GetCategoryChannelAsyncs(); 获取频道详情 GET /api/v3/channel/view ulong channelId = default; // 频道 ID // 缓存获取指定的服务器频道 SocketChannel socketChannel = _socketClient.GetChannel(channelId); SocketChannel socketChannel = socketGuild.GetChannel(channelId); RestGuildChannel restGuildChannel = restGuild.Channels.FirstOrDefault(x => x.Id == channelId); // 缓存获取指定的服务器文字频道 SocketTextChannel socketTextChannel = socketGuild.GetTextChannel(channelId); RestTextChannel restTextChannel = restGuild.TextChannels.FirstOrDefault(x => x.Id == channelId); // 缓存获取指定的服务器语音频道 SocketVoiceChannel socketVoiceChannel = socketGuild.GetVoiceChannel(channelId); RestVoiceChannel restVoiceChannel = restGuild.VoiceChannels.FirstOrDefault(x => x.Id == channelId); // 缓存获取指定的服务器分组频道 SocketCategoryChannel socketCategoryChannel = socketGuild.GetCategoryChannel(channelId); RestCategoryChannel restCategoryChannel = restGuild.CategoryChannels.FirstOrDefault(x => x.Id == channelId); // API 请求 RestChannel restChannel = await _restClient.GetChannelAsync(channelId); RestGuildChannel restGuildChannel = await restGuild.GetChannelAsync(channelId); RestTextChannel restTestChannel = await restGuild.GetTextChannelAsync(channelId); RestVoiceChannel restVoiceChannel = await restGuild.GetVoiceChannelAsync(channelId); RestCategoryChannel restCategoryChannel = await restGuild.GetCategoryChannelAsync(channelId); // 如果 IGuild 对象是 SocketGuild，则直接返回缓存的频道，否则会发起 API 请求获取指定的频道信息 IChannel channel = await _socketClient.GetChannelAsync(channelId); IGuildChannel guildChannel = await guild.GetChannelAsync(channelId); ITextChannel textChannel = await guild.GetTextChannelAsync(channelId); IVoiceChannel voiceChannel = await guild.GetVoiceChannelAsync(channelId); ICategoryChannel categoryChannel = await guild.GetCategoryChannelAsync(channelId); 创建频道 POST /api/v3/channel/create string name = null; // 频道名称 ulong categoryChannelId = default; // 分组频道 ID string topic = null; // 文字频道主题 int userLimit = default; // 语音频道用户数上限 VoiceQuality voiceQuality = default; // 语音频道语音质量 // API 请求，创建文字频道 ITextChannel textChannel = await guild.CreateTextChannelAsync(name); ITextChannel textChannel = await guild.CreateTextChannelAsync(name, x => { x.CategoryId = categoryChannelId; x.Topic = topic; }); // API 请求，创建语音频道 IVoiceChannel voiceChannel = await guild.CreateVoiceChannelAsync(name); IVoiceChannel voiceChannel = await guild.CreateVoiceChannelAsync(name, x => { x.CategoryId = categoryChannelId; x.UserLimit = userLimit; x.VoiceQuality = voiceQuality; }); // API 请求，创建分组频道 ICategoryChannel categoryChannel = await guild.CreateCategoryChannelAsync(name); 编辑频道 POST /api/v3/channel/update string name = null; // 频道名称 ulong categoryChannelId = default; // 分组频道 ID int position = default; // 频道排序位置 string topic = null; // 文字频道主题 SlowModeInterval slowModeInterval = default; // 文字频道慢速模式间隔 int userLimit = default; // 语音频道用户数上限 VoiceQuality voiceQuality = default; // 语音频道语音质量 string password = null; // 语音频道密码 // API 请求，修改频道 guildChannel.ModifyAsync(x => { x.Name = name; x.CategoryId = categoryChannelId; x.Position = position; }); // API 请求，修改文字频道 textChannel.ModifyAsync(x => { x.Name = name; x.CategoryId = categoryChannelId; x.Position = position; x.Topic = topic; x.SlowModeInterval = slowModeInterval; }); // API 请求，修改语音频道 voiceChannel.ModifyAsync(x => { x.Name = name; x.CategoryId = categoryChannelId; x.Position = position; x.VoiceQuality = voiceQuality; x.UserLimit = userLimit; x.Password = password; }); // API 请求，修改分组频道 categoryChannel.ModifyAsync(x => { x.Name = name; x.CategoryId = categoryChannelId; x.Position = position; }); 删除频道 POST /api/v3/channel/delete // API 请求 await guildChannel.DeleteAsync(); 语音频道用户列表 GET /api/v3/channel/user-list // 要在启动时缓存语音状态信息，请设置 AlwaysDownloadVoiceStates = true // 主动更新所有服务器语音状态信息缓存 await _socketClient.DownloadVoiceStatesAsync(); // 缓存获取 IReadOnlyCollection<SocketGuildUser> connectedGuildUsers = socketVoiceChannel.ConnectedUsers; // API 请求 IReadOnlyCollection<IUser> connectedUsers = await voiceChannel.GetConnectedUsersAsync(); 语音频道之间移动用户 POST /api/v3/channel/move-user // 要移动的服务器用户列表 IEnumerable<IGuildUser> guildUsers = null; // API 请求 await guild.MoveUsersAsync(guildUsers, voiceChannel); 获取频道角色权限详情 GET /api/v3/channel-role/index IRole role = null; // 要获取在该频道的权限覆盖配置的角色 IUser user = null; // 要获取在该频道的权限覆盖配置的用户 // 缓存获取频道的角色或用户权限覆盖配置 IReadOnlyCollection<RolePermissionOverwrite> rolePermissionOverwrites = guildChannel.RolePermissionOverwrites; IReadOnlyCollection<UserPermissionOverwrite> userPermissionOverwrites = guildChannel.UserPermissionOverwrites; // 缓存获取频道的指定角色或用户的权限覆盖配置 OverwritePermissions? rolePermissionOverwrite = guildChannel.GetPermissionOverwrite(role); OverwritePermissions? userPermissionOverwrite = guildChannel.GetPermissionOverwrite(user); 创建频道角色权限 POST /api/v3/channel-role/create IRole role = null; // 要在该频道创建权限覆盖配置的角色 IGuildUser guildUser = null; // 要在该频道创建权限覆盖配置的服务器用户 // API 请求 await guildChannel.AddPermissionOverwriteAsync(role); await guildChannel.AddPermissionOverwriteAsync(guildUser); 更新频道角色权限 POST /api/v3/channel-role/update IRole role = null; // 要在该频道修改权限覆盖配置的角色 IGuildUser guildUser = null; // 要在该频道修改权限覆盖配置的服务器用户 // API 请求 await guildChannel.ModifyPermissionOverwriteAsync(role, x => x.Modify()); await guildChannel.ModifyPermissionOverwriteAsync(role, x => x.Modify()); 同步频道角色权限 POST /api/v3/channel-role/sync // API 请求 await nestedChannel.SyncPermissionsAsync(); 删除频道角色权限 POST /api/v3/channel-role/delete // API 请求 await guildChannel.RemovePermissionOverwriteAsync(role); await guildChannel.RemovePermissionOverwriteAsync(guildUser);"
  },
  "quick_reference/http_api/direct-message.html": {
    "href": "quick_reference/http_api/direct-message.html",
    "title": "用户私聊消息接口 | Kook.Net 文档",
    "keywords": "用户私聊消息接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketDMChannel socketDmChannel = null; RestDMChannel restDmChannel = null; IDMChannel dmChannel = null; IUserMessage userMessage = null; 获取私信聊天消息列表 GET /api/v3/direct-message/list IMessage referenceMessage = null; // 获取消息列表所根据的参考消息位置的 Guid referenceMessageId = default; // 获取消息列表所根据的参考消息位置的 ID Direction direction = default; // 获取消息列表的方向 int limit = default; // 获取消息列表的数量 // 要缓存文字频道聊天消息，请设置 MessageCacheSize 的值 // 缓存获取文字频道的聊天消息列表 IReadOnlyCollection<SocketMessage> cachedMessages = socketDmChannel.CachedMessages; IReadOnlyCollection<SocketMessage> conditionalCachedMessages = socketDmChannel.GetCachedMessages(referenceMessage, direction, limit); IReadOnlyCollection<SocketMessage> conditionalCachedMessagesById = socketDmChannel.GetCachedMessages(referenceMessageId, direction, limit); // API 请求 IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessages = socketDmChannel.GetMessagesAsync(referenceMessage, direction, limit); IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessagesById = socketDmChannel.GetMessagesAsync(referenceMessageId, direction, limit); IAsyncEnumerable<IReadOnlyCollection<RestMessage>> pagedRestMessages = restDmChannel.GetMessagesAsync(referenceMessage, direction, limit); IAsyncEnumerable<IReadOnlyCollection<RestMessage>> pagedRestMessagesById = restDmChannel.GetMessagesAsync(referenceMessageId, direction, limit); // 在 ITextChannel 上进行调用 IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessages = dmChannel.GetMessagesAsync(referenceMessage, direction, limit); IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessagesById = dmChannel.GetMessagesAsync(referenceMessageId, direction, limit); 获取私信聊天会话详情 POST /api/v3/user-chat/view // 要缓存文字频道聊天消息，请设置 MessageCacheSize 的值 // 缓存获取文字频道的聊天消息详情 SocketMessage cachedMessage = socketDmChannel.GetCachedMessage(messageId); // 调用异步方法获取消息详情，在缓存中包含指定的消息对象的情况下，直接返回缓存的消息对象，否则会发起 API 请求获取消息对象 IMessage messageAsync = await socketDmChannel.GetMessageAsync(messageId); // API 请求 IMessage message = await restDmChannel.GetMessageAsync(messageId); // 在 IDMChannel 上进行调用 IMessage message = await dmChannel.GetMessageAsync(messageId); 发送私信聊天消息 POST /api/v3/direct-message/create string text = null; // 要发送的文字消息 IQuote quote = null; // 被引用的消息 string filePath = null; // 要发送的文件的路径 string fileName = null; // 要发送的文件的名称 AttachmentType fileType = default; // 要发送的文件的类型 Stream stream = null; // 要发送的文件的流 FileAttachment attachment = default; // 要发送的文件的附件 ICard card = null; // 要发送的卡片 IEnumerable<ICard> cards = null; // 要发送的卡片列表 // API 请求，发送文本消息 Cacheable<IUserMessage,Guid> textMessage = await dmChannel.SendTextAsync(text, quote); // API 请求，发送文件消息 Cacheable<IUserMessage,Guid> fileMessageFromPath = await dmChannel.SendFileAsync(filePath, fileName, fileType, quote); Cacheable<IUserMessage,Guid> fileMessageFromStream = await dmChannel.SendFileAsync(stream, fileName, fileType, quote); Cacheable<IUserMessage,Guid> fileMessageFromAttachment = await dmChannel.SendFileAsync(attachment, quote); // API 请求，发送单卡片消息 Cacheable<IUserMessage,Guid> cardMessage = await dmChannel.SendCardAsync(card, quote); // API 请求，发送多卡片消息 Cacheable<IUserMessage,Guid> cardsMessage = await dmChannel.SendCardsAsync(cards, quote); 更新私信聊天消息 POST /api/v3/direct-message/update string content = null; // 要更新的消息的文本 IEnumerable<ICard> cards = null; // 要更新的消息的卡片 IQuote quote = null; // 要更新的消息的引用 // API 请求 await userMessage.ModifyAsync(x => { x.Content = content; x.Cards = cards; x.Quote = quote; // 要清除引用，请设置为 Quote.Empty }); 删除私信聊天消息 POST /api/v3/direct-message/delete // API 请求 await userMessage.DeleteAsync(); 获取频道消息某回应的用户列表 GET /api/v3/direct-message/reaction-list IEmote emoji = null; // 要获取用户列表的回应的表情 // 缓存获取消息的回应概要，但不包含用户列表 IReadOnlyDictionary<IEmote,ReactionMetadata> cachedReactions = socketUserMessage.Reactions; // API 请求 IReadOnlyCollection<IUser> reactionUsers = await userMessage.GetReactionUsersAsync(emoji); 给某个消息添加回应 POST /api/v3/direct-message/add-reaction 有关如何构造 Emoji，请参考 表情符号。 IEmote emoji = null; // 要添加的回应的表情 IEnumerable<IEmote> emojis = null; // 要添加的回应的表情列表 // API 请求 await userMessage.AddReactionAsync(emoji); await userMessage.AddReactionsAsync(emojis); 删除消息的某个回应 POST /api/v3/direct-message/delete-reaction IEmote emoji = null; IEnumerable<IEmote> emojis = null; IUser user = null; // API 请求 await userMessage.RemoveReactionAsync(emoji, user); await userMessage.RemoveReactionsAsync(user, emojis);"
  },
  "quick_reference/http_api/friend.html": {
    "href": "quick_reference/http_api/friend.html",
    "title": "好友相关接口 | Kook.Net 文档",
    "keywords": "好友相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; IUser user = null; 好友列表 GET /api/v3/friend // API 请求，获取好友列表 IReadOnlyCollection<RestUser> friends = await _restClient.GetFriendsAsync(); // API 请求，获取好友请求列表 IReadOnlyCollection<RestFriendRequest> friendRequests = await _restClient.GetFriendRequestsAsync(); // API 请求，获取屏蔽用户列表 IReadOnlyCollection<RestUser> blockedUsers = await _restClient.GetBlockedUsersAsync(); 好友申请 POST /api/v3/friend/request // API 请求 await user.RequestFriendAsync(); 处理好友申请 POST /api/v3/friend/handle-request // 好友申请 RestFriendRequest friendRequest = null; // API 请求，接受好友申请 await friendRequest.AcceptAsync(); // API 请求，拒绝好友申请 await friendRequest.DeclineAsync(); 删除好友 POST /api/v3/friend/delete // API 请求 await user.RemoveFriendAsync(); 屏蔽用户 POST /api/v3/friend/block // API 请求 await user.BlockAsync(); 取消屏蔽用户 POST /api/v3/friend/unblock // API 请求 await user.UnblockAsync();"
  },
  "quick_reference/http_api/game.html": {
    "href": "quick_reference/http_api/game.html",
    "title": "用户动态相关接口 | Kook.Net 文档",
    "keywords": "用户动态相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; 游戏列表 GET /api/v3/game GameCreationSource source = default; // 游戏创建来源 // API 请求 IAsyncEnumerable<IReadOnlyCollection<RestGame>> pagedGames = _socketClient.Rest.GetGamesAsync(source); IAsyncEnumerable<IReadOnlyCollection<RestGame>> pagedGames = _restClient.GetGamesAsync(source); 添加游戏 POST /api/v3/game/create string name = null; // 游戏名称 string processName = null; // 游戏进程名称 string iconUrl = null; // 图标地址 // API 请求 RestGame game = await _socketClient.Rest.CreateGameAsync(name, processName, iconUrl); RestGame game = await _restClient.CreateGameAsync(name, processName, iconUrl); 更新游戏 POST /api/v3/game/update RestGame game = null; // 游戏 string name = null; // 游戏名称 string iconUrl = null; // 图标地址 // API 请求 RestGame modifiedGame = await game.ModifyAsync(x => { x.Name = name; x.IconUrl = iconUrl; }); 删除游戏 POST /api/v3/game/delete RestGame game = null; // 游戏 // API 请求 await game.DeleteAsync(); 添加游戏/音乐记录(开始玩/听) POST /api/v3/game/activity RestGame game = null; // 游戏 Music music = null; // 音乐 // API 请求 await _socketClient.Rest.CurrentUser.StartPlayingAsync(game); await _socketClient.Rest.CurrentUser.StartPlayingAsync(music); await _restClient.CurrentUser.StartPlayingAsync(game); await _restClient.CurrentUser.StartPlayingAsync(music); 删除游戏/音乐记录(结束玩/听) POST /api/v3/game/delete-activity ActivityType type = default; // 活动类型 // API 请求 await _socketClient.Rest.CurrentUser.StopPlayingAsync(type); await _restClient.CurrentUser.StopPlayingAsync(type);"
  },
  "quick_reference/http_api/gateway.html": {
    "href": "quick_reference/http_api/gateway.html",
    "title": "Gateway 相关接口 | Kook.Net 文档",
    "keywords": "Gateway 相关接口 获取网关连接地址 GET /api/v3/gateway/index 无公开 API"
  },
  "quick_reference/http_api/guild-emoji.html": {
    "href": "quick_reference/http_api/guild-emoji.html",
    "title": "服务器表情相关接口 | Kook.Net 文档",
    "keywords": "服务器表情相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketGuild socketGuild = null; RestGuild restGuild = null; IGuild guild = null; 获取服务器表情列表 GET /api/v3/guild-emoji/list string emoteId = null; // 表情符号 ID // 缓存中获取表情符号列表 IReadOnlyCollection<GuildEmote> cachedGuildEmotes = guild.Emotes; // 缓存获取指定 ID 的表情符号 GuildEmote cachedGuildEmote = socketGuild.GetEmote(emoteId); // API 请求获取表情符号列表 IReadOnlyCollection<GuildEmote> guildEmotes = await guild.GetEmotesAsync(); GuildEmote guildEmote = await guild.GetEmoteAsync(emoteId); 创建服务器表情 POST /api/v3/guild-emoji/create string name = null; // 表情符号名称 Image image = default; // 表情符号图片 // API 请求 GuildEmote emote = await guild.CreateEmoteAsync(name, image); 更新服务器表情 POST /api/v3/guild-emoji/update GuildEmote emote = null; // 表情符号 string name = null; // 表情符号名称 // API 请求 await guild.ModifyEmoteNameAsync(emote, name); 删除服务器表情 POST /api/v3/guild-emoji/delete GuildEmote emote = null; // 表情符号 // API 请求 await guild.DeleteEmoteAsync(emote);"
  },
  "quick_reference/http_api/guild-role.html": {
    "href": "quick_reference/http_api/guild-role.html",
    "title": "服务器角色权限相关接口 | Kook.Net 文档",
    "keywords": "服务器角色权限相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketGuild socketGuild = null; RestGuild restGuild = null; IGuild guild = null; IRole role = null; 获取服务器角色列表 GET /api/v3/guild-role/list // 获取服务器的角色列表 IReadOnlyCollection<SocketRole> socketRoles = socketGuild.Roles; IReadOnlyCollection<RestRole> restRoles = restGuild.Roles; IReadOnlyCollection<IRole> roles = guild.Roles; // 获取服务器的指定角色 ID 的信息 SocketRole socketRole = socketGuild.GetRole(roleId); RestRole restRole = restGuild.GetRole(roleId); IRole role = guild.GetRole(roleId); 创建服务器角色 POST /api/v3/guild-role/create string roleName = null; // 角色名称 // API 请求 RestRole restRoleFromSocket = await socketGuild.CreateRoleAsync(roleName); RestRole restRoleFromRest = await restGuild.CreateRoleAsync(roleName); IRole role = await guild.CreateRoleAsync(roleName); 更新服务器角色 POST /api/v3/guild-role/update string roleName = null; // 角色名称 Color color = default; // 角色颜色 bool hoist = default; // 是否分离显示 bool mentionable = default; // 是否可被提及 GuildPermissions permissions = default; // 角色权限 // API 请求 await role.ModifyAsync(x => { x.Name = roleName; x.Color = color; x.Hoist = hoist; x.Mentionable = mentionable; x.Permissions = permissions; }); 删除服务器角色 POST /api/v3/guild-role/delete // API 请求 await role.DeleteAsync(); 赋予用户角色 POST /api/v3/guild-role/grant ulong guildId = default; // 服务器 ID IRole role = null; // 角色 uint roleId = default; // 角色 ID IEnumerable<IRole> roles = null; // 多个角色 IEnumerable<uint> roleIds = null; // 多个角色 ID ulong userId = default; // 用户 ID // API 请求赋予角色 await guildUser.AddRoleAsync(role); await guildUser.AddRoleAsync(roleId); // API 请求批量赋予角色 await guildUser.AddRolesAsync(roles); await guildUser.AddRolesAsync(roleIds); // API 请求，无实体操作 await _socketClient.Rest.AddRoleAsync(guildId, userId, roleId); 删除用户角色 POST /api/v3/guild-role/revoke ulong guildId = default; // 服务器 ID IRole role = null; // 角色 uint roleId = default; // 角色 ID IEnumerable<IRole> roles = null; // 多个角色 IEnumerable<uint> roleIds = null; // 多个角色 ID ulong userId = default; // 用户 ID // API 请求赋予角色 await guildUser.RemoveRoleAsync(role); await guildUser.RemoveRoleAsync(roleId); // API 请求批量赋予角色 await guildUser.RemoveRolesAsync(roles); await guildUser.RemoveRolesAsync(roleIds); // API 请求，无实体操作 await _socketClient.Rest.RemoveRoleAsync(guildId, userId, roleId);"
  },
  "quick_reference/http_api/guild.html": {
    "href": "quick_reference/http_api/guild.html",
    "title": "服务器相关接口 | Kook.Net 文档",
    "keywords": "服务器相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketGuild socketGuild = null; RestGuild restGuild = null; IGuild guild = null; IGuildUser guildUser = null; 获取当前用户加入的服务器列表 GET /api/v3/guild/list // 缓存获取加入的所有服务器 IReadOnlyCollection<SocketGuild> socketGuilds = _socketClient.Guilds; // API 请求 IReadOnlyCollection<RestGuild> restGuilds = await _socketClient.Rest.GetGuildsAsync(); IReadOnlyCollection<RestGuild> restGuilds = await _restClient.GetGuildsAsync(); 获取服务器详情 GET /api/v3/guild/view ulong guildId = default; // 服务器 ID // 缓存获取指定服务器 SocketGuild socketGuild = _socketClient.GetGuild(guildId); // API 请求 RestGuild restGuild = await _socketClient.Rest.GetGuildAsync(guildId); RestGuild restGuild = await _restClient.GetGuildAsync(guildId); 获取服务器中的用户列表 GET /api/v3/guild/user-list ulong guildId = default; // 服务器 ID // 要在启动时缓存服务器用户列表，请设置 AlwaysDownloadUsers = true // 主动更新所有服务器用户列表缓存 await _socketClient.DownloadUsersAsync(); // 主动更新部分服务器用户列表缓存 IEnumerable<IGuild> guilds = Enumerable.Empty<IGuild>(); await _socketClient.DownloadUsersAsync(guilds); // 主动更新指定服务器用户列表缓存 await socketGuild.DownloadUsersAsync(); // 缓存获取 SocketGuild 对象 SocketGuild socketGuild = _socketClient.GetGuild(guildId); // 缓存获取用户列表 IReadOnlyCollection<SocketGuildUser> socketUsers = socketGuild.Users; // 调用异步方法获取用户列表，在缓存中包含所有用户的情况下，直接返回缓存的用户列表，否则会发起 API 请求获取分页结果 IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> pagedGuildUsers = socketGuild.GetUsersAsync(); // 合并分页结果 IEnumerable<IGuildUser> guildUsers = await pagedGuildUsers.FlattenAsync(); // API 请求 IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> pagedRestGuildUsers = restGuild.GetUsersAsync(); // 合并分页结果 IEnumerable<RestGuildUser> restGuildUsers = await pagedRestGuildUsers.FlattenAsync(); // 如果 IGuild 对象是 SocketGuild，且缓存中包含所有用户，则直接返回缓存的用户列表，否则会发起 API 请求获取全部用户信息 IReadOnlyCollection<IGuildUser> guildUsers = await guild.GetUsersAsync(); 修改服务器中用户的昵称 POST /api/v3/guild/nickname // 要设置的昵称，如要清空昵称，请传入 `null`、`string.Empty` 或该用户的 `IUser.Username` string nickname = null; // API 请求 await guildUser.ModifyNicknameAsync(nickname); 离开服务器 POST /api/v3/guild/leave // API 请求 await guild.LeaveAsync(); 踢出服务器 POST /api/v3/guild/kickout // API 请求 await guildUser.KickAsync(); 服务器静音闭麦列表 GET /api/v3/guild-mute/list // 要在启动时缓存语音状态信息，请设置 AlwaysDownloadVoiceStates = true // 主动更新所有服务器语音状态信息缓存 await _socketClient.DownloadVoiceStatesAsync(); // 主动更新部分服务器语音状态信息缓存 IEnumerable<IGuild> guilds = Enumerable.Empty<IGuild>(); await _socketClient.DownloadVoiceStatesAsync(guilds); // 主动更新指定服务器语音状态信息缓存 await socketGuild.DownloadVoiceStatesAsync(); // 缓存获取服务器内的所有语音状态信息 Dictionary<SocketGuildUser, SocketVoiceState?> voiceStates = socketGuild.Users.ToDictionary(x => x, x => x.VoiceState); // 缓存获取被服务器闭麦的用户列表 IEnumerable<SocketGuildUser> mutedUsers = socketGuild.Users.Where(x => x.VoiceState?.IsMuted == true); // 缓存获取被服务器静音的用户列表 IEnumerable<SocketGuildUser> deafenedUsers = socketGuild.Users.Where(x => x.VoiceState?.IsDeafened == true); 添加服务器静音或闭麦 POST /api/v3/guild-mute/create // API 请求 await guildUser.MuteAsync(); await guildUser.DeafenAsync(); 删除服务器静音或闭麦 POST /api/v3/guild-mute/delete // API 请求 await guildUser.UnmuteAsync(); await guildUser.UndeafenAsync(); 服务器助力历史 GET /api/v3/guild-boost/history // 要在启动时缓存服务器助力信息，请设置 AlwaysDownloadBoostSubscriptions = true // 主动更新所有服务器服务器助力信息缓存 await _socketClient.DownloadBoostSubscriptionsAsync(); // 主动更新部分服务器服务器助力信息缓存 IEnumerable<IGuild> guilds = Enumerable.Empty<IGuild>(); await _socketClient.DownloadBoostSubscriptionsAsync(guilds); // 主动更新指定服务器服务器助力信息缓存 await socketGuild.DownloadBoostSubscriptionsAsync(); // 缓存获取服务器内的所有服务器助力信息 ImmutableDictionary<IUser,IReadOnlyCollection<BoostSubscriptionMetadata>> boostSubscriptions = socketGuild.BoostSubscriptions; ImmutableDictionary<IUser,IReadOnlyCollection<BoostSubscriptionMetadata>> validBoostSubscriptions = socketGuild.ValidBoostSubscriptions; // 缓存获取服务器用户的服务器服务器助力信息 IReadOnlyCollection<BoostSubscriptionMetadata> boostSubscriptions = socketGuildUser.BoostSubscriptions; // API 请求，获取服务器内的助力信息 ImmutableDictionary<IUser,IReadOnlyCollection<BoostSubscriptionMetadata>> boostSubscriptions = await guild.GetBoostSubscriptionsAsync(); ImmutableDictionary<IUser,IReadOnlyCollection<BoostSubscriptionMetadata>> boostSubscriptions = await guild.GetActiveBoostSubscriptionsAsync(); // API 请求，获取服务器用户的助力信息 IReadOnlyCollection<BoostSubscriptionMetadata> boostSubscriptions = await guildUser.GetBoostSubscriptionsAsync();"
  },
  "quick_reference/http_api/intimacy.html": {
    "href": "quick_reference/http_api/intimacy.html",
    "title": "亲密度相关接口 | Kook.Net 文档",
    "keywords": "亲密度相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketUser socketUser = null; RestUser restUser = null; IUser user = null; 获取用户的亲密度 GET /api/v3/intimacy/index // API 请求 RestIntimacy intimacyFromSocket = await socketUser.GetIntimacyAsync(); RestIntimacy intimacyFromRest = await restUser.GetIntimacyAsync(); IIntimacy intimacy = await user.GetIntimacyAsync(); 更新用户的亲密度 POST /api/v3/intimacy/update string socialInfo = null; // 社交信息 uint imageId = default; // 形象图片 ID int score = default; // 亲密度 // API 请求 await user.UpdateIntimacyAsync(x => { x.SocialInfo = socialInfo; x.ImageId = imageId; x.Score = score; });"
  },
  "quick_reference/http_api/invite.html": {
    "href": "quick_reference/http_api/invite.html",
    "title": "邀请相关接口 | Kook.Net 文档",
    "keywords": "邀请相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; IGuild guild = null; 获取邀请列表 GET /api/v3/invite/list // API 请求 IReadOnlyCollection<IInvite> invites = await guild.GetInvitesAsync(); 创建邀请链接 POST /api/v3/invite/create InviteMaxAge maxAge = default; // 有效期 InviteMaxUses maxUses = default; // 最大使用次数 // API 请求 IInvite invite = await guild.CreateInviteAsync(maxAge, maxUses); 删除邀请链接 POST /api/v3/invite/delete IInvite invite = null; // 邀请 // API 请求 await invite.DeleteAsync();"
  },
  "quick_reference/http_api/message.html": {
    "href": "quick_reference/http_api/message.html",
    "title": "消息相关接口 | Kook.Net 文档",
    "keywords": "消息相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketTextChannel socketTextChannel = null; RestTextChannel restTextChannel = null; ITextChannel textChannel = null; IUserMessage userMessage = null; 获取频道聊天消息列表 GET /api/v3/message/list IMessage referenceMessage = null; // 获取消息列表所根据的参考消息位置的 Guid referenceMessageId = default; // 获取消息列表所根据的参考消息位置的 ID Direction direction = default; // 获取消息列表的方向 int limit = default; // 获取消息列表的数量 // 要缓存文字频道聊天消息，请设置 MessageCacheSize 的值 // 缓存获取文字频道的聊天消息列表 IReadOnlyCollection<SocketMessage> cachedMessages = socketTextChannel.CachedMessages; IReadOnlyCollection<SocketMessage> conditionalCachedMessages = socketTextChannel.GetCachedMessages(referenceMessage, direction, limit); IReadOnlyCollection<SocketMessage> conditionalCachedMessagesById = socketTextChannel.GetCachedMessages(referenceMessageId, direction, limit); // API 请求 IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessages = socketTextChannel.GetMessagesAsync(referenceMessage, direction, limit); IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessagesById = socketTextChannel.GetMessagesAsync(referenceMessageId, direction, limit); IAsyncEnumerable<IReadOnlyCollection<RestMessage>> pagedRestMessages = restTextChannel.GetMessagesAsync(referenceMessage, direction, limit); IAsyncEnumerable<IReadOnlyCollection<RestMessage>> pagedRestMessagesById = restTextChannel.GetMessagesAsync(referenceMessageId, direction, limit); // 在 ITextChannel 上进行调用 IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessages = textChannel.GetMessagesAsync(referenceMessage, direction, limit); IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessagesById = textChannel.GetMessagesAsync(referenceMessageId, direction, limit); 获取频道聊天消息详情 GET /api/v3/message/view Guid messageId = default; // 要获取详情的消息 ID // 要缓存文字频道聊天消息，请设置 MessageCacheSize 的值 // 缓存获取文字频道的聊天消息详情 SocketMessage cachedMessage = socketTextChannel.GetCachedMessage(messageId); // 调用异步方法获取消息详情，在缓存中包含指定的消息对象的情况下，直接返回缓存的消息对象，否则会发起 API 请求获取消息对象 IMessage messageAsync = await socketTextChannel.GetMessageAsync(messageId); // API 请求 IMessage message = await restTextChannel.GetMessageAsync(messageId); // 在 ITextChannel 上进行调用 IMessage message = await textChannel.GetMessageAsync(messageId); 发送频道聊天消息 POST /api/v3/message/create string text = null; // 要发送的文字消息 IQuote quote = null; // 被引用的消息 IUser ephemeralUser = null; // 瞬态消息的可见用户 string filePath = null; // 要发送的文件的路径 string fileName = null; // 要发送的文件的名称 AttachmentType fileType = default; // 要发送的文件的类型 Stream stream = null; // 要发送的文件的流 FileAttachment attachment = default; // 要发送的文件的附件 ICard card = null; // 要发送的卡片 IEnumerable<ICard> cards = null; // 要发送的卡片列表 // API 请求，发送文本消息 Cacheable<IUserMessage,Guid> textMessage = await textChannel.SendTextAsync(text, quote, ephemeralUser); // API 请求，发送文件消息 Cacheable<IUserMessage,Guid> fileMessageFromPath = await textChannel.SendFileAsync(filePath, fileName, fileType, quote, ephemeralUser); Cacheable<IUserMessage,Guid> fileMessageFromStream = await textChannel.SendFileAsync(stream, fileName, fileType, quote, ephemeralUser); Cacheable<IUserMessage,Guid> fileMessageFromAttachment = await textChannel.SendFileAsync(attachment, quote, ephemeralUser); // API 请求，发送单卡片消息 Cacheable<IUserMessage,Guid> cardMessage = await textChannel.SendCardAsync(card, quote, ephemeralUser); // API 请求，发送多卡片消息 Cacheable<IUserMessage,Guid> cardsMessage = await textChannel.SendCardsAsync(cards, quote, ephemeralUser); 更新频道聊天消息 POST /api/v3/message/update string content = null; // 要更新的消息的文本 IEnumerable<ICard> cards = null; // 要更新的消息的卡片 IQuote quote = null; // 要更新的消息的引用 IUser ephemeralUser = null; // 要更新的瞬态消息的可见用户 // API 请求 await userMessage.ModifyAsync(x => { x.Content = content; x.Cards = cards; x.Quote = quote; // 要清除引用，请设置为 Quote.Empty x.EphemeralUser = ephemeralUser; }); 删除频道聊天消息 POST /api/v3/message/delete // API 请求 await userMessage.DeleteAsync(); 获取频道消息某回应的用户列表 GET /api/v3/message/reaction-list IEmote emoji = null; // 要获取用户列表的回应的表情 // 缓存获取消息的回应概要，但不包含用户列表 IReadOnlyDictionary<IEmote,ReactionMetadata> cachedReactions = socketUserMessage.Reactions; // API 请求 IReadOnlyCollection<IUser> reactionUsers = await userMessage.GetReactionUsersAsync(emoji); 给某个消息添加回应 POST /api/v3/message/add-reaction 有关如何构造 Emoji，请参考 表情符号。 IEmote emoji = null; // 要添加的回应的表情 IEnumerable<IEmote> emojis = null; // 要添加的回应的表情列表 // API 请求 await userMessage.AddReactionAsync(emoji); await userMessage.AddReactionsAsync(emojis); 删除消息的某个回应 POST /api/v3/message/delete-reaction IEmote emoji = null; IEnumerable<IEmote> emojis = null; IUser user = null; // API 请求 await userMessage.RemoveReactionAsync(emoji, user); await userMessage.RemoveReactionsAsync(user, emojis);"
  },
  "quick_reference/http_api/oauth.html": {
    "href": "quick_reference/http_api/oauth.html",
    "title": "OAuth 2.0 相关接口 | Kook.Net 文档",
    "keywords": "OAuth 2.0 相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; 获取 AccessToken POST /api/oauth2/token 无公开 API，请使用 AspNet.Security.OAuth.Kook，请参考： NuGet: https://www.nuget.org/packages/AspNet.Security.OAuth.Kook/ GitHub: https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers 文档：https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers/blob/dev/docs/kook.md"
  },
  "quick_reference/http_api/user-chat.html": {
    "href": "quick_reference/http_api/user-chat.html",
    "title": "私信聊天会话接口 | Kook.Net 文档",
    "keywords": "私信聊天会话接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; readonly IKookClient _client = null; 获取私信聊天会话列表 GET /api/v3/user-chat/list // 缓存获取私信聊天会话列表 IReadOnlyCollection<SocketDMChannel> cachedDmChannels = _socketClient.DMChannels; // API 请求 IReadOnlyCollection<IDMChannel> dmChannels = await _client.GetDMChannelsAsync(); 获取私信聊天会话详情 GET /api/v3/user-chat/view Guid chatCode = default; // 要获取详情的私信聊天会话的 ChatCode ulong userId = default; // 要获取详情的私信聊天会话的 UserId // 缓存获取私信聊天会话详情 SocketDMChannel dmChannelByChatCode = _socketClient.GetDMChannel(chatCode); SocketDMChannel dmChannelByUserId = _socketClient.GetDMChannel(userId); // API 请求 IDMChannel dmChannel = await _client.GetDMChannelAsync(chatCode); 创建私信聊天会话 POST /api/v3/user-chat/create IUser user = null; // 要创建私信聊天会话的用户 // API 请求 IDMChannel dmChannel = await user.CreateDMChannelAsync(); 删除私信聊天会话 POST /api/v3/user-chat/delete IDMChannel dmChannel = null; // 要删除的私信聊天会话 // API 请求 await dmChannel.CloseAsync()"
  },
  "quick_reference/http_api/user.html": {
    "href": "quick_reference/http_api/user.html",
    "title": "用户相关接口 | Kook.Net 文档",
    "keywords": "用户相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; IKookClient _client = null; 获取当前用户信息 GET /api/v3/user/me IGuild guild = null; // 服务器 // 缓存获取当前用户信息 SocketSelfUser socketCurrentUser = _socketClient.CurrentUser; RestSelfUser restCurrentUser = _restClient.CurrentUser; // 缓存获取当前用户在服务器中的用户信息 SocketGuildUser socketGuildCurrentUser = _socketGuild.CurrentUser; // API 请求 IUser currentUser = await _client.GetUserAsync(_client.CurrentUser.Id); IGuildUser currentGuildUser = await guild.GetCurrentUserAsync(); 获取目标用户信息 GET /api/v3/user/view ulong userId = default; // 用户 ID string username = null; // 用户名 string identifyNumber = null; // 用户标识码 IGuild guild = null; // 服务器 // 缓存获取目标用户信息 SocketUser socketUserById = _socketClient.GetUser(userId); SocketUser socketUserByNameNumber = _socketClient.GetUser(username, identifyNumber); // 缓存获取用户在服务器中的用户信息 SocketGuildUser socketGuildUser = socketGuild.GetUser(userId); // API 请求 IUser user = await _client.GetUserAsync(userId); IGuildUser user = await guild.GetUserAsync(userId) 下线机器人 POST /api/v3/user/offline _socketClient.LogoutAsync(); _restClient.LogoutAsync();"
  },
  "quick_reference/index.html": {
    "href": "quick_reference/index.html",
    "title": "快速参考指南 | Kook.Net 文档",
    "keywords": "快速参考指南 快速参考指南将会介绍 KOOK 开发者平台 中所列出的 HTTP 接口与事件在 Kook.Net 中的使用方法。 登录与启动 Rest 客户端 WebSocket 客户端 Webhook 客户端 HTTP 接口 服务器相关接口 频道相关接口 消息相关接口 频道用户相关接口 私信聊天会话接口 用户私聊消息接口 好友相关接口 Gateway 相关接口 用户相关接口 媒体接口 服务器角色权限相关接口 亲密度相关接口 服务器表情相关接口 邀请相关接口 黑名单相关接口 Badge 相关接口 用户动态相关接口 OAuth 2.0 相关接口 网关事件 频道相关事件 私聊消息事件 服务器成员相关事件 服务器角色相关事件 服务器相关事件 消息相关事件列表 用户相关事件列表"
  },
  "quick_reference/startup/rest.html": {
    "href": "quick_reference/startup/rest.html",
    "title": "Rest 客户端 | Kook.Net 文档",
    "keywords": "Rest 客户端 预声明变量 readonly KookRestClient _restClient; // 使用默认配置创建 Rest 客户端 _restClient = new KookRestClient(); // 使用自定义配置创建 Rest 客户端 _restClient = new KookRestClient(new KookRestConfig() { // 请求头 Accept-Language AcceptLanguage = \"zh-CN\", // 默认重试模式 DefaultRetryMode = RetryMode.AlwaysRetry, // 默认超速回调 DefaultRatelimitCallback = info => Task.CompletedTask, // 日志级别 LogLevel = LogSeverity.Info, // 双向文稿格式化用户名 FormatUsersInBidirectionalUnicode = true, // Rest 客户端提供程序 RestClientProvider = DefaultRestClientProvider.Instance }); // Token string token = null; // 登录 await _restClient.LoginAsync(TokenType.Bot, token); // 登出 await _restClient.LogoutAsync();"
  },
  "quick_reference/startup/webhook.html": {
    "href": "quick_reference/startup/webhook.html",
    "title": "Webhook 客户端 | Kook.Net 文档",
    "keywords": "Webhook 客户端 Webhook 客户端的抽象类是 KookWebhookClient。 ASP.NET 实现 // 创建服务主机构建器 WebApplicationBuilder builder = WebApplication.CreateBuilder(args); // 添加 KookAspNetWebhookClient 服务并进行必要的配置 builder.Services.AddKookAspNetWebhookClient(config => { // 包含 KookRestConfig 及 KookSocketConfig 的全部配置项，此处略 // 由 KookWebhookConfig 提供的配置项 // Webhook 负载验证令牌 config.VerifyToken = default; // Webhook 负载解密密钥 config.EncryptKey = default; // 启动时是否等待 Webhook 验证挑战后再开始启动 Bot 服务 config.StartupWaitForChallenge = false; // Webhook 提供程序，此处为由 KookAspNetWebhookConfig 设置的默认值 config.WebhookProvider = DefaultAspNetWebhookProvider.Instance; // 由 KookAspNetWebhookConfig 提供的配置项 // 令牌类型 config.TokenType = TokenType.Bot; // 令牌 config.Token = default; // 是否验证令牌格式 config.ValidateToken = true; // 请求的路由终结点 config.RouteEndpoint = \"kook\"; // 配置 KookAspNetWebhookClient config.ConfigureKookClient = (serviceProvider, client) => { }; }); // 构建服务主机 WebApplication app = builder.Build(); // 配置 Webhook 终结点 app.UseKookEndpoint(); // 启动服务主机 await app.RunAsync(); HTTP Listener 实现 // 使用默认配置创建 WebSocket 客户端 KookHttpListenerWebhookClient webhookClient = new KookHttpListenerWebhookClient(); // 使用自定义配置创建 WebSocket 客户端 KookHttpListenerWebhookClient webhookClient = new KookHttpListenerWebhookClient(new KookHttpListenerWebhookConfig { // 包含 KookRestConfig 及 KookSocketConfig 的全部配置项，此处略 // 由 KookWebhookConfig 提供的配置项 // Webhook 负载验证令牌 VerifyToken = default, // Webhook 负载解密密钥 EncryptKey = default, // 启动时是否等待 Webhook 验证挑战后再开始启动 Bot 服务 StartupWaitForChallenge = false, // Webhook 提供程序，此处为由 KookAspNetWebhookConfig 设置的默认值 WebhookProvider = DefaultAspNetWebhookProvider.Instance, // 由 KookHttpListenerWebhookConfig 提供的配置项 // 用于 HttpListener 的 URI 前缀列表 UriPrefixes = [ \"http://localhost:5043/\", \"http://127.0.0.1:5043/\" ], // HttpListener 崩溃后自动重启的时间间隔 // Timeout.InfiniteTimeSpan 表示终止服务但不终止进程 // 其它小于 0 的时间间隔表示不自动重启并终止进程 // TimeSpan.Zero 表示立即重启 HttpListener // 其它大于 0 的时间间隔表示等待指定的时间间隔后重启 HttpListener AutoRestartInterval = TimeSpan.FromSeconds(5), }); // Token string token = null; // 登录 await webhookClient.LoginAsync(TokenType.Bot, token); // 启动 await webhookClient.StartAsync(); // 停止 await webhookClient.StopAsync(); // 登出 await webhookClient.LogoutAsync();"
  },
  "quick_reference/startup/websocket.html": {
    "href": "quick_reference/startup/websocket.html",
    "title": "WebSocket 客户端 | Kook.Net 文档",
    "keywords": "WebSocket 客户端 预声明变量 readonly KookSocketClient _socketClient; // 使用默认配置创建 WebSocket 客户端 _socketClient = new KookRestClient(); // 使用自定义配置创建 WebSocket 客户端 _socketClient = new KookSocketClient(new KookSocketConfig() { // 包含 KookRestConfig 的全部配置项，此处略 // 显示指定网关地址 GatewayHost = null, // 连接超时（毫秒） ConnectionTimeout = 6000, // 小型 Bot 服务器数量阈值 SmallNumberOfGuildsThreshold = 5, // 大型 Bot 服务器数量阈值 LargeNumberOfGuildsThreshold = 50, // 处理程序警告耗时阈值（毫秒） HandlerTimeout = 3000, // 消息缓存数量 MessageCacheSize = 10, // WebSocket 客户端提供程序 WebSocketProvider = DefaultWebSocketProvider.Instance, // UDP 客户端提供程序 UdpSocketProvider = DefaultUdpSocketProvider.Instance, // 启动缓存数据获取模式 StartupCacheFetchMode = StartupCacheFetchMode.Auto, // 自动下载服务器用户信息 AlwaysDownloadUsers = false, // 自动下载服务器用户语音状态信息 AlwaysDownloadVoiceStates = false, // 自动下载服务器助力信息 AlwaysDownloadBoostSubscriptions = false, // 等待服务器可用状态超时（毫秒） MaxWaitBetweenGuildAvailablesBeforeReady = 10000, // 最大获取新加入服务器信息重试次数 MaxJoinedGuildDataFetchingRetryTimes = 10, // 获取新加入服务器信息重试延迟（毫秒） JoinedGuildDataFetchingRetryDelay = 500 }); // Token string token = null; // 登录 await _socketClient.LoginAsync(TokenType.Bot, token); // 启动 await _socketClient.StartAsync(); // 停止 await _socketClient.StopAsync(); // 登出 await _socketClient.LogoutAsync();"
  }
}