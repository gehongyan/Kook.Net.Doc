{
  "api/Kook.ActionGroupModule.html": {
    "href": "api/Kook.ActionGroupModule.html",
    "title": "Class ActionGroupModule | Kook.Net 文档",
    "keywords": "Class ActionGroupModule Namespace Kook Assembly Kook.Net.Core.dll 按钮组模块，可用于 ICard 中。 public class ActionGroupModule : IModule, IEquatable<ActionGroupModule>, IEquatable<IModule> Inheritance object ActionGroupModule Implements IModule IEquatable<ActionGroupModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(ActionGroupModule) CardExtensions.ToBuilder(IModule) Properties Elements 获取模块的元素。 public ImmutableArray<ButtonElement> Elements { get; } Property Value ImmutableArray<ButtonElement> Type 获取模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods Equals(ActionGroupModule?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ActionGroupModule? actionGroupModule) Parameters actionGroupModule ActionGroupModule Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ActionGroupModule, ActionGroupModule) 判定两个 ActionGroupModule 是否相等。 public static bool operator ==(ActionGroupModule left, ActionGroupModule right) Parameters left ActionGroupModule right ActionGroupModule Returns bool 如果两个 ActionGroupModule 相等，则为 true；否则为 false。 operator !=(ActionGroupModule, ActionGroupModule) 判定两个 ActionGroupModule 是否不相等。 public static bool operator !=(ActionGroupModule left, ActionGroupModule right) Parameters left ActionGroupModule right ActionGroupModule Returns bool 如果两个 ActionGroupModule 不相等，则为 true；否则为 false。"
  },
  "api/Kook.ActionGroupModuleBuilder.html": {
    "href": "api/Kook.ActionGroupModuleBuilder.html",
    "title": "Class ActionGroupModuleBuilder | Kook.Net 文档",
    "keywords": "Class ActionGroupModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll 用来构建 ActionGroupModule 模块的构建器。 public class ActionGroupModuleBuilder : IModuleBuilder, IEquatable<ActionGroupModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object ActionGroupModuleBuilder Implements IModuleBuilder IEquatable<ActionGroupModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ActionGroupModuleBuilder() 初始化一个 ActionGroupModuleBuilder 类的新实例。 public ActionGroupModuleBuilder() ActionGroupModuleBuilder(IList<ButtonElementBuilder>) 初始化一个 ActionGroupModuleBuilder 类的新实例。 public ActionGroupModuleBuilder(IList<ButtonElementBuilder> elements) Parameters elements IList<ButtonElementBuilder> 按钮组模块要包含的按钮元素。 Fields MaxElementCount 元素的最大数量。 public const int MaxElementCount = 4 Field Value int Properties Elements 获取或设置按钮组模块的按钮元素。 public IList<ButtonElementBuilder> Elements { get; set; } Property Value IList<ButtonElementBuilder> Type 获取此构建器构建的模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods AddElement(ButtonElementBuilder) 添加一个按钮元素到按钮组模块。 public ActionGroupModuleBuilder AddElement(ButtonElementBuilder field) Parameters field ButtonElementBuilder 要添加的按钮元素。 Returns ActionGroupModuleBuilder 当前构建器。 AddElement(Action<ButtonElementBuilder>?) 添加一个按钮元素到按钮组模块。 public ActionGroupModuleBuilder AddElement(Action<ButtonElementBuilder>? action = null) Parameters action Action<ButtonElementBuilder> 一个包含对要添加的新创建的按钮元素进行配置的操作的委托。 Returns ActionGroupModuleBuilder 当前构建器。 Build() 构建当前构建器为一个 ActionGroupModule 对象。 public ActionGroupModule Build() Returns ActionGroupModule 由当前构建器表示的属性构建的 ActionGroupModule 对象。 Exceptions ArgumentNullException Elements 为 null。 ArgumentException Elements 是一个空列表。 ArgumentException Elements 的元素数量超过了 MaxElementCount。 Equals(ActionGroupModuleBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ActionGroupModuleBuilder? actionGroupModuleBuilder) Parameters actionGroupModuleBuilder ActionGroupModuleBuilder Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ActionGroupModuleBuilder?, ActionGroupModuleBuilder?) 判定两个 ActionGroupModuleBuilder 是否相等。 public static bool operator ==(ActionGroupModuleBuilder? left, ActionGroupModuleBuilder? right) Parameters left ActionGroupModuleBuilder right ActionGroupModuleBuilder Returns bool 如果两个 ActionGroupModuleBuilder 相等，则为 true；否则为 false。 operator !=(ActionGroupModuleBuilder?, ActionGroupModuleBuilder?) 判定两个 ActionGroupModuleBuilder 是否不相等。 public static bool operator !=(ActionGroupModuleBuilder? left, ActionGroupModuleBuilder? right) Parameters left ActionGroupModuleBuilder right ActionGroupModuleBuilder Returns bool 如果两个 ActionGroupModuleBuilder 不相等，则为 true；否则为 false。"
  },
  "api/Kook.ActivityType.html": {
    "href": "api/Kook.ActivityType.html",
    "title": "Enum ActivityType | Kook.Net 文档",
    "keywords": "Enum ActivityType Namespace Kook Assembly Kook.Net.Core.dll 表示活动的类型。 public enum ActivityType Fields Game = 1 游戏。 Music = 2 音乐。"
  },
  "api/Kook.AlphaColor.html": {
    "href": "api/Kook.AlphaColor.html",
    "title": "Struct AlphaColor | Kook.Net 文档",
    "keywords": "Struct AlphaColor Namespace Kook Assembly Kook.Net.Core.dll 表示 KOOK 中使用的带有不透明度通道的颜色。 public readonly struct AlphaColor : IEquatable<AlphaColor> Implements IEquatable<AlphaColor> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors AlphaColor(Color, byte) 使用指定的 Color 及不透明度初始化一个 AlphaColor 结构的新实例。 public AlphaColor(Color baseColor, byte alpha) Parameters baseColor Color 基础颜色。 alpha byte 不透明度。 Examples 创建 #607D8BFF（http://www.color-hex.com/color/607d8b）所表示的颜色，且其完全不透明： AlphaColor darkGrey = new AlphaColor(new Color(0x607D8B), (byte)0xFF); AlphaColor(byte, byte, byte, byte) 使用指定的 RGBA 通道值初始化一个 Color 结构的新实例。 public AlphaColor(byte r, byte g, byte b, byte a) Parameters r byte 红色通道的强度。 g byte 绿色通道的强度。 b byte 蓝色通道的强度。 a byte 不透明度通道的强度。 Examples 创建 #607D8B（http://www.color-hex.com/color/607d8b）所表示的颜色，且其完全不透明： AlphaColor darkGrey = new AlphaColor((byte)0x60, (byte)0x7D, (byte)0x8B, (byte)0xFF); AlphaColor(int, int, int, int) 使用指定的 RGBA 通道值初始化一个 Color 结构的新实例。 public AlphaColor(int r, int g, int b, int a) Parameters r int 红色通道的强度。 g int 绿色通道的强度。 b int 蓝色通道的强度。 a int 不透明度通道的强度。 Examples 创建 #607D8B（http://www.color-hex.com/color/607d8b）所表示的颜色，且其完全不透明： AlphaColor darkGrey = new AlphaColor(96, 125, 139, 255); AlphaColor(float, float, float, float) 使用指定的 RGBA 通道值初始化一个 Color 结构的新实例。 public AlphaColor(float r, float g, float b, float a) Parameters r float 红色通道的强度。 g float 绿色通道的强度。 b float 蓝色通道的强度。 a float 不透明度通道的强度。 Examples 创建 #607D8B（http://www.color-hex.com/color/607d8b）所表示的颜色，且其完全不透明： AlphaColor darkGrey = new AlphaColor(0.38f, 0.49f, 0.55f, 1.00f); AlphaColor(uint) 使用指定的 32 位无符号整型值初始化一个 AlphaColor 结构的新实例。 public AlphaColor(uint rawValue) Parameters rawValue uint 颜色的 32 位无符号整型原始值。 Examples 创建 #607D8BFF（http://www.color-hex.com/color/607d8b）所表示的颜色，且其完全不透明： AlphaColor darkGrey = new AlphaColor(0x607D8BFF); Fields Default 获取默认颜色。 public static readonly AlphaColor Default Field Value AlphaColor MaxDecimalValue 获取一个 KOOK 中带有不透明度通道的颜色的最大值的原始值。 public const uint MaxDecimalValue = 4294967295 Field Value uint Properties A 获取此颜色的不透明度通道的强度。 public byte A { get; } Property Value byte B 获取此颜色的蓝色通道的强度。 public byte B { get; } Property Value byte BaseColor 获取此颜色不带有不透明度通道的基础颜色。 public Color BaseColor { get; } Property Value Color G 获取此颜色的绿色通道的强度。 public byte G { get; } Property Value byte R 获取此颜色的红色通道的强度。 public byte R { get; } Property Value byte RawValue 获取此颜色的原始值。 public uint RawValue { get; } Property Value uint Remarks 颜色以 32 位无符号整型值 RGBA 格式进行编码，由高至低的每 8 位分别表示红色、绿色、蓝色和不透明度通道的强度。 Methods Equals(AlphaColor) Indicates whether the current object is equal to another object of the same type. public bool Equals(AlphaColor other) Parameters other AlphaColor An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() 获取此颜色带有 # 前缀的 RGBA 十六进制字符串表示形式（例如 #000CCCFF）。 public override string ToString() Returns string 此颜色带有 # 前缀的 RGBA 十六进制字符串表示形式（例如 #000CCCFF）。 Operators operator ==(AlphaColor, AlphaColor) 判定两个 AlphaColor 是否相等。 public static bool operator ==(AlphaColor lhs, AlphaColor rhs) Parameters lhs AlphaColor rhs AlphaColor Returns bool 如果两个 AlphaColor 相等，则为 true；否则为 false。 explicit operator Color(AlphaColor) 获取此颜色不带有不透明度通道的基础颜色。 public static explicit operator Color(AlphaColor color) Parameters color AlphaColor Returns Color Remarks warning 此转换会丢失不透明度通道的信息。 explicit operator AlphaColor(Color) 将由 .NET 定义的 Color 颜色转换为由 Kook.Net 定义的 AlphaColor 颜色。 public static explicit operator AlphaColor(Color color) Parameters color Color 要进行转换的 .NET Color 颜色。 Returns AlphaColor 与该 .NET Color 颜色具有相同色值的 AlphaColor 颜色。 implicit operator Color(AlphaColor) 将由 Kook.Net 定义的 AlphaColor 颜色转换为由 .NET 定义的 Color 颜色。 public static implicit operator Color(AlphaColor color) Parameters color AlphaColor 要进行转换的 AlphaColor 颜色。 Returns Color 与该 AlphaColor 颜色具有相同色值的 .NET Color 颜色。 implicit operator uint(AlphaColor) 获取此颜色的原始值。 public static implicit operator uint(AlphaColor color) Parameters color AlphaColor Returns uint Remarks 颜色以 32 位无符号整型值 RGBA 格式进行编码，由高至低的每 8 位分别表示红色、绿色、蓝色和不透明度通道的强度。 implicit operator AlphaColor(Color) 将由 Kook.Net 定义的 Color 颜色转换为 Kook.Net 定义的 AlphaColor 颜色。 public static implicit operator AlphaColor(Color color) Parameters color Color 要进行转换的 Kook.Net 定义的 Color 颜色。 Returns AlphaColor 与该 Kook.Net 定义的 Color 颜色具有相同色值的 AlphaColor 颜色。 implicit operator AlphaColor(uint) 使用指定的 32 位无符号整型值初始化一个 AlphaColor 结构的新实例。 public static implicit operator AlphaColor(uint rawValue) Parameters rawValue uint 颜色的 32 位无符号整型原始值。 Returns AlphaColor Examples 创建 #607D8B（http://www.color-hex.com/color/607d8b）所表示的颜色，且其完全不透明： AlphaColor darkGrey = 0x607D8BFF; operator !=(AlphaColor, AlphaColor) 判定两个 AlphaColor 是否不相等。 public static bool operator !=(AlphaColor lhs, AlphaColor rhs) Parameters lhs AlphaColor rhs AlphaColor Returns bool 如果两个 AlphaColor 不相等，则为 true；否则为 false。"
  },
  "api/Kook.AsyncEnumerableExtensions.html": {
    "href": "api/Kook.AsyncEnumerableExtensions.html",
    "title": "Class AsyncEnumerableExtensions | Kook.Net 文档",
    "keywords": "Class AsyncEnumerableExtensions Namespace Kook Assembly Kook.Net.Core.dll 提供用于展开其异步可枚举成员是嵌套的 IEnumerable<T> 可枚举对象的 IAsyncEnumerable<T> 的扩展方法。 public static class AsyncEnumerableExtensions Inheritance object AsyncEnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) public static Task<IEnumerable<T>> FlattenAsync<T>(this IAsyncEnumerable<IEnumerable<T>> source) Parameters source IAsyncEnumerable<IEnumerable<T>> Returns Task<IEnumerable<T>> Type Parameters T Flatten<T>(IAsyncEnumerable<IEnumerable<T>>) 获取异步可枚举对象 source 的所有 IEnumerable<T> 成员，并将这些可枚举对象 IEnumerable<T> 中的所有成员迭代返回为一个 IEnumerable<T>。 public static IAsyncEnumerable<T> Flatten<T>(this IAsyncEnumerable<IEnumerable<T>> source) Parameters source IAsyncEnumerable<IEnumerable<T>> Returns IAsyncEnumerable<T> Type Parameters T"
  },
  "api/Kook.AttachmentType.html": {
    "href": "api/Kook.AttachmentType.html",
    "title": "Enum AttachmentType | Kook.Net 文档",
    "keywords": "Enum AttachmentType Namespace Kook Assembly Kook.Net.Core.dll 表示附件的类型。 public enum AttachmentType Fields Audio = 3 附件是一段音频。 File = 0 附件是一份文件。 Image = 1 附件是一张图片。 Video = 2 附件是一段视频。"
  },
  "api/Kook.Audio.AudioApplication.html": {
    "href": "api/Kook.Audio.AudioApplication.html",
    "title": "Enum AudioApplication | Kook.Net 文档",
    "keywords": "Enum AudioApplication Namespace Kook.Audio Assembly Kook.Net.Core.dll 表示音频应用程序的应用场景。 public enum AudioApplication Fields Mixed = 2 同时用于语音和音乐。 Music = 1 用于音乐。 Voice = 0 用于语音。"
  },
  "api/Kook.Audio.AudioInStream.html": {
    "href": "api/Kook.Audio.AudioInStream.html",
    "title": "Class AudioInStream | Kook.Net 文档",
    "keywords": "Class AudioInStream Namespace Kook.Audio Assembly Kook.Net.Core.dll 表示一个通用的输入音频流。 public abstract class AudioInStream : AudioStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioInStream Implements IAsyncDisposable IDisposable Derived InputStream Inherited Members AudioStream.CanSeek AudioStream.WriteHeader(ushort, uint, bool) AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.ClearAsync(CancellationToken) AudioStream.Length AudioStream.Position AudioStream.Read(byte[], int, int) AudioStream.SetLength(long) AudioStream.Seek(long, SeekOrigin) Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.Dispose(bool) Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AvailableFrames 获取当前可用的帧数。 public abstract int AvailableFrames { get; } Property Value int CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. public override bool CanRead { get; } Property Value bool true if the stream supports reading; otherwise, false. CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. public override bool CanWrite { get; } Property Value bool true if the stream supports writing; otherwise, false. Methods FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. public override Task FlushAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous flush operation. Exceptions ObjectDisposedException The stream has been disposed. ReadFrameAsync(CancellationToken) 读取一个 RTP 帧。 public abstract Task<RtpFrame> ReadFrameAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken 用于取消任务的取消令牌。 Returns Task<RtpFrame> 一个表示异步读取的任务。任务的结果为读取到的 RTP 帧。 TryReadFrame(CancellationToken, out RtpFrame) 尝试读取一个 RTP 帧。 public abstract bool TryReadFrame(CancellationToken cancellationToken, out RtpFrame frame) Parameters cancellationToken CancellationToken 用于取消任务的取消令牌。 frame RtpFrame 如果成功读取到 RTP 帧，则为读取到的 RTP 帧；否则为 default。 Returns bool 是否成功读取到 RTP 帧。"
  },
  "api/Kook.Audio.AudioOutStream.html": {
    "href": "api/Kook.Audio.AudioOutStream.html",
    "title": "Class AudioOutStream | Kook.Net 文档",
    "keywords": "Class AudioOutStream Namespace Kook.Audio Assembly Kook.Net.Core.dll 表示一个通用的输出音频流。 public abstract class AudioOutStream : AudioStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioOutStream Implements IAsyncDisposable IDisposable Derived BufferedWriteStream OpusDecodeStream OpusEncodeStream OutputStream RtpReadStream RtpWriteStream Inherited Members AudioStream.CanRead AudioStream.CanSeek AudioStream.WriteHeader(ushort, uint, bool) AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.ClearAsync(CancellationToken) AudioStream.Length AudioStream.Position Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.Dispose(bool) Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. public override bool CanWrite { get; } Property Value bool true if the stream supports writing; otherwise, false. Methods Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. public override int Read(byte[] buffer, int offset, int count) Parameters buffer byte[] An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. offset int The zero-based byte offset in buffer at which to begin storing the data read from the current stream. count int The maximum number of bytes to be read from the current stream. Returns int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Exceptions ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException 不支持读取此音频流。 Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. public override long Seek(long offset, SeekOrigin origin) Parameters offset long A byte offset relative to the origin parameter. origin SeekOrigin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns long The new position within the current stream. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException 不支持在此音频流中进行定位操作。 SetLength(long) When overridden in a derived class, sets the length of the current stream. public override void SetLength(long value) Parameters value long The desired length of the current stream in bytes. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException 不支持为此音频流设置长度。"
  },
  "api/Kook.Audio.AudioStream.html": {
    "href": "api/Kook.Audio.AudioStream.html",
    "title": "Class AudioStream | Kook.Net 文档",
    "keywords": "Class AudioStream Namespace Kook.Audio Assembly Kook.Net.Core.dll 表示一个通用的音频流。 public abstract class AudioStream : Stream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream Implements IAsyncDisposable IDisposable Derived AudioInStream AudioOutStream Inherited Members Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.Dispose(bool) Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. public override bool CanRead { get; } Property Value bool true if the stream supports reading; otherwise, false. CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. public override bool CanSeek { get; } Property Value bool true if the stream supports seeking; otherwise, false. CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. public override bool CanWrite { get; } Property Value bool true if the stream supports writing; otherwise, false. Length When overridden in a derived class, gets the length in bytes of the stream. public override long Length { get; } Property Value long A long value representing the length of the stream in bytes. Exceptions NotSupportedException A class derived from Stream does not support seeking and the length is unknown. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException 不支持获取此音频流的长度。 Position When overridden in a derived class, gets or sets the position within the current stream. public override long Position { get; set; } Property Value long The current position within the stream. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException 不支持获取或设置此音频流的位置。 Methods Clear() 清空该流. public void Clear() Remarks 此操作会导致丢失所有缓冲的数据。 ClearAsync(CancellationToken) 清空该流. public virtual Task ClearAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken 用于取消该异步操作的取消令牌。 Returns Task 一个清空操作的异步任务。 Remarks 此操作会导致丢失所有缓冲的数据。 Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. public override void Flush() Exceptions IOException An I/O error occurs. Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. public override int Read(byte[] buffer, int offset, int count) Parameters buffer byte[] An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. offset int The zero-based byte offset in buffer at which to begin storing the data read from the current stream. count int The maximum number of bytes to be read from the current stream. Returns int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Exceptions ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException 不支持读取此音频流。 Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. public override long Seek(long offset, SeekOrigin origin) Parameters offset long A byte offset relative to the origin parameter. origin SeekOrigin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns long The new position within the current stream. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException 不支持在此音频流中进行定位操作。 SetLength(long) When overridden in a derived class, sets the length of the current stream. public override void SetLength(long value) Parameters value long The desired length of the current stream in bytes. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException 不支持为此音频流设置长度。 Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. public override void Write(byte[] buffer, int offset, int count) Parameters buffer byte[] An array of bytes. This method copies count bytes from buffer to the current stream. offset int The zero-based byte offset in buffer at which to begin copying bytes to the current stream. count int The number of bytes to be written to the current stream. Exceptions ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. WriteHeader(ushort, uint, bool) 向流中写入一个头部信息。 public virtual void WriteHeader(ushort seq, uint timestamp, bool missed) Parameters seq ushort 头部的序列号。 timestamp uint 头部的时间戳。 missed bool 头部是否用于标识丢失的数据包。 Exceptions InvalidOperationException 该流不接收头部信息。"
  },
  "api/Kook.Audio.IAudioClient.html": {
    "href": "api/Kook.Audio.IAudioClient.html",
    "title": "Interface IAudioClient | Kook.Net 文档",
    "keywords": "Interface IAudioClient Namespace Kook.Audio Assembly Kook.Net.Core.dll 表示一个通用的音频客户端。 public interface IAudioClient : IDisposable Inherited Members IDisposable.Dispose() Properties ConnectionState 获取此客户端当前的连接状态。 ConnectionState ConnectionState { get; } Property Value ConnectionState UdpLatency 获取到语音 UDP 服务器的往返时间估计值，单位为毫秒。 int UdpLatency { get; } Property Value int Methods CreateDirectOpusStream() 使用 Opus 编解码器创建一个新的音频流，不设置缓冲区。 AudioOutStream CreateDirectOpusStream() Returns AudioOutStream 一个新的 Opus 音频流。 CreateDirectPcmStream(AudioApplication, int?, int) 使用 PCM 编解码器创建一个新的音频流，不设置缓冲区。 AudioOutStream CreateDirectPcmStream(AudioApplication application, int? bitrate = null, int packetLoss = 30) Parameters application AudioApplication 音频应用程序的应用场景。 bitrate int? 音频流的比特率，单位为比特每秒；留空则使用在请求建立音频通道时由 KOOK 返回的指定的比特率。 packetLoss int 音频流的丢包率，单位为百分比，默认值为 30%。 Returns AudioOutStream 一个新的 PCM 音频流。 Remarks warning 如果为 bitrate 设置了比特率，但比特率过多地超过了由 KOOK 返回的指定的比特率，语音连接可能会被 KOOK 语音服务断开。 CreateOpusStream(int) 使用 Opus 编解码器创建一个新的音频流。 AudioOutStream CreateOpusStream(int bufferMillis = 1000) Parameters bufferMillis int 音频流的缓冲区大小，单位为毫秒。 Returns AudioOutStream 一个新的 Opus 音频流。 CreatePcmStream(AudioApplication, int?, int, int) 使用 PCM 编解码器创建一个新的音频流。 AudioOutStream CreatePcmStream(AudioApplication application, int? bitrate = null, int bufferMillis = 1000, int packetLoss = 30) Parameters application AudioApplication 音频应用程序的应用场景。 bitrate int? 音频流的比特率，单位为比特每秒；留空则使用在请求建立音频通道时由 KOOK 返回的指定的比特率。 bufferMillis int 音频流的缓冲区大小，单位为毫秒。 packetLoss int 音频流的丢包率，单位为百分比，默认值为 30%。 Returns AudioOutStream 一个新的 PCM 音频流。 Remarks warning 如果为 bitrate 设置了比特率，但比特率过多地超过了由 KOOK 返回的指定的比特率，语音连接可能会被 KOOK 语音服务断开。 GetStreams() 获取该语音客户端所接收的所有音频输入流。 IReadOnlyDictionary<uint, AudioInStream> GetStreams() Returns IReadOnlyDictionary<uint, AudioInStream> 一个只读字典，其中键是 RTP 流的 SSRC 同步信源标识符，值是对应的音频输入流。 StopAsync() 停止该语音客户端发送音频。 Task StopAsync() Returns Task 一个停止操作的异步任务。 Events Connected 当客户端成功连接到语音服务器时引发。 event Func<Task> Connected Event Type Func<Task> Disconnected 当客户端从语音服务器断开连接时引发。 event Func<Exception, Task> Disconnected Event Type Func<Exception, Task> Remarks 事件参数： Exception 参数是导致连接断开的异常。 StreamCreated 当客户端接收到一个新的语音输入流时引发。 event Func<uint, AudioInStream, Task> StreamCreated Event Type Func<uint, AudioInStream, Task> Remarks important SSRC 为 RTP 实时传输协议中的同步信源标识符，RTP 会话中，每个媒体流应具有一个唯一的 SSRC 标识符。KOOK 服务端未通过网关下发用户与 RTP 流 SSRC 的映射关系，因此无法通过 SSRC 直接获取其关联的用户。Kook.Net 遵循 RTP 协议，以 SSRC 区分不同的信源，创建不同的 AudioInStream 实例，并引发此事件。 一般地，每个 SSRC 值都可以分别表示一个用户在一个语音频道内在一次连接与断开之间的音频流的唯一标识符， 同一用户切换语音频道或断开后重新连接到同一语音频道，KOOK 语音服务器都会为其分配新的 SSRC 标识符。 warning Bot 用户可以通过 API 指定要使用的 SSRC 标识符，这可能会导致 SSRC 碰撞。KOOK 开发者文档推荐 Bot 用户使用 1111 为 SSRC 标识符，如果需要区分音频流是否由 Bot 创建，可以尝试判断 SSRC 标识符是否为 1111 作为参考。Kook.Net 不以固定的 1111 作为 SSRC 标识符，而是使用随机值，如果音频由 Kook.Net 所构建的 Bot 推送，此方法可能无法区分该音频流是否由 Bot 创建。 事件参数： int 参数是 RTP 流的 SSRC 同步信源标识符。 AudioInStream 参数是所新创建的音频输入流。 StreamDestroyed 当音频输入流被销毁时引发。 event Func<uint, Task> StreamDestroyed Event Type Func<uint, Task> Remarks 事件参数： int 参数是 RTP 流的 SSRC 同步信源标识符。 UdpLatencyUpdated 当语音 UDP 服务器的延迟已更新时引发。 event Func<int, int, Task> UdpLatencyUpdated Event Type Func<int, int, Task> Remarks 事件参数： int 参数是更新前的延迟（毫秒）。 int 参数是更新后的延迟（毫秒）。"
  },
  "api/Kook.Audio.PeerPermissionInfo.html": {
    "href": "api/Kook.Audio.PeerPermissionInfo.html",
    "title": "Struct PeerPermissionInfo | Kook.Net 文档",
    "keywords": "Struct PeerPermissionInfo Namespace Kook.Audio Assembly Kook.Net.Core.dll 表示语音频道中其它语音客户端的权限信息。 public readonly struct PeerPermissionInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties CanConnect 获取是否可以连接到当前语音频道。 public bool CanConnect { get; init; } Property Value bool CanManageVoice 获取是否可以管理当前语音频道。 public bool CanManageVoice { get; init; } Property Value bool CanSpeak 获取是否可以在当前语音频道中说话。 public bool CanSpeak { get; init; } Property Value bool CanUseVoiceActivity 获取是否可以在当前语音频道使用语音活性检测，以自由麦的方式不按键即说话。 public bool CanUseVoiceActivity { get; init; } Property Value bool DeafenedByGuild 获取是否被服务器静音。 public bool DeafenedByGuild { get; init; } Property Value bool MutedByGuild 获取是否被服务器闭麦。 public bool MutedByGuild { get; init; } Property Value bool"
  },
  "api/Kook.Audio.RtpFrame.html": {
    "href": "api/Kook.Audio.RtpFrame.html",
    "title": "Struct RtpFrame | Kook.Net 文档",
    "keywords": "Struct RtpFrame Namespace Kook.Audio Assembly Kook.Net.Core.dll 表示一个 RTP 帧。 public readonly struct RtpFrame Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors RtpFrame(ushort, uint, byte[], bool) 初始化 RtpFrame 结构的新实例。 public RtpFrame(ushort sequence, uint timestamp, byte[] payload, bool missed) Parameters sequence ushort 序列号。 timestamp uint 时间戳。 payload byte[] 有效负载。 missed bool 是否丢失。 Properties Missed 获取此帧是否丢失。 public bool Missed { get; init; } Property Value bool Payload 获取此帧的有效负载。 public byte[] Payload { get; init; } Property Value byte[] Sequence 获取此帧的序列号。 public ushort Sequence { get; init; } Property Value ushort Timestamp 获取此帧的时间戳。 public uint Timestamp { get; init; } Property Value uint"
  },
  "api/Kook.Audio.SoundtrackInfo.html": {
    "href": "api/Kook.Audio.SoundtrackInfo.html",
    "title": "Struct SoundtrackInfo | Kook.Net 文档",
    "keywords": "Struct SoundtrackInfo Namespace Kook.Audio Assembly Kook.Net.Core.dll 表示计算机音频共享信息。 public readonly struct SoundtrackInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Music 获取计算机音频共享的音乐名称。 public string? Music { get; init; } Property Value string Singer 获取计算机音频共享的音乐的歌手名称。 public string? Singer { get; init; } Property Value string Software 获取计算机音频来源的应用程序名称。 public string? Software { get; init; } Property Value string"
  },
  "api/Kook.Audio.Streams.BufferedWriteStream.html": {
    "href": "api/Kook.Audio.Streams.BufferedWriteStream.html",
    "title": "Class BufferedWriteStream | Kook.Net 文档",
    "keywords": "Class BufferedWriteStream Namespace Kook.Audio.Streams Assembly Kook.Net.WebSocket.dll 表示一个定时缓冲的音频写入流，用于将定时缓冲的音频数据写入到下一个音频流中。 public class BufferedWriteStream : AudioOutStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioOutStream BufferedWriteStream Implements IAsyncDisposable IDisposable Inherited Members AudioOutStream.CanWrite AudioOutStream.Read(byte[], int, int) AudioOutStream.SetLength(long) AudioOutStream.Seek(long, SeekOrigin) AudioStream.CanRead AudioStream.CanSeek AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.Length AudioStream.Position Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ClearAsync(CancellationToken) 清空该流. public override Task ClearAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken 用于取消该异步操作的取消令牌。 Returns Task 一个清空操作的异步任务。 Remarks 此操作会导致丢失所有缓冲的数据。 Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. public override Task FlushAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous flush operation. Exceptions ObjectDisposedException The stream has been disposed. WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write data from. offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous write operation. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. WriteHeader(ushort, uint, bool) 向流中写入一个头部信息。 public override void WriteHeader(ushort seq, uint timestamp, bool missed) Parameters seq ushort 头部的序列号。 timestamp uint 头部的时间戳。 missed bool 头部是否用于标识丢失的数据包。 Exceptions InvalidOperationException 该流不接收头部信息。"
  },
  "api/Kook.Audio.Streams.InputStream.html": {
    "href": "api/Kook.Audio.Streams.InputStream.html",
    "title": "Class InputStream | Kook.Net 文档",
    "keywords": "Class InputStream Namespace Kook.Audio.Streams Assembly Kook.Net.WebSocket.dll 表示输入音频流，用于在 IAudioClient 实例中，从语音服务器接收语音数据。 public class InputStream : AudioInStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioInStream InputStream Implements IAsyncDisposable IDisposable Inherited Members AudioInStream.FlushAsync(CancellationToken) AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.ClearAsync(CancellationToken) AudioStream.Length AudioStream.Position AudioStream.Read(byte[], int, int) AudioStream.SetLength(long) AudioStream.Seek(long, SeekOrigin) Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InputStream() public InputStream() Properties AvailableFrames 获取当前可用的帧数。 public override int AvailableFrames { get; } Property Value int CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. public override bool CanRead { get; } Property Value bool true if the stream supports reading; otherwise, false. CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. public override bool CanSeek { get; } Property Value bool true if the stream supports seeking; otherwise, false. CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. public override bool CanWrite { get; } Property Value bool true if the stream supports writing; otherwise, false. Methods Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write the data into. offset int The byte offset in buffer at which to begin writing data from the stream. count int The maximum number of bytes to read. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. ReadFrameAsync(CancellationToken) 读取一个 RTP 帧。 public override Task<RtpFrame> ReadFrameAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken 用于取消任务的取消令牌。 Returns Task<RtpFrame> 一个表示异步读取的任务。任务的结果为读取到的 RTP 帧。 TryReadFrame(CancellationToken, out RtpFrame) 尝试读取一个 RTP 帧。 public override bool TryReadFrame(CancellationToken cancellationToken, out RtpFrame frame) Parameters cancellationToken CancellationToken 用于取消任务的取消令牌。 frame RtpFrame 如果成功读取到 RTP 帧，则为读取到的 RTP 帧；否则为 default。 Returns bool 是否成功读取到 RTP 帧。 WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write data from. offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous write operation. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. WriteHeader(ushort, uint, bool) 向流中写入一个头部信息。 public override void WriteHeader(ushort seq, uint timestamp, bool missed) Parameters seq ushort 头部的序列号。 timestamp uint 头部的时间戳。 missed bool 头部是否用于标识丢失的数据包。 Exceptions InvalidOperationException 该流不接收头部信息。"
  },
  "api/Kook.Audio.Streams.OpusDecodeStream.html": {
    "href": "api/Kook.Audio.Streams.OpusDecodeStream.html",
    "title": "Class OpusDecodeStream | Kook.Net 文档",
    "keywords": "Class OpusDecodeStream Namespace Kook.Audio.Streams Assembly Kook.Net.WebSocket.dll 表示一个 Opus 解码音频流。 public class OpusDecodeStream : AudioOutStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioOutStream OpusDecodeStream Implements IAsyncDisposable IDisposable Inherited Members AudioOutStream.CanWrite AudioOutStream.Read(byte[], int, int) AudioOutStream.SetLength(long) AudioOutStream.Seek(long, SeekOrigin) AudioStream.CanRead AudioStream.CanSeek AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.Length AudioStream.Position Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OpusDecodeStream(AudioStream) 初始化一个 OpusDecodeStream 类的新实例。 public OpusDecodeStream(AudioStream next) Parameters next AudioStream Fields SampleRate 获取音频流的采样率。 public const int SampleRate = 48000 Field Value int Methods ClearAsync(CancellationToken) 清空该流. public override Task ClearAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken 用于取消该异步操作的取消令牌。 Returns Task 一个清空操作的异步任务。 Remarks 此操作会导致丢失所有缓冲的数据。 Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. public override Task FlushAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous flush operation. Exceptions ObjectDisposedException The stream has been disposed. WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write data from. offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous write operation. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. InvalidOperationException 该流接收到没有 RTP 头部的有效负载。 WriteHeader(ushort, uint, bool) 向流中写入一个头部信息。 public override void WriteHeader(ushort seq, uint timestamp, bool missed) Parameters seq ushort 头部的序列号。 timestamp uint 头部的时间戳。 missed bool 头部是否用于标识丢失的数据包。 Exceptions InvalidOperationException 该流不接收头部信息。 InvalidOperationException 该流接收到没有有效负载的 RTP 头部。"
  },
  "api/Kook.Audio.Streams.OpusEncodeStream.html": {
    "href": "api/Kook.Audio.Streams.OpusEncodeStream.html",
    "title": "Class OpusEncodeStream | Kook.Net 文档",
    "keywords": "Class OpusEncodeStream Namespace Kook.Audio.Streams Assembly Kook.Net.WebSocket.dll 表示一个 Opus 编码音频流。 public class OpusEncodeStream : AudioOutStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioOutStream OpusEncodeStream Implements IAsyncDisposable IDisposable Inherited Members AudioOutStream.CanWrite AudioOutStream.Read(byte[], int, int) AudioOutStream.SetLength(long) AudioOutStream.Seek(long, SeekOrigin) AudioStream.CanRead AudioStream.CanSeek AudioStream.WriteHeader(ushort, uint, bool) AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.Length AudioStream.Position Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OpusEncodeStream(AudioStream, int, AudioApplication, int) 初始化一个 OpusEncodeStream 类的新实例。 public OpusEncodeStream(AudioStream next, int bitrate, AudioApplication application, int packetLoss) Parameters next AudioStream 要写入编码数据的音频流，是音频流写入链中的下一个音频流对象。 bitrate int 音频流的比特率。 application AudioApplication 音频应用程序的应用场景。 packetLoss int 音频流的丢包率。 Fields SampleRate 获取音频流的采样率。 public const int SampleRate = 48000 Field Value int Methods ClearAsync(CancellationToken) 清空该流. public override Task ClearAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken 用于取消该异步操作的取消令牌。 Returns Task 一个清空操作的异步任务。 Remarks 此操作会导致丢失所有缓冲的数据。 Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. public override Task FlushAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous flush operation. Exceptions ObjectDisposedException The stream has been disposed. WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write data from. offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous write operation. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. WriteSilentFramesAsync() 发送静默帧以避免数据传输中断后的插值错误。 public Task WriteSilentFramesAsync() Returns Task 一个表示写入静默帧操作的异步任务。"
  },
  "api/Kook.Audio.Streams.OutputStream.html": {
    "href": "api/Kook.Audio.Streams.OutputStream.html",
    "title": "Class OutputStream | Kook.Net 文档",
    "keywords": "Class OutputStream Namespace Kook.Audio.Streams Assembly Kook.Net.WebSocket.dll 表示输出音频流，用于包装一个 IAudioClient，在写入时向语音服务器发送语音数据。 public class OutputStream : AudioOutStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioOutStream OutputStream Implements IAsyncDisposable IDisposable Inherited Members AudioOutStream.CanWrite AudioOutStream.Read(byte[], int, int) AudioOutStream.SetLength(long) AudioOutStream.Seek(long, SeekOrigin) AudioStream.CanRead AudioStream.CanSeek AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.ClearAsync(CancellationToken) AudioStream.Length AudioStream.Position Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.Dispose(bool) Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write data from. offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous write operation. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. WriteHeader(ushort, uint, bool) 向流中写入一个头部信息。 public override void WriteHeader(ushort seq, uint timestamp, bool missed) Parameters seq ushort 头部的序列号。 timestamp uint 头部的时间戳。 missed bool 头部是否用于标识丢失的数据包。 Exceptions InvalidOperationException 该流不接收头部信息。"
  },
  "api/Kook.Audio.Streams.RtpReadStream.html": {
    "href": "api/Kook.Audio.Streams.RtpReadStream.html",
    "title": "Class RtpReadStream | Kook.Net 文档",
    "keywords": "Class RtpReadStream Namespace Kook.Audio.Streams Assembly Kook.Net.WebSocket.dll 表示一个 RTP 帧读取流。 public class RtpReadStream : AudioOutStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioOutStream RtpReadStream Implements IAsyncDisposable IDisposable Inherited Members AudioOutStream.Read(byte[], int, int) AudioOutStream.SetLength(long) AudioOutStream.Seek(long, SeekOrigin) AudioStream.WriteHeader(ushort, uint, bool) AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.ClearAsync(CancellationToken) AudioStream.Length AudioStream.Position Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RtpReadStream(AudioStream, int) public RtpReadStream(AudioStream next, int bufferSize = 4000) Parameters next AudioStream bufferSize int Properties CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. public override bool CanRead { get; } Property Value bool true if the stream supports reading; otherwise, false. CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. public override bool CanSeek { get; } Property Value bool true if the stream supports seeking; otherwise, false. CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. public override bool CanWrite { get; } Property Value bool true if the stream supports writing; otherwise, false. Methods Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. GetHeaderSize(byte[], int) 获取 RTP 数据报的头部大小。 public static int GetHeaderSize(byte[] buffer, int offset) Parameters buffer byte[] 要获取头部大小的数据报。 offset int 数据报的偏移量。 Returns int 数据报的头部大小。 TryReadSsrc(byte[], int, out uint) 尝试从 RTP 数据报中读取 SSRC。 public static bool TryReadSsrc(byte[] buffer, int offset, out uint ssrc) Parameters buffer byte[] 要从中读取 SSRC 的数据报。 offset int 数据报的偏移量。 ssrc uint 如果读取成功，则为 SSRC 值；否则为 0。 Returns bool 读取是否成功。 WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write data from. offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous write operation. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation."
  },
  "api/Kook.Audio.Streams.RtpWriteStream.html": {
    "href": "api/Kook.Audio.Streams.RtpWriteStream.html",
    "title": "Class RtpWriteStream | Kook.Net 文档",
    "keywords": "Class RtpWriteStream Namespace Kook.Audio.Streams Assembly Kook.Net.WebSocket.dll 表示一个 RTP 帧写入流。 public class RtpWriteStream : AudioOutStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioOutStream RtpWriteStream Implements IAsyncDisposable IDisposable Inherited Members AudioOutStream.CanWrite AudioOutStream.Read(byte[], int, int) AudioOutStream.SetLength(long) AudioOutStream.Seek(long, SeekOrigin) AudioStream.CanRead AudioStream.CanSeek AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.Length AudioStream.Position Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RtpWriteStream(AudioStream, uint, byte, int) 初始化一个 RtpWriteStream 类的新实例。 public RtpWriteStream(AudioStream next, uint ssrc, byte payloadType, int bufferSize = 4000) Parameters next AudioStream 要写入 RTP 帧数据的音频流，是音频流写入链中的下一个音频流对象。 ssrc uint RTP 连接的同步源标识符。 payloadType byte RTP 连接的负载类型。 bufferSize int RTP 帧缓冲区的大小，默认为 4000 字节。 Methods ClearAsync(CancellationToken) 清空该流. public override Task ClearAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken 用于取消该异步操作的取消令牌。 Returns Task 一个清空操作的异步任务。 Remarks 此操作会导致丢失所有缓冲的数据。 Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. public override Task FlushAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous flush operation. Exceptions ObjectDisposedException The stream has been disposed. WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write data from. offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous write operation. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. WriteHeader(ushort, uint, bool) 向流中写入一个头部信息。 public override void WriteHeader(ushort seq, uint timestamp, bool missed) Parameters seq ushort 头部的序列号。 timestamp uint 头部的时间戳。 missed bool 头部是否用于标识丢失的数据包。 Exceptions InvalidOperationException 该流不接收头部信息。"
  },
  "api/Kook.Audio.Streams.html": {
    "href": "api/Kook.Audio.Streams.html",
    "title": "Namespace Kook.Audio.Streams | Kook.Net 文档",
    "keywords": "Namespace Kook.Audio.Streams Classes BufferedWriteStream 表示一个定时缓冲的音频写入流，用于将定时缓冲的音频数据写入到下一个音频流中。 InputStream 表示输入音频流，用于在 IAudioClient 实例中，从语音服务器接收语音数据。 OpusDecodeStream 表示一个 Opus 解码音频流。 OpusEncodeStream 表示一个 Opus 编码音频流。 OutputStream 表示输出音频流，用于包装一个 IAudioClient，在写入时向语音服务器发送语音数据。 RtpReadStream 表示一个 RTP 帧读取流。 RtpWriteStream 表示一个 RTP 帧写入流。"
  },
  "api/Kook.Audio.html": {
    "href": "api/Kook.Audio.html",
    "title": "Namespace Kook.Audio | Kook.Net 文档",
    "keywords": "Namespace Kook.Audio Classes AudioInStream 表示一个通用的输入音频流。 AudioOutStream 表示一个通用的输出音频流。 AudioStream 表示一个通用的音频流。 Structs PeerPermissionInfo 表示语音频道中其它语音客户端的权限信息。 RtpFrame 表示一个 RTP 帧。 SoundtrackInfo 表示计算机音频共享信息。 Interfaces IAudioClient 表示一个通用的音频客户端。 Enums AudioApplication 表示音频应用程序的应用场景。"
  },
  "api/Kook.AudioModule.html": {
    "href": "api/Kook.AudioModule.html",
    "title": "Class AudioModule | Kook.Net 文档",
    "keywords": "Class AudioModule Namespace Kook Assembly Kook.Net.Core.dll 音频模块，可用于 ICard 中。 public class AudioModule : IMediaModule, IModule, IEquatable<AudioModule>, IEquatable<IModule> Inheritance object AudioModule Implements IMediaModule IModule IEquatable<AudioModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(AudioModule) CardExtensions.ToBuilder(IModule) Properties Cover 获取音频的封面的 URL。 public string? Cover { get; } Property Value string Source 获取音频的 URL。 public string Source { get; } Property Value string Title 获取音频的标题。 public string? Title { get; } Property Value string Type 获取模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods Equals(AudioModule?) Indicates whether the current object is equal to another object of the same type. public bool Equals(AudioModule? audioModule) Parameters audioModule AudioModule Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(AudioModule, AudioModule) 判定两个 AudioModule 是否相等。 public static bool operator ==(AudioModule left, AudioModule right) Parameters left AudioModule right AudioModule Returns bool 如果两个 AudioModule 相等，则为 true；否则为 false。 operator !=(AudioModule, AudioModule) 判定两个 AudioModule 是否不相等。 public static bool operator !=(AudioModule left, AudioModule right) Parameters left AudioModule right AudioModule Returns bool 如果两个 AudioModule 不相等，则为 true；否则为 false。"
  },
  "api/Kook.AudioModuleBuilder.html": {
    "href": "api/Kook.AudioModuleBuilder.html",
    "title": "Class AudioModuleBuilder | Kook.Net 文档",
    "keywords": "Class AudioModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll 用来构建 AudioModuleBuilder 模块的构建器。 public class AudioModuleBuilder : IModuleBuilder, IEquatable<AudioModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object AudioModuleBuilder Implements IModuleBuilder IEquatable<AudioModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AudioModuleBuilder() 初始化一个 AudioModuleBuilder 类的新实例。 public AudioModuleBuilder() AudioModuleBuilder(string, string?, string?) 初始化一个 AudioModuleBuilder 类的新实例。 public AudioModuleBuilder(string source, string? cover = null, string? title = null) Parameters source string 音频的 URL。 cover string 音频的封面的 URL。 title string 音频的标题。 Properties Cover 获取或设置音频的封面的 URL。 public string? Cover { get; set; } Property Value string Source 获取或设置音频的 URL。 public string? Source { get; set; } Property Value string Title 获取或设置音频的标题。 public string? Title { get; set; } Property Value string Type 获取此构建器构建的模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods Build() 构建当前构建器为一个 AudioModule 对象。 public AudioModule Build() Returns AudioModule 由当前构建器表示的属性构建的 AudioModule 对象。 Exceptions ArgumentNullException Source 为 null。 ArgumentException Source 为空字符串。 UriFormatException Source 不是有效的 URL。 Equals(AudioModuleBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(AudioModuleBuilder? audioModuleBuilder) Parameters audioModuleBuilder AudioModuleBuilder Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithCover(string?) 设置音频的封面的 URL。 public AudioModuleBuilder WithCover(string? cover) Parameters cover string 音频的封面的 URL。 Returns AudioModuleBuilder 当前构建器。 WithSource(string?) 设置音频的 URL。 public AudioModuleBuilder WithSource(string? source) Parameters source string 音频的 URL。 Returns AudioModuleBuilder 当前构建器。 WithTitle(string?) 设置音频的标题。 public AudioModuleBuilder WithTitle(string? title) Parameters title string 音频的标题。 Returns AudioModuleBuilder 当前构建器。 Operators operator ==(AudioModuleBuilder?, AudioModuleBuilder?) 判定两个 AudioModuleBuilder 是否相等。 public static bool operator ==(AudioModuleBuilder? left, AudioModuleBuilder? right) Parameters left AudioModuleBuilder right AudioModuleBuilder Returns bool 如果两个 AudioModuleBuilder 相等，则为 true；否则为 false。 operator !=(AudioModuleBuilder?, AudioModuleBuilder?) 判定两个 AudioModuleBuilder 是否不相等。 public static bool operator !=(AudioModuleBuilder? left, AudioModuleBuilder? right) Parameters left AudioModuleBuilder right AudioModuleBuilder Returns bool 如果两个 AudioModuleBuilder 不相等，则为 true；否则为 false。"
  },
  "api/Kook.BadgeStyle.html": {
    "href": "api/Kook.BadgeStyle.html",
    "title": "Enum BadgeStyle | Kook.Net 文档",
    "keywords": "Enum BadgeStyle Namespace Kook Assembly Kook.Net.Core.dll 表示徽章的样式。 public enum BadgeStyle Fields GuildName = 0 徽章展示服务器名称。 OnlineAndTotalMemberCount = 2 徽章展示服务器在线成员数量和总成员数量。 OnlineMemberCount = 1 徽章展示服务器在线成员数量。"
  },
  "api/Kook.BilibiliVideoEmbed.html": {
    "href": "api/Kook.BilibiliVideoEmbed.html",
    "title": "Struct BilibiliVideoEmbed | Kook.Net 文档",
    "keywords": "Struct BilibiliVideoEmbed Namespace Kook Assembly Kook.Net.Core.dll 表示一个消息中解析出的哔哩哔哩视频嵌入式内容。 public struct BilibiliVideoEmbed : IEmbed Implements IEmbed Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties BvNumber 获取视频的 BV 号。 public readonly string BvNumber { get; } Property Value string Cover 获取图像封面图像的 URL。 public readonly string Cover { get; } Property Value string Duration 获取视频的时长。 public readonly TimeSpan Duration { get; } Property Value TimeSpan IframePath 获取视频的 iframe 路径。 public readonly string IframePath { get; } Property Value string OriginUrl 获取嵌入式内容所解析的原始 URL。 public readonly string OriginUrl { get; } Property Value string Title 获取视频的标题。 public readonly string Title { get; } Property Value string Type 获取此嵌入式内容的类型。 public EmbedType Type { get; } Property Value EmbedType Url 获取视频所在页面的 URL。 public readonly string Url { get; } Property Value string"
  },
  "api/Kook.BoostLevel.html": {
    "href": "api/Kook.BoostLevel.html",
    "title": "Enum BoostLevel | Kook.Net 文档",
    "keywords": "Enum BoostLevel Namespace Kook Assembly Kook.Net.Core.dll 表示一个服务器助力等级。 public enum BoostLevel Fields Level1 = 1 服务器助力等级 1。 Level2 = 2 服务器助力等级 2。 Level3 = 3 服务器助力等级 3。 Level4 = 4 服务器助力等级 4。 Level5 = 5 服务器助力等级 5。 Level6 = 6 服务器助力等级 6。 None = 0 服务器助力等级 0。"
  },
  "api/Kook.BoostSubscriptionMetadata.html": {
    "href": "api/Kook.BoostSubscriptionMetadata.html",
    "title": "Class BoostSubscriptionMetadata | Kook.Net 文档",
    "keywords": "Class BoostSubscriptionMetadata Namespace Kook Assembly Kook.Net.Core.dll 表示一个包含服务器助力订阅信息的元数据。 public class BoostSubscriptionMetadata Inheritance object BoostSubscriptionMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count 获取用户为此订阅所使用的助力包数量。 public int Count { get; } Property Value int IsValid 获取此订阅是否仍在有效期内。 public bool IsValid { get; } Property Value bool Since 获取此订阅开始的日期和时间。 public DateTimeOffset Since { get; } Property Value DateTimeOffset Until 获取此订阅将于或已于何时结束的日期和时间。 public DateTimeOffset Until { get; } Property Value DateTimeOffset"
  },
  "api/Kook.ButtonClickEventType.html": {
    "href": "api/Kook.ButtonClickEventType.html",
    "title": "Enum ButtonClickEventType | Kook.Net 文档",
    "keywords": "Enum ButtonClickEventType Namespace Kook Assembly Kook.Net.Core.dll 表示 ButtonElement 被点击时触发的事件类型。 public enum ButtonClickEventType Fields Link = 1 用户点击按钮时将会被重定向到指定的 URL。 None = 0 用户点击按钮时不会触发任何事件。 ReturnValue = 2 用户点击按钮时将会提交按钮的 Value 属性的值，KOOK 将会通过网关携带此值下发事件。"
  },
  "api/Kook.ButtonElement.html": {
    "href": "api/Kook.ButtonElement.html",
    "title": "Class ButtonElement | Kook.Net 文档",
    "keywords": "Class ButtonElement Namespace Kook Assembly Kook.Net.Core.dll 按钮元素，可用于 IModule 中。 public class ButtonElement : IElement, IEquatable<ButtonElement>, IEquatable<IElement> Inheritance object ButtonElement Implements IElement IEquatable<ButtonElement> IEquatable<IElement> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(ButtonElement) CardExtensions.ToBuilder(IElement) Properties Click 获取按钮被点击时触发的事件类型。 public ButtonClickEventType? Click { get; } Property Value ButtonClickEventType? Text 获取按钮的文本元素。 public IElement Text { get; } Property Value IElement Theme 获取按钮的主题。 public ButtonTheme? Theme { get; } Property Value ButtonTheme? Type 获取元素的类型。 public ElementType Type { get; } Property Value ElementType Value 获取按钮的值。 public string? Value { get; } Property Value string Methods Equals(ButtonElement?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ButtonElement? buttonElement) Parameters buttonElement ButtonElement Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ButtonElement?, ButtonElement?) 判定两个 ButtonElement 是否相等。 public static bool operator ==(ButtonElement? left, ButtonElement? right) Parameters left ButtonElement right ButtonElement Returns bool 如果两个 ButtonElement 相等，则为 true；否则为 false。 operator !=(ButtonElement?, ButtonElement?) 判定两个 ButtonElement 是否不相等。 public static bool operator !=(ButtonElement? left, ButtonElement? right) Parameters left ButtonElement right ButtonElement Returns bool 如果两个 ButtonElement 不相等，则为 true；否则为 false。"
  },
  "api/Kook.ButtonElementBuilder.html": {
    "href": "api/Kook.ButtonElementBuilder.html",
    "title": "Class ButtonElementBuilder | Kook.Net 文档",
    "keywords": "Class ButtonElementBuilder Namespace Kook Assembly Kook.Net.Core.dll 用来构建 ButtonElement 元素的构建器。 public class ButtonElementBuilder : IElementBuilder, IEquatable<ButtonElementBuilder>, IEquatable<IElementBuilder> Inheritance object ButtonElementBuilder Implements IElementBuilder IEquatable<ButtonElementBuilder> IEquatable<IElementBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ButtonElementBuilder() 初始化一个 ButtonElementBuilder 类的新实例。 public ButtonElementBuilder() ButtonElementBuilder(string, ButtonTheme, string?, ButtonClickEventType) 初始化一个 ButtonElementBuilder 类的新实例。 public ButtonElementBuilder(string text, ButtonTheme theme = ButtonTheme.Primary, string? value = null, ButtonClickEventType click = ButtonClickEventType.None) Parameters text string 按钮的文本。 theme ButtonTheme 按钮的主题。 value string 按钮的值。 click ButtonClickEventType 按钮的点击事件类型。 Remarks 如果 click 设置为 ReturnValue， 则在用户点击按钮时，KOOK 会通过网关下发按钮点击事件，并携带 value 的值。 如果 click 设置为 Link， 则在用户点击按钮时，KOOK 会将用户重定向到 value 指定的 URL。 Fields MaxButtonTextLength 按钮文本的最大长度。 public const int MaxButtonTextLength = 40 Field Value int Properties Click 获取或设置按钮被点击时触发的事件类型。 public ButtonClickEventType Click { get; set; } Property Value ButtonClickEventType Remarks 如果此属性设置为 ReturnValue， 则在用户点击按钮时，KOOK 会通过网关下发按钮点击事件，并携带 Value 的值。 如果此属性设置为 Link， 则在用户点击按钮时，KOOK 会将用户重定向到 Value 指定的 URL。 Text 获取或设置按钮的文本元素。 public IElementBuilder? Text { get; set; } Property Value IElementBuilder Remarks 此属性只接受 PlainTextElementBuilder 或 KMarkdownElementBuilder。 Theme 获取或设置按钮的主题。 public ButtonTheme Theme { get; set; } Property Value ButtonTheme Type 获取此构建器构建的元素的类型。 public ElementType Type { get; } Property Value ElementType Value 获取或设置按钮的值。 public string? Value { get; set; } Property Value string Remarks 如果 Click 设置为 ReturnValue， 则在用户点击按钮时，KOOK 会通过网关下发按钮点击事件，并携带此属性的值。 如果 Click 设置为 Link， 则在用户点击按钮时，KOOK 会将用户重定向到此属性指定的 URL。 Methods Build() 构建当前构建器为一个 ButtonElement。 public ButtonElement Build() Returns ButtonElement 由当前构建器表示的属性构建的 ButtonElement 对象。 Exceptions ArgumentException Text 既不是 PlainTextElementBuilder 也不是 KMarkdownElementBuilder。 ArgumentNullException Text 为 null。 ArgumentException Text 为空字符串。 ArgumentException 文本的长度超过了 MaxButtonTextLength。 ArgumentException Click 为 Link 但 Value 为 null 或空。 UriFormatException Value 不是有效的 URL。 Equals(ButtonElementBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ButtonElementBuilder? buttonElementBuilder) Parameters buttonElementBuilder ButtonElementBuilder Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithClick(ButtonClickEventType) 设置按钮被点击时触发的事件类型，值将被设置到 Click 属性上。 public ButtonElementBuilder WithClick(ButtonClickEventType click) Parameters click ButtonClickEventType 按钮的点击事件类型。 Returns ButtonElementBuilder 当前构建器。 WithText(KMarkdownElementBuilder) 设置按钮的文本。 public ButtonElementBuilder WithText(KMarkdownElementBuilder text) Parameters text KMarkdownElementBuilder 按钮的文本。 Returns ButtonElementBuilder 当前构建器。 WithText(PlainTextElementBuilder) 设置按钮的文本。 public ButtonElementBuilder WithText(PlainTextElementBuilder text) Parameters text PlainTextElementBuilder 按钮的文本。 Returns ButtonElementBuilder 当前构建器。 WithText(string, bool) 设置按钮的文本。 public ButtonElementBuilder WithText(string text, bool isKMarkdown = false) Parameters text string 按钮的文本。 isKMarkdown bool 文本是否为 KMarkdown 格式；如果为 true，则文本将被设置为 KMarkdownElement；如果为 false，则文本将被设置为 PlainTextElement。 Returns ButtonElementBuilder 当前构建器。 WithText<T>(Action<T>) 设置按钮的文本。 public ButtonElementBuilder WithText<T>(Action<T> action) where T : IElementBuilder, new() Parameters action Action<T> 一个包含对新创建的文本元素构建器进行配置的操作的委托，委托的入参类型必须是 PlainTextElementBuilder 或 KMarkdownElementBuilder。 Returns ButtonElementBuilder 当前构建器。 Type Parameters T WithTheme(ButtonTheme) 设置按钮的主题，值将被设置到 Theme 属性上。 public ButtonElementBuilder WithTheme(ButtonTheme theme) Parameters theme ButtonTheme 按钮的主题。 Returns ButtonElementBuilder 当前构建器。 WithValue(string?) 设置按钮的值，值将被设置到 Value 属性上。 public ButtonElementBuilder WithValue(string? value) Parameters value string 按钮的值。 Returns ButtonElementBuilder 当前构建器。 Operators operator ==(ButtonElementBuilder?, ButtonElementBuilder?) 判定两个 ButtonElementBuilder 是否相等。 public static bool operator ==(ButtonElementBuilder? left, ButtonElementBuilder? right) Parameters left ButtonElementBuilder right ButtonElementBuilder Returns bool 如果两个 ButtonElementBuilder 相等，则为 true；否则为 false。 operator !=(ButtonElementBuilder?, ButtonElementBuilder?) 判定两个 ButtonElementBuilder 是否不相等。 public static bool operator !=(ButtonElementBuilder? left, ButtonElementBuilder? right) Parameters left ButtonElementBuilder right ButtonElementBuilder Returns bool 如果两个 ButtonElementBuilder 不相等，则为 true；否则为 false。"
  },
  "api/Kook.ButtonTheme.html": {
    "href": "api/Kook.ButtonTheme.html",
    "title": "Enum ButtonTheme | Kook.Net 文档",
    "keywords": "Enum ButtonTheme Namespace Kook Assembly Kook.Net.Core.dll 表示 ButtonElement 的主题。 public enum ButtonTheme Fields Danger = 3 外观表现为危险。 Info = 4 外观表现为信息。 Primary = 0 外观表现为主要操作。 Secondary = 5 外观表现为次要操作。 Success = 1 外观表现为成功。 Warning = 2 外观表现为警告。"
  },
  "api/Kook.CacheMode.html": {
    "href": "api/Kook.CacheMode.html",
    "title": "Enum CacheMode | Kook.Net 文档",
    "keywords": "Enum CacheMode Namespace Kook Assembly Kook.Net.Core.dll 表示应该使用的缓存模式。 public enum CacheMode Fields AllowDownload = 0 允许在实体不存在于现有缓存中时下载对象。 CacheOnly = 1 仅允许从现有缓存中提取对象。"
  },
  "api/Kook.Cacheable-2.html": {
    "href": "api/Kook.Cacheable-2.html",
    "title": "Struct Cacheable<TEntity, TId> | Kook.Net 文档",
    "keywords": "Struct Cacheable<TEntity, TId> Namespace Kook Assembly Kook.Net.Core.dll 表示一个可延迟加载的缓存实体。 public readonly struct Cacheable<TEntity, TId> where TEntity : IEntity<TId> where TId : IEquatable<TId> Type Parameters TEntity 可延迟加载的缓存实体的类型。 TId 可延迟加载的缓存实体的 ID 的类型。 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties HasValue 获取此实体是否已缓存。 public bool HasValue { get; } Property Value bool Id 获取此实体的唯一标识符。 public TId Id { get; } Property Value TId Value 如果可以从缓存中获取实体，则获取该实体。 public TEntity? Value { get; } Property Value TEntity Remarks 此属性不保证非空；在无法从缓存中拉取实体的情况下，此属性返回 null。 Methods DownloadAsync() 将此实体下载到缓存中。 public Task<TEntity?> DownloadAsync() Returns Task<TEntity> 一个表示异步下载操作的任务。任务结果包含下载的实体；如果无法通过 API 请求下载实体，或下载的实体无法转换为 TEntity，则为 null。 GetOrDownloadAsync() 如果实体已存在于缓存中，则返回该实体；否则下载该实体并返回。 public Task<TEntity?> GetOrDownloadAsync() Returns Task<TEntity> 一个表示异步获取或下载操作的任务。任务结果包含所获取或下载的实体；如果无法通过 API 请求下载实体，或下载的实体无法转换为 TEntity，则为 null。"
  },
  "api/Kook.Cacheable-4.html": {
    "href": "api/Kook.Cacheable-4.html",
    "title": "Struct Cacheable<TCachedEntity, TDownloadableEntity, TRelationship, TId> | Kook.Net 文档",
    "keywords": "Struct Cacheable<TCachedEntity, TDownloadableEntity, TRelationship, TId> Namespace Kook Assembly Kook.Net.Core.dll 表示一个可延迟加载的缓存实体。 public readonly struct Cacheable<TCachedEntity, TDownloadableEntity, TRelationship, TId> where TCachedEntity : IEntity<TId>, TRelationship where TDownloadableEntity : IEntity<TId>, TRelationship where TId : IEquatable<TId> Type Parameters TCachedEntity 可延迟加载的缓存实体的类型。 TDownloadableEntity 可从 API 请求下载的实体的类型。 TRelationship 由 TCachedEntity 和 TDownloadableEntity 共同继承或实现的类型。 TId 可延迟加载的缓存实体的 ID 的类型。 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties HasValue 获取此实体是否已缓存。 public bool HasValue { get; } Property Value bool Id 获取此实体的唯一标识符。 public TId Id { get; } Property Value TId Value 如果可以从缓存中获取实体，则获取该实体。 public TCachedEntity? Value { get; } Property Value TCachedEntity Remarks 此属性不保证非空；在无法从缓存中拉取实体的情况下，此属性返回 null。 Methods DownloadAsync() 将此实体下载到缓存中。 public Task<TDownloadableEntity?> DownloadAsync() Returns Task<TDownloadableEntity> 一个表示异步下载操作的任务。任务结果包含下载的实体；如果无法通过 API 请求下载实体，或下载的实体无法转换为 TDownloadableEntity，则为 null。 GetOrDownloadAsync() 如果实体已存在于缓存中，则返回该实体；否则下载该实体并返回。 public Task<TRelationship?> GetOrDownloadAsync() Returns Task<TRelationship> 一个表示异步获取或下载操作的任务。任务结果包含所获取或下载的实体；如果无法通过 API 请求下载实体，或下载的实体无法转换为 TDownloadableEntity，则为 null。"
  },
  "api/Kook.Card.html": {
    "href": "api/Kook.Card.html",
    "title": "Class Card | Kook.Net 文档",
    "keywords": "Class Card Namespace Kook Assembly Kook.Net.Core.dll 表示一个卡片对象，可用于卡片消息。 public class Card : ICard, IEquatable<Card>, IEquatable<ICard> Inheritance object Card Implements ICard IEquatable<Card> IEquatable<ICard> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(Card) CardExtensions.ToBuilder(ICard) CardJsonExtension.ToJsonString(ICard, bool) Properties Color 获取卡片侧边的颜色。 public Color? Color { get; } Property Value Color? ModuleCount 获取卡片中模块的数量。 public int ModuleCount { get; } Property Value int Modules 获取卡片的模块。 public ImmutableArray<IModule> Modules { get; } Property Value ImmutableArray<IModule> Size 获取卡片的大小。 public CardSize Size { get; } Property Value CardSize Theme 获取卡片的主题。 public CardTheme Theme { get; } Property Value CardTheme Type 获取卡片的类型。 public CardType Type { get; } Property Value CardType Methods Equals(Card?) Indicates whether the current object is equal to another object of the same type. public bool Equals(Card? card) Parameters card Card Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(Card, Card) 判定两个 Card 是否相等。 public static bool operator ==(Card left, Card right) Parameters left Card right Card Returns bool 如果两个 Card 相等，则为 true；否则为 false。 operator !=(Card, Card) 判定两个 Card 是否不相等。 public static bool operator !=(Card left, Card right) Parameters left Card right Card Returns bool 如果两个 Card 不相等，则为 true；否则为 false。"
  },
  "api/Kook.CardBuilder.html": {
    "href": "api/Kook.CardBuilder.html",
    "title": "Class CardBuilder | Kook.Net 文档",
    "keywords": "Class CardBuilder Namespace Kook Assembly Kook.Net.Core.dll 用来构建 Card 卡片的构建器。 public class CardBuilder : ICardBuilder, IEquatable<CardBuilder>, IEquatable<ICardBuilder> Inheritance object CardBuilder Implements ICardBuilder IEquatable<CardBuilder> IEquatable<ICardBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardJsonExtension.ToJsonString(ICardBuilder, bool) Constructors CardBuilder(CardTheme, Color?, CardSize, IList<IModuleBuilder>?) 初始化一个 CardBuilder 类的新实例。 public CardBuilder(CardTheme theme = CardTheme.Primary, Color? color = null, CardSize size = CardSize.Large, IList<IModuleBuilder>? modules = null) Parameters theme CardTheme 卡片的主题。 color Color? 卡片侧边的颜色。 size CardSize 卡片的大小。 modules IList<IModuleBuilder> 卡片的模块。 Properties Color 获取或设置卡片侧边的颜色。 public Color? Color { get; set; } Property Value Color? Remarks 此属性的优先级高于 Theme 属性。 Modules 获取或设置卡片的模块。 public IList<IModuleBuilder> Modules { get; set; } Property Value IList<IModuleBuilder> Size 获取或设置卡片的大小。 public CardSize Size { get; set; } Property Value CardSize Theme 获取或设置卡片的主题。 public CardTheme Theme { get; set; } Property Value CardTheme Remarks Color 属性的优先级高于此属性。 Type 获取此构建器构建的卡片的类型。 public CardType Type { get; } Property Value CardType Methods AddModule(IModuleBuilder) 添加一个模块到卡片。 public CardBuilder AddModule(IModuleBuilder module) Parameters module IModuleBuilder 要添加的模块。 Returns CardBuilder 当前构建器。 AddModule<T>(Action<T>?) 添加一个模块到卡片。 public CardBuilder AddModule<T>(Action<T>? action = null) where T : IModuleBuilder, new() Parameters action Action<T> 一个包含对要添加的新创建的模块进行配置的操作的委托。 Returns CardBuilder 当前构建器。 Type Parameters T Build() 构建当前构建器为一个 Card。 public Card Build() Returns Card 由当前构建器表示的属性构建的 Card 对象。 Equals(CardBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(CardBuilder? cardBuilder) Parameters cardBuilder CardBuilder Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithColor(Color?) 设置卡片侧边的颜色。 public CardBuilder WithColor(Color? color) Parameters color Color? 卡片侧边的颜色。 Returns CardBuilder 当前构建器。 Remarks Color 属性的优先级高于 Theme 属性。 WithSize(CardSize) 设置卡片的大小。 public CardBuilder WithSize(CardSize size) Parameters size CardSize 卡片的大小。 Returns CardBuilder 当前构建器。 WithTheme(CardTheme) 设置卡片的主题。 public CardBuilder WithTheme(CardTheme theme) Parameters theme CardTheme 卡片的主题。 Returns CardBuilder 当前构建器。 Remarks Color 属性的优先级高于 Theme 属性。 Operators operator ==(CardBuilder?, CardBuilder?) 判定两个 CardBuilder 是否相等。 public static bool operator ==(CardBuilder? left, CardBuilder? right) Parameters left CardBuilder right CardBuilder Returns bool 如果两个 CardBuilder 相等，则为 true；否则为 false。 operator !=(CardBuilder?, CardBuilder?) 判定两个 CardBuilder 是否不相等。 public static bool operator !=(CardBuilder? left, CardBuilder? right) Parameters left CardBuilder right CardBuilder Returns bool 如果两个 CardBuilder 不相等，则为 true；否则为 false。"
  },
  "api/Kook.CardEmbed.html": {
    "href": "api/Kook.CardEmbed.html",
    "title": "Struct CardEmbed | Kook.Net 文档",
    "keywords": "Struct CardEmbed Namespace Kook Assembly Kook.Net.Core.dll 表示一个消息中解析出的卡片嵌入式内容。 public struct CardEmbed : IEmbed Implements IEmbed Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Card 获取卡片。 public readonly ICard Card { get; } Property Value ICard Type 获取此嵌入式内容的类型。 public EmbedType Type { get; } Property Value EmbedType"
  },
  "api/Kook.CardExtensions.html": {
    "href": "api/Kook.CardExtensions.html",
    "title": "Class CardExtensions | Kook.Net 文档",
    "keywords": "Class CardExtensions Namespace Kook Assembly Kook.Net.Core.dll 提供用于 IElement、IModule 和 ICard 等卡片相关对象的扩展方法。 public static class CardExtensions Inheritance object CardExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToBuilder(ActionGroupModule) 将 ActionGroupModule 实体转换为具有相同属性的 ActionGroupModuleBuilder 实体构建器。 public static ActionGroupModuleBuilder ToBuilder(this ActionGroupModule entity) Parameters entity ActionGroupModule Returns ActionGroupModuleBuilder ToBuilder(AudioModule) 将 AudioModule 实体转换为具有相同属性的 AudioModuleBuilder 实体构建器。 public static AudioModuleBuilder ToBuilder(this AudioModule entity) Parameters entity AudioModule Returns AudioModuleBuilder ToBuilder(ButtonElement) 将 ButtonElement 实体转换为具有相同属性的 ButtonElementBuilder 实体构建器。 public static ButtonElementBuilder ToBuilder(this ButtonElement entity) Parameters entity ButtonElement Returns ButtonElementBuilder ToBuilder(Card) 将 Card 实体转换为具有相同属性的 CardBuilder 实体构建器。 public static CardBuilder ToBuilder(this Card entity) Parameters entity Card Returns CardBuilder ToBuilder(ContainerModule) 将 ContainerModule 实体转换为具有相同属性的 ContainerModuleBuilder 实体构建器。 public static ContainerModuleBuilder ToBuilder(this ContainerModule entity) Parameters entity ContainerModule Returns ContainerModuleBuilder ToBuilder(ContextModule) 将 ContextModule 实体转换为具有相同属性的 ContextModuleBuilder 实体构建器。 public static ContextModuleBuilder ToBuilder(this ContextModule entity) Parameters entity ContextModule Returns ContextModuleBuilder ToBuilder(CountdownModule) 将 CountdownModule 实体转换为具有相同属性的 CountdownModuleBuilder 实体构建器。 public static CountdownModuleBuilder ToBuilder(this CountdownModule entity) Parameters entity CountdownModule Returns CountdownModuleBuilder ToBuilder(DividerModule) 将 DividerModule 实体转换为具有相同属性的 DividerModuleBuilder 实体构建器。 public static DividerModuleBuilder ToBuilder(this DividerModule _) Parameters _ DividerModule Returns DividerModuleBuilder ToBuilder(FileModule) 将 FileModule 实体转换为具有相同属性的 FileModuleBuilder 实体构建器。 public static FileModuleBuilder ToBuilder(this FileModule entity) Parameters entity FileModule Returns FileModuleBuilder ToBuilder(HeaderModule) 将 HeaderModule 实体转换为具有相同属性的 HeaderModuleBuilder 实体构建器。 public static HeaderModuleBuilder ToBuilder(this HeaderModule entity) Parameters entity HeaderModule Returns HeaderModuleBuilder ToBuilder(ICard) 将 ICard 实体转换为具有相同属性的 ICardBuilder 实体构建器。 public static ICardBuilder ToBuilder(this ICard entity) Parameters entity ICard Returns ICardBuilder ToBuilder(IElement) 将 IElement 实体转换为具有相同属性的 IElementBuilder 实体构建器。 public static IElementBuilder ToBuilder(this IElement entity) Parameters entity IElement Returns IElementBuilder ToBuilder(IModule) 将 IModule 实体转换为具有相同属性的 IModuleBuilder 实体构建器。 public static IModuleBuilder ToBuilder(this IModule entity) Parameters entity IModule Returns IModuleBuilder ToBuilder(ImageElement) 将 ImageElement 实体转换为具有相同属性的 ImageElementBuilder 实体构建器。 public static ImageElementBuilder ToBuilder(this ImageElement entity) Parameters entity ImageElement Returns ImageElementBuilder ToBuilder(ImageGroupModule) 将 ImageGroupModule 实体转换为具有相同属性的 ImageGroupModuleBuilder 实体构建器。 public static ImageGroupModuleBuilder ToBuilder(this ImageGroupModule entity) Parameters entity ImageGroupModule Returns ImageGroupModuleBuilder ToBuilder(InviteModule) 将 InviteModule 实体转换为具有相同属性的 InviteModuleBuilder 实体构建器。 public static InviteModuleBuilder ToBuilder(this InviteModule entity) Parameters entity InviteModule Returns InviteModuleBuilder ToBuilder(KMarkdownElement) 将 KMarkdownElement 实体转换为具有相同属性的 KMarkdownElementBuilder 实体构建器。 public static KMarkdownElementBuilder ToBuilder(this KMarkdownElement entity) Parameters entity KMarkdownElement Returns KMarkdownElementBuilder ToBuilder(ParagraphStruct) 将 ParagraphStruct 实体转换为具有相同属性的 ParagraphStructBuilder 实体构建器。 public static ParagraphStructBuilder ToBuilder(this ParagraphStruct entity) Parameters entity ParagraphStruct Returns ParagraphStructBuilder ToBuilder(PlainTextElement) 将 PlainTextElement 实体转换为具有相同属性的 PlainTextElementBuilder 实体构建器。 public static PlainTextElementBuilder ToBuilder(this PlainTextElement entity) Parameters entity PlainTextElement Returns PlainTextElementBuilder ToBuilder(SectionModule) 将 SectionModule 实体转换为具有相同属性的 SectionModuleBuilder 实体构建器。 public static SectionModuleBuilder ToBuilder(this SectionModule entity) Parameters entity SectionModule Returns SectionModuleBuilder ToBuilder(VideoModule) 将 VideoModule 实体转换为具有相同属性的 VideoModuleBuilder 实体构建器。 public static VideoModuleBuilder ToBuilder(this VideoModule entity) Parameters entity VideoModule Returns VideoModuleBuilder"
  },
  "api/Kook.CardMarkup.CardMarkupSerializer.html": {
    "href": "api/Kook.CardMarkup.CardMarkupSerializer.html",
    "title": "Class CardMarkupSerializer | Kook.Net 文档",
    "keywords": "Class CardMarkupSerializer Namespace Kook.CardMarkup Assembly Kook.Net.CardMarkup.dll 提供用于从 XML 标记语言创建卡片消息的序列化器。 public static class CardMarkupSerializer Inheritance object CardMarkupSerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(FileInfo) 将卡片消息 XML 标记文件反序列化为 ICard 列表，每个 XML 文件包含一个 card-message 元素，可以包含多个 card 元素。 public static IEnumerable<ICard> Deserialize(FileInfo file) Parameters file FileInfo UTF-8 编码的 XML 文件 Returns IEnumerable<ICard> 一个可用于枚举 ICard 成员的 IEnumerable<T>。 Deserialize(Stream) 将卡片消息 XML 标记文本流反序列化为 ICard 列表，每个 XML 文件包含一个 card-message 元素，可以包含多个 card 元素。 public static IEnumerable<ICard> Deserialize(Stream xmlStream) Parameters xmlStream Stream UTF-8 编码的 XML 流。 Returns IEnumerable<ICard> 一个可用于枚举 ICard 成员的 IEnumerable<T>。 Deserialize(string) 将卡片消息 XML 标记文本反序列化为 ICard 列表，每个 XML 文件包含一个 card-message 元素，可以包含多个 card 元素。 public static IEnumerable<ICard> Deserialize(string xmlText) Parameters xmlText string UTF-8 编码的 XML 文本。 Returns IEnumerable<ICard> 一个可用于枚举 ICard 成员的 IEnumerable<T>。 DeserializeAsync(FileInfo, CancellationToken) 将卡片消息 XML 标记文件反序列化为 ICard 列表，每个 XML 文件包含一个 card-message 元素，可以包含多个 card 元素。 public static Task<IEnumerable<ICard>> DeserializeAsync(FileInfo file, CancellationToken token = default) Parameters file FileInfo UTF-8 编码的 XML 文件 token CancellationToken 取消令牌。 Returns Task<IEnumerable<ICard>> 一个表示异步解析操作的任务。任务的结果包含一个可用于枚举 ICard 成员的 IEnumerable<T>。 DeserializeAsync(Stream, CancellationToken) 将卡片消息 XML 标记文本流反序列化为 ICard 列表，每个 XML 文件包含一个 card-message 元素，可以包含多个 card 元素。 public static Task<IEnumerable<ICard>> DeserializeAsync(Stream xmlStream, CancellationToken token = default) Parameters xmlStream Stream UTF-8 编码的 XML 流。 token CancellationToken 取消令牌。 Returns Task<IEnumerable<ICard>> 一个表示异步解析操作的任务。任务的结果包含一个可用于枚举 ICard 成员的 IEnumerable<T>。 DeserializeAsync(string, CancellationToken) 将卡片消息 XML 标记文本反序列化为 ICard 列表，每个 XML 文件包含一个 card-message 元素，可以包含多个 card 元素。 public static Task<IEnumerable<ICard>> DeserializeAsync(string xmlText, CancellationToken token = default) Parameters xmlText string UTF-8 编码的 XML 文本。 token CancellationToken 取消令牌。 Returns Task<IEnumerable<ICard>> 一个表示异步解析操作的任务。任务的结果包含一个可用于枚举 ICard 成员的 IEnumerable<T>。 TryDeserialize(FileInfo, out IEnumerable<ICard>?) 尝试将卡片消息 XML 标记文件反序列化为 ICard 列表。 public static bool TryDeserialize(FileInfo file, out IEnumerable<ICard>? cards) Parameters file FileInfo UTF-8 编码的 XML 文件。 cards IEnumerable<ICard> 如果反序列化操作成功，则为一个可用于枚举 ICard 成员的 IEnumerable<T>；否则为 null。 Returns bool 如果反序列化操作成功，则为 true；否则为 false。 TryDeserialize(Stream, out IEnumerable<ICard>?) 尝试将卡片消息 XML 标记文本流反序列化为 ICard 列表。 public static bool TryDeserialize(Stream xmlStream, out IEnumerable<ICard>? cards) Parameters xmlStream Stream UTF-8 编码的 XML 文本流。 cards IEnumerable<ICard> 如果反序列化操作成功，则为一个可用于枚举 ICard 成员的 IEnumerable<T>；否则为 null。 Returns bool 如果反序列化操作成功，则为 true；否则为 false。 TryDeserialize(string, out IEnumerable<ICard>?) 尝试将卡片消息 XML 标记文本反序列化为 ICard 列表。 public static bool TryDeserialize(string xmlText, out IEnumerable<ICard>? cards) Parameters xmlText string UTF-8 编码的 XML 文本。 cards IEnumerable<ICard> 如果反序列化操作成功，则为一个可用于枚举 ICard 成员的 IEnumerable<T>；否则为 null。 Returns bool 如果反序列化操作成功，则为 true；否则为 false。"
  },
  "api/Kook.CardMarkup.html": {
    "href": "api/Kook.CardMarkup.html",
    "title": "Namespace Kook.CardMarkup | Kook.Net 文档",
    "keywords": "Namespace Kook.CardMarkup Classes CardMarkupSerializer 提供用于从 XML 标记语言创建卡片消息的序列化器。"
  },
  "api/Kook.CardSize.html": {
    "href": "api/Kook.CardSize.html",
    "title": "Enum CardSize | Kook.Net 文档",
    "keywords": "Enum CardSize Namespace Kook Assembly Kook.Net.Core.dll 表示卡片的大小。 public enum CardSize Fields Large = 1 卡片的尺寸较大。 Small = 0 卡片的尺寸较小。"
  },
  "api/Kook.CardTheme.html": {
    "href": "api/Kook.CardTheme.html",
    "title": "Enum CardTheme | Kook.Net 文档",
    "keywords": "Enum CardTheme Namespace Kook Assembly Kook.Net.Core.dll 表示卡片的主题。 public enum CardTheme : uint Fields Danger = 3 外观表现为危险。 Info = 4 外观表现为信息。 Invisible = 7 外观表现为图文混排消息。 None = 6 外观表现为无侧边。 Primary = 0 外观表现为主要卡片。 Secondary = 5 外观表现为次要卡片。 Success = 1 外观表现为成功。 Warning = 2 外观表现为警告。 Remarks 卡片的主题主要用于控制卡片左侧边的颜色。"
  },
  "api/Kook.CardType.html": {
    "href": "api/Kook.CardType.html",
    "title": "Enum CardType | Kook.Net 文档",
    "keywords": "Enum CardType Namespace Kook Assembly Kook.Net.Core.dll 表示一个 ICard 的类型。 public enum CardType Fields Card = 0 常规卡片。"
  },
  "api/Kook.ChannelExtensions.html": {
    "href": "api/Kook.ChannelExtensions.html",
    "title": "Class ChannelExtensions | Kook.Net 文档",
    "keywords": "Class ChannelExtensions Namespace Kook Assembly Kook.Net.Core.dll 提供用于各种频道实体的扩展方法。 public static class ChannelExtensions Inheritance object ChannelExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetChannelType(IChannel) 尝试基于频道所实现的接口类型获取频道的实际类型。 public static ChannelType? GetChannelType(this IChannel channel) Parameters channel IChannel 要获取其类型的频道。 Returns ChannelType? 如果此频道的实际类型已知，则返回其类型；否则，返回 null。 GetJumpUrl(IChannel) 获取一个跳转到频道的 URL。 public static string GetJumpUrl(this IChannel channel) Parameters channel IChannel 要获取跳转 URL 的频道。 Returns string 一个包含用于在聊天中跳转到频道的 URL 的字符串。"
  },
  "api/Kook.ChannelPermission.html": {
    "href": "api/Kook.ChannelPermission.html",
    "title": "Enum ChannelPermission | Kook.Net 文档",
    "keywords": "Enum ChannelPermission Namespace Kook Assembly Kook.Net.Core.dll 表示可以为角色或用户设置的频道级别的权限。 [Flags] public enum ChannelPermission : uint Fields AddReactions = 262144 添加回应。 AttachFiles = 16384 上传文件。 Connect = 32768 语音连接。 CreateInvites = 8 创建邀请。 DeafenMembers = 16777216 服务器静音。 ManageChannels = 32 频道管理。 ManageMessages = 8192 消息管理。 ManageRoles = 1024 管理角色权限。 ManageVoice = 65536 语音管理。 MentionEveryone = 131072 提及全体成员、在线成员和所有角色。 MuteMembers = 33554432 服务器闭麦。 PassiveConnect = 1048576 被动连接语音频道。 PlaySoundtrack = 134217728 共享计算机音频。 SendMessages = 4096 发送文字消息。 ShareScreen = 268435456 屏幕分享。 Speak = 8388608 发言。 UseVoiceActivity = 4194304 使用自由麦。 ViewChannel = 2048 查看文字与语音频道。"
  },
  "api/Kook.ChannelPermissions.html": {
    "href": "api/Kook.ChannelPermissions.html",
    "title": "Struct ChannelPermissions | Kook.Net 文档",
    "keywords": "Struct ChannelPermissions Namespace Kook Assembly Kook.Net.Core.dll 表示一个频道的权限集。 public struct ChannelPermissions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ChannelPermissions(bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?) 使用指定的权限位信息创建一个 ChannelPermissions 结构的新实例。 public ChannelPermissions(bool? createInvites = false, bool? manageChannels = false, bool? manageRoles = false, bool? viewChannel = false, bool? sendMessages = false, bool? manageMessages = false, bool? attachFiles = false, bool? connect = false, bool? manageVoice = false, bool? mentionEveryone = false, bool? addReactions = false, bool? passiveConnect = false, bool? useVoiceActivity = false, bool? speak = false, bool? deafenMembers = false, bool? muteMembers = false, bool? playSoundtrack = false, bool? shareScreen = false) Parameters createInvites bool? 创建邀请。 manageChannels bool? 频道管理。 manageRoles bool? 管理角色权限。 viewChannel bool? 查看文字与语音频道。 sendMessages bool? 发送文字消息。 manageMessages bool? 消息管理。 attachFiles bool? 上传文件。 connect bool? 语音连接。 manageVoice bool? 语音管理。 mentionEveryone bool? 提及全体成员、在线成员和所有角色。 addReactions bool? 添加回应。 passiveConnect bool? 被动连接语音频道。 useVoiceActivity bool? 使用自由麦。 speak bool? 发言。 deafenMembers bool? 服务器静音。 muteMembers bool? 服务器闭麦。 playSoundtrack bool? 共享计算机音频。 shareScreen bool? 屏幕分享。 ChannelPermissions(ulong) 使用指定的权限原始值创建一个 ChannelPermissions 结构的新实例。 public ChannelPermissions(ulong rawValue) Parameters rawValue ulong 权限原始值。 Fields Category 获取一个包含所有可以为分组频道设置的权限的 ChannelPermissions。 public static readonly ChannelPermissions Category Field Value ChannelPermissions DM 获取一个包含所有可以为私聊频道设置的权限的 ChannelPermissions。 public static readonly ChannelPermissions DM Field Value ChannelPermissions None 获取一个空的 ChannelPermissions，不包含任何权限。 public static readonly ChannelPermissions None Field Value ChannelPermissions Text 获取一个包含所有可以为文字频道设置的权限的 ChannelPermissions。 public static readonly ChannelPermissions Text Field Value ChannelPermissions Voice 获取一个包含所有可以为语音频道设置的权限的 ChannelPermissions。 public static readonly ChannelPermissions Voice Field Value ChannelPermissions Properties AddReactions 获取此权限集是否允许相关用户添加回应。 public bool AddReactions { get; } Property Value bool AttachFiles 获取此权限集是否允许相关用户上传文件。 public bool AttachFiles { get; } Property Value bool Connect 获取此权限集是否允许相关用户连接语音。 public bool Connect { get; } Property Value bool CreateInvites 获取此权限集是否允许相关用户创建邀请。 public bool CreateInvites { get; } Property Value bool DeafenMembers 获取此权限集是否允许相关用户使其他用户被服务器静音。 public bool DeafenMembers { get; } Property Value bool ManageChannels 获取此权限集是否允许相关用户管理频道。 public bool ManageChannels { get; } Property Value bool ManageMessages 获取此权限集是否允许相关用户管理消息。 public bool ManageMessages { get; } Property Value bool ManageRoles 获取此权限集是否允许相关用户管理角色。 public bool ManageRoles { get; } Property Value bool ManageVoice 获取此权限集是否允许相关用户管理语音频道。 public bool ManageVoice { get; } Property Value bool MentionEveryone 获取此权限集是否允许相关用户提及全体成员、在线成员和所有角色。 public bool MentionEveryone { get; } Property Value bool MuteMembers 获取此权限集是否允许相关用户使其他用户被服务器闭麦。 public bool MuteMembers { get; } Property Value bool PassiveConnect 获取此权限集是否允许相关用户被动连接到语音频道。 public bool PassiveConnect { get; } Property Value bool PlaySoundtrack 获取此权限集是否允许相关用户共享计算机音频。 public bool PlaySoundtrack { get; } Property Value bool RawValue 获取此权限集的原始值。 public readonly ulong RawValue { get; } Property Value ulong SendMessages 获取此权限集是否允许相关用户发送文字消息。 public bool SendMessages { get; } Property Value bool ShareScreen 获取此权限集是否允许相关用户共享计算机画面。 public bool ShareScreen { get; } Property Value bool Speak 获取此权限集是否允许相关用户在语音频道中发言。 public bool Speak { get; } Property Value bool UseVoiceActivity 获取此权限集是否允许相关用户使用自由麦。 public bool UseVoiceActivity { get; } Property Value bool ViewChannel 获取此权限集是否允许相关用户查看文字与语音频道。 public bool ViewChannel { get; } Property Value bool Methods All(IChannel) 为指定的频道根据其类型获取一个包含所有权限的 ChannelPermissions。 public static ChannelPermissions All(IChannel channel) Parameters channel IChannel 要获取其包含所有权限的频道。 Returns ChannelPermissions 一个包含所有该频道可以拥有的权限的 ChannelPermissions。 Exceptions ArgumentException 未知的频道类型。 Has(ChannelPermission) 获取当前权限集是否包含指定的权限。 public bool Has(ChannelPermission permission) Parameters permission ChannelPermission 要检查的权限。 Returns bool 如果当前权限集包含了所有指定的权限信息，则为 true；否则为 false。 Modify(bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?) 以当前权限集为基础，更改指定的权限，返回一个 ChannelPermissions 结构的新实例。 public ChannelPermissions Modify(bool? createInvites = null, bool? manageChannels = null, bool? manageRoles = null, bool? viewChannel = null, bool? sendMessages = null, bool? manageMessages = null, bool? attachFiles = null, bool? connect = null, bool? manageVoice = null, bool? mentionEveryone = null, bool? addReactions = null, bool? passiveConnect = null, bool? useVoiceActivity = null, bool? speak = null, bool? deafenMembers = null, bool? muteMembers = null, bool? playSoundtrack = null, bool? shareScreen = null) Parameters createInvites bool? 创建邀请。 manageChannels bool? 频道管理。 manageRoles bool? 管理角色权限。 viewChannel bool? 查看文字与语音频道。 sendMessages bool? 发送文字消息。 manageMessages bool? 消息管理。 attachFiles bool? 上传文件。 connect bool? 语音连接。 manageVoice bool? 语音管理。 mentionEveryone bool? 提及全体成员、在线成员和所有角色。 addReactions bool? 添加回应。 passiveConnect bool? 被动连接语音频道。 useVoiceActivity bool? 使用自由麦。 speak bool? 发言。 deafenMembers bool? 服务器静音。 muteMembers bool? 服务器闭麦。 playSoundtrack bool? 共享计算机音频。 shareScreen bool? 屏幕分享。 Returns ChannelPermissions 更改了指定权限的新的权限集。 ToList() 获取一个包含当前权限集所包含的所有已设置的 ChannelPermission 独立位标志枚举值的集合。 public List<ChannelPermission> ToList() Returns List<ChannelPermission> 一个包含当前权限集所包含的所有已设置的 ChannelPermission 独立位标志枚举值的集合；如果当前权限集未包含任何已设置的权限位，则会返回一个空集合。 ToString() 获取此权限集原始值的字符串表示。 public override string ToString() Returns string 此权限集原始值的字符串表示。"
  },
  "api/Kook.ChannelType.html": {
    "href": "api/Kook.ChannelType.html",
    "title": "Enum ChannelType | Kook.Net 文档",
    "keywords": "Enum ChannelType Namespace Kook Assembly Kook.Net.Core.dll 表示服务器频道的类型。 public enum ChannelType Fields Category = 0 分组频道。 DM = 3 私信频道。 Text = 1 文字频道。 Unspecified = -1 频道类型未指定。 Voice = 2 语音频道。"
  },
  "api/Kook.ClientType.html": {
    "href": "api/Kook.ClientType.html",
    "title": "Enum ClientType | Kook.Net 文档",
    "keywords": "Enum ClientType Namespace Kook Assembly Kook.Net.Core.dll 表示一个用户所登录的客户端类型。 public enum ClientType Fields Android = 1 用户正在使用 Android 应用程序连接到服务器。 WebSocket = 0 用户正在使用 WebSocket 连接到服务器。 iOS = 2 用户正在使用 iOS 应用程序连接到服务器。"
  },
  "api/Kook.Color.html": {
    "href": "api/Kook.Color.html",
    "title": "Struct Color | Kook.Net 文档",
    "keywords": "Struct Color Namespace Kook Assembly Kook.Net.Core.dll 表示 KOOK 中使用的颜色。 public readonly struct Color : IEquatable<Color> Implements IEquatable<Color> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Color(byte, byte, byte) 使用指定的 RGB 通道值初始化一个 Color 结构的新实例。 public Color(byte r, byte g, byte b) Parameters r byte 红色通道的强度。 g byte 绿色通道的强度。 b byte 蓝色通道的强度。 Examples 创建 #607D8B（http://www.color-hex.com/color/607d8b）所表示的颜色： Color darkGrey = new Color((byte)0x60, (byte)0x7D, (byte)0x8B); Exceptions ArgumentException 所提供的三个通道的强度值所组成的颜色的原始值超过了 MaxDecimalValue。 Color(int, int, int) 使用指定的 RGB 通道值初始化一个 Color 结构的新实例。 public Color(int r, int g, int b) Parameters r int 红色通道的强度。 g int 绿色通道的强度。 b int 蓝色通道的强度。 Examples 创建 #607D8B（http://www.color-hex.com/color/607d8b）所表示的颜色： Color darkGrey = new Color(96, 125, 139); Exceptions ArgumentException 所提供的三个通道的强度值所组成的颜色的原始值超过了 MaxDecimalValue。 Color(float, float, float) 使用指定的 RGB 通道值初始化一个 Color 结构的新实例。 public Color(float r, float g, float b) Parameters r float 红色通道的强度。 g float 绿色通道的强度。 b float 蓝色通道的强度。 Examples 创建 #607D8B（http://www.color-hex.com/color/607d8b）所表示的颜色： Color darkGrey = new Color(0.38f, 0.49f, 0.55f); Exceptions ArgumentException 所提供的三个通道的强度值所组成的颜色的原始值超过了 MaxDecimalValue。 Color(uint) 使用指定的 24 位无符号整型值初始化一个 Color 结构的新实例。 public Color(uint rawValue) Parameters rawValue uint 颜色的 24 位无符号整型原始值。 Examples 创建 #607D8B（http://www.color-hex.com/color/607d8b）所表示的颜色： Color darkGrey = new Color(0x607D8B); Exceptions ArgumentException 颜色原始值超过了 MaxDecimalValue。 Fields Blue 获取天蓝色。 public static readonly Color Blue Field Value Color Remarks 天蓝色 #3498DB（http://www.color-hex.com/color/3498db）。 DarkBlue 获取深蓝色。 public static readonly Color DarkBlue Field Value Color Remarks 深蓝色 #206694（http://www.color-hex.com/color/206694）。 DarkGreen 获取深绿色。 public static readonly Color DarkGreen Field Value Color Remarks 深绿色 #1F8B4C（http://www.color-hex.com/color/1f8b4c）。 DarkGrey 获取钢蓝色。 public static readonly Color DarkGrey Field Value Color Remarks 钢蓝色 #607D8B（http://www.color-hex.com/color/607d8b）。 DarkMagenta 获取深粉色。 public static readonly Color DarkMagenta Field Value Color Remarks 深粉色 #AD1457（http://www.color-hex.com/color/ad1457）。 DarkOrange 获取深橙色。 public static readonly Color DarkOrange Field Value Color Remarks 深橙色 #A84300（http://www.color-hex.com/color/a84300）。 DarkPurple 获取深紫色。 public static readonly Color DarkPurple Field Value Color Remarks 深紫色 #71368A（http://www.color-hex.com/color/71368a）。 DarkRed 获取深红色。 public static readonly Color DarkRed Field Value Color Remarks 深红色 #992D22（http://www.color-hex.com/color/992d22）。 DarkTeal 获取深青绿色。 public static readonly Color DarkTeal Field Value Color Remarks 深青绿色 #11806A（http://www.color-hex.com/color/11806a）。 DarkerGrey 获取深青色。 public static readonly Color DarkerGrey Field Value Color Remarks 深青色 #3A4B53（http://www.color-hex.com/color/3a4b53）。 Default 获取默认颜色。 public static readonly Color Default Field Value Color Gold 获取金黄色。 public static readonly Color Gold Field Value Color Remarks 金黄色 #F1C40F（http://www.color-hex.com/color/f1c40f）。 Green 获取绿色。 public static readonly Color Green Field Value Color Remarks 绿色 #2ECC71（http://www.color-hex.com/color/2ecc71）。 Grey 获取暗灰色。 public static readonly Color Grey Field Value Color Remarks 暗灰色 #666D71（http://www.color-hex.com/color/666d71）。 LightGrey 获取浅灰色。 public static readonly Color LightGrey Field Value Color Remarks 浅灰色 #95A5A6（http://www.color-hex.com/color/95a5a6）。 LightOrange 获取褐橙色。 public static readonly Color LightOrange Field Value Color Remarks 褐橙色 #C27C0E（http://www.color-hex.com/color/c27c0e）。 Magenta 获取玫瑰红。 public static readonly Color Magenta Field Value Color Remarks 玫瑰红 #E91E63（http://www.color-hex.com/color/e91e63）。 MaxDecimalValue 获取一个 KOOK 颜色的最大值的原始值。 public const uint MaxDecimalValue = 16777215 Field Value uint Orange 获取橙色。 public static readonly Color Orange Field Value Color Remarks 橙色 #E67E22（http://www.color-hex.com/color/e67e22）。 Purple 获取紫色。 public static readonly Color Purple Field Value Color Remarks 紫色 #9B59B6（http://www.color-hex.com/color/9b59b6）。 Red 获取猩红色。 public static readonly Color Red Field Value Color Remarks 猩红色 #E74C3C（http://www.color-hex.com/color/e74c3c）。 Teal 获取青绿色。 public static readonly Color Teal Field Value Color Remarks 青绿色 #1ABC9C（http://www.color-hex.com/color/1abc9c）。 Properties B 获取此颜色的蓝色通道的强度。 public byte B { get; } Property Value byte G 获取此颜色的绿色通道的强度。 public byte G { get; } Property Value byte R 获取此颜色的红色通道的强度。 public byte R { get; } Property Value byte RawValue 获取此颜色的原始值。 public uint RawValue { get; } Property Value uint Remarks 颜色以 24 位无符号整型值 RGB 格式进行编码，由高至低的每 8 位分别表示红色、绿色和蓝色通道的强度。 Methods Equals(Color) Indicates whether the current object is equal to another object of the same type. public bool Equals(Color other) Parameters other Color An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Parse(string) 将颜色的字符串表示形式转换为颜色对象。 public static Color Parse(string rawValue) Parameters rawValue string 要解析为颜色的字符串。 Returns Color 颜色对象。 Exceptions ArgumentOutOfRangeException 值必须是有效长度的数字。 ToString() 获取此颜色带有 # 前缀的 RGB 十六进制字符串表示形式（例如 #000CCC）。 public override string ToString() Returns string 此颜色带有 # 前缀的 RGB 十六进制字符串表示形式（例如 #000CCC）。 TryParse(string, out Color) 将颜色的字符串表示形式转换为颜色对象。 public static bool TryParse(string rawValue, out Color color) Parameters rawValue string 要解析为颜色的字符串。 color Color 如果转换成功，则为颜色对象；否则为默认颜色。 Returns bool 如果转换成功，则为 true；否则为 false。 Operators operator ==(Color, Color) 判定两个 Color 是否相等。 public static bool operator ==(Color lhs, Color rhs) Parameters lhs Color rhs Color Returns bool 如果两个 Color 相等，则为 true；否则为 false。 explicit operator Color(Color) 将由 .NET 定义的 Color 颜色转换为由 Kook.Net 定义的 Color 颜色。 public static explicit operator Color(Color color) Parameters color Color 要进行转换的 .NET Color 颜色。 Returns Color 与该 .NET Color 颜色具有相同色值的 Color 颜色。 implicit operator Color(Color) 将由 Kook.Net 定义的 Color 颜色转换为由 .NET 定义的 Color 颜色。 public static implicit operator Color(Color color) Parameters color Color 要进行转换的 Color 颜色。 Returns Color 与该 Color 颜色具有相同色值的 .NET Color 颜色。 implicit operator uint(Color) 获取此颜色的原始值。 public static implicit operator uint(Color color) Parameters color Color Returns uint Remarks 颜色以 24 位无符号整型值 RGB 格式进行编码，由高至低的每 8 位分别表示红色、绿色和蓝色通道的强度。 implicit operator Color(uint) 使用指定的 24 位无符号整型值初始化一个 Color 结构的新实例。 public static implicit operator Color(uint rawValue) Parameters rawValue uint 颜色的 24 位无符号整型原始值。 Returns Color Examples 创建 #607D8B（http://www.color-hex.com/color/607d8b）所表示的颜色： Color darkGrey = 0x607D8B; Exceptions ArgumentException 颜色原始值超过了 MaxDecimalValue。 operator !=(Color, Color) 判定两个 Color 是否不相等。 public static bool operator !=(Color lhs, Color rhs) Parameters lhs Color rhs Color Returns bool 如果两个 Color 不相等，则为 true；否则为 false。"
  },
  "api/Kook.ColorType.html": {
    "href": "api/Kook.ColorType.html",
    "title": "Enum ColorType | Kook.Net 文档",
    "keywords": "Enum ColorType Namespace Kook Assembly Kook.Net.Core.dll 表示一个角色的颜色类型。 public enum ColorType : ushort Fields Gradient = 2 渐变色。 Solid = 1 实心纯色。"
  },
  "api/Kook.Commands.AliasAttribute.html": {
    "href": "api/Kook.Commands.AliasAttribute.html",
    "title": "Class AliasAttribute | Kook.Net 文档",
    "keywords": "Class AliasAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll 为命令指定别名。 [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method)] public class AliasAttribute : Attribute Inheritance object Attribute AliasAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples 以下示例中，要调用此命令，除了可以使用基本名称“stats”，还使用“stat”或“info”。 [Command(\"stats\")] [Alias(\"stat\", \"info\")] public async Task GetStatsAsync(IUser user) { await ReplyTextAsync($\"{user.Username} has 1000 score!\"); } Remarks 此特性允许命令具有一个或多个别名，在指定命令的基本名称的同时，还可以指定多个别名，以便用户可以使用多个熟悉的词汇来触发相同的命令。 Constructors AliasAttribute(params string[]) 初始化一个 AliasAttribute 类的新实例。 public AliasAttribute(params string[] aliases) Parameters aliases string[] Properties Aliases 获取为命令定义的别名。 public string[] Aliases { get; } Property Value string[]"
  },
  "api/Kook.Commands.Builders.CommandBuilder.html": {
    "href": "api/Kook.Commands.Builders.CommandBuilder.html",
    "title": "Class CommandBuilder | Kook.Net 文档",
    "keywords": "Class CommandBuilder Namespace Kook.Commands.Builders Assembly Kook.Net.Commands.dll 表示一个命令构建器。 public class CommandBuilder Inheritance object CommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Aliases 获取此命令的别名。 public IReadOnlyList<string> Aliases { get; } Property Value IReadOnlyList<string> Attributes 获取此命令的特性。 public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> IgnoreExtraArgs 获取或设置此命令是否忽略额外的参数。 public bool IgnoreExtraArgs { get; set; } Property Value bool Module 获取此命令构建器所属的模块构建器。 public ModuleBuilder Module { get; } Property Value ModuleBuilder Name 获取或设置此命令的基本名称。 public string? Name { get; set; } Property Value string Parameters 获取此命令的参数构建器。 public IReadOnlyList<ParameterBuilder> Parameters { get; } Property Value IReadOnlyList<ParameterBuilder> Preconditions 获取此命令的先决条件。 public IReadOnlyList<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList<PreconditionAttribute> PrimaryAlias 获取或设置此命令的首要别名。 public string? PrimaryAlias { get; set; } Property Value string Priority 获取或设置此命令的优先级。 public int Priority { get; set; } Property Value int See Also PriorityAttribute(int) Remarks 获取或设置此命令的备注。 public string? Remarks { get; set; } Property Value string RunMode 获取或设置此命令的运行模式。 public RunMode RunMode { get; set; } Property Value RunMode Summary 获取或设置此命令的摘要。 public string? Summary { get; set; } Property Value string Methods AddAliases(params string?[]) 向此命令添加别名。 public CommandBuilder AddAliases(params string?[] aliases) Parameters aliases string[] 包含要添加的别名的数组。 Returns CommandBuilder 当前命令构建器。 AddAttributes(params Attribute[]) 添加特性到此命令。 public CommandBuilder AddAttributes(params Attribute[] attributes) Parameters attributes Attribute[] 要添加的特性。 Returns CommandBuilder 当前命令构建器。 AddParameter(string, Type, Action<ParameterBuilder>) 添加参数到此命令。 public CommandBuilder AddParameter(string name, Type type, Action<ParameterBuilder> createFunc) Parameters name string 参数的名称。 type Type 参数的类型。 createFunc Action<ParameterBuilder> 一个创建参数构建器的委托。 Returns CommandBuilder 当前命令构建器。 AddParameter<T>(string, Action<ParameterBuilder>) 添加参数到此命令。 public CommandBuilder AddParameter<T>(string name, Action<ParameterBuilder> createFunc) Parameters name string 参数的名称。 createFunc Action<ParameterBuilder> 一个创建参数构建器的委托。 Returns CommandBuilder 当前命令构建器。 Type Parameters T 参数的类型。 AddPrecondition(PreconditionAttribute) 添加先决条件到此命令。 public CommandBuilder AddPrecondition(PreconditionAttribute precondition) Parameters precondition PreconditionAttribute 要添加的先决条件。 Returns CommandBuilder 当前命令构建器。 WithName(string) 设置此命令的基本名称。 public CommandBuilder WithName(string name) Parameters name string 此命令的基本名称。 Returns CommandBuilder 当前命令构建器。 WithPriority(int) 设置此命令的优先级。 public CommandBuilder WithPriority(int priority) Parameters priority int 此命令的优先级。 Returns CommandBuilder 当前命令构建器。 See Also PriorityAttribute(int) WithRemarks(string) 设置此命令的备注。 public CommandBuilder WithRemarks(string remarks) Parameters remarks string 此命令的备注。 Returns CommandBuilder 当前命令构建器。 WithRunMode(RunMode) 设置此命令的运行模式。 public CommandBuilder WithRunMode(RunMode runMode) Parameters runMode RunMode 此命令的运行模式。 Returns CommandBuilder 当前命令构建器。 WithSummary(string) 设置此命令的摘要。 public CommandBuilder WithSummary(string summary) Parameters summary string 此命令的摘要。 Returns CommandBuilder 当前命令构建器。"
  },
  "api/Kook.Commands.Builders.ModuleBuilder.html": {
    "href": "api/Kook.Commands.Builders.ModuleBuilder.html",
    "title": "Class ModuleBuilder | Kook.Net 文档",
    "keywords": "Class ModuleBuilder Namespace Kook.Commands.Builders Assembly Kook.Net.Commands.dll 表示一个模块构建器。 public class ModuleBuilder Inheritance object ModuleBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Aliases 获取此模块的别名。 public IReadOnlyList<string?> Aliases { get; } Property Value IReadOnlyList<string> Attributes 获取此模块的特性。 public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> Commands 获取此模块的别名。 public IReadOnlyList<CommandBuilder> Commands { get; } Property Value IReadOnlyList<CommandBuilder> Group 获取或设置此模块的分组。 public string? Group { get; set; } Property Value string Modules 获取此模块的子模块。 public IReadOnlyList<ModuleBuilder> Modules { get; } Property Value IReadOnlyList<ModuleBuilder> Name 获取或设置此模块的基本名称。 public string? Name { get; set; } Property Value string Parent 获取此模块构建器所属的父模块构建器。 public ModuleBuilder? Parent { get; } Property Value ModuleBuilder Preconditions 获取此模块的先决条件。 public IReadOnlyList<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList<PreconditionAttribute> Remarks 获取或设置此模块的备注。 public string? Remarks { get; set; } Property Value string Service 获取此模块构建器所属的命令服务。 public CommandService Service { get; } Property Value CommandService Summary 获取或设置此模块的摘要。 public string? Summary { get; set; } Property Value string Methods AddAliases(params string?[]) 添加别名到此模块。 public ModuleBuilder AddAliases(params string?[] aliases) Parameters aliases string[] 要添加到此模块的别名数组。 Returns ModuleBuilder 此模块构建器。 AddAttributes(params Attribute[]) 添加特性到此模块。 public ModuleBuilder AddAttributes(params Attribute[] attributes) Parameters attributes Attribute[] 要添加到此模块的特性数组。 Returns ModuleBuilder 此模块构建器。 AddCommand(string, Func<ICommandContext, object?[], IServiceProvider, CommandInfo, Task>, Action<CommandBuilder>) 添加命令到此模块。 public ModuleBuilder AddCommand(string primaryAlias, Func<ICommandContext, object?[], IServiceProvider, CommandInfo, Task> callback, Action<CommandBuilder> createFunc) Parameters primaryAlias string 此命令的首要别名。 callback Func<ICommandContext, object[], IServiceProvider, CommandInfo, Task> 当执行此命令时调用的回调。 createFunc Action<CommandBuilder> 一个创建命令构建器的委托。 Returns ModuleBuilder 此模块构建器。 AddModule(string, Action<ModuleBuilder>) 添加子模块到此模块。 public ModuleBuilder AddModule(string primaryAlias, Action<ModuleBuilder> createFunc) Parameters primaryAlias string 此模块的首要别名。 createFunc Action<ModuleBuilder> 一个创建模块构建器的委托。 Returns ModuleBuilder 此模块构建器。 AddPrecondition(PreconditionAttribute) 添加先决条件到此模块。 public ModuleBuilder AddPrecondition(PreconditionAttribute precondition) Parameters precondition PreconditionAttribute 要添加到此模块的先决条件。 Returns ModuleBuilder 此模块构建器。 Build(CommandService, IServiceProvider) 构建此模块构建器为模块。 public ModuleInfo Build(CommandService service, IServiceProvider services) Parameters service CommandService 此模块构建器所属的命令服务。 services IServiceProvider 此模块构建器所属的服务提供程序。 Returns ModuleInfo 构建的模块。 WithName(string) 设置此模块的名基本称。 public ModuleBuilder WithName(string name) Parameters name string 此模块的基本名称。 Returns ModuleBuilder 此模块构建器。 WithRemarks(string) 设置此模块的备注。 public ModuleBuilder WithRemarks(string remarks) Parameters remarks string 此模块的备注。 Returns ModuleBuilder 此模块构建器。 WithSummary(string) 设置此模块的摘要。 public ModuleBuilder WithSummary(string summary) Parameters summary string 此模块的摘要。 Returns ModuleBuilder 此模块构建器。"
  },
  "api/Kook.Commands.Builders.ParameterBuilder.html": {
    "href": "api/Kook.Commands.Builders.ParameterBuilder.html",
    "title": "Class ParameterBuilder | Kook.Net 文档",
    "keywords": "Class ParameterBuilder Namespace Kook.Commands.Builders Assembly Kook.Net.Commands.dll 表示一个参数构建器。 public class ParameterBuilder Inheritance object ParameterBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Attributes 获取此参数的特性。 public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> Command 获取此参数构建器所属的命令构建器。 public CommandBuilder Command { get; } Property Value CommandBuilder DefaultValue 获取或设置此参数的默认值。 public object? DefaultValue { get; set; } Property Value object IsMultiple 获取或设置此参数是否为多值参数。 public bool IsMultiple { get; set; } Property Value bool IsOptional 获取或设置此参数是否为可选参数。 public bool IsOptional { get; set; } Property Value bool IsRemainder 获取或设置此参数是否接收全部剩余参数。 public bool IsRemainder { get; set; } Property Value bool Name 获取或设置此参数的名称。 public string Name { get; } Property Value string ParameterType 获取或设置此参数的类型。 public Type? ParameterType { get; } Property Value Type Preconditions 获取此参数的先决条件。 public IReadOnlyList<ParameterPreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList<ParameterPreconditionAttribute> Summary 获取或设置此参数的摘要。 public string? Summary { get; set; } Property Value string TypeReader 获取或设置此参数的类型读取器。 public TypeReader? TypeReader { get; set; } Property Value TypeReader Methods AddAttributes(params Attribute[]) 添加特性到此参数。 public ParameterBuilder AddAttributes(params Attribute[] attributes) Parameters attributes Attribute[] 要添加到此参数的特性数组。 Returns ParameterBuilder 此参数构建器。 AddPrecondition(ParameterPreconditionAttribute) 添加先决条件到此参数。 public ParameterBuilder AddPrecondition(ParameterPreconditionAttribute precondition) Parameters precondition ParameterPreconditionAttribute 要添加到此参数的先决条件。 Returns ParameterBuilder 此参数构建器。 WithDefault(object) 设置此参数的默认值。 public ParameterBuilder WithDefault(object defaultValue) Parameters defaultValue object 此参数的默认值。 Returns ParameterBuilder 此参数构建器。 WithIsMultiple(bool) 设置此参数是否为多值参数。 public ParameterBuilder WithIsMultiple(bool isMultiple) Parameters isMultiple bool 此参数是否为多值参数。 Returns ParameterBuilder 此参数构建器。 WithIsOptional(bool) 设置此参数是否为可选参数。 public ParameterBuilder WithIsOptional(bool isOptional) Parameters isOptional bool 此参数是否为可选参数。 Returns ParameterBuilder 此参数构建器。 WithIsRemainder(bool) 设置此参数是否接收全部剩余参数。 public ParameterBuilder WithIsRemainder(bool isRemainder) Parameters isRemainder bool 此参数是否接收全部剩余参数。 Returns ParameterBuilder 此参数构建器。 WithSummary(string) 设置此参数的摘要。 public ParameterBuilder WithSummary(string summary) Parameters summary string 此参数的摘要。 Returns ParameterBuilder 此参数构建器。"
  },
  "api/Kook.Commands.Builders.html": {
    "href": "api/Kook.Commands.Builders.html",
    "title": "Namespace Kook.Commands.Builders | Kook.Net 文档",
    "keywords": "Namespace Kook.Commands.Builders Classes CommandBuilder 表示一个命令构建器。 ModuleBuilder 表示一个模块构建器。 ParameterBuilder 表示一个参数构建器。"
  },
  "api/Kook.Commands.ChannelTypeReader-1.html": {
    "href": "api/Kook.Commands.ChannelTypeReader-1.html",
    "title": "Class ChannelTypeReader<T> | Kook.Net 文档",
    "keywords": "Class ChannelTypeReader<T> Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个用于解析字符串到实现了 IChannel 的对象的类型读取器。 public class ChannelTypeReader<T> : TypeReader where T : class, IChannel Type Parameters T 要解析为的频道类型。 Inheritance object TypeReader ChannelTypeReader<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadAsync(ICommandContext, string, IServiceProvider) 尝试将字符串输入解析为指定类型。 public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) Parameters context ICommandContext 命令执行上下文。 input string 要解析的字符串输入。 services IServiceProvider 依赖注入服务容器。 Returns Task<TypeReaderResult> 一个表示异步解析操作的任务。任务的结果包含解析的结果。"
  },
  "api/Kook.Commands.CommandAttribute.html": {
    "href": "api/Kook.Commands.CommandAttribute.html",
    "title": "Class CommandAttribute | Kook.Net 文档",
    "keywords": "Class CommandAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll 为命令标记执行信息。 [AttributeUsage(AttributeTargets.Method)] public class CommandAttribute : Attribute Inheritance object Attribute CommandAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandAttribute() 初始化一个 CommandAttribute 类的新实例。 public CommandAttribute() CommandAttribute(string) 初始化一个 CommandAttribute 类的新实例。 public CommandAttribute(string text) Parameters text string 命令的基本名称。 CommandAttribute(string, bool, string?, string?[]?, string?) 初始化一个 CommandAttribute 类的新实例。 public CommandAttribute(string text, bool ignoreExtraArgs, string? summary = null, string?[]? aliases = null, string? remarks = null) Parameters text string 命令的基本名称。 ignoreExtraArgs bool 是否忽略此命令的额外参数。 summary string 命令的摘要。 aliases string[] 命令的别名。 remarks string 命令的备注。 Properties Aliases 获取或设置命令的别名。 public string?[]? Aliases { get; set; } Property Value string[] Remarks AliasAttribute 特性的值会与此属性的值合并。 IgnoreExtraArgs 获取或设置是否忽略此命令的额外参数。 public bool? IgnoreExtraArgs { get; } Property Value bool? See Also IgnoreExtraArgs Remarks 获取或设置命令的备注。 public string? Remarks { get; set; } Property Value string Remarks RemainderAttribute 特性重写此属性的值。 RunMode 获取或设置命令的运行模式。 public RunMode RunMode { get; set; } Property Value RunMode See Also DefaultRunMode Summary 获取或设置命令的摘要。 public string? Summary { get; set; } Property Value string Remarks SummaryAttribute 特性重写此属性的值。 Text 获取此命令的基本名称。 public string? Text { get; } Property Value string Remarks NameAttribute 特性重写此属性的值。"
  },
  "api/Kook.Commands.CommandContext.html": {
    "href": "api/Kook.Commands.CommandContext.html",
    "title": "Class CommandContext | Kook.Net 文档",
    "keywords": "Class CommandContext Namespace Kook.Commands Assembly Kook.Net.Commands.dll Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. public class CommandContext : ICommandContext Inheritance object CommandContext Implements ICommandContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandContext(IKookClient, IUserMessage) 初始化一个包含指定客户端和消息的 CommandContext 类的新实例。 public CommandContext(IKookClient client, IUserMessage msg) Parameters client IKookClient 命令执行时所使用的客户端。 msg IUserMessage 命令解析的源消息。 Properties Channel 获取命令执行所在的 IMessageChannel。 public IMessageChannel Channel { get; } Property Value IMessageChannel Client 获取命令执行时所使用的 IKookClient。 public IKookClient Client { get; } Property Value IKookClient Guild 获取命令执行所在的 IGuild。 public IGuild? Guild { get; } Property Value IGuild IsPrivate 获取当前上下文是否为私有的执行上下文。 public bool IsPrivate { get; } Property Value bool Message 获取命令解析的源 IUserMessage。 public IUserMessage Message { get; } Property Value IUserMessage User 获取执行命令的 IUser。 public IUser User { get; } Property Value IUser"
  },
  "api/Kook.Commands.CommandError.html": {
    "href": "api/Kook.Commands.CommandError.html",
    "title": "Enum CommandError | Kook.Net 文档",
    "keywords": "Enum CommandError Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示命令执行的错误。 public enum CommandError Fields BadArgCount = 3 当输入文本的参数过少或过多时引发。 Exception = 7 当命令执行时发生异常时引发。 MultipleMatches = 5 当 TypeReader 匹配到多个对象时引发。 ObjectNotFound = 4 当对象未被 TypeReader 找到时引发。 ParseFailed = 2 当命令解析失败时引发。 UnknownCommand = 1 当命令未知时引发。 UnmetPrecondition = 6 当命令未满足先决条件时引发。 Unsuccessful = 8 当命令在运行时未成功执行时引发。"
  },
  "api/Kook.Commands.CommandException.html": {
    "href": "api/Kook.Commands.CommandException.html",
    "title": "Class CommandException | Kook.Net 文档",
    "keywords": "Class CommandException Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个命令执行过程中发生的异常。 public class CommandException : Exception, ISerializable Inheritance object Exception CommandException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CommandException(CommandInfo, ICommandContext, Exception?) 初始化一个 CommandException 类的新实例。 public CommandException(CommandInfo command, ICommandContext context, Exception? ex) Parameters command CommandInfo 引发异常的命令。 context ICommandContext 引发异常的命令上下文。 ex Exception 引发的异常。 Properties Command 获取异常的命令信息。 public CommandInfo Command { get; } Property Value CommandInfo Context 获取异常的命令上下文。 public ICommandContext Context { get; } Property Value ICommandContext"
  },
  "api/Kook.Commands.CommandInfo.html": {
    "href": "api/Kook.Commands.CommandInfo.html",
    "title": "Class CommandInfo | Kook.Net 文档",
    "keywords": "Class CommandInfo Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个命令的信息。 public class CommandInfo Inheritance object CommandInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 此对象包含命令的信息。这可能包括命令的模块、有关命令的各种描述以及执行模式等。 Properties Aliases 获取此命令的所有别名。 public IReadOnlyList<string> Aliases { get; } Property Value IReadOnlyList<string> Attributes 获取此命令的所有特性。 public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> HasVarArgs 获取此命令是否可变数量的参数。 public bool HasVarArgs { get; } Property Value bool IgnoreExtraArgs 获取此命令是否应忽略额外的参数。 public bool IgnoreExtraArgs { get; } Property Value bool Module 获取此命令所属的模块。 public ModuleInfo Module { get; } Property Value ModuleInfo Name 获取此命令的名称。如果未设置基本名称，则返回首要别名。 public string Name { get; } Property Value string Parameters 获取此命令的所有参数的信息。 public IReadOnlyList<ParameterInfo> Parameters { get; } Property Value IReadOnlyList<ParameterInfo> Preconditions 获取此命令的所有先决条件。 public IReadOnlyList<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList<PreconditionAttribute> Priority 获取此命令的优先级。当命令匹配多个重载时，此优先级将用于确定要执行的重载。 public int Priority { get; } Property Value int See Also PriorityAttribute(int) Remarks 获取此命令的备注。 public string? Remarks { get; } Property Value string Remarks 此字段返回命令的摘要。Summary 和 Remarks 可以用于帮助命令中，为用户提供命令的详细信息。 RunMode 获取此命令的执行模式。 public RunMode RunMode { get; } Property Value RunMode Summary 获取此命令的摘要。 public string? Summary { get; } Property Value string Remarks 此字段返回命令的摘要。Summary 和 Remarks 可以用于帮助命令中，为用户提供命令的详细信息。 Methods CheckPreconditionsAsync(ICommandContext, IServiceProvider?) 检查命令在指定的上下文中是否可以执行。 public Task<PreconditionResult> CheckPreconditionsAsync(ICommandContext context, IServiceProvider? services = null) Parameters context ICommandContext 命令的上下文。 services IServiceProvider 用于检查的服务提供程序。 Returns Task<PreconditionResult> 一个表示异步检查操作的任务。任务的结果包含先决条件的结果。 ExecuteAsync(ICommandContext, ParseResult, IServiceProvider) 执行命令。 public Task<IResult> ExecuteAsync(ICommandContext context, ParseResult parseResult, IServiceProvider services) Parameters context ICommandContext 命令执行上下文。 parseResult ParseResult 命令的参数解析结果。 services IServiceProvider 用于执行的服务提供程序。 Returns Task<IResult> 一个表示异步执行操作的任务。任务的结果包含命令执行的结果。 ExecuteAsync(ICommandContext, IEnumerable<object?>, IEnumerable<object?>, IServiceProvider) 执行命令。 public Task<IResult> ExecuteAsync(ICommandContext context, IEnumerable<object?> argList, IEnumerable<object?> paramList, IServiceProvider services) Parameters context ICommandContext 命令执行上下文。 argList IEnumerable<object> 命令的实参列表。 paramList IEnumerable<object> 命令的形参列表。 services IServiceProvider 用于执行的服务提供程序。 Returns Task<IResult> 一个表示异步执行操作的任务。任务的结果包含命令执行的结果。 ParseAsync(ICommandContext, int, SearchResult, PreconditionResult?, IServiceProvider?) 解析命令的参数。 public Task<ParseResult> ParseAsync(ICommandContext context, int startIndex, SearchResult searchResult, PreconditionResult? preconditionResult = null, IServiceProvider? services = null) Parameters context ICommandContext 命令执行上下文。 startIndex int 解析的起始索引。 searchResult SearchResult 命令搜索结果。 preconditionResult PreconditionResult 先决条件的检查结果。 services IServiceProvider 用于解析的服务提供程序。 Returns Task<ParseResult> 一个表示异步解析操作的任务。任务的结果包含解析的结果。"
  },
  "api/Kook.Commands.CommandMatch.html": {
    "href": "api/Kook.Commands.CommandMatch.html",
    "title": "Struct CommandMatch | Kook.Net 文档",
    "keywords": "Struct CommandMatch Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个匹配的命令。 public struct CommandMatch Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors CommandMatch(CommandInfo, string) 初始化一个 CommandMatch 结构的新实例。 public CommandMatch(CommandInfo command, string alias) Parameters command CommandInfo 与搜索结果相匹配的命令。 alias string 命令的别名。 Properties Alias 获取命令的别名。 public readonly string Alias { get; } Property Value string Command 获取与搜索结果相匹配的命令。 public readonly CommandInfo Command { get; } Property Value CommandInfo Methods CheckPreconditionsAsync(ICommandContext, IServiceProvider?) 检查此命令的先决条件。 public Task<PreconditionResult> CheckPreconditionsAsync(ICommandContext context, IServiceProvider? services = null) Parameters context ICommandContext 命令的上下文。 services IServiceProvider 用于检查先决条件的以来服务提供程序。 Returns Task<PreconditionResult> 一个表示异步检查操作的任务。任务的结果包含先决条件的结果。 ExecuteAsync(ICommandContext, ParseResult, IServiceProvider) 执行此命令。 public Task<IResult> ExecuteAsync(ICommandContext context, ParseResult parseResult, IServiceProvider services) Parameters context ICommandContext 命令的上下文。 parseResult ParseResult 解析的结果。 services IServiceProvider 用于执行的服务提供程序。 Returns Task<IResult> 一个表示异步执行操作的任务。任务的结果包含执行的结果。 ExecuteAsync(ICommandContext, IEnumerable<object>, IEnumerable<object>, IServiceProvider) 执行此命令。 public Task<IResult> ExecuteAsync(ICommandContext context, IEnumerable<object> argList, IEnumerable<object> paramList, IServiceProvider services) Parameters context ICommandContext 命令的上下文。 argList IEnumerable<object> 命令的实参。 paramList IEnumerable<object> 命令的形参。 services IServiceProvider 用于执行的服务提供程序。 Returns Task<IResult> 一个表示异步执行操作的任务。任务的结果包含执行的结果。 ParseAsync(ICommandContext, SearchResult, PreconditionResult?, IServiceProvider?) 解析此命令。 public Task<ParseResult> ParseAsync(ICommandContext context, SearchResult searchResult, PreconditionResult? preconditionResult = null, IServiceProvider? services = null) Parameters context ICommandContext 命令的上下文。 searchResult SearchResult 搜索结果。 preconditionResult PreconditionResult 先决条件的结果。 services IServiceProvider 用于解析的服务提供程序。 Returns Task<ParseResult> 一个表示异步解析操作的任务。任务的结果包含解析的结果。"
  },
  "api/Kook.Commands.CommandService.html": {
    "href": "api/Kook.Commands.CommandService.html",
    "title": "Class CommandService | Kook.Net 文档",
    "keywords": "Class CommandService Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个基于文本的命令服务。 public class CommandService : IDisposable Inheritance object CommandService Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CommandServiceExtensions.GetExecutableCommandsAsync(CommandService, ICommandContext, IServiceProvider) Remarks 此类用于支持在运行时动态创建命令，或者在编译时静态创建命令。要在编译时创建命令模块，参见 ModuleBase 或 ModuleBuilder。 此服务还提供了几个事件，用于监视命令的使用情况；例如 Log 用于任何与命令相关的日志事件， Constructors CommandService() 初始化一个 CommandService 类的新实例。 public CommandService() CommandService(CommandServiceConfig) 初始化一个 CommandService 类的新实例。 public CommandService(CommandServiceConfig config) Parameters config CommandServiceConfig 命令服务的配置。 Exceptions InvalidOperationException 默认运行模式不能设置为 Default。 Properties Commands 获取所有加载的命令。 public IEnumerable<CommandInfo> Commands { get; } Property Value IEnumerable<CommandInfo> Modules 获取所有加载的模块。 public IEnumerable<ModuleInfo> Modules { get; } Property Value IEnumerable<ModuleInfo> TypeReaders 获取所有加载的类型读取器。 public ILookup<Type, TypeReader> TypeReaders { get; } Property Value ILookup<Type, TypeReader> Methods AddModuleAsync(Type, IServiceProvider?) 添加一个命令模块。 public Task<ModuleInfo> AddModuleAsync(Type type, IServiceProvider? services) Parameters type Type 要添加的模块的类型。 services IServiceProvider 用于依赖注入的服务提供程序；如果不使用依赖注入，则传递 null。 Returns Task<ModuleInfo> 一个表示异步添加操作的任务。任务结果包含添加的模块。 Exceptions ArgumentException 此模块已经添加。 InvalidOperationException 无法构建 ModuleInfo；可能提供了无效的类型。 AddModuleAsync<T>(IServiceProvider?) 添加一个命令模块。 public Task<ModuleInfo> AddModuleAsync<T>(IServiceProvider? services) Parameters services IServiceProvider 用于依赖注入的服务提供程序；如果不使用依赖注入，则传递 null。 Returns Task<ModuleInfo> 一个表示异步添加操作的任务。任务结果包含添加的模块。 Type Parameters T 要添加的模块的类型。 Examples 以下示例代码将模块 MyModule 注册到 commandService 中。 await commandService.AddModuleAsync<MyModule>(serviceProvider); Exceptions ArgumentException 此模块已经添加。 InvalidOperationException 无法构建 ModuleInfo；可能提供了无效的类型。 AddModulesAsync(Assembly, IServiceProvider?) 添加程序集内的所有命令模块。 public Task<IEnumerable<ModuleInfo>> AddModulesAsync(Assembly assembly, IServiceProvider? services) Parameters assembly Assembly 要添加其所有模块的程序集。 services IServiceProvider 用于依赖注入的服务提供程序；如果不使用依赖注入，则传递 null。 Returns Task<IEnumerable<ModuleInfo>> 一个表示异步添加操作的任务。任务结果包含所有添加的模块。 AddTypeReader(Type, TypeReader) 添加一个自定义的类型读取器。 public void AddTypeReader(Type type, TypeReader reader) Parameters type Type 要读取的对象类型。 reader TypeReader 要添加的类型读取器的实例。 Remarks 如果 type 是一个值类型，那么一个读取对应可空值类型的 TypeReader 也会被添加。 如果 type 的默认 TypeReader 已经存在，那么会记录一个警告，默认的 TypeReader 将会被替换。 AddTypeReader(Type, TypeReader, bool) 添加一个自定义的类型读取器。 public void AddTypeReader(Type type, TypeReader reader, bool replaceDefault) Parameters type Type 要读取的对象类型。 reader TypeReader 要添加的类型读取器的实例。 replaceDefault bool 是否替换默认的 TypeReader。 Remarks 如果 type 是一个值类型，那么一个读取对应可空值类型的 TypeReader 也会被添加。 AddTypeReader<T>(TypeReader) 添加一个自定义的类型读取器。 public void AddTypeReader<T>(TypeReader reader) Parameters reader TypeReader 要添加的类型读取器的实例。 Type Parameters T 要读取的对象类型。 Remarks 如果 T 是一个值类型，那么一个读取对应可空值类型的 TypeReader 也会被添加。 如果 T 的默认 TypeReader 已经存在，那么会记录一个警告，默认的 TypeReader 将会被替换。 AddTypeReader<T>(TypeReader, bool) 添加一个自定义的类型读取器。 public void AddTypeReader<T>(TypeReader reader, bool replaceDefault) Parameters reader TypeReader 要添加的类型读取器的实例。 replaceDefault bool 是否替换默认的 TypeReader。 Type Parameters T 要读取的对象类型。 Remarks 如果 T 是一个值类型，那么一个读取对应可空值类型的 TypeReader 也会被添加。 CreateModuleAsync(string, Action<ModuleBuilder>) 创建一个命令模块。 public Task<ModuleInfo> CreateModuleAsync(string primaryAlias, Action<ModuleBuilder> buildFunc) Parameters primaryAlias string 模块的首要别名。 buildFunc Action<ModuleBuilder> 一个构建模块的委托。 Returns Task<ModuleInfo> 一个表示异步操作的任务。任务结果包含构建的模块。 Dispose(bool) Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. protected virtual void Dispose(bool disposing) Parameters disposing bool ExecuteAsync(ICommandContext, int, IServiceProvider, MultiMatchHandling) 执行命令。 public Task<IResult> ExecuteAsync(ICommandContext context, int argPos, IServiceProvider services, MultiMatchHandling multiMatchHandling = MultiMatchHandling.Exception) Parameters context ICommandContext 命令的上下文。 argPos int 命令的位置。 services IServiceProvider 要用于命令执行的依赖注入服务。 multiMatchHandling MultiMatchHandling 当匹配到多个命令时的处理模式。 Returns Task<IResult> 一个表示异步执行操作的任务。任务的结果包含执行的结果。 ExecuteAsync(ICommandContext, string, IServiceProvider, MultiMatchHandling) 执行命令。 public Task<IResult> ExecuteAsync(ICommandContext context, string input, IServiceProvider services, MultiMatchHandling multiMatchHandling = MultiMatchHandling.Exception) Parameters context ICommandContext 命令的上下文。 input string 命令字符串。 services IServiceProvider 要用于命令执行的依赖注入服务。 multiMatchHandling MultiMatchHandling 当匹配到多个命令时的处理模式。 Returns Task<IResult> 一个表示异步执行操作的任务。任务的结果包含执行的结果。 RemoveModuleAsync(ModuleInfo) 移除命令模块。 public Task<bool> RemoveModuleAsync(ModuleInfo module) Parameters module ModuleInfo 要移除的模块。 Returns Task<bool> 一个表示异步删除操作的任务。如果任务结果为 true，则表示模块已成功删除，否则表示模块不存在。 RemoveModuleAsync(Type) 移除命令模块。 public Task<bool> RemoveModuleAsync(Type type) Parameters type Type 要移除的模块的类型。 Returns Task<bool> 一个表示异步删除操作的任务。如果任务结果为 true，则表示模块已成功删除，否则表示模块不存在。 RemoveModuleAsync<T>() 移除命令模块。 public Task<bool> RemoveModuleAsync<T>() Returns Task<bool> 一个表示异步删除操作的任务。如果任务结果为 true，则表示模块已成功删除，否则表示模块不存在。 Type Parameters T 要移除的模块的类型。 Search(ICommandContext, int) 搜索命令。 public SearchResult Search(ICommandContext context, int argPos) Parameters context ICommandContext 命令的上下文。 argPos int 命令的位置。 Returns SearchResult 命令搜索的结果。 Search(ICommandContext, string) 搜索命令。 public SearchResult Search(ICommandContext context, string input) Parameters context ICommandContext 命令的上下文。 input string 命令字符串。 Returns SearchResult 命令搜索的结果。 Search(string) 搜索命令。 public SearchResult Search(string input) Parameters input string 命令字符串。 Returns SearchResult 命令搜索的结果。 TryRemoveTypeReader(Type, bool, out IDictionary<Type, TypeReader>) 移除一个类型读取器。 public bool TryRemoveTypeReader(Type type, bool isDefaultTypeReader, out IDictionary<Type, TypeReader> readers) Parameters type Type 要移除的类型读取器所读取的对象类型。 isDefaultTypeReader bool 是否要移除默认的 TypeReader。 readers IDictionary<Type, TypeReader> 移除的类型读取器。 Returns bool 如果成功移除，则为 true；否则为 false。 Remarks 从命令服务中移除一个 TypeReader 不会从已加载的模块与命令的实例中取消引用 TypeReader。要使更改生效，您需要重新加载模块。 ValidateAndGetBestMatch(SearchResult, ICommandContext, IServiceProvider, MultiMatchHandling) 从指定的搜索结果中验证先决条件并获取最佳匹配。 public Task<IResult> ValidateAndGetBestMatch(SearchResult matches, ICommandContext context, IServiceProvider provider, MultiMatchHandling multiMatchHandling = MultiMatchHandling.Exception) Parameters matches SearchResult 要验证的搜索结果。 context ICommandContext 命令的上下文。 provider IServiceProvider 要用于命令验证与解析的依赖注入服务。 multiMatchHandling MultiMatchHandling 当匹配到多个命令时的处理模式。 Returns Task<IResult> 一个表示异步操作的任务。任务的结果包含验证与最佳匹配的结果。 Events CommandExecuted 当命令执行时引发。 public event Func<CommandInfo?, ICommandContext, IResult, Task> CommandExecuted Event Type Func<CommandInfo, ICommandContext, IResult, Task> Remarks 此事件在命令执行后引发，既包含了执行成功的情况，也包含了执行失败的情况。 事件参数： CommandInfo? 参数是执行的命令，如果命令在解析或先决条件阶段失败，则可能为 null。 ICommandContext 参数是命令的上下文。 IResult 参数是命令的结果。 Log 当产生与命令相关的日志信息时引发。 public event Func<LogMessage, Task> Log Event Type Func<LogMessage, Task> Remarks 事件参数： LogMessage 参数是日志消息。"
  },
  "api/Kook.Commands.CommandServiceConfig.html": {
    "href": "api/Kook.Commands.CommandServiceConfig.html",
    "title": "Class CommandServiceConfig | Kook.Net 文档",
    "keywords": "Class CommandServiceConfig Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个用于 CommandService 的配置类。 public class CommandServiceConfig Inheritance object CommandServiceConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CaseSensitiveCommands 获取或设置命令是否区分大小写。 public bool CaseSensitiveCommands { get; set; } Property Value bool DefaultRunMode 获取或设置命令的默认运行模式，如果在命令属性或构建器上未指定运行模式，则使用此值。 public RunMode DefaultRunMode { get; set; } Property Value RunMode Remarks 如需在命令上重写默认行为，请使用 RunMode 属性。 IgnoreExtraArgs 获取或设置默认情况下是否应忽略额外的参数。 public bool IgnoreExtraArgs { get; set; } Property Value bool Remarks 如果设置为 true，则默认情况下命令将忽略额外的参数。否则，将引发 BadArgCount 错误。如需在命令上重写默认行为，请使用 IgnoreExtraArgs 属性。 LogLevel 获取或设置将引发 Log 事件的最低日志级别严重性。 public LogSeverity LogLevel { get; set; } Property Value LogSeverity QuotationMarkAliasMap 获取或设置用于匹配字符串定界符的别名集合。 public Dictionary<char, char> QuotationMarkAliasMap { get; set; } Property Value Dictionary<char, char> Examples 以下示例重新设置了定界符所使用的开闭对： QuotationMarkAliasMap = new Dictionary<char, char>() { {'\\\"', '\\\"' }, {'“', '”' }, {'「', '」' }, } Remarks 如果为更改此属性，则将使用默认的内置别名集合，这可能包含了许多地区和 Unicode 符号中可视为开闭对的符号。也可以在此默认集合的基础上进行修改。如果设置为空字典，则会使用 \" 作为默认定界符。 SeparatorChar 获取或设置用于分隔参数的字符。 public char SeparatorChar { get; set; } Property Value char ThrowOnError 获取或设置同步执行的命令是否应将异常传递给调用者。 public bool ThrowOnError { get; set; } Property Value bool Remarks 同步命令指的是其运行模式为 Sync 的命令。"
  },
  "api/Kook.Commands.CommandServiceExtensions.html": {
    "href": "api/Kook.Commands.CommandServiceExtensions.html",
    "title": "Class CommandServiceExtensions | Kook.Net 文档",
    "keywords": "Class CommandServiceExtensions Namespace Kook.Commands Assembly Kook.Net.Commands.dll 提供用于 CommandService 的扩展方法。 public static class CommandServiceExtensions Inheritance object CommandServiceExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetExecutableCommandsAsync(CommandService, ICommandContext, IServiceProvider) 获取可以在当前上下文下执行的命令。 public static Task<IReadOnlyCollection<CommandInfo>> GetExecutableCommandsAsync(this CommandService commandService, ICommandContext context, IServiceProvider provider) Parameters commandService CommandService 要检查的命令服务。 context ICommandContext 当前命令上下文。 provider IServiceProvider 用于检查时的依赖注入的服务提供程序。 Returns Task<IReadOnlyCollection<CommandInfo>> 可以在当前上下文下执行的所有命令。 GetExecutableCommandsAsync(ModuleInfo, ICommandContext, IServiceProvider) 获取可以在当前上下文下执行的命令。 public static Task<IReadOnlyCollection<CommandInfo>> GetExecutableCommandsAsync(this ModuleInfo module, ICommandContext context, IServiceProvider provider) Parameters module ModuleInfo 要检查的模块。 context ICommandContext 当前命令上下文。 provider IServiceProvider 用于检查时的依赖注入的服务提供程序。 Returns Task<IReadOnlyCollection<CommandInfo>> 所提供的模块中可以在当前上下文下执行的所有命令。 GetExecutableCommandsAsync(ICollection<CommandInfo>, ICommandContext, IServiceProvider) 获取可以在当前上下文下执行的命令。 public static Task<IReadOnlyCollection<CommandInfo>> GetExecutableCommandsAsync(this ICollection<CommandInfo> commands, ICommandContext context, IServiceProvider provider) Parameters commands ICollection<CommandInfo> 要检查的命令。 context ICommandContext 当前命令上下文。 provider IServiceProvider 用于检查时的依赖注入的服务提供程序。 Returns Task<IReadOnlyCollection<CommandInfo>> 所提供的命令中可以在当前上下文下执行的所有命令。"
  },
  "api/Kook.Commands.ContextType.html": {
    "href": "api/Kook.Commands.ContextType.html",
    "title": "Enum ContextType | Kook.Net 文档",
    "keywords": "Enum ContextType Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个运行命令支持的上下文类型。 [Flags] public enum ContextType Fields DM = 2 命令可以在私聊频道中执行。 Guild = 1 命令可以在服务器内执行。"
  },
  "api/Kook.Commands.DontAutoLoadAttribute.html": {
    "href": "api/Kook.Commands.DontAutoLoadAttribute.html",
    "title": "Class DontAutoLoadAttribute | Kook.Net 文档",
    "keywords": "Class DontAutoLoadAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll 标记指定的模块不应被自动加载。 [AttributeUsage(AttributeTargets.Class)] public class DontAutoLoadAttribute : Attribute Inheritance object Attribute DontAutoLoadAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 此属性告诉 CommandService 在自动加载模块是忽略被此特性标记的模块。 需要注意的是，如果尝试手动加载被此特性标记的非公共模块，加载过程也会失败。"
  },
  "api/Kook.Commands.DontInjectAttribute.html": {
    "href": "api/Kook.Commands.DontInjectAttribute.html",
    "title": "Class DontInjectAttribute | Kook.Net 文档",
    "keywords": "Class DontInjectAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll 标记指定的成员不应被注入到其父模块。 [AttributeUsage(AttributeTargets.Property)] public class DontInjectAttribute : Attribute Inheritance object Attribute DontInjectAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples 以下示例代码中，DatabaseService 将不会自动注入服务，如果依赖项无法解析，也不会抛出错误消息。 public class MyModule : ModuleBase { [DontInject] public DatabaseService DatabaseService { get; } public MyModule() { DatabaseService = DatabaseFactory.Generate(); } } Remarks 此特性阻止被标记的成员被注入到其父模块。当存在一个公共属性但不希望为该属性自动注入服务时，请标记此特性。"
  },
  "api/Kook.Commands.ExecuteResult.html": {
    "href": "api/Kook.Commands.ExecuteResult.html",
    "title": "Struct ExecuteResult | Kook.Net 文档",
    "keywords": "Struct ExecuteResult Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个命令的整体执行结果的信息。 public struct ExecuteResult : IResult Implements IResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Error 获取在命令执行期间发生的异常信息，如果没有异常则为 null。 public readonly CommandError? Error { get; } Property Value CommandError? ErrorReason 获取在命令执行期间发生的异常的原因，如果没有异常则为 null。 public readonly string? ErrorReason { get; } Property Value string Exception 获取在命令执行期间发生的异常，如果没有异常则为 null。 public readonly Exception? Exception { get; } Property Value Exception IsSuccess 获取命令执行的结果是否为成功。 public bool IsSuccess { get; } Property Value bool Methods FromError(CommandError, string) 初始化一个包含指定错误类型和原因的 ExecuteResult 结构的新实例，表示一个失败的执行。 public static ExecuteResult FromError(CommandError error, string reason) Parameters error CommandError 错误类型。 reason string 错误原因。 Returns ExecuteResult 一个表示执行失败的 ExecuteResult。 FromError(IResult) 初始化一个包含指定结果的 ExecuteResult 结构的新实例，根据指定的 Error 和 ErrorReason，这可能是一个成功的执行，也可能是一个失败的执行。 public static ExecuteResult FromError(IResult result) Parameters result IResult 要包装的结果。 Returns ExecuteResult 一个表示执行结果的 ExecuteResult，错误类型和原因与 result 相同。 FromError(Exception?) 初始化一个包含指定异常的 ExecuteResult 结构的新实例，表示一个失败的执行。 public static ExecuteResult FromError(Exception? ex) Parameters ex Exception 导致执行失败的异常。 Returns ExecuteResult 一个包含导致执行失败的异常的 ExecuteResult，其错误类型为 Exception，原因为异常消息。 FromSuccess() 初始化一个不包含任何错误的 ExecuteResult 结构的新实例，表示一个成功的执行。 public static ExecuteResult FromSuccess() Returns ExecuteResult 一个表示执行成功的 ExecuteResult。 ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/Kook.Commands.GroupAttribute.html": {
    "href": "api/Kook.Commands.GroupAttribute.html",
    "title": "Class GroupAttribute | Kook.Net 文档",
    "keywords": "Class GroupAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll 标记模块为命令组。 [AttributeUsage(AttributeTargets.Class)] public class GroupAttribute : Attribute Inheritance object Attribute GroupAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GroupAttribute() 初始化一个 GroupAttribute 类的新实例。 public GroupAttribute() GroupAttribute(string) 初始化一个 GroupAttribute 类的新实例。 public GroupAttribute(string prefix) Parameters prefix string 模块组命令的前缀。 Properties Prefix 获取模块组命令的前缀。 public string? Prefix { get; } Property Value string"
  },
  "api/Kook.Commands.ICommandContext.html": {
    "href": "api/Kook.Commands.ICommandContext.html",
    "title": "Interface ICommandContext | Kook.Net 文档",
    "keywords": "Interface ICommandContext Namespace Kook.Commands Assembly Kook.Net.Core.dll 表示命令的上下文。这可能包括客户端、公会、频道、用户和消息。 public interface ICommandContext Properties Channel 获取命令执行所在的 IMessageChannel。 IMessageChannel Channel { get; } Property Value IMessageChannel Client 获取命令执行时所使用的 IKookClient。 IKookClient Client { get; } Property Value IKookClient Guild 获取命令执行所在的 IGuild。 IGuild? Guild { get; } Property Value IGuild Message 获取命令解析的源 IUserMessage。 IUserMessage Message { get; } Property Value IUserMessage User 获取执行命令的 IUser。 IUser User { get; } Property Value IUser"
  },
  "api/Kook.Commands.IEnumerableExtensions.html": {
    "href": "api/Kook.Commands.IEnumerableExtensions.html",
    "title": "Class IEnumerableExtensions | Kook.Net 文档",
    "keywords": "Class IEnumerableExtensions Namespace Kook.Commands Assembly Kook.Net.Commands.dll 提供用于 IEnumerable<T> 的扩展方法。 public static class IEnumerableExtensions Inheritance object IEnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Permutate<TFirst, TSecond, TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>) 生成两个集合中所有可能的元素组合，并将指定的函数应用于每个组合以生成结果。 public static IEnumerable<TResult> Permutate<TFirst, TSecond, TResult>(this IEnumerable<TFirst> set, IEnumerable<TSecond> others, Func<TFirst, TSecond, TResult> func) Parameters set IEnumerable<TFirst> 用于生成组合的第一个元素集合。 others IEnumerable<TSecond> 用于生成组合的第二个元素集合。 func Func<TFirst, TSecond, TResult> 用于生成结果的函数。 Returns IEnumerable<TResult> 所有可能的元素组合的结果。 Type Parameters TFirst 第一个集合中的元素类型。 TSecond 第二个集合中的元素类型。 TResult 结果的类型。"
  },
  "api/Kook.Commands.IModuleBase.html": {
    "href": "api/Kook.Commands.IModuleBase.html",
    "title": "Interface IModuleBase | Kook.Net 文档",
    "keywords": "Interface IModuleBase Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个通用的模块基类。 public interface IModuleBase Methods AfterExecute(CommandInfo) 当此模块中的命令运行后执行。 void AfterExecute(CommandInfo command) Parameters command CommandInfo 执行的命令。 AfterExecuteAsync(CommandInfo) 当此模块中的命令运行后异步执行。 Task AfterExecuteAsync(CommandInfo command) Parameters command CommandInfo 执行的命令。 Returns Task 一个表示异步操作的任务。 BeforeExecute(CommandInfo) 当此模块中的命令在运行之前执行。 void BeforeExecute(CommandInfo command) Parameters command CommandInfo 即将运行的命令。 BeforeExecuteAsync(CommandInfo) 当此模块中的命令在运行之前异步执行。 Task BeforeExecuteAsync(CommandInfo command) Parameters command CommandInfo 即将运行的命令。 Returns Task 一个表示异步操作的任务。 OnModuleBuilding(CommandService, ModuleBuilder) 当构建此模块时执行。 void OnModuleBuilding(CommandService commandService, ModuleBuilder builder) Parameters commandService CommandService 创建此模块的命令服务。 builder ModuleBuilder 用于构建此模块的构建器。 SetContext(ICommandContext) 设置此模块基类的上下文。 void SetContext(ICommandContext context) Parameters context ICommandContext 此模块基类的上下文。"
  },
  "api/Kook.Commands.IResult.html": {
    "href": "api/Kook.Commands.IResult.html",
    "title": "Interface IResult | Kook.Net 文档",
    "keywords": "Interface IResult Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个有关命令的结果的信息。 public interface IResult Properties Error 获取在命令执行期间发生的异常信息，如果没有异常则为 null。 CommandError? Error { get; } Property Value CommandError? ErrorReason 获取在命令执行期间发生的异常的原因，如果没有异常则为 null。 string? ErrorReason { get; } Property Value string IsSuccess 获取命令执行的结果是否为成功。 bool IsSuccess { get; } Property Value bool"
  },
  "api/Kook.Commands.MatchResult.html": {
    "href": "api/Kook.Commands.MatchResult.html",
    "title": "Class MatchResult | Kook.Net 文档",
    "keywords": "Class MatchResult Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个命令的匹配结果。 public class MatchResult : IResult Inheritance object MatchResult Implements IResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Error 获取在命令执行期间发生的异常信息，如果没有异常则为 null。 public CommandError? Error { get; } Property Value CommandError? ErrorReason 获取在命令执行期间发生的异常的原因，如果没有异常则为 null。 public string? ErrorReason { get; } Property Value string IsSuccess 获取命令执行的结果是否为成功。 public bool IsSuccess { get; } Property Value bool Match 获取在命令执行期间可能与输入文本匹配的命令。 public CommandMatch? Match { get; } Property Value CommandMatch? Pipeline 获取命令在执行工作流中的阶段。 public IResult? Pipeline { get; } Property Value IResult Methods FromError(CommandError, string) 初始化一个包含指定错误类型和原因的 MatchResult 类的新实例，表示一个失败的匹配。 public static MatchResult FromError(CommandError error, string reason) Parameters error CommandError 命令匹配失败的类型。 reason string 命令匹配失败的原因。 Returns MatchResult 一个表示匹配失败的 MatchResult。 FromError(IResult) 初始化一个包含指定失败结果的 MatchResult 类的新实例，表示一个失败的匹配。 public static MatchResult FromError(IResult result) Parameters result IResult 失败的结果。 Returns MatchResult 一个表示匹配失败的 MatchResult。 FromError(IResult, CommandError, string) 初始化一个包含指定错误类型和原因的 MatchResult 类的新实例，表示一个失败的匹配。 public static MatchResult FromError(IResult pipeline, CommandError error, string reason) Parameters pipeline IResult 命令执行工作流中的阶段。 error CommandError 错误类型。 reason string 错误原因。 Returns MatchResult 一个表示匹配失败的 MatchResult。 FromError(Exception) 初始化一个包含指定异常的 MatchResult 类的新实例，表示一个失败的匹配。 public static MatchResult FromError(Exception ex) Parameters ex Exception 导致匹配失败的异常。 Returns MatchResult 一个表示匹配失败的 MatchResult。 FromSuccess(CommandMatch, IResult) 初始化一个不包含任何错误的 MatchResult 类的新实例，表示一个成功的匹配。 public static MatchResult FromSuccess(CommandMatch match, IResult pipeline) Parameters match CommandMatch 命令匹配信息。 pipeline IResult 命令执行工作流中的阶段。 Returns MatchResult 一个表示匹配成功的 MatchResult。 ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Kook.Commands.MessageExtensions.html": {
    "href": "api/Kook.Commands.MessageExtensions.html",
    "title": "Class MessageExtensions | Kook.Net 文档",
    "keywords": "Class MessageExtensions Namespace Kook.Commands Assembly Kook.Net.Commands.dll 提供用于 IUserMessage 与命令相关的扩展方法。 public static class MessageExtensions Inheritance object MessageExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HasCharPrefix(IUserMessage, char, ref int) 获取消息是否以提供的字符开头。 public static bool HasCharPrefix(this IUserMessage msg, char c, ref int argPos) Parameters msg IUserMessage 要检查的消息。 c char 要检查的前导字符。 argPos int 开始检查的位置。 Returns bool 如果消息以指定的字符开头，则为 true；否则为 false。 HasMentionPrefix(IUserMessage, IUser, ref int) 获取消息是否以提供的用户提及开头。 public static bool HasMentionPrefix(this IUserMessage msg, IUser user, ref int argPos) Parameters msg IUserMessage 要检查的消息。 user IUser 要检查的用户。 argPos int 开始检查的位置。 Returns bool 如果消息以指定的用户提及开头，则为 true；否则为 false。 HasStringPrefix(IUserMessage, string, ref int, StringComparison) 获取消息是否以提供的字符串开头。 public static bool HasStringPrefix(this IUserMessage msg, string str, ref int argPos, StringComparison comparisonType = StringComparison.Ordinal) Parameters msg IUserMessage 要检查的消息。 str string 要检查的前导字符。 argPos int 开始检查的位置。 comparisonType StringComparison 字符串比较模式。 Returns bool 如果消息以指定的字符串开头，则为 true；否则为 false。 TryExpandCardContent(IUserMessage, out string?) 尝试将卡片的内容展开为单个字符串。 public static bool TryExpandCardContent(this IUserMessage msg, out string? expandedContent) Parameters msg IUserMessage 要展开的消息。 expandedContent string 展开的内容。 Returns bool 如果成功展开，则为 true；否则为 false。"
  },
  "api/Kook.Commands.MessageTypeReader-1.html": {
    "href": "api/Kook.Commands.MessageTypeReader-1.html",
    "title": "Class MessageTypeReader<T> | Kook.Net 文档",
    "keywords": "Class MessageTypeReader<T> Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个用于解析实现了 IMessage 的对象的类型读取器。 public class MessageTypeReader<T> : TypeReader where T : class, IMessage Type Parameters T 要解析为的消息类型。 Inheritance object TypeReader MessageTypeReader<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadAsync(ICommandContext, string, IServiceProvider) 尝试将字符串输入解析为指定类型。 public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) Parameters context ICommandContext 命令执行上下文。 input string 要解析的字符串输入。 services IServiceProvider 依赖注入服务容器。 Returns Task<TypeReaderResult> 一个表示异步解析操作的任务。任务的结果包含解析的结果。"
  },
  "api/Kook.Commands.ModuleBase-1.html": {
    "href": "api/Kook.Commands.ModuleBase-1.html",
    "title": "Class ModuleBase<T> | Kook.Net 文档",
    "keywords": "Class ModuleBase<T> Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个模块基类。 public abstract class ModuleBase<T> : IModuleBase where T : class, ICommandContext Type Parameters T 模块的上下文类型。 Inheritance object ModuleBase<T> Implements IModuleBase Derived ModuleBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Context 获取此命令的上下文。 public T Context { get; } Property Value T Methods AfterExecute(CommandInfo) 当此模块中的命令运行后执行。 protected virtual void AfterExecute(CommandInfo command) Parameters command CommandInfo 执行的命令。 AfterExecuteAsync(CommandInfo) 当此模块中的命令运行后异步执行。 protected virtual Task AfterExecuteAsync(CommandInfo command) Parameters command CommandInfo 执行的命令。 Returns Task 一个表示异步操作的任务。 BeforeExecute(CommandInfo) 当此模块中的命令在运行之前执行。 protected virtual void BeforeExecute(CommandInfo command) Parameters command CommandInfo 即将运行的命令。 BeforeExecuteAsync(CommandInfo) 当此模块中的命令在运行之前异步执行。 protected virtual Task BeforeExecuteAsync(CommandInfo command) Parameters command CommandInfo 即将运行的命令。 Returns Task 一个表示异步操作的任务。 OnModuleBuilding(CommandService, ModuleBuilder) 当构建此模块时执行。 protected virtual void OnModuleBuilding(CommandService commandService, ModuleBuilder builder) Parameters commandService CommandService 创建此模块的命令服务。 builder ModuleBuilder 用于构建此模块的构建器。 ReplyCardAsync(ICard, bool, bool, RequestOptions?) 发送卡片消息到此命令消息所在的频道。 protected virtual Task<Cacheable<IUserMessage, Guid>> ReplyCardAsync(ICard card, bool isQuote = true, bool isEphemeral = false, RequestOptions? options = null) Parameters card ICard 要发送的卡片。 isQuote bool 是否引用源消息。 isEphemeral bool 是否以临时消息的形式发送给命令调用者。如果设置为 true，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 ReplyCardsAsync(IEnumerable<ICard>, bool, bool, RequestOptions?) 发送卡片消息到此命令消息所在的频道。 protected virtual Task<Cacheable<IUserMessage, Guid>> ReplyCardsAsync(IEnumerable<ICard> cards, bool isQuote = true, bool isEphemeral = false, RequestOptions? options = null) Parameters cards IEnumerable<ICard> 要发送的卡片。 isQuote bool 是否引用源消息。 isEphemeral bool 是否以临时消息的形式发送给命令调用者。如果设置为 true，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 ReplyFileAsync(FileAttachment, bool, bool, RequestOptions?) 发送文件到此命令消息所在的频道。 protected virtual Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(FileAttachment attachment, bool isQuote = true, bool isEphemeral = false, RequestOptions? options = null) Parameters attachment FileAttachment 文件的附件信息。 isQuote bool 是否引用源消息。 isEphemeral bool 是否以临时消息的形式发送给命令调用者。如果设置为 true，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 ReplyFileAsync(Stream, string, AttachmentType, bool, bool, RequestOptions?) 发送文件到此命令消息所在的频道。 protected virtual Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(Stream stream, string filename, AttachmentType type = AttachmentType.File, bool isQuote = true, bool isEphemeral = false, RequestOptions? options = null) Parameters stream Stream 文件的流。 filename string 文件名。 type AttachmentType 文件的媒体类型。 isQuote bool 是否引用源消息。 isEphemeral bool 是否以临时消息的形式发送给命令调用者。如果设置为 true，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 ReplyFileAsync(string, string?, AttachmentType, bool, bool, RequestOptions?) 发送文件到此命令消息所在的频道。 protected virtual Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(string path, string? filename = null, AttachmentType type = AttachmentType.File, bool isQuote = true, bool isEphemeral = false, RequestOptions? options = null) Parameters path string 文件的路径。 filename string 文件名。 type AttachmentType 文件的媒体类型。 isQuote bool 是否引用源消息。 isEphemeral bool 是否以临时消息的形式发送给命令调用者。如果设置为 true，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 ReplyTextAsync(string, bool, bool, RequestOptions?) 发送文本消息到此命令消息所在的频道。 protected virtual Task<Cacheable<IUserMessage, Guid>> ReplyTextAsync(string text, bool isQuote = true, bool isEphemeral = false, RequestOptions? options = null) Parameters text string 要发送的文本。 isQuote bool 是否引用源消息。 isEphemeral bool 是否以临时消息的形式发送给命令调用者。如果设置为 true，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。"
  },
  "api/Kook.Commands.ModuleBase.html": {
    "href": "api/Kook.Commands.ModuleBase.html",
    "title": "Class ModuleBase | Kook.Net 文档",
    "keywords": "Class ModuleBase Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个模块基类。 public abstract class ModuleBase : ModuleBase<ICommandContext>, IModuleBase Inheritance object ModuleBase<ICommandContext> ModuleBase Implements IModuleBase Inherited Members ModuleBase<ICommandContext>.Context ModuleBase<ICommandContext>.ReplyFileAsync(string, string, AttachmentType, bool, bool, RequestOptions) ModuleBase<ICommandContext>.ReplyFileAsync(Stream, string, AttachmentType, bool, bool, RequestOptions) ModuleBase<ICommandContext>.ReplyFileAsync(FileAttachment, bool, bool, RequestOptions) ModuleBase<ICommandContext>.ReplyTextAsync(string, bool, bool, RequestOptions) ModuleBase<ICommandContext>.ReplyCardsAsync(IEnumerable<ICard>, bool, bool, RequestOptions) ModuleBase<ICommandContext>.ReplyCardAsync(ICard, bool, bool, RequestOptions) ModuleBase<ICommandContext>.BeforeExecuteAsync(CommandInfo) ModuleBase<ICommandContext>.BeforeExecute(CommandInfo) ModuleBase<ICommandContext>.AfterExecuteAsync(CommandInfo) ModuleBase<ICommandContext>.AfterExecute(CommandInfo) ModuleBase<ICommandContext>.OnModuleBuilding(CommandService, ModuleBuilder) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Kook.Commands.ModuleInfo.html": {
    "href": "api/Kook.Commands.ModuleInfo.html",
    "title": "Class ModuleInfo | Kook.Net 文档",
    "keywords": "Class ModuleInfo Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个模块的信息。 public class ModuleInfo Inheritance object ModuleInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CommandServiceExtensions.GetExecutableCommandsAsync(ModuleInfo, ICommandContext, IServiceProvider) Properties Aliases 获取此模块的所有别名。 public IReadOnlyList<string> Aliases { get; } Property Value IReadOnlyList<string> Attributes 获取此模块的所有特性。 public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> Commands 获取此模块的所有命令。 public IReadOnlyList<CommandInfo> Commands { get; } Property Value IReadOnlyList<CommandInfo> Group 获取此模块的分组。 public string? Group { get; } Property Value string IsSubmodule 获取此模块是否为子模块。 public bool IsSubmodule { get; } Property Value bool Name 获取此模块的名称。 public string? Name { get; } Property Value string Parent 获取此模块的父模块。 public ModuleInfo? Parent { get; } Property Value ModuleInfo Preconditions 获取此模块的所有先决条件。 public IReadOnlyList<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList<PreconditionAttribute> Remarks 获取此模块的备注。 public string? Remarks { get; } Property Value string Service 获取与此模块关联的命令服务。 public CommandService Service { get; } Property Value CommandService Submodules 获取此模块的所有子模块。 public IReadOnlyList<ModuleInfo> Submodules { get; } Property Value IReadOnlyList<ModuleInfo> Summary 获取此模块的摘要。 public string? Summary { get; } Property Value string"
  },
  "api/Kook.Commands.MultiMatchHandling.html": {
    "href": "api/Kook.Commands.MultiMatchHandling.html",
    "title": "Enum MultiMatchHandling | Kook.Net 文档",
    "keywords": "Enum MultiMatchHandling Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示在命令解析阶段匹配到多个结果时的行为。 public enum MultiMatchHandling Fields Best = 1 当匹配到多个结果时选择最佳匹配。 Exception = 0 当匹配到多个结果时引发异常。"
  },
  "api/Kook.Commands.NameAttribute.html": {
    "href": "api/Kook.Commands.NameAttribute.html",
    "title": "Class NameAttribute | Kook.Net 文档",
    "keywords": "Class NameAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll 标记命令、模块或参数的基本名称。 [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method|AttributeTargets.Parameter)] public class NameAttribute : Attribute Inheritance object Attribute NameAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NameAttribute(string) 标记命令、模块或参数的基本名称。 public NameAttribute(string text) Parameters text string 基本名称。 Properties Text 获取基本名称。 public string Text { get; } Property Value string"
  },
  "api/Kook.Commands.NamedArgumentTypeAttribute.html": {
    "href": "api/Kook.Commands.NamedArgumentTypeAttribute.html",
    "title": "Class NamedArgumentTypeAttribute | Kook.Net 文档",
    "keywords": "Class NamedArgumentTypeAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll 指示命令系统将此类型的命令参数视为与其属性匹配的命名参数集合。 [AttributeUsage(AttributeTargets.Class)] public sealed class NamedArgumentTypeAttribute : Attribute Inheritance object Attribute NamedArgumentTypeAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Examples 以下示例代码中，ArgumentType 中的各个属性将被视为所支持的命名参数。 [NamedArgumentType] public sealed class ArgumentType { public int? Foo { get; set; } public string? Bar { get; set; } public IEnumerable<int>? ManyInts { get; set; } } 命令的参数中可以定义 ArgumentType 类型的参数。 [Command(\"test\")] public Task TestCommand(ArgumentType arg) => Task.CompletedTask; 则可以以以下的命名参数的形式传递参数，调用命令： foo: 3 bar: hello manyints: \"1, 2, 3, 4, 5, 6, 7\""
  },
  "api/Kook.Commands.OverrideTypeReaderAttribute.html": {
    "href": "api/Kook.Commands.OverrideTypeReaderAttribute.html",
    "title": "Class OverrideTypeReaderAttribute | Kook.Net 文档",
    "keywords": "Class OverrideTypeReaderAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll 标记指定的参数应有应由指定的 TypeReader 读取并解析。 [AttributeUsage(AttributeTargets.Property|AttributeTargets.Parameter)] public sealed class OverrideTypeReaderAttribute : Attribute Inheritance object Attribute OverrideTypeReaderAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Examples 在以下的示例中，TimeSpan 类型的 time 参数将由自定义的类型解析器 FriendlyTimeSpanTypeReader 解析，而不是由内置的 TimeSpanTypeReader 解析。 [Command(\"time\")] public Task GetTimeAsync([OverrideTypeReader(typeof(FriendlyTimeSpanTypeReader))] TimeSpan time) => ReplyTextAsync(time); Remarks 此特性允许在解析命令参数时为指定的参数指定特定的 TypeReader，可用于在不影响其他命令的情况下使用特定的命令解析器。 warning 标记此特性的类型解析器类型必须继承自 TypeReader，否则将引发 InvalidOperationException 异常。 Constructors OverrideTypeReaderAttribute(Type) 初始化一个 OverrideTypeReaderAttribute 类的新实例。 public OverrideTypeReaderAttribute(Type overridenTypeReader) Parameters overridenTypeReader Type 解析此参数所使用的类型解析器的类型。 Exceptions InvalidOperationException 所提供的类型解析器类型不是 TypeReader 的派生类。 Properties TypeReader 获取解析此参数所使用的类型解析器的类型。 public Type TypeReader { get; } Property Value Type"
  },
  "api/Kook.Commands.ParameterInfo.html": {
    "href": "api/Kook.Commands.ParameterInfo.html",
    "title": "Class ParameterInfo | Kook.Net 文档",
    "keywords": "Class ParameterInfo Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个参数的信息。 public class ParameterInfo Inheritance object ParameterInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Attributes 获取此参数的所有特性。 public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> Command 获取此参数所属的命令。 public CommandInfo Command { get; } Property Value CommandInfo DefaultValue 获取此参数的默认值。 public object? DefaultValue { get; } Property Value object IsMultiple 获取此参数是否为多值参数。 public bool IsMultiple { get; } Property Value bool IsOptional 获取此参数是否为可选参数。 public bool IsOptional { get; } Property Value bool IsRemainder 获取此参数是否接收全部剩余参数。 public bool IsRemainder { get; } Property Value bool Name 获取此参数的名称。 public string Name { get; } Property Value string Preconditions 获取此参数的所有先决条件。 public IReadOnlyList<ParameterPreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList<ParameterPreconditionAttribute> Summary 获取此参数的摘要。 public string? Summary { get; } Property Value string Type 获取此参数的类型。 public Type? Type { get; } Property Value Type Methods CheckPreconditionsAsync(ICommandContext, object?, IServiceProvider?) 检查此参数是否满足其先决条件。 public Task<PreconditionResult> CheckPreconditionsAsync(ICommandContext context, object? arg, IServiceProvider? services = null) Parameters context ICommandContext 命令的上下文。 arg object 参数的值。 services IServiceProvider 用于解析服务的服务提供程序。 Returns Task<PreconditionResult> 一个表示异步检查操作的任务。任务的结果包含先决条件的结果。 ParseAsync(ICommandContext, string, IServiceProvider?) 解析字符串输入为此参数目标类型的值。 public Task<TypeReaderResult> ParseAsync(ICommandContext context, string input, IServiceProvider? services = null) Parameters context ICommandContext 命令的上下文。 input string 要解析的字符串输入。 services IServiceProvider 用于解析服务的服务提供程序。 Returns Task<TypeReaderResult> 一个表示异步解析操作的任务。任务的结果包含参数解析的结果。 ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Kook.Commands.ParameterPreconditionAttribute.html": {
    "href": "api/Kook.Commands.ParameterPreconditionAttribute.html",
    "title": "Class ParameterPreconditionAttribute | Kook.Net 文档",
    "keywords": "Class ParameterPreconditionAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个命令中的参数在其所属命令执行前需要符合的先决条件的基类。 [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = true)] public abstract class ParameterPreconditionAttribute : Attribute Inheritance object Attribute ParameterPreconditionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckPermissionsAsync(ICommandContext, ParameterInfo, object?, IServiceProvider) 检查命令执行上下文中的此参数是否满足此先决条件。 public abstract Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, ParameterInfo parameter, object? value, IServiceProvider services) Parameters context ICommandContext 命令执行上下文。 parameter ParameterInfo 要检查的参数信息。 value object 参数的原始值。 services IServiceProvider 依赖注入服务容器。 Returns Task<PreconditionResult> 一个表示异步检查操作的任务。任务的结果包含先决条件的结果。 See Also PreconditionAttribute"
  },
  "api/Kook.Commands.ParseResult.html": {
    "href": "api/Kook.Commands.ParseResult.html",
    "title": "Struct ParseResult | Kook.Net 文档",
    "keywords": "Struct ParseResult Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个命令的解析结果。 public struct ParseResult : IResult Implements IResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties ArgValues 获取所有实参解析结果。 public readonly IReadOnlyList<TypeReaderResult> ArgValues { get; } Property Value IReadOnlyList<TypeReaderResult> Error 获取在命令执行期间发生的异常信息，如果没有异常则为 null。 public readonly CommandError? Error { get; } Property Value CommandError? ErrorParameter 获取在解析过程中导致解析错误的参数信息。 public readonly ParameterInfo? ErrorParameter { get; } Property Value ParameterInfo ErrorReason 获取在命令执行期间发生的异常的原因，如果没有异常则为 null。 public readonly string? ErrorReason { get; } Property Value string IsSuccess 获取命令执行的结果是否为成功。 public bool IsSuccess { get; } Property Value bool ParamValues 获取所有形参解析结果。 public readonly IReadOnlyList<TypeReaderResult> ParamValues { get; } Property Value IReadOnlyList<TypeReaderResult> Methods FromError(CommandError, string) 初始化一个包含指定错误类型和原因的 ParseResult 结构的新实例，表示一个失败的匹配。 public static ParseResult FromError(CommandError error, string reason) Parameters error CommandError 命令匹配失败的类型。 reason string 参数解析失败的原因。 Returns ParseResult 一个表示解析失败的 ParseResult。 FromError(CommandError, string, ParameterInfo) 初始化一个包含指定错误类型和原因的 ParseResult 结构的新实例，表示一个失败的匹配。 public static ParseResult FromError(CommandError error, string reason, ParameterInfo parameterInfo) Parameters error CommandError 命令匹配失败的类型。 reason string 参数解析失败的原因。 parameterInfo ParameterInfo 导致解析失败的参数信息。 Returns ParseResult 一个表示解析失败的 ParseResult。 FromError(IResult) 初始化一个包含指定异常的 ParseResult 结构的新实例，表示一个失败的匹配。 public static ParseResult FromError(IResult result) Parameters result IResult 失败的结果。 Returns ParseResult 一个表示匹配失败的 MatchResult。 FromError(IResult, ParameterInfo) 初始化一个包含指定异常的 ParseResult 结构的新实例，表示一个失败的匹配。 public static ParseResult FromError(IResult result, ParameterInfo parameterInfo) Parameters result IResult 失败的结果。 parameterInfo ParameterInfo 导致解析失败的参数信息。 Returns ParseResult 一个表示匹配失败的 MatchResult。 FromError(Exception) 初始化一个包含指定异常的 ParseResult 结构的新实例，表示一个失败的匹配。 public static ParseResult FromError(Exception ex) Parameters ex Exception 导致匹配失败的异常。 Returns ParseResult 一个表示匹配失败的 MatchResult。 FromSuccess(IReadOnlyList<TypeReaderResult>, IReadOnlyList<TypeReaderResult>) 初始化一个不包含任何错误的 ParseResult 结构的新实例，表示一个成功的解析。 public static ParseResult FromSuccess(IReadOnlyList<TypeReaderResult> argValues, IReadOnlyList<TypeReaderResult> paramValues) Parameters argValues IReadOnlyList<TypeReaderResult> 实参解析结果。 paramValues IReadOnlyList<TypeReaderResult> 形参解析结果。 Returns ParseResult 一个表示匹配成功的 ParseResult。 FromSuccess(IReadOnlyList<TypeReaderValue>, IReadOnlyList<TypeReaderValue>) 初始化一个不包含任何错误的 ParseResult 结构的新实例，表示一个成功的解析。 public static ParseResult FromSuccess(IReadOnlyList<TypeReaderValue> argValues, IReadOnlyList<TypeReaderValue> paramValues) Parameters argValues IReadOnlyList<TypeReaderValue> 实参解析结果。 paramValues IReadOnlyList<TypeReaderValue> 形参解析结果。 Returns ParseResult 一个表示匹配成功的 ParseResult。 ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/Kook.Commands.PreconditionAttribute.html": {
    "href": "api/Kook.Commands.PreconditionAttribute.html",
    "title": "Class PreconditionAttribute | Kook.Net 文档",
    "keywords": "Class PreconditionAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个模块或类中的命令在执行前需要符合的先决条件的基类。 [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true)] public abstract class PreconditionAttribute : Attribute Inheritance object Attribute PreconditionAttribute Derived RequireBotPermissionAttribute RequireContextAttribute RequireRoleAttribute RequireUserAttribute RequireUserPermissionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ErrorMessage 获取或设置错误消息。 public virtual string? ErrorMessage { get; set; } Property Value string Remarks 当在派生类中重写此虚属性时，用户代码设置在此属性的值将用于在报告错误时携带的错误，在未重写此属性的派生类中设置此属性为空操作。 Group 获取或设置此先决条件所属的分组。 public string? Group { get; set; } Property Value string Remarks 此属性所设置的先决条件分组用于先决条件的析取。 同属于相同分组的所有先决条件中，存在一个满足条件的先决条件，则该组先决条件满足条件，组内的其它先决条件将被忽略（A || B）。 不设置此属性，或设置为 null，则表示该先决条件不属于任何分组，与其它的无分组先决条件或先决条件组的结果合取（A && B）。 Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) 检查命令执行上下文中的此命令是否满足此先决条件。 public abstract Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters context ICommandContext 命令执行上下文。 command CommandInfo 要执行的命令。 services IServiceProvider 依赖注入服务容器。 Returns Task<PreconditionResult> 一个表示异步检查操作的任务。任务的结果包含先决条件的结果。 See Also ParameterPreconditionAttribute"
  },
  "api/Kook.Commands.PreconditionGroupResult.html": {
    "href": "api/Kook.Commands.PreconditionGroupResult.html",
    "title": "Class PreconditionGroupResult | Kook.Net 文档",
    "keywords": "Class PreconditionGroupResult Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个分组的先决条件检查结果。 public class PreconditionGroupResult : PreconditionResult, IResult Inheritance object PreconditionResult PreconditionGroupResult Implements IResult Inherited Members PreconditionResult.Error PreconditionResult.ErrorReason PreconditionResult.IsSuccess PreconditionResult.FromError(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PreconditionGroupResult(CommandError?, string?, ICollection<PreconditionResult>) 初始化一个包含指定错误、原因和先决条件检查结果的 PreconditionGroupResult 类的新实例。 protected PreconditionGroupResult(CommandError? error, string? errorReason, ICollection<PreconditionResult> preconditions) Parameters error CommandError? 错误类型。 errorReason string 错误原因。 preconditions ICollection<PreconditionResult> 先决条件检查结果。 Properties PreconditionResults 获取先决条件检查的结果。 public IReadOnlyCollection<PreconditionResult> PreconditionResults { get; } Property Value IReadOnlyCollection<PreconditionResult> Methods FromError(IResult) 初始化一个包含指定错误类型和原因的 PreconditionGroupResult 类的新实例，表示一个失败的先决条件检查。 public static PreconditionGroupResult FromError(IResult result) Parameters result IResult 包含错误类型和原因的结果。 Returns PreconditionGroupResult 一个表示先决条件检查失败的 PreconditionGroupResult。 FromError(Exception) 初始化一个包含指定错误类型和原因的 PreconditionGroupResult 类的新实例，表示一个失败的先决条件检查。 public static PreconditionGroupResult FromError(Exception ex) Parameters ex Exception 导致先决条件检查失败的异常。 Returns PreconditionGroupResult 一个表示先决条件检查失败的 PreconditionGroupResult。 FromError(string, ICollection<PreconditionResult>) 初始化一个包含指定错误类型和原因的 PreconditionGroupResult 类的新实例，表示一个失败的先决条件检查。 public static PreconditionGroupResult FromError(string reason, ICollection<PreconditionResult> preconditions) Parameters reason string 错误原因。 preconditions ICollection<PreconditionResult> 先决条件检查结果。 Returns PreconditionGroupResult 一个表示先决条件检查失败的 PreconditionGroupResult。 FromSuccess() 初始化一个不包含任何错误的 PreconditionGroupResult 类的新实例，表示一个成功的先决条件检查。 public static PreconditionGroupResult FromSuccess() Returns PreconditionGroupResult 一个表示先决条件检查成功的 PreconditionGroupResult。 ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Kook.Commands.PreconditionResult.html": {
    "href": "api/Kook.Commands.PreconditionResult.html",
    "title": "Class PreconditionResult | Kook.Net 文档",
    "keywords": "Class PreconditionResult Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个命令的先决条件检查结果。 public class PreconditionResult : IResult Inheritance object PreconditionResult Implements IResult Derived PreconditionGroupResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PreconditionResult(CommandError?, string?) 初始化一个包含指定错误类型和原因的 PreconditionResult 类的新实例。 protected PreconditionResult(CommandError? error, string? errorReason) Parameters error CommandError? 错误类型。 errorReason string 错误原因。 Properties Error 获取在命令执行期间发生的异常信息，如果没有异常则为 null。 public CommandError? Error { get; } Property Value CommandError? ErrorReason 获取在命令执行期间发生的异常的原因，如果没有异常则为 null。 public string? ErrorReason { get; } Property Value string IsSuccess 获取命令执行的结果是否为成功。 public bool IsSuccess { get; } Property Value bool Methods FromError(IResult) 初始化一个包含指定结果的 PreconditionResult 类的新实例，表示一个失败的先决条件检查。 public static PreconditionResult FromError(IResult result) Parameters result IResult 要包装的结果。 Returns PreconditionResult 一个表示先决条件检查失败的 PreconditionResult。 FromError(Exception) 初始化一个包含指定错误类型和原因的 PreconditionResult 类的新实例，表示一个失败的先决条件检查。 public static PreconditionResult FromError(Exception ex) Parameters ex Exception 导致先决条件检查失败的异常。 Returns PreconditionResult 一个表示先决条件检查失败的 PreconditionResult。 FromError(string) 初始化一个包含指定错误类型和原因的 PreconditionResult 类的新实例，表示一个失败的先决条件检查。 public static PreconditionResult FromError(string reason) Parameters reason string 错误原因。 Returns PreconditionResult 一个表示先决条件检查失败的 PreconditionResult。 FromSuccess() 初始化一个不包含任何错误的 PreconditionResult 类的新实例，表示一个成功的先决条件检查。 public static PreconditionResult FromSuccess() Returns PreconditionResult 一个表示先决条件检查成功的 PreconditionResult。 ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Kook.Commands.PriorityAttribute.html": {
    "href": "api/Kook.Commands.PriorityAttribute.html",
    "title": "Class PriorityAttribute | Kook.Net 文档",
    "keywords": "Class PriorityAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll 标记指定的命令的优先级。 [AttributeUsage(AttributeTargets.Method)] public class PriorityAttribute : Attribute Inheritance object Attribute PriorityAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PriorityAttribute(int) 初始化一个 PriorityAttribute 类的新实例。 public PriorityAttribute(int priority) Parameters priority int 为命令设置的优先级。 Remarks 更大的数值表示更高的优先级。 命令系统在命令匹配时，会根据输入参数的相似度和优先级来选择最匹配的命令。 例如，通过提及用户传入用户类型的参数，可以为该参数贡献 1.0 的匹配相似分，而仅通过用户昵称传入用户类型的参数则最低只贡献 0.5 的匹配相似分。 一般地，各个参数的匹配相似分均为不超过 1.0 的正数，命令系统将会对各个匹配的匹配相似分统计算术平均值，此平均值通常不会超过 1.0。 在此基础上，优先级分数值会被累加到匹配相似分算术平均值的 0.99 倍之上，这表示，通常情况下，为命令之间设置量级超过 1 的优先级均可以使自定义匹配优先级生效。 Properties Priority 获取为命令设置的优先级。 public int Priority { get; } Property Value int"
  },
  "api/Kook.Commands.RemainderAttribute.html": {
    "href": "api/Kook.Commands.RemainderAttribute.html",
    "title": "Class RemainderAttribute | Kook.Net 文档",
    "keywords": "Class RemainderAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll 标记指定的参数将接收剩余未解析的所有输入值。 [AttributeUsage(AttributeTargets.Parameter)] public class RemainderAttribute : Attribute Inheritance object Attribute RemainderAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Kook.Commands.RemarksAttribute.html": {
    "href": "api/Kook.Commands.RemarksAttribute.html",
    "title": "Class RemarksAttribute | Kook.Net 文档",
    "keywords": "Class RemarksAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll 标记命令的备注。 [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method)] public class RemarksAttribute : Attribute Inheritance object Attribute RemarksAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RemarksAttribute(string) 初始化一个 RemarksAttribute 类的新实例。 public RemarksAttribute(string text) Parameters text string 命令的备注。 Properties Text 获取命令的备注。 public string Text { get; } Property Value string"
  },
  "api/Kook.Commands.RequireBotPermissionAttribute.html": {
    "href": "api/Kook.Commands.RequireBotPermissionAttribute.html",
    "title": "Class RequireBotPermissionAttribute | Kook.Net 文档",
    "keywords": "Class RequireBotPermissionAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll 要求当前用户在命令调用所在的的频道或服务器拥有指定的权限。 [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true)] public class RequireBotPermissionAttribute : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireBotPermissionAttribute Inherited Members PreconditionAttribute.Group Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequireBotPermissionAttribute(ChannelPermission) 初始化一个 RequireBotPermissionAttribute 类的新实例。 public RequireBotPermissionAttribute(ChannelPermission permission) Parameters permission ChannelPermission 所要求当前用户需要在命令调用所在的的服务器频道拥有的权限。 Remarks 设置此先决条件将导致命令在私有频道中无法使用。 RequireBotPermissionAttribute(GuildPermission) 初始化一个 RequireBotPermissionAttribute 类的新实例。 public RequireBotPermissionAttribute(GuildPermission permission) Parameters permission GuildPermission 所要求当前用户需要在命令调用所在的的服务器拥有的权限。 Remarks 设置此先决条件将导致命令在私有频道中无法使用。 Properties ChannelPermission 获取此先决条件所要求的频道权限。 public ChannelPermission? ChannelPermission { get; } Property Value ChannelPermission? ErrorMessage 获取或设置错误消息。 public override string? ErrorMessage { get; set; } Property Value string GuildPermission 获取此先决条件所要求的服务器权限。 public GuildPermission? GuildPermission { get; } Property Value GuildPermission? NotAGuildErrorMessage 获取或设置由于在服务器频道外执行命令而导致的先决条件失败的错误消息。 public string? NotAGuildErrorMessage { get; set; } Property Value string Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) 检查命令执行上下文中的此命令是否满足此先决条件。 public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters context ICommandContext 命令执行上下文。 command CommandInfo 要执行的命令。 services IServiceProvider 依赖注入服务容器。 Returns Task<PreconditionResult> 一个表示异步检查操作的任务。任务的结果包含先决条件的结果。"
  },
  "api/Kook.Commands.RequireContextAttribute.html": {
    "href": "api/Kook.Commands.RequireContextAttribute.html",
    "title": "Class RequireContextAttribute | Kook.Net 文档",
    "keywords": "Class RequireContextAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll 要求命令在指定的上下文类型中（例如在服务器内、私聊频道中）执行。 [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true)] public class RequireContextAttribute : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireContextAttribute Inherited Members PreconditionAttribute.Group Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples [Command(\"secret\")] [RequireContext(ContextType.DM | ContextType.Group)] public Task PrivateOnlyAsync() { return ReplyTextAsync(\"shh, this command is a secret\"); } Constructors RequireContextAttribute(ContextType) 初始化一个 RequireContextAttribute 类的新实例。 public RequireContextAttribute(ContextType contexts) Parameters contexts ContextType 命令执行所需的上下文类型。 Properties Contexts 获取命令执行所需的上下文类型。 public ContextType Contexts { get; } Property Value ContextType ErrorMessage 获取或设置错误消息。 public override string? ErrorMessage { get; set; } Property Value string Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) 检查命令执行上下文中的此命令是否满足此先决条件。 public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters context ICommandContext 命令执行上下文。 command CommandInfo 要执行的命令。 services IServiceProvider 依赖注入服务容器。 Returns Task<PreconditionResult> 一个表示异步检查操作的任务。任务的结果包含先决条件的结果。"
  },
  "api/Kook.Commands.RequireRoleAttribute.html": {
    "href": "api/Kook.Commands.RequireRoleAttribute.html",
    "title": "Class RequireRoleAttribute | Kook.Net 文档",
    "keywords": "Class RequireRoleAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll 要求调用命令的用户在命令调用所在的服务器拥有指定的角色。 [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true)] public class RequireRoleAttribute : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireRoleAttribute Inherited Members PreconditionAttribute.Group PreconditionAttribute.ErrorMessage Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequireRoleAttribute(string) 初始化一个 RequireRoleAttribute 类的新实例。 public RequireRoleAttribute(string roleName) Parameters roleName string 所要求调用命令的用户需要在命令调用所在的的服务器拥有的角色的名称。 RequireRoleAttribute(uint) 初始化一个 RequireRoleAttribute 类的新实例。 public RequireRoleAttribute(uint roleId) Parameters roleId uint 所要求调用命令的用户需要在命令调用所在的的服务器拥有的角色的 ID。 Properties NotAGuildErrorMessage 获取或设置由于在服务器频道外执行命令而导致的先决条件失败的错误消息。 public string? NotAGuildErrorMessage { get; set; } Property Value string Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) 检查命令执行上下文中的此命令是否满足此先决条件。 public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters context ICommandContext 命令执行上下文。 command CommandInfo 要执行的命令。 services IServiceProvider 依赖注入服务容器。 Returns Task<PreconditionResult> 一个表示异步检查操作的任务。任务的结果包含先决条件的结果。"
  },
  "api/Kook.Commands.RequireUserAttribute.html": {
    "href": "api/Kook.Commands.RequireUserAttribute.html",
    "title": "Class RequireUserAttribute | Kook.Net 文档",
    "keywords": "Class RequireUserAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll 要求调用命令的用户具有指定的 ID。 [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true)] public class RequireUserAttribute : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireUserAttribute Inherited Members PreconditionAttribute.Group Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples 以下代码示例将 admin 命令组限制为仅允许用户 ID 为 2810246202 的用户可以调用。 [RequireUser(2810246202)] [Group(\"admin\")] public class AdminModule : ModuleBase { [Command(\"exit\")] public async Task ExitAsync() { await ReplyTextAsync(\"Goodbye!\"); Environment.Exit(0); } } Constructors RequireUserAttribute(ulong) 初始化一个 RequireUserAttribute 类的新实例。 public RequireUserAttribute(ulong userId) Parameters userId ulong 所要求调用命令的用户应具有的 ID。 Properties ErrorMessage 获取或设置错误消息。 public override string? ErrorMessage { get; set; } Property Value string Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) 检查命令执行上下文中的此命令是否满足此先决条件。 public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters context ICommandContext 命令执行上下文。 command CommandInfo 要执行的命令。 services IServiceProvider 依赖注入服务容器。 Returns Task<PreconditionResult> 一个表示异步检查操作的任务。任务的结果包含先决条件的结果。"
  },
  "api/Kook.Commands.RequireUserPermissionAttribute.html": {
    "href": "api/Kook.Commands.RequireUserPermissionAttribute.html",
    "title": "Class RequireUserPermissionAttribute | Kook.Net 文档",
    "keywords": "Class RequireUserPermissionAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll 要求调用命令的用户在命令调用所在的的频道或服务器拥有指定的权限。 [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true)] public class RequireUserPermissionAttribute : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireUserPermissionAttribute Inherited Members PreconditionAttribute.Group Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequireUserPermissionAttribute(ChannelPermission) 初始化一个 RequireUserPermissionAttribute 类的新实例。 public RequireUserPermissionAttribute(ChannelPermission permission) Parameters permission ChannelPermission 所要求当前用户需要在命令调用所在的的频道拥有的权限。 Remarks 设置此先决条件将导致命令在私有频道中无法使用。 RequireUserPermissionAttribute(GuildPermission) 初始化一个 RequireUserPermissionAttribute 类的新实例。 public RequireUserPermissionAttribute(GuildPermission permission) Parameters permission GuildPermission 所要求调用命令的用户需要在命令调用所在的的服务器拥有的权限。 Remarks 设置此先决条件将导致命令在私有频道中无法使用。 Properties ChannelPermission 获取此先决条件所要求的频道权限。 public ChannelPermission? ChannelPermission { get; } Property Value ChannelPermission? ErrorMessage 获取或设置错误消息。 public override string? ErrorMessage { get; set; } Property Value string GuildPermission 获取此先决条件所要求的服务器权限。 public GuildPermission? GuildPermission { get; } Property Value GuildPermission? NotAGuildErrorMessage 获取或设置由于在服务器频道外执行命令而导致的先决条件失败的错误消息。 public string? NotAGuildErrorMessage { get; set; } Property Value string Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) 检查命令执行上下文中的此命令是否满足此先决条件。 public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters context ICommandContext 命令执行上下文。 command CommandInfo 要执行的命令。 services IServiceProvider 依赖注入服务容器。 Returns Task<PreconditionResult> 一个表示异步检查操作的任务。任务的结果包含先决条件的结果。"
  },
  "api/Kook.Commands.RoleTypeReader-1.html": {
    "href": "api/Kook.Commands.RoleTypeReader-1.html",
    "title": "Class RoleTypeReader<T> | Kook.Net 文档",
    "keywords": "Class RoleTypeReader<T> Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个用于解析实现了 IRole 的对象的类型读取器。 public class RoleTypeReader<T> : TypeReader where T : class, IRole Type Parameters T 要解析为的角色类型。 Inheritance object TypeReader RoleTypeReader<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadAsync(ICommandContext, string, IServiceProvider) 尝试将字符串输入解析为指定类型。 public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) Parameters context ICommandContext 命令执行上下文。 input string 要解析的字符串输入。 services IServiceProvider 依赖注入服务容器。 Returns Task<TypeReaderResult> 一个表示异步解析操作的任务。任务的结果包含解析的结果。"
  },
  "api/Kook.Commands.RunMode.html": {
    "href": "api/Kook.Commands.RunMode.html",
    "title": "Enum RunMode | Kook.Net 文档",
    "keywords": "Enum RunMode Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示命令执行工作流的行为。 public enum RunMode Fields Async = 2 在与网关线程不同的线程上执行命令。 Default = 0 使用在 CommandServiceConfig 中设置的默认行为。 Sync = 1 在与网关线程相同的线程上执行命令。"
  },
  "api/Kook.Commands.RuntimeResult.html": {
    "href": "api/Kook.Commands.RuntimeResult.html",
    "title": "Class RuntimeResult | Kook.Net 文档",
    "keywords": "Class RuntimeResult Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示命令执行的运行时结果。 public abstract class RuntimeResult : IResult Inheritance object RuntimeResult Implements IResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RuntimeResult(CommandError?, string) 初始化一个包含指定错误类型和原因的 RuntimeResult 类的新实例。 protected RuntimeResult(CommandError? error, string reason) Parameters error CommandError? 错误类型。 reason string 错误原因。 Properties Error 获取在命令执行期间发生的异常信息，如果没有异常则为 null。 public CommandError? Error { get; } Property Value CommandError? IsSuccess 获取命令执行的结果是否为成功。 public bool IsSuccess { get; } Property Value bool Reason 获取错误原因。 public string Reason { get; } Property Value string Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Kook.Commands.SearchResult.html": {
    "href": "api/Kook.Commands.SearchResult.html",
    "title": "Struct SearchResult | Kook.Net 文档",
    "keywords": "Struct SearchResult Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个命令搜索的结果。 public struct SearchResult : IResult Implements IResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Commands 获取所有搜索到的命令。 public readonly IReadOnlyList<CommandMatch> Commands { get; } Property Value IReadOnlyList<CommandMatch> Error 获取在命令执行期间发生的异常信息，如果没有异常则为 null。 public readonly CommandError? Error { get; } Property Value CommandError? ErrorReason 获取在命令执行期间发生的异常的原因，如果没有异常则为 null。 public readonly string? ErrorReason { get; } Property Value string IsSuccess 获取命令执行的结果是否为成功。 public bool IsSuccess { get; } Property Value bool Text 获取用于搜索的文本。 public readonly string? Text { get; } Property Value string Methods FromError(CommandError, string) 初始化一个包含指定错误类型和原因的 SearchResult 结构的新实例，表示一个失败的搜索。 public static SearchResult FromError(CommandError error, string reason) Parameters error CommandError 搜索失败的类型。 reason string 搜索失败的原因。 Returns SearchResult 一个表示搜索失败的 SearchResult。 FromError(IResult) 初始化一个包含指定结果的 SearchResult 结构的新实例，表示一个失败的搜索。 public static SearchResult FromError(IResult result) Parameters result IResult 失败的结果。 Returns SearchResult 一个表示搜索失败的 SearchResult。 FromError(Exception) 初始化一个包含指定异常的 SearchResult 结构的新实例，表示一个失败的搜索。 public static SearchResult FromError(Exception ex) Parameters ex Exception 导致搜索失败的异常。 Returns SearchResult 一个表示搜索失败的 SearchResult。 FromSuccess(string, IReadOnlyList<CommandMatch>) 初始化一个不包含任何错误的 SearchResult 结构的新实例，表示一个成功的搜索。 public static SearchResult FromSuccess(string text, IReadOnlyList<CommandMatch> commands) Parameters text string 用于搜索的文本。 commands IReadOnlyList<CommandMatch> 搜索到的命令。 Returns SearchResult 一个表示搜索成功的 SearchResult。 ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/Kook.Commands.SocketCommandContext.html": {
    "href": "api/Kook.Commands.SocketCommandContext.html",
    "title": "Class SocketCommandContext | Kook.Net 文档",
    "keywords": "Class SocketCommandContext Namespace Kook.Commands Assembly Kook.Net.WebSocket.dll 表示一个基于网关的客户端的命令的上下文。这可能包括客户端、公会、频道、用户和消息。 public class SocketCommandContext : ICommandContext Inheritance object SocketCommandContext Implements ICommandContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SocketCommandContext(KookSocketClient, SocketUserMessage) 使用提供的客户端和消息初始化一个 SocketCommandContext 类的新实例。 public SocketCommandContext(KookSocketClient client, SocketUserMessage msg) Parameters client KookSocketClient 底层客户端。 msg SocketUserMessage 底层消息。 Properties Channel 获取命令执行所在的 ISocketMessageChannel。 public ISocketMessageChannel Channel { get; } Property Value ISocketMessageChannel Client 获取命令执行时所使用的 KookSocketClient。 public KookSocketClient Client { get; } Property Value KookSocketClient Guild 获取命令执行所在的 SocketGuild。 public SocketGuild? Guild { get; } Property Value SocketGuild IsPrivate 指示命令执行所在的频道是否为 IPrivateChannel 私聊频道。 public bool IsPrivate { get; } Property Value bool Message 获取命令解析的源 SocketUserMessage。 public SocketUserMessage Message { get; } Property Value SocketUserMessage User 获取执行命令的 SocketUser。 public SocketUser User { get; } Property Value SocketUser"
  },
  "api/Kook.Commands.SummaryAttribute.html": {
    "href": "api/Kook.Commands.SummaryAttribute.html",
    "title": "Class SummaryAttribute | Kook.Net 文档",
    "keywords": "Class SummaryAttribute Namespace Kook.Commands Assembly Kook.Net.Commands.dll 标记命令的摘要。 [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method|AttributeTargets.Parameter)] public class SummaryAttribute : Attribute Inheritance object Attribute SummaryAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SummaryAttribute(string) 初始化一个 SummaryAttribute 类的新实例。 public SummaryAttribute(string text) Parameters text string 命令的摘要。 Properties Text 获取命令的摘要。 public string Text { get; } Property Value string"
  },
  "api/Kook.Commands.TypeReader.html": {
    "href": "api/Kook.Commands.TypeReader.html",
    "title": "Class TypeReader | Kook.Net 文档",
    "keywords": "Class TypeReader Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个将用户的字符串输入解析为指定类型的类型读取器基类。 public abstract class TypeReader Inheritance object TypeReader Derived ChannelTypeReader<T> MessageTypeReader<T> RoleTypeReader<T> UserTypeReader<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadAsync(ICommandContext, string, IServiceProvider) 尝试将字符串输入解析为指定类型。 public abstract Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) Parameters context ICommandContext 命令执行上下文。 input string 要解析的字符串输入。 services IServiceProvider 依赖注入服务容器。 Returns Task<TypeReaderResult> 一个表示异步解析操作的任务。任务的结果包含解析的结果。"
  },
  "api/Kook.Commands.TypeReaderResult.html": {
    "href": "api/Kook.Commands.TypeReaderResult.html",
    "title": "Struct TypeReaderResult | Kook.Net 文档",
    "keywords": "Struct TypeReaderResult Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个类型读取器的解析结果。 public struct TypeReaderResult : IResult Implements IResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties BestMatch 获取最佳匹配的解析值。 public object? BestMatch { get; } Property Value object Exceptions InvalidOperationException 解析失败。 Error 获取在命令执行期间发生的异常信息，如果没有异常则为 null。 public readonly CommandError? Error { get; } Property Value CommandError? ErrorReason 获取在命令执行期间发生的异常的原因，如果没有异常则为 null。 public readonly string? ErrorReason { get; } Property Value string IsSuccess 获取命令执行的结果是否为成功。 public bool IsSuccess { get; } Property Value bool Values 获取解析的值。 public readonly IReadOnlyCollection<TypeReaderValue> Values { get; } Property Value IReadOnlyCollection<TypeReaderValue> Methods FromError(CommandError, string) 初始化一个包含指定错误类型和原因的 TypeReaderResult 结构的新实例，表示一个失败的解析。 public static TypeReaderResult FromError(CommandError error, string reason) Parameters error CommandError 错误类型。 reason string 错误原因。 Returns TypeReaderResult 一个表示解析失败的 TypeReaderResult。 FromError(IResult) 初始化一个包含指定结果的 TypeReaderResult 结构的新实例，表示一个失败的解析。 public static TypeReaderResult FromError(IResult result) Parameters result IResult 要包装的结果。 Returns TypeReaderResult 一个表示解析失败的 TypeReaderResult。 FromError(Exception) 初始化一个包含指定异常的 TypeReaderResult 结构的新实例，表示一个失败的解析。 public static TypeReaderResult FromError(Exception ex) Parameters ex Exception 导致解析失败的异常。 Returns TypeReaderResult 一个表示解析失败的 TypeReaderResult。 FromSuccess(TypeReaderValue) 初始化一个不包含任何错误的 TypeReaderResult 结构的新实例，表示一个成功的解析。 public static TypeReaderResult FromSuccess(TypeReaderValue value) Parameters value TypeReaderValue 解析的值。 Returns TypeReaderResult 一个表示解析成功的 TypeReaderResult。 FromSuccess(IReadOnlyCollection<TypeReaderValue>) 初始化一个不包含任何错误的 TypeReaderResult 结构的新实例，表示一个成功的解析。 public static TypeReaderResult FromSuccess(IReadOnlyCollection<TypeReaderValue> values) Parameters values IReadOnlyCollection<TypeReaderValue> 解析的值。 Returns TypeReaderResult 一个表示解析成功的 TypeReaderResult。 FromSuccess(object?) 初始化一个不包含任何错误的 TypeReaderResult 结构的新实例，表示一个成功的解析。 public static TypeReaderResult FromSuccess(object? value) Parameters value object 解析的值。 Returns TypeReaderResult 一个表示解析成功的 TypeReaderResult。 ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/Kook.Commands.TypeReaderValue.html": {
    "href": "api/Kook.Commands.TypeReaderValue.html",
    "title": "Struct TypeReaderValue | Kook.Net 文档",
    "keywords": "Struct TypeReaderValue Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个类型读取器的解析值。 public struct TypeReaderValue Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TypeReaderValue(object?, float) 齿梳化一个包含解析值和置信度分数的 TypeReaderValue 结构的新实例。 public TypeReaderValue(object? value, float score) Parameters value object 解析的值。 score float 解析的置信度分数。 Properties Score 获取解析的置信度分数。 public readonly float Score { get; } Property Value float Value 获取解析的值。 public readonly object? Value { get; } Property Value object Methods ToString() Returns the fully qualified type name of this instance. public override string? ToString() Returns string The fully qualified type name."
  },
  "api/Kook.Commands.UserTypeReader-1.html": {
    "href": "api/Kook.Commands.UserTypeReader-1.html",
    "title": "Class UserTypeReader<T> | Kook.Net 文档",
    "keywords": "Class UserTypeReader<T> Namespace Kook.Commands Assembly Kook.Net.Commands.dll 表示一个用于解析实现了 IUser 的对象的类型读取器。 public class UserTypeReader<T> : TypeReader where T : class, IUser Type Parameters T 要解析为的用户类型。 Inheritance object TypeReader UserTypeReader<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadAsync(ICommandContext, string, IServiceProvider) 尝试将字符串输入解析为指定类型。 public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) Parameters context ICommandContext 命令执行上下文。 input string 要解析的字符串输入。 services IServiceProvider 依赖注入服务容器。 Returns Task<TypeReaderResult> 一个表示异步解析操作的任务。任务的结果包含解析的结果。"
  },
  "api/Kook.Commands.html": {
    "href": "api/Kook.Commands.html",
    "title": "Namespace Kook.Commands | Kook.Net 文档",
    "keywords": "Namespace Kook.Commands Classes AliasAttribute 为命令指定别名。 ChannelTypeReader<T> 表示一个用于解析字符串到实现了 IChannel 的对象的类型读取器。 CommandAttribute 为命令标记执行信息。 CommandContext Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. CommandException 表示一个命令执行过程中发生的异常。 CommandInfo 表示一个命令的信息。 CommandService 表示一个基于文本的命令服务。 CommandServiceConfig 表示一个用于 CommandService 的配置类。 CommandServiceExtensions 提供用于 CommandService 的扩展方法。 DontAutoLoadAttribute 标记指定的模块不应被自动加载。 DontInjectAttribute 标记指定的成员不应被注入到其父模块。 GroupAttribute 标记模块为命令组。 IEnumerableExtensions 提供用于 IEnumerable<T> 的扩展方法。 MatchResult 表示一个命令的匹配结果。 MessageExtensions 提供用于 IUserMessage 与命令相关的扩展方法。 MessageTypeReader<T> 表示一个用于解析实现了 IMessage 的对象的类型读取器。 ModuleBase 表示一个模块基类。 ModuleBase<T> 表示一个模块基类。 ModuleInfo 表示一个模块的信息。 NameAttribute 标记命令、模块或参数的基本名称。 NamedArgumentTypeAttribute 指示命令系统将此类型的命令参数视为与其属性匹配的命名参数集合。 OverrideTypeReaderAttribute 标记指定的参数应有应由指定的 TypeReader 读取并解析。 ParameterInfo 表示一个参数的信息。 ParameterPreconditionAttribute 表示一个命令中的参数在其所属命令执行前需要符合的先决条件的基类。 PreconditionAttribute 表示一个模块或类中的命令在执行前需要符合的先决条件的基类。 PreconditionGroupResult 表示一个分组的先决条件检查结果。 PreconditionResult 表示一个命令的先决条件检查结果。 PriorityAttribute 标记指定的命令的优先级。 RemainderAttribute 标记指定的参数将接收剩余未解析的所有输入值。 RemarksAttribute 标记命令的备注。 RequireBotPermissionAttribute 要求当前用户在命令调用所在的的频道或服务器拥有指定的权限。 RequireContextAttribute 要求命令在指定的上下文类型中（例如在服务器内、私聊频道中）执行。 RequireRoleAttribute 要求调用命令的用户在命令调用所在的服务器拥有指定的角色。 RequireUserAttribute 要求调用命令的用户具有指定的 ID。 RequireUserPermissionAttribute 要求调用命令的用户在命令调用所在的的频道或服务器拥有指定的权限。 RoleTypeReader<T> 表示一个用于解析实现了 IRole 的对象的类型读取器。 RuntimeResult 表示命令执行的运行时结果。 SocketCommandContext 表示一个基于网关的客户端的命令的上下文。这可能包括客户端、公会、频道、用户和消息。 SummaryAttribute 标记命令的摘要。 TypeReader 表示一个将用户的字符串输入解析为指定类型的类型读取器基类。 UserTypeReader<T> 表示一个用于解析实现了 IUser 的对象的类型读取器。 Structs CommandMatch 表示一个匹配的命令。 ExecuteResult 表示一个命令的整体执行结果的信息。 ParseResult 表示一个命令的解析结果。 SearchResult 表示一个命令搜索的结果。 TypeReaderResult 表示一个类型读取器的解析结果。 TypeReaderValue 表示一个类型读取器的解析值。 Interfaces ICommandContext 表示命令的上下文。这可能包括客户端、公会、频道、用户和消息。 IModuleBase 表示一个通用的模块基类。 IResult 表示一个有关命令的结果的信息。 Enums CommandError 表示命令执行的错误。 ContextType 表示一个运行命令支持的上下文类型。 MultiMatchHandling 表示在命令解析阶段匹配到多个结果时的行为。 RunMode 表示命令执行工作流的行为。"
  },
  "api/Kook.ConnectionState.html": {
    "href": "api/Kook.ConnectionState.html",
    "title": "Enum ConnectionState | Kook.Net 文档",
    "keywords": "Enum ConnectionState Namespace Kook Assembly Kook.Net.Core.dll 指定客户端的连接状态。 public enum ConnectionState : byte Fields Connected = 2 客户端已连接到 KOOK。 Connecting = 1 客户端正在连接到 KOOK。 Disconnected = 0 客户端已断开与 KOOK 的连接。 Disconnecting = 3 客户端正在断开与 KOOK 的连接。"
  },
  "api/Kook.ContainerModule.html": {
    "href": "api/Kook.ContainerModule.html",
    "title": "Class ContainerModule | Kook.Net 文档",
    "keywords": "Class ContainerModule Namespace Kook Assembly Kook.Net.Core.dll 容器模块，可用于 ICard 中。 public class ContainerModule : IModule, IEquatable<ContainerModule>, IEquatable<IModule> Inheritance object ContainerModule Implements IModule IEquatable<ContainerModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(ContainerModule) CardExtensions.ToBuilder(IModule) Properties Elements 获取模块的元素。 public ImmutableArray<ImageElement> Elements { get; } Property Value ImmutableArray<ImageElement> Type 获取模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods Equals(ContainerModule?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ContainerModule? containerModule) Parameters containerModule ContainerModule Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ContainerModule, ContainerModule) 判定两个 ContainerModule 是否相等。 public static bool operator ==(ContainerModule left, ContainerModule right) Parameters left ContainerModule right ContainerModule Returns bool 如果两个 ContainerModule 相等，则为 true；否则为 false。 operator !=(ContainerModule, ContainerModule) 判定两个 ContainerModule 是否不相等。 public static bool operator !=(ContainerModule left, ContainerModule right) Parameters left ContainerModule right ContainerModule Returns bool 如果两个 ContainerModule 不相等，则为 true；否则为 false。"
  },
  "api/Kook.ContainerModuleBuilder.html": {
    "href": "api/Kook.ContainerModuleBuilder.html",
    "title": "Class ContainerModuleBuilder | Kook.Net 文档",
    "keywords": "Class ContainerModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll 用来构建 ContainerModule 模块的构建器。 public class ContainerModuleBuilder : IModuleBuilder, IEquatable<ContainerModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object ContainerModuleBuilder Implements IModuleBuilder IEquatable<ContainerModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ContainerModuleBuilder() 初始化一个 ContainerModuleBuilder 类的新实例。 public ContainerModuleBuilder() ContainerModuleBuilder(IList<ImageElementBuilder>) 初始化一个 ContainerModuleBuilder 类的新实例。 public ContainerModuleBuilder(IList<ImageElementBuilder> elements) Parameters elements IList<ImageElementBuilder> 图片组模块要包含的图片元素。 Fields MaxElementCount 元素的最大数量。 public const int MaxElementCount = 9 Field Value int Properties Elements 获取或设置图片组模块的图片元素。 public IList<ImageElementBuilder> Elements { get; set; } Property Value IList<ImageElementBuilder> Type 获取此构建器构建的模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods AddElement(ImageElementBuilder) 添加一个图片元素到图片组模块。 public ContainerModuleBuilder AddElement(ImageElementBuilder field) Parameters field ImageElementBuilder 要添加的图片元素。 Returns ContainerModuleBuilder 当前构建器。 AddElement(Action<ImageElementBuilder>?) 添加一个图片元素到图片组模块。 public ContainerModuleBuilder AddElement(Action<ImageElementBuilder>? action = null) Parameters action Action<ImageElementBuilder> 一个包含对要添加的新创建的图片元素进行配置的操作的委托。 Returns ContainerModuleBuilder 当前构建器。 Build() 构建当前构建器为一个 ContainerModule 对象。 public ContainerModule Build() Returns ContainerModule 由当前构建器表示的属性构建的 ContainerModule 对象。 Exceptions ArgumentNullException Elements 为 null。 ArgumentException Elements 为空列表。 ArgumentException Elements 的元素数量超过了 MaxElementCount。 Equals(ContainerModuleBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ContainerModuleBuilder? containerModuleBuilder) Parameters containerModuleBuilder ContainerModuleBuilder Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ContainerModuleBuilder?, ContainerModuleBuilder?) 判定两个 ContainerModuleBuilder 是否相等。 public static bool operator ==(ContainerModuleBuilder? left, ContainerModuleBuilder? right) Parameters left ContainerModuleBuilder right ContainerModuleBuilder Returns bool 如果两个 ContainerModuleBuilder 相等，则为 true；否则为 false。 operator !=(ContainerModuleBuilder?, ContainerModuleBuilder?) 判定两个 ContainerModuleBuilder 是否不相等。 public static bool operator !=(ContainerModuleBuilder? left, ContainerModuleBuilder? right) Parameters left ContainerModuleBuilder right ContainerModuleBuilder Returns bool 如果两个 ContainerModuleBuilder 不相等，则为 true；否则为 false。"
  },
  "api/Kook.ContextModule.html": {
    "href": "api/Kook.ContextModule.html",
    "title": "Class ContextModule | Kook.Net 文档",
    "keywords": "Class ContextModule Namespace Kook Assembly Kook.Net.Core.dll 备注模块，可用于 ICard 中。 public class ContextModule : IModule, IEquatable<ContextModule>, IEquatable<IModule> Inheritance object ContextModule Implements IModule IEquatable<ContextModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(ContextModule) CardExtensions.ToBuilder(IModule) Properties Elements 获取模块的元素。 public ImmutableArray<IElement> Elements { get; } Property Value ImmutableArray<IElement> Type 获取模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods Equals(ContextModule?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ContextModule? contextModule) Parameters contextModule ContextModule Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ContextModule, ContextModule) 判定两个 ContextModule 是否相等。 public static bool operator ==(ContextModule left, ContextModule right) Parameters left ContextModule right ContextModule Returns bool 如果两个 ContextModule 相等，则为 true；否则为 false。 operator !=(ContextModule, ContextModule) 判定两个 ContextModule 是否不相等。 public static bool operator !=(ContextModule left, ContextModule right) Parameters left ContextModule right ContextModule Returns bool 如果两个 ContextModule 不相等，则为 true；否则为 false。"
  },
  "api/Kook.ContextModuleBuilder.html": {
    "href": "api/Kook.ContextModuleBuilder.html",
    "title": "Class ContextModuleBuilder | Kook.Net 文档",
    "keywords": "Class ContextModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll 用来构建 ContextModule 模块的构建器。 public class ContextModuleBuilder : IModuleBuilder, IEquatable<ContextModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object ContextModuleBuilder Implements IModuleBuilder IEquatable<ContextModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ContextModuleBuilder() 初始化一个 ContextModuleBuilder 类的新实例。 public ContextModuleBuilder() ContextModuleBuilder(IList<IElementBuilder>) 初始化一个 ContextModuleBuilder 类的新实例。 public ContextModuleBuilder(IList<IElementBuilder> elements) Parameters elements IList<IElementBuilder> 备注模块要包含的元素。 Fields MaxElementCount 元素的最大数量。 public const int MaxElementCount = 10 Field Value int Properties Elements 获取或设置备注模块的元素。 public IList<IElementBuilder> Elements { get; set; } Property Value IList<IElementBuilder> Type 获取此构建器构建的模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods AddElement(ImageElementBuilder) 添加一个图片元素到备注模块。 public ContextModuleBuilder AddElement(ImageElementBuilder field) Parameters field ImageElementBuilder 要添加的图片元素。 Returns ContextModuleBuilder 当前构建器。 AddElement(KMarkdownElementBuilder) 添加一个 KMarkdown 元素到备注模块。 public ContextModuleBuilder AddElement(KMarkdownElementBuilder field) Parameters field KMarkdownElementBuilder 要添加的 KMarkdown 元素。 Returns ContextModuleBuilder 当前构建器。 AddElement(PlainTextElementBuilder) 添加一个纯文本元素到备注模块。 public ContextModuleBuilder AddElement(PlainTextElementBuilder field) Parameters field PlainTextElementBuilder 要添加的纯文本元素。 Returns ContextModuleBuilder 当前构建器。 AddElement<T>(Action<T>?) 添加一个元素到备注模块。 public ContextModuleBuilder AddElement<T>(Action<T>? action = null) where T : IElementBuilder, new() Parameters action Action<T> 一个包含对要添加的新创建的元素进行配置的操作的委托。 Returns ContextModuleBuilder 当前构建器。 Type Parameters T 要添加的元素的类型。 Build() 构建当前构建器为一个 ContextModule 对象。 public ContextModule Build() Returns ContextModule 由当前构建器表示的属性构建的 ContextModule 对象。 Exceptions ArgumentNullException Elements 为 null。 ArgumentException Elements 的元素数量超过了 MaxElementCount。 ArgumentException Elements 包含一个既不是 PlainTextElementBuilder， 也不是 KMarkdownElementBuilder 或 ImageElementBuilder 的元素。 Equals(ContextModuleBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ContextModuleBuilder? contextModuleBuilder) Parameters contextModuleBuilder ContextModuleBuilder Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ContextModuleBuilder?, ContextModuleBuilder?) 判定两个 ContextModuleBuilder 是否相等。 public static bool operator ==(ContextModuleBuilder? left, ContextModuleBuilder? right) Parameters left ContextModuleBuilder right ContextModuleBuilder Returns bool 如果两个 ContextModuleBuilder 相等，则为 true；否则为 false。 operator !=(ContextModuleBuilder?, ContextModuleBuilder?) 判定两个 ContextModuleBuilder 是否不相等。 public static bool operator !=(ContextModuleBuilder? left, ContextModuleBuilder? right) Parameters left ContextModuleBuilder right ContextModuleBuilder Returns bool 如果两个 ContextModuleBuilder 不相等，则为 true；否则为 false。"
  },
  "api/Kook.CountdownMode.html": {
    "href": "api/Kook.CountdownMode.html",
    "title": "Enum CountdownMode | Kook.Net 文档",
    "keywords": "Enum CountdownMode Namespace Kook Assembly Kook.Net.Core.dll 表示一个 CountdownModule 的倒计时显示模式。 public enum CountdownMode Fields Day = 0 倒计时器将以天、小时、分钟和秒的形式显示时间。 Hour = 1 倒计时器将以小时、分钟和秒的形式显示时间。 Second = 2 倒计时器将以秒的形式显示时间。"
  },
  "api/Kook.CountdownModule.html": {
    "href": "api/Kook.CountdownModule.html",
    "title": "Class CountdownModule | Kook.Net 文档",
    "keywords": "Class CountdownModule Namespace Kook Assembly Kook.Net.Core.dll 倒计时模块，可用于 ICard 中。 public class CountdownModule : IModule, IEquatable<CountdownModule>, IEquatable<IModule> Inheritance object CountdownModule Implements IModule IEquatable<CountdownModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(CountdownModule) CardExtensions.ToBuilder(IModule) Properties EndTime 获取倒计时的结束时间。 public DateTimeOffset EndTime { get; } Property Value DateTimeOffset Mode 获取倒计时的显示模式。 public CountdownMode Mode { get; } Property Value CountdownMode StartTime 获取倒计时的开始时间。 public DateTimeOffset? StartTime { get; } Property Value DateTimeOffset? Type 获取模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods Equals(CountdownModule?) Indicates whether the current object is equal to another object of the same type. public bool Equals(CountdownModule? countdownModule) Parameters countdownModule CountdownModule Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(CountdownModule, CountdownModule) 判定两个 CountdownModule 是否相等。 public static bool operator ==(CountdownModule left, CountdownModule right) Parameters left CountdownModule right CountdownModule Returns bool 如果两个 CountdownModule 相等，则为 true；否则为 false。 operator !=(CountdownModule, CountdownModule) 判定两个 CountdownModule 是否不相等。 public static bool operator !=(CountdownModule left, CountdownModule right) Parameters left CountdownModule right CountdownModule Returns bool 如果两个 CountdownModule 不相等，则为 true；否则为 false。"
  },
  "api/Kook.CountdownModuleBuilder.html": {
    "href": "api/Kook.CountdownModuleBuilder.html",
    "title": "Class CountdownModuleBuilder | Kook.Net 文档",
    "keywords": "Class CountdownModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll 用来构建 CountdownModule 模块的构建器。 public class CountdownModuleBuilder : IModuleBuilder, IEquatable<CountdownModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object CountdownModuleBuilder Implements IModuleBuilder IEquatable<CountdownModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CountdownModuleBuilder() 初始化一个 CountdownModuleBuilder 类的新实例。 public CountdownModuleBuilder() CountdownModuleBuilder(CountdownMode, DateTimeOffset, DateTimeOffset?) 初始化一个 CountdownModuleBuilder 类的新实例。 public CountdownModuleBuilder(CountdownMode mode, DateTimeOffset endTime, DateTimeOffset? startTime = null) Parameters mode CountdownMode 倒计时的显示模式。 endTime DateTimeOffset 倒计时结束的时间。 startTime DateTimeOffset? 倒计时开始的时间。 Properties EndTime 获取或设置倒计时结束的时间。 public DateTimeOffset EndTime { get; set; } Property Value DateTimeOffset Mode 获取或设置倒计时的显示模式。 public CountdownMode Mode { get; set; } Property Value CountdownMode StartTime 获取或设置倒计时开始的时间。 public DateTimeOffset? StartTime { get; set; } Property Value DateTimeOffset? Remarks 仅当 Mode 为 Second 时，才允许设置 StartTime。 Type 获取此构建器构建的模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods Build() 构建当前构建器为一个 CountdownModule 对象。 public CountdownModule Build() Returns CountdownModule 由当前构建器表示的属性构建的 CountdownModule 对象。 Exceptions ArgumentOutOfRangeException CountdownMode 不为 Second 时，不允许设置 StartTime。 ArgumentOutOfRangeException EndTime 早于当前时间。 ArgumentOutOfRangeException StartTime 早于 Unix 纪元时间。 ArgumentOutOfRangeException EndTime 应晚于 StartTime。 Equals(CountdownModuleBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(CountdownModuleBuilder? countdownModuleBuilder) Parameters countdownModuleBuilder CountdownModuleBuilder Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithEndTime(DateTimeOffset) 设置倒计时结束的时间。 public CountdownModuleBuilder WithEndTime(DateTimeOffset endTime) Parameters endTime DateTimeOffset 倒计时结束的时间。 Returns CountdownModuleBuilder 当前构建器。 WithMode(CountdownMode) 设置倒计时的显示模式。 public CountdownModuleBuilder WithMode(CountdownMode mode) Parameters mode CountdownMode 倒计时的显示模式。 Returns CountdownModuleBuilder 当前构建器。 WithStartTime(DateTimeOffset?) 设置倒计时开始的时间。 public CountdownModuleBuilder WithStartTime(DateTimeOffset? startTime) Parameters startTime DateTimeOffset? 倒计时开始的时间。 Returns CountdownModuleBuilder 当前构建器。 Remarks 仅当 Mode 为 Second 时，才允许设置 StartTime。 Operators operator ==(CountdownModuleBuilder?, CountdownModuleBuilder?) 判定两个 CountdownModuleBuilder 是否相等。 public static bool operator ==(CountdownModuleBuilder? left, CountdownModuleBuilder? right) Parameters left CountdownModuleBuilder right CountdownModuleBuilder Returns bool 如果两个 CountdownModuleBuilder 相等，则为 true；否则为 false。 operator !=(CountdownModuleBuilder?, CountdownModuleBuilder?) 判定两个 CountdownModuleBuilder 是否不相等。 public static bool operator !=(CountdownModuleBuilder? left, CountdownModuleBuilder? right) Parameters left CountdownModuleBuilder right CountdownModuleBuilder Returns bool 如果两个 CountdownModuleBuilder 不相等，则为 true；否则为 false。"
  },
  "api/Kook.CreateAttachmentMode.html": {
    "href": "api/Kook.CreateAttachmentMode.html",
    "title": "Enum CreateAttachmentMode | Kook.Net 文档",
    "keywords": "Enum CreateAttachmentMode Namespace Kook Assembly Kook.Net.Core.dll 指示 FileAttachment 如何创建附件。 public enum CreateAttachmentMode Fields AssetUri = 2 通过指向 KOOK 对象存储服务器上的文件的 Uri 创建附件。 FilePath = 0 通过本地文件路径创建附件。 Stream = 1 通过 Stream 流的实例创建附件。"
  },
  "api/Kook.CreateCategoryChannelProperties.html": {
    "href": "api/Kook.CreateCategoryChannelProperties.html",
    "title": "Class CreateCategoryChannelProperties | Kook.Net 文档",
    "keywords": "Class CreateCategoryChannelProperties Namespace Kook Assembly Kook.Net.Core.dll 提供用于创建 ICategoryChannel 的属性。 public class CreateCategoryChannelProperties : CreateGuildChannelProperties Inheritance object CreateGuildChannelProperties CreateCategoryChannelProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() See Also CreateCategoryChannelAsync(string, Action<CreateCategoryChannelProperties>, RequestOptions)"
  },
  "api/Kook.CreateGuildChannelProperties.html": {
    "href": "api/Kook.CreateGuildChannelProperties.html",
    "title": "Class CreateGuildChannelProperties | Kook.Net 文档",
    "keywords": "Class CreateGuildChannelProperties Namespace Kook Assembly Kook.Net.Core.dll 提供用于创建 IGuildChannel 的属性。 public class CreateGuildChannelProperties Inheritance object CreateGuildChannelProperties Derived CreateCategoryChannelProperties CreateTextChannelProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Kook.CreateTextChannelProperties.html": {
    "href": "api/Kook.CreateTextChannelProperties.html",
    "title": "Class CreateTextChannelProperties | Kook.Net 文档",
    "keywords": "Class CreateTextChannelProperties Namespace Kook Assembly Kook.Net.Core.dll 提供用于创建 ITextChannel 的属性。 public class CreateTextChannelProperties : CreateGuildChannelProperties Inheritance object CreateGuildChannelProperties CreateTextChannelProperties Derived CreateVoiceChannelProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CategoryId 获取或设置要设置到此频道的所属分组频道的 ID。 public ulong? CategoryId { get; set; } Property Value ulong? Remarks 将此值设置为某分组频道的 ID 可以使新建频道位于该分组频道下；将此值设置为 null 可以使新建频道位于服务器所有分组频道的上方，即不属于任何分组频道。 See Also CreateTextChannelAsync(string, Action<CreateTextChannelProperties>, RequestOptions)"
  },
  "api/Kook.CreateVoiceChannelProperties.html": {
    "href": "api/Kook.CreateVoiceChannelProperties.html",
    "title": "Class CreateVoiceChannelProperties | Kook.Net 文档",
    "keywords": "Class CreateVoiceChannelProperties Namespace Kook Assembly Kook.Net.Core.dll 提供用于创建 IVoiceChannel 的属性。 public class CreateVoiceChannelProperties : CreateTextChannelProperties Inheritance object CreateGuildChannelProperties CreateTextChannelProperties CreateVoiceChannelProperties Inherited Members CreateTextChannelProperties.CategoryId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties UserLimit 获取或设置允许同时连接到此频道的最大用户数；null 表示不限制。 public int? UserLimit { get; set; } Property Value int? VoiceQuality 获取或设置要求语音频道中的客户端使用的语音质量。 public VoiceQuality? VoiceQuality { get; set; } Property Value VoiceQuality? See Also CreateVoiceChannelAsync(string, Action<CreateVoiceChannelProperties>, RequestOptions)"
  },
  "api/Kook.Direction.html": {
    "href": "api/Kook.Direction.html",
    "title": "Enum Direction | Kook.Net 文档",
    "keywords": "Enum Direction Namespace Kook Assembly Kook.Net.Core.dll 表示获取消息的方向。 public enum Direction Fields After = 3 以指定的参考消息为基准，向后获取消息。 Around = 2 以指定的参考消息为基准，获取周围的消息。 Before = 1 以指定的参考消息为基准，向前获取消息。 Unspecified = 0 未指定消息的获取方向。"
  },
  "api/Kook.DividerModule.html": {
    "href": "api/Kook.DividerModule.html",
    "title": "Class DividerModule | Kook.Net 文档",
    "keywords": "Class DividerModule Namespace Kook Assembly Kook.Net.Core.dll 分割线模块，可用于 ICard 中。 public class DividerModule : IModule, IEquatable<DividerModule>, IEquatable<IModule> Inheritance object DividerModule Implements IModule IEquatable<DividerModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(DividerModule) CardExtensions.ToBuilder(IModule) Properties Type 获取模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods Equals(DividerModule?) Indicates whether the current object is equal to another object of the same type. public bool Equals(DividerModule? dividerModule) Parameters dividerModule DividerModule Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(DividerModule, DividerModule) 判定两个 DividerModule 是否相等。 public static bool operator ==(DividerModule left, DividerModule right) Parameters left DividerModule right DividerModule Returns bool 如果两个 DividerModule 相等，则为 true；否则为 false。 operator !=(DividerModule, DividerModule) 判定两个 DividerModule 是否不相等。 public static bool operator !=(DividerModule left, DividerModule right) Parameters left DividerModule right DividerModule Returns bool 如果两个 DividerModule 不相等，则为 true；否则为 false。"
  },
  "api/Kook.DividerModuleBuilder.html": {
    "href": "api/Kook.DividerModuleBuilder.html",
    "title": "Class DividerModuleBuilder | Kook.Net 文档",
    "keywords": "Class DividerModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll 用来构建 DividerModule 模块的构建器。 public class DividerModuleBuilder : IModuleBuilder, IEquatable<DividerModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object DividerModuleBuilder Implements IModuleBuilder IEquatable<DividerModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DividerModuleBuilder() 初始化一个 DividerModuleBuilder 类的新实例。 public DividerModuleBuilder() Properties Type 获取此构建器构建的模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods Build() 构建当前构建器为一个 DividerModule 对象。 public DividerModule Build() Returns DividerModule 由当前构建器表示的属性构建的 DividerModule 对象。 Equals(DividerModuleBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(DividerModuleBuilder? dividerModuleBuilder) Parameters dividerModuleBuilder DividerModuleBuilder Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(DividerModuleBuilder?, DividerModuleBuilder?) 判定两个 DividerModuleBuilder 是否相等。 public static bool operator ==(DividerModuleBuilder? left, DividerModuleBuilder? right) Parameters left DividerModuleBuilder right DividerModuleBuilder Returns bool 如果两个 DividerModuleBuilder 相等，则为 true；否则为 false。 operator !=(DividerModuleBuilder?, DividerModuleBuilder?) 判定两个 DividerModuleBuilder 是否不相等。 public static bool operator !=(DividerModuleBuilder? left, DividerModuleBuilder? right) Parameters left DividerModuleBuilder right DividerModuleBuilder Returns bool 如果两个 DividerModuleBuilder 不相等，则为 true；否则为 false。"
  },
  "api/Kook.ElementType.html": {
    "href": "api/Kook.ElementType.html",
    "title": "Enum ElementType | Kook.Net 文档",
    "keywords": "Enum ElementType Namespace Kook Assembly Kook.Net.Core.dll 表示一个 IElement 的类型。 public enum ElementType Fields Button = 3 按钮元素。 Image = 2 图片元素。 KMarkdown = 1 KMarkdown 文本元素。 Paragraph = 4 区域文本结构。 PlainText = 0 纯文本元素。"
  },
  "api/Kook.EmbedType.html": {
    "href": "api/Kook.EmbedType.html",
    "title": "Enum EmbedType | Kook.Net 文档",
    "keywords": "Enum EmbedType Namespace Kook Assembly Kook.Net.Core.dll 表示嵌入式内容的类型。 public enum EmbedType Fields BilibiliVideo = 3 嵌入式内容是一个哔哩哔哩视频。 Card = 4 嵌入式内容是一个卡片。 Image = 2 嵌入式内容是一个图片。 Link = 1 嵌入式内容是一个网址链接。 NotImplemented = 0 嵌入式内容的类型未解析到已知的强类型。"
  },
  "api/Kook.Emoji.html": {
    "href": "api/Kook.Emoji.html",
    "title": "Class Emoji | Kook.Net 文档",
    "keywords": "Class Emoji Namespace Kook Assembly Kook.Net.Core.dll 一个 Unicode 表情符号。 public class Emoji : IEmote, IEntity<string> Inheritance object Emoji Implements IEmote IEntity<string> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks 有关受支持的表情符号列表，请参阅 https://kooknet.dev/guides/emoji/emoji-list.html。 Constructors Emoji(string) 使用提供的 Unicode 初始化一个新的 Emoji 类的实例。 public Emoji(string unicode) Parameters unicode string 表情符号的 Unicode 表示。 Properties Id 获取此实体的唯一标识符。 public string Id { get; } Property Value string Name 获取此表情符号的显示名称或 Unicode 表示。 public string Name { get; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Parse(string?) 从原始格式解析 Emoji 类的新实例。 public static Emoji Parse(string? text) Parameters text string 要解析的字符串，例如：:heart: 或 ❤。 Returns Emoji 解析的 Emoji。 Exceptions FormatException text 不是表情符号名称或 Unicode。 ToString() 获取此表情符号的 Unicode 表示。 public override string ToString() Returns string 一个解析为 Name 的字符串。 TryParse(string?, out Emoji?) 尝试从原始格式解析 Emoji 类的新实例。 public static bool TryParse(string? text, out Emoji? result) Parameters text string 要解析的字符串，例如：:heart: 或 ❤。 result Emoji 如果解析成功，则包含解析的 Emoji；否则为 null。 Returns bool 如果解析成功，则为 true；否则为 false。 Operators implicit operator Emoji(string) 从原始格式解析 Emoji 类的新实例。 public static implicit operator Emoji(string emojiStr) Parameters emojiStr string Returns Emoji 解析的 Emoji。 Exceptions FormatException text 不是表情符号名称或 Unicode。"
  },
  "api/Kook.EmojiType.html": {
    "href": "api/Kook.EmojiType.html",
    "title": "Enum EmojiType | Kook.Net 文档",
    "keywords": "Enum EmojiType Namespace Kook Assembly Kook.Net.Core.dll 表示一个表情符号的类型。 public enum EmojiType Fields Animated = 2 动态表情符号。 Static = 1 静态表情符号。"
  },
  "api/Kook.Emote.html": {
    "href": "api/Kook.Emote.html",
    "title": "Class Emote | Kook.Net 文档",
    "keywords": "Class Emote Namespace Kook Assembly Kook.Net.Core.dll 表示一个表情符号。 public class Emote : IEmote, IEntity<string> Inheritance object Emote Implements IEmote IEntity<string> Derived GuildEmote Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Emote(string, string, bool?) 创建一个新的 Emote 实例。 public Emote(string id, string name, bool? animated = null) Parameters id string name string animated bool? Properties Animated 获取此表情符号是否为动态表情。如果无法确定此表情符号是否为动态表情，则为 null。 public bool? Animated { get; } Property Value bool? Id 获取此表情符号的唯一标识符。 public string Id { get; } Property Value string Name 获取此表情符号的名称。 public string Name { get; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Parse(string?, TagMode) 从一个表情符号的原始格式中解析出一个 Emote。 public static Emote Parse(string? text, TagMode tagMode) Parameters text string 表情符号的原始格式。例如：tagMode 为 PlainText 时的 [:emotename:1991895624896587/hbCFVWhu923k03k]；为 KMarkdown 时的 (emj)emotename(emj)[1991895624896587/hbCFVWhu923k03k]。 tagMode TagMode 解析标签的语法模式。 Returns Emote 解析出的 Emote。 Exceptions ArgumentException 无法以 tagMode 的语法模式解析 text 为一个有效的表情符号。 ToKMarkdownString() 获取此表情的 KMarkdown 格式字符串。 public string ToKMarkdownString() Returns string 此表情的 KMarkdown 格式字符串。 ToPlainTextString() 获取此表情的纯文本格式字符串。 public string ToPlainTextString() Returns string 此表情的纯文本格式字符串。 ToString() 获取此表情的 KMarkdown 格式字符串。 public override string ToString() Returns string 此表情的 KMarkdown 格式字符串。 ToString(TagMode) 获取此表情的字符串表示形式。 public string ToString(TagMode tagMode) Parameters tagMode TagMode 标签的语法模式。 Returns string 此表情的字符串表示形式。 Exceptions ArgumentOutOfRangeException tagMode 不是有效的标签语法模式。 TryParse(string?, out Emote?, TagMode) 尝试从一个表情符号的原始格式中解析出一个 Emote。 public static bool TryParse(string? text, out Emote? result, TagMode tagMode) Parameters text string 表情符号的原始格式。例如：tagMode 为 PlainText 时的 [:emotename:1991895624896587/hbCFVWhu923k03k]；为 KMarkdown 时的 (emj)emotename(emj)[1991895624896587/hbCFVWhu923k03k]。 result Emote 如果解析成功，则为解析出的 Emote；否则为 null。 tagMode TagMode 解析标签的语法模式。 Returns bool 如果解析成功，则为 true；否则为 false。"
  },
  "api/Kook.FileAttachment.html": {
    "href": "api/Kook.FileAttachment.html",
    "title": "Struct FileAttachment | Kook.Net 文档",
    "keywords": "Struct FileAttachment Namespace Kook Assembly Kook.Net.Core.dll 表示一个文件附件。 public struct FileAttachment : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FileAttachment(Stream, string, AttachmentType) 通过流创建附件。 public FileAttachment(Stream stream, string filename, AttachmentType type = AttachmentType.File) Parameters stream Stream 创建附件所使用的流。 filename string 文件名。 type AttachmentType 附件的类型。 FileAttachment(string, string?, AttachmentType) 通过文件路径创建附件。 public FileAttachment(string path, string? filename = null, AttachmentType type = AttachmentType.File) Parameters path string 文件的路径。 filename string 文件名。 type AttachmentType 附件的类型。 Remarks 此构造函数不会校验文件路径的格式，path 的值将会直接传递给 OpenRead(string) 方法。 See Also OpenRead(string) FileAttachment(Uri, string, AttachmentType) 通过 URL 创建附件。 public FileAttachment(Uri uri, string filename, AttachmentType type = AttachmentType.File) Parameters uri Uri 文件的 URL。 filename string 文件名。 type AttachmentType 附件的类型。 Remarks URL 应该是指向 KOOK 对象存储服务器上的资源的 URL。如果传入的网络地址不是指向 KOOK 对象存储服务器上的资源的 URL， 虽然此构造函数不会引发异常，但在发送消息时可能会引发异常。此时，网络资源应先通过转存至 KOOK 对象存储服务器上，再使用此构造函数。 See Also ValidateKookAssetUrl(string) Properties FileName 获取此附件的文件名。 public readonly string FileName { get; } Property Value string Mode 获取创建此文件附件的方式。 public readonly CreateAttachmentMode Mode { get; } Property Value CreateAttachmentMode Stream 获取包含文件内容的流。 public readonly Stream? Stream { get; } Property Value Stream Type 获取此附件的类型。 public readonly AttachmentType Type { get; } Property Value AttachmentType Uri 获取指向文件的 URL。 public readonly Uri? Uri { get; } Property Value Uri Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/Kook.FileModule.html": {
    "href": "api/Kook.FileModule.html",
    "title": "Class FileModule | Kook.Net 文档",
    "keywords": "Class FileModule Namespace Kook Assembly Kook.Net.Core.dll 文件模块，可用于 ICard 中。 public class FileModule : IMediaModule, IModule, IEquatable<FileModule>, IEquatable<IModule> Inheritance object FileModule Implements IMediaModule IModule IEquatable<FileModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(FileModule) CardExtensions.ToBuilder(IModule) Properties Size 获取文件的大小（单位：字节）。 public int? Size { get; } Property Value int? Source 获取文件的 URL。 public string Source { get; } Property Value string Title 获取文件的标题。 public string? Title { get; } Property Value string Type 获取模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods Equals(FileModule?) Indicates whether the current object is equal to another object of the same type. public bool Equals(FileModule? fileModule) Parameters fileModule FileModule Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(FileModule, FileModule) 判定两个 FileModule 是否相等。 public static bool operator ==(FileModule left, FileModule right) Parameters left FileModule right FileModule Returns bool 如果两个 FileModule 相等，则为 true；否则为 false。 operator !=(FileModule, FileModule) 判定两个 FileModule 是否不相等。 public static bool operator !=(FileModule left, FileModule right) Parameters left FileModule right FileModule Returns bool 如果两个 FileModule 不相等，则为 true；否则为 false。"
  },
  "api/Kook.FileModuleBuilder.html": {
    "href": "api/Kook.FileModuleBuilder.html",
    "title": "Class FileModuleBuilder | Kook.Net 文档",
    "keywords": "Class FileModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll 用来构建 FileModule 模块的构建器。 public class FileModuleBuilder : IModuleBuilder, IEquatable<FileModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object FileModuleBuilder Implements IModuleBuilder IEquatable<FileModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileModuleBuilder() 初始化一个 FileModuleBuilder 类的新实例。 public FileModuleBuilder() FileModuleBuilder(string, string?) 初始化一个 DividerModuleBuilder 类的新实例。 public FileModuleBuilder(string source, string? title = null) Parameters source string 文件的 URL。 title string 文件名。 Properties Source 获取或设置文件的 URL。 public string? Source { get; set; } Property Value string Title 获取或设置文件名。 public string? Title { get; set; } Property Value string Type 获取此构建器构建的模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods Build() 构建当前构建器为一个 FileModule 对象。 public FileModule Build() Returns FileModule 由当前构建器表示的属性构建的 FileModule 对象。 Exceptions ArgumentNullException Source 为 null。 ArgumentException Source 为空字符串。 UriFormatException Source 不是有效的 URL。 Equals(FileModuleBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(FileModuleBuilder? fileModuleBuilder) Parameters fileModuleBuilder FileModuleBuilder Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithSource(string?) 设置文件的 URL。 public FileModuleBuilder WithSource(string? source) Parameters source string 文件的 URL。 Returns FileModuleBuilder 当前构建器。 WithTitle(string) 设置文件名。 public FileModuleBuilder WithTitle(string title) Parameters title string 文件名。 Returns FileModuleBuilder 当前构建器。 Operators operator ==(FileModuleBuilder?, FileModuleBuilder?) 判定两个 FileModuleBuilder 是否相等。 public static bool operator ==(FileModuleBuilder? left, FileModuleBuilder? right) Parameters left FileModuleBuilder right FileModuleBuilder Returns bool 如果两个 FileModuleBuilder 相等，则为 true；否则为 false。 operator !=(FileModuleBuilder?, FileModuleBuilder?) 判定两个 FileModuleBuilder 是否不相等。 public static bool operator !=(FileModuleBuilder? left, FileModuleBuilder? right) Parameters left FileModuleBuilder right FileModuleBuilder Returns bool 如果两个 FileModuleBuilder 不相等，则为 true；否则为 false。"
  },
  "api/Kook.Format.html": {
    "href": "api/Kook.Format.html",
    "title": "Class Format | Kook.Net 文档",
    "keywords": "Class Format Namespace Kook Assembly Kook.Net.Core.dll 提供用于格式化字符的帮助类。 public static class Format Inheritance object Format Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BlockQuote(string?, bool) 返回一个使用引用块格式的 KMarkdown 格式化字符串。 public static string BlockQuote(this string? text, bool sanitize = true) Parameters text string 要格式化的文本。 sanitize bool 是否要先对 text 中与当前格式化操作有冲突的字符进行转义。 Returns string 获取格式化后的引用文本。 Remarks warning 此方法默认会在文本中的第一个空行之前和每个空行之间插入零宽连接符特殊字符 (\\u200d)，以便渲染器能够将整个文本显示为单个引用。 当用户复制引用内的文本时，他们不会复制这个特殊字符。但是，如果通过消息相关的 API 从服务器获取消息文本， 它将包含此方法插入的特殊字符。 设置 sanitize 为 true 将会对文本中出现的所有 > 字符转义为 \\>。 See Also Quote(string?, bool) Bold(string?, bool) 返回一个使用粗体格式的 KMarkdown 格式化字符串。 public static string Bold(this string? text, bool sanitize = true) Parameters text string 要格式化的文本。 sanitize bool 是否要先对 text 中与当前格式化操作有冲突的字符进行转义。 Returns string 获取格式化后的文本。 Remarks 设置 sanitize 为 true 将会对文本中出现的所有 * 字符转义为 *。 BoldItalics(string?, bool) 返回一个使用粗斜体格式的 KMarkdown 格式化字符串。 public static string BoldItalics(this string? text, bool sanitize = true) Parameters text string 要格式化的文本。 sanitize bool 是否要先对 text 中与当前格式化操作有冲突的字符进行转义。 Returns string 获取格式化后的文本。 Remarks 设置 sanitize 为 true 将会对文本中出现的所有 * 字符转义为 *。 Code(string?, string?, bool) 返回一个使用代码格式的 KMarkdown 格式化字符串。 public static string Code(this string? text, string? language = null, bool sanitize = true) Parameters text string 要格式化的文本。 language string 代码块的语言。 sanitize bool 是否要先对 text 中与当前格式化操作有冲突的字符进行转义。 Returns string 获取格式化后的内联代码或代码块。 Remarks 设置 sanitize 为 true 将会对文本中出现的所有 </code> 字符转义为 <code>\\。 当 language 不为 null 或 text 中包含换行符时，将返回一个代码块； 否则，将返回一个内联代码块。 CodeBlock(string?, string?, bool) 返回一个使用代码块格式的 KMarkdown 格式化字符串。 public static string CodeBlock(this string? text, string? language = null, bool sanitize = true) Parameters text string 要格式化的文本。 language string 代码块的语言。 sanitize bool 是否要先对 text 中与当前格式化操作有冲突的字符进行转义。 Returns string 获取格式化后的代码块。 Remarks 设置 sanitize 为 true 将会对文本中出现的所有 </code> 字符转义为 <code>\\。 Colorize(string?, TextTheme, bool) 返回一个使用彩色文本格式的 KMarkdown 格式化字符串。 public static string Colorize(this string? text, TextTheme theme, bool sanitize = true) Parameters text string 要格式化的文本。 theme TextTheme 要应用的文本颜色。 sanitize bool 是否要先对 text 中与当前格式化操作有冲突的字符进行转义。 Returns string 获取格式化后的文本。 Remarks warning 目前，KOOK 仅支持在卡片消息中使用 KMarkdown 彩色文本格式。 Italics(string?, bool) 返回一个使用斜体格式的 KMarkdown 格式化字符串。 public static string Italics(this string? text, bool sanitize = true) Parameters text string 要格式化的文本。 sanitize bool 是否要先对 text 中与当前格式化操作有冲突的字符进行转义。 Returns string 获取格式化后的文本。 Remarks 设置 sanitize 为 true 将会对文本中出现的所有 * 字符转义为 *。 Quote(string?, bool) 将字符串格式化为由多个换行符分隔的引用字符串。 public static string? Quote(this string? text, bool sanitize = true) Parameters text string 要格式化的文本。 sanitize bool 是否要先对 text 中与当前格式化操作有冲突的字符进行转义。 Returns string 获取格式化后的引用文本。 Remarks 此方法尽可能地保持字符串在 KOOK 中的渲染排版，保留换行与空格，各个文本块会被分别引用。 warning 此方法会将两个或更多连续的换行符识别多个独立文本块，并将每个块分别格式化为引用块。 对于每个文本块，在字符串的开头插入一个大于号 (>) 和一个空格；如果块的开头是一个空白字符，则还会插入一个 零宽连接符 (\\u200d)，以确保引用的正确显示。当用户复制引用内的文本时，他们不会复制到这个特殊字符。 但是，如果通过消息相关的 API 从服务器获取消息文本，返回的消息文本将包含此方法插入的特殊字符。 另外，在块的末尾还会附加一个额外的换行符，以修正由于引用格式化引起的换行缺失问题。附加的换行符与附近的换行符样式一致。 如果要引用整个文本块，请使用 BlockQuote(string?, bool)。 此方法会尝试分析字符串中的行分隔符，并在需要因要保持排版时插入行分隔符时，尽可能地使用原有的行分隔符。 设置 sanitize 为 true 将会对文本中出现的所有 > 字符转义为 \\>。 See Also BlockQuote(string?, bool) Sanitize(string?, params string[]) 转义字符串，安全地转义任何 KMarkdown 序列。 public static string? Sanitize(this string? text, params string[] sensitiveCharacters) Parameters text string 要转义的文本。 sensitiveCharacters string[] 要转义的字符。 Returns string 获取转义后的文本。 Remarks 如果未指定要转移的字符，则将使用默认的转义字符列表。默认的待转义字符包括： </code>、*、~、`、:、-、]、)、>。 Spoiler(string?, bool) 返回一个使用剧透格式的 KMarkdown 格式化字符串。 public static string Spoiler(this string? text, bool sanitize = true) Parameters text string 要格式化的文本。 sanitize bool 是否要先对 text 中与当前格式化操作有冲突的字符进行转义。 Returns string 获取格式化后的文本。 Remarks 设置 sanitize 为 true 将会对文本中出现的所有 ( 和 ) 字符分别转义为 ( 和 )。 Strikethrough(string?, bool) 返回一个使用删除线格式的 KMarkdown 格式化字符串。 public static string Strikethrough(this string? text, bool sanitize = true) Parameters text string 要格式化的文本。 sanitize bool 是否要先对 text 中与当前格式化操作有冲突的字符进行转义。 Returns string 获取格式化后的文本。 Remarks 设置 sanitize 为 true 将会对文本中出现的所有 ~ 字符转义为 ~。 StripMarkDown(string) 移除文本中的 KMarkdown 格式字符。 [Obsolete(\"Use StripMarkdown instead.\")] public static string StripMarkDown(this string text) Parameters text string 要移除 KMarkdown 格式字符的文本。 Returns string 获取移除 KMarkdown 格式字符后的文本。 Remarks 此方法不会过多地分析 KMarkdown 的复杂格式，只会简单地移除 KMarkdown 中的以下字符： *、(ins)、(spl)、`、~、>、</code>、连续两个或更多的 -。 StripMarkdown(string) 移除文本中的 KMarkdown 格式字符。 public static string StripMarkdown(this string text) Parameters text string 要移除 KMarkdown 格式字符的文本。 Returns string 获取移除 KMarkdown 格式字符后的文本。 Remarks 此方法不会过多地分析 KMarkdown 的复杂格式，只会简单地移除 KMarkdown 中的以下字符： *、(ins)、(spl)、`、~、>、</code>、连续两个或更多的 -。 Underline(string?, bool) 返回一个使用下划线格式的 KMarkdown 格式化字符串。 public static string Underline(this string? text, bool sanitize = true) Parameters text string 要格式化的文本。 sanitize bool 是否要先对 text 中与当前格式化操作有冲突的字符进行转义。 Returns string 获取格式化后的文本。 Remarks 设置 sanitize 为 true 将会对文本中出现的所有 ( 和 ) 字符分别转义为 ( 和 )。 Url(string?, string, bool) 返回格式化后的 KMarkdown 链接。 public static string Url(this string? text, string url, bool sanitize = true) Parameters text string 要格式化的文本。 url string 要链接到的 URL。 sanitize bool 是否要先对 text 与 url 中与当前格式化操作有冲突的字符进行转义。 Returns string 获取格式化后的链接文本。 Remarks 设置 sanitize 为 true 将会对文本中出现的所有 [ 和 ] 字符分别转义为 [ 和 ]，并对 URL 中出现的所有 ( 和 ) 字符分别转义为 ( 和 )。 Url(string?, Uri, bool) 返回格式化后的 KMarkdown 链接。 public static string Url(this string? text, Uri url, bool sanitize = true) Parameters text string 要格式化的文本。 url Uri 要链接到的 URL。 sanitize bool 是否要先对 text 与 url 中与当前格式化操作有冲突的字符进行转义。 Returns string 获取格式化后的链接文本。 Remarks 设置 sanitize 为 true 将会对文本中出现的所有 [ 和 ] 字符分别转义为 [ 和 ]，并对 URL 中出现的所有 ( 和 ) 字符分别转义为 ( 和 )。 UsernameAndIdentifyNumber(IUser, bool) 保持双向 Unicode 格式化的情况下格式化用户的用户名称 + 识别号。 public static string UsernameAndIdentifyNumber(this IUser user, bool doBidirectional) Parameters user IUser 要格式化其用户名称与识别号的用户。 doBidirectional bool 是否要保持双向 Unicode 进行格式化。 Returns string 获取格式化后的用户名称与识别号。 See Also FormatUsersInBidirectionalUnicode"
  },
  "api/Kook.FriendState.html": {
    "href": "api/Kook.FriendState.html",
    "title": "Enum FriendState | Kook.Net 文档",
    "keywords": "Enum FriendState Namespace Kook Assembly Kook.Net.Core.dll 表示一个用户之间的好友关系状态。 public enum FriendState Fields Accepted = 1 表示一个已接受的好友请求，即该用户已被添加到当前用户的好友列表中。 Blocked = 2 表示一个已屏蔽的好友状态，即该用户已被当前用户屏蔽。 Pending = 0 表示一个尚未被接受的待处理好友请求。"
  },
  "api/Kook.GameCreationSource.html": {
    "href": "api/Kook.GameCreationSource.html",
    "title": "Enum GameCreationSource | Kook.Net 文档",
    "keywords": "Enum GameCreationSource Namespace Kook Assembly Kook.Net.Core.dll 表示游戏信息的创建来源。 public enum GameCreationSource Fields SelfUser = 1 由当前用户创建。 System = 2 由系统默认创建。"
  },
  "api/Kook.GameProperties.html": {
    "href": "api/Kook.GameProperties.html",
    "title": "Class GameProperties | Kook.Net 文档",
    "keywords": "Class GameProperties Namespace Kook Assembly Kook.Net.Core.dll 提供用于修改 IGame 的属性。 public class GameProperties Inheritance object GameProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IconUrl 获取或设置游戏的图标 URL。 public string? IconUrl { get; set; } Property Value string Name 获取或设置游戏的名称。 public required string Name { get; set; } Property Value string See Also ModifyAsync(Action<GameProperties>, RequestOptions)"
  },
  "api/Kook.GameType.html": {
    "href": "api/Kook.GameType.html",
    "title": "Enum GameType | Kook.Net 文档",
    "keywords": "Enum GameType Namespace Kook Assembly Kook.Net.Core.dll 表示游戏的类型。 public enum GameType Fields Game = 0 仅仅是游戏。 Process = 2 进程。 VirtualUploader = 1 虚拟主播。"
  },
  "api/Kook.GradientColor.html": {
    "href": "api/Kook.GradientColor.html",
    "title": "Struct GradientColor | Kook.Net 文档",
    "keywords": "Struct GradientColor Namespace Kook Assembly Kook.Net.Core.dll 表示一个渐变色。 public readonly struct GradientColor : IEquatable<GradientColor> Implements IEquatable<GradientColor> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors GradientColor(Color, Color) 初始化一个 GradientColor 结构的新实例。 public GradientColor(Color left, Color right) Parameters left Color 渐变色的左侧颜色。 right Color 渐变色的右侧颜色。 Properties Left 获取此渐变色的左侧颜色。 public Color Left { get; } Property Value Color Right 获取此渐变色的右侧颜色。 public Color Right { get; } Property Value Color Methods Deconstruct(out Color, out Color) 将此渐变色解构为表示左右两个颜色的元组。 public void Deconstruct(out Color left, out Color right) Parameters left Color 左侧颜色。 right Color 右侧颜色。 Equals(GradientColor) Indicates whether the current object is equal to another object of the same type. public bool Equals(GradientColor other) Parameters other GradientColor An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Operators implicit operator (Color Left, Color Right)(GradientColor) 将此渐变色转换为表示左右两个颜色的元组。 public static implicit operator (Color Left, Color Right)(GradientColor gradient) Parameters gradient GradientColor 要转换的渐变色。 Returns (Color Left, Color Right) 表示左右两个颜色的元组。 implicit operator GradientColor((Color Left, Color Right)) 将此表示左右两个颜色的元组转换为渐变色。 public static implicit operator GradientColor((Color Left, Color Right) gradient) Parameters gradient (Color Left, Color Right) 要转换的表示左右两个颜色的元组。 Returns GradientColor 转换后的渐变色。"
  },
  "api/Kook.GuildCertification.html": {
    "href": "api/Kook.GuildCertification.html",
    "title": "Class GuildCertification | Kook.Net 文档",
    "keywords": "Class GuildCertification Namespace Kook Assembly Kook.Net.Core.dll 表示一个服务器认证信息。 public class GuildCertification Inheritance object GuildCertification Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description 获取认证的描述。 public string? Description { get; } Property Value string Picture 获取认证的图片 URL。 public string? Picture { get; } Property Value string Title 获取认证的名称。 public string Title { get; } Property Value string Type 获取认证的类型。 public GuildCertificationType Type { get; } Property Value GuildCertificationType"
  },
  "api/Kook.GuildCertificationType.html": {
    "href": "api/Kook.GuildCertificationType.html",
    "title": "Enum GuildCertificationType | Kook.Net 文档",
    "keywords": "Enum GuildCertificationType Namespace Kook Assembly Kook.Net.Core.dll 表示一个服务器认证的类型。 public enum GuildCertificationType Fields Official = 1 官方认证。 Partner = 2 合作伙伴认证。 Personal = 6 个人认证。 Recommended = 4 推荐认证。"
  },
  "api/Kook.GuildEmote.html": {
    "href": "api/Kook.GuildEmote.html",
    "title": "Class GuildEmote | Kook.Net 文档",
    "keywords": "Class GuildEmote Namespace Kook Assembly Kook.Net.Core.dll 表示一个附属于服务器的基于图片的表情符号。 public class GuildEmote : Emote, IEmote, IEntity<string> Inheritance object Emote GuildEmote Implements IEmote IEntity<string> Inherited Members Emote.Id Emote.Name Emote.Animated Emote.Equals(object) Emote.TryParse(string, out Emote, TagMode) Emote.Parse(string, TagMode) Emote.GetHashCode() Emote.ToKMarkdownString() Emote.ToPlainTextString() Emote.ToString() Emote.ToString(TagMode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties CreatorId 获取创建此表情符号的用户的 ID public ulong? CreatorId { get; } Property Value ulong? Remarks 如果无法确定创建此表情符号的用户的 ID，则为 null。 GuildId 获取此表情符号所属的服务器的 ID。 public ulong GuildId { get; } Property Value ulong"
  },
  "api/Kook.GuildFeature.html": {
    "href": "api/Kook.GuildFeature.html",
    "title": "Enum GuildFeature | Kook.Net 文档",
    "keywords": "Enum GuildFeature Namespace Kook Assembly Kook.Net.Core.dll 表示一个服务器特性。 [Flags] public enum GuildFeature : uint Fields KeyAccount = 4 服务器是重点客户服务器。 None = 0 无特性。 Official = 1 服务器是官方服务器。 Partner = 2 服务器是合作伙伴服务器。"
  },
  "api/Kook.GuildFeatures.html": {
    "href": "api/Kook.GuildFeatures.html",
    "title": "Struct GuildFeatures | Kook.Net 文档",
    "keywords": "Struct GuildFeatures Namespace Kook Assembly Kook.Net.Core.dll 表示一个服务器的所有特性。 public readonly struct GuildFeatures Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties IsKeyAccount 获取此服务器是否为重点客户服务器。 public bool IsKeyAccount { get; } Property Value bool IsOfficial 获取此服务器是否为官方服务器。 public bool IsOfficial { get; } Property Value bool IsPartner 获取此服务器是否为合作伙伴服务器。 public bool IsPartner { get; } Property Value bool RawValues 获取此服务器的所有特性的原始值。 public IReadOnlyCollection<string> RawValues { get; } Property Value IReadOnlyCollection<string> Remarks 若特性未包含在 GuildFeature 中，则可以在此找到。 Value 获取此服务器的已识别特性。 public GuildFeature Value { get; } Property Value GuildFeature Methods HasFeature(GuildFeature) 获取此服务器是否具有指定的特性。 public bool HasFeature(GuildFeature feature) Parameters feature GuildFeature 要进行检查的服务器特性。 Returns bool 如果此服务器具有指定的特性，则为 true，否则为 false。 HasFeature(string) 获取此服务器是否具有指定的特性。 public bool HasFeature(string feature) Parameters feature string 要进行检查的服务器特性。 Returns bool 如果此服务器具有指定的特性，则为 true，否则为 false。"
  },
  "api/Kook.GuildPermission.html": {
    "href": "api/Kook.GuildPermission.html",
    "title": "Enum GuildPermission | Kook.Net 文档",
    "keywords": "Enum GuildPermission Namespace Kook Assembly Kook.Net.Core.dll 表示可以为角色或用户设置的服务器级别的服务器权限。 [Flags] public enum GuildPermission : uint Fields AddReactions = 262144 添加回应。 Administrator = 1 管理员。 AttachFiles = 16384 上传文件。 BanMembers = 128 加入服务器黑名单。 ChangeNickname = 512 修改昵称。 Connect = 32768 语音连接。 CreateInvites = 8 创建邀请。 DeafenMembers = 16777216 服务器静音。 FollowReactions = 524288 跟随添加回应。 KickMembers = 64 踢出成员。 ManageChannels = 32 频道管理。 ManageEmojis = 256 管理自定义表情。 ManageGuild = 2 管理服务器。 ManageInvites = 16 管理邀请。 ManageMessages = 8192 消息管理。 ManageNicknames = 67108864 修改他人昵称。 ManageRoles = 1024 管理角色权限。 ManageVoice = 65536 语音管理。 MentionEveryone = 131072 提及全体成员、在线成员和所有角色。 MuteMembers = 33554432 服务器闭麦。 OnlyPushToTalk = 2097152 仅使用按键说话。 PassiveConnect = 1048576 被动连接语音频道。 PlaySoundtrack = 134217728 共享计算机音频。 SendMessages = 4096 发送文字消息。 ShareScreen = 268435456 屏幕分享。 Speak = 8388608 发言。 UseVoiceActivity = 4194304 使用自由麦。 ViewAuditLog = 4 查看管理日志。 ViewChannel = 2048 查看文字与语音频道。"
  },
  "api/Kook.GuildPermissions.html": {
    "href": "api/Kook.GuildPermissions.html",
    "title": "Struct GuildPermissions | Kook.Net 文档",
    "keywords": "Struct GuildPermissions Namespace Kook Assembly Kook.Net.Core.dll 表示一个服务器的权限集。 public struct GuildPermissions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors GuildPermissions(bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool) 使用指定的权限位信息创建一个 GuildPermissions 结构的新实例。 public GuildPermissions(bool administrator = false, bool manageGuild = false, bool viewAuditLog = false, bool createInvites = false, bool manageInvites = false, bool manageChannels = false, bool kickMembers = false, bool banMembers = false, bool manageEmojis = false, bool changeNickname = false, bool manageRoles = false, bool viewChannel = false, bool sendMessages = false, bool manageMessages = false, bool attachFiles = false, bool connect = false, bool manageVoice = false, bool mentionEveryone = false, bool addReactions = false, bool followReactions = false, bool passiveConnect = false, bool onlyPushToTalk = false, bool useVoiceActivity = false, bool speak = false, bool deafenMembers = false, bool muteMembers = false, bool manageNicknames = false, bool playSoundtrack = false, bool shareScreen = false) Parameters administrator bool 管理员。 manageGuild bool 管理服务器。 viewAuditLog bool 查看管理日志。 createInvites bool 创建邀请。 manageInvites bool 管理邀请。 manageChannels bool 频道管理。 kickMembers bool 踢出成员。 banMembers bool 加入服务器黑名单。 manageEmojis bool 管理自定义表情。 changeNickname bool 修改昵称。 manageRoles bool 管理角色权限。 viewChannel bool 查看文字与语音频道。 sendMessages bool 发送文字消息。 manageMessages bool 消息管理。 attachFiles bool 上传文件。 connect bool 语音连接。 manageVoice bool 语音管理。 mentionEveryone bool 提及全体成员、在线成员和所有角色。 addReactions bool 添加回应。 followReactions bool 跟随添加回应。 passiveConnect bool 被动连接语音频道。 onlyPushToTalk bool 仅使用按键说话。 useVoiceActivity bool 使用自由麦。 speak bool 发言。 deafenMembers bool 服务器静音。 muteMembers bool 服务器闭麦。 manageNicknames bool 修改他人昵称。 playSoundtrack bool 共享计算机音频。 shareScreen bool 屏幕分享。 GuildPermissions(ulong) 使用指定的权限原始值创建一个 GuildPermissions 结构的新实例。 public GuildPermissions(ulong rawValue) Parameters rawValue ulong 权限原始值。 Fields All 获取一个包含所有可以为服务器设置的权限的 GuildPermissions。 public static readonly GuildPermissions All Field Value GuildPermissions None 获取一个空的 GuildPermissions，不包含任何权限。 public static readonly GuildPermissions None Field Value GuildPermissions Properties AddReactions 获取此权限集是否允许相关用户添加回应。 public bool AddReactions { get; } Property Value bool Administrator 获取此权限集的相关用户是否为服务器管理员。 public bool Administrator { get; } Property Value bool AttachFiles 获取此权限集是否允许相关用户上传文件。 public bool AttachFiles { get; } Property Value bool BanMembers 获取此权限集是否允许相关用户封禁其他用户。 public bool BanMembers { get; } Property Value bool ChangeNickname 获取此权限集是否允许相关用户修改昵称。 public bool ChangeNickname { get; } Property Value bool Connect 获取此权限集是否允许相关用户连接语音。 public bool Connect { get; } Property Value bool CreateInvites 获取此权限集是否允许相关用户创建邀请。 public bool CreateInvites { get; } Property Value bool DeafenMembers 获取此权限集是否允许相关用户使其他用户被服务器静音。 public bool DeafenMembers { get; } Property Value bool FollowReactions 获取此权限集是否允许相关用户跟随添加回应。 public bool FollowReactions { get; } Property Value bool KickMembers 获取此权限集是否允许相关用户踢出其他用户。 public bool KickMembers { get; } Property Value bool ManageChannels 获取此权限集是否允许相关用户管理频道。 public bool ManageChannels { get; } Property Value bool ManageEmojis 获取此权限集是否允许相关用户管理自定义表情。 public bool ManageEmojis { get; } Property Value bool ManageGuild 获取此权限集是否允许相关用户管理服务器。 public bool ManageGuild { get; } Property Value bool ManageInvites 获取此权限集是否允许相关用户管理邀请。 public bool ManageInvites { get; } Property Value bool ManageMessages 获取此权限集是否允许相关用户管理消息。 public bool ManageMessages { get; } Property Value bool ManageNicknames 获取此权限集是否允许相关用户修改他人昵称。 public bool ManageNicknames { get; } Property Value bool ManageRoles 获取此权限集是否允许相关用户管理角色。 public bool ManageRoles { get; } Property Value bool ManageVoice 获取此权限集是否允许相关用户管理语音频道。 public bool ManageVoice { get; } Property Value bool MentionEveryone 获取此权限集是否允许相关用户提及全体成员、在线成员和所有角色。 public bool MentionEveryone { get; } Property Value bool MuteMembers 获取此权限集是否允许相关用户使其他用户被服务器闭麦。 public bool MuteMembers { get; } Property Value bool OnlyPushToTalk 获取此权限集是否要求相关用户仅可使用按键说话。 public bool OnlyPushToTalk { get; } Property Value bool PassiveConnect 获取此权限集是否允许相关用户被动连接到语音频道。 public bool PassiveConnect { get; } Property Value bool PlaySoundtrack 获取此权限集是否允许相关用户共享计算机音频。 public bool PlaySoundtrack { get; } Property Value bool RawValue 获取此权限集的原始值。 public readonly ulong RawValue { get; } Property Value ulong SendMessages 获取此权限集是否允许相关用户发送文字消息。 public bool SendMessages { get; } Property Value bool ShareScreen 获取此权限集是否允许相关用户共享计算机画面。 public bool ShareScreen { get; } Property Value bool Speak 获取此权限集是否允许相关用户在语音频道中发言。 public bool Speak { get; } Property Value bool UseVoiceActivity 获取此权限集是否允许相关用户使用自由麦。 public bool UseVoiceActivity { get; } Property Value bool ViewAuditLog 获取此权限集是否允许相关用户查看管理日志。 public bool ViewAuditLog { get; } Property Value bool ViewChannel 获取此权限集是否允许相关用户查看文字与语音频道。 public bool ViewChannel { get; } Property Value bool Methods Has(GuildPermission) 获取当前权限集是否包含指定的权限。 public bool Has(GuildPermission permission) Parameters permission GuildPermission 要检查的权限。 Returns bool 如果当前权限集包含了所有指定的权限信息，则为 true；否则为 false。 Modify(bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?) 以当前权限集为基础，更改指定的权限，返回一个 GuildPermissions 结构的新实例。 public GuildPermissions Modify(bool? administrator = null, bool? manageGuild = null, bool? viewAuditLog = null, bool? createInvites = null, bool? manageInvites = null, bool? manageChannels = null, bool? kickMembers = null, bool? banMembers = null, bool? manageEmojis = null, bool? changeNickname = null, bool? manageRoles = null, bool? viewChannel = null, bool? sendMessages = null, bool? manageMessages = null, bool? attachFiles = null, bool? connect = null, bool? manageVoice = null, bool? mentionEveryone = null, bool? addReactions = null, bool? followReactions = null, bool? passiveConnect = null, bool? onlyPushToTalk = null, bool? useVoiceActivity = null, bool? speak = null, bool? deafenMembers = null, bool? muteMembers = null, bool? manageNicknames = null, bool? playSoundtrack = null, bool? shareScreen = null) Parameters administrator bool? 管理员。 manageGuild bool? 管理服务器。 viewAuditLog bool? 查看管理日志。 createInvites bool? 创建邀请。 manageInvites bool? 管理邀请。 manageChannels bool? 频道管理。 kickMembers bool? 踢出成员。 banMembers bool? 加入服务器黑名单。 manageEmojis bool? 管理自定义表情。 changeNickname bool? 修改昵称。 manageRoles bool? 管理角色权限。 viewChannel bool? 查看文字与语音频道。 sendMessages bool? 发送文字消息。 manageMessages bool? 消息管理。 attachFiles bool? 上传文件。 connect bool? 语音连接。 manageVoice bool? 语音管理。 mentionEveryone bool? 提及全体成员、在线成员和所有角色。 addReactions bool? 添加回应。 followReactions bool? 跟随添加回应。 passiveConnect bool? 被动连接语音频道。 onlyPushToTalk bool? 仅使用按键说话。 useVoiceActivity bool? 使用自由麦。 speak bool? 发言。 deafenMembers bool? 服务器静音。 muteMembers bool? 服务器闭麦。 manageNicknames bool? 修改他人昵称。 playSoundtrack bool? 共享计算机音频。 shareScreen bool? 屏幕分享。 Returns GuildPermissions 更改了指定权限的新的权限集。 ToList() 获取一个包含当前权限集所包含的所有已设置的 GuildPermission 独立位标志枚举值的集合。 public List<GuildPermission> ToList() Returns List<GuildPermission> 一个包含当前权限集所包含的所有已设置的 GuildPermission 独立位标志枚举值的集合；如果当前权限集未包含任何已设置的权限位，则会返回一个空集合。 ToString() 获取此权限集原始值的字符串表示。 public override string ToString() Returns string 此权限集原始值的字符串表示。"
  },
  "api/Kook.HeaderModule.html": {
    "href": "api/Kook.HeaderModule.html",
    "title": "Class HeaderModule | Kook.Net 文档",
    "keywords": "Class HeaderModule Namespace Kook Assembly Kook.Net.Core.dll 标题模块，可用于 ICard 中。 public class HeaderModule : IModule, IEquatable<HeaderModule>, IEquatable<IModule> Inheritance object HeaderModule Implements IModule IEquatable<HeaderModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CardExtensions.ToBuilder(HeaderModule) CardExtensions.ToBuilder(IModule) Properties Text 获取模块的标题内容。 public PlainTextElement? Text { get; } Property Value PlainTextElement Type 获取模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods Equals(HeaderModule?) Indicates whether the current object is equal to another object of the same type. public bool Equals(HeaderModule? headerModule) Parameters headerModule HeaderModule Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string? ToString() Returns string A string that represents the current object. Operators operator ==(HeaderModule, HeaderModule) 判定两个 HeaderModule 是否相等。 public static bool operator ==(HeaderModule left, HeaderModule right) Parameters left HeaderModule right HeaderModule Returns bool 如果两个 HeaderModule 相等，则为 true；否则为 false。 operator !=(HeaderModule, HeaderModule) 判定两个 HeaderModule 是否不相等。 public static bool operator !=(HeaderModule left, HeaderModule right) Parameters left HeaderModule right HeaderModule Returns bool 如果两个 HeaderModule 不相等，则为 true；否则为 false。"
  },
  "api/Kook.HeaderModuleBuilder.html": {
    "href": "api/Kook.HeaderModuleBuilder.html",
    "title": "Class HeaderModuleBuilder | Kook.Net 文档",
    "keywords": "Class HeaderModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll 用来构建 HeaderModule 模块的构建器。 public class HeaderModuleBuilder : IModuleBuilder, IEquatable<HeaderModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object HeaderModuleBuilder Implements IModuleBuilder IEquatable<HeaderModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HeaderModuleBuilder() 初始化一个 HeaderModuleBuilder 类的新实例。 public HeaderModuleBuilder() HeaderModuleBuilder(PlainTextElementBuilder) 初始化一个 HeaderModuleBuilder 类的新实例。 public HeaderModuleBuilder(PlainTextElementBuilder text) Parameters text PlainTextElementBuilder 标题文本。 HeaderModuleBuilder(string) 初始化一个 HeaderModuleBuilder 类的新实例。 public HeaderModuleBuilder(string text) Parameters text string 标题文本。 Fields MaxHeaderContentLength 标题内容文本的最大长度。 public const int MaxHeaderContentLength = 100 Field Value int Properties Text 获取或设置标题文本。 public PlainTextElementBuilder? Text { get; set; } Property Value PlainTextElementBuilder Type 获取此构建器构建的模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods Build() 构建当前构建器为一个 HeaderModule 对象。 public HeaderModule Build() Returns HeaderModule 由当前构建器表示的属性构建的 HeaderModule 对象。 Exceptions ArgumentNullException Text 为 null。 ArgumentException Text 的内容为 null。 ArgumentException Text 的内容长度超过了 MaxHeaderContentLength。 Equals(HeaderModuleBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(HeaderModuleBuilder? headerModuleBuilder) Parameters headerModuleBuilder HeaderModuleBuilder Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithText(PlainTextElementBuilder) 设置标题文本。 public HeaderModuleBuilder WithText(PlainTextElementBuilder text) Parameters text PlainTextElementBuilder 要设置的标题文本。 Returns HeaderModuleBuilder 当前构建器。 WithText(Action<PlainTextElementBuilder>?) 设置标题文本。 public HeaderModuleBuilder WithText(Action<PlainTextElementBuilder>? action = null) Parameters action Action<PlainTextElementBuilder> 一个包含对要设置的标题文本进行配置的操作的委托。 Returns HeaderModuleBuilder 当前构建器。 WithText(string) 设置标题文本。 public HeaderModuleBuilder WithText(string text) Parameters text string 要设置的标题文本。 Returns HeaderModuleBuilder 当前构建器。 Operators operator ==(HeaderModuleBuilder?, HeaderModuleBuilder?) 判定两个 HeaderModuleBuilder 是否相等。 public static bool operator ==(HeaderModuleBuilder? left, HeaderModuleBuilder? right) Parameters left HeaderModuleBuilder right HeaderModuleBuilder Returns bool 如果两个 HeaderModuleBuilder 相等，则为 true；否则为 false。 implicit operator HeaderModuleBuilder(string) 初始化一个 HeaderModuleBuilder 类的新实例。 public static implicit operator HeaderModuleBuilder(string text) Parameters text string 标题文本。 Returns HeaderModuleBuilder operator !=(HeaderModuleBuilder?, HeaderModuleBuilder?) 判定两个 HeaderModuleBuilder 是否不相等。 public static bool operator !=(HeaderModuleBuilder? left, HeaderModuleBuilder? right) Parameters left HeaderModuleBuilder right HeaderModuleBuilder Returns bool 如果两个 HeaderModuleBuilder 不相等，则为 true；否则为 false。"
  },
  "api/Kook.IActivity.html": {
    "href": "api/Kook.IActivity.html",
    "title": "Interface IActivity | Kook.Net 文档",
    "keywords": "Interface IActivity Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的用户活动。 public interface IActivity"
  },
  "api/Kook.IAttachment.html": {
    "href": "api/Kook.IAttachment.html",
    "title": "Interface IAttachment | Kook.Net 文档",
    "keywords": "Interface IAttachment Namespace Kook Assembly Kook.Net.Core.dll 表示一个消息内通用的附件。 public interface IAttachment Properties Duration 如果此附件表示可播放的内容，则获取其持续时间。 TimeSpan? Duration { get; } Property Value TimeSpan? FileType 获取此附件的文件类型。 string? FileType { get; } Property Value string Filename 获取此附件的文件名。 string? Filename { get; } Property Value string Height 如果此附件表示的内容包含画面，则获取其高度。 int? Height { get; } Property Value int? Size 获取此附件的文件大小。 int? Size { get; } Property Value int? Type 获取此附件的类型。 AttachmentType Type { get; } Property Value AttachmentType Url 获取此附件的 URL。 string Url { get; } Property Value string Width 如果此附件表示的内容包含画面，则获取其宽度。 int? Width { get; } Property Value int?"
  },
  "api/Kook.IAudioChannel.html": {
    "href": "api/Kook.IAudioChannel.html",
    "title": "Interface IAudioChannel | Kook.Net 文档",
    "keywords": "Interface IAudioChannel Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的音频频道。 public interface IAudioChannel : IChannel, IEntity<ulong> Inherited Members IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties AudioClient 获取在此音频频道上建立的语音客户端。 IAudioClient? AudioClient { get; } Property Value IAudioClient IsVoiceRegionOverwritten 获取此音频频道的语音区域设置是否覆写了服务器的语音区域设置。 bool? IsVoiceRegionOverwritten { get; } Property Value bool? ServerUrl 获取语音客户端连接到此语音频道的语音服务器 URL。 string? ServerUrl { get; } Property Value string VoiceRegion 获取此音频频道所设置的语音服务器区域。 string? VoiceRegion { get; } Property Value string Remarks warning 对于语音频道区域设置功能发布之前创建的语音频道，该属性可能为空。 See Also Region Methods ConnectAsync(bool, bool, string?) 连接到此音频频道。 Task<IAudioClient?> ConnectAsync(bool external = false, bool disconnect = true, string? password = null) Parameters external bool 指定语音客户端是否是由外部管理的。当设置为 true 时，当前方法不会尝试连接到语音频道。 disconnect bool 指定语音客户端在连接到新的语音频道之前是否应调用断开连接。 password string 指定客户端连接到设置了密码的语音频道时所使用的密码。 Returns Task<IAudioClient> 一个表示音频连接操作的异步任务。任务的结果是一个负责音频连接的 IAudioClient 实例；如果 external 为 true，则会返回 null。 DisconnectAsync() 断开与此音频频道的连接。 Task DisconnectAsync() Returns Task 一个表示音频断开连接操作的异步任务。"
  },
  "api/Kook.IBan.html": {
    "href": "api/Kook.IBan.html",
    "title": "Interface IBan | Kook.Net 文档",
    "keywords": "Interface IBan Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的封禁对象。 public interface IBan Properties CreatedAt 获取封禁的时间。 DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset Reason 获取封禁的原因。 string Reason { get; } Property Value string User 获取被封禁的用户。 IUser User { get; } Property Value IUser"
  },
  "api/Kook.ICard.html": {
    "href": "api/Kook.ICard.html",
    "title": "Interface ICard | Kook.Net 文档",
    "keywords": "Interface ICard Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的卡片。 public interface ICard Extension Methods CardExtensions.ToBuilder(ICard) CardJsonExtension.ToJsonString(ICard, bool) Properties ModuleCount 获取卡片中模块的数量。 int ModuleCount { get; } Property Value int Type 获取卡片的类型。 CardType Type { get; } Property Value CardType"
  },
  "api/Kook.ICardBuilder.html": {
    "href": "api/Kook.ICardBuilder.html",
    "title": "Interface ICardBuilder | Kook.Net 文档",
    "keywords": "Interface ICardBuilder Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的卡片构建器，用于构建一个 ICard。 public interface ICardBuilder Extension Methods CardJsonExtension.ToJsonString(ICardBuilder, bool) Properties Type 获取此构建器构建的卡片的类型。 CardType Type { get; } Property Value CardType Methods Build() 构建当前构建器为一个 ICard。 ICard Build() Returns ICard 由当前构建器表示的属性构建的 ICard 对象。"
  },
  "api/Kook.ICategoryChannel.html": {
    "href": "api/Kook.ICategoryChannel.html",
    "title": "Interface ICategoryChannel | Kook.Net 文档",
    "keywords": "Interface ICategoryChannel Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的分组频道。 public interface ICategoryChannel : IGuildChannel, IChannel, IEntity<ulong>, IDeletable Inherited Members IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.Position IGuildChannel.Type IGuildChannel.CreatorId IGuildChannel.RolePermissionOverwrites IGuildChannel.UserPermissionOverwrites IGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) IGuildChannel.GetCreatorAsync(CacheMode, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IChannel.Name IEntity<ulong>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel)"
  },
  "api/Kook.IChannel.html": {
    "href": "api/Kook.IChannel.html",
    "title": "Interface IChannel | Kook.Net 文档",
    "keywords": "Interface IChannel Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的频道。 public interface IChannel : IEntity<ulong> Inherited Members IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties Name 获取此频道的名称。 string Name { get; } Property Value string Methods GetUserAsync(ulong, CacheMode, RequestOptions?) 获取此频道中的用户。 Task<IUser?> GetUserAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters id ulong 要获取的用户的 ID。 mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IUser> 一个表示异步获取操作的任务。任务结果包含表示找到的用户；如果没有找到，则返回 null。 GetUsersAsync(CacheMode, RequestOptions?) 获取能够查看频道或当前在该频道中的所有用户。 IAsyncEnumerable<IReadOnlyCollection<IUser>> GetUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<IUser>> 分页的用户集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 此方法将尝试获取所有能够查看该频道或当前在该频道中的用户。此方法会根据 MaxUsersPerBatch 将请求拆分。换句话说，如果有 3000 名用户，而 MaxUsersPerBatch 的常量为 50，则请求将被拆分为 60 个单独请求，因此异步枚举器会异步枚举返回 60 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 60 个响应返回的集合，并将其合并为一个集合。"
  },
  "api/Kook.IDMChannel.html": {
    "href": "api/Kook.IDMChannel.html",
    "title": "Interface IDMChannel | Kook.Net 文档",
    "keywords": "Interface IDMChannel Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的私聊频道。 public interface IDMChannel : IMessageChannel, IPrivateChannel, IChannel, IEntity<ulong>, IEntity<Guid> Inherited Members IMessageChannel.SendFileAsync(string, string, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(Stream, string, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(FileAttachment, IQuote, IUser, RequestOptions) IMessageChannel.SendTextAsync(string, IQuote, IUser, RequestOptions) IMessageChannel.SendCardAsync(ICard, IQuote, IUser, RequestOptions) IMessageChannel.SendCardsAsync(IEnumerable<ICard>, IQuote, IUser, RequestOptions) IMessageChannel.GetMessageAsync(Guid, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(Guid, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions) IMessageChannel.DeleteMessageAsync(Guid, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) IMessageChannel.ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions) IPrivateChannel.Recipients IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties ChatCode 获取此私聊频道的聊天代码。 Guid ChatCode { get; } Property Value Guid Remarks 此属性的值与 Id 相同。 Id 获取此私聊频道的唯一标识符。 Guid Id { get; } Property Value Guid Remarks 此属性的值与 ChatCode 相同。 Recipient 获取参与到此私聊频道的另外一位用户。 IUser Recipient { get; } Property Value IUser Methods CloseAsync(RequestOptions?) 关闭此私聊频道，将其从您的频道列表中移除。 Task CloseAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步关闭操作的任务。 SendCardAsync(ICard, IQuote?, RequestOptions?) 发送卡片消息到此消息频道。 Task<Cacheable<IUserMessage, Guid>> SendCardAsync(ICard card, IQuote? quote = null, RequestOptions? options = null) Parameters card ICard 要发送的卡片。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendCardsAsync(IEnumerable<ICard>, IQuote?, RequestOptions?) 发送卡片消息到此消息频道。 Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(IEnumerable<ICard> cards, IQuote? quote = null, RequestOptions? options = null) Parameters cards IEnumerable<ICard> 要发送的卡片。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendFileAsync(FileAttachment, IQuote?, RequestOptions?) 发送文件到此消息频道。 Task<Cacheable<IUserMessage, Guid>> SendFileAsync(FileAttachment attachment, IQuote? quote = null, RequestOptions? options = null) Parameters attachment FileAttachment 文件的附件信息。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendFileAsync(Stream, string, AttachmentType, IQuote?, RequestOptions?) 发送文件到此消息频道。 Task<Cacheable<IUserMessage, Guid>> SendFileAsync(Stream stream, string filename, AttachmentType type = AttachmentType.File, IQuote? quote = null, RequestOptions? options = null) Parameters stream Stream 文件的流。 filename string 文件名。 type AttachmentType 文件的媒体类型。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendFileAsync(string, string?, AttachmentType, IQuote?, RequestOptions?) 发送文件到此消息频道。 Task<Cacheable<IUserMessage, Guid>> SendFileAsync(string path, string? filename = null, AttachmentType type = AttachmentType.File, IQuote? quote = null, RequestOptions? options = null) Parameters path string 文件的路径。 filename string 文件名。 type AttachmentType 文件的媒体类型。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendTextAsync(string, IQuote?, RequestOptions?) 发送文本消息到此消息频道。 Task<Cacheable<IUserMessage, Guid>> SendTextAsync(string text, IQuote? quote = null, RequestOptions? options = null) Parameters text string 要发送的文本。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。"
  },
  "api/Kook.IDeletable.html": {
    "href": "api/Kook.IDeletable.html",
    "title": "Interface IDeletable | Kook.Net 文档",
    "keywords": "Interface IDeletable Namespace Kook Assembly Kook.Net.Core.dll 表示实体对象可以被删除。 public interface IDeletable Methods DeleteAsync(RequestOptions?) 删除此对实体象及其所有子实体对象。 Task DeleteAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task"
  },
  "api/Kook.IElement.html": {
    "href": "api/Kook.IElement.html",
    "title": "Interface IElement | Kook.Net 文档",
    "keywords": "Interface IElement Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的用于模块内的元素。 public interface IElement Extension Methods CardExtensions.ToBuilder(IElement) Properties Type 获取元素的类型。 ElementType Type { get; } Property Value ElementType"
  },
  "api/Kook.IElementBuilder.html": {
    "href": "api/Kook.IElementBuilder.html",
    "title": "Interface IElementBuilder | Kook.Net 文档",
    "keywords": "Interface IElementBuilder Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的元素构建器，用于构建一个 IElement。 public interface IElementBuilder Properties Type 获取此构建器构建的元素的类型。 ElementType Type { get; } Property Value ElementType Methods Build() 构建当前构建器为一个 IElement。 IElement Build() Returns IElement 由当前构建器表示的属性构建的 IElement 对象。"
  },
  "api/Kook.IEmbed.html": {
    "href": "api/Kook.IEmbed.html",
    "title": "Interface IEmbed | Kook.Net 文档",
    "keywords": "Interface IEmbed Namespace Kook Assembly Kook.Net.Core.dll 表示一个消息内解析出的通用的嵌入式内容。 public interface IEmbed Properties Type 获取此嵌入式内容的类型。 EmbedType Type { get; } Property Value EmbedType See Also Embeds"
  },
  "api/Kook.IEmote.html": {
    "href": "api/Kook.IEmote.html",
    "title": "Interface IEmote | Kook.Net 文档",
    "keywords": "Interface IEmote Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的表情符号。 public interface IEmote : IEntity<string> Inherited Members IEntity<string>.Id Properties Name 获取此表情符号的显示名称或 Unicode 表示。 string Name { get; } Property Value string"
  },
  "api/Kook.IEntity-1.html": {
    "href": "api/Kook.IEntity-1.html",
    "title": "Interface IEntity<TId> | Kook.Net 文档",
    "keywords": "Interface IEntity<TId> Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的具有唯一标识符的实体。 public interface IEntity<TId> where TId : IEquatable<TId> Type Parameters TId 唯一标识符的类型。 Properties Id 获取此实体的唯一标识符。 TId Id { get; } Property Value TId"
  },
  "api/Kook.IFriendRequest.html": {
    "href": "api/Kook.IFriendRequest.html",
    "title": "Interface IFriendRequest | Kook.Net 文档",
    "keywords": "Interface IFriendRequest Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的好友请求。 public interface IFriendRequest : IEntity<ulong> Inherited Members IEntity<ulong>.Id Properties User 获取发送此好友请求的用户。 IUser User { get; } Property Value IUser Methods AcceptAsync(RequestOptions?) 接受此好友请求。 Task AcceptAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步接受操作的任务。 DeclineAsync(RequestOptions?) 拒绝此好友请求。 Task DeclineAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步拒绝操作的任务。"
  },
  "api/Kook.IGame.html": {
    "href": "api/Kook.IGame.html",
    "title": "Interface IGame | Kook.Net 文档",
    "keywords": "Interface IGame Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的游戏信息。 public interface IGame : IActivity, IEntity<int>, IDeletable Inherited Members IEntity<int>.Id IDeletable.DeleteAsync(RequestOptions) Properties GameType 获取游戏的类型。 GameType GameType { get; } Property Value GameType Icon 获取游戏图标的 URL。 string? Icon { get; } Property Value string Name 获取游戏的名称。 string Name { get; } Property Value string Options 获取游戏的额外信息。 string? Options { get; } Property Value string ProcessNames 获取游戏的进程名称。 IReadOnlyCollection<string> ProcessNames { get; } Property Value IReadOnlyCollection<string> ProductNames 获取游戏的产品名称。 IReadOnlyCollection<string> ProductNames { get; } Property Value IReadOnlyCollection<string> RequireAdminPrivilege 获取 KOOK 客户端是否需要管理员权限来检测游戏进程。 bool RequireAdminPrivilege { get; } Property Value bool Methods ModifyAsync(Action<GameProperties>, RequestOptions?) 修改此游戏信息的属性。 Task<IGame> ModifyAsync(Action<GameProperties> func, RequestOptions? options = null) Parameters func Action<GameProperties> 一个包含修改游戏属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IGame> 一个表示信息属性修改操作的异步任务。 Remarks 此方法使用指定的属性修改当前游戏信息。要查看可用的属性，请参考 GameProperties。"
  },
  "api/Kook.IGuild.html": {
    "href": "api/Kook.IGuild.html",
    "title": "Interface IGuild | Kook.Net 文档",
    "keywords": "Interface IGuild Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的服务器。 public interface IGuild : IEntity<ulong> Inherited Members IEntity<ulong>.Id Properties AudioClient 获取在此服务内的语音频道上建立的语音客户端。 [Obsolete(\"Use AudioClients instead.\")] IAudioClient? AudioClient { get; } Property Value IAudioClient See Also AudioClient AudioClients 获取在此服务内的语音频道上建立的所有语音客户端。 IReadOnlyDictionary<ulong, IAudioClient> AudioClients { get; } Property Value IReadOnlyDictionary<ulong, IAudioClient> See Also AudioClient Banner 获取此服务器横幅图像的 URL。 string Banner { get; } Property Value string BoostLevel 获取此服务器的服务器助力等级。 BoostLevel BoostLevel { get; } Property Value BoostLevel BoostSubscriptionCount 获取此服务器的服务器助力包的数量。 int BoostSubscriptionCount { get; } Property Value int BufferBoostSubscriptionCount 获取此服务器来自拥有 BUFF 会员的用的服务器助力包的数量。 int BufferBoostSubscriptionCount { get; } Property Value int DefaultChannelId 获取默认文字频道的 ID。 ulong? DefaultChannelId { get; } Property Value ulong? Emotes 获取此服务器的所有自定义表情。 IReadOnlyCollection<GuildEmote> Emotes { get; } Property Value IReadOnlyCollection<GuildEmote> EveryoneRole 获取此服务器中的 @全体成员 全体成员角色。 IRole EveryoneRole { get; } Property Value IRole Features 获取此服务器的所有特性。 GuildFeatures Features { get; } Property Value GuildFeatures Icon 获取此服务器图标的 URL。 string Icon { get; } Property Value string IsAvailable 确定此服务器实体是否已准备就绪以供用户代码访问。 bool IsAvailable { get; } Property Value bool Remarks note 此属性仅对基于网关连接的客户端有意义。 此属性为 true 表示，此服务器实体已完整缓存基础数据，并与网关同步。 缓存基础数据包括服务器基本信息、频道、角色、频道权限重写、当前用户在服务器内的昵称。 IsOpenEnabled 获取此服务器是否为公开服务器。 bool IsOpenEnabled { get; } Property Value bool MaxBitrate 获取此服务器中语音频道的最高比特率。 int MaxBitrate { get; } Property Value int Remarks 此限制取决于服务器的助力状态。 MaxUploadLimit 获取此服务器的文件上传限制，以字节为单位。 ulong MaxUploadLimit { get; } Property Value ulong Remarks 此限制取决于服务器的助力状态。 Name 获取此服务器的名称。 string Name { get; } Property Value string NotifyType 获取此服务器的默认通知类型。 NotifyType NotifyType { get; } Property Value NotifyType OpenId 获取此服务器的公开 ID。 uint? OpenId { get; } Property Value uint? Remarks 当 IsOpenEnabled 为 true 时，此属性应该返回一个有效的公开服务器 ID； 如果 IsOpenEnabled 为 false，则此属性应该返回 null。 OwnerId 获取此服务器所有者的用户 ID。 ulong OwnerId { get; } Property Value ulong RecommendInfo 获取此服务器的推荐信息。 IRecommendInfo? RecommendInfo { get; } Property Value IRecommendInfo Region 获取此服务器的默认语音服务器区域。 string Region { get; } Property Value string Remarks 语音服务器区域是指语音服务器所在的地理位置，各个语音服务器区域由一个唯一的字符串表示。 可用语音服务器区域参考列表： 区域 ID 区域名称 chengdu 西南(成都) beijing 华北(北京) shanghai 华东(上海) shenzhen 华南(深圳) hk 亚太(香港) vnga 国际专线(助力专享) 此列表仅供参考。 Roles 获取此服务器的所有角色。 IReadOnlyCollection<IRole> Roles { get; } Property Value IReadOnlyCollection<IRole> Topic 获取此服务器的介绍。 string Topic { get; } Property Value string WelcomeChannelId 获取欢迎通知频道的 ID。 ulong? WelcomeChannelId { get; } Property Value ulong? Methods AddBanAsync(IUser, int, string?, RequestOptions?) 封禁服务器内的用户。 Task AddBanAsync(IUser user, int pruneDays = 0, string? reason = null, RequestOptions? options = null) Parameters user IUser 要封禁的用户。 pruneDays int 要删除此服务器中来自此用户的最近几天的消息，范围为 0 至 7，0 表示不删除。 reason string 封禁原因。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步封禁操作的任务。 Exceptions ArgumentException pruneDays 超出了 0 至 7 的范围。 AddBanAsync(ulong, int, string?, RequestOptions?) 封禁服务器内的用户。 Task AddBanAsync(ulong userId, int pruneDays = 0, string? reason = null, RequestOptions? options = null) Parameters userId ulong 要封禁的用户的 ID。 pruneDays int 要删除此服务器中来自此用户的最近几天的消息，范围为 0 至 7，0 表示不删除。 reason string 封禁原因。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步封禁操作的任务。 Exceptions ArgumentException pruneDays 超出了 0 至 7 的范围。 CreateCategoryChannelAsync(string, Action<CreateCategoryChannelProperties>?, RequestOptions?) 在此服务器内创建一个新的分组频道。 Task<ICategoryChannel> CreateCategoryChannelAsync(string name, Action<CreateCategoryChannelProperties>? func = null, RequestOptions? options = null) Parameters name string 频道的名称。 func Action<CreateCategoryChannelProperties> 一个包含要应用到新创建频道的配置的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task<ICategoryChannel> 一个表示异步创建操作的任务。任务的结果包含新创建的分组频道。 CreateEmoteAsync(string, Image, RequestOptions?) 在此服务器内创建一个新的自定义表情。 Task<GuildEmote> CreateEmoteAsync(string name, Image image, RequestOptions? options = null) Parameters name string 新自定义表情的名称。 image Image 新自定义表情的图像信息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<GuildEmote> 一个表示异步创建操作的任务。任务的结果包含新创建的自定义表情。 CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions?) 创建一个到此服务器的新邀请。 Task<IInvite> CreateInviteAsync(InviteMaxAge maxAge = InviteMaxAge._604800, InviteMaxUses maxUses = InviteMaxUses.Unlimited, RequestOptions? options = null) Parameters maxAge InviteMaxAge 邀请链接的有效时长，NeverExpires 表示永不过期。 maxUses InviteMaxUses 邀请链接的可用人次，Unlimited 表示无限制。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IInvite> 一个表示异步创建操作的任务。任务的结果包含新创建的邀请链接的元数据，其中包含有关邀请链接的信息。 CreateInviteAsync(int?, int?, RequestOptions?) 创建一个到此服务器的新邀请。 Task<IInvite> CreateInviteAsync(int? maxAge = 604800, int? maxUses = null, RequestOptions? options = null) Parameters maxAge int? 邀请链接的有效时长，null 表示永不过期。 maxUses int? 邀请链接的可用人次，null 表示无限制。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IInvite> 一个表示异步创建操作的任务。任务的结果包含新创建的邀请链接的元数据，其中包含有关邀请链接的信息。 CreateRoleAsync(string, RequestOptions?) 在此服务器内创建一个新角色。 Task<IRole> CreateRoleAsync(string name, RequestOptions? options = null) Parameters name string 角色的名称。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IRole> 一个表示异步创建操作的任务。任务的结果包含新创建的角色。 CreateTextChannelAsync(string, Action<CreateTextChannelProperties>?, RequestOptions?) 在此服务器内创建一个新的文字频道。 Task<ITextChannel> CreateTextChannelAsync(string name, Action<CreateTextChannelProperties>? func = null, RequestOptions? options = null) Parameters name string 频道的名称。 func Action<CreateTextChannelProperties> 一个包含要应用到新创建频道的配置的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task<ITextChannel> 一个表示异步创建操作的任务。任务的结果包含新创建的文字频道。 CreateVoiceChannelAsync(string, Action<CreateVoiceChannelProperties>?, RequestOptions?) 在此服务器内创建一个新的语音频道。 Task<IVoiceChannel> CreateVoiceChannelAsync(string name, Action<CreateVoiceChannelProperties>? func = null, RequestOptions? options = null) Parameters name string 频道的名称。 func Action<CreateVoiceChannelProperties> 一个包含要应用到新创建频道的配置的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IVoiceChannel> 一个表示异步创建操作的任务。任务的结果包含新创建的语音频道。 DeleteEmoteAsync(GuildEmote, RequestOptions?) 删除此服务器内的现有自定义表情。 Task DeleteEmoteAsync(GuildEmote emote, RequestOptions? options = null) Parameters emote GuildEmote 要删除的自定义表情。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步删除操作的任务。 DownloadBoostSubscriptionsAsync(RequestOptions?) 下载此服务器内的所有服务器助力信息。 Task DownloadBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步下载操作的任务。 Remarks 此方法会通过网关下载此服务器内的所有服务器助力信息，并缓存它们。 要下载所有服务器助力信息，当前用户必须具有 ManageGuild 权限。 DownloadUsersAsync(RequestOptions?) 下载此服务器内的所有用户。 Task DownloadUsersAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步下载操作的任务。 Remarks 此方法会下载所有加入到此服务器内的用户，并缓存它们。 DownloadVoiceStatesAsync(RequestOptions?) 下载此服务器内的所有语音状态。 Task DownloadVoiceStatesAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步下载操作的任务。 Remarks 此方法会下载此服务器内的所有语音状态，并缓存它们。 GetActiveBoostSubscriptionsAsync(RequestOptions?) 获取此服务器所有生效中的服务器助力包。 Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> GetActiveBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> 一个表示异步获取操作的任务。任务的结果是所有为此服务器助力的用户及所应用的生效中的服务器助力包。 GetBadgeAsync(BadgeStyle, RequestOptions?) 获取与此服务器关联的徽章。 Task<Stream> GetBadgeAsync(BadgeStyle style = BadgeStyle.GuildName, RequestOptions? options = null) Parameters style BadgeStyle 要获取的徽章的样式。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Stream> 一个表示异步获取操作的任务。任务的结果包含与此服务器关联的徽章的流。 GetBanAsync(IUser, RequestOptions?) 获取指定用户在此服务器内当前的封禁信息。 Task<IBan?> GetBanAsync(IUser user, RequestOptions? options = null) Parameters user IUser 要获取封禁信息的用户。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IBan> 一个表示异步获取操作的任务。任务的结果包含该用户在此服务器内的封禁信息；如果该用户当前未被此服务器封禁，则返回 null。 GetBanAsync(ulong, RequestOptions?) 获取指定用户在此服务器内的封禁信息。 Task<IBan?> GetBanAsync(ulong userId, RequestOptions? options = null) Parameters userId ulong 要获取封禁信息的用户的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IBan> 一个表示异步获取操作的任务。任务的结果包含该用户在此服务器内的封禁信息；如果该用户未被此服务器封禁，或封禁已过期或解除，则返回 null。 GetBansAsync(RequestOptions?) 获取此服务器的所有封禁信息。 Task<IReadOnlyCollection<IBan>> GetBansAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IBan>> 一个表示异步获取操作的任务。任务的结果包含此服务器的所有封禁信息。 GetBoostSubscriptionsAsync(RequestOptions?) 所有此服务器的所有服务器助力包。 Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> GetBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> 一个表示异步获取操作的任务。任务的结果是所有为此服务器助力的用户及所应用的服务器助力包。 GetCategoryChannelsAsync(CacheMode, RequestOptions?) 获取此服务器中的所有分组频道。 Task<IReadOnlyCollection<ICategoryChannel>> GetCategoryChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<ICategoryChannel>> 一个表示异步获取操作的任务。任务的结果包含此服务器的所有分组频道。 GetChannelAsync(ulong, CacheMode, RequestOptions?) 获取此服务器内的频道。 Task<IGuildChannel?> GetChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters id ulong 要获取的频道的 ID。 mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IGuildChannel> 一个表示异步获取操作的任务。任务的结果包含与指定的 id 关联的频道；如果未找到，则返回 null。 GetChannelsAsync(CacheMode, RequestOptions?) 获取此服务器的所有频道。 Task<IReadOnlyCollection<IGuildChannel>> GetChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IGuildChannel>> 一个表示异步获取操作的任务。任务的结果包含此服务器的所有频道。 GetCurrentUserAsync(CacheMode, RequestOptions?) 获取此服务器内当前登录的用户。 Task<IGuildUser?> GetCurrentUserAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IGuildUser> 一个表示异步获取操作的任务。任务的结果包含此服务器内当前登录的用户。 GetDefaultChannelAsync(CacheMode, RequestOptions?) 获取此服务器的默认文字频道。 Task<ITextChannel?> GetDefaultChannelAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<ITextChannel> 一个表示异步获取操作的任务。任务的结果包含此服务器的默认文字频道；如果未找到，则返回 null。 GetEmoteAsync(string, RequestOptions?) 获取此服务器的指定自定义表情。 Task<GuildEmote?> GetEmoteAsync(string id, RequestOptions? options = null) Parameters id string 要获取的自定义表情的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<GuildEmote> 一个表示异步获取操作的任务。任务的结果包含与指定的 id 关联的自定义表情；如果未找到，则返回 null。 GetEmotesAsync(RequestOptions?) 获取此服务器的所有自定义表情。 Task<IReadOnlyCollection<GuildEmote>> GetEmotesAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<GuildEmote>> 一个表示异步获取操作的任务。任务的结果包含此服务器的所有自定义表情。 GetInvitesAsync(RequestOptions?) 获取此服务器内的所有邀请信息。 Task<IReadOnlyCollection<IInvite>> GetInvitesAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IInvite>> 一个表示异步获取操作的任务。任务的结果包含此服务器内的所有邀请信息。 GetOwnerAsync(CacheMode, RequestOptions?) 获取此服务器的所有者。 Task<IGuildUser?> GetOwnerAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IGuildUser> 一个表示异步获取操作的任务。任务的结果包含此服务器的所有者。 GetRole(uint) 获取此服务器内的角色。 IRole? GetRole(uint id) Parameters id uint 要获取的角色的 ID。 Returns IRole 一个表示异步获取操作的任务。任务的结果包含与指定的 id 关联的角色；如果未找到，则返回 null。 GetTextChannelAsync(ulong, CacheMode, RequestOptions?) 获取此服务器内指定具有文字聊天能力的频道。 Task<ITextChannel?> GetTextChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters id ulong 要获取的频道的 ID。 mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<ITextChannel> 一个表示异步获取操作的任务。任务的结果包含与指定的 id 关联的频道；如果未找到，则返回 null。 Remarks 语音频道也是一种文字频道，此方法本意用于获取具有文字聊天能力的频道。如果通过此方法传入的 ID 对应的频道是语音频道，那么也会返回对应的语音频道实体。 如需获取频道的实际类型，请参考 GetChannelType(IChannel)。 GetTextChannelsAsync(CacheMode, RequestOptions?) 获取此服务器中所有具有文字聊天能力的频道。 Task<IReadOnlyCollection<ITextChannel>> GetTextChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<ITextChannel>> 一个表示异步获取操作的任务。任务的结果包含此服务器的所有具有文字聊天能力的频道。 Remarks 语音频道也是一种文字频道，此方法本意用于获取所有具有文字聊天能力的频道，通过此方法获取到的文字频道列表中也包含了语音频道。 如需获取频道的实际类型，请参考 GetChannelType(IChannel)。 GetUserAsync(ulong, CacheMode, RequestOptions?) 获取此服务器内的用户。 Task<IGuildUser?> GetUserAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters id ulong 要获取的用户的 ID。 mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IGuildUser> 一个表示异步获取操作的任务。任务的结果包含与指定的 id 关联的用户；如果未找到，则返回 null。 Remarks 此方法获取加入到此服务器内的用户。 note 此方法在网关的实现中可能返回 null，因为在大型服务器中，用户列表的缓存可能不完整。 GetUsersAsync(CacheMode, RequestOptions?) 获取此服务器内的所有用户。 Task<IReadOnlyCollection<IGuildUser>> GetUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IGuildUser>> 一个表示异步获取操作的任务。任务的结果包含此服务器内的所有用户。 GetVoiceChannelAsync(ulong, CacheMode, RequestOptions?) 获取此服务器内指定具有语音聊天能力的频道。 Task<IVoiceChannel?> GetVoiceChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters id ulong 要获取的频道的 ID。 mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IVoiceChannel> 一个表示异步获取操作的任务。任务的结果包含与指定的 id 关联的频道；如果未找到，则返回 null。 GetVoiceChannelsAsync(CacheMode, RequestOptions?) 获取此服务器中所有具有语音聊天能力的频道。 Task<IReadOnlyCollection<IVoiceChannel>> GetVoiceChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IVoiceChannel>> 一个表示异步获取操作的任务。任务的结果包含此服务器的所有具有语音聊天能力的频道。 GetWelcomeChannelAsync(CacheMode, RequestOptions?) 获取此服务器的欢迎通知频道。 Task<ITextChannel?> GetWelcomeChannelAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<ITextChannel> 一个表示异步获取操作的任务。任务的结果包含此服务器的欢迎通知频道；如果未找到，则返回 null。 LeaveAsync(RequestOptions?) 退出此服务器。 Task LeaveAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步退出操作的任务。 ModifyEmoteNameAsync(GuildEmote, string, RequestOptions?) 修改此服务器内的现有自定义表情。 Task ModifyEmoteNameAsync(GuildEmote emote, string name, RequestOptions? options = null) Parameters emote GuildEmote 要修改的自定义表情。 name string 新的自定义表情名称。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。任务的结果包含修改后的自定义表情。 MoveUsersAsync(IEnumerable<IGuildUser>, IVoiceChannel, RequestOptions?) 移动用户到语音频道。 Task MoveUsersAsync(IEnumerable<IGuildUser> users, IVoiceChannel targetChannel, RequestOptions? options = null) Parameters users IEnumerable<IGuildUser> 要移动的用户。 targetChannel IVoiceChannel 要移动用户到的语音频道。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步移动操作的任务。 RemoveBanAsync(IUser, RequestOptions?) 解除服务器对用户的封禁。 Task RemoveBanAsync(IUser user, RequestOptions? options = null) Parameters user IUser 要解除封禁的用户。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步封禁解除操作的任务。 RemoveBanAsync(ulong, RequestOptions?) 解除服务器对用户的封禁。 Task RemoveBanAsync(ulong userId, RequestOptions? options = null) Parameters userId ulong 要解除封禁的用户的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步封禁解除操作的任务。 SearchUsersAsync(Action<SearchGuildMemberProperties>, int, CacheMode, RequestOptions?) 搜索加入到此服务器内匹配指定搜索条件的所有用户。 IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> SearchUsersAsync(Action<SearchGuildMemberProperties> func, int limit = 50, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters func Action<SearchGuildMemberProperties> 一个包含要搜索的用户属性及排序条件的委托。 limit int 搜索结果的最大数量。 mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> 一个表示异步获取操作的任务。任务的结果包含与提供的 func 中指定的属性匹配的服务器用户集合。 Remarks 此方法使用指定的属性搜索服务器用户。要查看可用的属性，请参考 SearchGuildMemberProperties。"
  },
  "api/Kook.IGuildChannel.html": {
    "href": "api/Kook.IGuildChannel.html",
    "title": "Interface IGuildChannel | Kook.Net 文档",
    "keywords": "Interface IGuildChannel Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的服务器频道。 public interface IGuildChannel : IChannel, IEntity<ulong>, IDeletable Inherited Members IChannel.Name IEntity<ulong>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties CreatorId 获取创建此频道的用户的 ID。 ulong? CreatorId { get; } Property Value ulong? Guild 获取此频道所属的服务器。 IGuild Guild { get; } Property Value IGuild GuildId 获取与此频道所属的服务器的 ID。 ulong GuildId { get; } Property Value ulong Position 获取此频道在服务器频道列表中的位置。 int? Position { get; } Property Value int? Remarks 更小的数值表示更靠近列表顶部的位置。 RolePermissionOverwrites 获取此频道的角色的权限重写集合。 IReadOnlyCollection<RolePermissionOverwrite> RolePermissionOverwrites { get; } Property Value IReadOnlyCollection<RolePermissionOverwrite> Type 获取此频道的类型。 ChannelType Type { get; } Property Value ChannelType UserPermissionOverwrites 获取此频道的用户的权限重写集合。 IReadOnlyCollection<UserPermissionOverwrite> UserPermissionOverwrites { get; } Property Value IReadOnlyCollection<UserPermissionOverwrite> Methods AddPermissionOverwriteAsync(IGuildUser, RequestOptions?) 添加给定用户的权限重写配置。 Task AddPermissionOverwriteAsync(IGuildUser user, RequestOptions? options = null) Parameters user IGuildUser 要添加权限重写配置的用户。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步添加频道内用户权限重写配置操作的任务。 AddPermissionOverwriteAsync(IRole, RequestOptions?) 添加给定角色的权限重写配置。 Task AddPermissionOverwriteAsync(IRole role, RequestOptions? options = null) Parameters role IRole 要添加权限重写配置的角色。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步添加频道内角色权限重写配置操作的任务。 GetCreatorAsync(CacheMode, RequestOptions?) 获取此频道的创建者。 Task<IUser?> GetCreatorAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IUser> 一个表示异步获取操作的任务。任务的结果为此频道的创建者；如果没有找到则为 null。 GetPermissionOverwrite(IRole) 获取给定角色的权限重写配置。 OverwritePermissions? GetPermissionOverwrite(IRole role) Parameters role IRole 要获取权限重写配置的角色。 Returns OverwritePermissions? 一个表示目标角色的权限重写配置；如果没有设置则为 null。 GetPermissionOverwrite(IUser) 获取给定用户的权限重写配置。 OverwritePermissions? GetPermissionOverwrite(IUser user) Parameters user IUser 要获取权限重写配置的用户。 Returns OverwritePermissions? 一个表示目标用户的权限重写配置；如果没有设置则为 null。 GetUserAsync(ulong, CacheMode, RequestOptions?) 获取此频道中的用户。 Task<IGuildUser?> GetUserAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters id ulong 要获取的用户的 ID。 mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IGuildUser> 一个表示异步获取操作的任务。任务的结果为此频道中的服务器用户；如果没有找到则为 null。 GetUsersAsync(CacheMode, RequestOptions?) 获取能够查看频道或当前在此频道中的所有用户。 IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> GetUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> 分页的服务器用户集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 此方法将尝试获取所有能够查看该频道或当前在该频道中的用户。此方法会根据 MaxUsersPerBatch 将请求拆分。换句话说，如果有 3000 名用户，而 MaxUsersPerBatch 的常量为 50，则请求将被拆分为 60 个单独请求，因此异步枚举器会异步枚举返回 60 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 60 个响应返回的集合，并将其合并为一个集合。 ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions?) 修改此服务器频道。 Task ModifyAsync(Action<ModifyGuildChannelProperties> func, RequestOptions? options = null) Parameters func Action<ModifyGuildChannelProperties> 一个包含修改服务器频道属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示服务器频道属性修改操作的异步任务。 See Also ModifyGuildChannelProperties ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions?) 更新给定用户的权限重写配置。 Task ModifyPermissionOverwriteAsync(IGuildUser user, Func<OverwritePermissions, OverwritePermissions> func, RequestOptions? options = null) Parameters user IGuildUser 要更新权限重写配置的用户。 func Func<OverwritePermissions, OverwritePermissions> 一个包含修改权限重写配置的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新频道内用户权限重写配置操作的任务。 ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions?) 更新给定角色的权限重写配置。 Task ModifyPermissionOverwriteAsync(IRole role, Func<OverwritePermissions, OverwritePermissions> func, RequestOptions? options = null) Parameters role IRole 要更新权限重写配置的角色。 func Func<OverwritePermissions, OverwritePermissions> 一个包含修改权限重写配置的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新频道内角色权限重写配置操作的任务。 RemovePermissionOverwriteAsync(IGuildUser, RequestOptions?) 对于给定的用户，如果存在权限重写配置，则移除它。 Task RemovePermissionOverwriteAsync(IGuildUser user, RequestOptions? options = null) Parameters user IGuildUser 要对其移除权限重写配置的用户。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步移除频道内用户权限重写配置操作的任务。 RemovePermissionOverwriteAsync(IRole, RequestOptions?) 对于给定的角色，如果存在权限重写配置，则移除它。 Task RemovePermissionOverwriteAsync(IRole role, RequestOptions? options = null) Parameters role IRole 要对其移除权限重写配置的角色。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步移除频道内角色权限重写配置操作的任务。"
  },
  "api/Kook.IGuildUser.html": {
    "href": "api/Kook.IGuildUser.html",
    "title": "Interface IGuildUser | Kook.Net 文档",
    "keywords": "Interface IGuildUser Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的服务器用户。 public interface IGuildUser : IUser, IEntity<ulong>, IMentionable, IPresence, IVoiceState Inherited Members IUser.Username IUser.IdentifyNumber IUser.IdentifyNumberValue IUser.IsBot IUser.IsBanned IUser.HasBuff IUser.HasAnnualBuff IUser.Avatar IUser.BuffAvatar IUser.Banner IUser.IsDenoiseEnabled IUser.UserTag IUser.Nameplates IUser.IsSystemUser IUser.CreateDMChannelAsync(RequestOptions) IUser.GetIntimacyAsync(RequestOptions) IUser.UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) IUser.BlockAsync(RequestOptions) IUser.UnblockAsync(RequestOptions) IUser.RequestFriendAsync(RequestOptions) IUser.RemoveFriendAsync(RequestOptions) IEntity<ulong>.Id IMentionable.PlainTextMention IMentionable.KMarkdownMention IPresence.IsOnline IPresence.ActiveClient IVoiceState.IsDeafened IVoiceState.IsMuted IVoiceState.VoiceChannel IVoiceState.VoiceChannels Extension Methods UserExtensions.BanAsync(IGuildUser, int, string?, RequestOptions?) Format.UsernameAndIdentifyNumber(IUser, bool) UserExtensions.SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendTextAsync(IUser, string, IQuote?, RequestOptions?) Properties ActiveAt 获取此用户在该服务器内的最近活跃时间。 DateTimeOffset? ActiveAt { get; } Property Value DateTimeOffset? Color 获取此用户的显示名称的颜色。 Color? Color { get; } Property Value Color? Remarks 如果此用户所拥有的最高角色的颜色类型为渐变色，则此属性返回的颜色是渐变色权益失效后的回退颜色。 warning 一个角色的颜色可能是纯色或渐变色，参见 ColorType。但由于服务器用户列表 API 及服务器用户详情 API 所返回的用户信息均不包含角色的颜色类型和渐变色信息，因此，如果用户的最高角色的颜色是渐变色， 则此属性的值可能是不正确的。如需获取该用户的准确的显示名称及颜色，请获取此用户的最高角色实体对象，访问其颜色类型及渐变色属性。 if (guildUser.RoleIds.Select(x => guildUser.Guild.GetRole(x)).OfType<IRole>().MinBy(x => x.Position) is { } topRole) { ColorType colorType = topRole.ColorType; GradientColor? gradientColor = topRole.GradientColor; } DisplayName 获取此用户的显示名称。 string DisplayName { get; } Property Value string Remarks 如果此用户在该服务器内设置了昵称，则此属性返回昵称；否则返回用户名。 Guild 获取此服务器用户所属的服务器。 IGuild Guild { get; } Property Value IGuild GuildId 获取此用户所属服务器的 ID。 ulong GuildId { get; } Property Value ulong GuildPermissions 获取此用户在该服务器内的权限。 GuildPermissions GuildPermissions { get; } Property Value GuildPermissions IsMobileVerified 获取此用户的手机号码是否已验证。 bool? IsMobileVerified { get; } Property Value bool? IsOwner 获取此用户是否为当前服务器的所有者。 bool? IsOwner { get; } Property Value bool? JoinedAt 获取此用户加入服务器的时间。 DateTimeOffset? JoinedAt { get; } Property Value DateTimeOffset? Nickname 获取此用户在该服务器内的昵称。 string? Nickname { get; } Property Value string Remarks 如果此用户在该服务器内没有设置昵称，则此属性返回 null。 RoleIds 获取此用户在该服务器内拥有的所有角色的 ID。 IReadOnlyCollection<uint> RoleIds { get; } Property Value IReadOnlyCollection<uint> Remarks 此属性返回此用户所拥有的所有角色的 ID。对于 WebSocket 服务器用户实体，Roles 属性可以用来获取所有角色对象；对于 REST 服务器用户实体，受限于 KOOK API，在服务器用户实体上仅能直接获取其所拥有的所有角色的 ID。 Methods AddRoleAsync(IRole, RequestOptions?) 在该服务器内授予此用户指定的角色。 Task AddRoleAsync(IRole role, RequestOptions? options = null) Parameters role IRole 要在该服务器内为此用户授予的角色。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步授予操作的任务。 AddRoleAsync(uint, RequestOptions?) 在该服务器内授予此用户指定的角色。 Task AddRoleAsync(uint roleId, RequestOptions? options = null) Parameters roleId uint 要在该服务器内为此用户授予的角色的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步授予操作的任务。 AddRolesAsync(IEnumerable<IRole>, RequestOptions?) 在该服务器内授予此用户指定的一些角色。 Task AddRolesAsync(IEnumerable<IRole> roles, RequestOptions? options = null) Parameters roles IEnumerable<IRole> 要在该服务器内为此用户授予的所有角色。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步授予操作的任务。 AddRolesAsync(IEnumerable<uint>, RequestOptions?) 在该服务器内授予此用户指定的一些角色。 Task AddRolesAsync(IEnumerable<uint> roleIds, RequestOptions? options = null) Parameters roleIds IEnumerable<uint> 要在该服务器内为此用户授予的所有角色的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步授予操作的任务。 DeafenAsync(RequestOptions?) 在该服务器内限制此用户的语音接收。 Task DeafenAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步静音操作的任务。 Remarks 此操作会使此用户无法在该服务器内的语音频道中接收来自其他用户的语音。 GetBoostSubscriptionsAsync(RequestOptions?) 获取此用户在该服务器内的所有服务器助力包订阅信息。 Task<IReadOnlyCollection<BoostSubscriptionMetadata>> GetBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<BoostSubscriptionMetadata>> 一个表示异步获取操作的任务。任务的结果包含此用户在该服务器内的所有服务器助力包订阅信息。 GetConnectedVoiceChannelsAsync(RequestOptions?) 获取此用户当前所连接到的所有语音频道。 Task<IReadOnlyCollection<IVoiceChannel>> GetConnectedVoiceChannelsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IVoiceChannel>> 一个表示异步获取操作的任务。任务的结果包含此用户当前所连接到的所有语音频道。 GetPermissions(IGuildChannel) 获取此用户在指定频道内所拥有的权限。 ChannelPermissions GetPermissions(IGuildChannel channel) Parameters channel IGuildChannel 要获取权限的频道。 Returns ChannelPermissions 一个表示此用户在指定频道内所拥有的频道权限的权限集。 KickAsync(RequestOptions?) 将此用户从此服务器中踢出。 Task KickAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步踢出操作的任务。 ModifyNicknameAsync(string?, RequestOptions?) 修改此用户在该服务器内的昵称。 Task ModifyNicknameAsync(string? name, RequestOptions? options = null) Parameters name string 要设置到此用户在该服务器内的新昵称。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 Remarks 此方法使用指定的属性修改当前用户在该服务器内的昵称。 如要清除此用户在该服务器内的昵称，请将 name 设置为 null。 warning 如果将昵称设置为与用户名相同，KOOK 也会将该用户在此服务器内的昵称清除，显示名称将跟随用户名，而不是固定为指定的昵称。 MuteAsync(RequestOptions?) 在该服务器内关闭此用户的语音输入。 Task MuteAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步关闭操作的任务。 Remarks 此操作会使此用户无法在该服务器内的语音频道中发言。 RemoveRoleAsync(IRole, RequestOptions?) 在该服务器内撤销此用户指定的角色。 Task RemoveRoleAsync(IRole role, RequestOptions? options = null) Parameters role IRole 要在该服务器内为此用户撤销的角色。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步撤销操作的任务。 RemoveRoleAsync(uint, RequestOptions?) 在该服务器内撤销此用户指定的角色。 Task RemoveRoleAsync(uint roleId, RequestOptions? options = null) Parameters roleId uint 要在该服务器内为此用户撤销的角色的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步撤销操作的任务。 RemoveRolesAsync(IEnumerable<IRole>, RequestOptions?) 在该服务器内撤销此用户指定的一些角色。 Task RemoveRolesAsync(IEnumerable<IRole> roles, RequestOptions? options = null) Parameters roles IEnumerable<IRole> 要在该服务器内为此用户撤销的所有角色。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步撤销操作的任务。 RemoveRolesAsync(IEnumerable<uint>, RequestOptions?) 在该服务器内撤销此用户指定的一些角色。 Task RemoveRolesAsync(IEnumerable<uint> roleIds, RequestOptions? options = null) Parameters roleIds IEnumerable<uint> 要在该服务器内为此用户撤销的所有角色的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步撤销操作的任务。 UndeafenAsync(RequestOptions?) 在该服务器内恢复此用户的语音接收。 Task UndeafenAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步恢复操作的任务。 Remarks 此操作会撤销由于服务器静音而导致的无法在语音频道中接收来自其他用户的语音的状态。 UnmuteAsync(RequestOptions?) 在该服务器内恢复此用户的语音输入。 Task UnmuteAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步恢复操作的任务。 Remarks 此操作会撤销由于服务器闭麦而导致的在语音频道中无法发言状态。"
  },
  "api/Kook.IIntimacy.html": {
    "href": "api/Kook.IIntimacy.html",
    "title": "Interface IIntimacy | Kook.Net 文档",
    "keywords": "Interface IIntimacy Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的亲密度。 public interface IIntimacy : IEntity<ulong> Inherited Members IEntity<ulong>.Id Remarks 由于亲密度的使用率较低，官方已隐藏亲密度的管理入口。如要管理亲密度，请访问 https://developer.kookapp.cn/bot/cohesion，在左上角切换至要管理其亲密度的应用。 Properties Images 获取此亲密度的所有形象图像。 IReadOnlyCollection<IntimacyImage> Images { get; } Property Value IReadOnlyCollection<IntimacyImage> LastModifyAt 获取此亲密度最近一次修改的时间。 DateTimeOffset? LastModifyAt { get; } Property Value DateTimeOffset? LastReadAt 获取用户最近一次查看此亲密度的时间。 DateTimeOffset LastReadAt { get; } Property Value DateTimeOffset Score 获取此亲密度的分数。 int Score { get; } Property Value int Remarks 亲密度的分数是一个整数，表示用户与此亲密度的亲密程度，最小值为 0，最大值为 2200。 亲密度以 10 颗颜色与样式不同的心形图案组成。 当亲密度分数不小于 1000 时，亲密度将显示为红色，其中，实心图案的数量为 (Score - 1000) / 100 的四舍五入值，最大值为 10，其余为空心图案。 当亲密度分数小于 1000 时，亲密度将显示为灰色，其中，心碎图案的数量为 10 - Score / 100 的四舍五入值，其余为空心图案。 SocialInfo 获取与此亲密度关联的社交信息。 string SocialInfo { get; } Property Value string User 获取与此亲密度相关的用户。 IUser User { get; } Property Value IUser Methods UpdateAsync(Action<IntimacyProperties>, RequestOptions?) 修改此用户的亲密度信息。 Task UpdateAsync(Action<IntimacyProperties> func, RequestOptions? options = null) Parameters func Action<IntimacyProperties> 一个包含修改此亲密度信息的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。"
  },
  "api/Kook.IInvite.html": {
    "href": "api/Kook.IInvite.html",
    "title": "Interface IInvite | Kook.Net 文档",
    "keywords": "Interface IInvite Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的邀请。 public interface IInvite : IEntity<uint>, IDeletable Inherited Members IEntity<uint>.Id IDeletable.DeleteAsync(RequestOptions) Properties Channel 获取此邀请链接指向的频道。 IChannel Channel { get; } Property Value IChannel ChannelId 获取此邀请链接指向的频道的 ID。 ulong? ChannelId { get; } Property Value ulong? ChannelName 获取此邀请链接指向的频道的名称。 string? ChannelName { get; } Property Value string ChannelType 获取此邀请链接指向的频道的类型。 ChannelType ChannelType { get; } Property Value ChannelType Code 获取此邀请的唯一代码。 string Code { get; } Property Value string CreatedAt 获取此邀请的创建时间。 DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset ExpiresAt 获取此邀请的过期时间。 DateTimeOffset? ExpiresAt { get; } Property Value DateTimeOffset? Remarks 如果此邀请永不过期，则此属性的值为 null。 Guild 获取此邀请链接指向的服务器。 IGuild Guild { get; } Property Value IGuild GuildId 获取此邀请链接指向的服务器的 ID。 ulong? GuildId { get; } Property Value ulong? GuildName 获取此邀请链接指向的服务器的名称。 string GuildName { get; } Property Value string InvitedUsersCount 获取已接受此邀请的用户数量。 int InvitedUsersCount { get; } Property Value int Inviter 获取创建此邀请的用户。 IUser Inviter { get; } Property Value IUser MaxAge 获取此邀请的有效时长。 TimeSpan? MaxAge { get; } Property Value TimeSpan? Remarks 如果此邀请永不过期，则此属性的值为 null。 MaxUses 获取此邀请的可用人次。 int? MaxUses { get; } Property Value int? Remarks 如果此邀请不限制可用人次，则此属性的值为 null。 RemainingUses 获取此邀请剩余可用次数。 int? RemainingUses { get; } Property Value int? Remarks 如果此邀请不限制可用人次，则此属性的值为 null。 Url 获取用于接受此邀请的 URL，URL 的路径中包含 Code 属性的值。 string Url { get; } Property Value string Uses 获取此邀请已被使用的次数。 int? Uses { get; } Property Value int?"
  },
  "api/Kook.IKookClient.html": {
    "href": "api/Kook.IKookClient.html",
    "title": "Interface IKookClient | Kook.Net 文档",
    "keywords": "Interface IKookClient Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的 KOOK 客户端。 public interface IKookClient : IDisposable Inherited Members IDisposable.Dispose() Properties ConnectionState 获取当前连接的状态。 ConnectionState ConnectionState { get; } Property Value ConnectionState CurrentUser 获取当前已登录的用户；如果没有用户登录，则为 null。 ISelfUser? CurrentUser { get; } Property Value ISelfUser TokenType 获取已登录用户的令牌类型。 TokenType TokenType { get; } Property Value TokenType Methods GetBlockedUsersAsync(CacheMode, RequestOptions?) 获取所有被当前用户屏蔽的用户。 Task<IReadOnlyCollection<IUser>> GetBlockedUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IUser>> 一个表示异步获取操作的任务。任务的结果是所有被当前用户屏蔽的用户。 GetChannelAsync(ulong, CacheMode, RequestOptions?) 获取一个频道。 Task<IChannel?> GetChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters id ulong 频道的 ID。 mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IChannel> 一个表示异步获取操作的任务。任务的结果是具有指定 ID 的频道；若指定 ID 的频道不存在，则为 null。 GetDMChannelAsync(Guid, CacheMode, RequestOptions?) 获取一个私聊频道。 Task<IDMChannel?> GetDMChannelAsync(Guid chatCode, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters chatCode Guid 私聊频道的聊天代码。 mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IDMChannel> 一个表示异步获取操作的任务。任务的结果是具有指定聊天代码的私聊频道；若指定聊天代码的私聊频道不存在，则为 null。 GetDMChannelsAsync(CacheMode, RequestOptions?) 获取当前会话中已创建的所有私聊频道。 Task<IReadOnlyCollection<IDMChannel>> GetDMChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IDMChannel>> 一个表示异步获取操作的任务。任务的结果是当前会话中已创建的所有私聊频道。 Remarks warning 此方法不会返回当前会话之外已创建的私聊频道。如果客户端刚刚启动，这可能会返回一个空集合。 GetFriendRequestsAsync(CacheMode, RequestOptions?) 获取所有好友请求。 Task<IReadOnlyCollection<IFriendRequest>> GetFriendRequestsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IFriendRequest>> 一个表示异步获取操作的任务。任务的结果是所有请求与当前用户成为好友的用户。 GetFriendsAsync(CacheMode, RequestOptions?) 获取所有好友。 Task<IReadOnlyCollection<IUser>> GetFriendsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IUser>> 一个表示异步获取操作的任务。任务的结果是所有与当前用户是好友的用户。 GetGuildAsync(ulong, CacheMode, RequestOptions?) 获取一个服务器。 Task<IGuild?> GetGuildAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters id ulong 服务器的 ID。 mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IGuild> 一个表示异步获取操作的任务。任务的结果是具有指定 ID 的服务器；若指定 ID 的服务器不存在，则为 null。 GetGuildsAsync(CacheMode, RequestOptions?) 获取当前用户所在的所有服务器。 Task<IReadOnlyCollection<IGuild>> GetGuildsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IGuild>> 一个表示异步获取操作的任务。任务的结果是当前用户所在的所有服务器。 GetUserAsync(string, string, RequestOptions?) 获取一个用户。 Task<IUser?> GetUserAsync(string username, string identifyNumber, RequestOptions? options = null) Parameters username string 用户的名称。 identifyNumber string 用户的识别号。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IUser> 一个表示异步获取操作的任务。任务的结果是具有指定的名称和识别号的用户；如果未找到该用户，则为 null。 GetUserAsync(ulong, CacheMode, RequestOptions?) 获取一个用户。 Task<IUser?> GetUserAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters id ulong 用户的 ID。 mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IUser> 一个表示异步获取操作的任务。任务的结果是具有指定 ID 的用户；若指定 ID 的用户不存在，则为 null。 LoginAsync(TokenType, string, bool) 登录到 KOOK API。 Task LoginAsync(TokenType tokenType, string token, bool validateToken = true) Parameters tokenType TokenType 要使用的令牌类型。 token string 要使用的令牌。 validateToken bool 是否验证令牌。 Returns Task 一个表示异步登录操作的任务。 Remarks 验证令牌的操作是通过 ValidateToken(TokenType, string) 方法完成的。 此方法用于向当前客户端设置后续 API 请求的身份验证信息，获取并设置当前所登录用户的信息。 LogoutAsync() 从 KOOK API 退出登录。 Task LogoutAsync() Returns Task 一个表示异步退出登录操作的任务。 Remarks 此方法用于清除当前客户端的身份验证信息及所缓存的当前所登录的用户信息。 StartAsync() 启动客户端与 KOOK 之间的连接。 Task StartAsync() Returns Task 一个表示异步启动操作的任务。 Remarks 当前方法会初始化客户端与 KOOK 之间的连接。 important 此方法会在调用后立即返回，因为它会在另一个线程上初始化连接。 StopAsync() 停止客户端与 KOOK 之间的连接。 Task StopAsync() Returns Task 一个表示异步停止操作的任务。"
  },
  "api/Kook.IMediaModule.html": {
    "href": "api/Kook.IMediaModule.html",
    "title": "Interface IMediaModule | Kook.Net 文档",
    "keywords": "Interface IMediaModule Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的媒体模块，可用于 ICard 中。 public interface IMediaModule : IModule Inherited Members IModule.Type Extension Methods CardExtensions.ToBuilder(IModule) Properties Source 获取与此模块关联的媒体的源。 string Source { get; } Property Value string Title 获取与此模块关联的媒体的标题。 string? Title { get; } Property Value string"
  },
  "api/Kook.IMentionable.html": {
    "href": "api/Kook.IMentionable.html",
    "title": "Interface IMentionable | Kook.Net 文档",
    "keywords": "Interface IMentionable Namespace Kook Assembly Kook.Net.Core.dll 表示一个可以被提及的实体对象。 public interface IMentionable Properties KMarkdownMention 返回一个用于在 KMarkdown 格式文本中提及此对象的格式化字符串。 string KMarkdownMention { get; } Property Value string PlainTextMention 获取一个用于在纯文本格式文本中提及此对象的格式化字符串。 string PlainTextMention { get; } Property Value string"
  },
  "api/Kook.IMessage.html": {
    "href": "api/Kook.IMessage.html",
    "title": "Interface IMessage | Kook.Net 文档",
    "keywords": "Interface IMessage Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的消息。 public interface IMessage : IEntity<Guid>, IDeletable Inherited Members IEntity<Guid>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods MessageExtensions.GetJumpUrl(IMessage) Properties Attachments 获取此消息中包含的所有附件。 IReadOnlyCollection<IAttachment> Attachments { get; } Property Value IReadOnlyCollection<IAttachment> Remarks 此属性也会包含从卡片中解析出来的附件信息。 Author 获取此消息的作者。 IUser Author { get; } Property Value IUser Cards 获取此消息中包含的所有卡片。 IReadOnlyCollection<ICard> Cards { get; } Property Value IReadOnlyCollection<ICard> Channel 获取此消息的来源频道。 IMessageChannel Channel { get; } Property Value IMessageChannel CleanContent 获取此消息的纯净内容。 string CleanContent { get; } Property Value string 此属性会对 Content 的内容进行两步操作： 使用 Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) 方法解析所有标签的完整名称； 使用 StripMarkdown(string) 清理所有 KMarkdown 格式字符。 See Also Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) StripMarkdown(string) Content 获取此消息的内容。 string Content { get; } Property Value string Remarks 如果消息不是文本消息，则此属性可能为空或包含原始代码。 EditedTimestamp 获取此消息最后一次编辑的时间。 DateTimeOffset? EditedTimestamp { get; } Property Value DateTimeOffset? Remarks 如果此消息从未被编辑过，则此属性的值为 null。 Embeds 获取此消息中包含的所有嵌入式内容。 IReadOnlyCollection<IEmbed> Embeds { get; } Property Value IReadOnlyCollection<IEmbed> IsPinned 获取此消息是否被置顶。 bool? IsPinned { get; } Property Value bool? MentionedEveryone 获取此消息是否提及了全体成员。 bool MentionedEveryone { get; } Property Value bool MentionedHere 获取此消息是否提及了在线成员。 bool MentionedHere { get; } Property Value bool MentionedRoleIds 获取此消息中提及的所有角色的 ID。 IReadOnlyCollection<uint> MentionedRoleIds { get; } Property Value IReadOnlyCollection<uint> MentionedUserIds 获取此消息中提及的所有用户的 ID。 IReadOnlyCollection<ulong> MentionedUserIds { get; } Property Value IReadOnlyCollection<ulong> Pokes 获取此消息中包含的所有 POKE。 IReadOnlyCollection<IPokeAction> Pokes { get; } Property Value IReadOnlyCollection<IPokeAction> Reactions 获取此消息中包含的所有回应。 IReadOnlyDictionary<IEmote, ReactionMetadata> Reactions { get; } Property Value IReadOnlyDictionary<IEmote, ReactionMetadata> Source 获取此消息的来源。 MessageSource Source { get; } Property Value MessageSource Tags 获取此消息中解析出的所有标签。 IReadOnlyCollection<ITag> Tags { get; } Property Value IReadOnlyCollection<ITag> Timestamp 获取此消息的发送时间。 DateTimeOffset Timestamp { get; } Property Value DateTimeOffset Type 获取此消息的类型。 MessageType Type { get; } Property Value MessageType Methods AddReactionAsync(IEmote, RequestOptions?) 向此消息添加一个回应。 Task AddReactionAsync(IEmote emote, RequestOptions? options = null) Parameters emote IEmote 要用于向此消息添加回应的表情符号。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示添加添加异步操作的任务。 GetReactionUsersAsync(IEmote, RequestOptions?) 获取所有对消息使用给定表情符号进行回应的用户。 Task<IReadOnlyCollection<IUser>> GetReactionUsersAsync(IEmote emote, RequestOptions? options = null) Parameters emote IEmote 要获取其回应用户的表情符号。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IUser>> 一个表示异步获取操作的任务。任务的结果包含对消息使用给定表情符号进行回应的所有用户。 RemoveReactionAsync(IEmote, IUser, RequestOptions?) 从此消息中移除一个回应。 Task RemoveReactionAsync(IEmote emote, IUser user, RequestOptions? options = null) Parameters emote IEmote 要从此消息移除的回应的表情符号。 user IUser 要移除其回应的用户。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步移除操作的任务。 RemoveReactionAsync(IEmote, ulong, RequestOptions?) 从此消息中移除一个回应。 Task RemoveReactionAsync(IEmote emote, ulong userId, RequestOptions? options = null) Parameters emote IEmote 要从此消息移除的回应的表情符号。 userId ulong 要移除其回应的用户的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步移除操作的任务。"
  },
  "api/Kook.IMessageChannel.html": {
    "href": "api/Kook.IMessageChannel.html",
    "title": "Interface IMessageChannel | Kook.Net 文档",
    "keywords": "Interface IMessageChannel Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的消息频道，可以用来发送和接收消息。 public interface IMessageChannel : IChannel, IEntity<ulong> Inherited Members IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Methods DeleteMessageAsync(IMessage, RequestOptions?) 删除一条消息. Task DeleteMessageAsync(IMessage message, RequestOptions? options = null) Parameters message IMessage 要删除的消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步删除操作的任务。 DeleteMessageAsync(Guid, RequestOptions?) 删除一条消息。 Task DeleteMessageAsync(Guid messageId, RequestOptions? options = null) Parameters messageId Guid 要删除的消息的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步删除操作的任务。 GetMessageAsync(Guid, CacheMode, RequestOptions?) 从此消息频道获取一条消息。 Task<IMessage?> GetMessageAsync(Guid id, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters id Guid 消息的 ID。 mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IMessage> 一个表示异步获取操作的任务。任务结果包含检索到的消息；如果未找到具有指定 ID 的消息，则返回 null。 GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions?) 获取此消息频道中的一些消息。 IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = 50, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters referenceMessage IMessage 要开始获取消息的参考位置的消息。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 GetMessagesAsync(Guid, Direction, int, CacheMode, RequestOptions?) 获取此消息频道中的一些消息。 IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = 50, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters referenceMessageId Guid 要开始获取消息的参考位置的消息的 ID。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 GetMessagesAsync(int, CacheMode, RequestOptions?) 获取此消息频道中的最新的一些消息。 IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(int limit = 50, CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters limit int 要获取的消息数量。 mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions?) 修改一条消息。 Task ModifyMessageAsync(Guid messageId, Action<MessageProperties> func, RequestOptions? options = null) Parameters messageId Guid 要修改的消息的 ID。 func Action<MessageProperties> 一个包含修改消息属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 See Also MessageProperties SendCardAsync(ICard, IQuote?, IUser?, RequestOptions?) 发送卡片消息到此消息频道。 Task<Cacheable<IUserMessage, Guid>> SendCardAsync(ICard card, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters card ICard 要发送的卡片。 quote IQuote 消息引用，用于回复消息。 ephemeralUser IUser 临时消息的接收者。如果设置为指定的用户，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendCardsAsync(IEnumerable<ICard>, IQuote?, IUser?, RequestOptions?) 发送卡片消息到此消息频道。 Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(IEnumerable<ICard> cards, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters cards IEnumerable<ICard> 要发送的卡片。 quote IQuote 消息引用，用于回复消息。 ephemeralUser IUser 临时消息的接收者。如果设置为指定的用户，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendFileAsync(FileAttachment, IQuote?, IUser?, RequestOptions?) 发送文件到此消息频道。 Task<Cacheable<IUserMessage, Guid>> SendFileAsync(FileAttachment attachment, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters attachment FileAttachment 文件的附件信息。 quote IQuote 消息引用，用于回复消息。 ephemeralUser IUser 临时消息的接收者。如果设置为指定的用户，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendFileAsync(Stream, string, AttachmentType, IQuote?, IUser?, RequestOptions?) 发送文件到此消息频道。 Task<Cacheable<IUserMessage, Guid>> SendFileAsync(Stream stream, string filename, AttachmentType type = AttachmentType.File, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters stream Stream 文件的流。 filename string 文件名。 type AttachmentType 文件的媒体类型。 quote IQuote 消息引用，用于回复消息。 ephemeralUser IUser 临时消息的接收者。如果设置为指定的用户，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendFileAsync(string, string?, AttachmentType, IQuote?, IUser?, RequestOptions?) 发送文件到此消息频道。 Task<Cacheable<IUserMessage, Guid>> SendFileAsync(string path, string? filename = null, AttachmentType type = AttachmentType.File, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters path string 文件的路径。 filename string 文件名。 type AttachmentType 文件的媒体类型。 quote IQuote 消息引用，用于回复消息。 ephemeralUser IUser 临时消息的接收者。如果设置为指定的用户，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendTextAsync(string, IQuote?, IUser?, RequestOptions?) 发送文本消息到此消息频道。 Task<Cacheable<IUserMessage, Guid>> SendTextAsync(string text, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters text string 要发送的文本。 quote IQuote 消息引用，用于回复消息。 ephemeralUser IUser 临时消息的接收者。如果设置为指定的用户，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。"
  },
  "api/Kook.IModule.html": {
    "href": "api/Kook.IModule.html",
    "title": "Interface IModule | Kook.Net 文档",
    "keywords": "Interface IModule Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的模块，可用于 ICard 中。 public interface IModule Extension Methods CardExtensions.ToBuilder(IModule) Properties Type 获取模块的类型。 ModuleType Type { get; } Property Value ModuleType"
  },
  "api/Kook.IModuleBuilder.html": {
    "href": "api/Kook.IModuleBuilder.html",
    "title": "Interface IModuleBuilder | Kook.Net 文档",
    "keywords": "Interface IModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的模块构建器，用于构建一个 IModule。 public interface IModuleBuilder Properties Type 获取此构建器构建的模块的类型。 ModuleType Type { get; } Property Value ModuleType Methods Build() 构建当前构建器为一个 IModule。 IModule Build() Returns IModule 由当前构建器表示的属性构建的 IModule 对象。"
  },
  "api/Kook.INestedChannel.html": {
    "href": "api/Kook.INestedChannel.html",
    "title": "Interface INestedChannel | Kook.Net 文档",
    "keywords": "Interface INestedChannel Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的嵌套频道，即可以嵌套在分组频道中的服务器频道。 public interface INestedChannel : IGuildChannel, IChannel, IEntity<ulong>, IDeletable Inherited Members IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.Position IGuildChannel.Type IGuildChannel.CreatorId IGuildChannel.RolePermissionOverwrites IGuildChannel.UserPermissionOverwrites IGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) IGuildChannel.GetCreatorAsync(CacheMode, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IChannel.Name IEntity<ulong>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties CategoryId 获取此嵌套频道在服务器频道列表中所属的分组频道的 ID。 ulong? CategoryId { get; } Property Value ulong? Remarks 如果当前频道不属于任何分组频道，则会返回 null。 IsPermissionSynced 指示此嵌套频道的权限是否与其所属分组频道同步。 bool? IsPermissionSynced { get; } Property Value bool? Remarks 如果权限同步，则此属性返回 true；如果权限不同步，则返回 false；如果无法确定权限是否同步，则返回 null。 Methods CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions?) 创建一个到此频道新邀请。 Task<IInvite> CreateInviteAsync(InviteMaxAge maxAge = InviteMaxAge._604800, InviteMaxUses maxUses = InviteMaxUses.Unlimited, RequestOptions? options = null) Parameters maxAge InviteMaxAge 邀请链接的有效时长，NeverExpires 表示永不过期。 maxUses InviteMaxUses 邀请链接的可用人次，Unlimited 表示无限制。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IInvite> 一个表示异步邀请创建操作的任务。任务的结果包含所创建的邀请链接的元数据，其中包含有关邀请链接的信息。 CreateInviteAsync(int?, int?, RequestOptions?) 创建一个到此频道新邀请。 Task<IInvite> CreateInviteAsync(int? maxAge = 604800, int? maxUses = null, RequestOptions? options = null) Parameters maxAge int? 邀请链接的有效时长，null 表示永不过期。 maxUses int? 邀请链接的可用人次，null 表示无限制。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IInvite> 一个表示异步邀请创建操作的任务。任务的结果包含所创建的邀请链接的元数据，其中包含有关邀请链接的信息。 GetCategoryAsync(CacheMode, RequestOptions?) 获取此频道的所属分组频道。 Task<ICategoryChannel?> GetCategoryAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<ICategoryChannel> 一个表示异步获取操作的任务。任务的结果包含此频道所属的分组频道，如果当前频道不属于任何分组频道，则为 null。 GetInvitesAsync(RequestOptions?) 获取此嵌套频道的所有邀请信息。 Task<IReadOnlyCollection<IInvite>> GetInvitesAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IInvite>> 一个表示异步获取操作的任务。任务的结果包含此频道中找到的所有邀请信息。 SyncPermissionsAsync(RequestOptions?) 同步此嵌套频道的权限配置与其所属分组频道一致，并保持同步。 Task SyncPermissionsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步频道权限同步操作的任务。"
  },
  "api/Kook.IPermissionOverwrite-1.html": {
    "href": "api/Kook.IPermissionOverwrite-1.html",
    "title": "Interface IPermissionOverwrite<TTarget> | Kook.Net 文档",
    "keywords": "Interface IPermissionOverwrite<TTarget> Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的频道权限重写设置。 public interface IPermissionOverwrite<TTarget> Type Parameters TTarget 权限重写设置所应用的目标的实体类型。 Properties Permissions 获取此重写的权限重写配置。 OverwritePermissions Permissions { get; } Property Value OverwritePermissions Target 获取此重写所应用的目标。 TTarget Target { get; } Property Value TTarget"
  },
  "api/Kook.IPoke.html": {
    "href": "api/Kook.IPoke.html",
    "title": "Interface IPoke | Kook.Net 文档",
    "keywords": "Interface IPoke Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的 POKE。 public interface IPoke : IEntity<uint> Inherited Members IEntity<uint>.Id Properties Categories 获取此 POKE 的分类。 IReadOnlyCollection<string> Categories { get; } Property Value IReadOnlyCollection<string> Cooldown 获取用户使用此 POKE 后的冷却时间。 TimeSpan Cooldown { get; } Property Value TimeSpan Description 获取 POKE 的描述。 string Description { get; } Property Value string Icon 获取此 POKE 的图标资源。 PokeIcon Icon { get; } Property Value PokeIcon Label 获取此 POKE 的标签。 PokeLabel Label { get; } Property Value PokeLabel MessageScenarios 获取此 POKE 如何在消息上下文中使用和显示。 IReadOnlyDictionary<string, string> MessageScenarios { get; } Property Value IReadOnlyDictionary<string, string> Name 获取 POKE 的名称。 string Name { get; } Property Value string Quality 获取此 POKE 的品质。 PokeQuality Quality { get; } Property Value PokeQuality Resource 获取此 POKE 的资源。 IPokeResource Resource { get; } Property Value IPokeResource"
  },
  "api/Kook.IPokeAction.html": {
    "href": "api/Kook.IPokeAction.html",
    "title": "Interface IPokeAction | Kook.Net 文档",
    "keywords": "Interface IPokeAction Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的 POKE 动作。 public interface IPokeAction Properties Operator 获取执行此动作的用户。 IUser Operator { get; } Property Value IUser Poke 获取此动作关联的 POKE。 IPoke Poke { get; } Property Value IPoke Targets 获取此动作的目标用户。 IReadOnlyCollection<IUser> Targets { get; } Property Value IReadOnlyCollection<IUser>"
  },
  "api/Kook.IPokeResource.html": {
    "href": "api/Kook.IPokeResource.html",
    "title": "Interface IPokeResource | Kook.Net 文档",
    "keywords": "Interface IPokeResource Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的 POKE 资源。 public interface IPokeResource Properties Type 获取此 POKE 资源的类型。 PokeResourceType Type { get; } Property Value PokeResourceType"
  },
  "api/Kook.IPresence.html": {
    "href": "api/Kook.IPresence.html",
    "title": "Interface IPresence | Kook.Net 文档",
    "keywords": "Interface IPresence Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的用户实时状态。 public interface IPresence Properties ActiveClient 获取此用于当前登录的客户端类型。 ClientType? ActiveClient { get; } Property Value ClientType? IsOnline 获取此用户当前是否在线。 bool? IsOnline { get; } Property Value bool?"
  },
  "api/Kook.IPrivateChannel.html": {
    "href": "api/Kook.IPrivateChannel.html",
    "title": "Interface IPrivateChannel | Kook.Net 文档",
    "keywords": "Interface IPrivateChannel Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的私有频道，只有特定的用户可以访问。 public interface IPrivateChannel : IChannel, IEntity<ulong> Inherited Members IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties Recipients 获取可以访问此频道的所有用户。 IReadOnlyCollection<IUser> Recipients { get; } Property Value IReadOnlyCollection<IUser>"
  },
  "api/Kook.IQuote.html": {
    "href": "api/Kook.IQuote.html",
    "title": "Interface IQuote | Kook.Net 文档",
    "keywords": "Interface IQuote Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的消息引用。 public interface IQuote Properties QuotedMessageId 获取此引用所指向的消息的 ID。 Guid QuotedMessageId { get; } Property Value Guid"
  },
  "api/Kook.IRateLimitInfo.html": {
    "href": "api/Kook.IRateLimitInfo.html",
    "title": "Interface IRateLimitInfo | Kook.Net 文档",
    "keywords": "Interface IRateLimitInfo Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的限速信息。 public interface IRateLimitInfo Properties Bucket 获取一个唯一的字符串，表示所遇到的限速桶（不包括路由路径中的主要参数）。 string? Bucket { get; } Property Value string Endpoint 获取此限速信息所属的终结点。 string Endpoint { get; } Property Value string IsGlobal 获取此限速信息是否为全局限速。 bool IsGlobal { get; } Property Value bool Lag 获取请求的延迟，用于支持计算限速重置的精确时间。 TimeSpan? Lag { get; } Property Value TimeSpan? Limit 获取在更新时限内可以进行的请求数量。 int? Limit { get; } Property Value int? Remaining 获取目前可以立即进行的请求数量。 int? Remaining { get; } Property Value int? ResetAfter 获取相对于此刻此限速重置的相对时间间隔。 TimeSpan? ResetAfter { get; } Property Value TimeSpan?"
  },
  "api/Kook.IReaction.html": {
    "href": "api/Kook.IReaction.html",
    "title": "Interface IReaction | Kook.Net 文档",
    "keywords": "Interface IReaction Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的回应。 public interface IReaction Properties Emote 获取此回应所使用的表情符号。 IEmote Emote { get; } Property Value IEmote"
  },
  "api/Kook.IRecommendInfo.html": {
    "href": "api/Kook.IRecommendInfo.html",
    "title": "Interface IRecommendInfo | Kook.Net 文档",
    "keywords": "Interface IRecommendInfo Namespace Kook Assembly Kook.Net.Core.dll 获取一个通用的推荐信息。 public interface IRecommendInfo Properties AuditStatus TODO: To be documented. int AuditStatus { get; } Property Value int Banner 获取推荐服务器的横幅图像的 URL。 string Banner { get; } Property Value string BoostLevel 获取推荐服务器的服务器助力等级。 BoostLevel BoostLevel { get; } Property Value BoostLevel Certifications 获取推荐服务器的所有认证。 IReadOnlyCollection<GuildCertification>? Certifications { get; } Property Value IReadOnlyCollection<GuildCertification> CustomId 获取推荐服务器的自定义 ID。 string CustomId { get; } Property Value string Remarks 自定义 ID 可能是一个自定义字符串，也可能是服务器靓号 ID，当无自定义 ID 时为空字符串。 DaysBeforeModify 获取推荐服务器要等待多少天才能再次修改推荐信息。 int DaysBeforeModify { get; } Property Value int DefaultChannelId 获取推荐服务器的默认文字频道 ID。 ulong DefaultChannelId { get; } Property Value ulong Description 获取推荐服务器的介绍。 string Description { get; } Property Value string Features 获取推荐服务器的特性。 GuildFeatures Features { get; } Property Value GuildFeatures GuildId 获取推荐服务器的 ID。 ulong GuildId { get; } Property Value ulong Icon 获取推荐服务器的图标 URL。 string Icon { get; } Property Value string IsOfficialPartner 获取推荐服务器是否是官方合作伙伴。 bool IsOfficialPartner { get; } Property Value bool Name 获取推荐服务器的名称。 string Name { get; } Property Value string OpenId 获取推荐服务器的公开 ID。 uint? OpenId { get; } Property Value uint? Sort TODO: To be documented. int Sort { get; } Property Value int Status 获取推荐服务器的状态。 int Status { get; } Property Value int Tag 获取推荐服务器的标签。 string Tag { get; } Property Value string"
  },
  "api/Kook.IRole.html": {
    "href": "api/Kook.IRole.html",
    "title": "Interface IRole | Kook.Net 文档",
    "keywords": "Interface IRole Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的可授予服务器用户的角色。 public interface IRole : IEntity<uint>, IDeletable, IMentionable, IComparable<IRole> Inherited Members IEntity<uint>.Id IDeletable.DeleteAsync(RequestOptions) IMentionable.PlainTextMention IMentionable.KMarkdownMention IComparable<IRole>.CompareTo(IRole) Properties Color 获取此角色的颜色。 Color Color { get; } Property Value Color Remarks 如果此用户所拥有的最高角色的颜色类型为渐变色，则此属性返回的颜色是渐变色权益失效后的回退颜色。 ColorType 获取此角色的颜色类型。 ColorType ColorType { get; } Property Value ColorType GradientColor 获取此角色的渐变色。 GradientColor? GradientColor { get; } Property Value GradientColor? Remarks 如果此角色的颜色类型 ColorType 不为 Gradient，则此属性会返回 null。 Guild 获取拥有此角色的服务器。 IGuild Guild { get; } Property Value IGuild IsHoisted 获取拥有此角色的用户是否在用户列表中与普通在线成员分开显示。 bool IsHoisted { get; } Property Value bool IsMentionable 获取是否允许任何人提及此角色。 bool IsMentionable { get; } Property Value bool Name 获取此角色的名称。 string Name { get; } Property Value string Permissions 获取此角色拥有的权限。 GuildPermissions Permissions { get; } Property Value GuildPermissions Position 获取此角色在服务器角色列表中的位置。 int Position { get; } Property Value int Remarks 更小的数值表示更靠近列表顶部的位置。 Type 获取此角色的类型。 RoleType Type { get; } Property Value RoleType Methods GetUsersAsync(CacheMode, RequestOptions?) 获取拥有此角色的用户的集合。 IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> GetUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> 分页的用户集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取拥有此角色的所有服务器用户。此方法会根据 MaxUsersPerBatch 将请求拆分。换句话说，如果存在 500 个用户拥有此角色，而 MaxUsersPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 ModifyAsync(Action<RoleProperties>, RequestOptions?) 修改此角色。 Task ModifyAsync(Action<RoleProperties> func, RequestOptions? options = null) Parameters func Action<RoleProperties> 一个包含修改角色属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 Remarks 此方法使用指定的属性修改当前角色信息。要查看可用的属性，请参考 RoleProperties。"
  },
  "api/Kook.ISelfUser.html": {
    "href": "api/Kook.ISelfUser.html",
    "title": "Interface ISelfUser | Kook.Net 文档",
    "keywords": "Interface ISelfUser Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的当前登录的用户信息。 public interface ISelfUser : IUser, IEntity<ulong>, IMentionable, IPresence Inherited Members IUser.Username IUser.IdentifyNumber IUser.IdentifyNumberValue IUser.IsBot IUser.IsBanned IUser.HasBuff IUser.HasAnnualBuff IUser.Avatar IUser.BuffAvatar IUser.Banner IUser.IsDenoiseEnabled IUser.UserTag IUser.Nameplates IUser.IsSystemUser IUser.CreateDMChannelAsync(RequestOptions) IUser.GetIntimacyAsync(RequestOptions) IUser.UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) IUser.BlockAsync(RequestOptions) IUser.UnblockAsync(RequestOptions) IUser.RequestFriendAsync(RequestOptions) IUser.RemoveFriendAsync(RequestOptions) IEntity<ulong>.Id IMentionable.PlainTextMention IMentionable.KMarkdownMention IPresence.IsOnline IPresence.ActiveClient Extension Methods Format.UsernameAndIdentifyNumber(IUser, bool) UserExtensions.SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendTextAsync(IUser, string, IQuote?, RequestOptions?) Properties InvitedCount 获取此用户的邀请用户数。 int InvitedCount { get; } Property Value int IsMobileVerified 获取此用户是否验证了手机号码。 bool IsMobileVerified { get; } Property Value bool Mobile 获取此用户的手机号码。 string? Mobile { get; } Property Value string MobilePrefix 获取此用户的手机号码前缀。 string? MobilePrefix { get; } Property Value string Methods StartPlayingAsync(IGame, RequestOptions?) 开始一个新的游戏活动。 Task StartPlayingAsync(IGame game, RequestOptions? options = null) Parameters game IGame 要显示的游戏。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步开始操作的任务。 Remarks 此操作会使当前用户的资料卡片上显式指定的游戏信息。 StartPlayingAsync(Music, RequestOptions?) 开始一个新的听音乐活动。 Task StartPlayingAsync(Music music, RequestOptions? options = null) Parameters music Music 要播放的音乐。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步开始操作的任务。 Remarks 此操作会使当前用户的资料卡片上显式指定的音乐信息。 StopPlayingAsync(ActivityType, RequestOptions?) 停止活动。 Task StopPlayingAsync(ActivityType type, RequestOptions? options = null) Parameters type ActivityType 要停止的活动类型。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步停止操作的任务。 Remarks 此操作会使当前用户的资料卡片上不再显示指定的活动信息。"
  },
  "api/Kook.ISystemMessage.html": {
    "href": "api/Kook.ISystemMessage.html",
    "title": "Interface ISystemMessage | Kook.Net 文档",
    "keywords": "Interface ISystemMessage Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的系统消息。 public interface ISystemMessage : IMessage, IEntity<Guid>, IDeletable Inherited Members IMessage.Type IMessage.Source IMessage.IsPinned IMessage.Channel IMessage.Author IMessage.Content IMessage.CleanContent IMessage.Timestamp IMessage.EditedTimestamp IMessage.MentionedUserIds IMessage.MentionedRoleIds IMessage.MentionedEveryone IMessage.MentionedHere IMessage.Tags IMessage.Attachments IMessage.Cards IMessage.Embeds IMessage.Pokes IMessage.Reactions IMessage.AddReactionAsync(IEmote, RequestOptions) IMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) IMessage.RemoveReactionAsync(IEmote, ulong, RequestOptions) IMessage.GetReactionUsersAsync(IEmote, RequestOptions) IEntity<Guid>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods MessageExtensions.GetJumpUrl(IMessage) Remarks warning KOOK 未统一规范系统消息类型，此接口并未在 IMessage 之上封装更多的实用功能。 Properties SystemMessageType 获取此系统消息的类型。 SystemMessageType SystemMessageType { get; } Property Value SystemMessageType"
  },
  "api/Kook.ITag.html": {
    "href": "api/Kook.ITag.html",
    "title": "Interface ITag | Kook.Net 文档",
    "keywords": "Interface ITag Namespace Kook Assembly Kook.Net.Core.dll 表示一个消息中通用的标签。 public interface ITag Extension Methods TagUtils.AsChannelTag(ITag) TagUtils.AsEmojiTag(ITag) TagUtils.AsRoleTag(ITag) TagUtils.AsUserTag(ITag) Properties Index 获取消息中标签的位置。 int Index { get; } Property Value int Key 获取标签的键。 object Key { get; } Property Value object Length 获取标签的长度。 int Length { get; } Property Value int Type 获取标签的类型。 TagType Type { get; } Property Value TagType Value 获取标签的值。 object? Value { get; } Property Value object Remarks 当 Type 为 HereMention，此属性应返回表示提及在线成员的实体，但这样的实体不存在。 为了便利，此属性返回与 EveryoneRole 相同的实体，但并不表示此标签提及的是所有人，而仍表示提及的是在线成员。"
  },
  "api/Kook.ITextChannel.html": {
    "href": "api/Kook.ITextChannel.html",
    "title": "Interface ITextChannel | Kook.Net 文档",
    "keywords": "Interface ITextChannel Namespace Kook Assembly Kook.Net.Core.dll 表示服务器中一个通用的具有文字聊天能力的频道，可以发送和接收消息。 public interface ITextChannel : INestedChannel, IGuildChannel, IDeletable, IMentionable, IMessageChannel, IChannel, IEntity<ulong> Inherited Members INestedChannel.CategoryId INestedChannel.IsPermissionSynced INestedChannel.SyncPermissionsAsync(RequestOptions) INestedChannel.GetCategoryAsync(CacheMode, RequestOptions) INestedChannel.GetInvitesAsync(RequestOptions) INestedChannel.CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions) INestedChannel.CreateInviteAsync(int?, int?, RequestOptions) IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.Position IGuildChannel.Type IGuildChannel.CreatorId IGuildChannel.RolePermissionOverwrites IGuildChannel.UserPermissionOverwrites IGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) IGuildChannel.GetCreatorAsync(CacheMode, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IDeletable.DeleteAsync(RequestOptions) IMentionable.PlainTextMention IMentionable.KMarkdownMention IMessageChannel.SendFileAsync(string, string, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(Stream, string, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(FileAttachment, IQuote, IUser, RequestOptions) IMessageChannel.SendTextAsync(string, IQuote, IUser, RequestOptions) IMessageChannel.SendCardAsync(ICard, IQuote, IUser, RequestOptions) IMessageChannel.SendCardsAsync(IEnumerable<ICard>, IQuote, IUser, RequestOptions) IMessageChannel.GetMessageAsync(Guid, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(Guid, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions) IMessageChannel.DeleteMessageAsync(Guid, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) IMessageChannel.ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions) IChannel.Name IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties SlowModeInterval 获取此频道当前设置的慢速模式延迟。 int SlowModeInterval { get; } Property Value int 一个 int，表示用户在可以发送另一条消息之前需要等待的时间（以秒为单位）；如果未启用，则为 0。 Remarks 拥有 ManageMessages 或 ManageChannels 权限的用户不受慢速模式延迟的限制。 Topic 获取此频道的说明。 string Topic { get; } Property Value string Methods GetPinnedMessagesAsync(RequestOptions?) 获取此频道中的所有置顶消息。 Task<IReadOnlyCollection<IMessage>> GetPinnedMessagesAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IMessage>> 一个表示异步获取操作的任务。任务的结果包含此频道中找到的所有置顶消息。 ModifyAsync(Action<ModifyTextChannelProperties>, RequestOptions?) 修改此频道有关文字聊天能力的属性。 Task ModifyAsync(Action<ModifyTextChannelProperties> func, RequestOptions? options = null) Parameters func Action<ModifyTextChannelProperties> 一个包含修改频道有关文字聊天能力的属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 See Also ModifyTextChannelProperties"
  },
  "api/Kook.IUpdateable.html": {
    "href": "api/Kook.IUpdateable.html",
    "title": "Interface IUpdateable | Kook.Net 文档",
    "keywords": "Interface IUpdateable Namespace Kook Assembly Kook.Net.Core.dll 表示一个可以被更新的实体对象。 public interface IUpdateable Remarks 更新操作表示的是从 KOOK REST API 获取最新数据并替换当前对象的属性，而非修改 KOOK 服务端的数据。 Methods UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 KOOK REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 KOOK 服务端的数据。"
  },
  "api/Kook.IUser.html": {
    "href": "api/Kook.IUser.html",
    "title": "Interface IUser | Kook.Net 文档",
    "keywords": "Interface IUser Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的用户。 public interface IUser : IEntity<ulong>, IMentionable, IPresence Inherited Members IEntity<ulong>.Id IMentionable.PlainTextMention IMentionable.KMarkdownMention IPresence.IsOnline IPresence.ActiveClient Extension Methods Format.UsernameAndIdentifyNumber(IUser, bool) UserExtensions.SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendTextAsync(IUser, string, IQuote?, RequestOptions?) Properties Avatar 获取此用户的头像图像的 URL。 string Avatar { get; } Property Value string Remarks 如果此用户为 BUFF 会员，且以 BUFF 会员权益设置了头像，则此属性返回的 URL 表示的是 BUFF 专属头像权益时效后的回退头像。 Banner 获取此用户的横幅图像的 URL。 string? Banner { get; } Property Value string Remarks 如果此用户不是 BUFF 会员，或未以 BUFF 会员权限设置横幅，则此属性返回 null。 BuffAvatar 获取此用户以 BUFF 会员权益设置的头像图像的 URL。 string? BuffAvatar { get; } Property Value string Remarks 如果此用户不是 BUFF 会员，或未以 BUFF 会员权限设置头像，则此属性返回 null。 HasAnnualBuff 获取此用户是否订阅了年度 BUFF 会员。 bool? HasAnnualBuff { get; } Property Value bool? Remarks 如果未知此用户是否订阅了年度 BUFF 会员，则此属性返回 null。 HasBuff 获取此用户是否订阅了 BUFF 会员。 bool? HasBuff { get; } Property Value bool? Remarks 如果未知此用户是否订阅了 BUFF 会员，则此属性返回 null。 IdentifyNumber 获取此用户的识别号。 string IdentifyNumber { get; } Property Value string IdentifyNumberValue 获取此用户识别号的数值形式。 ushort IdentifyNumberValue { get; } Property Value ushort IsBanned 获取此用户是否被封禁。 bool? IsBanned { get; } Property Value bool? Remarks 如果未知此用户是否被封禁，则此属性返回 null。 IsBot 获取此用户是否为 Bot。 bool? IsBot { get; } Property Value bool? Remarks 如果未知此用户是否为 Bot，则此属性返回 null。 IsDenoiseEnabled 获取此用户是否启用了降噪功能。 bool? IsDenoiseEnabled { get; } Property Value bool? Remarks 如果未知此用户是否启用了降噪功能，则此属性返回 null。 IsSystemUser 获取此用户是否为系统用户。 bool IsSystemUser { get; } Property Value bool Nameplates 获取此用户设置展示的所有铭牌。 IReadOnlyCollection<Nameplate> Nameplates { get; } Property Value IReadOnlyCollection<Nameplate> Remarks 用户设置的首个铭牌会展示在该用户聊天消息的用户名的右侧，用户设置的所有铭牌会展示在个人信息面板内的用户名下方。 UserTag 获取此用户的标签信息。 UserTag? UserTag { get; } Property Value UserTag Remarks 用户的标签会显示在服务器用户列表、私信列表、私信消息页、好友列表、个人信息面板、聊天消息的用户名的右侧。 如果此用户没有标签，或未知此用户的标签信息，则此属性返回 null。 Username 获取此用户的用户名。 string Username { get; } Property Value string Methods BlockAsync(RequestOptions?) 屏蔽此用户。 Task BlockAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步屏蔽操作的任务。 CreateDMChannelAsync(RequestOptions?) 创建一个用于与此用户收发私信的频道。 Task<IDMChannel> CreateDMChannelAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IDMChannel> 一个表示异步创建操作的任务。任务结果包含与此用户相关的私信频道。 GetIntimacyAsync(RequestOptions?) 获取与此用户的亲密度信息。 Task<IIntimacy> GetIntimacyAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IIntimacy> 一个表示异步获取操作的任务。任务结果包含与此用户的亲密度信息。 RemoveFriendAsync(RequestOptions?) 移除与此用户的好友关系。 Task RemoveFriendAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步移除操作的任务。 RequestFriendAsync(RequestOptions?) 向此用户发送好友请求。 Task RequestFriendAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步发送操作的任务。 UnblockAsync(RequestOptions?) 取消屏蔽此用户。 Task UnblockAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步取消操作的任务。 UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions?) 修改与此用户的亲密度信息。 Task UpdateIntimacyAsync(Action<IntimacyProperties> func, RequestOptions? options = null) Parameters func Action<IntimacyProperties> 一个用于修改亲密度信息的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 Remarks 此方法使用指定的属性修改与此用户的亲密度信息。要查看可用的属性，请参考 IntimacyProperties。"
  },
  "api/Kook.IUserMessage.html": {
    "href": "api/Kook.IUserMessage.html",
    "title": "Interface IUserMessage | Kook.Net 文档",
    "keywords": "Interface IUserMessage Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的用户消息。 public interface IUserMessage : IMessage, IEntity<Guid>, IDeletable Inherited Members IMessage.Type IMessage.Source IMessage.IsPinned IMessage.Channel IMessage.Author IMessage.Content IMessage.CleanContent IMessage.Timestamp IMessage.EditedTimestamp IMessage.MentionedUserIds IMessage.MentionedRoleIds IMessage.MentionedEveryone IMessage.MentionedHere IMessage.Tags IMessage.Attachments IMessage.Cards IMessage.Embeds IMessage.Pokes IMessage.Reactions IMessage.AddReactionAsync(IEmote, RequestOptions) IMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) IMessage.RemoveReactionAsync(IEmote, ulong, RequestOptions) IMessage.GetReactionUsersAsync(IEmote, RequestOptions) IEntity<Guid>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods MessageExtensions.GetJumpUrl(IMessage) MessageExtensions.HasCharPrefix(IUserMessage, char, ref int) MessageExtensions.HasMentionPrefix(IUserMessage, IUser, ref int) MessageExtensions.HasStringPrefix(IUserMessage, string, ref int, StringComparison) MessageExtensions.TryExpandCardContent(IUserMessage, out string?) MessageExtensions.AddReactionsAsync(IUserMessage, IEnumerable<IEmote>, RequestOptions?) MessageExtensions.MaybeTextImageMixedMessage(IUserMessage) MessageExtensions.RemoveReactionsAsync(IUserMessage, IUser, IEnumerable<IEmote>, RequestOptions?) MessageExtensions.ReplyCardAsync(IUserMessage, ICard, bool, bool, RequestOptions?) MessageExtensions.ReplyCardsAsync(IUserMessage, IEnumerable<ICard>, bool, bool, RequestOptions?) MessageExtensions.ReplyFileAsync(IUserMessage, FileAttachment, bool, bool, RequestOptions?) MessageExtensions.ReplyFileAsync(IUserMessage, Stream, string, AttachmentType, bool, bool, RequestOptions?) MessageExtensions.ReplyFileAsync(IUserMessage, string, string?, AttachmentType, bool, bool, RequestOptions?) MessageExtensions.ReplyTextAsync(IUserMessage, string, bool, bool, RequestOptions?) Properties Quote 获取消息的引用。 IQuote? Quote { get; } Property Value IQuote Methods ModifyAsync(Action<MessageProperties>, RequestOptions?) 修改此消息。 Task ModifyAsync(Action<MessageProperties> func, RequestOptions? options = null) Parameters func Action<MessageProperties> 一个包含修改消息属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 See Also MessageProperties Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) 转换消息文本中的提及与表情符号为可读形式。 string Resolve(TagHandling userHandling = TagHandling.Name, TagHandling channelHandling = TagHandling.Name, TagHandling roleHandling = TagHandling.Name, TagHandling everyoneHandling = TagHandling.Name, TagHandling emojiHandling = TagHandling.Name) Parameters userHandling TagHandling 指定用户提及标签的处理方式。 channelHandling TagHandling 指定频道提及标签的处理方式。 roleHandling TagHandling 指定角色提及标签的处理方式。 everyoneHandling TagHandling 指定全体成员与在线成员提及标签的处理方式。 emojiHandling TagHandling 指定表情符号标签的处理方式。 Returns string 转换后的消息文本。"
  },
  "api/Kook.IVoiceChannel.html": {
    "href": "api/Kook.IVoiceChannel.html",
    "title": "Interface IVoiceChannel | Kook.Net 文档",
    "keywords": "Interface IVoiceChannel Namespace Kook Assembly Kook.Net.Core.dll 表示服务器中的一个通用的具有语音聊天能力的频道。 public interface IVoiceChannel : ITextChannel, INestedChannel, IGuildChannel, IDeletable, IMentionable, IMessageChannel, IAudioChannel, IChannel, IEntity<ulong> Inherited Members ITextChannel.Topic ITextChannel.SlowModeInterval ITextChannel.ModifyAsync(Action<ModifyTextChannelProperties>, RequestOptions) ITextChannel.GetPinnedMessagesAsync(RequestOptions) INestedChannel.CategoryId INestedChannel.IsPermissionSynced INestedChannel.SyncPermissionsAsync(RequestOptions) INestedChannel.GetCategoryAsync(CacheMode, RequestOptions) INestedChannel.GetInvitesAsync(RequestOptions) INestedChannel.CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions) INestedChannel.CreateInviteAsync(int?, int?, RequestOptions) IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.Position IGuildChannel.Type IGuildChannel.CreatorId IGuildChannel.RolePermissionOverwrites IGuildChannel.UserPermissionOverwrites IGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) IGuildChannel.GetCreatorAsync(CacheMode, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IDeletable.DeleteAsync(RequestOptions) IMentionable.PlainTextMention IMentionable.KMarkdownMention IMessageChannel.SendFileAsync(string, string, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(Stream, string, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(FileAttachment, IQuote, IUser, RequestOptions) IMessageChannel.SendTextAsync(string, IQuote, IUser, RequestOptions) IMessageChannel.SendCardAsync(ICard, IQuote, IUser, RequestOptions) IMessageChannel.SendCardsAsync(IEnumerable<ICard>, IQuote, IUser, RequestOptions) IMessageChannel.GetMessageAsync(Guid, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(Guid, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions) IMessageChannel.DeleteMessageAsync(Guid, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) IMessageChannel.ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions) IAudioChannel.AudioClient IAudioChannel.IsVoiceRegionOverwritten IAudioChannel.VoiceRegion IAudioChannel.ServerUrl IAudioChannel.ConnectAsync(bool, bool, string) IAudioChannel.DisconnectAsync() IChannel.Name IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties HasPassword 获取此频道是否已被密码锁定。 bool HasPassword { get; } Property Value bool UserLimit 获取允许同时连接到此频道的最大用户数。 int UserLimit { get; } Property Value int 一个 int，表示允许同时连接到此频道的最大用户数；如果没有限制，则为 0。 VoiceQuality 获取要求此频道中的客户端使用的语音质量。 VoiceQuality? VoiceQuality { get; } Property Value VoiceQuality? Methods GetConnectedUsersAsync(CacheMode, RequestOptions?) 获取连接到此频道的用户。 Task<IReadOnlyCollection<IGuildUser>> GetConnectedUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IGuildUser>> 一个表示异步获取操作的任务。任务的结果包含连接到此频道的所有服务器用户。 ModifyAsync(Action<ModifyVoiceChannelProperties>, RequestOptions?) 修改此频道有关语音聊天能力的属性。 Task ModifyAsync(Action<ModifyVoiceChannelProperties> func, RequestOptions? options = null) Parameters func Action<ModifyVoiceChannelProperties> 一个包含修改有关语音聊天能力的属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 See Also ModifyVoiceChannelProperties"
  },
  "api/Kook.IVoiceState.html": {
    "href": "api/Kook.IVoiceState.html",
    "title": "Interface IVoiceState | Kook.Net 文档",
    "keywords": "Interface IVoiceState Namespace Kook Assembly Kook.Net.Core.dll 表示一个通用的用户语音连接状态。 public interface IVoiceState Properties IsDeafened 获取此用户是否被服务器静音。 bool? IsDeafened { get; } Property Value bool? Remarks 被服务器静音表示无法在语音频道内接收来自其他用户的语音。 IsMuted 获取此用户是否被服务器闭麦。 bool? IsMuted { get; } Property Value bool? Remarks 被服务器闭麦表示无法在语音频道内发言。 VoiceChannel 获取此用户当前所连接的语音频道。 IVoiceChannel? VoiceChannel { get; } Property Value IVoiceChannel VoiceChannels 获取此用户连接的所有语音频道。 IReadOnlyCollection<IVoiceChannel> VoiceChannels { get; } Property Value IReadOnlyCollection<IVoiceChannel>"
  },
  "api/Kook.Image.html": {
    "href": "api/Kook.Image.html",
    "title": "Struct Image | Kook.Net 文档",
    "keywords": "Struct Image Namespace Kook Assembly Kook.Net.Core.dll 表一个要上传到 KOOK 的图像。 public struct Image : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Image(Stream) 使用指定的流初始化一个 Image 解构的新实例。 public Image(Stream stream) Parameters stream Stream 图像的流。 Image(string) 通过文件路径创建图像。 public Image(string path) Parameters path string 文件的路径。 Remarks 此构造函数会使用 GetExtension(string) 获取文件的扩展名，然后将其直接传递给 OpenRead(string) 方法。 See Also GetExtension(string) OpenRead(string) Properties Stream 获取此图像的流。 public readonly Stream Stream { get; } Property Value Stream Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/Kook.ImageAnimationPokeResource.html": {
    "href": "api/Kook.ImageAnimationPokeResource.html",
    "title": "Struct ImageAnimationPokeResource | Kook.Net 文档",
    "keywords": "Struct ImageAnimationPokeResource Namespace Kook Assembly Kook.Net.Core.dll 表示一个 POKE 的图像与动画的资源。 public struct ImageAnimationPokeResource : IPokeResource Implements IPokeResource Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Duration 获取此动画以全屏的形式播放的持续时间。 public readonly TimeSpan Duration { get; } Property Value TimeSpan Height 获取图像动画的高度。 public readonly int Height { get; } Property Value int Percent // TODO: To be documented. public readonly decimal Percent { get; } Property Value decimal Resources 获取图像动画的资源。 public readonly IReadOnlyDictionary<string, string> Resources { get; } Property Value IReadOnlyDictionary<string, string> Type 获取此 POKE 资源的类型。 public PokeResourceType Type { get; } Property Value PokeResourceType Width 获取图像动画的宽度。 public readonly int Width { get; } Property Value int"
  },
  "api/Kook.ImageElement.html": {
    "href": "api/Kook.ImageElement.html",
    "title": "Class ImageElement | Kook.Net 文档",
    "keywords": "Class ImageElement Namespace Kook Assembly Kook.Net.Core.dll 图片元素，可用于 IModule 中。 public class ImageElement : IElement, IEquatable<ImageElement>, IEquatable<IElement> Inheritance object ImageElement Implements IElement IEquatable<ImageElement> IEquatable<IElement> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(IElement) CardExtensions.ToBuilder(ImageElement) Properties Alternative 获取图像的替代文本。 public string? Alternative { get; } Property Value string Circle 获取图片是否渲染为圆形。 public bool? Circle { get; } Property Value bool? Size 获取图像的大小。 public ImageSize? Size { get; } Property Value ImageSize? Source 获取图像的源。 public string Source { get; } Property Value string Type 获取元素的类型。 public ElementType Type { get; } Property Value ElementType Methods Equals(ImageElement?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ImageElement? imageElement) Parameters imageElement ImageElement Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ImageElement?, ImageElement?) 判定两个 ImageElement 是否相等。 public static bool operator ==(ImageElement? left, ImageElement? right) Parameters left ImageElement right ImageElement Returns bool 如果两个 ImageElement 相等，则为 true；否则为 false。 operator !=(ImageElement?, ImageElement?) 判定两个 ImageElement 是否不相等。 public static bool operator !=(ImageElement? left, ImageElement? right) Parameters left ImageElement right ImageElement Returns bool 如果两个 ImageElement 不相等，则为 true；否则为 false。"
  },
  "api/Kook.ImageElementBuilder.html": {
    "href": "api/Kook.ImageElementBuilder.html",
    "title": "Class ImageElementBuilder | Kook.Net 文档",
    "keywords": "Class ImageElementBuilder Namespace Kook Assembly Kook.Net.Core.dll 用来构建 ImageElement 元素的构建器。 public class ImageElementBuilder : IElementBuilder, IEquatable<ImageElementBuilder>, IEquatable<IElementBuilder> Inheritance object ImageElementBuilder Implements IElementBuilder IEquatable<ImageElementBuilder> IEquatable<IElementBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ImageElementBuilder() 初始化一个 ImageElementBuilder 类的新实例。 public ImageElementBuilder() ImageElementBuilder(string, string?, ImageSize?, bool) 初始化一个 ImageElementBuilder 类的新实例。 public ImageElementBuilder(string source, string? alternative = null, ImageSize? size = null, bool circle = false) Parameters source string 图片的源。 alternative string 图片的替代文本。 size ImageSize? 图片的大小。 circle bool 图片是否应渲染为圆形。 Remarks size 仅在 ContextModuleBuilder 中生效，ContainerModule 中不生效。 Fields MaxAlternativeLength 图片替代文本的最大长度。 public const int MaxAlternativeLength = 20 Field Value int Properties Alternative 获取或设置图片的替代文本。 public string? Alternative { get; set; } Property Value string Circle 获取或设置图片是否应渲染为圆形。 public bool? Circle { get; set; } Property Value bool? Size 获取或设置 ImageElementBuilder 的图片大小。 public ImageSize? Size { get; set; } Property Value ImageSize? Remarks 当前属性仅在 ContextModuleBuilder 中生效，ContainerModule 中不生效。 Source 获取或设置图片的源。 public string? Source { get; set; } Property Value string Remarks 图片的媒体类型仅支持 image/jpeg、image/gif、image/png。 Type 获取此构建器构建的元素的类型。 public ElementType Type { get; } Property Value ElementType Methods Build() 构建当前构建器为一个 ImageElement。 public ImageElement Build() Returns ImageElement 由当前构建器表示的属性构建的 ImageElement 对象。 Exceptions ArgumentNullException Source 为 null。 ArgumentException Source 为空字符串。 UriFormatException Source 不是有效的 URL。 ArgumentException Alternative 的长度超过了 MaxAlternativeLength。 Equals(ImageElementBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ImageElementBuilder? imageElementBuilder) Parameters imageElementBuilder ImageElementBuilder Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithAlternative(string?) 设置图片的替代文本，值将被设置到 Alternative 属性上。 public ImageElementBuilder WithAlternative(string? alternative) Parameters alternative string 图片的替代文本。 Returns ImageElementBuilder 当前构建器。 WithCircle(bool?) 设置图片是否应渲染为圆形，值将被设置到 Circle 属性上。 public ImageElementBuilder WithCircle(bool? circle) Parameters circle bool? 图片是否应渲染为圆形。 Returns ImageElementBuilder 当前构建器。 WithSize(ImageSize?) 设置图片的大小，值将被设置到 Size 属性上。 public ImageElementBuilder WithSize(ImageSize? size) Parameters size ImageSize? 图片的大小。 Returns ImageElementBuilder 当前构建器。 WithSource(string?) 设置图片的源，值将被设置到 Source 属性上。 public ImageElementBuilder WithSource(string? source) Parameters source string 图片的源。 Returns ImageElementBuilder 当前构建器。 Remarks 图片的媒体类型仅支持 image/jpeg、image/gif、image/png。 Operators operator ==(ImageElementBuilder?, ImageElementBuilder?) 判定两个 ImageElementBuilder 是否相等。 public static bool operator ==(ImageElementBuilder? left, ImageElementBuilder? right) Parameters left ImageElementBuilder right ImageElementBuilder Returns bool 如果两个 ImageElementBuilder 相等，则为 true；否则为 false。 implicit operator ImageElementBuilder(string) 使用指定的图片源初始化一个新的 ImageElementBuilder 类的实例。 public static implicit operator ImageElementBuilder(string source) Parameters source string 图片的源。 Returns ImageElementBuilder 一个使用指定的图片源初始化的 ImageElementBuilder 类的实例。 operator !=(ImageElementBuilder?, ImageElementBuilder?) 判定两个 ImageElementBuilder 是否不相等。 public static bool operator !=(ImageElementBuilder? left, ImageElementBuilder? right) Parameters left ImageElementBuilder right ImageElementBuilder Returns bool 如果两个 ImageElementBuilder 不相等，则为 true；否则为 false。"
  },
  "api/Kook.ImageEmbed.html": {
    "href": "api/Kook.ImageEmbed.html",
    "title": "Struct ImageEmbed | Kook.Net 文档",
    "keywords": "Struct ImageEmbed Namespace Kook Assembly Kook.Net.Core.dll 表示一个消息中解析出的图片嵌入式内容。 public struct ImageEmbed : IEmbed Implements IEmbed Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties OriginUrl 获取嵌入式内容所解析的原始 URL。 public readonly string OriginUrl { get; } Property Value string Type 获取此嵌入式内容的类型。 public EmbedType Type { get; } Property Value EmbedType Url 获取图像的 URL。 public readonly string Url { get; } Property Value string"
  },
  "api/Kook.ImageGroupModule.html": {
    "href": "api/Kook.ImageGroupModule.html",
    "title": "Class ImageGroupModule | Kook.Net 文档",
    "keywords": "Class ImageGroupModule Namespace Kook Assembly Kook.Net.Core.dll 图片组模块，可用于 ICard 中。 public class ImageGroupModule : IModule, IEquatable<ImageGroupModule>, IEquatable<IModule> Inheritance object ImageGroupModule Implements IModule IEquatable<ImageGroupModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(IModule) CardExtensions.ToBuilder(ImageGroupModule) Properties Elements 获取模块的元素。 public ImmutableArray<ImageElement> Elements { get; } Property Value ImmutableArray<ImageElement> Type 获取模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods Equals(ImageGroupModule?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ImageGroupModule? imageGroupModule) Parameters imageGroupModule ImageGroupModule Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ImageGroupModule, ImageGroupModule) 判定两个 ImageGroupModule 是否相等。 public static bool operator ==(ImageGroupModule left, ImageGroupModule right) Parameters left ImageGroupModule right ImageGroupModule Returns bool 如果两个 ImageGroupModule 相等，则为 true；否则为 false。 operator !=(ImageGroupModule, ImageGroupModule) 判定两个 ImageGroupModule 是否不相等。 public static bool operator !=(ImageGroupModule left, ImageGroupModule right) Parameters left ImageGroupModule right ImageGroupModule Returns bool 如果两个 ImageGroupModule 不相等，则为 true；否则为 false。"
  },
  "api/Kook.ImageGroupModuleBuilder.html": {
    "href": "api/Kook.ImageGroupModuleBuilder.html",
    "title": "Class ImageGroupModuleBuilder | Kook.Net 文档",
    "keywords": "Class ImageGroupModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll 用来构建 ImageGroupModule 模块的构建器。 public class ImageGroupModuleBuilder : IModuleBuilder, IEquatable<ImageGroupModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object ImageGroupModuleBuilder Implements IModuleBuilder IEquatable<ImageGroupModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ImageGroupModuleBuilder() 初始化一个 ImageGroupModuleBuilder 类的新实例。 public ImageGroupModuleBuilder() ImageGroupModuleBuilder(IList<ImageElementBuilder>) 初始化一个 ImageGroupModuleBuilder 类的新实例。 public ImageGroupModuleBuilder(IList<ImageElementBuilder> elements) Parameters elements IList<ImageElementBuilder> 图片组模块要包含的图片元素。 Fields MaxElementCount 元素的最大数量。 public const int MaxElementCount = 9 Field Value int Properties Elements 获取或设置图片组模块的图片元素。 public IList<ImageElementBuilder> Elements { get; set; } Property Value IList<ImageElementBuilder> Type 获取此构建器构建的模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods AddElement(ImageElementBuilder) 添加一个图片元素到图片组模块。 public ImageGroupModuleBuilder AddElement(ImageElementBuilder field) Parameters field ImageElementBuilder 要添加的图片元素。 Returns ImageGroupModuleBuilder 当前构建器。 AddElement(Action<ImageElementBuilder>) 添加一个图片元素到图片组模块。 public ImageGroupModuleBuilder AddElement(Action<ImageElementBuilder> action) Parameters action Action<ImageElementBuilder> 一个包含对要添加的新创建的图片元素进行配置的操作的委托。 Returns ImageGroupModuleBuilder 当前构建器。 Build() 构建当前构建器为一个 ImageGroupModule 对象。 public ImageGroupModule Build() Returns ImageGroupModule 由当前构建器表示的属性构建的 ImageGroupModule 对象。 Exceptions ArgumentNullException Elements 为 null。 ArgumentException Elements 为空列表。 ArgumentException Elements 的元素数量超过了 MaxElementCount。 Equals(ImageGroupModuleBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ImageGroupModuleBuilder? imageGroupModuleBuilder) Parameters imageGroupModuleBuilder ImageGroupModuleBuilder Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ImageGroupModuleBuilder?, ImageGroupModuleBuilder?) 判定两个 ImageGroupModuleBuilder 是否相等。 public static bool operator ==(ImageGroupModuleBuilder? left, ImageGroupModuleBuilder? right) Parameters left ImageGroupModuleBuilder right ImageGroupModuleBuilder Returns bool 如果两个 ImageGroupModuleBuilder 相等，则为 true；否则为 false。 operator !=(ImageGroupModuleBuilder?, ImageGroupModuleBuilder?) 判定两个 ImageGroupModuleBuilder 是否不相等。 public static bool operator !=(ImageGroupModuleBuilder? left, ImageGroupModuleBuilder? right) Parameters left ImageGroupModuleBuilder right ImageGroupModuleBuilder Returns bool 如果两个 ImageGroupModuleBuilder 不相等，则为 true；否则为 false。"
  },
  "api/Kook.ImageSize.html": {
    "href": "api/Kook.ImageSize.html",
    "title": "Enum ImageSize | Kook.Net 文档",
    "keywords": "Enum ImageSize Namespace Kook Assembly Kook.Net.Core.dll 表示 ImageElement 中的图像大小。 public enum ImageSize Fields Large = 1 图像以大尺寸显示。 Small = 0 图像以小尺寸显示。"
  },
  "api/Kook.IntimacyImage.html": {
    "href": "api/Kook.IntimacyImage.html",
    "title": "Class IntimacyImage | Kook.Net 文档",
    "keywords": "Class IntimacyImage Namespace Kook Assembly Kook.Net.Core.dll 表示一个亲密度的形象图像。 public class IntimacyImage Inheritance object IntimacyImage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id 获取此亲密度的形象图像的唯一标识符。 public uint Id { get; } Property Value uint Url 获取此亲密度的形象图像的 URL。 public string Url { get; } Property Value string"
  },
  "api/Kook.IntimacyProperties.html": {
    "href": "api/Kook.IntimacyProperties.html",
    "title": "Class IntimacyProperties | Kook.Net 文档",
    "keywords": "Class IntimacyProperties Namespace Kook Assembly Kook.Net.Core.dll 提供用于修改 IIntimacy 的属性。 public class IntimacyProperties Inheritance object IntimacyProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ImageId 获取或设置要设置到此亲密度的形象图像的 ID。 public uint? ImageId { get; set; } Property Value uint? Remarks 如果此值为 null，则不会修改此亲密度的形象图像。 Score 获取或设置要设置到此亲密度的分数。 public int? Score { get; set; } Property Value int? Remarks 如果此值为 null，则不会修改此亲密度的分数。 See Also Score SocialInfo 获取或设置要设置到此亲密度的社交信息。 public string? SocialInfo { get; set; } Property Value string Remarks 社交信息是展示给用户的文本块。 如果此值为 null，则不会修改此亲密度的社交信息。 See Also UpdateAsync(Action<IntimacyProperties>, RequestOptions)"
  },
  "api/Kook.InviteMaxAge.html": {
    "href": "api/Kook.InviteMaxAge.html",
    "title": "Enum InviteMaxAge | Kook.Net 文档",
    "keywords": "Enum InviteMaxAge Namespace Kook Assembly Kook.Net.Core.dll 表示一个邀请的最大有效时长。 public enum InviteMaxAge Fields NeverExpires = 0 永不过期。 _1800 = 1800 此邀请在创建后半小时（1800 秒）后过期。 _21600 = 21600 此邀请在创建后 6 小时（21600 秒）后过期。 _3600 = 3600 此邀请在创建后一小时（3600 秒）后过期。 _43200 = 43200 此邀请在创建后半天（43200 秒）后过期。 _604800 = 604800 此邀请在创建后一周（604800 秒）后过期。 _86400 = 86400 此邀请在创建后一天（86400 秒）后过期。"
  },
  "api/Kook.InviteMaxUses.html": {
    "href": "api/Kook.InviteMaxUses.html",
    "title": "Enum InviteMaxUses | Kook.Net 文档",
    "keywords": "Enum InviteMaxUses Namespace Kook Assembly Kook.Net.Core.dll 表示一个邀请的可用人次。 public enum InviteMaxUses Fields Unlimited = -1 此邀请不限制可用人次。 _1 = 1 此邀请最多只能使用一次。 _10 = 10 此邀请最多只能使用 10 次。 _100 = 100 此邀请最多只能使用 100 次。 _25 = 25 此邀请最多只能使用 25 次。 _5 = 5 此邀请最多只能使用 5 次。 _50 = 50 此邀请最多只能使用 50 次。"
  },
  "api/Kook.InviteModule.html": {
    "href": "api/Kook.InviteModule.html",
    "title": "Class InviteModule | Kook.Net 文档",
    "keywords": "Class InviteModule Namespace Kook Assembly Kook.Net.Core.dll 3 邀请模块，可用于 ICard 中。 public class InviteModule : IModule, IEquatable<InviteModule>, IEquatable<IModule> Inheritance object InviteModule Implements IModule IEquatable<InviteModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(IModule) CardExtensions.ToBuilder(InviteModule) Properties Code 获取邀请代码。 public string? Code { get; } Property Value string Type 获取模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods Equals(InviteModule?) Indicates whether the current object is equal to another object of the same type. public bool Equals(InviteModule? inviteModule) Parameters inviteModule InviteModule Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(InviteModule, InviteModule) 判定两个 InviteModule 是否相等。 public static bool operator ==(InviteModule left, InviteModule right) Parameters left InviteModule right InviteModule Returns bool 如果两个 InviteModule 相等，则为 true；否则为 false。 operator !=(InviteModule, InviteModule) 判定两个 InviteModule 是否不相等。 public static bool operator !=(InviteModule left, InviteModule right) Parameters left InviteModule right InviteModule Returns bool 如果两个 InviteModule 不相等，则为 true；否则为 false。"
  },
  "api/Kook.InviteModuleBuilder.html": {
    "href": "api/Kook.InviteModuleBuilder.html",
    "title": "Class InviteModuleBuilder | Kook.Net 文档",
    "keywords": "Class InviteModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll 用来构建 InviteModule 模块的构建器。 public class InviteModuleBuilder : IModuleBuilder, IEquatable<InviteModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object InviteModuleBuilder Implements IModuleBuilder IEquatable<InviteModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InviteModuleBuilder() 初始化一个 InviteModuleBuilder 类的新实例。 public InviteModuleBuilder() InviteModuleBuilder(string) 初始化一个 InviteModuleBuilder 类的新实例。 public InviteModuleBuilder(string code) Parameters code string 邀请代码。 Properties Code 获取或设置邀请代码。 public string? Code { get; set; } Property Value string Type 获取此构建器构建的模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods Build() 构建当前构建器为一个 InviteModule 对象。 public InviteModule Build() Returns InviteModule 由当前构建器表示的属性构建的 InviteModule 对象。 Exceptions ArgumentNullException Code 为 null。 ArgumentException Code 为空或空白字符串。 Equals(InviteModuleBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(InviteModuleBuilder? inviteModuleBuilder) Parameters inviteModuleBuilder InviteModuleBuilder Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithCode(string) 设置邀请代码。 public InviteModuleBuilder WithCode(string code) Parameters code string 邀请代码。 Returns InviteModuleBuilder 当前构建器。 Operators operator ==(InviteModuleBuilder?, InviteModuleBuilder?) 判定两个 InviteModuleBuilder 是否相等。 public static bool operator ==(InviteModuleBuilder? left, InviteModuleBuilder? right) Parameters left InviteModuleBuilder right InviteModuleBuilder Returns bool 如果两个 InviteModuleBuilder 相等，则为 true；否则为 false。 implicit operator InviteModuleBuilder(string) 初始化一个 InviteModuleBuilder 类的新实例。 public static implicit operator InviteModuleBuilder(string code) Parameters code string 邀请代码。 Returns InviteModuleBuilder operator !=(InviteModuleBuilder?, InviteModuleBuilder?) 判定两个 InviteModuleBuilder 是否不相等。 public static bool operator !=(InviteModuleBuilder? left, InviteModuleBuilder? right) Parameters left InviteModuleBuilder right InviteModuleBuilder Returns bool 如果两个 InviteModuleBuilder 不相等，则为 true；否则为 false。"
  },
  "api/Kook.KMarkdownElement.html": {
    "href": "api/Kook.KMarkdownElement.html",
    "title": "Class KMarkdownElement | Kook.Net 文档",
    "keywords": "Class KMarkdownElement Namespace Kook Assembly Kook.Net.Core.dll KMarkdown 文本元素，可用于 IModule 中。 public class KMarkdownElement : IElement, IEquatable<KMarkdownElement>, IEquatable<IElement> Inheritance object KMarkdownElement Implements IElement IEquatable<KMarkdownElement> IEquatable<IElement> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CardExtensions.ToBuilder(IElement) CardExtensions.ToBuilder(KMarkdownElement) Properties Content 获取 KMarkdown 文本的内容。 public string Content { get; } Property Value string Type 获取元素的类型。 public ElementType Type { get; } Property Value ElementType Methods Equals(KMarkdownElement?) Indicates whether the current object is equal to another object of the same type. public bool Equals(KMarkdownElement? kMarkdownElement) Parameters kMarkdownElement KMarkdownElement Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators operator ==(KMarkdownElement?, KMarkdownElement?) 判定两个 KMarkdownElement 是否相等。 public static bool operator ==(KMarkdownElement? left, KMarkdownElement? right) Parameters left KMarkdownElement right KMarkdownElement Returns bool 如果两个 KMarkdownElement 相等，则为 true；否则为 false。 operator !=(KMarkdownElement?, KMarkdownElement?) 判定两个 KMarkdownElement 是否不相等。 public static bool operator !=(KMarkdownElement? left, KMarkdownElement? right) Parameters left KMarkdownElement right KMarkdownElement Returns bool 如果两个 KMarkdownElement 不相等，则为 true；否则为 false。"
  },
  "api/Kook.KMarkdownElementBuilder.html": {
    "href": "api/Kook.KMarkdownElementBuilder.html",
    "title": "Class KMarkdownElementBuilder | Kook.Net 文档",
    "keywords": "Class KMarkdownElementBuilder Namespace Kook Assembly Kook.Net.Core.dll 用来构建 KMarkdownElement 元素的构建器。 public class KMarkdownElementBuilder : IElementBuilder, IEquatable<KMarkdownElementBuilder>, IEquatable<IElementBuilder> Inheritance object KMarkdownElementBuilder Implements IElementBuilder IEquatable<KMarkdownElementBuilder> IEquatable<IElementBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors KMarkdownElementBuilder() 初始化一个 KMarkdownElementBuilder 类的新实例。 public KMarkdownElementBuilder() KMarkdownElementBuilder(string?) 初始化一个 KMarkdownElementBuilder 类的新实例。 public KMarkdownElementBuilder(string? content) Parameters content string KMarkdown 文本内容。 Fields MaxKMarkdownLength KMarkdown 文本的最大长度。 public const int MaxKMarkdownLength = 5000 Field Value int Properties Content 获取或设置 KMarkdown 的文本内容。 public string? Content { get; set; } Property Value string Type 获取此构建器构建的元素的类型。 public ElementType Type { get; } Property Value ElementType Methods Build() 构建当前构建器为一个 KMarkdownElement。 public KMarkdownElement Build() Returns KMarkdownElement 由当前构建器表示的属性构建的 KMarkdownElement 对象。 Exceptions ArgumentNullException Content 为 null。 ArgumentException Content 的长度超过了 MaxKMarkdownLength。 Equals(KMarkdownElementBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(KMarkdownElementBuilder? kMarkdownElementBuilder) Parameters kMarkdownElementBuilder KMarkdownElementBuilder Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithContent(string) 设置 KMarkdown 的文本内容，值将被设置到 Content 属性上。 public KMarkdownElementBuilder WithContent(string content) Parameters content string KMarkdown 的文本内容。 Returns KMarkdownElementBuilder 当前构建器。 Operators operator ==(KMarkdownElementBuilder?, KMarkdownElementBuilder?) 判定两个 KMarkdownElementBuilder 是否相等。 public static bool operator ==(KMarkdownElementBuilder? left, KMarkdownElementBuilder? right) Parameters left KMarkdownElementBuilder right KMarkdownElementBuilder Returns bool 如果两个 KMarkdownElementBuilder 相等，则为 true；否则为 false。 implicit operator KMarkdownElementBuilder(string) 使用指定的 KMarkdown 文本内容初始化一个新的 KMarkdownElementBuilder 类的实例。 public static implicit operator KMarkdownElementBuilder(string content) Parameters content string KMarkdown 文本内容。 Returns KMarkdownElementBuilder 一个使用指定的 KMarkdown 文本内容初始化的 KMarkdownElementBuilder 类的实例。 operator !=(KMarkdownElementBuilder?, KMarkdownElementBuilder?) 判定两个 KMarkdownElementBuilder 是否不相等。 public static bool operator !=(KMarkdownElementBuilder? left, KMarkdownElementBuilder? right) Parameters left KMarkdownElementBuilder right KMarkdownElementBuilder Returns bool 如果两个 KMarkdownElementBuilder 不相等，则为 true；否则为 false。"
  },
  "api/Kook.KookComparers.html": {
    "href": "api/Kook.KookComparers.html",
    "title": "Class KookComparers | Kook.Net 文档",
    "keywords": "Class KookComparers Namespace Kook Assembly Kook.Net.Core.dll 用于比较 KOOK 各种实体的 IEqualityComparer<T>。 public static class KookComparers Inheritance object KookComparers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelComparer 获取一个用于比较 IChannel 的 IEqualityComparer<T>。 public static IEqualityComparer<IChannel> ChannelComparer { get; } Property Value IEqualityComparer<IChannel> GuildComparer 获取一个用于比较 IGuild 的 IEqualityComparer<T>。 public static IEqualityComparer<IGuild> GuildComparer { get; } Property Value IEqualityComparer<IGuild> MessageComparer 获取一个用于比较 IMessage 的 IEqualityComparer<T>。 public static IEqualityComparer<IMessage> MessageComparer { get; } Property Value IEqualityComparer<IMessage> RoleComparer 获取一个用于比较 IRole 的 IEqualityComparer<T>。 public static IEqualityComparer<IRole> RoleComparer { get; } Property Value IEqualityComparer<IRole> UserComparer 获取一个用于比较 IUser 的 IEqualityComparer<T>。 public static IEqualityComparer<IUser> UserComparer { get; } Property Value IEqualityComparer<IUser>"
  },
  "api/Kook.KookConfig.html": {
    "href": "api/Kook.KookConfig.html",
    "title": "Class KookConfig | Kook.Net 文档",
    "keywords": "Class KookConfig Namespace Kook Assembly Kook.Net.Core.dll 定义 Kook.Net 各种基础行为的配置项。 public class KookConfig Inheritance object KookConfig Derived KookRestConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields APIUrl 获取 KOOK API 请求的根 URL。 public static readonly string APIUrl Field Value string APIVersion 获取 Kook.Net 使用的 API 版本。 public const int APIVersion = 3 Field Value int BoostPackDuration 获取每个服务器助力包的生效时长。 public static readonly TimeSpan BoostPackDuration Field Value TimeSpan DefaultRequestTimeout 获取请求超时的默认时间，以毫秒为单位。 public const int DefaultRequestTimeout = 6000 Field Value int MaxIntimacyScore 获取 KOOK 允许的亲密度分数的最大值。 public const int MaxIntimacyScore = 2200 Field Value int MaxItemsPerBatchByDefault 获取默认情况下每个请求允许获取的最大项目数。 public const int MaxItemsPerBatchByDefault = 100 Field Value int MaxMessageSize 获取 KOOK 允许的消息的最大长度。 public const int MaxMessageSize = 20000 Field Value int MaxMessagesPerBatch 获取 KOOK 允许在每个请求中获取的最大消息数。 public const int MaxMessagesPerBatch = 50 Field Value int MaxNicknameSize 获取 KOOK 允许的服务器用户昵称的最大长度。 public const int MaxNicknameSize = 64 Field Value int MaxUsersPerBatch 获取 KOOK 允许在每个请求中获取的最大用户数。 public const int MaxUsersPerBatch = 50 Field Value int MinIntimacyScore 获取 KOOK 允许的亲密度分数的最小值。 public const int MinIntimacyScore = 0 Field Value int MinNicknameSize 获取 KOOK 允许的服务器用户昵称的最小长度。 public const int MinNicknameSize = 2 Field Value int VoiceAPIVersion 获取 Kook.Net 用于与 KOOK 的语音服务器通信的 API 版本。 public const int VoiceAPIVersion = 1 Field Value int Properties AcceptLanguage 获取 Kook.Net 在每个请求所设置 Accept-Language 请求标头，用于指定所偏好的自然语言和区域设置。 public string AcceptLanguage { get; set; } Property Value string Remarks 可用值包括： zh-CN - 简体中文（中国） en-US - 英语（美国） 要查阅最新支持的语言列表，请参阅 https://developer.kookapp.cn/doc/reference 中的 i18N 节。 DefaultRatelimitCallback 获取或设置默认的速率限制回调委托。 public Func<IRateLimitInfo, Task>? DefaultRatelimitCallback { get; set; } Property Value Func<IRateLimitInfo, Task> Remarks 若同时设置了此属性与用于各个请求的 RatelimitCallback，则将优先使用 RatelimitCallback。 DefaultRetryMode 获取或设置请求在出现错误时的默认行为。 public RetryMode DefaultRetryMode { get; set; } Property Value RetryMode See Also RetryMode FormatUsersInBidirectionalUnicode 获取或设置 Rest 或 Socket 用户实体的 ToString() 重写方法在格式化字符串时是否考虑双向 Unicode。 public bool FormatUsersInBidirectionalUnicode { get; set; } Property Value bool Remarks 默认地，为了支持双向用户名，格式化字符串中的用户名部分的左侧会插入左到右嵌入控制字符（\\u2066）， 右侧会插入嵌入段结束控制字符（\\u2069），以确保在显示时不会出现混乱。如需禁用此行为，请将此属性设置为 false。 See Also UsernameAndIdentifyNumber(IUser, bool) LogLevel 获取或设置将发送到日志事件的最低日志严重性级别。 public LogSeverity LogLevel { get; set; } Property Value LogSeverity UserAgent 获取 Kook.Net 在每个请求中使用的用户代理。 public static string UserAgent { get; } Property Value string Version 获取 Kook.Net 的版本，包括构建号。 public static string Version { get; } Property Value string 一个包含详细版本信息的字符串，包括构建号；当无法获取构建版本时为 Unknown。"
  },
  "api/Kook.KookError.html": {
    "href": "api/Kook.KookError.html",
    "title": "Struct KookError | Kook.Net 文档",
    "keywords": "Struct KookError Namespace Kook Assembly Kook.Net.Core.dll 表示一个 KOOK 返回的错误。 public struct KookError Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Code 获取错误的代码。 public readonly string Code { get; } Property Value string Message 获取错误的原因。 public readonly string Message { get; } Property Value string"
  },
  "api/Kook.KookErrorCode.html": {
    "href": "api/Kook.KookErrorCode.html",
    "title": "Enum KookErrorCode | Kook.Net 文档",
    "keywords": "Enum KookErrorCode Namespace Kook Assembly Kook.Net.Core.dll 表示从 KOOK 接收到的错误代码。 public enum KookErrorCode Fields GeneralError = 40000 操作失败，原因未通过错误代码明确。 HasBeenFriend = 42007 操作由于用户已是当前用户的好友而失败。 InvalidAuthenticationToken = 40101 操作由于无效的身份验证令牌而失败。 InvalidSequenceNumber = 40108 KOOK 网关由于无效的消息序号而要求重新连接。 MissingArgument = 40100 操作由于缺少参数而失败。 MissingPermissions = 40300 操作由于缺少权限而失败。 MissingResumeArgument = 40106 KOOK 网关由于缺少恢复参数而要求重新连接。 RequestEntityTooLarge = 40014 操作由于请求传输的实体过大而失败。 RequestFriendTooFast = 42008 操作由于当前用户请求与用户成为好友过于频繁而失败。 SessionExpired = 40107 KOOK 网关由于会话已过期而要求重新连接。 Success = 0 操作成功。 TokenExpired = 40103 操作由于身份验证令牌已过期而失败。 TokenVerificationFailed = 40102 操作由于身份验证令牌验证失败而失败。"
  },
  "api/Kook.KookJsonError.html": {
    "href": "api/Kook.KookJsonError.html",
    "title": "Struct KookJsonError | Kook.Net 文档",
    "keywords": "Struct KookJsonError Namespace Kook Assembly Kook.Net.Core.dll 表示一个在执行 API 请求后从 KOOK 接收到的 JSON 数据中解析出的错误。 public struct KookJsonError Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Errors 获取与路径上的特定属性关联的错误集合。 public readonly IReadOnlyCollection<KookError> Errors { get; } Property Value IReadOnlyCollection<KookError> Path 获取错误的 JSON 路径。 public readonly string Path { get; } Property Value string"
  },
  "api/Kook.LinkEmbed.html": {
    "href": "api/Kook.LinkEmbed.html",
    "title": "Struct LinkEmbed | Kook.Net 文档",
    "keywords": "Struct LinkEmbed Namespace Kook Assembly Kook.Net.Core.dll 表示一个消息中解析出的网址链接嵌入式内容。 public struct LinkEmbed : IEmbed Implements IEmbed Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Color 获取卡片左侧边的颜色。 public readonly Color Color { get; } Property Value Color Description 获取链接指向的网站的页面描述。 public readonly string Description { get; } Property Value string Image 获取预览图像的 URL。 public readonly string Image { get; } Property Value string SiteName 获取链接指向的网站的名称。 public readonly string SiteName { get; } Property Value string Title 获取链接指向的网站的页面标题。 public readonly string Title { get; } Property Value string Type 获取此嵌入式内容的类型。 public EmbedType Type { get; } Property Value EmbedType Url 获取网址链接的 URL。 public readonly string Url { get; } Property Value string"
  },
  "api/Kook.LogMessage.html": {
    "href": "api/Kook.LogMessage.html",
    "title": "Struct LogMessage | Kook.Net 文档",
    "keywords": "Struct LogMessage Namespace Kook Assembly Kook.Net.Core.dll 表示一个用于记录日志的消息对象。 public readonly struct LogMessage Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors LogMessage(LogSeverity, string, string?, Exception?) 使用事件的严重性、来源、消息和可选的异常初始化 LogMessage 结构。 public LogMessage(LogSeverity severity, string source, string? message, Exception? exception = null) Parameters severity LogSeverity 事件的严重性。 source string 事件的来源。 message string 事件的消息。 exception Exception 事件的异常。 Properties Exception 获取此日志条目的异常。 public Exception? Exception { get; } Property Value Exception Message 获取日志记录的消息。 public string? Message { get; } Property Value string Severity 获取日志记录的严重性。 public LogSeverity Severity { get; } Property Value LogSeverity Source 获取日志记录的来源。 public string Source { get; } Property Value string Methods ToString() 返回此日志消息的字符串表示形式。 public override string ToString() Returns string 此日志消息的字符串表示形式。 ToString(StringBuilder?, bool, bool, DateTimeKind, int?) 返回此日志消息的字符串表示形式。 public string ToString(StringBuilder? builder = null, bool fullException = true, bool prependTimestamp = true, DateTimeKind timestampKind = DateTimeKind.Local, int? padSource = 11) Parameters builder StringBuilder 要使用的字符串构建器。 fullException bool 是否在字符串中包含完整的异常信息。 prependTimestamp bool 是否在字符串前添加时间戳。 timestampKind DateTimeKind 要使用的时间戳类型。 padSource int? 源字符串的填充量。 Returns string 此日志消息的字符串表示形式。"
  },
  "api/Kook.LogSeverity.html": {
    "href": "api/Kook.LogSeverity.html",
    "title": "Enum LogSeverity | Kook.Net 文档",
    "keywords": "Enum LogSeverity Namespace Kook Assembly Kook.Net.Core.dll 表示日志消息的严重性。 public enum LogSeverity Fields Critical = 0 记录包含最高严重级别错误的日志，这类错误可能需要立即关注。 Debug = 5 记录任何日志，包括最详细的诊断日志。 Error = 1 记录在执行流程因故障而停止时的日志。 Info = 3 记录跟踪应用程序的一般流程的日志。 Verbose = 4 记录用于在开发过程中进行交互式调查的日志。 Warning = 2 记录在执行流程中出现的异常活动。"
  },
  "api/Kook.LoginState.html": {
    "href": "api/Kook.LoginState.html",
    "title": "Enum LoginState | Kook.Net 文档",
    "keywords": "Enum LoginState Namespace Kook Assembly Kook.Net.Core.dll 表示客户端的登录状态。 public enum LoginState : byte Fields LoggedIn = 2 已登录。 LoggedOut = 0 已退出登录。 LoggingIn = 1 正在登录。 LoggingOut = 3 正在退出登录。"
  },
  "api/Kook.MentionUtils.html": {
    "href": "api/Kook.MentionUtils.html",
    "title": "Class MentionUtils | Kook.Net 文档",
    "keywords": "Class MentionUtils Namespace Kook Assembly Kook.Net.Core.dll 提供一组用于生成与解析提及标签的辅助方法。 public static class MentionUtils Inheritance object MentionUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods KMarkdownMentionChannel(ulong) 返回基于频道 ID 的 KMarkdown 格式化频道提及字符串。 public static string KMarkdownMentionChannel(ulong id) Parameters id ulong Returns string 格式化为 KMarkdown 的频道提及字符串。 KMarkdownMentionRole(uint) 返回基于角色 ID 的 KMarkdown 格式化角色提及字符串。 public static string KMarkdownMentionRole(uint id) Parameters id uint Returns string 格式化为 KMarkdown 的角色提及字符串。 KMarkdownMentionUser(ulong) 返回基于用户 ID 的 KMarkdown 格式化用户提及字符串。 public static string KMarkdownMentionUser(ulong id) Parameters id ulong Returns string 格式化为 KMarkdown 的用户提及字符串。 ParseChannel(string, TagMode) 解析指定的频道提及字符串。 public static ulong ParseChannel(string text, TagMode tagMode) Parameters text string 要解析的频道提及字符串。 tagMode TagMode 提及标签的语法模式。 Returns ulong 解析的频道 ID。 Exceptions ArgumentException 无效的频道提及字符串格式。 ArgumentOutOfRangeException tagMode 不是有效的标签语法模式。 ParseRole(string, TagMode) 解析指定的角色提及字符串。 public static ulong ParseRole(string text, TagMode tagMode) Parameters text string 要解析的角色提及字符串。 tagMode TagMode 提及标签的语法模式。 Returns ulong 解析的角色 ID。 Exceptions ArgumentException 无效的角色提及字符串格式。 ArgumentOutOfRangeException tagMode 不是有效的标签语法模式。 ParseUser(string, TagMode) 将指定的用户提及字符串解析为用户 ID。 public static ulong ParseUser(string text, TagMode tagMode) Parameters text string 要解析的用户提及字符串。 tagMode TagMode 提及标签的语法模式。 Returns ulong 解析的用户 ID。 Exceptions ArgumentException 无效的用户提及字符串格式。 ArgumentOutOfRangeException tagMode 不是有效的标签语法模式。 PlainTextMentionChannel(ulong) 返回基于频道 ID 的纯文本格式化频道提及字符串。 public static string PlainTextMentionChannel(ulong id) Parameters id ulong Returns string 格式化为纯文本的频道提及字符串。 PlainTextMentionRole(uint) 返回基于角色 ID 的纯文本格式化角色提及字符串。 public static string PlainTextMentionRole(uint id) Parameters id uint Returns string 格式化为纯文本的角色提及字符串。 PlainTextMentionUser(string, ulong) 返回基于用户名称与用户 ID 的纯文本格式化用户提及字符串。 public static string PlainTextMentionUser(string username, ulong id) Parameters username string id ulong Returns string 格式化为纯文本的用户提及字符串。 TryParseChannel(string, out ulong, TagMode) 尝试解析指定的频道提及字符串。 public static bool TryParseChannel(string text, out ulong channelId, TagMode tagMode) Parameters text string 要解析的频道提及字符串。 channelId ulong 如果解析成功，则为频道 ID；否则为 0。 tagMode TagMode 提及标签的语法模式。 Returns bool 如果解析成功，则为 true；否则为 false。 Exceptions ArgumentOutOfRangeException tagMode 不是有效的标签语法模式。 TryParseRole(string, out uint, TagMode) 尝试解析指定的角色提及字符串。 public static bool TryParseRole(string text, out uint roleId, TagMode tagMode) Parameters text string T 要解析的角色提及字符串。 roleId uint 如果解析成功，则为角色 ID；否则为 0。 tagMode TagMode 提及标签的语法模式。 Returns bool 如果解析成功，则为 true；否则为 false。 Exceptions ArgumentOutOfRangeException tagMode 不是有效的标签语法模式。 TryParseUser(string, out ulong, TagMode) 尝试解析指定的用户提及字符串。 public static bool TryParseUser(string text, out ulong userId, TagMode tagMode) Parameters text string 要解析的用户提及字符串。 userId ulong 如果解析成功，则为用户 ID；否则为 0。 tagMode TagMode 提及标签的语法模式。 Returns bool 如果解析成功，则为 true；否则为 false。 Exceptions ArgumentOutOfRangeException tagMode 不是有效的标签语法模式。"
  },
  "api/Kook.MessageExtensions.html": {
    "href": "api/Kook.MessageExtensions.html",
    "title": "Class MessageExtensions | Kook.Net 文档",
    "keywords": "Class MessageExtensions Namespace Kook Assembly Kook.Net.Core.dll 提供用于各种消息实体的扩展方法。 public static class MessageExtensions Inheritance object MessageExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddReactionsAsync(IUserMessage, IEnumerable<IEmote>, RequestOptions?) 向消息添加多个回应。 public static Task AddReactionsAsync(this IUserMessage msg, IEnumerable<IEmote> reactions, RequestOptions? options = null) Parameters msg IUserMessage 要添加回应的消息。 reactions IEnumerable<IEmote> 要用于向此消息添加回应的所有表情符号。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步添加操作的任务。 Remarks 此方法会对每个要添加的回应分别发送请求。 See Also AddReactionAsync(IEmote, RequestOptions) GetJumpUrl(IMessage) 获取一个跳转到消息的 URL。 public static string GetJumpUrl(this IMessage msg) Parameters msg IMessage 要获取跳转 URL 的消息。 Returns string 一个包含用于在聊天中跳转到消息的 URL 的字符串。 MaybeTextImageMixedMessage(IUserMessage) 获取此消息是否可能是图文混排消息。 public static bool MaybeTextImageMixedMessage(this IUserMessage msg) Parameters msg IUserMessage 要判断的消息。 Returns bool 如果此消息可能是图文混排消息，则为 true；否则为 false。 RemoveReactionsAsync(IUserMessage, IUser, IEnumerable<IEmote>, RequestOptions?) 移除消息上的多个回应。 public static Task RemoveReactionsAsync(this IUserMessage msg, IUser user, IEnumerable<IEmote> reactions, RequestOptions? options = null) Parameters msg IUserMessage 要添加回应的消息。 user IUser 要删除其回应的用户。 reactions IEnumerable<IEmote> 要从此消息移除的回应的所有表情符号。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步移除操作的任务。 Remarks 此方法会对每个要移除的回应分别发送请求。 See Also RemoveReactionAsync(IEmote, IUser, RequestOptions) ReplyCardAsync(IUserMessage, ICard, bool, bool, RequestOptions?) 向消息所属的频道回复卡片消息。 public static Task<Cacheable<IUserMessage, Guid>> ReplyCardAsync(this IUserMessage message, ICard card, bool isQuote = false, bool isEphemeral = false, RequestOptions? options = null) Parameters message IUserMessage 要回复的消息。 card ICard 要发送的卡片。 isQuote bool 是否在回复消息时引用被回复的消息。 isEphemeral bool 是否以临时消息的方式回复。如果设置为 true，则仅该被回复的消息的作者可以看到此回复消息，否则所有人都可以看到此回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> ReplyCardsAsync(IUserMessage, IEnumerable<ICard>, bool, bool, RequestOptions?) 向消息所属的频道回复卡片消息。 public static Task<Cacheable<IUserMessage, Guid>> ReplyCardsAsync(this IUserMessage message, IEnumerable<ICard> cards, bool isQuote = false, bool isEphemeral = false, RequestOptions? options = null) Parameters message IUserMessage 要回复的消息。 cards IEnumerable<ICard> 要发送的卡片。 isQuote bool 是否在回复消息时引用被回复的消息。 isEphemeral bool 是否以临时消息的方式回复。如果设置为 true，则仅该被回复的消息的作者可以看到此回复消息，否则所有人都可以看到此回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(IUserMessage, FileAttachment, bool, bool, RequestOptions?) 向消息所属的频道回复文件消息。 public static Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(this IUserMessage message, FileAttachment attachment, bool isQuote = false, bool isEphemeral = false, RequestOptions? options = null) Parameters message IUserMessage 要回复的消息。 attachment FileAttachment 文件的附件信息。 isQuote bool 是否在回复消息时引用被回复的消息。 isEphemeral bool 是否以临时消息的方式回复。如果设置为 true，则仅该被回复的消息的作者可以看到此回复消息，否则所有人都可以看到此回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(IUserMessage, Stream, string, AttachmentType, bool, bool, RequestOptions?) 向消息所属的频道回复文件消息。 public static Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(this IUserMessage message, Stream stream, string filename, AttachmentType type = AttachmentType.File, bool isQuote = false, bool isEphemeral = false, RequestOptions? options = null) Parameters message IUserMessage 要回复的消息。 stream Stream 文件的流。 filename string 文件名。 type AttachmentType 文件的媒体类型。 isQuote bool 是否在回复消息时引用被回复的消息。 isEphemeral bool 是否以临时消息的方式回复。如果设置为 true，则仅该被回复的消息的作者可以看到此回复消息，否则所有人都可以看到此回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(IUserMessage, string, string?, AttachmentType, bool, bool, RequestOptions?) 向消息所属的频道回复文件消息。 public static Task<Cacheable<IUserMessage, Guid>> ReplyFileAsync(this IUserMessage message, string path, string? filename = null, AttachmentType type = AttachmentType.File, bool isQuote = false, bool isEphemeral = false, RequestOptions? options = null) Parameters message IUserMessage 要回复的消息。 path string 文件的路径。 filename string 文件名。 type AttachmentType 文件的媒体类型。 isQuote bool 是否在回复消息时引用被回复的消息。 isEphemeral bool 是否以临时消息的方式回复。如果设置为 true，则仅该被回复的消息的作者可以看到此回复消息，否则所有人都可以看到此回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> ReplyTextAsync(IUserMessage, string, bool, bool, RequestOptions?) 向消息所属的频道回复文字消息。 public static Task<Cacheable<IUserMessage, Guid>> ReplyTextAsync(this IUserMessage message, string content, bool isQuote = false, bool isEphemeral = false, RequestOptions? options = null) Parameters message IUserMessage 要回复的消息。 content string Contents of the message. isQuote bool 是否在回复消息时引用被回复的消息。 isEphemeral bool 是否以临时消息的方式回复。如果设置为 true，则仅该被回复的消息的作者可以看到此回复消息，否则所有人都可以看到此回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>>"
  },
  "api/Kook.MessageProperties.html": {
    "href": "api/Kook.MessageProperties.html",
    "title": "Class MessageProperties | Kook.Net 文档",
    "keywords": "Class MessageProperties Namespace Kook Assembly Kook.Net.Core.dll 提供用于修改 IUserMessage 的属性。 public class MessageProperties Inheritance object MessageProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Cards 获取或设置要设置到此消息的卡片。 修改此值，或修改此 IList<T> 中的成员，可以修改消息中卡片的内容。 public IList<ICard>? Cards { get; set; } Property Value IList<ICard> Content 获取或设置要设置到此消息的消息内容。 public string? Content { get; set; } Property Value string Remarks 修改此值为非空字符串可以修改消息的内容；不修改此值或将其设置为 null 可以保持消息的原内容。 EphemeralUser 获取或设置要临时更新到此消息的用户。 public IUser? EphemeralUser { get; set; } Property Value IUser Remarks 设置此属性会使此用户在本次登录会话中看到的消息内容为本次临时修改的内容， 该用户在下次登录会话中看到的消息内容仍为原内容。 warning 仅支持通过设置此属性为指定用户的 ID 来为该用户临时更新消息。 设置此属性无法将非临时消息更改为仅指定用户可见的临时消息，也无法为过去发送的临时消息更改可见用户。 Quote 获取或设置要设置到此消息的消息引用。 public IQuote? Quote { get; set; } Property Value IQuote Remarks 仅支持通过将此属性设置为 MessageReference.Empty 来清除消息引用，不支持更改现有消息引用。 See Also Empty See Also ModifyAsync(Action<MessageProperties>, RequestOptions)"
  },
  "api/Kook.MessageReference.html": {
    "href": "api/Kook.MessageReference.html",
    "title": "Class MessageReference | Kook.Net 文档",
    "keywords": "Class MessageReference Namespace Kook Assembly Kook.Net.Core.dll 表示一个消息引用。 public class MessageReference : IQuote Inheritance object MessageReference Implements IQuote Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageReference(Guid) 使用指定的消息 ID 创建一个新的 MessageReference 实例。 public MessageReference(Guid quotedMessageId) Parameters quotedMessageId Guid 要引用的消息的 ID。 Properties Empty 获取一个引用的消息为空的引用。 public static MessageReference Empty { get; } Property Value MessageReference Remarks 此属性用于在修改消息时删除引用。 See Also Quote QuotedMessageId 获取此引用所指向的消息的 ID。 public Guid QuotedMessageId { get; } Property Value Guid"
  },
  "api/Kook.MessageSource.html": {
    "href": "api/Kook.MessageSource.html",
    "title": "Enum MessageSource | Kook.Net 文档",
    "keywords": "Enum MessageSource Namespace Kook Assembly Kook.Net.Core.dll 表示消息的来源。 public enum MessageSource Fields Bot = 2 消息由 Bot 发送。 System = 0 系统消息。 User = 1 消息由用户发送。"
  },
  "api/Kook.MessageType.html": {
    "href": "api/Kook.MessageType.html",
    "title": "Enum MessageType | Kook.Net 文档",
    "keywords": "Enum MessageType Namespace Kook Assembly Kook.Net.Core.dll 表示一个消息的类型。 public enum MessageType Fields Audio = 8 音频消息。 Card = 10 卡片消息。 File = 4 文件消息。 Image = 2 图片消息。 KMarkdown = 9 KMarkdown 文本消息。 Poke = 12 POKE 消息。 System = 255 系统消息。 Text = 1 纯文本消息。 Video = 3 视频消息。"
  },
  "api/Kook.ModifyGuildChannelProperties.html": {
    "href": "api/Kook.ModifyGuildChannelProperties.html",
    "title": "Class ModifyGuildChannelProperties | Kook.Net 文档",
    "keywords": "Class ModifyGuildChannelProperties Namespace Kook Assembly Kook.Net.Core.dll 提供用于修改 IGuildChannel 的属性。 public class ModifyGuildChannelProperties Inheritance object ModifyGuildChannelProperties Derived ModifyTextChannelProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CategoryId 获取或设置要设置到此频道的所属分组频道的 ID。 public ulong? CategoryId { get; set; } Property Value ulong? Remarks 设置此值为某分组频道的 ID 将会使当前频道移动至该分组频道下；设置此值为 0 将会使当前频道脱离其当前所属的分组频道， 位于所有分组频道的上方；如果此值为 null，则当前频道的所属分组频道不会被修改。 Name 获取或设置要设置到此频道的新名称。 public string? Name { get; set; } Property Value string Remarks 如果此值为 null，则频道的名称不会被修改。 Position 获取或设置要设置到此频道的新位置。 public int? Position { get; set; } Property Value int? Remarks 更小的数值表示更靠近列表顶部的位置。设置为与同分组下的其他频道相同的值，将会使当前频道排列于与该频道相邻更靠近列表顶部的位置。 如果此值为 null，则频道的位置不会被修改。 See Also ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions)"
  },
  "api/Kook.ModifyTextChannelProperties.html": {
    "href": "api/Kook.ModifyTextChannelProperties.html",
    "title": "Class ModifyTextChannelProperties | Kook.Net 文档",
    "keywords": "Class ModifyTextChannelProperties Namespace Kook Assembly Kook.Net.Core.dll 提供用于修改 ITextChannel 的属性。 public class ModifyTextChannelProperties : ModifyGuildChannelProperties Inheritance object ModifyGuildChannelProperties ModifyTextChannelProperties Derived ModifyVoiceChannelProperties Inherited Members ModifyGuildChannelProperties.Name ModifyGuildChannelProperties.Position ModifyGuildChannelProperties.CategoryId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties SlowModeInterval 获取或设置要设置到此频道的慢速模式延迟。 public SlowModeInterval? SlowModeInterval { get; set; } Property Value SlowModeInterval? Remarks 设置此值将要求每个用户在发送另一条消息之前等待指定的时间间隔；设置为 None 将会为此频道禁用慢速模式；如果此值为 null，则慢速模式延迟不会被修改。 note 拥有 ManageMessages 或 ManageChannels 权限的用户不受慢速模式延迟的限制。 Topic 获取或设置要设置到此频道的说明。 public string? Topic { get; set; } Property Value string Remarks 如果此值为 null，则频道的说明不会被修改；如果此值为 Empty，则频道的说明将被清空； 设置为其他值将会修改频道的说明。 See Also ModifyAsync(Action<ModifyTextChannelProperties>, RequestOptions)"
  },
  "api/Kook.ModifyVoiceChannelProperties.html": {
    "href": "api/Kook.ModifyVoiceChannelProperties.html",
    "title": "Class ModifyVoiceChannelProperties | Kook.Net 文档",
    "keywords": "Class ModifyVoiceChannelProperties Namespace Kook Assembly Kook.Net.Core.dll 提供用于修改 IVoiceChannel 的属性。 public class ModifyVoiceChannelProperties : ModifyTextChannelProperties Inheritance object ModifyGuildChannelProperties ModifyTextChannelProperties ModifyVoiceChannelProperties Inherited Members ModifyTextChannelProperties.Topic ModifyTextChannelProperties.SlowModeInterval ModifyGuildChannelProperties.Name ModifyGuildChannelProperties.Position ModifyGuildChannelProperties.CategoryId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties OverwriteVoiceRegion 获取或设置要设置到此频道的是否覆写了服务器默认设置的语音服务器区域。 public bool? OverwriteVoiceRegion { get; set; } Property Value bool? Remarks 如果此值为 null，则不会修改是否覆写了服务器默认设置的语音服务器区域。 Password 获取或设置要设置到此频道的密码。 public string? Password { get; set; } Property Value string Remarks 密码只支持 1 至 12 位的数字，设置密码后，用户连接到此频道时需要输入密码。如果此值为 Empty，则密码将被清除；如果此值为 null，则密码不会被修改。 UserLimit 获取或设置要设置到此频道的允许同时连接到此频道的最大用户数；如果没有限制，则为 0。 public int? UserLimit { get; set; } Property Value int? Remarks 如果此值为 0，则用户限制将被清除；如果此值为 null，则用户限制不会被修改。 VoiceQuality 获取或设置要设置到此频道的要求语音频道中的客户端使用的语音质量。 public VoiceQuality? VoiceQuality { get; set; } Property Value VoiceQuality? Remarks warning 受限于 KOOK API，无法通过 KOOK API 设置语音频道的语音质量为 _128kbps 或更高的值，尽管语音频道所属的服务器已有相应的服务器助力。通过此属性设置为不低于 _128kbps 的语音质量的操作是无效的。 如果此值为 null，则语音质量不会被修改。 VoiceRegion 获取或设置要设置到此频道的语音服务器区域。 public string? VoiceRegion { get; set; } Property Value string Remarks 如果此值为 null，则语音服务器区域不会被修改。 See Also Region See Also ModifyAsync(Action<ModifyVoiceChannelProperties>, RequestOptions)"
  },
  "api/Kook.ModuleType.html": {
    "href": "api/Kook.ModuleType.html",
    "title": "Enum ModuleType | Kook.Net 文档",
    "keywords": "Enum ModuleType Namespace Kook Assembly Kook.Net.Core.dll 表示一个 IModule 的类型。 public enum ModuleType Fields ActionGroup = 4 按钮组模块。 Audio = 8 音频模块。 Container = 3 容器模块。 Context = 5 备注模块。 Countdown = 10 倒计时模块。 Divider = 6 分割线模块。 File = 7 文件模块。 Header = 0 标题模块。 ImageGroup = 2 图片组模块。 Invite = 11 邀请模块。 Section = 1 内容模块。 Video = 9 视频模块。"
  },
  "api/Kook.Music.html": {
    "href": "api/Kook.Music.html",
    "title": "Class Music | Kook.Net 文档",
    "keywords": "Class Music Namespace Kook Assembly Kook.Net.Core.dll 表示音乐的信息。 public class Music Inheritance object Music Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name 获取或设置音乐的名称。 public string? Name { get; set; } Property Value string Provider 获取或设置音乐的提供来源。 public MusicProvider Provider { get; set; } Property Value MusicProvider Singer 获取或设置音乐的歌手名称。 public string? Singer { get; set; } Property Value string"
  },
  "api/Kook.MusicProvider.html": {
    "href": "api/Kook.MusicProvider.html",
    "title": "Enum MusicProvider | Kook.Net 文档",
    "keywords": "Enum MusicProvider Namespace Kook Assembly Kook.Net.Core.dll 表示音乐的提供来源。 public enum MusicProvider Fields KuGouMusic = 3 酷狗音乐。 NetEaseCloudMusic = 1 网易云音乐。 TencentMusic = 2 QQ 音乐。 Unspecified = 0 未指定。"
  },
  "api/Kook.Nameplate.html": {
    "href": "api/Kook.Nameplate.html",
    "title": "Class Nameplate | Kook.Net 文档",
    "keywords": "Class Nameplate Namespace Kook Assembly Kook.Net.Core.dll 表示一个用户的铭牌。 public class Nameplate : IEquatable<Nameplate> Inheritance object Nameplate Implements IEquatable<Nameplate> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Icon 获取此铭牌的图标的 URL。 public string Icon { get; } Property Value string Name 获取此铭牌的名称。 public string Name { get; } Property Value string Tips 获取此铭牌的提示信息。 public string Tips { get; } Property Value string Type 获取此铭牌的类型。 public int Type { get; } Property Value int Methods Equals(Nameplate?) Indicates whether the current object is equal to another object of the same type. public bool Equals(Nameplate? other) Parameters other Nameplate An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/Kook.Net.BucketId.html": {
    "href": "api/Kook.Net.BucketId.html",
    "title": "Class BucketId | Kook.Net 文档",
    "keywords": "Class BucketId Namespace Kook.Net Assembly Kook.Net.Core.dll 表示一个限速桶。 public sealed class BucketId : IEquatable<BucketId> Inheritance object BucketId Implements IEquatable<BucketId> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties BucketHash 获取此桶的哈希值。 public string? BucketHash { get; } Property Value string Remarks 此哈希值由 KOOK 提供，用于分组限速。 Endpoint 获取将要请求的终结点（如果可用）。 public string? Endpoint { get; } Property Value string HttpMethod 获取用于发起请求的 HTTP 方法（如果可用）。 public HttpMethod? HttpMethod { get; } Property Value HttpMethod IsHashBucket 获取此限速桶是否为哈希分组限速桶。 public bool IsHashBucket { get; } Property Value bool MajorParameters 获取路由的主要参数。 public IOrderedEnumerable<KeyValuePair<string, string>> MajorParameters { get; } Property Value IOrderedEnumerable<KeyValuePair<string, string>> Methods Create(HttpMethod?, string?, Dictionary<string, string>?) 基于 HttpMethod 和 Endpoint 创建一个新的 BucketId。 public static BucketId Create(HttpMethod? httpMethod, string? endpoint, Dictionary<string, string>? majorParams) Parameters httpMethod HttpMethod 用于发送请求的 HTTP 方法。 endpoint string 请求的终结点。 majorParams Dictionary<string, string> 终结点的主要路由参数。 Returns BucketId 一个基于指定的 HttpMethod 和 Endpoint 创建的 BucketId。 Create(string, BucketId) 基于 BucketHash 和之前的 BucketId 创建一个新的 BucketId。 public static BucketId Create(string hash, BucketId oldBucket) Parameters hash string 由 KOOK 提供的分组限速哈希值。 oldBucket BucketId 要被升级为哈希分组限速桶的已有限速桶。 Returns BucketId 一个基于指定的 BucketHash 和之前的 BucketId 创建的 BucketId。 Equals(BucketId?) Indicates whether the current object is equal to another object of the same type. public bool Equals(BucketId? other) Parameters other BucketId An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetBucketHash() 获取将此桶定义为哈希分组限速桶的字符串。 public string? GetBucketHash() Returns string 如果此桶是哈希分组限速桶，则返回此桶的哈希值；否则返回 null。 GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetUniqueEndpoint() 获取将此桶定义为终结点限速桶的字符串。 public string? GetUniqueEndpoint() Returns string 如果此桶是终结点限速桶，则返回此桶的终结点；否则返回 null。 ToString() Returns a string that represents the current object. public override string? ToString() Returns string A string that represents the current object."
  },
  "api/Kook.Net.DependencyInjection.Microsoft.IKookClientConfigurator-2.html": {
    "href": "api/Kook.Net.DependencyInjection.Microsoft.IKookClientConfigurator-2.html",
    "title": "Interface IKookClientConfigurator<TClient, TConfig> | Kook.Net 文档",
    "keywords": "Interface IKookClientConfigurator<TClient, TConfig> Namespace Kook.Net.DependencyInjection.Microsoft Assembly Kook.Net.DependencyInjection.Microsoft.dll 表示一个通用的 KOOK 客户端配置器。 public interface IKookClientConfigurator<TClient, TConfig> where TClient : IKookClient where TConfig : KookConfig Type Parameters TClient 客户端的类型。 TConfig 配置的类型。 Properties ServiceCollection 获取用于添加服务的服务集合。 IServiceCollection ServiceCollection { get; } Property Value IServiceCollection Methods AppendConfigure(Action<IServiceProvider, TConfig>) 添加一个配置操作，该操作将在创建的配置实例上执行。 IKookClientConfigurator<TClient, TConfig> AppendConfigure(Action<IServiceProvider, TConfig> configure) Parameters configure Action<IServiceProvider, TConfig> 配置操作。 Returns IKookClientConfigurator<TClient, TConfig> 添加了配置操作的配置器。 AppendService(Action<IServiceCollection>) 添加一个服务操作，该操作将在服务集合上执行。 IKookClientConfigurator<TClient, TConfig> AppendService(Action<IServiceCollection> service) Parameters service Action<IServiceCollection> 服务操作。 Returns IKookClientConfigurator<TClient, TConfig> 添加了服务操作的配置器。"
  },
  "api/Kook.Net.DependencyInjection.Microsoft.IKookClientConfiguratorCompleter.html": {
    "href": "api/Kook.Net.DependencyInjection.Microsoft.IKookClientConfiguratorCompleter.html",
    "title": "Interface IKookClientConfiguratorCompleter | Kook.Net 文档",
    "keywords": "Interface IKookClientConfiguratorCompleter Namespace Kook.Net.DependencyInjection.Microsoft Assembly Kook.Net.DependencyInjection.Microsoft.dll 表示一个通用的 KOOK 客户端配置器的完成器。 public interface IKookClientConfiguratorCompleter Methods Complete() 完成配置。 void Complete()"
  },
  "api/Kook.Net.DependencyInjection.Microsoft.IKookClientServiceConfigurator.html": {
    "href": "api/Kook.Net.DependencyInjection.Microsoft.IKookClientServiceConfigurator.html",
    "title": "Interface IKookClientServiceConfigurator | Kook.Net 文档",
    "keywords": "Interface IKookClientServiceConfigurator Namespace Kook.Net.DependencyInjection.Microsoft Assembly Kook.Net.DependencyInjection.Microsoft.dll 表示一个通用的 KOOK 客户端服务配置器。 public interface IKookClientServiceConfigurator : IKookClientConfiguratorCompleter Inherited Members IKookClientConfiguratorCompleter.Complete() Extension Methods KookClientConfiguratorExtensions.UseHostedRestClient(IKookClientServiceConfigurator, Action<KookRestConfig>, TokenType, string, bool) KookClientConfiguratorExtensions.UseHostedRestClient(IKookClientServiceConfigurator, Action<KookRestConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) KookClientConfiguratorExtensions.UseHostedSocketClient(IKookClientServiceConfigurator, Action<KookSocketConfig>, TokenType, string, bool) KookClientConfiguratorExtensions.UseHostedSocketClient(IKookClientServiceConfigurator, Action<KookSocketConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) KookClientConfiguratorExtensions.UseHostedWebhookClient<TClient, TConfig>(IKookClientServiceConfigurator, Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>, TokenType, string, bool) KookClientConfiguratorExtensions.UseHostedWebhookClient<TClient, TConfig>(IKookClientServiceConfigurator, Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) KookWebhookClientExtension.UseAspNetWebhookClient(IKookClientServiceConfigurator, Action<KookAspNetWebhookConfig>) Methods UseRestClient(Action<KookRestConfig>) 配置使用 REST 客户端。 IKookClientConfigurator<KookRestClient, KookRestConfig> UseRestClient(Action<KookRestConfig> configure) Parameters configure Action<KookRestConfig> 配置操作。 Returns IKookClientConfigurator<KookRestClient, KookRestConfig> 配置了 REST 客户端的配置器。 UseSocketClient(Action<KookSocketConfig>) 配置使用网关客户端。 IKookClientConfigurator<KookSocketClient, KookSocketConfig> UseSocketClient(Action<KookSocketConfig> configure) Parameters configure Action<KookSocketConfig> 配置操作。 Returns IKookClientConfigurator<KookSocketClient, KookSocketConfig> 配置了网关客户端的配置器。 UseWebhookClient<TClient, TConfig>(Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>) 配置使用基于 Webhook 的网关客户端。 IKookClientConfigurator<TClient, TConfig> UseWebhookClient<TClient, TConfig>(Func<IServiceProvider, IOptions<TConfig>, TClient> clientFactory, Action<TConfig> configure) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters clientFactory Func<IServiceProvider, IOptions<TConfig>, TClient> 客户端创建委托。 configure Action<TConfig> 配置操作。 Returns IKookClientConfigurator<TClient, TConfig> 配置了基于 Webhook 的网关客户端的配置器。 Type Parameters TClient 客户端的类型。 TConfig 配置的类型。"
  },
  "api/Kook.Net.DependencyInjection.Microsoft.KookClientConfigurator-2.html": {
    "href": "api/Kook.Net.DependencyInjection.Microsoft.KookClientConfigurator-2.html",
    "title": "Class KookClientConfigurator<TClient, TConfig> | Kook.Net 文档",
    "keywords": "Class KookClientConfigurator<TClient, TConfig> Namespace Kook.Net.DependencyInjection.Microsoft Assembly Kook.Net.DependencyInjection.Microsoft.dll 表示一个 KOOK 客户端配置器基类。 public abstract class KookClientConfigurator<TClient, TConfig> : IKookClientConfigurator<TClient, TConfig>, IKookClientConfiguratorCompleter where TClient : IKookClient where TConfig : KookConfig Type Parameters TClient 客户端的类型。 TConfig 配置的类型。 Inheritance object KookClientConfigurator<TClient, TConfig> Implements IKookClientConfigurator<TClient, TConfig> IKookClientConfiguratorCompleter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ServiceCollection 获取用于添加服务的服务集合。 public IServiceCollection ServiceCollection { get; } Property Value IServiceCollection Methods AppendConfigure(Action<IServiceProvider, TConfig>) 添加一个配置操作，该操作将在创建的配置实例上执行。 public IKookClientConfigurator<TClient, TConfig> AppendConfigure(Action<IServiceProvider, TConfig> configure) Parameters configure Action<IServiceProvider, TConfig> 配置操作。 Returns IKookClientConfigurator<TClient, TConfig> 添加了配置操作的配置器。 AppendService(Action<IServiceCollection>) 添加一个服务操作，该操作将在服务集合上执行。 public IKookClientConfigurator<TClient, TConfig> AppendService(Action<IServiceCollection> service) Parameters service Action<IServiceCollection> 服务操作。 Returns IKookClientConfigurator<TClient, TConfig> 添加了服务操作的配置器。 Complete() 完成配置。 public void Complete()"
  },
  "api/Kook.Net.DependencyInjection.Microsoft.KookClientConfiguratorExtensions.html": {
    "href": "api/Kook.Net.DependencyInjection.Microsoft.KookClientConfiguratorExtensions.html",
    "title": "Class KookClientConfiguratorExtensions | Kook.Net 文档",
    "keywords": "Class KookClientConfiguratorExtensions Namespace Kook.Net.DependencyInjection.Microsoft Assembly Kook.Net.DependencyInjection.Microsoft.dll 为 IKookClientConfigurator<TClient, TConfig> 提供配置 KOOK 客户端的扩展方法。 public static class KookClientConfiguratorExtensions Inheritance object KookClientConfiguratorExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UseMessageQueue<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, MessageQueueProvider) 配置 KOOK 客户端使用指定的消息队列提供程序。 public static IKookClientConfigurator<TClient, TConfig> UseMessageQueue<TClient, TConfig>(this IKookClientConfigurator<TClient, TConfig> configurator, MessageQueueProvider messageQueueProvider) where TClient : BaseSocketClient where TConfig : KookSocketConfig Parameters configurator IKookClientConfigurator<TClient, TConfig> 配置器。 messageQueueProvider MessageQueueProvider 消息队列提供程序。 Returns IKookClientConfigurator<TClient, TConfig> 配置了消息队列的配置器。 Type Parameters TClient 客户端的类型。 TConfig 配置的类型。 UseMessageQueue<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, Func<IServiceProvider, MessageQueueProvider>) 配置 KOOK 客户端使用指定的消息队列提供程序。 public static IKookClientConfigurator<TClient, TConfig> UseMessageQueue<TClient, TConfig>(this IKookClientConfigurator<TClient, TConfig> configurator, Func<IServiceProvider, MessageQueueProvider> messageQueueProvider) where TClient : BaseSocketClient where TConfig : KookSocketConfig Parameters configurator IKookClientConfigurator<TClient, TConfig> 配置器。 messageQueueProvider Func<IServiceProvider, MessageQueueProvider> 消息队列提供程序。 Returns IKookClientConfigurator<TClient, TConfig> 配置了消息队列的配置器。 Type Parameters TClient 客户端的类型。 TConfig 配置的类型。"
  },
  "api/Kook.Net.DependencyInjection.Microsoft.KookClientDependencyInjectionExtensions.html": {
    "href": "api/Kook.Net.DependencyInjection.Microsoft.KookClientDependencyInjectionExtensions.html",
    "title": "Class KookClientDependencyInjectionExtensions | Kook.Net 文档",
    "keywords": "Class KookClientDependencyInjectionExtensions Namespace Kook.Net.DependencyInjection.Microsoft Assembly Kook.Net.DependencyInjection.Microsoft.dll 提供用于与 Microsoft.Extensions.DependencyInjection 集成，注册与配置 Kook.Net 客户端作为服务的扩展方法。 public static class KookClientDependencyInjectionExtensions Inheritance object KookClientDependencyInjectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddKookRestClient(IServiceCollection) 向指定的 IServiceCollection 添加 KookRestClient 客户端。 public static IServiceCollection AddKookRestClient(this IServiceCollection services) Parameters services IServiceCollection 要向其添加 KOOK REST 客户端的服务集合。 Returns IServiceCollection 添加了 KOOK REST 客户端的服务集合。 AddKookRestClient(IServiceCollection, KookRestConfig) 向指定的 IServiceCollection 添加 KookRestClient 客户端。 public static IServiceCollection AddKookRestClient(this IServiceCollection services, KookRestConfig config) Parameters services IServiceCollection 要向其添加 KOOK REST 客户端的服务集合。 config KookRestConfig 用于配置 KOOK REST 客户端的配置。 Returns IServiceCollection 添加了 KOOK REST 客户端的服务集合。 AddKookRestClient(IServiceCollection, Action<KookRestConfig>) 向指定的 IServiceCollection 添加 KookRestClient 客户端。 public static IServiceCollection AddKookRestClient(this IServiceCollection services, Action<KookRestConfig> configure) Parameters services IServiceCollection 要向其添加 KOOK REST 客户端的服务集合。 configure Action<KookRestConfig> 用于配置 KOOK REST 客户端的配置委托。 Returns IServiceCollection 添加了 KOOK REST 客户端的服务集合。 AddKookSocketClient(IServiceCollection) 向指定的 IServiceCollection 添加 KookSocketClient 客户端。 public static IServiceCollection AddKookSocketClient(this IServiceCollection services) Parameters services IServiceCollection 要向其添加 KOOK 网关客户端的服务集合。 Returns IServiceCollection 添加了 KOOK 网关客户端的服务集合。 AddKookSocketClient(IServiceCollection, KookSocketConfig) 向指定的 IServiceCollection 添加 KookSocketClient 客户端。 public static IServiceCollection AddKookSocketClient(this IServiceCollection services, KookSocketConfig config) Parameters services IServiceCollection 要向其添加 KOOK 网关客户端的服务集合。 config KookSocketConfig 用于配置 KOOK 网关客户端的配置。 Returns IServiceCollection 添加了 KOOK 网关客户端的服务集合。 AddKookSocketClient(IServiceCollection, Action<KookSocketConfig>) 向指定的 IServiceCollection 添加 KookSocketClient 客户端。 public static IServiceCollection AddKookSocketClient(this IServiceCollection services, Action<KookSocketConfig> configure) Parameters services IServiceCollection 要向其添加 KOOK 网关客户端的服务集合。 configure Action<KookSocketConfig> 用于配置 KOOK 网关客户端的配置委托。 Returns IServiceCollection 添加了 KOOK 网关客户端的服务集合。 AddKookWebhookClient<TClient>(IServiceCollection, Func<IServiceProvider, TClient>) 向指定的 IServiceCollection 添加 KookWebhookClient 客户端。 public static IServiceCollection AddKookWebhookClient<TClient>(this IServiceCollection services, Func<IServiceProvider, TClient> clientFactory) where TClient : KookWebhookClient Parameters services IServiceCollection 要向其添加 KOOK Webhook 客户端的服务集合。 clientFactory Func<IServiceProvider, TClient> 用于创建 KOOK Webhook 客户端的委托。 Returns IServiceCollection 添加了 KOOK Webhook 客户端的服务集合。 Type Parameters TClient Webhook 客户端的类型。 AddKookWebhookClient<TClient, TConfig>(IServiceCollection, Func<IServiceProvider, IOptions<TConfig>, TClient>) 向指定的 IServiceCollection 添加 KookWebhookClient 客户端。 public static IServiceCollection AddKookWebhookClient<TClient, TConfig>(this IServiceCollection services, Func<IServiceProvider, IOptions<TConfig>, TClient> clientFactory) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters services IServiceCollection 要向其添加 KOOK Webhook 客户端的服务集合。 clientFactory Func<IServiceProvider, IOptions<TConfig>, TClient> 用于创建 KOOK Webhook 客户端的委托。 Returns IServiceCollection 添加了 KOOK Webhook 客户端的服务集合。 Type Parameters TClient Webhook 客户端的类型。 TConfig Webhook 客户端的配置类型。 AddKookWebhookClient<TClient, TConfig>(IServiceCollection, Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>) 向指定的 IServiceCollection 添加 KookWebhookClient 客户端。 public static IServiceCollection AddKookWebhookClient<TClient, TConfig>(this IServiceCollection services, Func<IServiceProvider, IOptions<TConfig>, TClient> clientFactory, Action<TConfig> configure) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters services IServiceCollection 要向其添加 KOOK Webhook 客户端的服务集合。 clientFactory Func<IServiceProvider, IOptions<TConfig>, TClient> 用于创建 KOOK Webhook 客户端的委托。 configure Action<TConfig> 用于配置 KOOK Webhook 客户端的配置委托。 Returns IServiceCollection 添加了 KOOK Webhook 客户端的服务集合。 Type Parameters TClient Webhook 客户端的类型。 TConfig Webhook 客户端的配置类型。 AddKookWebhookClient<TClient, TConfig>(IServiceCollection, Func<IServiceProvider, TConfig, TClient>) 向指定的 IServiceCollection 添加 KookWebhookClient 客户端。 public static IServiceCollection AddKookWebhookClient<TClient, TConfig>(this IServiceCollection services, Func<IServiceProvider, TConfig, TClient> clientFactory) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters services IServiceCollection 要向其添加 KOOK Webhook 客户端的服务集合。 clientFactory Func<IServiceProvider, TConfig, TClient> 用于创建 KOOK Webhook 客户端的委托。 Returns IServiceCollection 添加了 KOOK Webhook 客户端的服务集合。 Type Parameters TClient Webhook 客户端的类型。 TConfig Webhook 客户端的配置类型。 AddKookWebhookClient<TClient, TConfig>(IServiceCollection, Func<IServiceProvider, TConfig, TClient>, TConfig) 向指定的 IServiceCollection 添加 KookWebhookClient 客户端。 public static IServiceCollection AddKookWebhookClient<TClient, TConfig>(this IServiceCollection services, Func<IServiceProvider, TConfig, TClient> clientFactory, TConfig config) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters services IServiceCollection 要向其添加 KOOK Webhook 客户端的服务集合。 clientFactory Func<IServiceProvider, TConfig, TClient> 用于创建 KOOK Webhook 客户端的委托。 config TConfig 用于配置 KOOK Webhook 客户端的配置。 Returns IServiceCollection 添加了 KOOK Webhook 客户端的服务集合。 Type Parameters TClient Webhook 客户端的类型。 TConfig Webhook 客户端的配置类型。"
  },
  "api/Kook.Net.DependencyInjection.Microsoft.KookClientServiceConfigurator.html": {
    "href": "api/Kook.Net.DependencyInjection.Microsoft.KookClientServiceConfigurator.html",
    "title": "Class KookClientServiceConfigurator | Kook.Net 文档",
    "keywords": "Class KookClientServiceConfigurator Namespace Kook.Net.DependencyInjection.Microsoft Assembly Kook.Net.DependencyInjection.Microsoft.dll 表示一个 KOOK 客户端配置器。 public class KookClientServiceConfigurator : IKookClientServiceConfigurator, IKookClientConfiguratorCompleter Inheritance object KookClientServiceConfigurator Implements IKookClientServiceConfigurator IKookClientConfiguratorCompleter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods KookClientConfiguratorExtensions.UseHostedRestClient(IKookClientServiceConfigurator, Action<KookRestConfig>, TokenType, string, bool) KookClientConfiguratorExtensions.UseHostedRestClient(IKookClientServiceConfigurator, Action<KookRestConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) KookClientConfiguratorExtensions.UseHostedSocketClient(IKookClientServiceConfigurator, Action<KookSocketConfig>, TokenType, string, bool) KookClientConfiguratorExtensions.UseHostedSocketClient(IKookClientServiceConfigurator, Action<KookSocketConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) KookClientConfiguratorExtensions.UseHostedWebhookClient<TClient, TConfig>(IKookClientServiceConfigurator, Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>, TokenType, string, bool) KookClientConfiguratorExtensions.UseHostedWebhookClient<TClient, TConfig>(IKookClientServiceConfigurator, Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) KookWebhookClientExtension.UseAspNetWebhookClient(IKookClientServiceConfigurator, Action<KookAspNetWebhookConfig>) Methods Complete() 完成配置。 public void Complete() UseRestClient(Action<KookRestConfig>) 配置使用 REST 客户端。 public IKookClientConfigurator<KookRestClient, KookRestConfig> UseRestClient(Action<KookRestConfig> configure) Parameters configure Action<KookRestConfig> 配置操作。 Returns IKookClientConfigurator<KookRestClient, KookRestConfig> 配置了 REST 客户端的配置器。 UseSocketClient(Action<KookSocketConfig>) 配置使用网关客户端。 public IKookClientConfigurator<KookSocketClient, KookSocketConfig> UseSocketClient(Action<KookSocketConfig> configure) Parameters configure Action<KookSocketConfig> 配置操作。 Returns IKookClientConfigurator<KookSocketClient, KookSocketConfig> 配置了网关客户端的配置器。 UseWebhookClient<TClient, TConfig>(Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>) 配置使用基于 Webhook 的网关客户端。 public IKookClientConfigurator<TClient, TConfig> UseWebhookClient<TClient, TConfig>(Func<IServiceProvider, IOptions<TConfig>, TClient> clientFactory, Action<TConfig> configure) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters clientFactory Func<IServiceProvider, IOptions<TConfig>, TClient> 客户端创建委托。 configure Action<TConfig> 配置操作。 Returns IKookClientConfigurator<TClient, TConfig> 配置了基于 Webhook 的网关客户端的配置器。 Type Parameters TClient 客户端的类型。 TConfig 配置的类型。"
  },
  "api/Kook.Net.DependencyInjection.Microsoft.KookConfiguratorExtensions.html": {
    "href": "api/Kook.Net.DependencyInjection.Microsoft.KookConfiguratorExtensions.html",
    "title": "Class KookConfiguratorExtensions | Kook.Net 文档",
    "keywords": "Class KookConfiguratorExtensions Namespace Kook.Net.DependencyInjection.Microsoft Assembly Kook.Net.DependencyInjection.Microsoft.dll 提供用于向 IServiceCollection 添加 KOOK 客户端和服务的扩展方法。 public static class KookConfiguratorExtensions Inheritance object KookConfiguratorExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddKook(IServiceCollection, Action<IKookClientServiceConfigurator>) 向指定的 IServiceCollection 添加 KOOK 客户端和服务。 public static IServiceCollection AddKook(this IServiceCollection services, Action<IKookClientServiceConfigurator> configure) Parameters services IServiceCollection 要向其添加 KOOK 客户端和服务的服务集合。 configure Action<IKookClientServiceConfigurator> 用于配置 KOOK 客户端和服务的配置委托。 Returns IServiceCollection 添加了 KOOK 客户端和服务的服务集合。"
  },
  "api/Kook.Net.DependencyInjection.Microsoft.html": {
    "href": "api/Kook.Net.DependencyInjection.Microsoft.html",
    "title": "Namespace Kook.Net.DependencyInjection.Microsoft | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.DependencyInjection.Microsoft Classes KookClientConfiguratorExtensions 为 IKookClientConfigurator<TClient, TConfig> 提供配置 KOOK 客户端的扩展方法。 KookClientConfigurator<TClient, TConfig> 表示一个 KOOK 客户端配置器基类。 KookClientDependencyInjectionExtensions 提供用于与 Microsoft.Extensions.DependencyInjection 集成，注册与配置 Kook.Net 客户端作为服务的扩展方法。 KookClientServiceConfigurator 表示一个 KOOK 客户端配置器。 KookConfiguratorExtensions 提供用于向 IServiceCollection 添加 KOOK 客户端和服务的扩展方法。 Interfaces IKookClientConfiguratorCompleter 表示一个通用的 KOOK 客户端配置器的完成器。 IKookClientConfigurator<TClient, TConfig> 表示一个通用的 KOOK 客户端配置器。 IKookClientServiceConfigurator 表示一个通用的 KOOK 客户端服务配置器。"
  },
  "api/Kook.Net.Hosting.KookClientConfiguratorExtensions.html": {
    "href": "api/Kook.Net.Hosting.KookClientConfiguratorExtensions.html",
    "title": "Class KookClientConfiguratorExtensions | Kook.Net 文档",
    "keywords": "Class KookClientConfiguratorExtensions Namespace Kook.Net.Hosting Assembly Kook.Net.Hosting.dll 提供用于配置 IKookClientConfigurator<TClient, TConfig> 添加客户端托管服务的扩展方法。 public static class KookClientConfiguratorExtensions Inheritance object KookClientConfiguratorExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UseHostedClient<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, TokenType, string, bool) 配置指定的 KOOK 客户端配置器添加客户端托管服务。 public static IKookClientConfigurator<TClient, TConfig> UseHostedClient<TClient, TConfig>(this IKookClientConfigurator<TClient, TConfig> configurator, TokenType tokenType, string token, bool validateToken = true) where TClient : BaseKookClient where TConfig : KookConfig Parameters configurator IKookClientConfigurator<TClient, TConfig> KOOK 服务配置器。 tokenType TokenType 令牌的类型。 token string 令牌。 validateToken bool 是否验证令牌。 Returns IKookClientConfigurator<TClient, TConfig> 配置了客户端托管服务的 KOOK 客户端配置器。 Type Parameters TClient 客户端的类型。 TConfig 配置的类型。 UseHostedClient<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) 配置指定的 KOOK 客户端配置器添加客户端托管服务。 public static IKookClientConfigurator<TClient, TConfig> UseHostedClient<TClient, TConfig>(this IKookClientConfigurator<TClient, TConfig> configurator, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) where TClient : BaseKookClient where TConfig : KookConfig Parameters configurator IKookClientConfigurator<TClient, TConfig> KOOK 服务配置器。 tokenType Func<IServiceProvider, TokenType> 令牌的类型。 token Func<IServiceProvider, string> 令牌。 validateToken Func<IServiceProvider, bool> 是否验证令牌。 Returns IKookClientConfigurator<TClient, TConfig> 配置了客户端托管服务的 KOOK 客户端配置器。 Type Parameters TClient 客户端的类型。 TConfig 配置的类型。 UseHostedRestClient(IKookClientServiceConfigurator, Action<KookRestConfig>, TokenType, string, bool) 配置指定的 KOOK 客户端配置器添加基于 REST 的客户端并添加客户端托管服务。 public static IKookClientConfigurator<KookRestClient, KookRestConfig> UseHostedRestClient(this IKookClientServiceConfigurator configurator, Action<KookRestConfig> configure, TokenType tokenType, string token, bool validateToken = true) Parameters configurator IKookClientServiceConfigurator KOOK 服务配置器。 configure Action<KookRestConfig> 用于配置 KOOK REST 客户端的配置委托。 tokenType TokenType 令牌的类型。 token string 令牌。 validateToken bool 是否验证令牌。 Returns IKookClientConfigurator<KookRestClient, KookRestConfig> 配置了 REST 客户端及客户端托管服务的 KOOK 客户端配置器。 UseHostedRestClient(IKookClientServiceConfigurator, Action<KookRestConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) 配置指定的 KOOK 客户端配置器添加基于 REST 的客户端并添加客户端托管服务。 public static IKookClientConfigurator<KookRestClient, KookRestConfig> UseHostedRestClient(this IKookClientServiceConfigurator configurator, Action<KookRestConfig> configure, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) Parameters configurator IKookClientServiceConfigurator KOOK 服务配置器。 configure Action<KookRestConfig> 用于配置 KOOK REST 客户端的配置委托。 tokenType Func<IServiceProvider, TokenType> 令牌的类型。 token Func<IServiceProvider, string> 令牌。 validateToken Func<IServiceProvider, bool> 是否验证令牌。 Returns IKookClientConfigurator<KookRestClient, KookRestConfig> 配置了 REST 客户端及客户端托管服务的 KOOK 客户端配置器。 UseHostedSocketClient(IKookClientServiceConfigurator, Action<KookSocketConfig>, TokenType, string, bool) 配置指定的 KOOK 客户端配置器添加基于网关的客户端并添加客户端托管服务。 public static IKookClientConfigurator<KookSocketClient, KookSocketConfig> UseHostedSocketClient(this IKookClientServiceConfigurator configurator, Action<KookSocketConfig> configure, TokenType tokenType, string token, bool validateToken = true) Parameters configurator IKookClientServiceConfigurator KOOK 服务配置器。 configure Action<KookSocketConfig> 用于配置 KOOK 网关客户端的配置委托。 tokenType TokenType 令牌的类型。 token string 令牌。 validateToken bool 是否验证令牌。 Returns IKookClientConfigurator<KookSocketClient, KookSocketConfig> 配置了网关客户端及客户端托管服务的 KOOK 客户端配置器。 UseHostedSocketClient(IKookClientServiceConfigurator, Action<KookSocketConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) 配置指定的 KOOK 客户端配置器添加基于网关的客户端并添加客户端托管服务。 public static IKookClientConfigurator<KookSocketClient, KookSocketConfig> UseHostedSocketClient(this IKookClientServiceConfigurator configurator, Action<KookSocketConfig> configure, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) Parameters configurator IKookClientServiceConfigurator KOOK 服务配置器。 configure Action<KookSocketConfig> 用于配置 KOOK 网关客户端的配置委托。 tokenType Func<IServiceProvider, TokenType> 令牌的类型。 token Func<IServiceProvider, string> 令牌。 validateToken Func<IServiceProvider, bool> 是否验证令牌。 Returns IKookClientConfigurator<KookSocketClient, KookSocketConfig> 配置了网关客户端及客户端托管服务的 KOOK 客户端配置器。 UseHostedWebhookClient<TClient, TConfig>(IKookClientServiceConfigurator, Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>, TokenType, string, bool) 配置指定的基于 Webhook 的 KOOK 客户端配置器添加基于网关的客户端并添加客户端托管服务。 public static IKookClientConfigurator<TClient, TConfig> UseHostedWebhookClient<TClient, TConfig>(this IKookClientServiceConfigurator configurator, Func<IServiceProvider, IOptions<TConfig>, TClient> clientFactory, Action<TConfig> configure, TokenType tokenType, string token, bool validateToken = true) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters configurator IKookClientServiceConfigurator KOOK 服务配置器。 clientFactory Func<IServiceProvider, IOptions<TConfig>, TClient> 客户端创建委托。 configure Action<TConfig> 用于配置基于 Webhook 的 KOOK 网关客户端的配置委托。 tokenType TokenType 令牌的类型。 token string 令牌。 validateToken bool 是否验证令牌。 Returns IKookClientConfigurator<TClient, TConfig> 配置了基于 Webhook 的网关客户端及客户端托管服务的 KOOK 客户端配置器。 Type Parameters TClient 客户端的类型。 TConfig 配置的类型。 UseHostedWebhookClient<TClient, TConfig>(IKookClientServiceConfigurator, Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) 配置指定的基于 Webhook 的 KOOK 客户端配置器添加基于网关的客户端并添加客户端托管服务。 public static IKookClientConfigurator<TClient, TConfig> UseHostedWebhookClient<TClient, TConfig>(this IKookClientServiceConfigurator configurator, Func<IServiceProvider, IOptions<TConfig>, TClient> clientFactory, Action<TConfig> configure, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters configurator IKookClientServiceConfigurator KOOK 服务配置器。 clientFactory Func<IServiceProvider, IOptions<TConfig>, TClient> 客户端创建委托。 configure Action<TConfig> 用于配置基于 Webhook 的 KOOK 网关客户端的配置委托。 tokenType Func<IServiceProvider, TokenType> 令牌的类型。 token Func<IServiceProvider, string> 令牌。 validateToken Func<IServiceProvider, bool> 是否验证令牌。 Returns IKookClientConfigurator<TClient, TConfig> 配置了基于 Webhook 的网关客户端及客户端托管服务的 KOOK 客户端配置器。 Type Parameters TClient 客户端的类型。 TConfig 配置的类型。"
  },
  "api/Kook.Net.Hosting.KookClientHostExtensions.html": {
    "href": "api/Kook.Net.Hosting.KookClientHostExtensions.html",
    "title": "Class KookClientHostExtensions | Kook.Net 文档",
    "keywords": "Class KookClientHostExtensions Namespace Kook.Net.Hosting Assembly Kook.Net.Hosting.dll 提供用于与 Microsoft.Extensions.Hosting 集成，注册与配置 Kook.Net 客户端作为服务的扩展方法。 public static class KookClientHostExtensions Inheritance object KookClientHostExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddHostedKookRestClient(IServiceCollection, KookRestConfig, TokenType, string, bool) 向指定的 IServiceCollection 添加 KookRestClient 客户端，并添加包装为 IHostedService 的服务。 public static IServiceCollection AddHostedKookRestClient(this IServiceCollection services, KookRestConfig config, TokenType tokenType, string token, bool validateToken = true) Parameters services IServiceCollection 要向其添加 KOOK REST 客户端及服务的服务集合。 config KookRestConfig 用于配置 KOOK REST 客户端的配置。 tokenType TokenType 令牌的类型。 token string 令牌。 validateToken bool 是否在登录前验证令牌。 Returns IServiceCollection 添加了 KOOK REST 客户端及服务的服务集合。 AddHostedKookRestClient(IServiceCollection, KookRestConfig, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) 向指定的 IServiceCollection 添加 KookRestClient 客户端，并添加包装为 IHostedService 的服务。 public static IServiceCollection AddHostedKookRestClient(this IServiceCollection services, KookRestConfig config, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) Parameters services IServiceCollection 要向其添加 KOOK REST 客户端及服务的服务集合。 config KookRestConfig 用于配置 KOOK REST 客户端的配置。 tokenType Func<IServiceProvider, TokenType> 令牌的类型。 token Func<IServiceProvider, string> 令牌。 validateToken Func<IServiceProvider, bool> 是否在登录前验证令牌。 Returns IServiceCollection 添加了 KOOK REST 客户端及服务的服务集合。 AddHostedKookRestClient(IServiceCollection, Action<KookRestConfig>, TokenType, string, bool) 向指定的 IServiceCollection 添加 KookRestClient 客户端，并添加包装为 IHostedService 的服务。 public static IServiceCollection AddHostedKookRestClient(this IServiceCollection services, Action<KookRestConfig> configure, TokenType tokenType, string token, bool validateToken = true) Parameters services IServiceCollection 要向其添加 KOOK REST 客户端及服务的服务集合。 configure Action<KookRestConfig> 用于配置 KOOK REST 客户端的配置委托。 tokenType TokenType 令牌的类型。 token string 令牌。 validateToken bool 是否在登录前验证令牌。 Returns IServiceCollection 添加了 KOOK REST 客户端及服务的服务集合。 AddHostedKookRestClient(IServiceCollection, Action<KookRestConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) 向指定的 IServiceCollection 添加 KookRestClient 客户端，并添加包装为 IHostedService 的服务。 public static IServiceCollection AddHostedKookRestClient(this IServiceCollection services, Action<KookRestConfig> configure, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) Parameters services IServiceCollection 要向其添加 KOOK REST 客户端及服务的服务集合。 configure Action<KookRestConfig> 用于配置 KOOK REST 客户端的配置委托。 tokenType Func<IServiceProvider, TokenType> 令牌的类型。 token Func<IServiceProvider, string> 令牌。 validateToken Func<IServiceProvider, bool> 是否在登录前验证令牌。 Returns IServiceCollection 添加了 KOOK REST 客户端及服务的服务集合。 AddHostedKookSocketClient(IServiceCollection, KookSocketConfig, TokenType, string, bool) 向指定的 IServiceCollection 添加 KookSocketClient 客户端，并添加包装为 IHostedService 的服务。 public static IServiceCollection AddHostedKookSocketClient(this IServiceCollection services, KookSocketConfig config, TokenType tokenType, string token, bool validateToken = true) Parameters services IServiceCollection 要向其添加 KOOK 网关客户端及服务的服务集合。 config KookSocketConfig 用于配置 KOOK 网关客户端的配置。 tokenType TokenType 令牌的类型。 token string 令牌。 validateToken bool 是否在登录前验证令牌。 Returns IServiceCollection 添加了 KOOK 网关客户端及服务的服务集合。 AddHostedKookSocketClient(IServiceCollection, KookSocketConfig, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) 向指定的 IServiceCollection 添加 KookSocketClient 客户端，并添加包装为 IHostedService 的服务。 public static IServiceCollection AddHostedKookSocketClient(this IServiceCollection services, KookSocketConfig config, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) Parameters services IServiceCollection 要向其添加 KOOK 网关客户端及服务的服务集合。 config KookSocketConfig 用于配置 KOOK 网关客户端的配置。 tokenType Func<IServiceProvider, TokenType> 令牌的类型。 token Func<IServiceProvider, string> 令牌。 validateToken Func<IServiceProvider, bool> 是否在登录前验证令牌。 Returns IServiceCollection 添加了 KOOK 网关客户端及服务的服务集合。 AddHostedKookSocketClient(IServiceCollection, Action<KookSocketConfig>, TokenType, string, bool) 向指定的 IServiceCollection 添加 KookSocketClient 客户端，并添加包装为 IHostedService 的服务。 public static IServiceCollection AddHostedKookSocketClient(this IServiceCollection services, Action<KookSocketConfig> configure, TokenType tokenType, string token, bool validateToken = true) Parameters services IServiceCollection 要向其添加 KOOK 网关客户端及服务的服务集合。 configure Action<KookSocketConfig> 用于配置 KOOK 网关客户端的配置委托。 tokenType TokenType 令牌的类型。 token string 令牌。 validateToken bool 是否在登录前验证令牌。 Returns IServiceCollection 添加了 KOOK 网关客户端及服务的服务集合。 AddHostedKookSocketClient(IServiceCollection, Action<KookSocketConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) 向指定的 IServiceCollection 添加 KookSocketClient 客户端，并添加包装为 IHostedService 的服务。 public static IServiceCollection AddHostedKookSocketClient(this IServiceCollection services, Action<KookSocketConfig> configure, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) Parameters services IServiceCollection 要向其添加 KOOK 网关客户端及服务的服务集合。 configure Action<KookSocketConfig> 用于配置 KOOK 网关客户端的配置委托。 tokenType Func<IServiceProvider, TokenType> 令牌的类型。 token Func<IServiceProvider, string> 令牌。 validateToken Func<IServiceProvider, bool> 是否在登录前验证令牌。 Returns IServiceCollection 添加了 KOOK 网关客户端及服务的服务集合。 AddHostedKookWebhookClient<TClient, TConfig>(IServiceCollection, Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>, TokenType, string, bool) 向指定的 IServiceCollection 添加 KookWebhookClient 客户端，并添加包装为 IHostedService 的服务。 public static IServiceCollection AddHostedKookWebhookClient<TClient, TConfig>(this IServiceCollection services, Func<IServiceProvider, IOptions<TConfig>, TClient> clientFactory, Action<TConfig> configure, TokenType tokenType, string token, bool validateToken = true) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters services IServiceCollection 要向其添加基于 Webhook 的 KOOK 网关客户端及服务的服务集合。 clientFactory Func<IServiceProvider, IOptions<TConfig>, TClient> 客户端创建委托。 configure Action<TConfig> 用于配置基于 Webhook 的 KOOK 网关客户端的配置委托。 tokenType TokenType 令牌的类型。 token string 令牌。 validateToken bool 是否在登录前验证令牌。 Returns IServiceCollection 添加了基于 Webhook 的 KOOK 网关客户端及服务的服务集合。 Type Parameters TClient 客户端的类型。 TConfig 配置的类型。 AddHostedKookWebhookClient<TClient, TConfig>(IServiceCollection, Func<IServiceProvider, IOptions<TConfig>, TClient>, Action<TConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) 向指定的 IServiceCollection 添加 KookWebhookClient 客户端，并添加包装为 IHostedService 的服务。 public static IServiceCollection AddHostedKookWebhookClient<TClient, TConfig>(this IServiceCollection services, Func<IServiceProvider, IOptions<TConfig>, TClient> clientFactory, Action<TConfig> configure, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters services IServiceCollection 要向其添加基于 Webhook 的 KOOK 网关客户端及服务的服务集合。 clientFactory Func<IServiceProvider, IOptions<TConfig>, TClient> 客户端创建委托。 configure Action<TConfig> 用于配置基于 Webhook 的 KOOK 网关客户端的配置委托。 tokenType Func<IServiceProvider, TokenType> 令牌的类型。 token Func<IServiceProvider, string> 令牌。 validateToken Func<IServiceProvider, bool> 是否在登录前验证令牌。 Returns IServiceCollection 添加了基于 Webhook 的 KOOK 网关客户端及服务的服务集合。 Type Parameters TClient 客户端的类型。 TConfig 配置的类型。 AddHostedKookWebhookClient<TClient, TConfig>(IServiceCollection, Func<IServiceProvider, TConfig, TClient>, TConfig, TokenType, string, bool) 向指定的 IServiceCollection 添加 KookWebhookClient 客户端，并添加包装为 IHostedService 的服务。 public static IServiceCollection AddHostedKookWebhookClient<TClient, TConfig>(this IServiceCollection services, Func<IServiceProvider, TConfig, TClient> clientFactory, TConfig config, TokenType tokenType, string token, bool validateToken = true) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters services IServiceCollection 要向其添加基于 Webhook 的 KOOK 网关客户端及服务的服务集合。 clientFactory Func<IServiceProvider, TConfig, TClient> 客户端创建委托。 config TConfig 用于配置基于 Webhook 的 KOOK 网关客户端的配置。 tokenType TokenType 令牌的类型。 token string 令牌。 validateToken bool 是否在登录前验证令牌。 Returns IServiceCollection 添加了基于 Webhook 的 KOOK 网关客户端及服务的服务集合。 Type Parameters TClient 客户端的类型。 TConfig 配置的类型。 AddHostedKookWebhookClient<TClient, TConfig>(IServiceCollection, Func<IServiceProvider, TConfig, TClient>, TConfig, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) 向指定的 IServiceCollection 添加 KookWebhookClient 客户端，并添加包装为 IHostedService 的服务。 public static IServiceCollection AddHostedKookWebhookClient<TClient, TConfig>(this IServiceCollection services, Func<IServiceProvider, TConfig, TClient> clientFactory, TConfig config, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) where TClient : KookWebhookClient where TConfig : KookWebhookConfig Parameters services IServiceCollection 要向其添加基于 Webhook 的 KOOK 网关客户端及服务的服务集合。 clientFactory Func<IServiceProvider, TConfig, TClient> 客户端创建委托。 config TConfig 用于配置基于 Webhook 的 KOOK 网关客户端的配置。 tokenType Func<IServiceProvider, TokenType> 令牌的类型。 token Func<IServiceProvider, string> 令牌。 validateToken Func<IServiceProvider, bool> 是否在登录前验证令牌。 Returns IServiceCollection 添加了基于 Webhook 的 KOOK 网关客户端及服务的服务集合。 Type Parameters TClient 客户端的类型。 TConfig 配置的类型。"
  },
  "api/Kook.Net.Hosting.html": {
    "href": "api/Kook.Net.Hosting.html",
    "title": "Namespace Kook.Net.Hosting | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Hosting Classes KookClientConfiguratorExtensions 提供用于配置 IKookClientConfigurator<TClient, TConfig> 添加客户端托管服务的扩展方法。 KookClientHostExtensions 提供用于与 Microsoft.Extensions.Hosting 集成，注册与配置 Kook.Net 客户端作为服务的扩展方法。"
  },
  "api/Kook.Net.HttpException.html": {
    "href": "api/Kook.Net.HttpException.html",
    "title": "Class HttpException | Kook.Net 文档",
    "keywords": "Class HttpException Namespace Kook.Net Assembly Kook.Net.Core.dll 当处理 KOOK HTTP 请求时发生错误时引发的异常。 public class HttpException : Exception, ISerializable Inheritance object Exception HttpException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors HttpException(HttpStatusCode, IRequest, KookErrorCode?, string?, KookJsonError[]?) 初始化一个 HttpException 类的新实例。 public HttpException(HttpStatusCode httpCode, IRequest request, KookErrorCode? kookCode = null, string? reason = null, KookJsonError[]? errors = null) Parameters httpCode HttpStatusCode 返回的 HTTP 状态码。 request IRequest 引发异常前发送的请求。 kookCode KookErrorCode? 由 KOOK 返回的 JSON 负载中解析出的状态码。 reason string 引发异常的原因。 errors KookJsonError[] 描述请求错误的所有 JSON 错误。 Properties Errors 获取描述请求失败原因的所有 JSON 错误。 public IReadOnlyCollection<KookJsonError> Errors { get; } Property Value IReadOnlyCollection<KookJsonError> HttpCode 获取 KOOK 返回的 HTTP 状态码。 public HttpStatusCode HttpCode { get; } Property Value HttpStatusCode KookCode 获取由 KOOK 返回的 JSON 负载中的错误代码；也有可能是表示操作成功的代码； 如果无法从响应中解析出错误代码，则为 null。 public KookErrorCode? KookCode { get; } Property Value KookErrorCode? Reason 获取异常的原因；也有可能是表示操作成功的消息；如果无法从响应中解析出原因，则为 null。 public string? Reason { get; } Property Value string Request 获取用于发送请求的请求对象。 public IRequest Request { get; } Property Value IRequest"
  },
  "api/Kook.Net.IRequest.html": {
    "href": "api/Kook.Net.IRequest.html",
    "title": "Interface IRequest | Kook.Net 文档",
    "keywords": "Interface IRequest Namespace Kook.Net Assembly Kook.Net.Core.dll 表示一个要发送到 KOOK 的通用的请求。 public interface IRequest Properties Options 获取发送请求时要使用的选项。 RequestOptions Options { get; } Property Value RequestOptions TimeoutAt 获取请求在超时之前应等待的时间。 DateTimeOffset? TimeoutAt { get; } Property Value DateTimeOffset?"
  },
  "api/Kook.Net.Queue.BaseMessageQueue.html": {
    "href": "api/Kook.Net.Queue.BaseMessageQueue.html",
    "title": "Class BaseMessageQueue | Kook.Net 文档",
    "keywords": "Class BaseMessageQueue Namespace Kook.Net.Queue Assembly Kook.Net.Core.dll 表示一个通用的消息队列抽象类。 public abstract class BaseMessageQueue : IMessageQueue Inheritance object BaseMessageQueue Implements IMessageQueue Derived SynchronousImmediateMessageQueue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseMessageQueue(Func<JsonElement, Task>) 初始化一个 BaseMessageQueue 类的新实例。 protected BaseMessageQueue(Func<JsonElement, Task> eventHandler) Parameters eventHandler Func<JsonElement, Task> 用于处理消息的事件处理程序。 Properties EventHandler 获取消息队列的事件处理程序。 protected Func<JsonElement, Task> EventHandler { get; } Property Value Func<JsonElement, Task> Methods EnqueueAsync(JsonElement, int, CancellationToken) 将网关消息添加到队列中。 public abstract Task EnqueueAsync(JsonElement payload, int sequence, CancellationToken cancellationToken = default) Parameters payload JsonElement 网关消息的有效负载。 sequence int 网关消息的序号。 cancellationToken CancellationToken 用于取消该操作的取消令牌。 Returns Task 表示一个异步入队操作的任务。 StartAsync(CancellationToken) 启动消息队列的处理。 public abstract Task StartAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken 用于取消该操作的取消令牌。 Returns Task 表示一个异步启动操作的任务。 StopAsync(CancellationToken) 停止消息队列的处理。 public abstract Task StopAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken 用于取消该操作的取消令牌。 Returns Task 表示一个异步停止操作的任务。"
  },
  "api/Kook.Net.Queue.IMessageQueue.html": {
    "href": "api/Kook.Net.Queue.IMessageQueue.html",
    "title": "Interface IMessageQueue | Kook.Net 文档",
    "keywords": "Interface IMessageQueue Namespace Kook.Net.Queue Assembly Kook.Net.Core.dll 表示一个消息队列，用于从 KOOK 网关接收并处理事件。 public interface IMessageQueue Methods EnqueueAsync(JsonElement, int, CancellationToken) 将网关消息添加到队列中。 Task EnqueueAsync(JsonElement payload, int sequence, CancellationToken cancellationToken = default) Parameters payload JsonElement 网关消息的有效负载。 sequence int 网关消息的序号。 cancellationToken CancellationToken 用于取消该操作的取消令牌。 Returns Task 表示一个异步入队操作的任务。"
  },
  "api/Kook.Net.Queue.InMemory.InMemoryMessageQueueProvider.html": {
    "href": "api/Kook.Net.Queue.InMemory.InMemoryMessageQueueProvider.html",
    "title": "Class InMemoryMessageQueueProvider | Kook.Net 文档",
    "keywords": "Class InMemoryMessageQueueProvider Namespace Kook.Net.Queue.InMemory Assembly Kook.Net.MessageQueue.InMemory.dll 表示一个默认的使用内存队列的 MessageQueueProvider，用于创建 InMemoryMessageQueue 实例。 public static class InMemoryMessageQueueProvider Inheritance object InMemoryMessageQueueProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance 创建一个新的用于创建默认的使用内存队列的 InMemoryMessageQueue 实例的委托。 public static readonly MessageQueueProvider Instance Field Value MessageQueueProvider"
  },
  "api/Kook.Net.Queue.InMemory.html": {
    "href": "api/Kook.Net.Queue.InMemory.html",
    "title": "Namespace Kook.Net.Queue.InMemory | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Queue.InMemory Classes InMemoryMessageQueueProvider 表示一个默认的使用内存队列的 MessageQueueProvider，用于创建 InMemoryMessageQueue 实例。"
  },
  "api/Kook.Net.Queue.MassTransit.DefaultMassTransitMessageQueueProvider.html": {
    "href": "api/Kook.Net.Queue.MassTransit.DefaultMassTransitMessageQueueProvider.html",
    "title": "Class DefaultMassTransitMessageQueueProvider | Kook.Net 文档",
    "keywords": "Class DefaultMassTransitMessageQueueProvider Namespace Kook.Net.Queue.MassTransit Assembly Kook.Net.MessageQueue.MassTransit.dll 表示一个默认的使用 MassTransit 消息队列的 MessageQueueProvider，用于创建 MassTransitMessageQueue 实例。 public class DefaultMassTransitMessageQueueProvider Inheritance object DefaultMassTransitMessageQueueProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(IBus) 创建一个新的用于创建默认的使用 MassTransit 消息队列的 MassTransitMessageQueue 实例的委托。 public static MessageQueueProvider Create(IBus bus) Parameters bus IBus 用于创建消息队列的 MassTransit 消息总线。 Returns MessageQueueProvider"
  },
  "api/Kook.Net.Queue.MassTransit.KookMassTransitMessageQueueExtensions.html": {
    "href": "api/Kook.Net.Queue.MassTransit.KookMassTransitMessageQueueExtensions.html",
    "title": "Class KookMassTransitMessageQueueExtensions | Kook.Net 文档",
    "keywords": "Class KookMassTransitMessageQueueExtensions Namespace Kook.Net.Queue.MassTransit Assembly Kook.Net.MessageQueue.MassTransit.dll 提供用于配置 IKookClientConfigurator<TClient, TConfig> 使用 MassTransit 消息队列的扩展方法。 public static class KookMassTransitMessageQueueExtensions Inheritance object KookMassTransitMessageQueueExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddMessageQueueMassTransitConsumer(IBusRegistrationConfigurator) 配置一个 MassTransit 消息队列消费者到 MassTransit.IBusRegistrationConfigurator。 public static IBusRegistrationConfigurator AddMessageQueueMassTransitConsumer(this IBusRegistrationConfigurator configurator) Parameters configurator IBusRegistrationConfigurator MassTransit 配置器。 Returns IBusRegistrationConfigurator 配置了 MassTransit 消息队列消费者的配置器。 UseMassTransitMessageQueue<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>) 配置一个 KOOK 客户端配置器使用 MassTransit 消息队列。 public static IKookClientConfigurator<TClient, TConfig> UseMassTransitMessageQueue<TClient, TConfig>(this IKookClientConfigurator<TClient, TConfig> configurator) where TClient : BaseSocketClient where TConfig : KookSocketConfig Parameters configurator IKookClientConfigurator<TClient, TConfig> KOOK 客户端配置器。 Returns IKookClientConfigurator<TClient, TConfig> 配置了 MassTransit 消息队列的配置器。 Type Parameters TClient 客户端的类型。 TConfig 配置的类型。 UseMassTransitMessageQueue<TClient, TConfig>(IKookClientConfigurator<TClient, TConfig>, Action<IBusRegistrationConfigurator>) 配置一个 KOOK 客户端配置器使用 MassTransit 消息队列。 public static IKookClientConfigurator<TClient, TConfig> UseMassTransitMessageQueue<TClient, TConfig>(this IKookClientConfigurator<TClient, TConfig> configurator, Action<IBusRegistrationConfigurator> massTransitConfigure) where TClient : BaseSocketClient where TConfig : KookSocketConfig Parameters configurator IKookClientConfigurator<TClient, TConfig> KOOK 客户端配置器。 massTransitConfigure Action<IBusRegistrationConfigurator> MassTransit 配置操作。 Returns IKookClientConfigurator<TClient, TConfig> 配置了 MassTransit 消息队列的配置器。 Type Parameters TClient 客户端的类型。 TConfig 配置的类型。"
  },
  "api/Kook.Net.Queue.MassTransit.html": {
    "href": "api/Kook.Net.Queue.MassTransit.html",
    "title": "Namespace Kook.Net.Queue.MassTransit | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Queue.MassTransit Classes DefaultMassTransitMessageQueueProvider 表示一个默认的使用 MassTransit 消息队列的 MessageQueueProvider，用于创建 MassTransitMessageQueue 实例。 KookMassTransitMessageQueueExtensions 提供用于配置 IKookClientConfigurator<TClient, TConfig> 使用 MassTransit 消息队列的扩展方法。"
  },
  "api/Kook.Net.Queue.MessageQueueProvider.html": {
    "href": "api/Kook.Net.Queue.MessageQueueProvider.html",
    "title": "Delegate MessageQueueProvider | Kook.Net 文档",
    "keywords": "Delegate MessageQueueProvider Namespace Kook.Net.Queue Assembly Kook.Net.Core.dll 表示一个提供新的 IMessageQueue 实例的委托。 public delegate BaseMessageQueue MessageQueueProvider(Func<JsonElement, Task> eventHandler) Parameters eventHandler Func<JsonElement, Task> 表示一个提供新的 实例的委托。 Returns BaseMessageQueue 表示一个提供新的 实例的委托。"
  },
  "api/Kook.Net.Queue.SynchronousImmediate.SynchronousImmediateMessageQueue.html": {
    "href": "api/Kook.Net.Queue.SynchronousImmediate.SynchronousImmediateMessageQueue.html",
    "title": "Class SynchronousImmediateMessageQueue | Kook.Net 文档",
    "keywords": "Class SynchronousImmediateMessageQueue Namespace Kook.Net.Queue.SynchronousImmediate Assembly Kook.Net.Core.dll 表示一个同步处理消息队列。 public class SynchronousImmediateMessageQueue : BaseMessageQueue, IMessageQueue Inheritance object BaseMessageQueue SynchronousImmediateMessageQueue Implements IMessageQueue Inherited Members BaseMessageQueue.EventHandler object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 此消息队列会在接收到网关事件后调用 EnqueueAsync(JsonElement, int, CancellationToken) 时立即使用构造函数中传入的 eventHandler 委托同步进行处理，处理完成后，该方法才会返回。 Constructors SynchronousImmediateMessageQueue(Func<JsonElement, Task>) 初始化一个 BaseMessageQueue 类的新实例。 public SynchronousImmediateMessageQueue(Func<JsonElement, Task> eventHandler) Parameters eventHandler Func<JsonElement, Task> 用于处理消息的事件处理程序。 Methods EnqueueAsync(JsonElement, int, CancellationToken) 将网关消息添加到队列中。 public override Task EnqueueAsync(JsonElement payload, int sequence, CancellationToken cancellationToken = default) Parameters payload JsonElement 网关消息的有效负载。 sequence int 网关消息的序号。 cancellationToken CancellationToken 用于取消该操作的取消令牌。 Returns Task 表示一个异步入队操作的任务。 StartAsync(CancellationToken) 启动消息队列的处理。 public override Task StartAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken 用于取消该操作的取消令牌。 Returns Task 表示一个异步启动操作的任务。 StopAsync(CancellationToken) 停止消息队列的处理。 public override Task StopAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken 用于取消该操作的取消令牌。 Returns Task 表示一个异步停止操作的任务。"
  },
  "api/Kook.Net.Queue.SynchronousImmediate.SynchronousImmediateMessageQueueProvider.html": {
    "href": "api/Kook.Net.Queue.SynchronousImmediate.SynchronousImmediateMessageQueueProvider.html",
    "title": "Class SynchronousImmediateMessageQueueProvider | Kook.Net 文档",
    "keywords": "Class SynchronousImmediateMessageQueueProvider Namespace Kook.Net.Queue.SynchronousImmediate Assembly Kook.Net.Core.dll 表示一个默认的使用同步处理机制的 MessageQueueProvider，用于创建 SynchronousImmediateMessageQueue 实例。 public static class SynchronousImmediateMessageQueueProvider Inheritance object SynchronousImmediateMessageQueueProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance 创建一个新的用于创建默认的使用同步处理机制的 SynchronousImmediateMessageQueue 实例的委托。 public static readonly MessageQueueProvider Instance Field Value MessageQueueProvider Exceptions PlatformNotSupportedException 当默认的 SynchronousImmediateMessageQueueProvider 在当前平台上不受支持时引发。"
  },
  "api/Kook.Net.Queue.SynchronousImmediate.html": {
    "href": "api/Kook.Net.Queue.SynchronousImmediate.html",
    "title": "Namespace Kook.Net.Queue.SynchronousImmediate | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Queue.SynchronousImmediate Classes SynchronousImmediateMessageQueue 表示一个同步处理消息队列。 SynchronousImmediateMessageQueueProvider 表示一个默认的使用同步处理机制的 MessageQueueProvider，用于创建 SynchronousImmediateMessageQueue 实例。"
  },
  "api/Kook.Net.Queue.html": {
    "href": "api/Kook.Net.Queue.html",
    "title": "Namespace Kook.Net.Queue | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Queue Classes BaseMessageQueue 表示一个通用的消息队列抽象类。 Interfaces IMessageQueue 表示一个消息队列，用于从 KOOK 网关接收并处理事件。 Delegates MessageQueueProvider 表示一个提供新的 IMessageQueue 实例的委托。"
  },
  "api/Kook.Net.RateLimitInfo.html": {
    "href": "api/Kook.Net.RateLimitInfo.html",
    "title": "Struct RateLimitInfo | Kook.Net 文档",
    "keywords": "Struct RateLimitInfo Namespace Kook.Net Assembly Kook.Net.Rest.dll 表示一个基于 REST 的速率限制信息。 public struct RateLimitInfo : IRateLimitInfo Implements IRateLimitInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Bucket 获取一个唯一的字符串，表示所遇到的限速桶（不包括路由路径中的主要参数）。 public readonly string? Bucket { get; } Property Value string Endpoint 获取此限速信息所属的终结点。 public readonly string Endpoint { get; } Property Value string IsGlobal 获取此限速信息是否为全局限速。 public readonly bool IsGlobal { get; } Property Value bool Lag 获取请求的延迟，用于支持计算限速重置的精确时间。 public readonly TimeSpan? Lag { get; } Property Value TimeSpan? Limit 获取在更新时限内可以进行的请求数量。 public readonly int? Limit { get; } Property Value int? Remaining 获取目前可以立即进行的请求数量。 public readonly int? Remaining { get; } Property Value int? ResetAfter 获取相对于此刻此限速重置的相对时间间隔。 public readonly TimeSpan? ResetAfter { get; } Property Value TimeSpan?"
  },
  "api/Kook.Net.RateLimitedException.html": {
    "href": "api/Kook.Net.RateLimitedException.html",
    "title": "Class RateLimitedException | Kook.Net 文档",
    "keywords": "Class RateLimitedException Namespace Kook.Net Assembly Kook.Net.Core.dll 表示一个由 KOOK 限制请求频率时引发的异常。 public class RateLimitedException : TimeoutException, ISerializable Inheritance object Exception SystemException TimeoutException RateLimitedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RateLimitedException(IRequest) 使用发送的 request 初始化 RateLimitedException 类的新实例。 public RateLimitedException(IRequest request) Parameters request IRequest 引发异常的请求。 Properties Request 获取引发此异常的请求对象。 public IRequest Request { get; } Property Value IRequest"
  },
  "api/Kook.Net.Rest.DefaultRestClientProvider.html": {
    "href": "api/Kook.Net.Rest.DefaultRestClientProvider.html",
    "title": "Class DefaultRestClientProvider | Kook.Net 文档",
    "keywords": "Class DefaultRestClientProvider Namespace Kook.Net.Rest Assembly Kook.Net.Rest.dll 表示一个默认的 RestClientProvider，用于创建 IRestClient 的默认实现的实例。 public static class DefaultRestClientProvider Inheritance object DefaultRestClientProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance 获取一个默认的 RestClientProvider 委托，用于创建 IRestClient 的默认实现的实例。 public static readonly RestClientProvider Instance Field Value RestClientProvider Methods Create(bool, IWebProxy?) 创建一个新的 RestClientProvider 委托。 public static RestClientProvider Create(bool useProxy = false, IWebProxy? webProxy = null) Parameters useProxy bool 是否使用系统代理。 webProxy IWebProxy 代理。 Returns RestClientProvider 一个新的 RestClientProvider 委托。"
  },
  "api/Kook.Net.Rest.IRestClient.html": {
    "href": "api/Kook.Net.Rest.IRestClient.html",
    "title": "Interface IRestClient | Kook.Net 文档",
    "keywords": "Interface IRestClient Namespace Kook.Net.Rest Assembly Kook.Net.Core.dll 表示一个通用的基于 RESTful API 的客户端。 public interface IRestClient : IDisposable Inherited Members IDisposable.Dispose() Methods SendAsync(HttpMethod, string, IReadOnlyDictionary<string, object>, CancellationToken, string?, IEnumerable<KeyValuePair<string, IEnumerable<string>>>?) 发送一个带有多部分数据参数的 RESTful API 请求。 Task<RestResponse> SendAsync(HttpMethod method, string endpoint, IReadOnlyDictionary<string, object> multipartParams, CancellationToken cancellationToken, string? reason = null, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? requestHeaders = null) Parameters method HttpMethod 用于发送此请求的方法。 endpoint string 要发送此请求的端点。 multipartParams IReadOnlyDictionary<string, object> 要发送的多部分数据参数。 cancellationToken CancellationToken 用于取消任务的取消令牌。 reason string 用于审计日志的操作原因。 requestHeaders IEnumerable<KeyValuePair<string, IEnumerable<string>>> 要随请求一起发送的附加标头。 Returns Task<RestResponse> 表示一个异步发送操作的任务。任务的结果包含请求的响应。 SendAsync(HttpMethod, string, string, CancellationToken, string?, IEnumerable<KeyValuePair<string, IEnumerable<string>>>?) 发送一个带有 JSON 请求体的 RESTful API 请求。 Task<RestResponse> SendAsync(HttpMethod method, string endpoint, string json, CancellationToken cancellationToken, string? reason = null, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? requestHeaders = null) Parameters method HttpMethod 用于发送此请求的方法。 endpoint string 要发送此请求的端点。 json string 要发送的 JSON 请求体。 cancellationToken CancellationToken 用于取消任务的取消令牌。 reason string 用于审计日志的操作原因。 requestHeaders IEnumerable<KeyValuePair<string, IEnumerable<string>>> 要随请求一起发送的附加标头。 Returns Task<RestResponse> 表示一个异步发送操作的任务。任务的结果包含请求的响应。 SendAsync(HttpMethod, string, CancellationToken, string?, IEnumerable<KeyValuePair<string, IEnumerable<string>>>?) 发送一个 RESTful API 请求。 Task<RestResponse> SendAsync(HttpMethod method, string endpoint, CancellationToken cancellationToken, string? reason = null, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? requestHeaders = null) Parameters method HttpMethod 用于发送此请求的方法。 endpoint string 要发送此请求的端点。 cancellationToken CancellationToken 用于取消任务的取消令牌。 reason string 用于审计日志的操作原因。 requestHeaders IEnumerable<KeyValuePair<string, IEnumerable<string>>> 要随请求一起发送的附加标头。 Returns Task<RestResponse> 表示一个异步发送操作的任务。任务的结果包含请求的响应。 SetCancellationToken(CancellationToken) 设置此客户端的取消令牌。 void SetCancellationToken(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken 用于取消任务的取消令牌。 SetHeader(string, string?) 设置此客户端的 HTTP 头部，这将应用于所有请求。 void SetHeader(string key, string? value) Parameters key string HTTP 头部的键。 value string HTTP 头部的值。"
  },
  "api/Kook.Net.Rest.RestClientProvider.html": {
    "href": "api/Kook.Net.Rest.RestClientProvider.html",
    "title": "Delegate RestClientProvider | Kook.Net 文档",
    "keywords": "Delegate RestClientProvider Namespace Kook.Net.Rest Assembly Kook.Net.Core.dll 表示一个用于创建 IRestClient 实例的委托。 public delegate IRestClient RestClientProvider(string baseUrl) Parameters baseUrl string 表示一个用于创建 实例的委托。 Returns IRestClient 表示一个用于创建 实例的委托。"
  },
  "api/Kook.Net.Rest.RestResponse.html": {
    "href": "api/Kook.Net.Rest.RestResponse.html",
    "title": "Struct RestResponse | Kook.Net 文档",
    "keywords": "Struct RestResponse Namespace Kook.Net.Rest Assembly Kook.Net.Core.dll 表示一个 RESTful API 请求的响应。 public struct RestResponse Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Headers 获取响应的头部。 public readonly Dictionary<string, string?> Headers { get; } Property Value Dictionary<string, string> MediaTypeHeader 获取响应的媒体类型头部。 public readonly MediaTypeHeaderValue? MediaTypeHeader { get; } Property Value MediaTypeHeaderValue StatusCode 获取响应的 HTTP 状态码。 public readonly HttpStatusCode StatusCode { get; } Property Value HttpStatusCode Stream 获取响应的流。 public readonly Stream Stream { get; } Property Value Stream"
  },
  "api/Kook.Net.Rest.html": {
    "href": "api/Kook.Net.Rest.html",
    "title": "Namespace Kook.Net.Rest | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Rest Classes DefaultRestClientProvider 表示一个默认的 RestClientProvider，用于创建 IRestClient 的默认实现的实例。 Structs RestResponse 表示一个 RESTful API 请求的响应。 Interfaces IRestClient 表示一个通用的基于 RESTful API 的客户端。 Delegates RestClientProvider 表示一个用于创建 IRestClient 实例的委托。"
  },
  "api/Kook.Net.Udp.DefaultUdpSocketProvider.html": {
    "href": "api/Kook.Net.Udp.DefaultUdpSocketProvider.html",
    "title": "Class DefaultUdpSocketProvider | Kook.Net 文档",
    "keywords": "Class DefaultUdpSocketProvider Namespace Kook.Net.Udp Assembly Kook.Net.WebSocket.dll 表示一个默认的 UdpSocketProvider，用于创建 IUdpSocket 的默认实现的实例。 public static class DefaultUdpSocketProvider Inheritance object DefaultUdpSocketProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance 获取一个默认的 UdpSocketProvider 委托，用于创建 IUdpSocket 的默认实现的实例。 public static readonly UdpSocketProvider Instance Field Value UdpSocketProvider"
  },
  "api/Kook.Net.Udp.IUdpSocket.html": {
    "href": "api/Kook.Net.Udp.IUdpSocket.html",
    "title": "Interface IUdpSocket | Kook.Net 文档",
    "keywords": "Interface IUdpSocket Namespace Kook.Net.Udp Assembly Kook.Net.Core.dll 表示一个通用的 UDP 套接字。 public interface IUdpSocket : IDisposable Inherited Members IDisposable.Dispose() Properties Port 获取 UDP 套接字的端口号。 ushort Port { get; } Property Value ushort Methods SendAsync(byte[], int, int) 发送数据报。 Task SendAsync(byte[] data, int index, int count) Parameters data byte[] 要发送的数据报的字节数组。 index int 要发送的数据报的字节数组的起始位置。 count int 要发送的数据报的字节数组的长度。 Returns Task 一个表示异步发送操作的任务。 SetCancellationToken(CancellationToken) 设置此客户端的取消令牌。 void SetCancellationToken(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken 用于取消任务的取消令牌。 SetDestination(string, int) 设置 UDP 套接字的目标通信端点，包括 IP 地址和端口号。 void SetDestination(string ip, int port) Parameters ip string 目标通信端点的 IP 地址。 port int 目标通信端点的端口号。 StartAsync() 启动套接字。 Task StartAsync() Returns Task 一个表示异步启动操作的任务。 StopAsync() 停止套接字。 Task StopAsync() Returns Task 一个表示异步停止操作的任务。 Events ReceivedDatagram 当接收到数据报时引发。 event Func<byte[], int, int, Task>? ReceivedDatagram Event Type Func<byte[], int, int, Task> Remarks 事件参数： byte[] 参数是接收到的数据报的字节数组。 int 参数是接收到的数据报的字节数组的起始位置。 int 参数是接收到的数据报的字节数组的长度。"
  },
  "api/Kook.Net.Udp.UdpSocketProvider.html": {
    "href": "api/Kook.Net.Udp.UdpSocketProvider.html",
    "title": "Delegate UdpSocketProvider | Kook.Net 文档",
    "keywords": "Delegate UdpSocketProvider Namespace Kook.Net.Udp Assembly Kook.Net.Core.dll 表示一个用于创建 IUdpSocket 实例的委托。 public delegate IUdpSocket UdpSocketProvider() Returns IUdpSocket 表示一个用于创建 实例的委托。"
  },
  "api/Kook.Net.Udp.html": {
    "href": "api/Kook.Net.Udp.html",
    "title": "Namespace Kook.Net.Udp | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Udp Classes DefaultUdpSocketProvider 表示一个默认的 UdpSocketProvider，用于创建 IUdpSocket 的默认实现的实例。 Interfaces IUdpSocket 表示一个通用的 UDP 套接字。 Delegates UdpSocketProvider 表示一个用于创建 IUdpSocket 实例的委托。"
  },
  "api/Kook.Net.WebSocketClosedException.html": {
    "href": "api/Kook.Net.WebSocketClosedException.html",
    "title": "Class WebSocketClosedException | Kook.Net 文档",
    "keywords": "Class WebSocketClosedException Namespace Kook.Net Assembly Kook.Net.Core.dll 表示一个由 KOOK 意外关闭 WebSocket 会话时引发的异常。 public class WebSocketClosedException : Exception, ISerializable Inheritance object Exception WebSocketClosedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WebSocketClosedException(int?, string?) 使用 KOOK 发送的关闭代码及原因初始化一个 WebSocketClosedException 类的新实例。 public WebSocketClosedException(int? closeCode, string? reason = null) Parameters closeCode int? 由 KOOK 发送的关闭代码。 reason string 中断的原因。 Properties CloseCode 获取由 KOOK 发送的关闭代码。 public int? CloseCode { get; } Property Value int? Reason 获取中断的原因。 public string? Reason { get; } Property Value string"
  },
  "api/Kook.Net.WebSockets.DefaultWebSocketProvider.html": {
    "href": "api/Kook.Net.WebSockets.DefaultWebSocketProvider.html",
    "title": "Class DefaultWebSocketProvider | Kook.Net 文档",
    "keywords": "Class DefaultWebSocketProvider Namespace Kook.Net.WebSockets Assembly Kook.Net.WebSocket.dll 表示一个默认的 WebSocketProvider，用于创建 IWebSocketClient 的默认实现的实例。 public static class DefaultWebSocketProvider Inheritance object DefaultWebSocketProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance 获取一个默认的 WebSocketProvider 委托，用于创建 IWebSocketClient 的默认实现的实例。 public static readonly WebSocketProvider Instance Field Value WebSocketProvider Methods Create(IWebProxy?) 创建一个新的 WebSocketProvider 委托。 public static WebSocketProvider Create(IWebProxy? useProxy = null) Parameters useProxy IWebProxy 是否使用系统代理。 Returns WebSocketProvider 一个新的 WebSocketProvider 委托。"
  },
  "api/Kook.Net.WebSockets.IWebSocketClient.html": {
    "href": "api/Kook.Net.WebSockets.IWebSocketClient.html",
    "title": "Interface IWebSocketClient | Kook.Net 文档",
    "keywords": "Interface IWebSocketClient Namespace Kook.Net.WebSockets Assembly Kook.Net.Core.dll 表示一个通用的 WebSocket 客户端。 public interface IWebSocketClient : IDisposable Inherited Members IDisposable.Dispose() Methods ConnectAsync(string) 连接到指定的主机。 Task ConnectAsync(string host) Parameters host string 要连接的主机。 Returns Task 一个表示异步连接操作的任务。 DisconnectAsync(int) 断开与主机的连接。 Task DisconnectAsync(int closeCode = 1000) Parameters closeCode int 要发送给对方主机的关闭代码。 Returns Task 一个表示异步断开操作的任务。 SendAsync(byte[], int, int, bool) 向对方主机发送文本消息。 Task SendAsync(byte[] data, int index, int count, bool isText) Parameters data byte[] 要发送的数据。 index int 要发送的数据的起始位置。 count int 要发送的数据的长度。 isText bool 发送的是否为文本消息。 Returns Task 一个表示异步发送操作的任务。 SetCancellationToken(CancellationToken) 设置此客户端的取消令牌。 void SetCancellationToken(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken 用于取消任务的取消令牌。 SetHeader(string, string) 设置一个将与未来请求一起发送的标头。 void SetHeader(string key, string value) Parameters key string 标头的键。 value string 标头的值。 SetKeepAliveInterval(TimeSpan) 设置此客户端的保持活动间隔。 void SetKeepAliveInterval(TimeSpan keepAliveInterval) Parameters keepAliveInterval TimeSpan 保持活动间隔。 Remarks 如果未调用此方法，则默认的保持活动间隔是 DefaultKeepAliveInterval。 See Also KeepAliveInterval Events BinaryMessage 当接收到二进制消息时触发。 event Func<byte[], int, int, Task>? BinaryMessage Event Type Func<byte[], int, int, Task> Remarks 事件参数： byte[] 参数是接收到的二进制消息的字节数组。 int 参数是接收到的二进制消息的字节数组的起始位置。 int 参数是接收到的二进制消息的字节数组的长度。 Closed 当 WebSocket 连接关闭时触发。 event Func<Exception, Task>? Closed Event Type Func<Exception, Task> Remarks 事件参数： Exception 参数是导致连接关闭的异常。 TextMessage 当接收到文本消息时触发。 event Func<string, Task>? TextMessage Event Type Func<string, Task> Remarks 事件参数： string 参数是接收到的文本消息的字符串。"
  },
  "api/Kook.Net.WebSockets.WebSocketProvider.html": {
    "href": "api/Kook.Net.WebSockets.WebSocketProvider.html",
    "title": "Delegate WebSocketProvider | Kook.Net 文档",
    "keywords": "Delegate WebSocketProvider Namespace Kook.Net.WebSockets Assembly Kook.Net.Core.dll 表示一个用于创建 IWebSocketClient 实例的委托。 public delegate IWebSocketClient WebSocketProvider() Returns IWebSocketClient 表示一个用于创建 实例的委托。"
  },
  "api/Kook.Net.WebSockets.html": {
    "href": "api/Kook.Net.WebSockets.html",
    "title": "Namespace Kook.Net.WebSockets | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.WebSockets Classes DefaultWebSocketProvider 表示一个默认的 WebSocketProvider，用于创建 IWebSocketClient 的默认实现的实例。 Interfaces IWebSocketClient 表示一个通用的 WebSocket 客户端。 Delegates WebSocketProvider 表示一个用于创建 IWebSocketClient 实例的委托。"
  },
  "api/Kook.Net.Webhooks.AspNet.DefaultAspNetWebhookProvider.html": {
    "href": "api/Kook.Net.Webhooks.AspNet.DefaultAspNetWebhookProvider.html",
    "title": "Class DefaultAspNetWebhookProvider | Kook.Net 文档",
    "keywords": "Class DefaultAspNetWebhookProvider Namespace Kook.Net.Webhooks.AspNet Assembly Kook.Net.Webhook.AspNet.dll 表示一个默认的使用 ASP.NET 的 WebhookProvider，用于创建 AspNetWebhookClient 实例。 public static class DefaultAspNetWebhookProvider Inheritance object DefaultAspNetWebhookProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance 一个创建默认的使用 ASP.NET 的 AspNetWebhookClient 实例的委托。 public static readonly WebhookProvider Instance Field Value WebhookProvider Methods Create() 创建一个新的用于创建默认的使用 ASP.NET 的 AspNetWebhookClient 实例的委托。 public static WebhookProvider Create() Returns WebhookProvider 一个用于创建默认的使用 ASP.NET 的 AspNetWebhookClient 实例的委托。 Exceptions PlatformNotSupportedException 当默认的 DefaultAspNetWebhookProvider 在当前平台上不受支持时引发。"
  },
  "api/Kook.Net.Webhooks.AspNet.html": {
    "href": "api/Kook.Net.Webhooks.AspNet.html",
    "title": "Namespace Kook.Net.Webhooks.AspNet | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Webhooks.AspNet Classes DefaultAspNetWebhookProvider 表示一个默认的使用 ASP.NET 的 WebhookProvider，用于创建 AspNetWebhookClient 实例。"
  },
  "api/Kook.Net.Webhooks.HttpListener.DefaultHttpListenerWebhookProvider.html": {
    "href": "api/Kook.Net.Webhooks.HttpListener.DefaultHttpListenerWebhookProvider.html",
    "title": "Class DefaultHttpListenerWebhookProvider | Kook.Net 文档",
    "keywords": "Class DefaultHttpListenerWebhookProvider Namespace Kook.Net.Webhooks.HttpListener Assembly Kook.Net.Webhook.HttpListener.dll 表示一个默认的使用 HTTP 监听器的 WebhookProvider，用于创建 HttpListenerWebhookClient 实例。 public static class DefaultHttpListenerWebhookProvider Inheritance object DefaultHttpListenerWebhookProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance 一个创建默认的使用 HTTP 监听器的 HttpListenerWebhookClient 实例的委托。 public static readonly WebhookProvider Instance Field Value WebhookProvider Methods Create() 创建一个新的用于创建默认的使用 HTTP 监听器的 HttpListenerWebhookClient 实例的委托。 public static WebhookProvider Create() Returns WebhookProvider 一个用于创建默认的使用 HTTP 监听器的 HttpListenerWebhookClient 实例的委托。 Exceptions PlatformNotSupportedException 当默认的 DefaultHttpListenerWebhookProvider 在当前平台上不受支持时引发。"
  },
  "api/Kook.Net.Webhooks.HttpListener.html": {
    "href": "api/Kook.Net.Webhooks.HttpListener.html",
    "title": "Namespace Kook.Net.Webhooks.HttpListener | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Webhooks.HttpListener Classes DefaultHttpListenerWebhookProvider 表示一个默认的使用 HTTP 监听器的 WebhookProvider，用于创建 HttpListenerWebhookClient 实例。"
  },
  "api/Kook.Net.Webhooks.IWebhookClient.html": {
    "href": "api/Kook.Net.Webhooks.IWebhookClient.html",
    "title": "Interface IWebhookClient | Kook.Net 文档",
    "keywords": "Interface IWebhookClient Namespace Kook.Net.Webhooks Assembly Kook.Net.Webhook.dll 表示一个通用的基于 Webhook 的网关客户端。 public interface IWebhookClient : IDisposable Inherited Members IDisposable.Dispose() Methods HandleBinaryMessageAsync(byte[], int, int) 处理二进制消息。 Task<string?> HandleBinaryMessageAsync(byte[] data, int index, int count) Parameters data byte[] 消息的二进制数据。 index int 数据的起始索引。 count int 数据的长度。 Returns Task<string> 一个表示异步操作的任务。任务的结果是一个字符串，表示响应消息。 HandleTextMessageAsync(string) 处理文本消息。 Task<string?> HandleTextMessageAsync(string requestBody) Parameters requestBody string 请求体。 Returns Task<string> 一个表示异步操作的任务。任务的结果是一个字符串，表示响应消息。 Events BinaryMessage 当接收到二进制消息时引发。 event Func<byte[], int, int, Task<string?>>? BinaryMessage Event Type Func<byte[], int, int, Task<string>> Remarks 事件参数： byte[] 参数是消息的二进制数据。 int 参数是数据的起始索引。 int 参数是数据的长度。 事件返回值：返回一个表示异步操作的任务。任务的结果是一个字符串，表示响应消息。 Closed 当连接关闭时引发。 event Func<Exception, Task>? Closed Event Type Func<Exception, Task> Remarks 事件参数： Exception 参数是引发关闭的异常。 TextMessage 当接收到文本消息时引发。 event Func<string, Task<string?>>? TextMessage Event Type Func<string, Task<string>> Remarks 事件参数： string 参数是消息的文本。 事件返回值：返回一个表示异步操作的任务。任务的结果是一个字符串，表示响应消息。"
  },
  "api/Kook.Net.Webhooks.WebhookProvider.html": {
    "href": "api/Kook.Net.Webhooks.WebhookProvider.html",
    "title": "Delegate WebhookProvider | Kook.Net 文档",
    "keywords": "Delegate WebhookProvider Namespace Kook.Net.Webhooks Assembly Kook.Net.Webhook.dll 表示一个提供新的 IWebhookClient 实例的委托。 public delegate IWebhookClient WebhookProvider() Returns IWebhookClient 表示一个提供新的 实例的委托。"
  },
  "api/Kook.Net.Webhooks.html": {
    "href": "api/Kook.Net.Webhooks.html",
    "title": "Namespace Kook.Net.Webhooks | Kook.Net 文档",
    "keywords": "Namespace Kook.Net.Webhooks Interfaces IWebhookClient 表示一个通用的基于 Webhook 的网关客户端。 Delegates WebhookProvider 表示一个提供新的 IWebhookClient 实例的委托。"
  },
  "api/Kook.Net.html": {
    "href": "api/Kook.Net.html",
    "title": "Namespace Kook.Net | Kook.Net 文档",
    "keywords": "Namespace Kook.Net Classes BucketId 表示一个限速桶。 HttpException 当处理 KOOK HTTP 请求时发生错误时引发的异常。 RateLimitedException 表示一个由 KOOK 限制请求频率时引发的异常。 WebSocketClosedException 表示一个由 KOOK 意外关闭 WebSocket 会话时引发的异常。 Structs RateLimitInfo 表示一个基于 REST 的速率限制信息。 Interfaces IRequest 表示一个要发送到 KOOK 的通用的请求。"
  },
  "api/Kook.NotImplementedEmbed.html": {
    "href": "api/Kook.NotImplementedEmbed.html",
    "title": "Struct NotImplementedEmbed | Kook.Net 文档",
    "keywords": "Struct NotImplementedEmbed Namespace Kook Assembly Kook.Net.Core.dll 表示一个消息中未能被解析为已知的强类型的嵌入式内容。 public struct NotImplementedEmbed : IEmbed Implements IEmbed Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties JsonNode 获取嵌入式内容的原始 JSON。 public readonly JsonNode JsonNode { get; } Property Value JsonNode RawType 获取嵌入式内容的类型的原始值。 public readonly string RawType { get; } Property Value string Type 获取此嵌入式内容的类型。 public EmbedType Type { get; } Property Value EmbedType Methods Resolve<T>(Func<NotImplementedEmbed, T>) 通过指定的解析函数将嵌入式内容解析为具体类型。 public T Resolve<T>(Func<NotImplementedEmbed, T> resolvingFunc) where T : IEmbed Parameters resolvingFunc Func<NotImplementedEmbed, T> 用于解析的函数。 Returns T 解析后的嵌入式内容。 Type Parameters T 要解析为的具体类型。 Resolve<T>(JsonSerializerOptions?) 通过 JSON 反序列化将嵌入式内容解析为具体类型。 public T? Resolve<T>(JsonSerializerOptions? options = null) where T : IEmbed Parameters options JsonSerializerOptions 用于反序列化操作的选项。 Returns T 解析后的嵌入式内容。 Type Parameters T 要解析为的具体类型。"
  },
  "api/Kook.NotImplementedPokeResource.html": {
    "href": "api/Kook.NotImplementedPokeResource.html",
    "title": "Struct NotImplementedPokeResource | Kook.Net 文档",
    "keywords": "Struct NotImplementedPokeResource Namespace Kook Assembly Kook.Net.Core.dll 表示一个未能被解析为已知的强类型的 POKE 资源。 public struct NotImplementedPokeResource : IPokeResource Implements IPokeResource Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties JsonNode 获取此 POKE 资源的原始 JSON。 public readonly JsonNode JsonNode { get; } Property Value JsonNode RawType 获取此 POKE 资源的类型的原始值。 public readonly string RawType { get; } Property Value string Type 获取此 POKE 资源的类型。 public PokeResourceType Type { get; } Property Value PokeResourceType Methods Resolve<T>(Func<NotImplementedPokeResource, T>) 通过指定的解析函数将 POKE 资源 解析为具体类型。 public T Resolve<T>(Func<NotImplementedPokeResource, T> resolvingFunc) where T : IPokeResource Parameters resolvingFunc Func<NotImplementedPokeResource, T> 用于解析的函数。 Returns T 解析后的 POKE 资源 。 Type Parameters T 要解析为的具体类型。 Resolve<T>(JsonSerializerOptions?) 通过 JSON 反序列化将 POKE 资源解析为具体类型。 public T? Resolve<T>(JsonSerializerOptions? options = null) where T : IPokeResource Parameters options JsonSerializerOptions 用于反序列化操作的选项。 Returns T 解析后的 POKE 资源。 Type Parameters T 要解析为的具体类型。"
  },
  "api/Kook.NotifyType.html": {
    "href": "api/Kook.NotifyType.html",
    "title": "Enum NotifyType | Kook.Net 文档",
    "keywords": "Enum NotifyType Namespace Kook Assembly Kook.Net.Core.dll 表示服务器应如何通知用户。 public enum NotifyType Fields AcceptAll = 1 通知用户所有消息。 Default = 0 以服务器的默认行为通知用户。 Muted = 3 从不通知用户。 OnlyMentioned = 2 通知提及用户的消息。"
  },
  "api/Kook.OverwritePermissions.html": {
    "href": "api/Kook.OverwritePermissions.html",
    "title": "Struct OverwritePermissions | Kook.Net 文档",
    "keywords": "Struct OverwritePermissions Namespace Kook Assembly Kook.Net.Core.dll 表示一组权限重写配置。 public struct OverwritePermissions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors OverwritePermissions(PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue) 使用指定的权限重写信息创建一个 OverwritePermissions 结构的新实例。 public OverwritePermissions(PermValue createInvites = PermValue.Inherit, PermValue manageChannels = PermValue.Inherit, PermValue manageRoles = PermValue.Inherit, PermValue viewChannel = PermValue.Inherit, PermValue sendMessages = PermValue.Inherit, PermValue manageMessages = PermValue.Inherit, PermValue attachFiles = PermValue.Inherit, PermValue connect = PermValue.Inherit, PermValue manageVoice = PermValue.Inherit, PermValue mentionEveryone = PermValue.Inherit, PermValue addReactions = PermValue.Inherit, PermValue passiveConnect = PermValue.Inherit, PermValue useVoiceActivity = PermValue.Inherit, PermValue speak = PermValue.Inherit, PermValue deafenMembers = PermValue.Inherit, PermValue muteMembers = PermValue.Inherit, PermValue playSoundtrack = PermValue.Inherit, PermValue shareScreen = PermValue.Inherit) Parameters createInvites PermValue 创建邀请。 manageChannels PermValue 频道管理。 manageRoles PermValue 管理角色权限。 viewChannel PermValue 查看文字与语音频道。 sendMessages PermValue 发送文字消息。 manageMessages PermValue 消息管理。 attachFiles PermValue 上传文件。 connect PermValue 语音连接。 manageVoice PermValue 语音管理。 mentionEveryone PermValue 提及全体成员、在线成员和所有角色。 addReactions PermValue 添加回应。 passiveConnect PermValue 被动连接语音频道。 useVoiceActivity PermValue 使用自由麦。 speak PermValue 发言。 deafenMembers PermValue 服务器静音。 muteMembers PermValue 服务器闭麦。 playSoundtrack PermValue 共享计算机音频。 shareScreen PermValue 屏幕分享。 OverwritePermissions(ulong, ulong) 使用指定的原始值初始化一个 OverwritePermissions 结构的新实例。 public OverwritePermissions(ulong allowValue, ulong denyValue) Parameters allowValue ulong 重写允许的权限的原始值。 denyValue ulong 重写禁止的权限的原始值。 Properties AddReactions 获取此权限重写配置对频道权限位 AddReactions 的重写配置。 public PermValue AddReactions { get; } Property Value PermValue AllowValue 获取一个表示此重写中所有允许的权限的原始值。 public readonly ulong AllowValue { get; } Property Value ulong AttachFiles 获取此权限重写配置对频道权限位 AttachFiles 的重写配置。 public PermValue AttachFiles { get; } Property Value PermValue Connect 获取此权限重写配置对频道权限位 Connect 的重写配置。 public PermValue Connect { get; } Property Value PermValue CreateInvites 获取此权限重写配置对频道权限位 CreateInvites 的重写配置。 public PermValue CreateInvites { get; } Property Value PermValue DeafenMembers 获取此权限重写配置对频道权限位 DeafenMembers 的重写配置。 public PermValue DeafenMembers { get; } Property Value PermValue DenyValue 获取一个表示此重写中所有禁止的权限的原始值。 public readonly ulong DenyValue { get; } Property Value ulong InheritAll 获取一个空的 OverwritePermissions，继承所有权限。 public static OverwritePermissions InheritAll { get; } Property Value OverwritePermissions ManageChannels 获取此权限重写配置对频道权限位 ManageChannels 的重写配置。 public PermValue ManageChannels { get; } Property Value PermValue ManageMessages 获取此权限重写配置对频道权限位 ManageMessages 的重写配置。 public PermValue ManageMessages { get; } Property Value PermValue ManageRoles 获取此权限重写配置对频道权限位 ManageRoles 的重写配置。 public PermValue ManageRoles { get; } Property Value PermValue ManageVoice 获取此权限重写配置对频道权限位 ManageVoice 的重写配置。 public PermValue ManageVoice { get; } Property Value PermValue MentionEveryone 获取此权限重写配置对频道权限位 MentionEveryone 的重写配置。 public PermValue MentionEveryone { get; } Property Value PermValue MuteMembers 获取此权限重写配置对频道权限位 MuteMembers 的重写配置。 public PermValue MuteMembers { get; } Property Value PermValue PassiveConnect 获取此权限重写配置对频道权限位 PassiveConnect 的重写配置。 public PermValue PassiveConnect { get; } Property Value PermValue PlaySoundtrack 获取此权限重写配置对频道权限位 PlaySoundtrack 的重写配置。 public PermValue PlaySoundtrack { get; } Property Value PermValue SendMessages 获取此权限重写配置对频道权限位 SendMessages 的重写配置。 public PermValue SendMessages { get; } Property Value PermValue ShareScreen 获取此权限重写配置对频道权限位 ShareScreen 的重写配置。 public PermValue ShareScreen { get; } Property Value PermValue Speak 获取此权限重写配置对频道权限位 Speak 的重写配置。 public PermValue Speak { get; } Property Value PermValue UseVoiceActivity 获取此权限重写配置对频道权限位 UseVoiceActivity 的重写配置。 public PermValue UseVoiceActivity { get; } Property Value PermValue ViewChannel 获取此权限重写配置对频道权限位 ViewChannel 的重写配置。 public PermValue ViewChannel { get; } Property Value PermValue Methods AllowAll(IChannel) 获取一个在权限重写配置中为指定频道重写允许所有权限的 OverwritePermissions。 public static OverwritePermissions AllowAll(IChannel channel) Parameters channel IChannel Returns OverwritePermissions Exceptions ArgumentException 未知的频道类型。 DenyAll(IChannel) 获取一个在权限重写配置中为指定频道重写禁止所有权限的 OverwritePermissions。 public static OverwritePermissions DenyAll(IChannel channel) Parameters channel IChannel Returns OverwritePermissions Exceptions ArgumentException 未知的频道类型。 Modify(PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?) 以当前权限重写配置为基础，更改指定的重写，返回一个 OverwritePermissions 结构的新实例。 public OverwritePermissions Modify(PermValue? createInvites = null, PermValue? manageChannels = null, PermValue? manageRoles = null, PermValue? viewChannel = null, PermValue? sendMessages = null, PermValue? manageMessages = null, PermValue? attachFiles = null, PermValue? connect = null, PermValue? manageVoice = null, PermValue? mentionEveryone = null, PermValue? addReactions = null, PermValue? passiveConnect = null, PermValue? useVoiceActivity = null, PermValue? speak = null, PermValue? deafenMembers = null, PermValue? muteMembers = null, PermValue? playSoundtrack = null, PermValue? shareScreen = null) Parameters createInvites PermValue? 创建邀请。 manageChannels PermValue? 频道管理。 manageRoles PermValue? 管理角色权限。 viewChannel PermValue? 查看文字与语音频道。 sendMessages PermValue? 发送文字消息。 manageMessages PermValue? 消息管理。 attachFiles PermValue? 上传文件。 connect PermValue? 语音连接。 manageVoice PermValue? 语音管理。 mentionEveryone PermValue? 提及全体成员、在线成员和所有角色。 addReactions PermValue? 添加回应。 passiveConnect PermValue? 被动连接语音频道。 useVoiceActivity PermValue? 使用自由麦。 speak PermValue? 发言。 deafenMembers PermValue? 服务器静音。 muteMembers PermValue? 服务器闭麦。 playSoundtrack PermValue? 共享计算机音频。 shareScreen PermValue? 屏幕分享。 Returns OverwritePermissions 更改了指定权限的新的权限集。 ToAllowList() 获取一个包含当前权限重写配置所包含的所有重写允许的 ChannelPermission 独立位标志枚举值的集合。 public List<ChannelPermission> ToAllowList() Returns List<ChannelPermission> 一个包含当前权限重写配置所包含的所有重写允许的 ChannelPermission 独立位标志枚举值的集合；如果当前权限重写配置未包含任何重写允许的权限位，则会返回一个空集合。 ToDenyList() 获取一个包含当前权限重写配置所包含的所有重写禁止的 ChannelPermission 独立位标志枚举值的集合。 public List<ChannelPermission> ToDenyList() Returns List<ChannelPermission> 一个包含当前权限重写配置所包含的所有重写禁止的 ChannelPermission 独立位标志枚举值的集合；如果当前权限重写配置未包含任何重写禁止的权限位，则会返回一个空集合。 ToString() 获取此权限重写配置所重写允许与重写禁止的权限的原始值的字符串表示。 public override string ToString() Returns string 此权限重写配置所重写允许与重写禁止的权限的原始值的字符串表示。"
  },
  "api/Kook.ParagraphStruct.html": {
    "href": "api/Kook.ParagraphStruct.html",
    "title": "Class ParagraphStruct | Kook.Net 文档",
    "keywords": "Class ParagraphStruct Namespace Kook Assembly Kook.Net.Core.dll 区域文本结构，可用于 IModule 中。 public class ParagraphStruct : IElement, IEquatable<ParagraphStruct>, IEquatable<IElement> Inheritance object ParagraphStruct Implements IElement IEquatable<ParagraphStruct> IEquatable<IElement> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(IElement) CardExtensions.ToBuilder(ParagraphStruct) Properties ColumnCount 获取区域文本的列数。 public int? ColumnCount { get; } Property Value int? Fields 获取区域文本的文本块。 public ImmutableArray<IElement> Fields { get; } Property Value ImmutableArray<IElement> Type 获取元素的类型。 public ElementType Type { get; } Property Value ElementType Methods Equals(ParagraphStruct?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ParagraphStruct? paragraphStruct) Parameters paragraphStruct ParagraphStruct Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ParagraphStruct?, ParagraphStruct?) 判定两个 ParagraphStruct 是否相等。 public static bool operator ==(ParagraphStruct? left, ParagraphStruct? right) Parameters left ParagraphStruct right ParagraphStruct Returns bool 如果两个 ParagraphStruct 相等，则为 true；否则为 false。 operator !=(ParagraphStruct?, ParagraphStruct?) 判定两个 ParagraphStruct 是否不相等。 public static bool operator !=(ParagraphStruct? left, ParagraphStruct? right) Parameters left ParagraphStruct right ParagraphStruct Returns bool 如果两个 ParagraphStruct 不相等，则为 true；否则为 false。"
  },
  "api/Kook.ParagraphStructBuilder.html": {
    "href": "api/Kook.ParagraphStructBuilder.html",
    "title": "Class ParagraphStructBuilder | Kook.Net 文档",
    "keywords": "Class ParagraphStructBuilder Namespace Kook Assembly Kook.Net.Core.dll 用来构建 ParagraphStruct 元素的构建器。 public class ParagraphStructBuilder : IElementBuilder, IEquatable<ParagraphStructBuilder>, IEquatable<IElementBuilder> Inheritance object ParagraphStructBuilder Implements IElementBuilder IEquatable<ParagraphStructBuilder> IEquatable<IElementBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ParagraphStructBuilder() 初始化一个 ParagraphStructBuilder 类的新实例。 public ParagraphStructBuilder() ParagraphStructBuilder(int, IList<IElementBuilder>?) 初始化一个 ParagraphStructBuilder 类的新实例。 public ParagraphStructBuilder(int columnCount, IList<IElementBuilder>? fields = null) Parameters columnCount int 区域文本的列数。 fields IList<IElementBuilder> 区域文本的文本块。 Fields MaxColumnCount 区域文本的最大列数。 public const int MaxColumnCount = 3 Field Value int MaxFieldCount 区域文本内文本块的最大数量。 public const int MaxFieldCount = 50 Field Value int MinColumnCount 区域文本的最小列数。 public const int MinColumnCount = 1 Field Value int Properties ColumnCount 获取或设置区域文本的列数。 public int ColumnCount { get; set; } Property Value int Remarks 默认值为 MinColumnCount。 Fields 获取或设置区域文本的文本块。 public IList<IElementBuilder> Fields { get; set; } Property Value IList<IElementBuilder> Type 获取此构建器构建的元素的类型。 public ElementType Type { get; } Property Value ElementType Methods AddField(KMarkdownElementBuilder) 添加一个 KMarkdown 文本块到区域文本。 public ParagraphStructBuilder AddField(KMarkdownElementBuilder field) Parameters field KMarkdownElementBuilder 要添加的 KMarkdown 文本块。 Returns ParagraphStructBuilder 当前构建器。 AddField(PlainTextElementBuilder) 添加一个纯文本文本块到区域文本。 public ParagraphStructBuilder AddField(PlainTextElementBuilder field) Parameters field PlainTextElementBuilder 要添加的纯文本文本块。 Returns ParagraphStructBuilder 当前构建器。 AddField<T>(Action<T>?) 添加一个文本块到区域文本。 public ParagraphStructBuilder AddField<T>(Action<T>? action = null) where T : IElementBuilder, new() Parameters action Action<T> 用于创建一个 KMarkdownElement 的构建器的操作，该构建器将被添加到区域文本。 Returns ParagraphStructBuilder 当前构建器。 Type Parameters T Build() 构建当前构建器为一个 ParagraphStruct。 public ParagraphStruct Build() Returns ParagraphStruct 由当前构建器表示的属性构建的 ParagraphStruct 对象。 Exceptions ArgumentOutOfRangeException ColumnCount 不足 MinColumnCount。 ArgumentOutOfRangeException ColumnCount 超出了 MaxColumnCount。 ArgumentNullException Fields 为 null。 ArgumentException Fields 的数量超出了 MaxFieldCount。 ArgumentException Fields 包含了既不是 PlainTextElementBuilder 也不是 KMarkdownElementBuilder 的元素。 Equals(ParagraphStructBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ParagraphStructBuilder? paragraphStructBuilder) Parameters paragraphStructBuilder ParagraphStructBuilder Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithColumnCount(int) 设置区域文本的列数。 public ParagraphStructBuilder WithColumnCount(int count) Parameters count int 区域文本的列数。 Returns ParagraphStructBuilder 当前构建器。 Operators operator ==(ParagraphStructBuilder?, ParagraphStructBuilder?) 判定两个 ParagraphStructBuilder 是否相等。 public static bool operator ==(ParagraphStructBuilder? left, ParagraphStructBuilder? right) Parameters left ParagraphStructBuilder right ParagraphStructBuilder Returns bool 如果两个 ParagraphStructBuilder 相等，则为 true；否则为 false。 operator !=(ParagraphStructBuilder?, ParagraphStructBuilder?) 判定两个 ParagraphStructBuilder 是否不相等。 public static bool operator !=(ParagraphStructBuilder? left, ParagraphStructBuilder? right) Parameters left ParagraphStructBuilder right ParagraphStructBuilder Returns bool 如果两个 ParagraphStructBuilder 不相等，则为 true；否则为 false。"
  },
  "api/Kook.PermValue.html": {
    "href": "api/Kook.PermValue.html",
    "title": "Enum PermValue | Kook.Net 文档",
    "keywords": "Enum PermValue Namespace Kook Assembly Kook.Net.Core.dll 表示一个权限的重写配置的值。 public enum PermValue Fields Allow = 0 允许此权限。 Deny = 1 禁止此权限。 Inherit = 2 继承此权限。"
  },
  "api/Kook.PlainTextElement.html": {
    "href": "api/Kook.PlainTextElement.html",
    "title": "Class PlainTextElement | Kook.Net 文档",
    "keywords": "Class PlainTextElement Namespace Kook Assembly Kook.Net.Core.dll 纯文本元素，可用于 IModule 中。 public class PlainTextElement : IElement, IEquatable<PlainTextElement>, IEquatable<IElement> Inheritance object PlainTextElement Implements IElement IEquatable<PlainTextElement> IEquatable<IElement> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods CardExtensions.ToBuilder(IElement) CardExtensions.ToBuilder(PlainTextElement) Properties Content 获取纯文本的内容。 public string Content { get; } Property Value string Emoji 获取 Emoji 表情符号的短代码是否被解析为表情符号。 public bool? Emoji { get; } Property Value bool? Type 获取元素的类型。 public ElementType Type { get; } Property Value ElementType Methods Equals(PlainTextElement?) Indicates whether the current object is equal to another object of the same type. public bool Equals(PlainTextElement? plainTextElement) Parameters plainTextElement PlainTextElement Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators operator ==(PlainTextElement?, PlainTextElement?) 判定两个 PlainTextElement 是否相等。 public static bool operator ==(PlainTextElement? left, PlainTextElement? right) Parameters left PlainTextElement right PlainTextElement Returns bool 如果两个 PlainTextElement 相等，则为 true；否则为 false。 operator !=(PlainTextElement?, PlainTextElement?) 判定两个 PlainTextElement 是否不相等。 public static bool operator !=(PlainTextElement? left, PlainTextElement? right) Parameters left PlainTextElement right PlainTextElement Returns bool 如果两个 PlainTextElement 不相等，则为 true；否则为 false。"
  },
  "api/Kook.PlainTextElementBuilder.html": {
    "href": "api/Kook.PlainTextElementBuilder.html",
    "title": "Class PlainTextElementBuilder | Kook.Net 文档",
    "keywords": "Class PlainTextElementBuilder Namespace Kook Assembly Kook.Net.Core.dll 用来构建 PlainTextElement 元素的构建器。 public class PlainTextElementBuilder : IElementBuilder, IEquatable<PlainTextElementBuilder>, IEquatable<IElementBuilder> Inheritance object PlainTextElementBuilder Implements IElementBuilder IEquatable<PlainTextElementBuilder> IEquatable<IElementBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlainTextElementBuilder() 初始化一个 PlainTextElementBuilder 类的新实例。 public PlainTextElementBuilder() PlainTextElementBuilder(string?, bool) 初始化一个 PlainTextElementBuilder 类的新实例。 public PlainTextElementBuilder(string? content, bool emoji = true) Parameters content string 纯文本的内容。 emoji bool 是否将 Emoji 表情符号的短代码解析为表情符号。 See Also Emoji Fields MaxPlainTextLength 纯文本的最大长度。 public const int MaxPlainTextLength = 2000 Field Value int Properties Content 获取或设置纯文本的文本内容。 public string? Content { get; set; } Property Value string Emoji 获取或设置 Emoji 表情符号的短代码是否应被解析为表情符号。 public bool Emoji { get; set; } Property Value bool See Also Emoji Type 获取此构建器构建的元素的类型。 public ElementType Type { get; } Property Value ElementType Methods Build() 构建当前构建器为一个 PlainTextElement。 public PlainTextElement Build() Returns PlainTextElement 由当前构建器表示的属性构建的 PlainTextElement 对象。 Exceptions ArgumentNullException Content 为 null。 ArgumentException Content 的长度超过了 MaxPlainTextLength。 Equals(PlainTextElementBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(PlainTextElementBuilder? plainTextElementBuilder) Parameters plainTextElementBuilder PlainTextElementBuilder Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithContent(string) 设置纯文本的文本内容。 public PlainTextElementBuilder WithContent(string content) Parameters content string 纯文本的文本内容。 Returns PlainTextElementBuilder 当前构建器。 WithEmoji(bool) 设置 Emoji 表情符号的短代码是否应被解析为表情符号。 public PlainTextElementBuilder WithEmoji(bool emoji) Parameters emoji bool Emoji 表情符号的短代码是否应被解析为表情符号。 Returns PlainTextElementBuilder 当前构建器。 See Also Emoji Operators operator ==(PlainTextElementBuilder?, PlainTextElementBuilder?) 判定两个 PlainTextElementBuilder 是否相等。 public static bool operator ==(PlainTextElementBuilder? left, PlainTextElementBuilder? right) Parameters left PlainTextElementBuilder right PlainTextElementBuilder Returns bool 如果两个 PlainTextElementBuilder 相等，则为 true；否则为 false。 implicit operator PlainTextElementBuilder(string) 使用指定的纯文本内容初始化一个新的 PlainTextElementBuilder 类的实例。 public static implicit operator PlainTextElementBuilder(string content) Parameters content string 纯文本内容。 Returns PlainTextElementBuilder 一个使用指定的纯文本内容初始化的 PlainTextElementBuilder 类的实例。 operator !=(PlainTextElementBuilder?, PlainTextElementBuilder?) 判定两个 PlainTextElementBuilder 是否不相等。 public static bool operator !=(PlainTextElementBuilder? left, PlainTextElementBuilder? right) Parameters left PlainTextElementBuilder right PlainTextElementBuilder Returns bool 如果两个 PlainTextElementBuilder 不相等，则为 true；否则为 false。"
  },
  "api/Kook.PokeIcon.html": {
    "href": "api/Kook.PokeIcon.html",
    "title": "Struct PokeIcon | Kook.Net 文档",
    "keywords": "Struct PokeIcon Namespace Kook Assembly Kook.Net.Core.dll 表示一个 POKE 的图标。 public struct PokeIcon Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Resource 获取图标资源的 URL。 public readonly string Resource { get; } Property Value string ResourceExpired 获取当此图标所关联的 POKE 过期后的图标资源的 URL。 public readonly string ResourceExpired { get; } Property Value string"
  },
  "api/Kook.PokeLabel.html": {
    "href": "api/Kook.PokeLabel.html",
    "title": "Struct PokeLabel | Kook.Net 文档",
    "keywords": "Struct PokeLabel Namespace Kook Assembly Kook.Net.Core.dll 表示一个 POKE 的标签。 public struct PokeLabel : IEntity<uint> Implements IEntity<uint> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Id 获取 POKE 的标签的唯一标识符。 public readonly uint Id { get; } Property Value uint Name 获取 POKE 的标签的名称。 public readonly string Name { get; } Property Value string"
  },
  "api/Kook.PokeQuality.html": {
    "href": "api/Kook.PokeQuality.html",
    "title": "Struct PokeQuality | Kook.Net 文档",
    "keywords": "Struct PokeQuality Namespace Kook Assembly Kook.Net.Core.dll 表示一个 POKE 的品质。 public struct PokeQuality : IEntity<uint> Implements IEntity<uint> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Color 获取 POKE 品质的颜色。 public readonly Color Color { get; } Property Value Color Id 获取 POKE 品质的唯一标识符。 public readonly uint Id { get; } Property Value uint Resources 获取 POKE 品质的资源。 public readonly IReadOnlyDictionary<string, string> Resources { get; } Property Value IReadOnlyDictionary<string, string>"
  },
  "api/Kook.PokeResourceType.html": {
    "href": "api/Kook.PokeResourceType.html",
    "title": "Enum PokeResourceType | Kook.Net 文档",
    "keywords": "Enum PokeResourceType Namespace Kook Assembly Kook.Net.Core.dll 表示一个 POKE 资源的类型。 public enum PokeResourceType Fields ImageAnimation = 1 POKE 资源是一个图像动画 NotImplemented = 0 POKE 资源的类型未解析到已知的强类型。"
  },
  "api/Kook.Quote.html": {
    "href": "api/Kook.Quote.html",
    "title": "Class Quote | Kook.Net 文档",
    "keywords": "Class Quote Namespace Kook Assembly Kook.Net.Core.dll 表示一个引用的消息。 public class Quote : IQuote Inheritance object Quote Implements IQuote Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Quote(Guid) 使用指定的消息 ID 创建一个新的 Quote 实例。 [Obsolete(\"Use MessageReference instead.\")] public Quote(Guid quotedMessageId) Parameters quotedMessageId Guid 要引用的消息的 ID。 See Also MessageReference(Guid) Properties Author 获取此引用的消息的作者。 public IUser Author { get; } Property Value IUser Content 获取此引用的消息的内容。 public string Content { get; } Property Value string Remarks 如果此引用的消息不是文本消息，则此属性可能为空或包含原始代码。 CreateAt 获取此引用的消息的发送时间。 public DateTimeOffset CreateAt { get; } Property Value DateTimeOffset Empty 获取一个引用的消息为空的引用。 [Obsolete(\"Use MessageReference.Empty instead.\")] public static MessageReference Empty { get; } Property Value MessageReference Remarks 此属性用于在修改消息时删除引用。 See Also Quote QuotedMessageId 获取此引用所指向的消息的 ID。 public Guid QuotedMessageId { get; } Property Value Guid Type 获取此引用的消息的类型。 public MessageType Type { get; } Property Value MessageType"
  },
  "api/Kook.ReactionMetadata.html": {
    "href": "api/Kook.ReactionMetadata.html",
    "title": "Struct ReactionMetadata | Kook.Net 文档",
    "keywords": "Struct ReactionMetadata Namespace Kook Assembly Kook.Net.Core.dll 表示一个关于消息回应的元数据。 public struct ReactionMetadata Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties IsMe 获取当前用户是否已对此消息做出回应。 public readonly bool IsMe { get; } Property Value bool ReactionCount 获取此消息中已添加此回应的人数。 public readonly int ReactionCount { get; } Property Value int"
  },
  "api/Kook.RequestFriendSource.html": {
    "href": "api/Kook.RequestFriendSource.html",
    "title": "Enum RequestFriendSource | Kook.Net 文档",
    "keywords": "Enum RequestFriendSource Namespace Kook Assembly Kook.Net.Core.dll 表示一个好友请求的来源。 public enum RequestFriendSource Fields FullQualification = 0 请求发起自用户名及其标识号。 Guild = 2 请求发起自共同加入的服务器。"
  },
  "api/Kook.RequestOptions.html": {
    "href": "api/Kook.RequestOptions.html",
    "title": "Class RequestOptions | Kook.Net 文档",
    "keywords": "Class RequestOptions Namespace Kook Assembly Kook.Net.Core.dll 表示发送请求时要使用的选项。 public class RequestOptions Inheritance object RequestOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequestOptions() 使用默认设置创建一个新的 RequestOptions 类的实例。 public RequestOptions() Remarks 默认的请求超时时间是 DefaultRequestTimeout。 Properties AuditLogReason 获取或设置要写入到服务器审计日志中的操作原因。 public string? AuditLogReason { get; set; } Property Value string Remarks 默认的 API 客户端不支持设置此属性。 CancellationToken 获取或设置此请求的取消令牌。 public CancellationToken CancellationToken { get; set; } Property Value CancellationToken Default 使用默认设置创建一个新的 RequestOptions 类的实例。 public static RequestOptions Default { get; } Property Value RequestOptions Remarks 默认的请求超时时间是 DefaultRequestTimeout。 RatelimitCallback 获取或设置此请求触发速率限制时要执行的回调委托。 public Func<IRateLimitInfo, Task>? RatelimitCallback { get; set; } Property Value Func<IRateLimitInfo, Task> See Also DefaultRatelimitCallback RetryMode 获取或设置请求失败时的重试行为；如果为 null，则使用配置的默认的重试行为。 public RetryMode? RetryMode { get; set; } Property Value RetryMode? See Also DefaultRetryMode Timeout 获取或设置等待此请求完成的最大时间，以毫秒为单位。 public int? Timeout { get; set; } Property Value int? Remarks 获取或设置等待此请求完成的最大时间，以毫秒为单位。如果为 null，则请求不会超时。 如果此请求的桶触发了速率限制并且在超时前不会恢复，此请求将立即失败。 Methods Clone() Creates a shallow copy of the current object. public RequestOptions Clone() Returns RequestOptions A shallow copy of the current object."
  },
  "api/Kook.Rest.Attachment.html": {
    "href": "api/Kook.Rest.Attachment.html",
    "title": "Class Attachment | Kook.Net 文档",
    "keywords": "Class Attachment Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个消息内基于的附件。 public class Attachment : IAttachment Inheritance object Attachment Implements IAttachment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Duration 如果此附件表示可播放的内容，则获取其持续时间。 public TimeSpan? Duration { get; } Property Value TimeSpan? FileType 获取此附件的文件类型。 public string? FileType { get; } Property Value string Filename 获取此附件的文件名。 public string? Filename { get; } Property Value string Height 如果此附件表示的内容包含画面，则获取其高度。 public int? Height { get; } Property Value int? Size 获取此附件的文件大小。 public int? Size { get; } Property Value int? Type 获取此附件的类型。 public AttachmentType Type { get; } Property Value AttachmentType Url 获取此附件的 URL。 public string Url { get; } Property Value string Width 如果此附件表示的内容包含画面，则获取其宽度。 public int? Width { get; } Property Value int? Methods ToString() 获取此附件的文件名。 public override string? ToString() Returns string 此附件的文件名。"
  },
  "api/Kook.Rest.BaseKookClient.html": {
    "href": "api/Kook.Rest.BaseKookClient.html",
    "title": "Class BaseKookClient | Kook.Net 文档",
    "keywords": "Class BaseKookClient Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个可以连接到 KOOK API 的通用的 KOOK 客户端。 public abstract class BaseKookClient : IKookClient, IDisposable Inheritance object BaseKookClient Implements IKookClient IDisposable Derived KookRestClient BaseSocketClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ConnectionState 获取当前连接的状态。 public virtual ConnectionState ConnectionState { get; } Property Value ConnectionState CurrentUser 获取登录到此客户端的当前用户；如果未登录，则为 null。 public ISelfUser? CurrentUser { get; protected set; } Property Value ISelfUser LoginState 获取此客户端的登录状态。 public LoginState LoginState { get; protected set; } Property Value LoginState TokenType 获取已登录用户的令牌类型。 public TokenType TokenType { get; } Property Value TokenType Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() LoginAsync(TokenType, string, bool) 登录到 KOOK API。 public Task LoginAsync(TokenType tokenType, string token, bool validateToken = true) Parameters tokenType TokenType 要使用的令牌类型。 token string 要使用的令牌。 validateToken bool 是否验证令牌。 Returns Task 一个表示异步登录操作的任务。 Remarks 验证令牌的操作是通过 ValidateToken(TokenType, string) 方法完成的。 此方法用于向当前客户端设置后续 API 请求的身份验证信息，获取并设置当前所登录用户的信息。 LogoutAsync() 从 KOOK API 退出登录。 public Task LogoutAsync() Returns Task 一个表示异步退出登录操作的任务。 Remarks 此方法用于清除当前客户端的身份验证信息及所缓存的当前所登录的用户信息。 Events Log 当生成一条日志消息时引发。 public event Func<LogMessage, Task> Log Event Type Func<LogMessage, Task> Remarks 事件参数： LogMessage 参数是描述日志消息的结构。 LoggedIn 当客户端登录成功时引发。 public event Func<Task> LoggedIn Event Type Func<Task> LoggedOut 当客户端退出登录时引发。 public event Func<Task> LoggedOut Event Type Func<Task> SentRequest 当向 API 发送 REST 请求时引发。 public event Func<HttpMethod, string, double, Task> SentRequest Event Type Func<HttpMethod, string, double, Task> Remarks 事件参数： HttpMethod 参数是 HTTP 方法。 string 参数是终结点。 double 参数是完成请求所花费的时间，以毫秒为单位。"
  },
  "api/Kook.Rest.CardJsonExtension.html": {
    "href": "api/Kook.Rest.CardJsonExtension.html",
    "title": "Class CardJsonExtension | Kook.Net 文档",
    "keywords": "Class CardJsonExtension Namespace Kook.Rest Assembly Kook.Net.Rest.dll 提供一系列用于 Card 和 CardBuilder 的扩展方法。 public static class CardJsonExtension Inheritance object CardJsonExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ParseMany(string) 将字符串解析为多个卡片构造器 ICardBuilder。 public static IEnumerable<ICardBuilder> ParseMany(string json) Parameters json string 要解析的 JSON 字符串。 Returns IEnumerable<ICardBuilder> 多个卡片构造器实例。 Exceptions InvalidOperationException 如果无法将 JSON 解析为多个卡片构造器。 ParseSingle(string) 将字符串解析为单个卡片构造器 ICardBuilder。 public static ICardBuilder ParseSingle(string json) Parameters json string 要解析的 JSON 字符串。 Returns ICardBuilder 单个卡片构造器实例。 Exceptions InvalidOperationException 如果无法将 JSON 解析为单个卡片构造器。 ToJsonString(ICard, bool) 将卡片 ICard 序列化为 JSON 格式的字符串。 public static string ToJsonString(this ICard card, bool writeIndented = true) Parameters card ICard 要序列化的卡片构造器。 writeIndented bool 是否使用缩进写入 JSON。 Returns string 包含来自 card 的数据的 JSON 字符串。 ToJsonString(ICardBuilder, bool) 将卡片构造器 ICardBuilder 序列化为 JSON 格式的字符串。 public static string ToJsonString(this ICardBuilder builder, bool writeIndented = true) Parameters builder ICardBuilder 要序列化的卡片构造器。 writeIndented bool 是否使用缩进写入 JSON。 Returns string 包含来自 builder 的数据的 JSON 字符串。 TryParseMany(string, out IEnumerable<ICardBuilder>?) 尝试将字符串解析为多个卡片构造器 ICardBuilder。 public static bool TryParseMany(string json, out IEnumerable<ICardBuilder>? builders) Parameters json string 要解析的 JSON 字符串。 builders IEnumerable<ICardBuilder> 如果所提供的 JSON 字符串可以解析为多个卡片构造器实例，则返回该实例；否则返回 null。 Returns bool 如果成功解析 json，则为 true；否则为 false。 TryParseSingle(string, out ICardBuilder?) 尝试将字符串解析为单个卡片构造器 ICardBuilder。 public static bool TryParseSingle(string json, out ICardBuilder? builder) Parameters json string 要解析的 JSON 字符串。 builder ICardBuilder 如果所提供的 JSON 字符串可以解析为单个卡片构造器实例，则返回该实例；否则返回 null。 Returns bool 如果成功解析 json，则为 true；否则为 false。"
  },
  "api/Kook.Rest.IRestAudioChannel.html": {
    "href": "api/Kook.Rest.IRestAudioChannel.html",
    "title": "Interface IRestAudioChannel | Kook.Net 文档",
    "keywords": "Interface IRestAudioChannel Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的通用的音频频道。 public interface IRestAudioChannel : IAudioChannel, IChannel, IEntity<ulong> Inherited Members IAudioChannel.AudioClient IAudioChannel.IsVoiceRegionOverwritten IAudioChannel.VoiceRegion IAudioChannel.ServerUrl IAudioChannel.ConnectAsync(bool, bool, string) IAudioChannel.DisconnectAsync() IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel)"
  },
  "api/Kook.Rest.IRestMessageChannel.html": {
    "href": "api/Kook.Rest.IRestMessageChannel.html",
    "title": "Interface IRestMessageChannel | Kook.Net 文档",
    "keywords": "Interface IRestMessageChannel Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的通用的消息频道，可以用来发送和接收消息。 public interface IRestMessageChannel : IMessageChannel, IChannel, IEntity<ulong> Inherited Members IMessageChannel.SendFileAsync(string, string, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(Stream, string, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(FileAttachment, IQuote, IUser, RequestOptions) IMessageChannel.SendTextAsync(string, IQuote, IUser, RequestOptions) IMessageChannel.SendCardAsync(ICard, IQuote, IUser, RequestOptions) IMessageChannel.SendCardsAsync(IEnumerable<ICard>, IQuote, IUser, RequestOptions) IMessageChannel.GetMessageAsync(Guid, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(Guid, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions) IMessageChannel.DeleteMessageAsync(Guid, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) IMessageChannel.ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions) IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Methods GetMessageAsync(Guid, RequestOptions?) 从此消息频道获取一条消息。 Task<RestMessage> GetMessageAsync(Guid id, RequestOptions? options = null) Parameters id Guid 消息的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestMessage> 一个表示异步获取操作的任务。任务结果包含检索到的消息；如果未找到具有指定 ID 的消息，则返回 null。 GetMessagesAsync(IMessage, Direction, int, RequestOptions?) 获取此消息频道中的一些消息。 IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessage IMessage 要开始获取消息的参考位置的消息。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 GetMessagesAsync(Guid, Direction, int, RequestOptions?) 获取此消息频道中的一些消息。 IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessageId Guid 要开始获取消息的参考位置的消息的 ID。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 GetMessagesAsync(int, RequestOptions?) 获取此消息频道中的最新的一些消息。 IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(int limit = 50, RequestOptions? options = null) Parameters limit int 要获取的消息数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。"
  },
  "api/Kook.Rest.IRestPrivateChannel.html": {
    "href": "api/Kook.Rest.IRestPrivateChannel.html",
    "title": "Interface IRestPrivateChannel | Kook.Net 文档",
    "keywords": "Interface IRestPrivateChannel Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的通用的私有频道，只有特定的用户可以访问。 public interface IRestPrivateChannel : IPrivateChannel, IChannel, IEntity<ulong> Inherited Members IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties Recipients 获取可以访问此频道的所有用户。 IReadOnlyCollection<RestUser> Recipients { get; } Property Value IReadOnlyCollection<RestUser>"
  },
  "api/Kook.Rest.KookRestClient.html": {
    "href": "api/Kook.Rest.KookRestClient.html",
    "title": "Class KookRestClient | Kook.Net 文档",
    "keywords": "Class KookRestClient Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的 KOOK 客户端。 public class KookRestClient : BaseKookClient, IKookClient, IDisposable Inheritance object BaseKookClient KookRestClient Implements IKookClient IDisposable Derived KookSocketRestClient Inherited Members BaseKookClient.Log BaseKookClient.LoggedIn BaseKookClient.LoggedOut BaseKookClient.SentRequest BaseKookClient.LoginState BaseKookClient.TokenType BaseKookClient.Dispose() BaseKookClient.LoginAsync(TokenType, string, bool) BaseKookClient.LogoutAsync() BaseKookClient.ConnectionState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods KookRestClientExperimentalExtensions.GetAdminGuildsAsync(KookRestClient, RequestOptions?) KookRestClientExperimentalExtensions.ValidateCardAsync(KookRestClient, ICard, RequestOptions?) KookRestClientExperimentalExtensions.ValidateCardsAsync(KookRestClient, IEnumerable<ICard>, RequestOptions?) KookRestClientExperimentalExtensions.ValidateCardsAsync(KookRestClient, string, RequestOptions?) Constructors KookRestClient() 使用默认配置初始化一个 KookRestClient 类的新实例。 public KookRestClient() KookRestClient(KookRestConfig) 使用指定的配置初始化一个 KookRestClient 类的新实例。 public KookRestClient(KookRestConfig config) Parameters config KookRestConfig 用于初始化客户端的配置。 Properties CurrentUser 获取登录到此客户端的当前用户；如果未登录，则为 null。 public RestSelfUser? CurrentUser { get; } Property Value RestSelfUser Methods AddDirectMessageReactionAsync(Guid, IEmote, RequestOptions?) 向指定的私聊消息添加一个回应。 public Task AddDirectMessageReactionAsync(Guid messageId, IEmote emote, RequestOptions? options = null) Parameters messageId Guid 要为其添加回应的消息的 ID。 emote IEmote 要用于向指定消息添加回应的表情符号。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示添加添加异步操作的任务。 AddReactionAsync(Guid, IEmote, RequestOptions?) 向指定的消息添加一个回应。 public Task AddReactionAsync(Guid messageId, IEmote emote, RequestOptions? options = null) Parameters messageId Guid 要为其添加回应的消息的 ID。 emote IEmote 要用于向指定消息添加回应的表情符号。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示添加添加异步操作的任务。 AddRoleAsync(ulong, ulong, uint, RequestOptions?) 在指定服务器内授予指定用户指定的角色。 public Task AddRoleAsync(ulong guildId, ulong userId, uint roleId, RequestOptions? options = null) Parameters guildId ulong 要授予的角色及服务器用户所在的服务器的 ID。 userId ulong 要为其授予角色的用户的 ID。 roleId uint 要授予的角色的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步授予操作的任务。 CreateAssetAsync(Stream, string, RequestOptions?) 从文件的流上传并创建一个资源。 public Task<string> CreateAssetAsync(Stream stream, string filename, RequestOptions? options = null) Parameters stream Stream 文件的流。 filename string 文件名。 options RequestOptions 发送请求时要使用的选项。 Returns Task<string> 一个表示异步创建操作的任务。任务的结果是上传文件后的资源地址 URL。 CreateAssetAsync(string, string?, RequestOptions?) 从文件路径上传并创建一个资源。 public Task<string> CreateAssetAsync(string path, string? filename = null, RequestOptions? options = null) Parameters path string 文件的路径。 filename string 文件名。 options RequestOptions 发送请求时要使用的选项。 Returns Task<string> 一个表示异步创建操作的任务。任务的结果是上传文件后的资源地址 URL。 CreateGameAsync(string, string?, string?, RequestOptions?) 创建一款游戏的信息。 public Task<RestGame> CreateGameAsync(string name, string? processName = null, string? iconUrl = null, RequestOptions? options = null) Parameters name string 游戏的名称。 processName string 游戏进程的名称。 iconUrl string 游戏图标的资源地址 URL。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestGame> 一个表示异步创建操作的任务。任务的结果是所创建的游戏信息。 GetBlockedUsersAsync(RequestOptions?) 获取所有被当前用户屏蔽的用户。 public Task<IReadOnlyCollection<RestUser>> GetBlockedUsersAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<RestUser>> 一个表示异步获取操作的任务。任务的结果是所有被当前用户屏蔽的用户。 GetChannelAsync(ulong, RequestOptions?) 获取一个频道。 public Task<RestChannel> GetChannelAsync(ulong id, RequestOptions? options = null) Parameters id ulong 频道的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestChannel> 一个表示异步获取操作的任务。任务的结果是具有指定 ID 的频道；若指定 ID 的频道不存在，则为 null。 GetDMChannelAsync(Guid, RequestOptions?) 获取一个私聊频道。 public Task<RestDMChannel> GetDMChannelAsync(Guid chatCode, RequestOptions? options = null) Parameters chatCode Guid 私聊频道的聊天代码。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestDMChannel> 一个表示异步获取操作的任务。任务的结果是具有指定聊天代码的私聊频道；若指定聊天代码的私聊频道不存在，则为 null。 GetDMChannelsAsync(RequestOptions?) 获取当前会话中已创建的所有私聊频道。 public Task<IReadOnlyCollection<RestDMChannel>> GetDMChannelsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<RestDMChannel>> 一个表示异步获取操作的任务。任务的结果是当前会话中已创建的所有私聊频道。 Remarks warning 此方法不会返回当前会话之外已创建的私聊频道。如果客户端刚刚启动，这可能会返回一个空集合。 GetFriendRequestsAsync(RequestOptions?) 获取所有好友请求。 public Task<IReadOnlyCollection<RestFriendRequest>> GetFriendRequestsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<RestFriendRequest>> 一个表示异步获取操作的任务。任务的结果是所有请求与当前用户成为好友的用户。 GetFriendsAsync(RequestOptions?) 获取所有好友。 public Task<IReadOnlyCollection<RestUser>> GetFriendsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<RestUser>> 一个表示异步获取操作的任务。任务的结果是所有与当前用户是好友的用户。 GetGamesAsync(GameCreationSource?, RequestOptions?) 获取所有游戏信息。 public IAsyncEnumerable<IReadOnlyCollection<RestGame>> GetGamesAsync(GameCreationSource? source = null, RequestOptions? options = null) Parameters source GameCreationSource? 要获取的游戏信息的创建来源。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<RestGame>> 分页的游戏信息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 此方法将尝试获取所有具有指定创建源的游戏信息。此方法会根据 MaxItemsPerBatchByDefault 将请求拆分。换句话说，如果有 3000 款游戏的信息，而 MaxItemsPerBatchByDefault 的常量为 100，则请求将被拆分为 30 个单独请求，因此异步枚举器会异步枚举返回 30 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 30 个响应返回的集合，并将其合并为一个集合。 GetGuildAsync(ulong, RequestOptions?) 获取一个服务器。 public Task<RestGuild> GetGuildAsync(ulong id, RequestOptions? options = null) Parameters id ulong 服务器的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestGuild> 一个表示异步获取操作的任务。任务的结果是具有指定 ID 的服务器；若指定 ID 的服务器不存在，则为 null。 GetGuildUserAsync(ulong, ulong, RequestOptions?) 获取一个服务器用户。 public Task<RestGuildUser?> GetGuildUserAsync(ulong guildId, ulong id, RequestOptions? options = null) Parameters guildId ulong 服务器的 ID。 id ulong 用户的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestGuildUser> 一个表示异步获取操作的任务。任务的结果是在具有指定 ID 的服务器内具有指定 ID 的用户；若指定 ID 的服务器内指定 ID 的用户不存在，则为 null。 GetGuildsAsync(RequestOptions?) 获取当前用户所在的所有服务器。 public Task<IReadOnlyCollection<RestGuild>> GetGuildsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<RestGuild>> 一个表示异步获取操作的任务。任务的结果是当前用户所在的所有服务器。 GetUserAsync(ulong, RequestOptions?) 获取一个用户。 public Task<RestUser> GetUserAsync(ulong id, RequestOptions? options = null) Parameters id ulong 用户的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestUser> 一个表示异步获取操作的任务。任务的结果是具有指定 ID 的用户；若指定 ID 的用户不存在，则为 null。 RemoveDirectMessageReactionAsync(Guid, ulong, IEmote, RequestOptions?) 从指定的私聊消息移除一个回应。 public Task RemoveDirectMessageReactionAsync(Guid messageId, ulong userId, IEmote emote, RequestOptions? options = null) Parameters messageId Guid 要从中移除回应的消息的 ID。 userId ulong 要移除其回应的用户的 ID。 emote IEmote 要从指定消息移除的回应的表情符号。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步移除操作的任务。 RemoveReactionAsync(Guid, ulong, IEmote, RequestOptions?) 从指定的消息移除一个回应。 public Task RemoveReactionAsync(Guid messageId, ulong userId, IEmote emote, RequestOptions? options = null) Parameters messageId Guid 要从中移除回应的消息的 ID。 userId ulong 要移除其回应的用户的 ID。 emote IEmote 要从指定消息移除的回应的表情符号。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步移除操作的任务。 RemoveRoleAsync(ulong, ulong, uint, RequestOptions?) 在指定服务器内撤销指定用户指定的角色。 public Task RemoveRoleAsync(ulong guildId, ulong userId, uint roleId, RequestOptions? options = null) Parameters guildId ulong 要撤销的角色及服务器用户所在的服务器的 ID。 userId ulong 要为其撤销角色的用户的 ID。 roleId uint 要撤销的角色的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步撤销操作的任务。"
  },
  "api/Kook.Rest.KookRestClientExperimentalExtensions.html": {
    "href": "api/Kook.Rest.KookRestClientExperimentalExtensions.html",
    "title": "Class KookRestClientExperimentalExtensions | Kook.Net 文档",
    "keywords": "Class KookRestClientExperimentalExtensions Namespace Kook.Rest Assembly Kook.Net.Experimental.dll 提供用于 KookRestClient 的实验性功能的扩展方法。 public static class KookRestClientExperimentalExtensions Inheritance object KookRestClientExperimentalExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetAdminGuildsAsync(KookRestClient, RequestOptions?) 获取当前用户具有 Administrator 权限的服务器的集合。 public static Task<IReadOnlyCollection<RestGuild>> GetAdminGuildsAsync(this KookRestClient client, RequestOptions? options = null) Parameters client KookRestClient KOOK REST 客户端实例。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<RestGuild>> 一个表示异步操作的任务，任务的结果包含当前用户具有 Administrator 权限的使用服务器。 ValidateCardAsync(KookRestClient, ICard, RequestOptions?) 验证卡片。 public static Task ValidateCardAsync(this KookRestClient client, ICard card, RequestOptions? options = null) Parameters client KookRestClient KOOK REST 客户端实例。 card ICard 要验证的卡片。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步验证操作的任务。 ValidateCardsAsync(KookRestClient, IEnumerable<ICard>, RequestOptions?) 验证卡片。 public static Task ValidateCardsAsync(this KookRestClient client, IEnumerable<ICard> cards, RequestOptions? options = null) Parameters client KookRestClient KOOK REST 客户端实例。 cards IEnumerable<ICard> 要验证的卡片。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步验证操作的任务。 ValidateCardsAsync(KookRestClient, string, RequestOptions?) 验证卡片。 public static Task ValidateCardsAsync(this KookRestClient client, string cardsJson, RequestOptions? options = null) Parameters client KookRestClient KOOK REST 客户端实例。 cardsJson string 要验证的卡片的 JSON 字符串。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步验证操作的任务。"
  },
  "api/Kook.Rest.KookRestConfig.html": {
    "href": "api/Kook.Rest.KookRestConfig.html",
    "title": "Class KookRestConfig | Kook.Net 文档",
    "keywords": "Class KookRestConfig Namespace Kook.Rest Assembly Kook.Net.Rest.dll 定义 Kook.Net 有关 REST 各种行为的配置类。 public class KookRestConfig : KookConfig Inheritance object KookConfig KookRestConfig Derived KookSocketConfig Inherited Members KookConfig.APIVersion KookConfig.VoiceAPIVersion KookConfig.Version KookConfig.UserAgent KookConfig.AcceptLanguage KookConfig.APIUrl KookConfig.DefaultRequestTimeout KookConfig.MaxMessageSize KookConfig.MaxUsersPerBatch KookConfig.MaxMessagesPerBatch KookConfig.MaxItemsPerBatchByDefault KookConfig.MinNicknameSize KookConfig.MaxNicknameSize KookConfig.MinIntimacyScore KookConfig.MaxIntimacyScore KookConfig.BoostPackDuration KookConfig.DefaultRetryMode KookConfig.DefaultRatelimitCallback KookConfig.LogLevel KookConfig.FormatUsersInBidirectionalUnicode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 此配置基于 KookConfig，在基础配置的基础上，定义了有关 REST 的配置。 Properties RestClientProvider 获取或设置要用于创建 REST 客户端的 RestClientProvider 委托。 public RestClientProvider RestClientProvider { get; set; } Property Value RestClientProvider"
  },
  "api/Kook.Rest.Poke.html": {
    "href": "api/Kook.Rest.Poke.html",
    "title": "Class Poke | Kook.Net 文档",
    "keywords": "Class Poke Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的 POKE。 public class Poke : IPoke, IEntity<uint> Inheritance object Poke Implements IPoke IEntity<uint> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Categories 获取此 POKE 的分类。 public IReadOnlyCollection<string> Categories { get; } Property Value IReadOnlyCollection<string> Cooldown 获取用户使用此 POKE 后的冷却时间。 public TimeSpan Cooldown { get; } Property Value TimeSpan Description 获取 POKE 的描述。 public string Description { get; } Property Value string Icon 获取此 POKE 的图标资源。 public PokeIcon Icon { get; } Property Value PokeIcon Id 获取此实体的唯一标识符。 public uint Id { get; } Property Value uint Label 获取此 POKE 的标签。 public PokeLabel Label { get; } Property Value PokeLabel MessageScenarios 获取此 POKE 如何在消息上下文中使用和显示。 public IReadOnlyDictionary<string, string> MessageScenarios { get; } Property Value IReadOnlyDictionary<string, string> Name 获取 POKE 的名称。 public string Name { get; } Property Value string Quality 获取此 POKE 的品质。 public PokeQuality Quality { get; } Property Value PokeQuality Resource 获取此 POKE 的资源。 public IPokeResource Resource { get; } Property Value IPokeResource Methods ToString() 获取 POKE 的名称。 public override string ToString() Returns string POKE 的名称。"
  },
  "api/Kook.Rest.RecommendInfo.html": {
    "href": "api/Kook.Rest.RecommendInfo.html",
    "title": "Class RecommendInfo | Kook.Net 文档",
    "keywords": "Class RecommendInfo Namespace Kook.Rest Assembly Kook.Net.Rest.dll 获取一个推荐信息。 public class RecommendInfo : IRecommendInfo Inheritance object RecommendInfo Implements IRecommendInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AuditStatus TODO: To be documented. public int AuditStatus { get; } Property Value int Banner 获取推荐服务器的横幅图像的 URL。 public string Banner { get; } Property Value string BoostLevel 获取推荐服务器的服务器助力等级。 public BoostLevel BoostLevel { get; } Property Value BoostLevel Certifications 获取推荐服务器的所有认证。 public IReadOnlyCollection<GuildCertification>? Certifications { get; } Property Value IReadOnlyCollection<GuildCertification> CustomId 获取推荐服务器的自定义 ID。 public string CustomId { get; } Property Value string Remarks 自定义 ID 可能是一个自定义字符串，也可能是服务器靓号 ID，当无自定义 ID 时为空字符串。 DaysBeforeModify 获取推荐服务器要等待多少天才能再次修改推荐信息。 public int DaysBeforeModify { get; } Property Value int DefaultChannelId 获取推荐服务器的默认文字频道 ID。 public ulong DefaultChannelId { get; } Property Value ulong Description 获取推荐服务器的介绍。 public string Description { get; } Property Value string Features 获取推荐服务器的特性。 public GuildFeatures Features { get; } Property Value GuildFeatures GuildId 获取推荐服务器的 ID。 public ulong GuildId { get; } Property Value ulong Icon 获取推荐服务器的图标 URL。 public string Icon { get; } Property Value string IsOfficialPartner 获取推荐服务器是否是官方合作伙伴。 public bool IsOfficialPartner { get; } Property Value bool Name 获取推荐服务器的名称。 public string Name { get; } Property Value string OpenId 获取推荐服务器的公开 ID。 public uint? OpenId { get; } Property Value uint? Sort TODO: To be documented. public int Sort { get; } Property Value int Status 获取推荐服务器的状态。 public int Status { get; } Property Value int Tag 获取推荐服务器的标签。 public string Tag { get; } Property Value string"
  },
  "api/Kook.Rest.RestBan.html": {
    "href": "api/Kook.Rest.RestBan.html",
    "title": "Class RestBan | Kook.Net 文档",
    "keywords": "Class RestBan Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的封禁对象。 public class RestBan : IBan Inheritance object RestBan Implements IBan Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties CreatedAt 获取封禁的时间。 public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset Reason 获取封禁的原因。 public string Reason { get; } Property Value string User 获取被封禁的用户。 public RestUser User { get; } Property Value RestUser Methods ToString() 获取被封禁用户的包含用户名及识别号的格式化字符串。 public override string ToString() Returns string 被封禁用户的包含用户名及识别号的格式化字符串。 See Also User UsernameAndIdentifyNumber(IUser, bool)"
  },
  "api/Kook.Rest.RestCategoryChannel.html": {
    "href": "api/Kook.Rest.RestCategoryChannel.html",
    "title": "Class RestCategoryChannel | Kook.Net 文档",
    "keywords": "Class RestCategoryChannel Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的分组频道。 public class RestCategoryChannel : RestGuildChannel, IUpdateable, ICategoryChannel, IGuildChannel, IChannel, IEntity<ulong>, IDeletable Inheritance object RestEntity<ulong> RestChannel RestGuildChannel RestCategoryChannel Implements IUpdateable ICategoryChannel IGuildChannel IChannel IEntity<ulong> IDeletable Inherited Members RestGuildChannel.RolePermissionOverwrites RestGuildChannel.UserPermissionOverwrites RestGuildChannel.Guild RestGuildChannel.Type RestGuildChannel.Name RestGuildChannel.Position RestGuildChannel.GuildId RestGuildChannel.CreatorId RestGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) RestGuildChannel.GetCreatorAsync(RequestOptions) RestGuildChannel.DeleteAsync(RequestOptions) RestGuildChannel.UpdateAsync(RequestOptions) RestGuildChannel.GetPermissionOverwrite(IUser) RestGuildChannel.GetPermissionOverwrite(IRole) RestGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) RestGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) RestGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) RestGuildChannel.ToString() RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel)"
  },
  "api/Kook.Rest.RestChannel.html": {
    "href": "api/Kook.Rest.RestChannel.html",
    "title": "Class RestChannel | Kook.Net 文档",
    "keywords": "Class RestChannel Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的频道。 public class RestChannel : RestEntity<ulong>, IChannel, IEntity<ulong>, IUpdateable Inheritance object RestEntity<ulong> RestChannel Implements IChannel IEntity<ulong> IUpdateable Derived RestDMChannel RestGuildChannel Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Methods UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 public virtual Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 KOOK REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 KOOK 服务端的数据。"
  },
  "api/Kook.Rest.RestDMChannel.html": {
    "href": "api/Kook.Rest.RestDMChannel.html",
    "title": "Class RestDMChannel | Kook.Net 文档",
    "keywords": "Class RestDMChannel Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的私聊频道。 public class RestDMChannel : RestChannel, IUpdateable, IDMChannel, IEntity<Guid>, IRestPrivateChannel, IPrivateChannel, IRestMessageChannel, IMessageChannel, IChannel, IEntity<ulong> Inheritance object RestEntity<ulong> RestChannel RestDMChannel Implements IUpdateable IDMChannel IEntity<Guid> IRestPrivateChannel IPrivateChannel IRestMessageChannel IMessageChannel IChannel IEntity<ulong> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties ChatCode 获取此私聊频道的聊天代码。 public Guid ChatCode { get; } Property Value Guid Remarks 此属性的值与 Id 相同。 CurrentUser 获取参与到此私聊频道中的当前用户。 public RestUser CurrentUser { get; } Property Value RestUser Id 获取此私聊频道的唯一标识符。 public Guid Id { get; } Property Value Guid Remarks 此属性的值与 ChatCode 相同。 Recipient 获取参与到此私聊频道的另外一位用户。 public RestUser Recipient { get; } Property Value RestUser Users 获取参与到此私聊频道中的所有用户。 public IReadOnlyCollection<RestUser> Users { get; } Property Value IReadOnlyCollection<RestUser> Methods CloseAsync(RequestOptions?) 关闭此私聊频道，将其从您的频道列表中移除。 public Task CloseAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步关闭操作的任务。 DeleteMessageAsync(IMessage, RequestOptions?) 删除一条消息. public Task DeleteMessageAsync(IMessage message, RequestOptions? options = null) Parameters message IMessage 要删除的消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步删除操作的任务。 DeleteMessageAsync(Guid, RequestOptions?) 删除一条消息。 public Task DeleteMessageAsync(Guid messageId, RequestOptions? options = null) Parameters messageId Guid 要删除的消息的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步删除操作的任务。 GetMessageAsync(Guid, RequestOptions?) 从此消息频道获取一条消息。 public Task<RestMessage> GetMessageAsync(Guid id, RequestOptions? options = null) Parameters id Guid 消息的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestMessage> 一个表示异步获取操作的任务。任务结果包含检索到的消息；如果未找到具有指定 ID 的消息，则返回 null。 GetMessagesAsync(IMessage, Direction, int, RequestOptions?) 获取此消息频道中的一些消息。 public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessage IMessage 要开始获取消息的参考位置的消息。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 GetMessagesAsync(Guid, Direction, int, RequestOptions?) 获取此消息频道中的一些消息。 public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessageId Guid 要开始获取消息的参考位置的消息的 ID。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 GetMessagesAsync(int, RequestOptions?) 获取此消息频道中的最新的一些消息。 public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(int limit = 50, RequestOptions? options = null) Parameters limit int 要获取的消息数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 GetUser(ulong) 获取此私聊频道中具体指定 ID 的用户。 public RestUser? GetUser(ulong id) Parameters id ulong 要获取的用户的 ID。 Returns RestUser 此私聊频道中具有指定 ID 的用户；如果指定 ID 的用户不存在，或该用户并未参与到此私聊频道中，则返回 null。 ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions?) 修改一条消息。 public Task ModifyMessageAsync(Guid messageId, Action<MessageProperties> func, RequestOptions? options = null) Parameters messageId Guid 要修改的消息的 ID。 func Action<MessageProperties> 一个包含修改消息属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 See Also MessageProperties SendCardAsync(ICard, IQuote?, RequestOptions?) 发送卡片消息到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendCardAsync(ICard card, IQuote? quote = null, RequestOptions? options = null) Parameters card ICard 要发送的卡片。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendCardsAsync(IEnumerable<ICard>, IQuote?, RequestOptions?) 发送卡片消息到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(IEnumerable<ICard> cards, IQuote? quote = null, RequestOptions? options = null) Parameters cards IEnumerable<ICard> 要发送的卡片。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendFileAsync(FileAttachment, IQuote?, RequestOptions?) 发送文件到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(FileAttachment attachment, IQuote? quote = null, RequestOptions? options = null) Parameters attachment FileAttachment 文件的附件信息。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendFileAsync(Stream, string, AttachmentType, IQuote?, RequestOptions?) 发送文件到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(Stream stream, string filename, AttachmentType type = AttachmentType.File, IQuote? quote = null, RequestOptions? options = null) Parameters stream Stream 文件的流。 filename string 文件名。 type AttachmentType 文件的媒体类型。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendFileAsync(string, string?, AttachmentType, IQuote?, RequestOptions?) 发送文件到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(string path, string? filename = null, AttachmentType type = AttachmentType.File, IQuote? quote = null, RequestOptions? options = null) Parameters path string 文件的路径。 filename string 文件名。 type AttachmentType 文件的媒体类型。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendTextAsync(string, IQuote?, RequestOptions?) 发送文本消息到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendTextAsync(string text, IQuote? quote = null, RequestOptions? options = null) Parameters text string 要发送的文本。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 ToString() 获取此参与到此私聊频道的另外一位用户的包含 @ 前缀的用户名及识别号格式化字符串。 public override string ToString() Returns string 一个表示此私聊频道的格式化字符串。 See Also UsernameAndIdentifyNumber(IUser, bool) UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 public override Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 KOOK REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 KOOK 服务端的数据。"
  },
  "api/Kook.Rest.RestEntity-1.html": {
    "href": "api/Kook.Rest.RestEntity-1.html",
    "title": "Class RestEntity<TId> | Kook.Net 文档",
    "keywords": "Class RestEntity<TId> Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的具有唯一标识符的实体。 public abstract class RestEntity<TId> : IEntity<TId> where TId : IEquatable<TId> Type Parameters TId 唯一标识符的类型。 Inheritance object RestEntity<TId> Implements IEntity<TId> Derived RestChannel RestFriendRequest RestGame RestGuild RestIntimacy RestInvite RestMessage RestRole RestUser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id 获取此实体的唯一标识符。 public TId Id { get; } Property Value TId"
  },
  "api/Kook.Rest.RestFriendRequest.html": {
    "href": "api/Kook.Rest.RestFriendRequest.html",
    "title": "Class RestFriendRequest | Kook.Net 文档",
    "keywords": "Class RestFriendRequest Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的好友请求。 public class RestFriendRequest : RestEntity<ulong>, IFriendRequest, IEntity<ulong> Inheritance object RestEntity<ulong> RestFriendRequest Implements IFriendRequest IEntity<ulong> Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties User 获取发送此好友请求的用户。 public IUser User { get; } Property Value IUser Methods AcceptAsync(RequestOptions?) 接受此好友请求。 public Task AcceptAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步接受操作的任务。 DeclineAsync(RequestOptions?) 拒绝此好友请求。 public Task DeclineAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步拒绝操作的任务。"
  },
  "api/Kook.Rest.RestGame.html": {
    "href": "api/Kook.Rest.RestGame.html",
    "title": "Class RestGame | Kook.Net 文档",
    "keywords": "Class RestGame Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的游戏信息。 public class RestGame : RestEntity<int>, IGame, IActivity, IEntity<int>, IDeletable Inheritance object RestEntity<int> RestGame Implements IGame IActivity IEntity<int> IDeletable Inherited Members RestEntity<int>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties GameType 获取游戏的类型。 public GameType GameType { get; } Property Value GameType Icon 获取游戏图标的 URL。 public string? Icon { get; } Property Value string Name 获取游戏的名称。 public string Name { get; } Property Value string Options 获取游戏的额外信息。 public string? Options { get; } Property Value string ProcessNames 获取游戏的进程名称。 public IReadOnlyCollection<string> ProcessNames { get; } Property Value IReadOnlyCollection<string> ProductNames 获取游戏的产品名称。 public IReadOnlyCollection<string> ProductNames { get; } Property Value IReadOnlyCollection<string> RequireAdminPrivilege 获取 KOOK 客户端是否需要管理员权限来检测游戏进程。 public bool RequireAdminPrivilege { get; } Property Value bool Methods DeleteAsync(RequestOptions?) 删除此对实体象及其所有子实体对象。 public Task DeleteAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task ModifyAsync(Action<GameProperties>, RequestOptions?) 修改此游戏信息的属性。 public Task<RestGame> ModifyAsync(Action<GameProperties> func, RequestOptions? options = null) Parameters func Action<GameProperties> 一个包含修改游戏属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestGame> 一个表示信息属性修改操作的异步任务。 Remarks 此方法使用指定的属性修改当前游戏信息。要查看可用的属性，请参考 GameProperties。"
  },
  "api/Kook.Rest.RestGuild.html": {
    "href": "api/Kook.Rest.RestGuild.html",
    "title": "Class RestGuild | Kook.Net 文档",
    "keywords": "Class RestGuild Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的服务器。 public class RestGuild : RestEntity<ulong>, IGuild, IEntity<ulong>, IUpdateable Inheritance object RestEntity<ulong> RestGuild Implements IGuild IEntity<ulong> IUpdateable Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties AutoDeleteTime TODO: To be documented. public string? AutoDeleteTime { get; } Property Value string Banner 获取此服务器横幅图像的 URL。 public string Banner { get; } Property Value string BoostLevel 获取此服务器的服务器助力等级。 public BoostLevel BoostLevel { get; } Property Value BoostLevel BoostSubscriptionCount 获取此服务器的服务器助力包的数量。 public int BoostSubscriptionCount { get; } Property Value int BufferBoostSubscriptionCount 获取此服务器来自拥有 BUFF 会员的用的服务器助力包的数量。 public int BufferBoostSubscriptionCount { get; } Property Value int CategoryChannels 获取此服务器中的所有分组频道。 public IReadOnlyCollection<RestCategoryChannel> CategoryChannels { get; } Property Value IReadOnlyCollection<RestCategoryChannel> Channels 获取此服务器中的所有频道。 public IReadOnlyCollection<RestGuildChannel> Channels { get; } Property Value IReadOnlyCollection<RestGuildChannel> CurrentUserDisplayName 获取当前用户在此服务器的显示名称。 public string CurrentUserDisplayName { get; } Property Value string Remarks 如果当前用户在此服务器内设置了昵称，则此属性为设置的昵称；否则为当前用户的用户名。 CurrentUserNickname 获取当前用户在此服务器的昵称。 public string? CurrentUserNickname { get; } Property Value string Remarks 如果当前用户在此服务器未设置昵称，或所设置的昵称与当前用户的用户名相同，则此属性为 null。 CurrentUserRoles 获取当前用户在此服务器所拥有的所有角色。 public IReadOnlyCollection<RestRole> CurrentUserRoles { get; } Property Value IReadOnlyCollection<RestRole> DefaultChannelId 获取默认文字频道的 ID。 public ulong? DefaultChannelId { get; } Property Value ulong? Emotes 获取此服务器的所有自定义表情。 public IReadOnlyCollection<GuildEmote> Emotes { get; } Property Value IReadOnlyCollection<GuildEmote> Remarks warning 如果当前服务器是通过 GetGuildAsync(ulong, RequestOptions?) 获取的，此属性可能不包含任何元素。访问 GetEmoteAsync(string, RequestOptions?) 以获取所有服务器自定义表情。 EveryoneRole 获取此服务器中的 @全体成员 全体成员角色。 public RestRole EveryoneRole { get; } Property Value RestRole Features 获取此服务器的所有特性。 public GuildFeatures Features { get; } Property Value GuildFeatures Icon 获取此服务器图标的 URL。 public string Icon { get; } Property Value string IsAvailable 确定此服务器实体是否已准备就绪以供用户代码访问。 public bool IsAvailable { get; } Property Value bool Remarks note 此属性仅对基于网关连接的客户端有意义。 此属性为 true 表示，此服务器实体已完整缓存基础数据，并与网关同步。 缓存基础数据包括服务器基本信息、频道、角色、频道权限重写、当前用户在服务器内的昵称。 IsOpenEnabled 获取此服务器是否为公开服务器。 public bool IsOpenEnabled { get; } Property Value bool MaxBitrate 获取此服务器中语音频道的最高比特率。 public int MaxBitrate { get; } Property Value int Remarks 此限制取决于服务器的助力状态。 MaxUploadLimit 获取此服务器的文件上传限制，以字节为单位。 public ulong MaxUploadLimit { get; } Property Value ulong Remarks 此限制取决于服务器的助力状态。 Name 获取此服务器的名称。 public string Name { get; } Property Value string NotifyType 获取此服务器的默认通知类型。 public NotifyType NotifyType { get; } Property Value NotifyType OpenId 获取此服务器的公开 ID。 public uint? OpenId { get; } Property Value uint? Remarks 当 IsOpenEnabled 为 true 时，此属性应该返回一个有效的公开服务器 ID； 如果 IsOpenEnabled 为 false，则此属性应该返回 null。 OwnerId 获取此服务器所有者的用户 ID。 public ulong OwnerId { get; } Property Value ulong RecommendInfo 获取此服务器的推荐信息。 public RecommendInfo? RecommendInfo { get; } Property Value RecommendInfo Region 获取此服务器的默认语音服务器区域。 public string Region { get; } Property Value string Remarks 语音服务器区域是指语音服务器所在的地理位置，各个语音服务器区域由一个唯一的字符串表示。 可用语音服务器区域参考列表： 区域 ID 区域名称 chengdu 西南(成都) beijing 华北(北京) shanghai 华东(上海) shenzhen 华南(深圳) hk 亚太(香港) vnga 国际专线(助力专享) 此列表仅供参考。 Roles 获取此服务器的所有角色。 public IReadOnlyCollection<RestRole> Roles { get; } Property Value IReadOnlyCollection<RestRole> Status TODO: To be documented. public int Status { get; } Property Value int TextChannels 获取此服务器中所有具有文字聊天能力的频道。 public IReadOnlyCollection<RestTextChannel> TextChannels { get; } Property Value IReadOnlyCollection<RestTextChannel> Remarks 语音频道也是一种文字频道，此计算属性本意用于获取所有具有文字聊天能力的频道，通过此方法获取到的文字频道列表中也包含了语音频道。 如需获取频道的实际类型，请参考 GetChannelType(IChannel)。 Topic 获取此服务器的介绍。 public string Topic { get; } Property Value string VoiceChannels 获取此服务器中所有具有语音聊天能力的频道。 public IReadOnlyCollection<RestVoiceChannel> VoiceChannels { get; } Property Value IReadOnlyCollection<RestVoiceChannel> WelcomeChannelId 获取欢迎通知频道的 ID。 public ulong? WelcomeChannelId { get; } Property Value ulong? Methods AddBanAsync(IUser, int, string?, RequestOptions?) 封禁服务器内的用户。 public Task AddBanAsync(IUser user, int pruneDays = 0, string? reason = null, RequestOptions? options = null) Parameters user IUser 要封禁的用户。 pruneDays int 要删除此服务器中来自此用户的最近几天的消息，范围为 0 至 7，0 表示不删除。 reason string 封禁原因。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步封禁操作的任务。 Exceptions ArgumentException pruneDays 超出了 0 至 7 的范围。 AddBanAsync(ulong, int, string?, RequestOptions?) 封禁服务器内的用户。 public Task AddBanAsync(ulong userId, int pruneDays = 0, string? reason = null, RequestOptions? options = null) Parameters userId ulong 要封禁的用户的 ID。 pruneDays int 要删除此服务器中来自此用户的最近几天的消息，范围为 0 至 7，0 表示不删除。 reason string 封禁原因。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步封禁操作的任务。 Exceptions ArgumentException pruneDays 超出了 0 至 7 的范围。 CreateCategoryChannelAsync(string, Action<CreateCategoryChannelProperties>?, RequestOptions?) 在此服务器内创建一个新的分组频道。 public Task<RestCategoryChannel> CreateCategoryChannelAsync(string name, Action<CreateCategoryChannelProperties>? func = null, RequestOptions? options = null) Parameters name string 频道的名称。 func Action<CreateCategoryChannelProperties> 一个包含要应用到新创建频道的配置的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestCategoryChannel> 一个表示异步创建操作的任务。任务的结果包含新创建的分组频道。 CreateEmoteAsync(string, Image, RequestOptions?) 在此服务器内创建一个新的自定义表情。 public Task<GuildEmote> CreateEmoteAsync(string name, Image image, RequestOptions? options = null) Parameters name string 新自定义表情的名称。 image Image 新自定义表情的图像信息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<GuildEmote> 一个表示异步创建操作的任务。任务的结果包含新创建的自定义表情。 CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions?) 创建一个到此服务器的新邀请。 public Task<RestInvite> CreateInviteAsync(InviteMaxAge maxAge = InviteMaxAge._604800, InviteMaxUses maxUses = InviteMaxUses.Unlimited, RequestOptions? options = null) Parameters maxAge InviteMaxAge 邀请链接的有效时长，null 表示永不过期。 maxUses InviteMaxUses 邀请链接的可用人次，null 表示无限制。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestInvite> 一个表示异步创建操作的任务。任务的结果包含新创建的邀请链接的元数据，其中包含有关邀请链接的信息。 CreateInviteAsync(int?, int?, RequestOptions?) 创建一个到此服务器的新邀请。 public Task<RestInvite> CreateInviteAsync(int? maxAge = 604800, int? maxUses = null, RequestOptions? options = null) Parameters maxAge int? 邀请链接的有效时长，NeverExpires 表示永不过期。 maxUses int? 邀请链接的可用人次，Unlimited 表示无限制。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestInvite> 一个表示异步创建操作的任务。任务的结果包含新创建的邀请链接的元数据，其中包含有关邀请链接的信息。 CreateRoleAsync(string?, RequestOptions?) 在此服务器内创建一个新角色。 public Task<RestRole> CreateRoleAsync(string? name = null, RequestOptions? options = null) Parameters name string 角色的名称。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestRole> 一个表示异步创建操作的任务。任务的结果包含新创建的角色。 CreateTextChannelAsync(string, Action<CreateTextChannelProperties>?, RequestOptions?) 在此服务器内创建一个新的文字频道。 public Task<RestTextChannel> CreateTextChannelAsync(string name, Action<CreateTextChannelProperties>? func = null, RequestOptions? options = null) Parameters name string 频道的名称。 func Action<CreateTextChannelProperties> 一个包含要应用到新创建频道的配置的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestTextChannel> 一个表示异步创建操作的任务。任务的结果包含新创建的文字频道。 CreateVoiceChannelAsync(string, Action<CreateVoiceChannelProperties>?, RequestOptions?) 在此服务器内创建一个新的语音频道。 public Task<RestVoiceChannel> CreateVoiceChannelAsync(string name, Action<CreateVoiceChannelProperties>? func = null, RequestOptions? options = null) Parameters name string 频道的名称。 func Action<CreateVoiceChannelProperties> 一个包含要应用到新创建频道的配置的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestVoiceChannel> 一个表示异步创建操作的任务。任务的结果包含新创建的语音频道。 DeleteEmoteAsync(GuildEmote, RequestOptions?) 删除此服务器内的现有自定义表情。 public Task DeleteEmoteAsync(GuildEmote emote, RequestOptions? options = null) Parameters emote GuildEmote 要删除的自定义表情。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步删除操作的任务。 GetActiveBoostSubscriptionsAsync(RequestOptions?) 获取此服务器所有生效中的服务器助力包。 public Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> GetActiveBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> 一个表示异步获取操作的任务。任务的结果是所有为此服务器助力的用户及所应用的生效中的服务器助力包。 GetBadgeAsync(BadgeStyle, RequestOptions?) 获取与此服务器关联的徽章。 public Task<Stream> GetBadgeAsync(BadgeStyle style = BadgeStyle.GuildName, RequestOptions? options = null) Parameters style BadgeStyle 要获取的徽章的样式。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Stream> 一个表示异步获取操作的任务。任务的结果包含与此服务器关联的徽章的流。 GetBanAsync(IUser, RequestOptions?) 获取指定用户在此服务器内当前的封禁信息。 public Task<RestBan?> GetBanAsync(IUser user, RequestOptions? options = null) Parameters user IUser 要获取封禁信息的用户。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestBan> 一个表示异步获取操作的任务。任务的结果包含该用户在此服务器内的封禁信息；如果该用户当前未被此服务器封禁，则返回 null。 GetBanAsync(ulong, RequestOptions?) 获取指定用户在此服务器内的封禁信息。 public Task<RestBan?> GetBanAsync(ulong userId, RequestOptions? options = null) Parameters userId ulong 要获取封禁信息的用户的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestBan> 一个表示异步获取操作的任务。任务的结果包含该用户在此服务器内的封禁信息；如果该用户未被此服务器封禁，或封禁已过期或解除，则返回 null。 GetBansAsync(RequestOptions?) 获取此服务器的所有封禁信息。 public Task<IReadOnlyCollection<RestBan>> GetBansAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<RestBan>> 一个表示异步获取操作的任务。任务的结果包含此服务器的所有封禁信息。 GetBoostSubscriptionsAsync(RequestOptions?) 所有此服务器的所有服务器助力包。 public Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> GetBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> 一个表示异步获取操作的任务。任务的结果是所有为此服务器助力的用户及所应用的服务器助力包。 GetCategoryChannelAsync(ulong, RequestOptions?) 获取此服务器内指定的分组频道。 public Task<RestCategoryChannel?> GetCategoryChannelAsync(ulong id, RequestOptions? options = null) Parameters id ulong 要获取的频道的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestCategoryChannel> 一个表示异步获取操作的任务。任务的结果包含与指定的 id 关联的频道；如果未找到，则返回 null。 GetCategoryChannelsAsync(RequestOptions?) 获取此服务器中的所有分组频道。 public Task<IReadOnlyCollection<RestCategoryChannel>> GetCategoryChannelsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<RestCategoryChannel>> 一个表示异步获取操作的任务。任务的结果包含此服务器的所有分组频道。 GetChannelAsync(ulong, RequestOptions?) 获取此服务器内的频道。 public Task<RestGuildChannel> GetChannelAsync(ulong id, RequestOptions? options = null) Parameters id ulong 要获取的频道的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestGuildChannel> 一个表示异步获取操作的任务。任务的结果包含与指定的 id 关联的频道；如果未找到，则返回 null。 GetChannelsAsync(RequestOptions?) 获取此服务器的所有频道。 public Task<IReadOnlyCollection<RestGuildChannel>> GetChannelsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<RestGuildChannel>> 一个表示异步获取操作的任务。任务的结果包含此服务器的所有频道。 GetCurrentUserAsync(RequestOptions?) 获取此服务器内当前登录的用户。 public Task<RestGuildUser> GetCurrentUserAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<RestGuildUser> 一个表示异步获取操作的任务。任务的结果包含此服务器内当前登录的用户。 GetDefaultChannelAsync(RequestOptions?) 获取此服务器的默认文字频道。 public Task<RestTextChannel?> GetDefaultChannelAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<RestTextChannel> 一个表示异步获取操作的任务。任务的结果包含此服务器的默认文字频道；如果未找到，则返回 null。 GetEmoteAsync(string, RequestOptions?) 获取此服务器的指定自定义表情。 public Task<GuildEmote?> GetEmoteAsync(string id, RequestOptions? options = null) Parameters id string 要获取的自定义表情的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<GuildEmote> 一个表示异步获取操作的任务。任务的结果包含与指定的 id 关联的自定义表情；如果未找到，则返回 null。 GetEmotesAsync(RequestOptions?) 获取此服务器的所有自定义表情。 public Task<IReadOnlyCollection<GuildEmote>> GetEmotesAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<GuildEmote>> 一个表示异步获取操作的任务。任务的结果包含此服务器的所有自定义表情。 GetInvitesAsync(RequestOptions?) 获取此服务器内的所有邀请信息。 public Task<IReadOnlyCollection<IInvite>> GetInvitesAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IInvite>> 一个表示异步获取操作的任务。任务的结果包含此服务器内的所有邀请信息。 GetOwnerAsync(RequestOptions?) 获取此服务器的所有者。 public Task<RestGuildUser> GetOwnerAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<RestGuildUser> 一个表示异步获取操作的任务。任务的结果包含此服务器的所有者。 GetRole(uint) 获取此服务器内的角色。 public RestRole? GetRole(uint id) Parameters id uint 要获取的角色的 ID。 Returns RestRole 一个表示异步获取操作的任务。任务的结果包含与指定的 id 关联的角色；如果未找到，则返回 null。 GetTextChannelAsync(ulong, RequestOptions?) 获取此服务器内指定具有文字聊天能力的频道。 public Task<RestTextChannel?> GetTextChannelAsync(ulong id, RequestOptions? options = null) Parameters id ulong 要获取的频道的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestTextChannel> 一个表示异步获取操作的任务。任务的结果包含与指定的 id 关联的频道；如果未找到，则返回 null。 Remarks 语音频道也是一种文字频道，此方法本意用于获取具有文字聊天能力的频道。如果通过此方法传入的 ID 对应的频道是语音频道，那么也会返回对应的语音频道实体。 如需获取频道的实际类型，请参考 GetChannelType(IChannel)。 GetTextChannelsAsync(RequestOptions?) 获取此服务器中所有具有文字聊天能力的频道。 public Task<IReadOnlyCollection<RestTextChannel>> GetTextChannelsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<RestTextChannel>> 一个表示异步获取操作的任务。任务的结果包含此服务器的所有具有文字聊天能力的频道。 Remarks 语音频道也是一种文字频道，此方法本意用于获取所有具有文字聊天能力的频道，通过此方法获取到的文字频道列表中也包含了语音频道。 如需获取频道的实际类型，请参考 GetChannelType(IChannel)。 GetUserAsync(ulong, RequestOptions?) 获取此服务器内的用户。 public Task<RestGuildUser> GetUserAsync(ulong id, RequestOptions? options = null) Parameters id ulong 要获取的用户的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestGuildUser> 一个表示异步获取操作的任务。任务的结果包含与指定的 id 关联的用户；如果未找到，则返回 null。 GetUsersAsync(RequestOptions?) 获取此服务器内的所有用户。 public IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> GetUsersAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> 一个表示异步获取操作的任务。任务的结果包含此服务器内的所有用户。 GetVoiceChannelAsync(ulong, RequestOptions?) 获取此服务器内指定具有语音聊天能力的频道。 public Task<RestVoiceChannel?> GetVoiceChannelAsync(ulong id, RequestOptions? options = null) Parameters id ulong 要获取的频道的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestVoiceChannel> 一个表示异步获取操作的任务。任务的结果包含与指定的 id 关联的频道；如果未找到，则返回 null。 GetVoiceChannelsAsync(RequestOptions?) 获取此服务器中所有具有语音聊天能力的频道。 public Task<IReadOnlyCollection<RestVoiceChannel>> GetVoiceChannelsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<RestVoiceChannel>> 一个表示异步获取操作的任务。任务的结果包含此服务器的所有具有语音聊天能力的频道。 GetWelcomeChannelAsync(RequestOptions?) 获取此服务器的欢迎通知频道。 public Task<RestTextChannel?> GetWelcomeChannelAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<RestTextChannel> 一个表示异步获取操作的任务。任务的结果包含此服务器的欢迎通知频道；如果未找到，则返回 null。 LeaveAsync(RequestOptions?) 退出此服务器。 public Task LeaveAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步退出操作的任务。 ModifyEmoteNameAsync(GuildEmote, string, RequestOptions?) 修改此服务器内的现有自定义表情。 public Task ModifyEmoteNameAsync(GuildEmote emote, string name, RequestOptions? options = null) Parameters emote GuildEmote 要修改的自定义表情。 name string 新的自定义表情名称。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。任务的结果包含修改后的自定义表情。 Exceptions ArgumentNullException name is null. MoveUsersAsync(IEnumerable<IGuildUser>, IVoiceChannel, RequestOptions?) 移动用户到语音频道。 public Task MoveUsersAsync(IEnumerable<IGuildUser> users, IVoiceChannel targetChannel, RequestOptions? options = null) Parameters users IEnumerable<IGuildUser> 要移动的用户。 targetChannel IVoiceChannel 要移动用户到的语音频道。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步移动操作的任务。 RemoveBanAsync(IUser, RequestOptions?) 解除服务器对用户的封禁。 public Task RemoveBanAsync(IUser user, RequestOptions? options = null) Parameters user IUser 要解除封禁的用户。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步封禁解除操作的任务。 RemoveBanAsync(ulong, RequestOptions?) 解除服务器对用户的封禁。 public Task RemoveBanAsync(ulong userId, RequestOptions? options = null) Parameters userId ulong 要解除封禁的用户的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步封禁解除操作的任务。 SearchUsersAsync(Action<SearchGuildMemberProperties>, int, RequestOptions?) 获取此服务器内与指定搜索条件匹配的用户。 public IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> SearchUsersAsync(Action<SearchGuildMemberProperties> func, int limit = 50, RequestOptions? options = null) Parameters func Action<SearchGuildMemberProperties> 一个包含设置服务器用户搜索条件属性的委托。 limit int 要获取搜索到的服务器用户的数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> 分页的服务器用户集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 此方法将尝试获取所有与指定搜索条件匹配的用户。此方法会根据 MaxUsersPerBatch 将请求拆分。换句话说，如果搜索结果有 3000 名用户，而 MaxUsersPerBatch 的常量为 50，则请求将被拆分为 60 个单独请求，因此异步枚举器会异步枚举返回 60 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 60 个响应返回的集合，并将其合并为一个集合。 ToString() 获取此服务器的名称。 public override string ToString() Returns string 此服务器的名称。 UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 public Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 KOOK REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 KOOK 服务端的数据。"
  },
  "api/Kook.Rest.RestGuildChannel.html": {
    "href": "api/Kook.Rest.RestGuildChannel.html",
    "title": "Class RestGuildChannel | Kook.Net 文档",
    "keywords": "Class RestGuildChannel Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的服务器频道。 public class RestGuildChannel : RestChannel, IUpdateable, IGuildChannel, IChannel, IEntity<ulong>, IDeletable Inheritance object RestEntity<ulong> RestChannel RestGuildChannel Implements IUpdateable IGuildChannel IChannel IEntity<ulong> IDeletable Derived RestCategoryChannel RestTextChannel Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties CreatorId 获取创建此频道的用户的 ID。 public ulong? CreatorId { get; } Property Value ulong? Guild 获取此频道所属的服务器。 public IGuild Guild { get; } Property Value IGuild GuildId 获取与此频道所属的服务器的 ID。 public ulong GuildId { get; } Property Value ulong Name 获取此频道的名称。 public string Name { get; } Property Value string Position 获取此频道在服务器频道列表中的位置。 public int? Position { get; } Property Value int? Remarks 更小的数值表示更靠近列表顶部的位置。 RolePermissionOverwrites 获取此频道的角色的权限重写集合。 public virtual IReadOnlyCollection<RolePermissionOverwrite> RolePermissionOverwrites { get; } Property Value IReadOnlyCollection<RolePermissionOverwrite> Type 获取此频道的类型。 public ChannelType Type { get; } Property Value ChannelType UserPermissionOverwrites 获取此频道的用户的权限重写集合。 public virtual IReadOnlyCollection<UserPermissionOverwrite> UserPermissionOverwrites { get; } Property Value IReadOnlyCollection<UserPermissionOverwrite> Methods AddPermissionOverwriteAsync(IGuildUser, RequestOptions?) 添加给定用户的权限重写配置。 public Task AddPermissionOverwriteAsync(IGuildUser user, RequestOptions? options = null) Parameters user IGuildUser 要添加权限重写配置的用户。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步添加频道内用户权限重写配置操作的任务。 AddPermissionOverwriteAsync(IRole, RequestOptions?) 添加给定角色的权限重写配置。 public Task AddPermissionOverwriteAsync(IRole role, RequestOptions? options = null) Parameters role IRole 要添加权限重写配置的角色。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步添加频道内角色权限重写配置操作的任务。 DeleteAsync(RequestOptions?) 删除此对实体象及其所有子实体对象。 public Task DeleteAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task GetCreatorAsync(RequestOptions?) 获取此频道的创建者。 public Task<RestUser?> GetCreatorAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<RestUser> 一个表示异步获取操作的任务。任务的结果为此频道的创建者；如果没有找到则为 null。 Remarks 此方法会尝试获取服务器创建者的非服务器特定的用户实体。要获取该用户作为此服务器成员的服务器用户实体，请在 Guild 上调用 GetUserAsync(ulong, CacheMode, RequestOptions?)。 GetPermissionOverwrite(IRole) 获取给定角色的权限重写配置。 public OverwritePermissions? GetPermissionOverwrite(IRole role) Parameters role IRole 要获取权限重写配置的角色。 Returns OverwritePermissions? 一个表示目标角色的权限重写配置；如果没有设置则为 null。 GetPermissionOverwrite(IUser) 获取给定用户的权限重写配置。 public OverwritePermissions? GetPermissionOverwrite(IUser user) Parameters user IUser 要获取权限重写配置的用户。 Returns OverwritePermissions? 一个表示目标用户的权限重写配置；如果没有设置则为 null。 ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions?) 修改此服务器频道。 public Task ModifyAsync(Action<ModifyGuildChannelProperties> func, RequestOptions? options = null) Parameters func Action<ModifyGuildChannelProperties> 一个包含修改服务器频道属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示服务器频道属性修改操作的异步任务。 See Also ModifyGuildChannelProperties ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions?) 更新给定用户的权限重写配置。 public Task ModifyPermissionOverwriteAsync(IGuildUser user, Func<OverwritePermissions, OverwritePermissions> func, RequestOptions? options = null) Parameters user IGuildUser 要更新权限重写配置的用户。 func Func<OverwritePermissions, OverwritePermissions> 一个包含修改权限重写配置的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新频道内用户权限重写配置操作的任务。 ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions?) 更新给定角色的权限重写配置。 public Task ModifyPermissionOverwriteAsync(IRole role, Func<OverwritePermissions, OverwritePermissions> func, RequestOptions? options = null) Parameters role IRole 要更新权限重写配置的角色。 func Func<OverwritePermissions, OverwritePermissions> 一个包含修改权限重写配置的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新频道内角色权限重写配置操作的任务。 RemovePermissionOverwriteAsync(IGuildUser, RequestOptions?) 对于给定的用户，如果存在权限重写配置，则移除它。 public Task RemovePermissionOverwriteAsync(IGuildUser user, RequestOptions? options = null) Parameters user IGuildUser 要对其移除权限重写配置的用户。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步移除频道内用户权限重写配置操作的任务。 RemovePermissionOverwriteAsync(IRole, RequestOptions?) 对于给定的角色，如果存在权限重写配置，则移除它。 public Task RemovePermissionOverwriteAsync(IRole role, RequestOptions? options = null) Parameters role IRole 要对其移除权限重写配置的角色。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步移除频道内角色权限重写配置操作的任务。 ToString() 获取此频道的名称。 public override string ToString() Returns string 此频道的名称。 UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 public override Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 KOOK REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 KOOK 服务端的数据。"
  },
  "api/Kook.Rest.RestGuildUser.html": {
    "href": "api/Kook.Rest.RestGuildUser.html",
    "title": "Class RestGuildUser | Kook.Net 文档",
    "keywords": "Class RestGuildUser Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的服务器用户。 public class RestGuildUser : RestUser, IUpdateable, IGuildUser, IUser, IEntity<ulong>, IMentionable, IPresence, IVoiceState Inheritance object RestEntity<ulong> RestUser RestGuildUser Implements IUpdateable IGuildUser IUser IEntity<ulong> IMentionable IPresence IVoiceState Inherited Members RestUser.Username RestUser.IdentifyNumberValue RestUser.IsBot RestUser.IsBanned RestUser.HasBuff RestUser.HasAnnualBuff RestUser.Avatar RestUser.BuffAvatar RestUser.Banner RestUser.IsDenoiseEnabled RestUser.UserTag RestUser.Nameplates RestUser.IsSystemUser RestUser.IdentifyNumber RestUser.KMarkdownMention RestUser.IsOnline RestUser.ActiveClient RestUser.CreateDMChannelAsync(RequestOptions) RestUser.GetIntimacyAsync(RequestOptions) RestUser.UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) RestUser.BlockAsync(RequestOptions) RestUser.UnblockAsync(RequestOptions) RestUser.RemoveFriendAsync(RequestOptions) RestUser.ToString() RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods UserExtensions.BanAsync(IGuildUser, int, string?, RequestOptions?) Format.UsernameAndIdentifyNumber(IUser, bool) UserExtensions.SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendTextAsync(IUser, string, IQuote?, RequestOptions?) Properties ActiveAt 获取此用户在该服务器内的最近活跃时间。 public DateTimeOffset? ActiveAt { get; } Property Value DateTimeOffset? Color 获取此用户的显示名称的颜色。 public Color? Color { get; } Property Value Color? Remarks 如果此用户所拥有的最高角色的颜色类型为渐变色，则此属性返回的颜色是渐变色权益失效后的回退颜色。 warning 一个角色的颜色可能是纯色或渐变色，参见 ColorType。但由于服务器用户列表 API 及服务器用户详情 API 所返回的用户信息均不包含角色的颜色类型和渐变色信息，因此，如果用户的最高角色的颜色是渐变色， 则此属性的值可能是不正确的。如需获取该用户的准确的显示名称及颜色，请获取此用户的最高角色实体对象，访问其颜色类型及渐变色属性。 if (guildUser.RoleIds.Select(x => guildUser.Guild.GetRole(x)).OfType<IRole>().MinBy(x => x.Position) is { } topRole) { ColorType colorType = topRole.ColorType; GradientColor? gradientColor = topRole.GradientColor; } DisplayName 获取此用户的显示名称。 public string DisplayName { get; } Property Value string Remarks 如果此用户在该服务器内设置了昵称，则此属性返回昵称；否则返回用户名。 Guild 获取此服务器用户所属的服务器。 public IGuild Guild { get; } Property Value IGuild GuildId 获取此用户所属服务器的 ID。 public ulong GuildId { get; } Property Value ulong GuildPermissions 获取此用户在该服务器内的权限。 public GuildPermissions GuildPermissions { get; } Property Value GuildPermissions Exceptions InvalidOperationException 解析服务器用户的权限需要所属服务器的基础数据已完整下载。 IsMobileVerified 获取此用户的手机号码是否已验证。 public bool? IsMobileVerified { get; } Property Value bool? IsOwner 获取此用户是否为当前服务器的所有者。 public bool? IsOwner { get; } Property Value bool? JoinedAt 获取此用户加入服务器的时间。 public DateTimeOffset? JoinedAt { get; } Property Value DateTimeOffset? Nickname 获取此用户在该服务器内的昵称。 public string? Nickname { get; } Property Value string Remarks 如果此用户在该服务器内没有设置昵称，则此属性返回 null。 PlainTextMention 获取一个用于在纯文本格式文本中提及此对象的格式化字符串。 public string PlainTextMention { get; } Property Value string RoleIds 获取此用户在该服务器内拥有的所有角色的 ID。 public IReadOnlyCollection<uint> RoleIds { get; } Property Value IReadOnlyCollection<uint> Remarks 此属性返回此用户所拥有的所有角色的 ID。对于 WebSocket 服务器用户实体，Roles 属性可以用来获取所有角色对象；对于 REST 服务器用户实体，受限于 KOOK API，在服务器用户实体上仅能直接获取其所拥有的所有角色的 ID。 Methods AddRoleAsync(IRole, RequestOptions?) 在该服务器内授予此用户指定的角色。 public Task AddRoleAsync(IRole role, RequestOptions? options = null) Parameters role IRole 要在该服务器内为此用户授予的角色。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步授予操作的任务。 AddRoleAsync(uint, RequestOptions?) 在该服务器内授予此用户指定的角色。 public Task AddRoleAsync(uint roleId, RequestOptions? options = null) Parameters roleId uint 要在该服务器内为此用户授予的角色的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步授予操作的任务。 AddRolesAsync(IEnumerable<IRole>, RequestOptions?) 在该服务器内授予此用户指定的一些角色。 public Task AddRolesAsync(IEnumerable<IRole> roles, RequestOptions? options = null) Parameters roles IEnumerable<IRole> 要在该服务器内为此用户授予的所有角色。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步授予操作的任务。 AddRolesAsync(IEnumerable<uint>, RequestOptions?) 在该服务器内授予此用户指定的一些角色。 public Task AddRolesAsync(IEnumerable<uint> roleIds, RequestOptions? options = null) Parameters roleIds IEnumerable<uint> 要在该服务器内为此用户授予的所有角色的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步授予操作的任务。 DeafenAsync(RequestOptions?) 在该服务器内限制此用户的语音接收。 public Task DeafenAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步静音操作的任务。 Remarks 此操作会使此用户无法在该服务器内的语音频道中接收来自其他用户的语音。 GetBoostSubscriptionsAsync(RequestOptions?) 获取此用户在该服务器内的所有服务器助力包订阅信息。 public Task<IReadOnlyCollection<BoostSubscriptionMetadata>> GetBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<BoostSubscriptionMetadata>> 一个表示异步获取操作的任务。任务的结果包含此用户在该服务器内的所有服务器助力包订阅信息。 GetConnectedVoiceChannelsAsync(RequestOptions?) 获取此用户当前所连接到的所有语音频道。 public Task<IReadOnlyCollection<IVoiceChannel>> GetConnectedVoiceChannelsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IVoiceChannel>> 一个表示异步获取操作的任务。任务的结果包含此用户当前所连接到的所有语音频道。 GetPermissions(IGuildChannel) 获取此用户在指定频道内所拥有的权限。 public ChannelPermissions GetPermissions(IGuildChannel channel) Parameters channel IGuildChannel 要获取权限的频道。 Returns ChannelPermissions 一个表示此用户在指定频道内所拥有的频道权限的权限集。 KickAsync(RequestOptions?) 将此用户从此服务器中踢出。 public Task KickAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步踢出操作的任务。 ModifyNicknameAsync(string?, RequestOptions?) 修改此用户在该服务器内的昵称。 public Task ModifyNicknameAsync(string? name, RequestOptions? options = null) Parameters name string 要设置到此用户在该服务器内的新昵称。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 Remarks 此方法使用指定的属性修改当前用户在该服务器内的昵称。 如要清除此用户在该服务器内的昵称，请将 name 设置为 null。 warning 如果将昵称设置为与用户名相同，KOOK 也会将该用户在此服务器内的昵称清除，显示名称将跟随用户名，而不是固定为指定的昵称。 MuteAsync(RequestOptions?) 在该服务器内关闭此用户的语音输入。 public Task MuteAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步关闭操作的任务。 Remarks 此操作会使此用户无法在该服务器内的语音频道中发言。 RemoveRoleAsync(IRole, RequestOptions?) 在该服务器内撤销此用户指定的角色。 public Task RemoveRoleAsync(IRole role, RequestOptions? options = null) Parameters role IRole 要在该服务器内为此用户撤销的角色。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步撤销操作的任务。 RemoveRoleAsync(uint, RequestOptions?) 在该服务器内撤销此用户指定的角色。 public Task RemoveRoleAsync(uint roleId, RequestOptions? options = null) Parameters roleId uint 要在该服务器内为此用户撤销的角色的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步撤销操作的任务。 RemoveRolesAsync(IEnumerable<IRole>, RequestOptions?) 在该服务器内撤销此用户指定的一些角色。 public Task RemoveRolesAsync(IEnumerable<IRole> roles, RequestOptions? options = null) Parameters roles IEnumerable<IRole> 要在该服务器内为此用户撤销的所有角色。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步撤销操作的任务。 RemoveRolesAsync(IEnumerable<uint>, RequestOptions?) 在该服务器内撤销此用户指定的一些角色。 public Task RemoveRolesAsync(IEnumerable<uint> roleIds, RequestOptions? options = null) Parameters roleIds IEnumerable<uint> 要在该服务器内为此用户撤销的所有角色的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步撤销操作的任务。 RequestFriendAsync(RequestOptions?) 向此用户发送好友请求。 public override Task RequestFriendAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步发送操作的任务。 UndeafenAsync(RequestOptions?) 在该服务器内恢复此用户的语音接收。 public Task UndeafenAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步恢复操作的任务。 Remarks 此操作会撤销由于服务器静音而导致的无法在语音频道中接收来自其他用户的语音的状态。 UnmuteAsync(RequestOptions?) 在该服务器内恢复此用户的语音输入。 public Task UnmuteAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步恢复操作的任务。 Remarks 此操作会撤销由于服务器闭麦而导致的在语音频道中无法发言状态。 UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 public override Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 KOOK REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 KOOK 服务端的数据。"
  },
  "api/Kook.Rest.RestIntimacy.html": {
    "href": "api/Kook.Rest.RestIntimacy.html",
    "title": "Class RestIntimacy | Kook.Net 文档",
    "keywords": "Class RestIntimacy Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的亲密度。 public class RestIntimacy : RestEntity<ulong>, IIntimacy, IEntity<ulong> Inheritance object RestEntity<ulong> RestIntimacy Implements IIntimacy IEntity<ulong> Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 由于亲密度的使用率较低，官方已隐藏亲密度的管理入口。如要管理亲密度，请访问 https://developer.kookapp.cn/bot/cohesion，在左上角切换至要管理其亲密度的应用。 Properties Images 获取此亲密度的所有形象图像。 public IReadOnlyCollection<IntimacyImage> Images { get; } Property Value IReadOnlyCollection<IntimacyImage> LastModifyAt 获取此亲密度最近一次修改的时间。 public DateTimeOffset? LastModifyAt { get; } Property Value DateTimeOffset? LastReadAt 获取用户最近一次查看此亲密度的时间。 public DateTimeOffset LastReadAt { get; } Property Value DateTimeOffset Score 获取此亲密度的分数。 public int Score { get; } Property Value int Remarks 亲密度的分数是一个整数，表示用户与此亲密度的亲密程度，最小值为 0，最大值为 2200。 亲密度以 10 颗颜色与样式不同的心形图案组成。 当亲密度分数不小于 1000 时，亲密度将显示为红色，其中，实心图案的数量为 (Score - 1000) / 100 的四舍五入值，最大值为 10，其余为空心图案。 当亲密度分数小于 1000 时，亲密度将显示为灰色，其中，心碎图案的数量为 10 - Score / 100 的四舍五入值，其余为空心图案。 SocialInfo 获取与此亲密度关联的社交信息。 public string SocialInfo { get; } Property Value string User 获取与此亲密度相关的用户。 public IUser User { get; } Property Value IUser Methods UpdateAsync(Action<IntimacyProperties>, RequestOptions?) 修改此用户的亲密度信息。 public Task UpdateAsync(Action<IntimacyProperties> func, RequestOptions? options = null) Parameters func Action<IntimacyProperties> 一个包含修改此亲密度信息的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。"
  },
  "api/Kook.Rest.RestInvite.html": {
    "href": "api/Kook.Rest.RestInvite.html",
    "title": "Class RestInvite | Kook.Net 文档",
    "keywords": "Class RestInvite Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的邀请。 public class RestInvite : RestEntity<uint>, IInvite, IEntity<uint>, IDeletable, IUpdateable Inheritance object RestEntity<uint> RestInvite Implements IInvite IEntity<uint> IDeletable IUpdateable Inherited Members RestEntity<uint>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties ChannelId 获取此邀请链接指向的频道的 ID。 public ulong? ChannelId { get; } Property Value ulong? ChannelName 获取此邀请链接指向的频道的名称。 public string? ChannelName { get; } Property Value string ChannelType 获取此邀请链接指向的频道的类型。 public ChannelType ChannelType { get; } Property Value ChannelType Code 获取此邀请的唯一代码。 public string Code { get; } Property Value string CreatedAt 获取此邀请的创建时间。 public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset ExpiresAt 获取此邀请的过期时间。 public DateTimeOffset? ExpiresAt { get; } Property Value DateTimeOffset? Remarks 如果此邀请永不过期，则此属性的值为 null。 GuildId 获取此邀请链接指向的服务器的 ID。 public ulong? GuildId { get; } Property Value ulong? GuildName 获取此邀请链接指向的服务器的名称。 public string GuildName { get; } Property Value string InvitedUsersCount 获取已接受此邀请的用户数量。 public int InvitedUsersCount { get; } Property Value int Inviter 获取创建此邀请的用户。 public IUser Inviter { get; } Property Value IUser MaxAge 获取此邀请的有效时长。 public TimeSpan? MaxAge { get; } Property Value TimeSpan? Remarks 如果此邀请永不过期，则此属性的值为 null。 MaxUses 获取此邀请的可用人次。 public int? MaxUses { get; } Property Value int? Remarks 如果此邀请不限制可用人次，则此属性的值为 null。 RemainingUses 获取此邀请剩余可用次数。 public int? RemainingUses { get; } Property Value int? Remarks 如果此邀请不限制可用人次，则此属性的值为 null。 Url 获取用于接受此邀请的 URL，URL 的路径中包含 Code 属性的值。 public string Url { get; } Property Value string Uses 获取此邀请已被使用的次数。 public int? Uses { get; } Property Value int? Methods DeleteAsync(RequestOptions?) 删除此对实体象及其所有子实体对象。 public Task DeleteAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task ToString() 获取用于接受此邀请的 URL，URL 的路径中包含 Code 属性的值。 public override string ToString() Returns string 此邀请的 URL，URL 的路径中包含 Code 属性的值。 UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 public Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 KOOK REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 KOOK 服务端的数据。"
  },
  "api/Kook.Rest.RestMessage.html": {
    "href": "api/Kook.Rest.RestMessage.html",
    "title": "Class RestMessage | Kook.Net 文档",
    "keywords": "Class RestMessage Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的消息。 public abstract class RestMessage : RestEntity<Guid>, IMessage, IEntity<Guid>, IDeletable, IUpdateable Inheritance object RestEntity<Guid> RestMessage Implements IMessage IEntity<Guid> IDeletable IUpdateable Derived RestSystemMessage RestUserMessage Inherited Members RestEntity<Guid>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods MessageExtensions.GetJumpUrl(IMessage) Properties Attachments 获取此消息中包含的所有附件。 public virtual IReadOnlyCollection<Attachment> Attachments { get; } Property Value IReadOnlyCollection<Attachment> Remarks 此属性也会包含从卡片中解析出来的附件信息。 Author 获取此消息的作者。 public IUser Author { get; } Property Value IUser Cards 获取此消息中包含的所有卡片。 public virtual IReadOnlyCollection<ICard> Cards { get; } Property Value IReadOnlyCollection<ICard> Channel 获取此消息的来源频道。 public IMessageChannel Channel { get; } Property Value IMessageChannel CleanContent 获取此消息的纯净内容。 public string CleanContent { get; } Property Value string 此属性会对 Content 的内容进行两步操作： 使用 Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) 方法解析所有标签的完整名称； 使用 StripMarkdown(string) 清理所有 KMarkdown 格式字符。 See Also Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) StripMarkdown(string) Content 获取此消息的内容。 public string Content { get; protected set; } Property Value string Remarks 如果消息不是文本消息，则此属性可能为空或包含原始代码。 EditedTimestamp 获取此消息最后一次编辑的时间。 public DateTimeOffset? EditedTimestamp { get; } Property Value DateTimeOffset? Remarks 如果此消息从未被编辑过，则此属性的值为 null。 Embeds 获取此消息中包含的所有嵌入式内容。 public virtual IReadOnlyCollection<IEmbed> Embeds { get; } Property Value IReadOnlyCollection<IEmbed> IsPinned 获取此消息是否被置顶。 public virtual bool? IsPinned { get; } Property Value bool? MentionedEveryone 获取此消息是否提及了全体成员。 public virtual bool MentionedEveryone { get; } Property Value bool MentionedHere 获取此消息是否提及了在线成员。 public virtual bool MentionedHere { get; } Property Value bool MentionedRoleIds 获取此消息中提及的所有角色的 ID。 public virtual IReadOnlyCollection<uint> MentionedRoleIds { get; } Property Value IReadOnlyCollection<uint> MentionedUsers 获取此消息中提及的所有用户。 public IReadOnlyCollection<RestUser> MentionedUsers { get; } Property Value IReadOnlyCollection<RestUser> Pokes public virtual IReadOnlyCollection<RestPokeAction> Pokes { get; } Property Value IReadOnlyCollection<RestPokeAction> Reactions 获取此消息中包含的所有回应。 public IReadOnlyDictionary<IEmote, ReactionMetadata> Reactions { get; } Property Value IReadOnlyDictionary<IEmote, ReactionMetadata> Source 获取此消息的来源。 public MessageSource Source { get; } Property Value MessageSource Tags 获取此消息中解析出的所有标签。 public virtual IReadOnlyCollection<ITag> Tags { get; } Property Value IReadOnlyCollection<ITag> Timestamp 获取此消息的发送时间。 public DateTimeOffset Timestamp { get; } Property Value DateTimeOffset Type 获取此消息的类型。 public MessageType Type { get; } Property Value MessageType Methods AddReactionAsync(IEmote, RequestOptions?) 向此消息添加一个回应。 public Task AddReactionAsync(IEmote emote, RequestOptions? options = null) Parameters emote IEmote 要用于向此消息添加回应的表情符号。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示添加添加异步操作的任务。 Exceptions NotSupportedException 此类型的消息不支持此操作。 DeleteAsync(RequestOptions?) 删除此对实体象及其所有子实体对象。 public Task DeleteAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task GetReactionUsersAsync(IEmote, RequestOptions?) 获取所有对消息使用给定表情符号进行回应的用户。 public Task<IReadOnlyCollection<IUser>> GetReactionUsersAsync(IEmote emote, RequestOptions? options = null) Parameters emote IEmote 要获取其回应用户的表情符号。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IUser>> 一个表示异步获取操作的任务。任务的结果包含对消息使用给定表情符号进行回应的所有用户。 Exceptions NotSupportedException 此类型的消息不支持此操作。 RemoveReactionAsync(IEmote, IUser, RequestOptions?) 从此消息中移除一个回应。 public Task RemoveReactionAsync(IEmote emote, IUser user, RequestOptions? options = null) Parameters emote IEmote 要从此消息移除的回应的表情符号。 user IUser 要移除其回应的用户。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步移除操作的任务。 Exceptions NotSupportedException 此类型的消息不支持此操作。 RemoveReactionAsync(IEmote, ulong, RequestOptions?) 从此消息中移除一个回应。 public Task RemoveReactionAsync(IEmote emote, ulong userId, RequestOptions? options = null) Parameters emote IEmote 要从此消息移除的回应的表情符号。 userId ulong 要移除其回应的用户的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步移除操作的任务。 Exceptions NotSupportedException 此类型的消息不支持此操作。 ToString() 获取此消息的内容。 public override string ToString() Returns string 此消息的内容。 Remarks 如果消息不是文本消息，则此属性可能为空或包含原始代码。 UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 public Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 KOOK REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 KOOK 服务端的数据。 Exceptions NotSupportedException 此类型的消息不支持此操作。"
  },
  "api/Kook.Rest.RestPokeAction.html": {
    "href": "api/Kook.Rest.RestPokeAction.html",
    "title": "Class RestPokeAction | Kook.Net 文档",
    "keywords": "Class RestPokeAction Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的 POKE 动作。 public class RestPokeAction : IPokeAction Inheritance object RestPokeAction Implements IPokeAction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Operator 获取执行此动作的用户。 public IUser Operator { get; } Property Value IUser Poke 获取此动作关联的 POKE。 public Poke Poke { get; } Property Value Poke Targets 获取此动作的目标用户。 public IReadOnlyCollection<IUser> Targets { get; } Property Value IReadOnlyCollection<IUser>"
  },
  "api/Kook.Rest.RestPresence.html": {
    "href": "api/Kook.Rest.RestPresence.html",
    "title": "Class RestPresence | Kook.Net 文档",
    "keywords": "Class RestPresence Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的当前登录的用户信息。 public class RestPresence : IPresence Inheritance object RestPresence Implements IPresence Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ActiveClient 获取此用于当前登录的客户端类型。 public ClientType? ActiveClient { get; } Property Value ClientType? IsOnline 获取此用户当前是否在线。 public bool? IsOnline { get; } Property Value bool?"
  },
  "api/Kook.Rest.RestReaction.html": {
    "href": "api/Kook.Rest.RestReaction.html",
    "title": "Class RestReaction | Kook.Net 文档",
    "keywords": "Class RestReaction Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的回应。 public class RestReaction : IReaction Inheritance object RestReaction Implements IReaction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count 获取添加或跟随此回应的用户数量。 public int Count { get; } Property Value int Emote 获取此回应所使用的表情符号。 public IEmote Emote { get; } Property Value IEmote Me 获取当前用户是否添加或跟随了此回应。 public bool Me { get; } Property Value bool"
  },
  "api/Kook.Rest.RestRole.html": {
    "href": "api/Kook.Rest.RestRole.html",
    "title": "Class RestRole | Kook.Net 文档",
    "keywords": "Class RestRole Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的可授予服务器用户的角色。 public class RestRole : RestEntity<uint>, IRole, IEntity<uint>, IDeletable, IMentionable, IComparable<IRole> Inheritance object RestEntity<uint> RestRole Implements IRole IEntity<uint> IDeletable IMentionable IComparable<IRole> Inherited Members RestEntity<uint>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Color 获取此角色的颜色。 public Color Color { get; } Property Value Color Remarks 如果此用户所拥有的最高角色的颜色类型为渐变色，则此属性返回的颜色是渐变色权益失效后的回退颜色。 ColorType 获取此角色的颜色类型。 public ColorType ColorType { get; } Property Value ColorType GradientColor 获取此角色的渐变色。 public GradientColor? GradientColor { get; } Property Value GradientColor? Remarks 如果此角色的颜色类型 ColorType 不为 Gradient，则此属性会返回 null。 Guild 获取拥有此角色的服务器。 public IGuild Guild { get; } Property Value IGuild IsEveryone 获取此角色是否为 @全体成员 全体成员角色。 public bool IsEveryone { get; } Property Value bool IsHoisted 获取拥有此角色的用户是否在用户列表中与普通在线成员分开显示。 public bool IsHoisted { get; } Property Value bool IsMentionable 获取是否允许任何人提及此角色。 public bool IsMentionable { get; } Property Value bool KMarkdownMention 返回一个用于在 KMarkdown 格式文本中提及此对象的格式化字符串。 public string KMarkdownMention { get; } Property Value string Name 获取此角色的名称。 public string Name { get; } Property Value string Permissions 获取此角色拥有的权限。 public GuildPermissions Permissions { get; } Property Value GuildPermissions PlainTextMention 获取一个用于在纯文本格式文本中提及此对象的格式化字符串。 public string PlainTextMention { get; } Property Value string Position 获取此角色在服务器角色列表中的位置。 public int Position { get; } Property Value int Remarks 更小的数值表示更靠近列表顶部的位置。 Type 获取此角色的类型。 public RoleType Type { get; } Property Value RoleType Methods CompareTo(IRole?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(IRole? role) Parameters role IRole Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. DeleteAsync(RequestOptions?) 删除此对实体象及其所有子实体对象。 public Task DeleteAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task GetUsersAsync(RequestOptions?) 获取拥有此角色的用户的集合。 public IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> GetUsersAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> 分页的用户集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取拥有此角色的所有服务器用户。此方法会根据 MaxUsersPerBatch 将请求拆分。换句话说，如果存在 500 个用户拥有此角色，而 MaxUsersPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 ModifyAsync(Action<RoleProperties>, RequestOptions?) 修改此角色。 public Task ModifyAsync(Action<RoleProperties> func, RequestOptions? options = null) Parameters func Action<RoleProperties> 一个包含修改角色属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 Remarks 此方法使用指定的属性修改当前角色信息。要查看可用的属性，请参考 RoleProperties。 ToString() 获取此角色的名称。 public override string ToString() Returns string 此角色的名称。"
  },
  "api/Kook.Rest.RestSelfUser.html": {
    "href": "api/Kook.Rest.RestSelfUser.html",
    "title": "Class RestSelfUser | Kook.Net 文档",
    "keywords": "Class RestSelfUser Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的当前登录的用户信息。 public class RestSelfUser : RestUser, IUpdateable, ISelfUser, IUser, IEntity<ulong>, IMentionable, IPresence Inheritance object RestEntity<ulong> RestUser RestSelfUser Implements IUpdateable ISelfUser IUser IEntity<ulong> IMentionable IPresence Inherited Members RestUser.Username RestUser.IdentifyNumberValue RestUser.IsBot RestUser.IsBanned RestUser.HasBuff RestUser.HasAnnualBuff RestUser.Avatar RestUser.BuffAvatar RestUser.Banner RestUser.IsDenoiseEnabled RestUser.UserTag RestUser.Nameplates RestUser.IsSystemUser RestUser.IdentifyNumber RestUser.KMarkdownMention RestUser.PlainTextMention RestUser.IsOnline RestUser.ActiveClient RestUser.CreateDMChannelAsync(RequestOptions) RestUser.GetIntimacyAsync(RequestOptions) RestUser.UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) RestUser.BlockAsync(RequestOptions) RestUser.UnblockAsync(RequestOptions) RestUser.RequestFriendAsync(RequestOptions) RestUser.RemoveFriendAsync(RequestOptions) RestUser.ToString() RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Format.UsernameAndIdentifyNumber(IUser, bool) UserExtensions.SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendTextAsync(IUser, string, IQuote?, RequestOptions?) Properties InvitedCount 获取此用户的邀请用户数。 public int InvitedCount { get; } Property Value int IsMobileVerified 获取此用户是否验证了手机号码。 public bool IsMobileVerified { get; } Property Value bool Mobile 获取此用户的手机号码。 public string? Mobile { get; } Property Value string MobilePrefix 获取此用户的手机号码前缀。 public string? MobilePrefix { get; } Property Value string Methods StartPlayingAsync(IGame, RequestOptions?) 开始一个新的游戏活动。 public Task StartPlayingAsync(IGame game, RequestOptions? options = null) Parameters game IGame 要显示的游戏。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步开始操作的任务。 Remarks 此操作会使当前用户的资料卡片上显式指定的游戏信息。 StartPlayingAsync(Music, RequestOptions?) 开始一个新的听音乐活动。 public Task StartPlayingAsync(Music music, RequestOptions? options = null) Parameters music Music 要播放的音乐。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步开始操作的任务。 Remarks 此操作会使当前用户的资料卡片上显式指定的音乐信息。 StopPlayingAsync(ActivityType, RequestOptions?) 停止活动。 public Task StopPlayingAsync(ActivityType type, RequestOptions? options = null) Parameters type ActivityType 要停止的活动类型。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步停止操作的任务。 Remarks 此操作会使当前用户的资料卡片上不再显示指定的活动信息。 UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 public override Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 KOOK REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 KOOK 服务端的数据。 Exceptions InvalidOperationException 无法使用不同的用户令牌更新此对象。"
  },
  "api/Kook.Rest.RestSystemMessage.html": {
    "href": "api/Kook.Rest.RestSystemMessage.html",
    "title": "Class RestSystemMessage | Kook.Net 文档",
    "keywords": "Class RestSystemMessage Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的系统消息。 public class RestSystemMessage : RestMessage, IUpdateable, ISystemMessage, IMessage, IEntity<Guid>, IDeletable Inheritance object RestEntity<Guid> RestMessage RestSystemMessage Implements IUpdateable ISystemMessage IMessage IEntity<Guid> IDeletable Inherited Members RestMessage.Type RestMessage.Channel RestMessage.Author RestMessage.Source RestMessage.Content RestMessage.CleanContent RestMessage.Attachments RestMessage.Timestamp RestMessage.EditedTimestamp RestMessage.MentionedEveryone RestMessage.MentionedHere RestMessage.Cards RestMessage.Embeds RestMessage.Pokes RestMessage.MentionedRoleIds RestMessage.MentionedUsers RestMessage.Tags RestMessage.IsPinned RestMessage.ToString() RestMessage.Reactions RestMessage.DeleteAsync(RequestOptions) RestMessage.UpdateAsync(RequestOptions) RestMessage.AddReactionAsync(IEmote, RequestOptions) RestMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) RestMessage.RemoveReactionAsync(IEmote, ulong, RequestOptions) RestMessage.GetReactionUsersAsync(IEmote, RequestOptions) RestEntity<Guid>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods MessageExtensions.GetJumpUrl(IMessage) Remarks warning KOOK 未统一规范系统消息类型，此类并未在 RestMessage 之上封装更多的实用功能。 Properties SystemMessageType 获取此系统消息的类型。 public SystemMessageType SystemMessageType { get; } Property Value SystemMessageType"
  },
  "api/Kook.Rest.RestTextChannel.html": {
    "href": "api/Kook.Rest.RestTextChannel.html",
    "title": "Class RestTextChannel | Kook.Net 文档",
    "keywords": "Class RestTextChannel Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示服务器中一个基于 REST 的具有文字聊天能力的频道，可以发送和接收消息。 public class RestTextChannel : RestGuildChannel, IUpdateable, IRestMessageChannel, ITextChannel, INestedChannel, IGuildChannel, IDeletable, IMentionable, IMessageChannel, IChannel, IEntity<ulong> Inheritance object RestEntity<ulong> RestChannel RestGuildChannel RestTextChannel Implements IUpdateable IRestMessageChannel ITextChannel INestedChannel IGuildChannel IDeletable IMentionable IMessageChannel IChannel IEntity<ulong> Derived RestVoiceChannel Inherited Members RestGuildChannel.RolePermissionOverwrites RestGuildChannel.UserPermissionOverwrites RestGuildChannel.Guild RestGuildChannel.Type RestGuildChannel.Name RestGuildChannel.Position RestGuildChannel.GuildId RestGuildChannel.CreatorId RestGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) RestGuildChannel.GetCreatorAsync(RequestOptions) RestGuildChannel.DeleteAsync(RequestOptions) RestGuildChannel.GetPermissionOverwrite(IUser) RestGuildChannel.GetPermissionOverwrite(IRole) RestGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) RestGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) RestGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) RestGuildChannel.ToString() RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties CategoryId 获取此嵌套频道在服务器频道列表中所属的分组频道的 ID。 public ulong? CategoryId { get; } Property Value ulong? Remarks 如果当前频道不属于任何分组频道，则会返回 null。 IsPermissionSynced 指示此嵌套频道的权限是否与其所属分组频道同步。 public bool? IsPermissionSynced { get; } Property Value bool? Remarks 如果权限同步，则此属性返回 true；如果权限不同步，则返回 false；如果无法确定权限是否同步，则返回 null。 KMarkdownMention 返回一个用于在 KMarkdown 格式文本中提及此对象的格式化字符串。 public string KMarkdownMention { get; } Property Value string PlainTextMention 获取一个用于在纯文本格式文本中提及此对象的格式化字符串。 public string PlainTextMention { get; } Property Value string SlowModeInterval 获取此频道当前设置的慢速模式延迟。 public virtual int SlowModeInterval { get; } Property Value int 一个 int，表示用户在可以发送另一条消息之前需要等待的时间（以秒为单位）；如果未启用，则为 0。 Remarks 拥有 ManageMessages 或 ManageChannels 权限的用户不受慢速模式延迟的限制。 Topic 获取此频道的说明。 public string Topic { get; } Property Value string Methods CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions?) 创建一个到此频道新邀请。 public Task<IInvite> CreateInviteAsync(InviteMaxAge maxAge = InviteMaxAge._604800, InviteMaxUses maxUses = InviteMaxUses.Unlimited, RequestOptions? options = null) Parameters maxAge InviteMaxAge 邀请链接的有效时长，NeverExpires 表示永不过期。 maxUses InviteMaxUses 邀请链接的可用人次，Unlimited 表示无限制。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IInvite> 一个表示异步邀请创建操作的任务。任务的结果包含所创建的邀请链接的元数据，其中包含有关邀请链接的信息。 CreateInviteAsync(int?, int?, RequestOptions?) 创建一个到此频道新邀请。 public Task<IInvite> CreateInviteAsync(int? maxAge = 604800, int? maxUses = null, RequestOptions? options = null) Parameters maxAge int? 邀请链接的有效时长，null 表示永不过期。 maxUses int? 邀请链接的可用人次，null 表示无限制。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IInvite> 一个表示异步邀请创建操作的任务。任务的结果包含所创建的邀请链接的元数据，其中包含有关邀请链接的信息。 DeleteMessageAsync(IMessage, RequestOptions?) 删除一条消息. public Task DeleteMessageAsync(IMessage message, RequestOptions? options = null) Parameters message IMessage 要删除的消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步删除操作的任务。 DeleteMessageAsync(Guid, RequestOptions?) 删除一条消息。 public Task DeleteMessageAsync(Guid messageId, RequestOptions? options = null) Parameters messageId Guid 要删除的消息的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步删除操作的任务。 GetCategoryAsync(RequestOptions?) 获取此频道的所属分组频道。 public Task<ICategoryChannel?> GetCategoryAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<ICategoryChannel> 一个表示异步获取操作的任务。任务的结果包含此频道所属的分组频道，如果当前频道不属于任何分组频道，则为 null。 GetInvitesAsync(RequestOptions?) 获取此嵌套频道的所有邀请信息。 public Task<IReadOnlyCollection<IInvite>> GetInvitesAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IInvite>> 一个表示异步获取操作的任务。任务的结果包含此频道中找到的所有邀请信息。 GetMessageAsync(Guid, RequestOptions?) 从此消息频道获取一条消息。 public Task<RestMessage> GetMessageAsync(Guid id, RequestOptions? options = null) Parameters id Guid 消息的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestMessage> 一个表示异步获取操作的任务。任务结果包含检索到的消息；如果未找到具有指定 ID 的消息，则返回 null。 GetMessagesAsync(IMessage, Direction, int, RequestOptions?) 获取此消息频道中的一些消息。 public virtual IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessage IMessage 要开始获取消息的参考位置的消息。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 GetMessagesAsync(Guid, Direction, int, RequestOptions?) 获取此消息频道中的一些消息。 public virtual IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessageId Guid 要开始获取消息的参考位置的消息的 ID。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 GetMessagesAsync(int, RequestOptions?) 获取此消息频道中的最新的一些消息。 public virtual IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(int limit = 50, RequestOptions? options = null) Parameters limit int 要获取的消息数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 GetPinnedMessagesAsync(RequestOptions?) 获取此频道中的所有置顶消息。 public virtual Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<RestMessage>> 一个表示异步获取操作的任务。任务的结果包含此频道中找到的所有置顶消息。 GetUserAsync(ulong, RequestOptions?) 获取此频道中的用户。 public Task<RestGuildUser?> GetUserAsync(ulong id, RequestOptions? options = null) Parameters id ulong 要获取的用户的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestGuildUser> 一个表示异步获取操作的任务。任务的结果为此频道中的服务器用户；如果没有找到则为 null。 GetUsersAsync(RequestOptions?) 获取能够查看频道或当前在此频道中的所有用户。 public IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> GetUsersAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> 分页的服务器用户集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 此方法将尝试获取所有能够查看该频道或当前在该频道中的用户。此方法会根据 MaxUsersPerBatch 将请求拆分。换句话说，如果有 3000 名用户，而 MaxUsersPerBatch 的常量为 50，则请求将被拆分为 60 个单独请求，因此异步枚举器会异步枚举返回 60 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 60 个响应返回的集合，并将其合并为一个集合。 ModifyAsync(Action<ModifyTextChannelProperties>, RequestOptions?) 修改此频道有关文字聊天能力的属性。 public virtual Task ModifyAsync(Action<ModifyTextChannelProperties> func, RequestOptions? options = null) Parameters func Action<ModifyTextChannelProperties> 一个包含修改频道有关文字聊天能力的属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 See Also ModifyTextChannelProperties ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions?) 修改一条消息。 public Task ModifyMessageAsync(Guid messageId, Action<MessageProperties> func, RequestOptions? options = null) Parameters messageId Guid 要修改的消息的 ID。 func Action<MessageProperties> 一个包含修改消息属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 See Also MessageProperties SendCardAsync(ICard, IQuote?, IUser?, RequestOptions?) 发送卡片消息到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendCardAsync(ICard card, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters card ICard 要发送的卡片。 quote IQuote 消息引用，用于回复消息。 ephemeralUser IUser 临时消息的接收者。如果设置为指定的用户，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendCardsAsync(IEnumerable<ICard>, IQuote?, IUser?, RequestOptions?) 发送卡片消息到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(IEnumerable<ICard> cards, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters cards IEnumerable<ICard> 要发送的卡片。 quote IQuote 消息引用，用于回复消息。 ephemeralUser IUser 临时消息的接收者。如果设置为指定的用户，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendFileAsync(FileAttachment, IQuote?, IUser?, RequestOptions?) 发送文件到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(FileAttachment attachment, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters attachment FileAttachment 文件的附件信息。 quote IQuote 消息引用，用于回复消息。 ephemeralUser IUser 临时消息的接收者。如果设置为指定的用户，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendFileAsync(Stream, string, AttachmentType, IQuote?, IUser?, RequestOptions?) 发送文件到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(Stream stream, string filename, AttachmentType type = AttachmentType.File, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters stream Stream 文件的流。 filename string 文件名。 type AttachmentType 文件的媒体类型。 quote IQuote 消息引用，用于回复消息。 ephemeralUser IUser 临时消息的接收者。如果设置为指定的用户，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendFileAsync(string, string?, AttachmentType, IQuote?, IUser?, RequestOptions?) 发送文件到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(string path, string? filename = null, AttachmentType type = AttachmentType.File, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters path string 文件的路径。 filename string 文件名。 type AttachmentType 文件的媒体类型。 quote IQuote 消息引用，用于回复消息。 ephemeralUser IUser 临时消息的接收者。如果设置为指定的用户，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendTextAsync(string, IQuote?, IUser?, RequestOptions?) 发送文本消息到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendTextAsync(string text, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters text string 要发送的文本。 quote IQuote 消息引用，用于回复消息。 ephemeralUser IUser 临时消息的接收者。如果设置为指定的用户，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SyncPermissionsAsync(RequestOptions?) 同步此嵌套频道的权限配置与其所属分组频道一致，并保持同步。 public Task SyncPermissionsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步频道权限同步操作的任务。 UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 public override Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 KOOK REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 KOOK 服务端的数据。"
  },
  "api/Kook.Rest.RestUser.html": {
    "href": "api/Kook.Rest.RestUser.html",
    "title": "Class RestUser | Kook.Net 文档",
    "keywords": "Class RestUser Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的用户。 public class RestUser : RestEntity<ulong>, IUser, IEntity<ulong>, IMentionable, IPresence, IUpdateable Inheritance object RestEntity<ulong> RestUser Implements IUser IEntity<ulong> IMentionable IPresence IUpdateable Derived RestGuildUser RestSelfUser Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Format.UsernameAndIdentifyNumber(IUser, bool) UserExtensions.SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendTextAsync(IUser, string, IQuote?, RequestOptions?) Properties ActiveClient 获取此用于当前登录的客户端类型。 public ClientType? ActiveClient { get; } Property Value ClientType? Avatar 获取此用户的头像图像的 URL。 public string Avatar { get; } Property Value string Remarks 如果此用户为 BUFF 会员，且以 BUFF 会员权益设置了头像，则此属性返回的 URL 表示的是 BUFF 专属头像权益时效后的回退头像。 Banner 获取此用户的横幅图像的 URL。 public string? Banner { get; } Property Value string Remarks 如果此用户不是 BUFF 会员，或未以 BUFF 会员权限设置横幅，则此属性返回 null。 BuffAvatar 获取此用户以 BUFF 会员权益设置的头像图像的 URL。 public string? BuffAvatar { get; } Property Value string Remarks 如果此用户不是 BUFF 会员，或未以 BUFF 会员权限设置头像，则此属性返回 null。 HasAnnualBuff 获取此用户是否订阅了年度 BUFF 会员。 public bool? HasAnnualBuff { get; } Property Value bool? Remarks 如果未知此用户是否订阅了年度 BUFF 会员，则此属性返回 null。 HasBuff 获取此用户是否订阅了 BUFF 会员。 public bool? HasBuff { get; } Property Value bool? Remarks 如果未知此用户是否订阅了 BUFF 会员，则此属性返回 null。 IdentifyNumber 获取此用户的识别号。 public string IdentifyNumber { get; } Property Value string IdentifyNumberValue 获取此用户识别号的数值形式。 public ushort IdentifyNumberValue { get; } Property Value ushort IsBanned 获取此用户是否被封禁。 public bool? IsBanned { get; } Property Value bool? Remarks 如果未知此用户是否被封禁，则此属性返回 null。 IsBot 获取此用户是否为 Bot。 public bool? IsBot { get; } Property Value bool? Remarks 如果未知此用户是否为 Bot，则此属性返回 null。 IsDenoiseEnabled 获取此用户是否启用了降噪功能。 public bool? IsDenoiseEnabled { get; } Property Value bool? Remarks 如果未知此用户是否启用了降噪功能，则此属性返回 null。 IsOnline 获取此用户当前是否在线。 public bool? IsOnline { get; } Property Value bool? IsSystemUser 获取此用户是否为系统用户。 public bool IsSystemUser { get; } Property Value bool KMarkdownMention 返回一个用于在 KMarkdown 格式文本中提及此对象的格式化字符串。 public string KMarkdownMention { get; } Property Value string Nameplates 获取此用户设置展示的所有铭牌。 public IReadOnlyCollection<Nameplate> Nameplates { get; } Property Value IReadOnlyCollection<Nameplate> Remarks 用户设置的首个铭牌会展示在该用户聊天消息的用户名的右侧，用户设置的所有铭牌会展示在个人信息面板内的用户名下方。 PlainTextMention 获取一个用于在纯文本格式文本中提及此对象的格式化字符串。 public string PlainTextMention { get; } Property Value string UserTag 获取此用户的标签信息。 public UserTag? UserTag { get; } Property Value UserTag Remarks 用户的标签会显示在服务器用户列表、私信列表、私信消息页、好友列表、个人信息面板、聊天消息的用户名的右侧。 如果此用户没有标签，或未知此用户的标签信息，则此属性返回 null。 Username 获取此用户的用户名。 public string Username { get; } Property Value string Methods BlockAsync(RequestOptions?) 屏蔽此用户。 public Task BlockAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步屏蔽操作的任务。 CreateDMChannelAsync(RequestOptions?) 创建一个用于与此用户收发私信的频道。 public Task<RestDMChannel> CreateDMChannelAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<RestDMChannel> 一个表示异步创建操作的任务。任务结果包含与此用户相关的私信频道。 GetIntimacyAsync(RequestOptions?) 获取与此用户的亲密度信息。 public Task<RestIntimacy> GetIntimacyAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<RestIntimacy> 一个表示异步获取操作的任务。任务结果包含与此用户的亲密度信息。 RemoveFriendAsync(RequestOptions?) 移除与此用户的好友关系。 public Task RemoveFriendAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步移除操作的任务。 RequestFriendAsync(RequestOptions?) 向此用户发送好友请求。 public virtual Task RequestFriendAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步发送操作的任务。 ToString() 获取此用户的包含用户名及识别号的格式化字符串。 public override string ToString() Returns string 一个表示此用户的包含用户名及识别号的格式化字符串。 See Also UsernameAndIdentifyNumber(IUser, bool) UnblockAsync(RequestOptions?) 取消屏蔽此用户。 public Task UnblockAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步取消操作的任务。 UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 public virtual Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 KOOK REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 KOOK 服务端的数据。 UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions?) 修改与此用户的亲密度信息。 public Task UpdateIntimacyAsync(Action<IntimacyProperties> func, RequestOptions? options = null) Parameters func Action<IntimacyProperties> 一个用于修改亲密度信息的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 Remarks 此方法使用指定的属性修改与此用户的亲密度信息。要查看可用的属性，请参考 IntimacyProperties。"
  },
  "api/Kook.Rest.RestUserMessage.html": {
    "href": "api/Kook.Rest.RestUserMessage.html",
    "title": "Class RestUserMessage | Kook.Net 文档",
    "keywords": "Class RestUserMessage Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示一个基于 REST 的用户消息。 public class RestUserMessage : RestMessage, IUpdateable, IUserMessage, IMessage, IEntity<Guid>, IDeletable Inheritance object RestEntity<Guid> RestMessage RestUserMessage Implements IUpdateable IUserMessage IMessage IEntity<Guid> IDeletable Inherited Members RestMessage.Type RestMessage.Channel RestMessage.Author RestMessage.Source RestMessage.Content RestMessage.CleanContent RestMessage.Timestamp RestMessage.EditedTimestamp RestMessage.MentionedUsers RestMessage.ToString() RestMessage.Reactions RestMessage.DeleteAsync(RequestOptions) RestMessage.UpdateAsync(RequestOptions) RestMessage.AddReactionAsync(IEmote, RequestOptions) RestMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) RestMessage.RemoveReactionAsync(IEmote, ulong, RequestOptions) RestMessage.GetReactionUsersAsync(IEmote, RequestOptions) RestEntity<Guid>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods MessageExtensions.GetJumpUrl(IMessage) MessageExtensions.HasCharPrefix(IUserMessage, char, ref int) MessageExtensions.HasMentionPrefix(IUserMessage, IUser, ref int) MessageExtensions.HasStringPrefix(IUserMessage, string, ref int, StringComparison) MessageExtensions.TryExpandCardContent(IUserMessage, out string?) MessageExtensions.AddReactionsAsync(IUserMessage, IEnumerable<IEmote>, RequestOptions?) MessageExtensions.MaybeTextImageMixedMessage(IUserMessage) MessageExtensions.RemoveReactionsAsync(IUserMessage, IUser, IEnumerable<IEmote>, RequestOptions?) MessageExtensions.ReplyCardAsync(IUserMessage, ICard, bool, bool, RequestOptions?) MessageExtensions.ReplyCardsAsync(IUserMessage, IEnumerable<ICard>, bool, bool, RequestOptions?) MessageExtensions.ReplyFileAsync(IUserMessage, FileAttachment, bool, bool, RequestOptions?) MessageExtensions.ReplyFileAsync(IUserMessage, Stream, string, AttachmentType, bool, bool, RequestOptions?) MessageExtensions.ReplyFileAsync(IUserMessage, string, string?, AttachmentType, bool, bool, RequestOptions?) MessageExtensions.ReplyTextAsync(IUserMessage, string, bool, bool, RequestOptions?) Properties Attachments 获取此消息中包含的所有附件。 public override IReadOnlyCollection<Attachment> Attachments { get; } Property Value IReadOnlyCollection<Attachment> Remarks 此属性也会包含从卡片中解析出来的附件信息。 Cards 获取此消息中包含的所有卡片。 public override IReadOnlyCollection<ICard> Cards { get; } Property Value IReadOnlyCollection<ICard> Embeds 获取此消息中包含的所有嵌入式内容。 public override IReadOnlyCollection<IEmbed> Embeds { get; } Property Value IReadOnlyCollection<IEmbed> IsPinned 获取此消息是否被置顶。 public override bool? IsPinned { get; } Property Value bool? MentionedChannels 获取此消息中提及的所有频道。 public IReadOnlyCollection<RestGuildChannel> MentionedChannels { get; } Property Value IReadOnlyCollection<RestGuildChannel> MentionedEveryone 获取此消息是否提及了全体成员。 public override bool MentionedEveryone { get; } Property Value bool MentionedHere 获取此消息是否提及了在线成员。 public override bool MentionedHere { get; } Property Value bool MentionedRoleIds 获取此消息中提及的所有角色的 ID。 public override IReadOnlyCollection<uint> MentionedRoleIds { get; } Property Value IReadOnlyCollection<uint> MentionedRoles 获取此消息中提及的所有角色。 public IReadOnlyCollection<RestRole> MentionedRoles { get; } Property Value IReadOnlyCollection<RestRole> Pokes public override IReadOnlyCollection<RestPokeAction> Pokes { get; } Property Value IReadOnlyCollection<RestPokeAction> Quote 获取消息的引用。 public IQuote? Quote { get; } Property Value IQuote Tags 获取此消息中解析出的所有标签。 public override IReadOnlyCollection<ITag> Tags { get; } Property Value IReadOnlyCollection<ITag> Methods ModifyAsync(Action<MessageProperties>, RequestOptions?) 修改此消息。 public Task ModifyAsync(Action<MessageProperties> func, RequestOptions? options = null) Parameters func Action<MessageProperties> 一个包含修改消息属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 See Also MessageProperties Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) 转换消息文本中的提及与表情符号为可读形式。 public string Resolve(TagHandling userHandling = TagHandling.Name, TagHandling channelHandling = TagHandling.Name, TagHandling roleHandling = TagHandling.Name, TagHandling everyoneHandling = TagHandling.Name, TagHandling emojiHandling = TagHandling.Name) Parameters userHandling TagHandling 指定用户提及标签的处理方式。 channelHandling TagHandling 指定频道提及标签的处理方式。 roleHandling TagHandling 指定角色提及标签的处理方式。 everyoneHandling TagHandling 指定全体成员与在线成员提及标签的处理方式。 emojiHandling TagHandling 指定表情符号标签的处理方式。 Returns string 转换后的消息文本。 Resolve(int, TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) 转换消息文本中的提及与表情符号为可读形式。 public string Resolve(int startIndex, TagHandling userHandling = TagHandling.Name, TagHandling channelHandling = TagHandling.Name, TagHandling roleHandling = TagHandling.Name, TagHandling everyoneHandling = TagHandling.Ignore, TagHandling emojiHandling = TagHandling.Name) Parameters startIndex int 指定解析的起始位置。 userHandling TagHandling 指定用户提及标签的处理方式。 channelHandling TagHandling 指定频道提及标签的处理方式。 roleHandling TagHandling 指定角色提及标签的处理方式。 everyoneHandling TagHandling 指定全体成员与在线成员提及标签的处理方式。 emojiHandling TagHandling 指定表情符号标签的处理方式。 Returns string 转换后的消息文本。"
  },
  "api/Kook.Rest.RestVoiceChannel.html": {
    "href": "api/Kook.Rest.RestVoiceChannel.html",
    "title": "Class RestVoiceChannel | Kook.Net 文档",
    "keywords": "Class RestVoiceChannel Namespace Kook.Rest Assembly Kook.Net.Rest.dll 表示服务器中一个基于 REST 的具有语音聊天能力的频道。 public class RestVoiceChannel : RestTextChannel, IUpdateable, IRestMessageChannel, IVoiceChannel, ITextChannel, INestedChannel, IGuildChannel, IDeletable, IMentionable, IMessageChannel, IRestAudioChannel, IAudioChannel, IChannel, IEntity<ulong> Inheritance object RestEntity<ulong> RestChannel RestGuildChannel RestTextChannel RestVoiceChannel Implements IUpdateable IRestMessageChannel IVoiceChannel ITextChannel INestedChannel IGuildChannel IDeletable IMentionable IMessageChannel IRestAudioChannel IAudioChannel IChannel IEntity<ulong> Inherited Members RestTextChannel.Topic RestTextChannel.SlowModeInterval RestTextChannel.CategoryId RestTextChannel.IsPermissionSynced RestTextChannel.KMarkdownMention RestTextChannel.PlainTextMention RestTextChannel.ModifyAsync(Action<ModifyTextChannelProperties>, RequestOptions) RestTextChannel.GetUserAsync(ulong, RequestOptions) RestTextChannel.GetUsersAsync(RequestOptions) RestTextChannel.GetMessageAsync(Guid, RequestOptions) RestTextChannel.SendFileAsync(string, string, AttachmentType, IQuote, IUser, RequestOptions) RestTextChannel.SendFileAsync(Stream, string, AttachmentType, IQuote, IUser, RequestOptions) RestTextChannel.SendFileAsync(FileAttachment, IQuote, IUser, RequestOptions) RestTextChannel.SendTextAsync(string, IQuote, IUser, RequestOptions) RestTextChannel.SendCardsAsync(IEnumerable<ICard>, IQuote, IUser, RequestOptions) RestTextChannel.SendCardAsync(ICard, IQuote, IUser, RequestOptions) RestTextChannel.GetCategoryAsync(RequestOptions) RestTextChannel.SyncPermissionsAsync(RequestOptions) RestTextChannel.GetInvitesAsync(RequestOptions) RestTextChannel.CreateInviteAsync(int?, int?, RequestOptions) RestTextChannel.CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions) RestTextChannel.DeleteMessageAsync(Guid, RequestOptions) RestTextChannel.DeleteMessageAsync(IMessage, RequestOptions) RestTextChannel.ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions) RestGuildChannel.RolePermissionOverwrites RestGuildChannel.UserPermissionOverwrites RestGuildChannel.Guild RestGuildChannel.Type RestGuildChannel.Name RestGuildChannel.Position RestGuildChannel.GuildId RestGuildChannel.CreatorId RestGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) RestGuildChannel.GetCreatorAsync(RequestOptions) RestGuildChannel.DeleteAsync(RequestOptions) RestGuildChannel.GetPermissionOverwrite(IUser) RestGuildChannel.GetPermissionOverwrite(IRole) RestGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) RestGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) RestGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) RestGuildChannel.ToString() RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties HasPassword 获取此频道是否已被密码锁定。 public bool HasPassword { get; } Property Value bool IsVoiceRegionOverwritten 获取此音频频道的语音区域设置是否覆写了服务器的语音区域设置。 public bool? IsVoiceRegionOverwritten { get; } Property Value bool? ServerUrl 获取语音客户端连接到此语音频道的语音服务器 URL。 public string? ServerUrl { get; } Property Value string UserLimit 获取允许同时连接到此频道的最大用户数。 public int UserLimit { get; } Property Value int 一个 int，表示允许同时连接到此频道的最大用户数；如果没有限制，则为 0。 VoiceQuality 获取要求此频道中的客户端使用的语音质量。 public VoiceQuality? VoiceQuality { get; } Property Value VoiceQuality? VoiceRegion 获取此音频频道所设置的语音服务器区域。 public string? VoiceRegion { get; } Property Value string Remarks warning 对于语音频道区域设置功能发布之前创建的语音频道，该属性可能为空。 See Also Region Methods GetConnectedUsersAsync(RequestOptions?) 获取连接到此频道的用户。 public Task<IReadOnlyCollection<IUser>> GetConnectedUsersAsync(RequestOptions? options) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IUser>> 一个表示异步获取操作的任务。任务的结果包含连接到此频道的所有服务器用户。 GetMessagesAsync(IMessage, Direction, int, RequestOptions?) 获取此消息频道中的一些消息。 public override IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessage IMessage 要开始获取消息的参考位置的消息。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 Exceptions NotSupportedException 不支持在语音频道中获取消息。 GetMessagesAsync(Guid, Direction, int, RequestOptions?) 获取此消息频道中的一些消息。 public override IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessageId Guid 要开始获取消息的参考位置的消息的 ID。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 Exceptions NotSupportedException 不支持在语音频道中获取消息。 GetMessagesAsync(int, RequestOptions?) 获取此消息频道中的最新的一些消息。 public override IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(int limit = 50, RequestOptions? options = null) Parameters limit int 要获取的消息数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 Exceptions NotSupportedException 不支持在语音频道中获取消息。 GetPinnedMessagesAsync(RequestOptions?) 获取此频道中的所有置顶消息。 public override Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<RestMessage>> 一个表示异步获取操作的任务。任务的结果包含此频道中找到的所有置顶消息。 Exceptions NotSupportedException 不支持在语音频道中获取消息。 ModifyAsync(Action<ModifyVoiceChannelProperties>, RequestOptions?) 修改此频道有关语音聊天能力的属性。 public Task ModifyAsync(Action<ModifyVoiceChannelProperties> func, RequestOptions? options = null) Parameters func Action<ModifyVoiceChannelProperties> 一个包含修改有关语音聊天能力的属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 See Also ModifyVoiceChannelProperties UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 public override Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 KOOK REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 KOOK 服务端的数据。"
  },
  "api/Kook.Rest.html": {
    "href": "api/Kook.Rest.html",
    "title": "Namespace Kook.Rest | Kook.Net 文档",
    "keywords": "Namespace Kook.Rest Classes Attachment 表示一个消息内基于的附件。 BaseKookClient 表示一个可以连接到 KOOK API 的通用的 KOOK 客户端。 CardJsonExtension 提供一系列用于 Card 和 CardBuilder 的扩展方法。 KookRestClient 表示一个基于 REST 的 KOOK 客户端。 KookRestClientExperimentalExtensions 提供用于 KookRestClient 的实验性功能的扩展方法。 KookRestConfig 定义 Kook.Net 有关 REST 各种行为的配置类。 Poke 表示一个基于 REST 的 POKE。 RecommendInfo 获取一个推荐信息。 RestBan 表示一个基于 REST 的封禁对象。 RestCategoryChannel 表示一个基于 REST 的分组频道。 RestChannel 表示一个基于 REST 的频道。 RestDMChannel 表示一个基于 REST 的私聊频道。 RestEntity<TId> 表示一个基于 REST 的具有唯一标识符的实体。 RestFriendRequest 表示一个基于 REST 的好友请求。 RestGame 表示一个基于 REST 的游戏信息。 RestGuild 表示一个基于 REST 的服务器。 RestGuildChannel 表示一个基于 REST 的服务器频道。 RestGuildUser 表示一个基于 REST 的服务器用户。 RestIntimacy 表示一个基于 REST 的亲密度。 RestInvite 表示一个基于 REST 的邀请。 RestMessage 表示一个基于 REST 的消息。 RestPokeAction 表示一个基于 REST 的 POKE 动作。 RestPresence 表示一个基于 REST 的当前登录的用户信息。 RestReaction 表示一个基于 REST 的回应。 RestRole 表示一个基于 REST 的可授予服务器用户的角色。 RestSelfUser 表示一个基于 REST 的当前登录的用户信息。 RestSystemMessage 表示一个基于 REST 的系统消息。 RestTextChannel 表示服务器中一个基于 REST 的具有文字聊天能力的频道，可以发送和接收消息。 RestUser 表示一个基于 REST 的用户。 RestUserMessage 表示一个基于 REST 的用户消息。 RestVoiceChannel 表示服务器中一个基于 REST 的具有语音聊天能力的频道。 Interfaces IRestAudioChannel 表示一个基于 REST 的通用的音频频道。 IRestMessageChannel 表示一个基于 REST 的通用的消息频道，可以用来发送和接收消息。 IRestPrivateChannel 表示一个基于 REST 的通用的私有频道，只有特定的用户可以访问。"
  },
  "api/Kook.RetryMode.html": {
    "href": "api/Kook.RetryMode.html",
    "title": "Enum RetryMode | Kook.Net 文档",
    "keywords": "Enum RetryMode Namespace Kook Assembly Kook.Net.Core.dll 表示请求在发生错误时应如何处理。 [Flags] public enum RetryMode Fields AlwaysFail = 0 如果请求失败，将立即引发异常。 AlwaysRetry = RetryTimeouts | RetryRatelimit | Retry502 总是重试失败的请求，直到超时、取消令牌被触发或服务器响应非 502 错误。 Retry502 = 8 如果请求因 HTTP 状态码 502 而失败，则重试。 RetryRatelimit = 4 如果请求因速率限制而失败，则重试。 RetryTimeouts = 1 如果请求超时，则重试。"
  },
  "api/Kook.RolePermissionOverwrite.html": {
    "href": "api/Kook.RolePermissionOverwrite.html",
    "title": "Class RolePermissionOverwrite | Kook.Net 文档",
    "keywords": "Class RolePermissionOverwrite Namespace Kook Assembly Kook.Net.Core.dll 表示一个为角色设置的频道权限重写设置。 public class RolePermissionOverwrite : IPermissionOverwrite<uint> Inheritance object RolePermissionOverwrite Implements IPermissionOverwrite<uint> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RolePermissionOverwrite(uint, OverwritePermissions) 初始化一个 RolePermissionOverwrite 类的新实例。 public RolePermissionOverwrite(uint targetId, OverwritePermissions permissions) Parameters targetId uint 角色的 ID。 permissions OverwritePermissions 角色的权限重写配置。 Properties Permissions 获取此重写的权限重写配置。 public OverwritePermissions Permissions { get; } Property Value OverwritePermissions Target 获取此重写所应用的角色的 ID。 public uint Target { get; } Property Value uint"
  },
  "api/Kook.RoleProperties.html": {
    "href": "api/Kook.RoleProperties.html",
    "title": "Class RoleProperties | Kook.Net 文档",
    "keywords": "Class RoleProperties Namespace Kook Assembly Kook.Net.Core.dll 提供用于修改 IRole 的属性。 public class RoleProperties Inheritance object RoleProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Color 获取或设置要设置到此角色的颜色。 public Color? Color { get; set; } Property Value Color? Hoist 获取或设置要设置到此角色拥有此角色的用户是否在用户列表中与普通在线成员分开显示。 [Obsolete(\"Use IsHoisted instead.\")] public bool? Hoist { get; set; } Property Value bool? IsHoisted 获取或设置要设置到此角色拥有此角色的用户是否在用户列表中与普通在线成员分开显示。 public bool? IsHoisted { get; set; } Property Value bool? IsMentionable 获取或设置要设置到此角色是否允许任何人提及此角色。 public bool? IsMentionable { get; set; } Property Value bool? Mentionable 获取或设置要设置到此角色是否允许任何人提及此角色。 [Obsolete(\"Use IsMentionable instead.\")] public bool? Mentionable { get; set; } Property Value bool? Name 获取或设置要设置到此角色的名称。 public string? Name { get; set; } Property Value string Permissions 获取或设置要设置到此角色的权限。 public GuildPermissions? Permissions { get; set; } Property Value GuildPermissions? See Also ModifyAsync(Action<RoleProperties>, RequestOptions)"
  },
  "api/Kook.RoleType.html": {
    "href": "api/Kook.RoleType.html",
    "title": "Enum RoleType | Kook.Net 文档",
    "keywords": "Enum RoleType Namespace Kook Assembly Kook.Net.Core.dll 表示角色的类型。 public enum RoleType : ushort Fields Booster = 2 角色表示服务器助力者。 BotSpecified = 1 角色是在 Bot 加入服务器时由系统创建的。 Everyone = 255 表示角色是默认的 @全体成员 全体成员角色。 UserCreated = 0 角色是由用户创建的。"
  },
  "api/Kook.SearchGuildMemberProperties.html": {
    "href": "api/Kook.SearchGuildMemberProperties.html",
    "title": "Class SearchGuildMemberProperties | Kook.Net 文档",
    "keywords": "Class SearchGuildMemberProperties Namespace Kook Assembly Kook.Net.Core.dll 提供用于搜索服务器用户的属性。 public class SearchGuildMemberProperties Inheritance object SearchGuildMemberProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsMobileVerified 获取或设置搜索用户的结果中所有用户是否都必须已经验证了手机号码。 public bool? IsMobileVerified { get; set; } Property Value bool? Remarks 如果此属性为 true，则搜索结果中的所有用户必须已经验证了手机号码；如果此属性为 false，则搜索结果中的所有用户必须没有验证了手机号码；如果此属性为 null，则不使用手机号码验证状态作为搜索条件。 RoleId 获取或设置要用于搜索用户的角色 ID。 public uint? RoleId { get; set; } Property Value uint? Remarks 如果此属性不为 null，则搜索结果中的用户必须拥有此属性的值对应的角色；否则不使用角色 ID 作为搜索条件。 SearchName 获取或设置要用于搜索用户的用户名关键字。 public string? SearchName { get; set; } Property Value string Remarks 如果此属性不为 null，则搜索结果中的用户的用户名必须包含此属性的值；否则不使用用户名关键字作为搜索条件。 SortedByActiveTime 获取或设置搜索用户的结果是否应该按用户在此服务器内的最近活跃时间排序。 public SortMode? SortedByActiveTime { get; set; } Property Value SortMode? Remarks 如果此属性不为 null，则搜索结果中的用户将按照其在此服务器内的最近活跃时间排序；否则不使用最近活跃时间作为排序条件。 SortedByJoinTime 获取或设置搜索用户的结果是否应该按用户加入此服务器的时间排序。 public SortMode? SortedByJoinTime { get; set; } Property Value SortMode? Remarks 如果此属性不为 null，则搜索结果中的用户将按照其加入此服务器的时间排序；否则不使用加入时间作为排序条件。 See Also SearchUsersAsync(Action<SearchGuildMemberProperties>, int, CacheMode, RequestOptions)"
  },
  "api/Kook.SectionAccessoryMode.html": {
    "href": "api/Kook.SectionAccessoryMode.html",
    "title": "Enum SectionAccessoryMode | Kook.Net 文档",
    "keywords": "Enum SectionAccessoryMode Namespace Kook Assembly Kook.Net.Core.dll 表示 SectionModule 中的附加内容的位置。 public enum SectionAccessoryMode Fields Left = 0 附加内容位于文本元素的左侧。 Right = 1 附加内容位于文本元素的右侧。"
  },
  "api/Kook.SectionModule.html": {
    "href": "api/Kook.SectionModule.html",
    "title": "Class SectionModule | Kook.Net 文档",
    "keywords": "Class SectionModule Namespace Kook Assembly Kook.Net.Core.dll 内容模块，可用于 ICard 中。 public class SectionModule : IModule, IEquatable<SectionModule>, IEquatable<IModule> Inheritance object SectionModule Implements IModule IEquatable<SectionModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(IModule) CardExtensions.ToBuilder(SectionModule) Properties Accessory 获取模块的附加内容。 public IElement? Accessory { get; } Property Value IElement Mode 获取模块的附加内容的位置。 public SectionAccessoryMode? Mode { get; } Property Value SectionAccessoryMode? Text 获取模块的文本内容。 public IElement? Text { get; } Property Value IElement Type 获取模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods Equals(SectionModule?) Indicates whether the current object is equal to another object of the same type. public bool Equals(SectionModule? sectionModule) Parameters sectionModule SectionModule Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(SectionModule, SectionModule) 判定两个 SectionModule 是否相等。 public static bool operator ==(SectionModule left, SectionModule right) Parameters left SectionModule right SectionModule Returns bool 如果两个 SectionModule 相等，则为 true；否则为 false。 operator !=(SectionModule, SectionModule) 判定两个 SectionModule 是否不相等。 public static bool operator !=(SectionModule left, SectionModule right) Parameters left SectionModule right SectionModule Returns bool 如果两个 SectionModule 不相等，则为 true；否则为 false。"
  },
  "api/Kook.SectionModuleBuilder.html": {
    "href": "api/Kook.SectionModuleBuilder.html",
    "title": "Class SectionModuleBuilder | Kook.Net 文档",
    "keywords": "Class SectionModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll 用来构建 SectionModule 模块的构建器。 public class SectionModuleBuilder : IModuleBuilder, IEquatable<SectionModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object SectionModuleBuilder Implements IModuleBuilder IEquatable<SectionModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SectionModuleBuilder() 初始化一个 SectionModuleBuilder 类的新实例。 public SectionModuleBuilder() SectionModuleBuilder(IElementBuilder?, SectionAccessoryMode?, IElementBuilder?) 初始化一个 SectionModuleBuilder 类的新实例。 public SectionModuleBuilder(IElementBuilder? text, SectionAccessoryMode? mode = null, IElementBuilder? accessory = null) Parameters text IElementBuilder 文本元素。 mode SectionAccessoryMode? 附加内容的显示模式。 accessory IElementBuilder 附加内容元素。 SectionModuleBuilder(string?, bool, SectionAccessoryMode?, IElementBuilder?) 初始化一个 SectionModuleBuilder 类的新实例。 public SectionModuleBuilder(string? text, bool isKMarkdown = false, SectionAccessoryMode? mode = null, IElementBuilder? accessory = null) Parameters text string 文本元素。 isKMarkdown bool 是否为 KMarkdown 格式。 mode SectionAccessoryMode? 附加内容的显示模式。 accessory IElementBuilder 附加内容元素。 Properties Accessory 获取或设置模块的附加内容。 public IElementBuilder? Accessory { get; set; } Property Value IElementBuilder Mode 获取或设置附加内容的显示模式。 public SectionAccessoryMode? Mode { get; set; } Property Value SectionAccessoryMode? Text 获取或设置模块的文本。 public IElementBuilder? Text { get; set; } Property Value IElementBuilder Type 获取此构建器构建的模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods Build() 构建当前构建器为一个 SectionModule 对象。 public SectionModule Build() Returns SectionModule 由当前构建器表示的属性构建的 SectionModule 对象。 Exceptions ArgumentException Text 不是任何形式的文本元素，包括 PlainTextElementBuilder、 KMarkdownElementBuilder 和 ParagraphStructBuilder。 ArgumentException Accessory 既不是 ImageElementBuilder 也不是 ButtonElementBuilder。 InvalidOperationException ButtonElement 不应位于 Text 的左侧。 Equals(SectionModuleBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(SectionModuleBuilder? sectionModuleBuilder) Parameters sectionModuleBuilder SectionModuleBuilder Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithAccessory(ButtonElementBuilder) 设置模块的附加内容。 public SectionModuleBuilder WithAccessory(ButtonElementBuilder accessory) Parameters accessory ButtonElementBuilder 要设置的附加内容。 Returns SectionModuleBuilder 当前构建器。 WithAccessory(ImageElementBuilder) 设置模块的附加内容。 public SectionModuleBuilder WithAccessory(ImageElementBuilder accessory) Parameters accessory ImageElementBuilder 要设置的附加内容。 Returns SectionModuleBuilder 当前构建器。 WithAccessory<T>(Action<T>?) 设置模块的附加内容。 public SectionModuleBuilder WithAccessory<T>(Action<T>? action = null) where T : IElementBuilder, new() Parameters action Action<T> 一个包含对要设置的附加内容进行配置的操作的委托。 Returns SectionModuleBuilder 当前构建器。 Type Parameters T WithMode(SectionAccessoryMode) 设置附加内容的显示模式。 public SectionModuleBuilder WithMode(SectionAccessoryMode mode) Parameters mode SectionAccessoryMode 要设置的附加内容的显示模式。 Returns SectionModuleBuilder 当前构建器。 WithText(KMarkdownElementBuilder) 设置模块的文本。 public SectionModuleBuilder WithText(KMarkdownElementBuilder text) Parameters text KMarkdownElementBuilder 要设置的文本。 Returns SectionModuleBuilder 当前构建器。 WithText(ParagraphStructBuilder) 设置模块的文本。 public SectionModuleBuilder WithText(ParagraphStructBuilder text) Parameters text ParagraphStructBuilder 要设置的文本。 Returns SectionModuleBuilder 当前构建器。 WithText(PlainTextElementBuilder) 设置模块的文本。 public SectionModuleBuilder WithText(PlainTextElementBuilder text) Parameters text PlainTextElementBuilder 要设置的文本。 Returns SectionModuleBuilder 当前构建器。 WithText(string?, bool) 设置模块的文本。 public SectionModuleBuilder WithText(string? text, bool isKMarkdown = false) Parameters text string 要设置的文本。 isKMarkdown bool 是否为 KMarkdown 格式。 Returns SectionModuleBuilder 当前构建器。 WithText<T>(Action<T>?) 设置模块的文本。 public SectionModuleBuilder WithText<T>(Action<T>? action = null) where T : IElementBuilder, new() Parameters action Action<T> 一个包含对要设置的文本进行配置的操作的委托。 Returns SectionModuleBuilder 当前构建器。 Type Parameters T 要设置的文本的类型。 Operators operator ==(SectionModuleBuilder?, SectionModuleBuilder?) 判定两个 SectionModuleBuilder 是否相等。 public static bool operator ==(SectionModuleBuilder? left, SectionModuleBuilder? right) Parameters left SectionModuleBuilder right SectionModuleBuilder Returns bool 如果两个 SectionModuleBuilder 相等，则为 true；否则为 false。 operator !=(SectionModuleBuilder?, SectionModuleBuilder?) 判定两个 SectionModuleBuilder 是否不相等。 public static bool operator !=(SectionModuleBuilder? left, SectionModuleBuilder? right) Parameters left SectionModuleBuilder right SectionModuleBuilder Returns bool 如果两个 SectionModuleBuilder 不相等，则为 true；否则为 false。"
  },
  "api/Kook.SlowModeInterval.html": {
    "href": "api/Kook.SlowModeInterval.html",
    "title": "Enum SlowModeInterval | Kook.Net 文档",
    "keywords": "Enum SlowModeInterval Namespace Kook Assembly Kook.Net.Core.dll 表示 ITextChannel 的慢速模式延迟时间秒数。 public enum SlowModeInterval Fields None = 0 禁用慢速模式。 _10 = 10 每个用户每 10 秒最多发送一条消息。 _120 = 120 每个用户每 2 分钟（120 秒）最多发送一条消息。 _15 = 15 每个用户每 15 秒最多发送一条消息。 _1800 = 1800 每个用户每 30 分钟（1800 秒）最多发送一条消息。 _21600 = 21600 每个用户每 6 小时（21600 秒）最多发送一条消息。 _30 = 30 每个用户每 30 秒最多发送一条消息。 _300 = 300 每个用户每 5 分钟（300 秒）最多发送一条消息。 _3600 = 3600 每个用户每 1 小时（3600 秒）最多发送一条消息。 _5 = 5 每个用户每 5 秒最多发送一条消息。 _60 = 60 每个用户每 1 分钟（60 秒）最多发送一条消息。 _600 = 600 每个用户每 10 分钟（600 秒）最多发送一条消息。 _7200 = 7200 每个用户每 2 小时（7200 秒）最多发送一条消息。 _900 = 900 每个用户每 15 分钟（900 秒）最多发送一条消息。"
  },
  "api/Kook.SortMode.html": {
    "href": "api/Kook.SortMode.html",
    "title": "Enum SortMode | Kook.Net 文档",
    "keywords": "Enum SortMode Namespace Kook Assembly Kook.Net.Core.dll 表示排序模式。 public enum SortMode Fields Ascending = 0 项目按升序排序。 Descending = 1 项目按降序排序。"
  },
  "api/Kook.SystemMessageType.html": {
    "href": "api/Kook.SystemMessageType.html",
    "title": "Enum SystemMessageType | Kook.Net 文档",
    "keywords": "Enum SystemMessageType Namespace Kook Assembly Kook.Net.Core.dll 表示一个系统消息的类型。 public enum SystemMessageType Fields Unknown = -1 表示一个未知的系统消息类型。"
  },
  "api/Kook.Tag-2.html": {
    "href": "api/Kook.Tag-2.html",
    "title": "Class Tag<TKey, TValue> | Kook.Net 文档",
    "keywords": "Class Tag<TKey, TValue> Namespace Kook Assembly Kook.Net.Core.dll Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. public class Tag<TKey, TValue> : ITag where TKey : IEquatable<TKey> where TValue : IEntity<TKey> Type Parameters TKey TValue Inheritance object Tag<TKey, TValue> Implements ITag Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods TagUtils.AsChannelTag(ITag) TagUtils.AsEmojiTag(ITag) TagUtils.AsRoleTag(ITag) TagUtils.AsUserTag(ITag) Properties Index 获取消息中标签的位置。 public int Index { get; } Property Value int Key 获取标签的键。 public TKey Key { get; } Property Value TKey Length 获取标签的长度。 public int Length { get; } Property Value int Type 获取标签的类型。 public TagType Type { get; } Property Value TagType Value 获取标签的键。 public TValue? Value { get; } Property Value TValue Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Kook.TagHandling.html": {
    "href": "api/Kook.TagHandling.html",
    "title": "Enum TagHandling | Kook.Net 文档",
    "keywords": "Enum TagHandling Namespace Kook Assembly Kook.Net.Core.dll 表示在转换标签时应进行的操作类型。 public enum TagHandling Fields FullName = 4 转换为名称，包含提及前缀。如果提及标签为用户提及，则还会包含用户的识别号。 FullNameNoPrefix = 5 转换为名称，但不包含提及前缀。如果提及标签为用户提及，则还会包含用户的识别号。 Ignore = 0 不进行任何处理。 Name = 2 转换为名称，包含提及前缀。 NameNoPrefix = 3 转换为名称，但不包含提及前缀。 Remove = 1 移除标签。 Sanitize = 6 使用 U+200B 零宽空格字符转义标签。 See Also Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling)"
  },
  "api/Kook.TagMode.html": {
    "href": "api/Kook.TagMode.html",
    "title": "Enum TagMode | Kook.Net 文档",
    "keywords": "Enum TagMode Namespace Kook Assembly Kook.Net.Core.dll 表示标签的语法模式。 public enum TagMode Fields KMarkdown = 1 KMarkdown 格式。 PlainText = 0 纯文本形式。"
  },
  "api/Kook.TagType.html": {
    "href": "api/Kook.TagType.html",
    "title": "Enum TagType | Kook.Net 文档",
    "keywords": "Enum TagType Namespace Kook Assembly Kook.Net.Core.dll 表示标签的类型。 public enum TagType Fields ChannelMention = 1 频道提及标签。 Emoji = 5 表情符号标签。 EveryoneMention = 3 全体成员提及标签。 HereMention = 4 在线成员提及标签。 RoleMention = 2 角色提及标签。 UserMention = 0 用户提及标签。"
  },
  "api/Kook.TagUtils.html": {
    "href": "api/Kook.TagUtils.html",
    "title": "Class TagUtils | Kook.Net 文档",
    "keywords": "Class TagUtils Namespace Kook Assembly Kook.Net.Core.dll 提供用于转换 ITag 为强类型实现类的工具方法。 public static class TagUtils Inheritance object TagUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AsChannelTag(ITag) 将标签转换为频道标签。 public static Tag<ulong, IChannel> AsChannelTag(this ITag tag) Parameters tag ITag 要转换的标签。 Returns Tag<ulong, IChannel> 转换后的频道标签。 Exceptions InvalidCastException 标签不是频道提及标签。 AsEmojiTag(ITag) 将标签转换为表情符号标签。 public static Tag<string, IEmote> AsEmojiTag(this ITag tag) Parameters tag ITag 要转换的标签。 Returns Tag<string, IEmote> 转换后的表情符号标签。 Exceptions InvalidCastException 标签不是表情符号标签。 AsRoleTag(ITag) 将标签转换为角色标签。 public static Tag<uint, IRole> AsRoleTag(this ITag tag) Parameters tag ITag 要转换的标签。 Returns Tag<uint, IRole> 转换后的角色标签。 Exceptions InvalidCastException 标签不是角色提及标签。 AsUserTag(ITag) 将标签转换为用户标签。 public static Tag<ulong, IUser> AsUserTag(this ITag tag) Parameters tag ITag 要转换的标签。 Returns Tag<ulong, IUser> 转换后的用户标签。 Exceptions InvalidCastException 标签不是用户提及标签。"
  },
  "api/Kook.TextTheme.html": {
    "href": "api/Kook.TextTheme.html",
    "title": "Enum TextTheme | Kook.Net 文档",
    "keywords": "Enum TextTheme Namespace Kook Assembly Kook.Net.Core.dll 表示卡片内 KMarkdown 文本的颜色。 public enum TextTheme : ushort Fields Body = 6 外观表现为正文。 Danger = 2 外观表现为危险。 Info = 4 外观表现为信息。 Pink = 8 外观表现为粉色。 Primary = 0 外观表现为主要文本。 Purple = 9 外观表现为紫色。 Secondary = 5 外观表现为次要文本。 Success = 1 外观表现为成功。 Tips = 7 外观表现为提示。 Warning = 3 外观表现为警告。 Remarks warning 彩色 KMarkdown 文本目前仅支持在卡片消息中使用，KMarkdown 文本消息暂不支持彩色。 warning 彩色文本的颜色在不同的平台上可能会有所不同。建议您在不同的平台上测试您的卡片消息，以确保文本颜色符合您的预期。 See Also Colorize(string, TextTheme, bool)"
  },
  "api/Kook.TokenType.html": {
    "href": "api/Kook.TokenType.html",
    "title": "Enum TokenType | Kook.Net 文档",
    "keywords": "Enum TokenType Namespace Kook Assembly Kook.Net.Core.dll 表示客户端所使用的令牌类型。 public enum TokenType Fields Bearer = 0 OAuth2 令牌类型。 Bot = 1 Bot 令牌类型。"
  },
  "api/Kook.TokenUtils.html": {
    "href": "api/Kook.TokenUtils.html",
    "title": "Class TokenUtils | Kook.Net 文档",
    "keywords": "Class TokenUtils Namespace Kook Assembly Kook.Net.Core.dll 提供一组用于处理 KOOK 登录令牌的辅助方法。 public static class TokenUtils Inheritance object TokenUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ValidateToken(TokenType, string) 检查指定类型的令牌的有效性。 public static void ValidateToken(TokenType tokenType, string token) Parameters tokenType TokenType 令牌的类型。 token string 要校验的令牌。 Exceptions ArgumentNullException 当提供的令牌值为 null、空字符串或仅包含空白字符时引发异常。 ArgumentException 当提供的令牌类型或令牌值无效时引发异常。"
  },
  "api/Kook.UserExtensions.html": {
    "href": "api/Kook.UserExtensions.html",
    "title": "Class UserExtensions | Kook.Net 文档",
    "keywords": "Class UserExtensions Namespace Kook Assembly Kook.Net.Core.dll 提供用于各种用户实体的扩展方法。 public static class UserExtensions Inheritance object UserExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BanAsync(IGuildUser, int, string?, RequestOptions?) 封禁服务器内的用户。 public static Task BanAsync(this IGuildUser user, int pruneDays = 0, string? reason = null, RequestOptions? options = null) Parameters user IGuildUser 要封禁的用户。 pruneDays int 要删除此服务器中来自此用户的最近几天的消息，范围为 0 至 7，0 表示不删除。 reason string 封禁原因。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步封禁操作的任务。 Exceptions ArgumentException pruneDays 超出了 0 至 7 的范围。 SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) 通过私聊发送卡片消息。 public static Task<Cacheable<IUserMessage, Guid>> SendCardAsync(this IUser user, ICard card, IQuote? quote = null, RequestOptions? options = null) Parameters user IUser 要发送消息的用户。 card ICard 要发送的卡片。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) 通过私聊发送卡片消息。 public static Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(this IUser user, IEnumerable<ICard> cards, IQuote? quote = null, RequestOptions? options = null) Parameters user IUser 要发送消息的用户。 cards IEnumerable<ICard> 要发送的卡片。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) 通过私聊发送文件。 public static Task<Cacheable<IUserMessage, Guid>> SendFileAsync(this IUser user, FileAttachment attachment, IQuote? quote = null, RequestOptions? options = null) Parameters user IUser 要发送消息的用户。 attachment FileAttachment 文件的附件信息。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) 通过私聊发送文件。 public static Task<Cacheable<IUserMessage, Guid>> SendFileAsync(this IUser user, Stream stream, string filename, AttachmentType type = AttachmentType.File, IQuote? quote = null, RequestOptions? options = null) Parameters user IUser 要发送消息的用户。 stream Stream 文件的流。 filename string 文件名。 type AttachmentType 文件的媒体类型。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) 通过私聊发送文件。 public static Task<Cacheable<IUserMessage, Guid>> SendFileAsync(this IUser user, string path, string? filename = null, AttachmentType type = AttachmentType.File, IQuote? quote = null, RequestOptions? options = null) Parameters user IUser 要发送消息的用户。 path string 文件的路径。 filename string 文件名。 type AttachmentType 文件的媒体类型。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendTextAsync(IUser, string, IQuote?, RequestOptions?) 通过私聊发送文本消息。 public static Task<Cacheable<IUserMessage, Guid>> SendTextAsync(this IUser user, string content, IQuote? quote = null, RequestOptions? options = null) Parameters user IUser 要发送消息的用户。 content string The KMarkdown content to be sent. quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。"
  },
  "api/Kook.UserPermissionOverwrite.html": {
    "href": "api/Kook.UserPermissionOverwrite.html",
    "title": "Class UserPermissionOverwrite | Kook.Net 文档",
    "keywords": "Class UserPermissionOverwrite Namespace Kook Assembly Kook.Net.Core.dll 表示一个为用户设置的频道权限重写设置。 public class UserPermissionOverwrite : IPermissionOverwrite<IUser> Inheritance object UserPermissionOverwrite Implements IPermissionOverwrite<IUser> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserPermissionOverwrite(IUser, OverwritePermissions) 初始化一个 UserPermissionOverwrite 类的新实例。 public UserPermissionOverwrite(IUser target, OverwritePermissions permissions) Parameters target IUser 用户。 permissions OverwritePermissions 用户的权限重写配置。 Properties Permissions 获取此重写的权限重写配置。 public OverwritePermissions Permissions { get; } Property Value OverwritePermissions Target 获取此重写所应用的用户。 public IUser Target { get; } Property Value IUser"
  },
  "api/Kook.UserTag.html": {
    "href": "api/Kook.UserTag.html",
    "title": "Class UserTag | Kook.Net 文档",
    "keywords": "Class UserTag Namespace Kook Assembly Kook.Net.Core.dll 表示一个用户的标签。 public class UserTag : IEquatable<UserTag> Inheritance object UserTag Implements IEquatable<UserTag> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BackgroundColor 获取此用户标签的背景色。 public AlphaColor BackgroundColor { get; } Property Value AlphaColor Color 获取此用户标签的颜色。 public Color Color { get; } Property Value Color Text 获取此用户标签的文本。 public string Text { get; } Property Value string Methods Equals(UserTag?) Indicates whether the current object is equal to another object of the same type. public bool Equals(UserTag? other) Parameters other UserTag An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/Kook.VideoModule.html": {
    "href": "api/Kook.VideoModule.html",
    "title": "Class VideoModule | Kook.Net 文档",
    "keywords": "Class VideoModule Namespace Kook Assembly Kook.Net.Core.dll 视频模块，可用于 ICard 中。 public class VideoModule : IMediaModule, IModule, IEquatable<VideoModule>, IEquatable<IModule> Inheritance object VideoModule Implements IMediaModule IModule IEquatable<VideoModule> IEquatable<IModule> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CardExtensions.ToBuilder(IModule) CardExtensions.ToBuilder(VideoModule) Properties Source 获取视频的 URL。 public string Source { get; } Property Value string Title 获取视频的标题。 public string? Title { get; } Property Value string Type 获取模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods Equals(VideoModule?) Indicates whether the current object is equal to another object of the same type. public bool Equals(VideoModule? videoModule) Parameters videoModule VideoModule Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(VideoModule, VideoModule) 判定两个 VideoModule 是否相等。 public static bool operator ==(VideoModule left, VideoModule right) Parameters left VideoModule right VideoModule Returns bool 如果两个 VideoModule 相等，则为 true；否则为 false。 operator !=(VideoModule, VideoModule) 判定两个 VideoModule 是否不相等。 public static bool operator !=(VideoModule left, VideoModule right) Parameters left VideoModule right VideoModule Returns bool 如果两个 VideoModule 不相等，则为 true；否则为 false。"
  },
  "api/Kook.VideoModuleBuilder.html": {
    "href": "api/Kook.VideoModuleBuilder.html",
    "title": "Class VideoModuleBuilder | Kook.Net 文档",
    "keywords": "Class VideoModuleBuilder Namespace Kook Assembly Kook.Net.Core.dll 用来构建 SectionModule 模块的构建器。 public class VideoModuleBuilder : IModuleBuilder, IEquatable<VideoModuleBuilder>, IEquatable<IModuleBuilder> Inheritance object VideoModuleBuilder Implements IModuleBuilder IEquatable<VideoModuleBuilder> IEquatable<IModuleBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VideoModuleBuilder() 初始化一个 VideoModuleBuilder 类的新实例。 public VideoModuleBuilder() VideoModuleBuilder(string, string?) 初始化一个 VideoModuleBuilder 类的新实例。 public VideoModuleBuilder(string source, string? title = null) Parameters source string 视频的 URL。 title string 视频标题。 Properties Source 获取或设置视频的 URL。 public string? Source { get; set; } Property Value string Title 获取或设置视频标题。 public string? Title { get; set; } Property Value string Type 获取此构建器构建的模块的类型。 public ModuleType Type { get; } Property Value ModuleType Methods Build() 构建当前构建器为一个 VideoModule 对象。 public VideoModule Build() Returns VideoModule 由当前构建器表示的属性构建的 VideoModule 对象。 Exceptions ArgumentNullException Source 为 null。 ArgumentException Source 为空字符串。 UriFormatException Source 不是有效的 URL。 Equals(VideoModuleBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(VideoModuleBuilder? videoModuleBuilder) Parameters videoModuleBuilder VideoModuleBuilder Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithSource(string?) 设置视频的 URL。 public VideoModuleBuilder WithSource(string? source) Parameters source string 视频的 URL。 Returns VideoModuleBuilder 当前构建器。 WithTitle(string) 设置视频标题。 public VideoModuleBuilder WithTitle(string title) Parameters title string 视频标题。 Returns VideoModuleBuilder 当前构建器。 Operators operator ==(VideoModuleBuilder?, VideoModuleBuilder?) 判定两个 VideoModuleBuilder 是否相等。 public static bool operator ==(VideoModuleBuilder? left, VideoModuleBuilder? right) Parameters left VideoModuleBuilder right VideoModuleBuilder Returns bool 如果两个 VideoModuleBuilder 相等，则为 true；否则为 false。 operator !=(VideoModuleBuilder?, VideoModuleBuilder?) 判定两个 VideoModuleBuilder 是否不相等。 public static bool operator !=(VideoModuleBuilder? left, VideoModuleBuilder? right) Parameters left VideoModuleBuilder right VideoModuleBuilder Returns bool 如果两个 VideoModuleBuilder 不相等，则为 true；否则为 false。"
  },
  "api/Kook.VoiceQuality.html": {
    "href": "api/Kook.VoiceQuality.html",
    "title": "Enum VoiceQuality | Kook.Net 文档",
    "keywords": "Enum VoiceQuality Namespace Kook Assembly Kook.Net.Core.dll 表示 IVoiceChannel 的语音质量。 public enum VoiceQuality Fields _128kbps = 4 等效于约 128 kbps。 _18kbps = 1 等效于约 18 kbps。 _192kbps = 5 等效于约 192 kbps。 _256kbps = 6 等效于约 256 kbps。 _320kbps = 7 等效于约 320 kbps。 _48kbps = 2 等效于约 48 kbps。 _96kbps = 3 等效于约 96 kbps。"
  },
  "api/Kook.WebSocket.BaseSocketClient.html": {
    "href": "api/Kook.WebSocket.BaseSocketClient.html",
    "title": "Class BaseSocketClient | Kook.Net 文档",
    "keywords": "Class BaseSocketClient Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的客户端的抽象基类。 public abstract class BaseSocketClient : BaseKookClient, IKookClient, IDisposable Inheritance object BaseKookClient BaseSocketClient Implements IKookClient IDisposable Derived KookSocketClient Inherited Members BaseKookClient.Log BaseKookClient.LoggedIn BaseKookClient.LoggedOut BaseKookClient.SentRequest BaseKookClient.LoginState BaseKookClient.TokenType BaseKookClient.Dispose() BaseKookClient.LoginAsync(TokenType, string, bool) BaseKookClient.LogoutAsync() BaseKookClient.ConnectionState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields BaseConfig 获取此客户端使用的配置。 protected readonly KookSocketConfig BaseConfig Field Value KookSocketConfig Properties CurrentUser 获取登录到此客户端的当前用户；如果未登录，则为 null。 public virtual SocketSelfUser? CurrentUser { get; protected set; } Property Value SocketSelfUser Guilds 获取当前用户所在的所有服务器。 public abstract IReadOnlyCollection<SocketGuild> Guilds { get; } Property Value IReadOnlyCollection<SocketGuild> Latency 获取到网关服务器的往返延迟估计值（以毫秒为单位）。 public abstract int Latency { get; protected set; } Property Value int Remarks 此往返估计值源于心跳包的延迟，不代表诸如发送消息等操作的真实延迟。 Rest 获取一个与此客户端共享状态的仅限于 REST 的客户端。 public abstract KookSocketRestClient Rest { get; } Property Value KookSocketRestClient Methods DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>?, RequestOptions?) 下载全部或指定服务器的服务器助力信息到缓存中。 public abstract Task DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>? guilds = null, RequestOptions? options = null) Parameters guilds IEnumerable<IGuild> 要下载服务器助力信息的服务器。如果为 null，则下载所有可用的服务器。 options RequestOptions 发送请求时要使用的选项。 Returns Task Remarks 对于要下载服务器助力信息的服务器，当前用户在该服务器中必须具有 ManageGuild 权限。 DownloadUsersAsync(IEnumerable<IGuild>?, RequestOptions?) 下载全部或指定服务器的用户到缓存中。 public abstract Task DownloadUsersAsync(IEnumerable<IGuild>? guilds = null, RequestOptions? options = null) Parameters guilds IEnumerable<IGuild> 要下载用户的服务器。如果为 null，则下载所有可用的服务器。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步下载操作的任务。 DownloadVoiceStatesAsync(IEnumerable<IGuild>?, RequestOptions?) 下载全部或指定服务器的语音状态到缓存中。 public abstract Task DownloadVoiceStatesAsync(IEnumerable<IGuild>? guilds = null, RequestOptions? options = null) Parameters guilds IEnumerable<IGuild> 要下载语音状态的服务器。如果为 null，则下载所有可用的服务器。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步下载操作的任务。 GetChannel(ulong) 获取一个服务器频道。 public abstract SocketChannel? GetChannel(ulong id) Parameters id ulong 要获取的频道的 ID。 Returns SocketChannel 与指定的 id 关联的频道；如果未找到，则返回 null。 GetDMChannel(Guid) 获取一个私聊频道。 public abstract SocketDMChannel? GetDMChannel(Guid chatCode) Parameters chatCode Guid 私聊频道的聊天代码。 Returns SocketDMChannel 具有指定聊天代码的私聊频道；如果未找到，则返回 null。 GetDMChannel(ulong) 获取一个私聊频道。 public abstract SocketDMChannel? GetDMChannel(ulong userId) Parameters userId ulong 私聊频道中另一位用户的 ID。 Returns SocketDMChannel 另一位用户具有指定用户 ID 的私聊频道；如果未找到，则返回 null。 GetGuild(ulong) 获取一个服务器。 public abstract SocketGuild? GetGuild(ulong id) Parameters id ulong 要获取的服务器的 ID。 Returns SocketGuild 与指定的 id 关联的服务器；如果未找到，则返回 null。 GetUser(string, string) 获取用户。 public abstract SocketUser? GetUser(string username, string identifyNumber) Parameters username string 用户的名称。 identifyNumber string 用户的识别号。 Returns SocketUser 与指定的名称和识别号关联的用户；如果未找到，则返回 null。 Remarks 此方法可能返回 null，因为此方法仅会返回网关缓存中存在的用户，如果在当前 Bot 登录会话中，要获取的用户未引发过任何事件，那么该用户实体则不会存在于缓存中。 GetUser(ulong) 获取用户。 public abstract SocketUser? GetUser(ulong id) Parameters id ulong 要获取的用户的 ID。 Returns SocketUser 与指定的 id 关联的用户；如果未找到，则返回 null。 Remarks 此方法可能返回 null，因为此方法仅会返回网关缓存中存在的用户，如果在当前 Bot 登录会话中，要获取的用户未引发过任何事件，那么该用户实体则不会存在于缓存中。 StartAsync() 启动客户端与 KOOK 之间的连接。 public abstract Task StartAsync() Returns Task 一个表示异步启动操作的任务。 Remarks 当前方法会初始化客户端与 KOOK 之间的连接。 important 此方法会在调用后立即返回，因为它会在另一个线程上初始化连接。 StopAsync() 停止客户端与 KOOK 之间的连接。 public abstract Task StopAsync() Returns Task 一个表示异步停止操作的任务。 Events ChannelCreated 当服务器频道被创建时引发。 public event Func<SocketChannel, Task> ChannelCreated Event Type Func<SocketChannel, Task> Remarks 事件参数： SocketChannel 参数是新创建的服务器频道。 ChannelDestroyed 当服务器频道被删除时引发。 public event Func<SocketChannel, Task> ChannelDestroyed Event Type Func<SocketChannel, Task> Remarks 事件参数： SocketChannel 参数是被删除的服务器频道。 ChannelUpdated 当服务器频道信息被更新时引发。 public event Func<SocketChannel, SocketChannel, Task> ChannelUpdated Event Type Func<SocketChannel, SocketChannel, Task> Remarks 事件参数： SocketChannel 参数是更新前的服务器频道。 SocketChannel 参数是更新后的服务器频道。 CurrentUserUpdated 当当前用户信息被更新时引发。 public event Func<SocketSelfUser, SocketSelfUser, Task> CurrentUserUpdated Event Type Func<SocketSelfUser, SocketSelfUser, Task> Remarks 事件参数： SocketSelfUser 参数是当前用户被更新前的状态。 SocketSelfUser 参数是当前用户被更新后的状态。 DirectMessageButtonClicked 当用户点击私聊频道内的卡片消息按钮时引发。 public event Func<string, Cacheable<SocketUser, ulong>, Cacheable<IMessage, Guid>, SocketDMChannel, Task> DirectMessageButtonClicked Event Type Func<string, Cacheable<SocketUser, ulong>, Cacheable<IMessage, Guid>, SocketDMChannel, Task> Remarks 卡片消息中的按钮包含多种点击事件类型，当该类型为 ReturnValue 时，用户点击按钮后会引发此事件。 事件参数： string 参数是按钮的值。 Cacheable<TEntity, TId> 参数是点击按钮的可缓存用户。如果缓存中存在此用户实体，那么该结构内包含该 SocketUser 用户；否则，包含 ulong 用户 ID，以供按需下载实体。 Cacheable<TEntity, TId> 参数是点击按钮所在的可缓存消息。如果缓存中存在此消息实体，那么该结构内包含该 IMessage 消息被更新后的状态；否则，包含 Guid 消息 ID，以供按需下载实体。 SocketDMChannel 参数是点击按钮所在的私聊频道。 DirectMessageDeleted 当私聊频道内的消息被删除时引发。 public event Func<Cacheable<IMessage, Guid>, Cacheable<SocketUser, ulong>, Cacheable<SocketDMChannel, Guid>, Task> DirectMessageDeleted Event Type Func<Cacheable<IMessage, Guid>, Cacheable<SocketUser, ulong>, Cacheable<SocketDMChannel, Guid>, Task> Remarks 事件参数： Cacheable<TEntity, TId> 参数是被删除的可缓存消息。如果缓存中存在此消息实体，那么该结构内包含该 IMessage 被删除的消息；否则，包含 Guid 消息 ID。 important 消息被删除后无法通过 DownloadAsync() 方法下载。 Cacheable<TEntity, TId> 参数是该消息的作者的可缓存用户。如果缓存中存在此用户实体，那么该结构内包含该 SocketUser 用户；否则，包含 ulong 用户 ID，以供按需下载实体。 SocketTextChannel 参数是消息被删除前所在的服务器频道。 DirectMessageReceived 当接收到新的私聊消息时引发。 public event Func<SocketMessage, SocketUser, SocketDMChannel, Task> DirectMessageReceived Event Type Func<SocketMessage, SocketUser, SocketDMChannel, Task> Remarks 事件参数： SocketMessage 参数是新接收到的私聊消息。 SocketUser 参数是发送消息的用户。 SocketDMChannel 参数是消息所在的私聊频道。 DirectMessageUpdated 当私聊频道内的消息被更新时引发。 public event Func<Cacheable<IMessage, Guid>, Cacheable<IMessage, Guid>, Cacheable<SocketUser, ulong>, Cacheable<SocketDMChannel, Guid>, Task> DirectMessageUpdated Event Type Func<Cacheable<IMessage, Guid>, Cacheable<IMessage, Guid>, Cacheable<SocketUser, ulong>, Cacheable<SocketDMChannel, Guid>, Task> Remarks 事件参数： Cacheable<TEntity, TId> 参数是可缓存消息被更新前的状态。如果缓存中存在此消息实体，那么该结构内包含该 IMessage 消息被更新前的状态；否则，包含 Guid 消息 ID。 important 消息被更新前的状态无法通过 DownloadAsync() 方法下载。 Cacheable<TEntity, TId> 参数是可缓存消息被更新后的状态。如果缓存中存在此消息实体，那么该结构内包含该 IMessage 消息被更新后的状态；否则，包含 Guid 消息 ID，以供按需下载实体。 Cacheable<TEntity, TId> 参数是该消息的作者的可缓存用户。如果缓存中存在此用户实体，那么该结构内包含该 SocketUser 用户；否则，包含 ulong 用户 ID，以供按需下载实体。 SocketDMChannel 参数是消息所在的私聊频道。 DirectReactionAdded 当私聊频道内的消息上被添加了新的回应时引发。 public event Func<Cacheable<IMessage, Guid>, Cacheable<SocketDMChannel, Guid>, Cacheable<SocketUser, ulong>, SocketReaction, Task> DirectReactionAdded Event Type Func<Cacheable<IMessage, Guid>, Cacheable<SocketDMChannel, Guid>, Cacheable<SocketUser, ulong>, SocketReaction, Task> Remarks 事件参数： Cacheable<TEntity, TId> 参数是被添加了回应的可缓存消息。如果缓存中存在此消息实体，那么该结构内包含该 IMessage 消息；否则，包含 Guid 消息 ID，以供按需下载实体。 Cacheable<TEntity, TId> 参数是消息所在的可缓存私聊频道。如果缓存中存在此私聊频道实体，那么该结构内包含该 SocketDMChannel 私聊频道；否则，包含 Guid 私聊频道聊天代码，以供按需下载实体。 Cacheable<TEntity, TId> 参数是添加了此回应的可缓存用户。如果缓存中存在此用户实体，那么该结构内包含该 SocketUser 用户；否则，包含 ulong 用户 ID，以供按需下载实体。 SocketReaction 参数是被添加的回应。 DirectReactionRemoved 当私聊频道内的消息上存在的回应被用户移除时引发。 public event Func<Cacheable<IMessage, Guid>, Cacheable<SocketDMChannel, Guid>, Cacheable<SocketUser, ulong>, SocketReaction, Task> DirectReactionRemoved Event Type Func<Cacheable<IMessage, Guid>, Cacheable<SocketDMChannel, Guid>, Cacheable<SocketUser, ulong>, SocketReaction, Task> Remarks 事件参数： Cacheable<TEntity, TId> 参数是被移除了回应的可缓存消息。如果缓存中存在此消息实体，那么该结构内包含该 IMessage 消息；否则，包含 Guid 消息 ID，以供按需下载实体。 Cacheable<TEntity, TId> 参数是消息所在的可缓存私聊频道。如果缓存中存在此私聊频道实体，那么该结构内包含该 SocketDMChannel 私聊频道；否则，包含 Guid 私聊频道聊天代码，以供按需下载实体。 Cacheable<TEntity, TId> 参数是移除了此回应的可缓存用户。如果缓存中存在此用户实体，那么该结构内包含该 SocketUser 用户；否则，包含 ulong 用户 ID，以供按需下载实体。 SocketReaction 参数是被移除的回应。 EmoteCreated 当服务器内的自定义表情被创建时引发。 public event Func<GuildEmote, SocketGuild, Task> EmoteCreated Event Type Func<GuildEmote, SocketGuild, Task> Remarks 事件参数： GuildEmote 参数是被创建的自定义表情。 SocketGuild 参数是自定义表情所在的服务器。 EmoteDeleted 当服务器内的自定义表情被删除时引发。 public event Func<GuildEmote, SocketGuild, Task> EmoteDeleted Event Type Func<GuildEmote, SocketGuild, Task> Remarks 事件参数： GuildEmote 参数是被删除的自定义表情。 SocketGuild 参数是自定义表情被删除前所在的服务器。 EmoteUpdated 当服务器内的自定义表情被更新时引发。 public event Func<GuildEmote?, GuildEmote, SocketGuild, Task> EmoteUpdated Event Type Func<GuildEmote, GuildEmote, SocketGuild, Task> Remarks 事件参数： GuildEmote 参数是自定义表情被更新前的状态，如果缓存中不存在此自定义表情实体，则为 null。 GuildEmote 参数是自定义表情被更新后的状态。 SocketGuild 参数是自定义表情所在的服务器。 GuildAvailable 当服务器状态变更为可用时引发。 public event Func<SocketGuild, Task> GuildAvailable Event Type Func<SocketGuild, Task> Remarks 服务器状态变更为可用，表示此服务器实体已完整缓存基础数据，并与网关同步。 缓存基础数据包括服务器基本信息、频道、角色、频道权限重写、当前用户在服务器内的昵称。 事件参数： SocketGuild 参数是服务器状态变更为可用的服务器。 GuildMemberOffline 当服务器用户的在线状态变更为离线时引发。 public event Func<IReadOnlyCollection<Cacheable<SocketGuildUser, ulong>>, DateTimeOffset, Task> GuildMemberOffline Event Type Func<IReadOnlyCollection<Cacheable<SocketGuildUser, ulong>>, DateTimeOffset, Task> Remarks 事件参数： IReadOnlyCollection<T> 参数是所有此批次在线状态变更为离线的服务器用户。每个服务器用户都由一个 Cacheable<TEntity, TId> 表示。如果缓存中存在此服务器用户实体，那么该结构内包含该 SocketGuildUser 服务器用户；否则，包含 ulong 用户 ID，以供按需下载实体。 DateTimeOffset 参数是在线状态变更为离线的时间。 GuildMemberOnline 当服务器用户的在线状态变更为在线时引发。 public event Func<IReadOnlyCollection<Cacheable<SocketGuildUser, ulong>>, DateTimeOffset, Task> GuildMemberOnline Event Type Func<IReadOnlyCollection<Cacheable<SocketGuildUser, ulong>>, DateTimeOffset, Task> Remarks 事件参数： IReadOnlyCollection<T> 参数是所有此批次在线状态变更为在线的服务器用户。每个服务器用户都由一个 Cacheable<TEntity, TId> 表示。如果缓存中存在此服务器用户实体，那么该结构内包含该 SocketGuildUser 服务器用户；否则，包含 ulong 用户 ID，以供按需下载实体。 DateTimeOffset 参数是在线状态变更为在线的时间。 GuildMemberUpdated 当服务器用户信息被更新时引发。 public event Func<Cacheable<SocketGuildUser, ulong>, Cacheable<SocketGuildUser, ulong>, Task> GuildMemberUpdated Event Type Func<Cacheable<SocketGuildUser, ulong>, Cacheable<SocketGuildUser, ulong>, Task> Remarks 事件参数： SocketGuildUser 参数是可缓存服务器用户被更新前的状态。如果缓存中存在此用户实体，那么该结构内包含该 SocketGuildUser 服务器用户被更新前的状态；否则，包含 ulong 用户 ID。 important 服务器用户被更新前的状态无法通过 DownloadAsync() 方法下载。 Cacheable<TEntity, TId> 参数是可缓存服务器用户被更新后的状态。如果缓存中存在此用户实体，那么该结构内包含该 SocketGuildUser 用户被更新后的状态；否则，包含 ulong 用户 ID，以供按需下载实体。 GuildUnavailable 当服务器状态变更为不可用时引发。 public event Func<SocketGuild, Task> GuildUnavailable Event Type Func<SocketGuild, Task> Remarks 服务器状态变更为不可用，表示此服务器实体丢失与网关的同步，所缓存的数据不可靠，这通常发生在服务器被删除、当前用户离开服务器、网关连接断开等情况。 事件参数： SocketGuild 参数是服务器状态变更为不可用的服务器。 GuildUpdated 当服务器信息被更新时引发。 public event Func<SocketGuild, SocketGuild, Task> GuildUpdated Event Type Func<SocketGuild, SocketGuild, Task> Remarks 事件参数： SocketGuild 参数是服务器信息被更新前的状态。 SocketGuild 参数是服务器信息被更新后的状态。 JoinedGuild 当当前用户新加入服务器时引发。 public event Func<SocketGuild, Task> JoinedGuild Event Type Func<SocketGuild, Task> Remarks 事件参数： SocketGuild 参数是当前用户新加入的服务器。 LeftGuild 当当前用户离开服务器时引发。 public event Func<SocketGuild, Task> LeftGuild Event Type Func<SocketGuild, Task> Remarks 事件参数： SocketGuild 参数是当前用户离开的服务器。 MessageButtonClicked 当用户点击服务器频道内的卡片消息按钮时引发。 public event Func<string, Cacheable<SocketGuildUser, ulong>, Cacheable<IMessage, Guid>, SocketTextChannel, Task> MessageButtonClicked Event Type Func<string, Cacheable<SocketGuildUser, ulong>, Cacheable<IMessage, Guid>, SocketTextChannel, Task> Remarks 卡片消息中的按钮包含多种点击事件类型，当该类型为 ReturnValue 时，用户点击按钮后会引发此事件。 事件参数： string 参数是按钮的值。 Cacheable<TEntity, TId> 参数是点击按钮的可缓存服务器用户。如果缓存中存在此用户实体，那么该结构内包含该 SocketGuildUser 服务器用户；否则，包含 ulong 用户 ID，以供按需下载实体。 Cacheable<TEntity, TId> 参数是点击按钮所在的可缓存消息。如果缓存中存在此消息实体，那么该结构内包含该 IMessage 消息被更新后的状态；否则，包含 Guid 消息 ID，以供按需下载实体。 SocketTextChannel 参数是点击按钮所在的服务器频道。 MessageDeleted 当服务器内的消息被删除时引发。 public event Func<Cacheable<IMessage, Guid>, SocketTextChannel, Task> MessageDeleted Event Type Func<Cacheable<IMessage, Guid>, SocketTextChannel, Task> Remarks 事件参数： Cacheable<TEntity, TId> 参数是被删除的可缓存消息。如果缓存中存在此消息实体，那么该结构内包含该 IMessage 被删除的消息；否则，包含 Guid 消息 ID。 important 消息被删除后无法通过 DownloadAsync() 方法下载。 SocketTextChannel 参数是消息被删除前所在的服务器频道。 MessagePinned 当服务器内的消息被置顶时引发。 public event Func<Cacheable<IMessage, Guid>, Cacheable<IMessage, Guid>, SocketTextChannel, Cacheable<SocketGuildUser, ulong>, Task> MessagePinned Event Type Func<Cacheable<IMessage, Guid>, Cacheable<IMessage, Guid>, SocketTextChannel, Cacheable<SocketGuildUser, ulong>, Task> Remarks 事件参数： Cacheable<TEntity, TId> 参数是可缓存消息被置顶前的状态。如果缓存中存在此消息实体，那么该结构内包含该 IMessage 消息被置顶前的状态；否则，包含 Guid 消息 ID。 important 消息被置顶前的状态无法通过 DownloadAsync() 方法下载。 Cacheable<TEntity, TId> 参数是可缓存消息被置顶后的状态。如果缓存中存在此消息实体，那么该结构内包含该 IMessage 消息被置顶后的状态；否则，包含 Guid 消息 ID，以供按需下载实体。 SocketTextChannel 参数是消息所在的服务器频道。 Cacheable<TEntity, TId> 参数是置顶了该消息的可缓存服务器用户。如果缓存中存在此服务器用户实体，那么该结构内包含该 SocketGuildUser 服务器用户；否则，包含 ulong 用户 ID，以供按需下载实体。 MessageReceived 当接收到新的服务器消息时引发。 public event Func<SocketMessage, SocketGuildUser, SocketTextChannel, Task> MessageReceived Event Type Func<SocketMessage, SocketGuildUser, SocketTextChannel, Task> Remarks 事件参数： SocketMessage 参数是新接收到的服务器消息。 SocketGuildUser 参数是发送消息的服务器用户。 SocketTextChannel 参数是消息所在的服务器频道。 MessageUnpinned 当服务器内的消息被取消置顶时引发。 public event Func<Cacheable<IMessage, Guid>, Cacheable<IMessage, Guid>, SocketTextChannel, Cacheable<SocketGuildUser, ulong>, Task> MessageUnpinned Event Type Func<Cacheable<IMessage, Guid>, Cacheable<IMessage, Guid>, SocketTextChannel, Cacheable<SocketGuildUser, ulong>, Task> Remarks 事件参数： Cacheable<TEntity, TId> 参数是可缓存消息被取消置顶前的状态。如果缓存中存在此消息实体，那么该结构内包含该 IMessage 消息被取消置顶前的状态；否则，包含 Guid 消息 ID。 important 消息被取消置顶前的状态无法通过 DownloadAsync() 方法下载。 Cacheable<TEntity, TId> 参数是可缓存消息被取消置顶后的状态。如果缓存中存在此消息实体，那么该结构内包含该 IMessage 消息被取消置顶后的状态；否则，包含 Guid 消息 ID，以供按需下载实体。 SocketTextChannel 参数是消息所在的服务器频道。 Cacheable<TEntity, TId> 参数是取消置顶了该消息的可缓存服务器用户。如果缓存中存在此服务器用户实体，那么该结构内包含该 SocketGuildUser 服务器用户；否则，包含 ulong 用户 ID，以供按需下载实体。 MessageUpdated 当服务器内的消息被更新时引发。 public event Func<Cacheable<IMessage, Guid>, Cacheable<IMessage, Guid>, SocketTextChannel, Task> MessageUpdated Event Type Func<Cacheable<IMessage, Guid>, Cacheable<IMessage, Guid>, SocketTextChannel, Task> Remarks 事件参数： Cacheable<TEntity, TId> 参数是可缓存消息被更新前的状态。如果缓存中存在此消息实体，那么该结构内包含该 IMessage 消息被更新前的状态；否则，包含 Guid 消息 ID。 important 消息被更新前的状态无法通过 DownloadAsync() 方法下载。 Cacheable<TEntity, TId> 参数是可缓存消息被更新后的状态。如果缓存中存在此消息实体，那么该结构内包含该 IMessage 消息被更新后的状态；否则，包含 Guid 消息 ID，以供按需下载实体。 SocketTextChannel 参数是消息所在的服务器频道。 ReactionAdded 当服务器内的消息上被添加了新的回应时引发。 public event Func<Cacheable<IMessage, Guid>, SocketTextChannel, Cacheable<SocketGuildUser, ulong>, SocketReaction, Task> ReactionAdded Event Type Func<Cacheable<IMessage, Guid>, SocketTextChannel, Cacheable<SocketGuildUser, ulong>, SocketReaction, Task> Remarks 事件参数： Cacheable<TEntity, TId> 参数是被添加了回应的可缓存消息。如果缓存中存在此消息实体，那么该结构内包含该 IMessage 消息；否则，包含 Guid 消息 ID，以供按需下载实体。 SocketChannel 参数是消息所在的频道。 Cacheable<TEntity, TId> 参数是添加了此回应的可缓存服务器用户。如果缓存中存在此服务器用户实体，那么该结构内包含该 SocketGuildUser 服务器用户；否则，包含 ulong 用户 ID，以供按需下载实体。 SocketReaction 参数是被添加的回应。 ReactionRemoved 当服务器内的消息上存在的回应被用户移除时引发。 public event Func<Cacheable<IMessage, Guid>, SocketTextChannel, Cacheable<SocketGuildUser, ulong>, SocketReaction, Task> ReactionRemoved Event Type Func<Cacheable<IMessage, Guid>, SocketTextChannel, Cacheable<SocketGuildUser, ulong>, SocketReaction, Task> Remarks 事件参数： Cacheable<TEntity, TId> 参数是被移除了回应的可缓存消息。如果缓存中存在此消息实体，那么该结构内包含该 IMessage 消息；否则，包含 Guid 消息 ID，以供按需下载实体。 SocketChannel 参数是消息所在的频道。 Cacheable<TEntity, TId> 参数是移除了此回应的可缓存服务器用户。如果缓存中存在此服务器用户实体，那么该结构内包含该 SocketGuildUser 服务器用户；否则，包含 ulong 用户 ID，以供按需下载实体。 SocketReaction 参数是被移除的回应。 RoleCreated 当服务器内的角色被创建时引发。 public event Func<SocketRole, Task> RoleCreated Event Type Func<SocketRole, Task> Remarks 事件参数： SocketRole 参数是被创建的角色。 RoleDeleted 当服务器内的角色被删除时引发。 public event Func<SocketRole, Task> RoleDeleted Event Type Func<SocketRole, Task> Remarks 事件参数： SocketRole 参数是被删除的角色。 RoleUpdated 当服务器内的角色被更新时引发。 public event Func<SocketRole, SocketRole, Task> RoleUpdated Event Type Func<SocketRole, SocketRole, Task> Remarks 事件参数： SocketRole 参数是角色被更新前的状态。 SocketRole 参数是角色被更新后的状态。 UserBanned 当用户被服务器封禁时引发。 public event Func<IReadOnlyCollection<Cacheable<SocketUser, ulong>>, Cacheable<SocketGuildUser, ulong>, SocketGuild, string?, Task> UserBanned Event Type Func<IReadOnlyCollection<Cacheable<SocketUser, ulong>>, Cacheable<SocketGuildUser, ulong>, SocketGuild, string, Task> Remarks 事件参数： IReadOnlyCollection<T> 参数是所有此批次被封禁的用户。每个用户都由一个 Cacheable<TEntity, TId> 表示。如果缓存中存在此用户实体，那么该结构内包含该 SocketUser 用户；否则，包含 ulong 用户 ID，以供按需下载实体。 Cacheable<TEntity, TId> 参数是操作此批次封禁的可缓存服务器用户。如果缓存中存在此用户实体，那么该结构内包含该 SocketGuildUser 服务器用户；否则，包含 ulong 用户 ID，以供按需下载实体。 SocketGuild 参数是封禁操作所在的服务器。 string 参数是封禁的原因。 UserConnected 当服务器用户连接到语音频道时引发。 public event Func<Cacheable<SocketGuildUser, ulong>, SocketVoiceChannel, DateTimeOffset, Task> UserConnected Event Type Func<Cacheable<SocketGuildUser, ulong>, SocketVoiceChannel, DateTimeOffset, Task> Remarks 事件参数： Cacheable<TEntity, TId> 参数是连接到语音频道的可缓存服务器用户。如果缓存中存在此服务器用户实体，那么该结构内包含该 SocketGuildUser 服务器用户；否则，包含 ulong 用户 ID，以供按需下载实体。 SocketVoiceChannel 参数是用户连接到的语音频道。 DateTimeOffset 参数是用户连接到语音频道的时间。 UserDisconnected 当服务器用户从语音频道断开连接时引发。 public event Func<Cacheable<SocketGuildUser, ulong>, SocketVoiceChannel, DateTimeOffset, Task> UserDisconnected Event Type Func<Cacheable<SocketGuildUser, ulong>, SocketVoiceChannel, DateTimeOffset, Task> Remarks 事件参数： Cacheable<TEntity, TId> 参数是从语音频道断开连接的可缓存服务器用户。如果缓存中存在此服务器用户实体，那么该结构内包含该 SocketGuildUser 服务器用户；否则，包含 ulong 用户 ID，以供按需下载实体。 SocketVoiceChannel 参数是用户断开连接的语音频道。 DateTimeOffset 参数是用户断开连接的时间。 UserJoined 当用户加入服务器时引发。 public event Func<Cacheable<SocketGuildUser, ulong>, DateTimeOffset, Task> UserJoined Event Type Func<Cacheable<SocketGuildUser, ulong>, DateTimeOffset, Task> Remarks warning 有消息称，那么此事件不会在其成员数量超过 2000 人的服务器内被触发。 事件参数： Cacheable<TEntity, TId> 参数是加入服务器的可缓存服务器用户。如果缓存中存在此用户实体，那么该结构内包含该 SocketGuildUser 服务器用户；否则，包含 ulong 用户 ID，以供按需下载实体。 DateTimeOffset 参数是用户加入服务器的时间。 UserLeft 当用户离开服务器时引发。 public event Func<SocketGuild, Cacheable<SocketUser, ulong>, DateTimeOffset, Task> UserLeft Event Type Func<SocketGuild, Cacheable<SocketUser, ulong>, DateTimeOffset, Task> Remarks warning 有消息称，那么此事件不会在其成员数量超过 2000 人的服务器内被触发。 事件参数： SocketGuild 参数是用户离开的服务器。 Cacheable<TEntity, TId> 参数是离开服务器的可缓存用户。如果缓存中存在此用户实体，那么该结构内包含该 SocketUser 用户；否则，包含 ulong 用户 ID，以供按需下载实体。 DateTimeOffset 参数是用户加入服务器的时间。 UserUnbanned 当用户在服务器内的封禁被解除时引发。 public event Func<IReadOnlyCollection<Cacheable<SocketUser, ulong>>, Cacheable<SocketGuildUser, ulong>, SocketGuild, Task> UserUnbanned Event Type Func<IReadOnlyCollection<Cacheable<SocketUser, ulong>>, Cacheable<SocketGuildUser, ulong>, SocketGuild, Task> Remarks 事件参数： IReadOnlyCollection<T> 参数是所有此批次被解除封禁的用户。每个用户都由一个 Cacheable<TEntity, TId> 表示。如果缓存中存在此用户实体，那么该结构内包含该 SocketUser 用户；否则，包含 ulong 用户 ID，以供按需下载实体。 Cacheable<TEntity, TId> 参数是操作此批次解除封禁的可缓存服务器用户。如果缓存中存在此用户实体，那么该结构内包含该 SocketGuildUser 服务器用户；否则，包含 ulong 用户 ID，以供按需下载实体。 SocketGuild 参数是解除封禁操作所在的服务器。 UserUpdated 当用户信息被更新时引发。 public event Func<Cacheable<SocketUser, ulong>, Cacheable<SocketUser, ulong>, Task> UserUpdated Event Type Func<Cacheable<SocketUser, ulong>, Cacheable<SocketUser, ulong>, Task> Remarks 当用户的用户名或头像变更，且该用户与当前用户存在聊天会话或互为好友时，此事件会被引发。 事件参数： Cacheable<TEntity, TId> 参数是可缓存用户被更新前的状态。如果缓存中存在此用户实体，那么该结构内包含该 SocketUser 用户被更新前的状态；否则，包含 ulong 用户 ID。 important 用户被更新前的状态无法通过 DownloadAsync() 方法下载。 Cacheable<TEntity, TId> 参数是可缓存用户被更新后的状态。如果缓存中存在此用户实体，那么该结构内包含该 SocketUser 用户被更新后的状态；否则，包含 ulong 用户 ID，以供按需下载实体。 UserVoiceStateUpdated 当服务器用户的语音状态发生变化时引发。 public event Func<Cacheable<SocketGuildUser, ulong>, SocketVoiceState, SocketVoiceState, Task> UserVoiceStateUpdated Event Type Func<Cacheable<SocketGuildUser, ulong>, SocketVoiceState, SocketVoiceState, Task> Remarks 事件参数： Cacheable<TEntity, TId> 参数是其语音状态发生变化的可缓存服务器用户。如果缓存中存在此服务器用户实体，那么该结构内包含该 SocketGuildUser 服务器用户；否则，包含 ulong 用户 ID，以供按需下载实体。 SocketVoiceState 参数是用户语音状态变更前的状态。 SocketVoiceState 参数是用户语音状态变更后的状态。"
  },
  "api/Kook.WebSocket.GatewayReconnectException.html": {
    "href": "api/Kook.WebSocket.GatewayReconnectException.html",
    "title": "Class GatewayReconnectException | Kook.Net 文档",
    "keywords": "Class GatewayReconnectException Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 当网关客户端被请求重新连接时引发的异常。 public class GatewayReconnectException : Exception, ISerializable Inheritance object Exception GatewayReconnectException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors GatewayReconnectException(string) 初始化一个带有重新连接消息的 GatewayReconnectException 类的新实例。 public GatewayReconnectException(string message) Parameters message string 包含要求客户端重新连接原因的消息。"
  },
  "api/Kook.WebSocket.ISocketAudioChannel.html": {
    "href": "api/Kook.WebSocket.ISocketAudioChannel.html",
    "title": "Interface ISocketAudioChannel | Kook.Net 文档",
    "keywords": "Interface ISocketAudioChannel Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的音频频道。 public interface ISocketAudioChannel : IAudioChannel, IChannel, IEntity<ulong> Inherited Members IAudioChannel.AudioClient IAudioChannel.IsVoiceRegionOverwritten IAudioChannel.VoiceRegion IAudioChannel.ServerUrl IAudioChannel.ConnectAsync(bool, bool, string) IAudioChannel.DisconnectAsync() IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel)"
  },
  "api/Kook.WebSocket.ISocketMessageChannel.html": {
    "href": "api/Kook.WebSocket.ISocketMessageChannel.html",
    "title": "Interface ISocketMessageChannel | Kook.Net 文档",
    "keywords": "Interface ISocketMessageChannel Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的消息频道，可以用来发送和接收消息。 public interface ISocketMessageChannel : IMessageChannel, IChannel, IEntity<ulong> Inherited Members IMessageChannel.SendFileAsync(string, string, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(Stream, string, AttachmentType, IQuote, IUser, RequestOptions) IMessageChannel.SendFileAsync(FileAttachment, IQuote, IUser, RequestOptions) IMessageChannel.SendTextAsync(string, IQuote, IUser, RequestOptions) IMessageChannel.SendCardAsync(ICard, IQuote, IUser, RequestOptions) IMessageChannel.SendCardsAsync(IEnumerable<ICard>, IQuote, IUser, RequestOptions) IMessageChannel.GetMessageAsync(Guid, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(Guid, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions) IMessageChannel.DeleteMessageAsync(Guid, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) IMessageChannel.ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions) IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties CachedMessages 获取此频道缓存的所有消息。 IReadOnlyCollection<SocketMessage> CachedMessages { get; } Property Value IReadOnlyCollection<SocketMessage> Remarks warning 要想通过此属性获取缓存的消息，需要启用缓存功能，否则此属性将始终返回空集合。缓存功能是默认禁用的，要想启用缓存，请参考 MessageCacheSize。 此属性从本地的内存缓存中获取消息实体，不会向 KOOK 发送额外的 API 请求。所获取的消息也可能是已经被删除的消息。 Methods GetCachedMessage(Guid) 获取此频道缓存的消息。 SocketMessage? GetCachedMessage(Guid id) Parameters id Guid 消息的 ID。 Returns SocketMessage 如果获取到了缓存的消息，则返回该消息实体；否则返回 null。 Remarks warning 要想通过此方法获取缓存的消息，需要启用缓存功能，否则此方法将始终返回 null。缓存功能是默认禁用的，要想启用缓存，请参考 MessageCacheSize。 此方法从本地的内存缓存中获取消息实体，不会向 KOOK 发送额外的 API 请求。所获取的消息也可能是已经被删除的消息。 GetCachedMessages(IMessage, Direction, int) 获取此频道缓存的多条消息。 IReadOnlyCollection<SocketMessage> GetCachedMessages(IMessage referenceMessage, Direction dir, int limit = 50) Parameters referenceMessage IMessage 要开始获取消息的参考位置的消息。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 Returns IReadOnlyCollection<SocketMessage> 获取到的多条缓存消息。 Remarks warning 要想通过此方法获取缓存的消息，需要启用缓存功能，否则此方法将始终返回空集合。缓存功能是默认禁用的，要想启用缓存，请参考 MessageCacheSize。 此方法从本地的内存缓存中获取消息实体，不会向 KOOK 发送额外的 API 请求。所获取的消息也可能是已经被删除的消息。 GetCachedMessages(Guid, Direction, int) 获取此频道缓存的多条消息。 IReadOnlyCollection<SocketMessage> GetCachedMessages(Guid referenceMessageId, Direction dir, int limit = 50) Parameters referenceMessageId Guid 要开始获取消息的参考位置的消息的 ID。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 Returns IReadOnlyCollection<SocketMessage> 获取到的多条缓存消息。 Remarks warning 要想通过此方法获取缓存的消息，需要启用缓存功能，否则此方法将始终返回空集合。缓存功能是默认禁用的，要想启用缓存，请参考 MessageCacheSize。 此方法从本地的内存缓存中获取消息实体，不会向 KOOK 发送额外的 API 请求。所获取的消息也可能是已经被删除的消息。 GetCachedMessages(int) 获取此频道缓存的多条消息。 IReadOnlyCollection<SocketMessage> GetCachedMessages(int limit = 50) Parameters limit int 要获取的缓存消息的数量。 Returns IReadOnlyCollection<SocketMessage> 此频道缓存的所有消息。 Remarks 此重载将会从缓存中获取最新的指定数量的缓存消息实体。 warning 要想通过此方法获取缓存的消息，需要启用缓存功能，否则此方法将始终返回空集合。缓存功能是默认禁用的，要想启用缓存，请参考 MessageCacheSize。 此方法从本地的内存缓存中获取消息实体，不会向 KOOK 发送额外的 API 请求。所获取的消息也可能是已经被删除的消息。"
  },
  "api/Kook.WebSocket.ISocketPrivateChannel.html": {
    "href": "api/Kook.WebSocket.ISocketPrivateChannel.html",
    "title": "Interface ISocketPrivateChannel | Kook.Net 文档",
    "keywords": "Interface ISocketPrivateChannel Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的私有频道，只有特定的用户可以访问。 public interface ISocketPrivateChannel : IPrivateChannel, IChannel, IEntity<ulong> Inherited Members IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties Recipients 获取可以访问此频道的所有用户。 IReadOnlyCollection<SocketUser> Recipients { get; } Property Value IReadOnlyCollection<SocketUser>"
  },
  "api/Kook.WebSocket.KookSocketClient.html": {
    "href": "api/Kook.WebSocket.KookSocketClient.html",
    "title": "Class KookSocketClient | Kook.Net 文档",
    "keywords": "Class KookSocketClient Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的 KOOK 客户端。 public class KookSocketClient : BaseSocketClient, IKookClient, IDisposable Inheritance object BaseKookClient BaseSocketClient KookSocketClient Implements IKookClient IDisposable Derived KookWebhookClient Inherited Members BaseSocketClient.BaseConfig BaseSocketClient.CurrentUser BaseSocketClient.ChannelCreated BaseSocketClient.ChannelDestroyed BaseSocketClient.ChannelUpdated BaseSocketClient.ReactionAdded BaseSocketClient.ReactionRemoved BaseSocketClient.DirectReactionAdded BaseSocketClient.DirectReactionRemoved BaseSocketClient.MessageReceived BaseSocketClient.MessageDeleted BaseSocketClient.MessageUpdated BaseSocketClient.MessagePinned BaseSocketClient.MessageUnpinned BaseSocketClient.DirectMessageReceived BaseSocketClient.DirectMessageDeleted BaseSocketClient.DirectMessageUpdated BaseSocketClient.UserJoined BaseSocketClient.UserLeft BaseSocketClient.UserBanned BaseSocketClient.UserUnbanned BaseSocketClient.UserUpdated BaseSocketClient.CurrentUserUpdated BaseSocketClient.GuildMemberUpdated BaseSocketClient.GuildMemberOnline BaseSocketClient.GuildMemberOffline BaseSocketClient.UserVoiceStateUpdated BaseSocketClient.UserConnected BaseSocketClient.UserDisconnected BaseSocketClient.RoleCreated BaseSocketClient.RoleDeleted BaseSocketClient.RoleUpdated BaseSocketClient.EmoteCreated BaseSocketClient.EmoteDeleted BaseSocketClient.EmoteUpdated BaseSocketClient.JoinedGuild BaseSocketClient.LeftGuild BaseSocketClient.GuildUpdated BaseSocketClient.GuildAvailable BaseSocketClient.GuildUnavailable BaseSocketClient.MessageButtonClicked BaseSocketClient.DirectMessageButtonClicked BaseKookClient.Log BaseKookClient.LoggedIn BaseKookClient.LoggedOut BaseKookClient.SentRequest BaseKookClient.LoginState BaseKookClient.TokenType BaseKookClient.Dispose() BaseKookClient.LoginAsync(TokenType, string, bool) BaseKookClient.LogoutAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors KookSocketClient() 初始化一个 KookSocketClient 类的新实例。 public KookSocketClient() KookSocketClient(KookSocketConfig) 初始化一个 KookSocketClient 类的新实例。 public KookSocketClient(KookSocketConfig config) Parameters config KookSocketConfig 用于配置此客户端的配置对象。 Properties ConnectionState 获取当前连接的状态。 public override ConnectionState ConnectionState { get; } Property Value ConnectionState DMChannels 获取在此会话中存在的所有私聊频道。 public IReadOnlyCollection<SocketDMChannel> DMChannels { get; } Property Value IReadOnlyCollection<SocketDMChannel> Remarks warning 此属性不会包含在当前会话之外创建的私聊会话的私聊频道实体，如果此 Bot 刚刚启动，此属性可能会返回一个空集合。 Guilds 获取当前用户所在的所有服务器。 public override IReadOnlyCollection<SocketGuild> Guilds { get; } Property Value IReadOnlyCollection<SocketGuild> Latency 获取到网关服务器的往返延迟估计值（以毫秒为单位）。 public override int Latency { get; protected set; } Property Value int Remarks 此往返估计值源于心跳包的延迟，不代表诸如发送消息等操作的真实延迟。 Rest 获取一个与此客户端共享状态的仅限于 REST 的客户端。 public override KookSocketRestClient Rest { get; } Property Value KookSocketRestClient Methods DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>?, RequestOptions?) 下载全部或指定服务器的服务器助力信息到缓存中。 public override Task DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>? guilds = null, RequestOptions? options = null) Parameters guilds IEnumerable<IGuild> 要下载服务器助力信息的服务器。如果为 null，则下载所有可用的服务器。 options RequestOptions 发送请求时要使用的选项。 Returns Task Remarks 对于要下载服务器助力信息的服务器，当前用户在该服务器中必须具有 ManageGuild 权限。 DownloadUsersAsync(IEnumerable<IGuild>?, RequestOptions?) 下载全部或指定服务器的用户到缓存中。 public override Task DownloadUsersAsync(IEnumerable<IGuild>? guilds = null, RequestOptions? options = null) Parameters guilds IEnumerable<IGuild> 要下载用户的服务器。如果为 null，则下载所有可用的服务器。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步下载操作的任务。 DownloadVoiceStatesAsync(IEnumerable<IGuild>?, RequestOptions?) 下载全部或指定服务器的语音状态到缓存中。 public override Task DownloadVoiceStatesAsync(IEnumerable<IGuild>? guilds = null, RequestOptions? options = null) Parameters guilds IEnumerable<IGuild> 要下载语音状态的服务器。如果为 null，则下载所有可用的服务器。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步下载操作的任务。 GetChannel(ulong) 获取一个服务器频道。 public override SocketChannel? GetChannel(ulong id) Parameters id ulong 要获取的频道的 ID。 Returns SocketChannel 与指定的 id 关联的频道；如果未找到，则返回 null。 GetChannelAsync(ulong, RequestOptions?) 获取一个频道。 public Task<IChannel> GetChannelAsync(ulong id, RequestOptions? options = null) Parameters id ulong 频道的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IChannel> 一个表示异步获取操作的任务。任务的结果是具有指定 ID 的频道；若指定 ID 的频道不存在，则为 null。 GetDMChannel(Guid) 获取一个私聊频道。 public override SocketDMChannel? GetDMChannel(Guid chatCode) Parameters chatCode Guid 私聊频道的聊天代码。 Returns SocketDMChannel 具有指定聊天代码的私聊频道；如果未找到，则返回 null。 GetDMChannel(ulong) 获取一个私聊频道。 public override SocketDMChannel? GetDMChannel(ulong userId) Parameters userId ulong 私聊频道中另一位用户的 ID。 Returns SocketDMChannel 另一位用户具有指定用户 ID 的私聊频道；如果未找到，则返回 null。 GetDMChannelAsync(Guid, RequestOptions?) 获取一个私聊频道。 public Task<IDMChannel> GetDMChannelAsync(Guid chatCode, RequestOptions? options = null) Parameters chatCode Guid 私聊频道的聊天代码。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IDMChannel> 一个表示异步获取操作的任务。任务的结果是具有指定聊天代码的私聊频道；若指定聊天代码的私聊频道不存在，则为 null。 GetDMChannelsAsync(RequestOptions?) 获取当前会话中已创建的所有私聊频道。 public Task<IReadOnlyCollection<IDMChannel>> GetDMChannelsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IDMChannel>> 一个表示异步获取操作的任务。任务的结果是当前会话中已创建的所有私聊频道。 Remarks warning 此方法不会返回当前会话之外已创建的私聊频道。如果客户端刚刚启动，这可能会返回一个空集合。 GetGuild(ulong) 获取一个服务器。 public override SocketGuild? GetGuild(ulong id) Parameters id ulong 要获取的服务器的 ID。 Returns SocketGuild 与指定的 id 关联的服务器；如果未找到，则返回 null。 GetUser(string, string) 获取用户。 public override SocketUser? GetUser(string username, string identifyNumber) Parameters username string 用户的名称。 identifyNumber string 用户的识别号。 Returns SocketUser 与指定的名称和识别号关联的用户；如果未找到，则返回 null。 Remarks 此方法可能返回 null，因为此方法仅会返回网关缓存中存在的用户，如果在当前 Bot 登录会话中，要获取的用户未引发过任何事件，那么该用户实体则不会存在于缓存中。 GetUser(ulong) 获取用户。 public override SocketUser? GetUser(ulong id) Parameters id ulong 要获取的用户的 ID。 Returns SocketUser 与指定的 id 关联的用户；如果未找到，则返回 null。 Remarks 此方法可能返回 null，因为此方法仅会返回网关缓存中存在的用户，如果在当前 Bot 登录会话中，要获取的用户未引发过任何事件，那么该用户实体则不会存在于缓存中。 GetUserAsync(ulong, RequestOptions?) 获取一个用户。 public Task<IUser> GetUserAsync(ulong id, RequestOptions? options = null) Parameters id ulong 用户的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IUser> 一个表示异步获取操作的任务。任务的结果是具有指定 ID 的用户；若指定 ID 的用户不存在，则为 null。 StartAsync() 启动客户端与 KOOK 之间的连接。 public override Task StartAsync() Returns Task 一个表示异步启动操作的任务。 Remarks 当前方法会初始化客户端与 KOOK 之间的连接。 important 此方法会在调用后立即返回，因为它会在另一个线程上初始化连接。 StopAsync() 停止客户端与 KOOK 之间的连接。 public override Task StopAsync() Returns Task 一个表示异步停止操作的任务。 Events Connected 当连接到 KOOK 网关时引发。 public event Func<Task> Connected Event Type Func<Task> Disconnected 当与 KOOK 网关断开连接时引发。 public event Func<Exception, Task> Disconnected Event Type Func<Exception, Task> LatencyUpdated 当网关延迟已更新时引发。 public event Func<int, int, Task> LatencyUpdated Event Type Func<int, int, Task> Remarks 事件参数： int 参数是更新前的延迟（毫秒）。 int 参数是更新后的延迟（毫秒）。 Ready 当此 Bot 准备就绪以供用户代码访问时引发。 public event Func<Task> Ready Event Type Func<Task> Remarks 此事件引发的时机可由 StartupCacheFetchMode 配置指定。"
  },
  "api/Kook.WebSocket.KookSocketConfig.html": {
    "href": "api/Kook.WebSocket.KookSocketConfig.html",
    "title": "Class KookSocketConfig | Kook.Net 文档",
    "keywords": "Class KookSocketConfig Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个用于 KookSocketClient 的配置类。 public class KookSocketConfig : KookRestConfig Inheritance object KookConfig KookRestConfig KookSocketConfig Derived KookWebhookConfig Inherited Members KookRestConfig.RestClientProvider KookConfig.APIVersion KookConfig.VoiceAPIVersion KookConfig.Version KookConfig.UserAgent KookConfig.AcceptLanguage KookConfig.APIUrl KookConfig.DefaultRequestTimeout KookConfig.MaxMessageSize KookConfig.MaxUsersPerBatch KookConfig.MaxMessagesPerBatch KookConfig.MaxItemsPerBatchByDefault KookConfig.MinNicknameSize KookConfig.MaxNicknameSize KookConfig.MinIntimacyScore KookConfig.MaxIntimacyScore KookConfig.BoostPackDuration KookConfig.DefaultRetryMode KookConfig.DefaultRatelimitCallback KookConfig.LogLevel KookConfig.FormatUsersInBidirectionalUnicode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples 以下代码启用了消息缓存，并配置客户端在服务器可用时始终下载用户。 var config = new KookSocketConfig { AlwaysDownloadUsers = true, MessageCacheSize = 100 }; var client = new KookSocketClient(config); Remarks 此配置基于 KookRestConfig，在与 REST 有关的配置的基础上，定义了有关网关的配置。 Constructors KookSocketConfig() 初始化一个 KookSocketConfig 类的新实例。 public KookSocketConfig() Fields GatewayEncoding 获取网关使用的数据格式。 public const string GatewayEncoding = \"json\" Field Value string RtcpIntervalMilliseconds 获取语音客户端 RTP 连接中发送 RTCP 数据报的时间间隔（毫秒）。 public const int RtcpIntervalMilliseconds = 5000 Field Value int Properties AlwaysDownloadBoostSubscriptions 获取或设置是否在服务器可用时始终下载所有服务器的所有服务器助力信息。 public bool AlwaysDownloadBoostSubscriptions { get; set; } Property Value bool Remarks note 当此属性为 true 时，客户端将在启动时下载所有服务器的所有服务器助力信息，并在引发 GuildUpdated 事件时，当 BoostSubscriptionCount 发生更改时，也会重新下载所有服务器的所有服务器助力信息。 对于大型服务器，启用此选项可能会导致性能问题。调用 DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>?, RequestOptions?) 可以按需下载服务器的所有服务器助力信息。 AlwaysDownloadUsers 获取或设置是否在服务器可用时始终下载所有用户。 public bool AlwaysDownloadUsers { get; set; } Property Value bool Remarks note 对于大型服务器，启用此选项可能会导致性能问题。调用 DownloadUsersAsync(IEnumerable<IGuild>?, RequestOptions?) 可以按需下载服务器用户列表。 AlwaysDownloadVoiceStates 获取或设置是否在服务器可用时始终下载所有语音状态。 public bool AlwaysDownloadVoiceStates { get; set; } Property Value bool Remarks note 对于大型服务器，启用此选项可能会导致性能问题。调用 DownloadVoiceStatesAsync(IEnumerable<IGuild>?, RequestOptions?) 可以按需下载服务器语音状态。 AudioClientIdleTimeout 获取或设置音频客户端被视为空闲的超时时间间隔（毫秒）。 public int AudioClientIdleTimeout { get; set; } Property Value int AutoUpdateChannelPositions 获取或设置是否在网关发布 sort_channel 事件时通过 API 更新服务器频道。 public bool AutoUpdateChannelPositions { get; set; } Property Value bool AutoUpdateRolePositions 获取或设置是否在引发 GuildUpdated 事件时通过 API 更新服务器角色位置。 public bool AutoUpdateRolePositions { get; set; } Property Value bool ConnectionTimeout 获取或设置连接到网关时的超时时间间隔（毫秒）。 public int ConnectionTimeout { get; set; } Property Value int GatewayHost 获取或设置要连接的网关地址。如果为 null，则客户端将会通过 API 请求获取网关地址。 public string? GatewayHost { get; set; } Property Value string HandlerTimeout 获取或设置阻塞网关线程的事件处理程序的超时时间间隔（毫秒），超过此时间间隔的阻塞网关线程的事件处理程序会被日志记录警告。将此属性设置为 null 将禁用此检查。 public int? HandlerTimeout { get; set; } Property Value int? HeartbeatIntervalMilliseconds 获取网关发送心跳包的时间间隔（毫秒）。 public int HeartbeatIntervalMilliseconds { get; } Property Value int JoinedGuildDataFetchingRetryDelay 获取或设置获取新加入服务器数据每次重试之前所等待的时间间隔（毫秒）。 public int JoinedGuildDataFetchingRetryDelay { get; set; } Property Value int Exceptions ArgumentException 时间间隔不能小于 0。 See Also MaxJoinedGuildDataFetchingRetryTimes LargeNumberOfGuildsThreshold 获取或设置被视为加入大量服务器的阈值数量。 public uint LargeNumberOfGuildsThreshold { get; set; } Property Value uint See Also Auto MaxJoinedGuildDataFetchingRetryTimes 获取或设置获取新加入服务器数据的最大重试次数。 public int MaxJoinedGuildDataFetchingRetryTimes { get; set; } Property Value int Remarks KOOK API 无法立即返回刚刚新加入的服务器数据，因此此属性用于控制获取加入的服务器数据的最大重试次数。 每次重试前都会等待 JoinedGuildDataFetchingRetryDelay 毫秒。将当前属性设置为 0 或负值以禁用重试。 MessageCacheSize 获取或设置应在缓存中保留的每个频道的消息数量。将此属性设置为零将完全禁用消息缓存。 public int MessageCacheSize { get; set; } Property Value int MessageQueueProvider 获取或设置用于创建消息队列的委托。 public MessageQueueProvider MessageQueueProvider { get; set; } Property Value MessageQueueProvider SmallNumberOfGuildsThreshold 获取或设置被视为加入少量服务器的阈值数量。 public uint SmallNumberOfGuildsThreshold { get; set; } Property Value uint See Also Auto StartupCacheFetchMode 获取或设置在启动时缓存获取模式。 public StartupCacheFetchMode StartupCacheFetchMode { get; set; } Property Value StartupCacheFetchMode Remarks 此属性用于指定客户端在启动时如何缓存基础数据，并影响 Ready 事件的引发时机。 缓存基础数据包括服务器基本信息、频道、角色、频道权限重写、当前用户在服务器内的昵称。 UdpSocketProvider 获取或设置用于创建 UDP 客户端的委托。 public UdpSocketProvider UdpSocketProvider { get; set; } Property Value UdpSocketProvider WebSocketProvider 获取或设置用于创建 WebSocket 客户端的委托。 public WebSocketProvider WebSocketProvider { get; set; } Property Value WebSocketProvider"
  },
  "api/Kook.WebSocket.KookSocketRestClient.html": {
    "href": "api/Kook.WebSocket.KookSocketRestClient.html",
    "title": "Class KookSocketRestClient | Kook.Net 文档",
    "keywords": "Class KookSocketRestClient Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个用于网关客户端内的 REST 客户端。 public class KookSocketRestClient : KookRestClient, IKookClient, IDisposable Inheritance object BaseKookClient KookRestClient KookSocketRestClient Implements IKookClient IDisposable Inherited Members KookRestClient.CurrentUser KookRestClient.GetGuildAsync(ulong, RequestOptions) KookRestClient.GetGuildsAsync(RequestOptions) KookRestClient.GetChannelAsync(ulong, RequestOptions) KookRestClient.GetDMChannelAsync(Guid, RequestOptions) KookRestClient.GetDMChannelsAsync(RequestOptions) KookRestClient.AddRoleAsync(ulong, ulong, uint, RequestOptions) KookRestClient.RemoveRoleAsync(ulong, ulong, uint, RequestOptions) KookRestClient.GetUserAsync(ulong, RequestOptions) KookRestClient.GetGuildUserAsync(ulong, ulong, RequestOptions) KookRestClient.GetFriendsAsync(RequestOptions) KookRestClient.GetFriendRequestsAsync(RequestOptions) KookRestClient.GetBlockedUsersAsync(RequestOptions) KookRestClient.AddReactionAsync(Guid, IEmote, RequestOptions) KookRestClient.RemoveReactionAsync(Guid, ulong, IEmote, RequestOptions) KookRestClient.AddDirectMessageReactionAsync(Guid, IEmote, RequestOptions) KookRestClient.RemoveDirectMessageReactionAsync(Guid, ulong, IEmote, RequestOptions) KookRestClient.CreateAssetAsync(string, string, RequestOptions) KookRestClient.CreateAssetAsync(Stream, string, RequestOptions) KookRestClient.GetGamesAsync(GameCreationSource?, RequestOptions) KookRestClient.CreateGameAsync(string, string, string, RequestOptions) BaseKookClient.Log BaseKookClient.LoggedIn BaseKookClient.LoggedOut BaseKookClient.SentRequest BaseKookClient.LoginState BaseKookClient.TokenType BaseKookClient.Dispose() BaseKookClient.ConnectionState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods KookRestClientExperimentalExtensions.GetAdminGuildsAsync(KookRestClient, RequestOptions?) KookRestClientExperimentalExtensions.ValidateCardAsync(KookRestClient, ICard, RequestOptions?) KookRestClientExperimentalExtensions.ValidateCardsAsync(KookRestClient, IEnumerable<ICard>, RequestOptions?) KookRestClientExperimentalExtensions.ValidateCardsAsync(KookRestClient, string, RequestOptions?) Methods LoginAsync(TokenType, string, bool) 登录到 KOOK API。 public Task LoginAsync(TokenType tokenType, string token, bool validateToken = true) Parameters tokenType TokenType 要使用的令牌类型。 token string 要使用的令牌。 validateToken bool 是否验证令牌。 Returns Task 一个表示异步登录操作的任务。 Remarks 验证令牌的操作是通过 ValidateToken(TokenType, string) 方法完成的。 此方法用于向当前客户端设置后续 API 请求的身份验证信息，获取并设置当前所登录用户的信息。 Exceptions NotSupportedException 网关客户端内的 REST 客户端无法进行登录或退出登录。 LogoutAsync() 从 KOOK API 退出登录。 public Task LogoutAsync() Returns Task 一个表示异步退出登录操作的任务。 Remarks 此方法用于清除当前客户端的身份验证信息及所缓存的当前所登录的用户信息。 Exceptions NotSupportedException 网关客户端内的 REST 客户端无法进行登录或退出登录。"
  },
  "api/Kook.WebSocket.LiveStreamStatus.html": {
    "href": "api/Kook.WebSocket.LiveStreamStatus.html",
    "title": "Struct LiveStreamStatus | Kook.Net 文档",
    "keywords": "Struct LiveStreamStatus Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个直播状态。 public struct LiveStreamStatus Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors LiveStreamStatus() 初始化 LiveStreamStatus 结构的新实例。 public LiveStreamStatus() Properties AudienceCount 获取此直播的观众人数。 public readonly int AudienceCount { get; } Property Value int AudienceLimit 获取此直播间可容纳的最大观众人数。 public readonly int AudienceLimit { get; } Property Value int Color // TODO: To be documented. public readonly AlphaColor Color { get; } Property Value AlphaColor CoverThumbnail 获取此直播的封面缩略图。 public readonly string? CoverThumbnail { get; } Property Value string FrameRate 获取此直播的帧率。 public readonly int? FrameRate { get; } Property Value int? Image 获取此直播间图像的 URL。 public readonly string Image { get; } Property Value string IsLive 获取此直播是否正在进行。 public readonly bool IsLive { get; } Property Value bool Mode 获取直播间的模式。 public readonly int Mode { get; } Property Value int Resolution 获取此直播的分辨率。 public readonly int? Resolution { get; } Property Value int? StartTime 获取此直播的开始时间。 public readonly DateTimeOffset? StartTime { get; } Property Value DateTimeOffset? Tag 获取此直播的标签。 public readonly string Tag { get; } Property Value string VoiceChannel 获取用户当前所在的语音频道；如果不在任何频道中则为 null。 public readonly SocketVoiceChannel? VoiceChannel { get; } Property Value SocketVoiceChannel"
  },
  "api/Kook.WebSocket.SocketCategoryChannel.html": {
    "href": "api/Kook.WebSocket.SocketCategoryChannel.html",
    "title": "Class SocketCategoryChannel | Kook.Net 文档",
    "keywords": "Class SocketCategoryChannel Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的分组频道。 public class SocketCategoryChannel : SocketGuildChannel, IUpdateable, ICategoryChannel, IGuildChannel, IChannel, IEntity<ulong>, IDeletable Inheritance object SocketEntity<ulong> SocketChannel SocketGuildChannel SocketCategoryChannel Implements IUpdateable ICategoryChannel IGuildChannel IChannel IEntity<ulong> IDeletable Inherited Members SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Position SocketGuildChannel.Type SocketGuildChannel.CreatorId SocketGuildChannel.Creator SocketGuildChannel.RolePermissionOverwrites SocketGuildChannel.UserPermissionOverwrites SocketGuildChannel.UpdateAsync(RequestOptions) SocketGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) SocketGuildChannel.DeleteAsync(RequestOptions) SocketGuildChannel.GetPermissionOverwrite(IUser) SocketGuildChannel.GetPermissionOverwrite(IRole) SocketGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) SocketGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) SocketGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) SocketGuildChannel.ToString() SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties Channels 获取所有属于此分组频道的所有子频道。 public IReadOnlyCollection<SocketGuildChannel> Channels { get; } Property Value IReadOnlyCollection<SocketGuildChannel> Users 获取用户缓存列表中的可以访问此频道的所有用户。 public override IReadOnlyCollection<SocketGuildUser> Users { get; } Property Value IReadOnlyCollection<SocketGuildUser> Remarks 此属性仅会返回缓存中可以访问此频道的所有用户，如果未启用用户列表缓存，或者由于网关事件确实导致本地缓存不同步，此属性所返回的用户列表可能不准确。 Methods GetUser(ulong) 获取此频道中的一个服务器用户。 public override SocketGuildUser? GetUser(ulong id) Parameters id ulong 要获取的服务器用户的 ID。 Returns SocketGuildUser 如果找到了具有指定 ID 的服务器用户，则返回该用户；否则返回 null。"
  },
  "api/Kook.WebSocket.SocketChannel.html": {
    "href": "api/Kook.WebSocket.SocketChannel.html",
    "title": "Class SocketChannel | Kook.Net 文档",
    "keywords": "Class SocketChannel Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的频道。 public abstract class SocketChannel : SocketEntity<ulong>, IChannel, IEntity<ulong>, IUpdateable Inheritance object SocketEntity<ulong> SocketChannel Implements IChannel IEntity<ulong> IUpdateable Derived SocketDMChannel SocketGuildChannel Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties Users 获取用户缓存列表中的可以访问此频道的所有用户。 public IReadOnlyCollection<SocketUser> Users { get; } Property Value IReadOnlyCollection<SocketUser> Remarks 此属性仅会返回缓存中可以访问此频道的所有用户，如果未启用用户列表缓存，或者由于网关事件确实导致本地缓存不同步，此属性所返回的用户列表可能不准确。 Methods GetUser(ulong) 获取此频道中的一个用户。 public SocketUser? GetUser(ulong id) Parameters id ulong 要获取的用户的 ID。 Returns SocketUser 如果找到了具有指定 ID 的用户，则返回该用户；否则返回 null。 UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 public abstract Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 KOOK REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 KOOK 服务端的数据。"
  },
  "api/Kook.WebSocket.SocketDMChannel.html": {
    "href": "api/Kook.WebSocket.SocketDMChannel.html",
    "title": "Class SocketDMChannel | Kook.Net 文档",
    "keywords": "Class SocketDMChannel Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的私聊频道。 public class SocketDMChannel : SocketChannel, IUpdateable, IDMChannel, IEntity<Guid>, ISocketPrivateChannel, IPrivateChannel, ISocketMessageChannel, IMessageChannel, IChannel, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketChannel SocketDMChannel Implements IUpdateable IDMChannel IEntity<Guid> ISocketPrivateChannel IPrivateChannel ISocketMessageChannel IMessageChannel IChannel IEntity<ulong> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties CachedMessages 获取此频道缓存的所有消息。 public IReadOnlyCollection<SocketMessage> CachedMessages { get; } Property Value IReadOnlyCollection<SocketMessage> Remarks warning 要想通过此属性获取缓存的消息，需要启用缓存功能，否则此属性将始终返回空集合。缓存功能是默认禁用的，要想启用缓存，请参考 MessageCacheSize。 此属性从本地的内存缓存中获取消息实体，不会向 KOOK 发送额外的 API 请求。所获取的消息也可能是已经被删除的消息。 ChatCode 获取此私聊频道的聊天代码。 public Guid ChatCode { get; } Property Value Guid Remarks 此属性的值与 Id 相同。 Id 获取此私聊频道的唯一标识符。 public Guid Id { get; } Property Value Guid Remarks 此属性的值与 ChatCode 相同。 Recipient 获取参与到此私聊频道的另外一位用户。 public SocketUser Recipient { get; } Property Value SocketUser Users 获取用户缓存列表中的可以访问此频道的所有用户。 public IReadOnlyCollection<SocketUser> Users { get; } Property Value IReadOnlyCollection<SocketUser> Remarks 此属性仅会返回缓存中可以访问此频道的所有用户，如果未启用用户列表缓存，或者由于网关事件确实导致本地缓存不同步，此属性所返回的用户列表可能不准确。 Methods CloseAsync(RequestOptions?) 关闭此私聊频道，将其从您的频道列表中移除。 public Task CloseAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步关闭操作的任务。 DeleteMessageAsync(IMessage, RequestOptions?) 删除一条消息. public Task DeleteMessageAsync(IMessage message, RequestOptions? options = null) Parameters message IMessage 要删除的消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步删除操作的任务。 DeleteMessageAsync(Guid, RequestOptions?) 删除一条消息。 public Task DeleteMessageAsync(Guid messageId, RequestOptions? options = null) Parameters messageId Guid 要删除的消息的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步删除操作的任务。 GetCachedMessage(Guid) 获取此频道缓存的消息。 public SocketMessage? GetCachedMessage(Guid id) Parameters id Guid 消息的 ID。 Returns SocketMessage 如果获取到了缓存的消息，则返回该消息实体；否则返回 null。 Remarks warning 要想通过此方法获取缓存的消息，需要启用缓存功能，否则此方法将始终返回 null。缓存功能是默认禁用的，要想启用缓存，请参考 MessageCacheSize。 此方法从本地的内存缓存中获取消息实体，不会向 KOOK 发送额外的 API 请求。所获取的消息也可能是已经被删除的消息。 GetCachedMessages(IMessage, Direction, int) 获取此频道缓存的多条消息。 public IReadOnlyCollection<SocketMessage> GetCachedMessages(IMessage referenceMessage, Direction dir, int limit = 50) Parameters referenceMessage IMessage 要开始获取消息的参考位置的消息。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 Returns IReadOnlyCollection<SocketMessage> 获取到的多条缓存消息。 Remarks warning 要想通过此方法获取缓存的消息，需要启用缓存功能，否则此方法将始终返回空集合。缓存功能是默认禁用的，要想启用缓存，请参考 MessageCacheSize。 此方法从本地的内存缓存中获取消息实体，不会向 KOOK 发送额外的 API 请求。所获取的消息也可能是已经被删除的消息。 GetCachedMessages(Guid, Direction, int) 获取此频道缓存的多条消息。 public IReadOnlyCollection<SocketMessage> GetCachedMessages(Guid referenceMessageId, Direction dir, int limit = 50) Parameters referenceMessageId Guid 要开始获取消息的参考位置的消息的 ID。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 Returns IReadOnlyCollection<SocketMessage> 获取到的多条缓存消息。 Remarks warning 要想通过此方法获取缓存的消息，需要启用缓存功能，否则此方法将始终返回空集合。缓存功能是默认禁用的，要想启用缓存，请参考 MessageCacheSize。 此方法从本地的内存缓存中获取消息实体，不会向 KOOK 发送额外的 API 请求。所获取的消息也可能是已经被删除的消息。 GetCachedMessages(int) 获取此频道缓存的多条消息。 public IReadOnlyCollection<SocketMessage> GetCachedMessages(int limit = 50) Parameters limit int 要获取的缓存消息的数量。 Returns IReadOnlyCollection<SocketMessage> 此频道缓存的所有消息。 Remarks 此重载将会从缓存中获取最新的指定数量的缓存消息实体。 warning 要想通过此方法获取缓存的消息，需要启用缓存功能，否则此方法将始终返回空集合。缓存功能是默认禁用的，要想启用缓存，请参考 MessageCacheSize。 此方法从本地的内存缓存中获取消息实体，不会向 KOOK 发送额外的 API 请求。所获取的消息也可能是已经被删除的消息。 GetMessageAsync(Guid, RequestOptions?) 从此消息频道获取一条消息。 public Task<IMessage> GetMessageAsync(Guid id, RequestOptions? options = null) Parameters id Guid 消息的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IMessage> 一个表示异步获取操作的任务。任务结果包含检索到的消息；如果未找到具有指定 ID 的消息，则返回 null。 GetMessagesAsync(IMessage, Direction, int, RequestOptions?) 获取此消息频道中的一些消息。 public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessage IMessage 要开始获取消息的参考位置的消息。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 GetMessagesAsync(Guid, Direction, int, RequestOptions?) 获取此消息频道中的一些消息。 public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessageId Guid 要开始获取消息的参考位置的消息的 ID。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 GetMessagesAsync(int, RequestOptions?) 获取此消息频道中的最新的一些消息。 public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(int limit = 50, RequestOptions? options = null) Parameters limit int 要获取的消息数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 GetUser(ulong) 获取此频道中的一个用户。 public SocketUser? GetUser(ulong id) Parameters id ulong 要获取的用户的 ID。 Returns SocketUser 如果找到了具有指定 ID 的用户，则返回该用户；否则返回 null。 ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions?) 修改一条消息。 public Task ModifyMessageAsync(Guid messageId, Action<MessageProperties> func, RequestOptions? options = null) Parameters messageId Guid 要修改的消息的 ID。 func Action<MessageProperties> 一个包含修改消息属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 See Also MessageProperties SendCardAsync(ICard, IQuote?, RequestOptions?) 发送卡片消息到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendCardAsync(ICard card, IQuote? quote = null, RequestOptions? options = null) Parameters card ICard 要发送的卡片。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendCardsAsync(IEnumerable<ICard>, IQuote?, RequestOptions?) 发送卡片消息到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(IEnumerable<ICard> cards, IQuote? quote = null, RequestOptions? options = null) Parameters cards IEnumerable<ICard> 要发送的卡片。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendFileAsync(FileAttachment, IQuote?, RequestOptions?) 发送文件到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(FileAttachment attachment, IQuote? quote = null, RequestOptions? options = null) Parameters attachment FileAttachment 文件的附件信息。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendFileAsync(Stream, string, AttachmentType, IQuote?, RequestOptions?) 发送文件到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(Stream stream, string filename, AttachmentType type = AttachmentType.File, IQuote? quote = null, RequestOptions? options = null) Parameters stream Stream 文件的流。 filename string 文件名。 type AttachmentType 文件的媒体类型。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendFileAsync(string, string?, AttachmentType, IQuote?, RequestOptions?) 发送文件到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(string path, string? filename = null, AttachmentType type = AttachmentType.File, IQuote? quote = null, RequestOptions? options = null) Parameters path string 文件的路径。 filename string 文件名。 type AttachmentType 文件的媒体类型。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendTextAsync(string, IQuote?, RequestOptions?) 发送文本消息到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendTextAsync(string text, IQuote? quote = null, RequestOptions? options = null) Parameters text string 要发送的文本。 quote IQuote 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 ToString() 获取此参与到此私聊频道的另外一位用户的包含 @ 前缀的用户名及识别号格式化字符串。 public override string ToString() Returns string 一个表示此私聊频道的格式化字符串。 See Also UsernameAndIdentifyNumber(IUser, bool) UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 public override Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 KOOK REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 KOOK 服务端的数据。"
  },
  "api/Kook.WebSocket.SocketEntity-1.html": {
    "href": "api/Kook.WebSocket.SocketEntity-1.html",
    "title": "Class SocketEntity<TId> | Kook.Net 文档",
    "keywords": "Class SocketEntity<TId> Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的具有唯一标识符的实体。 public abstract class SocketEntity<TId> : IEntity<TId> where TId : IEquatable<TId> Type Parameters TId 唯一标识符的类型。 Inheritance object SocketEntity<TId> Implements IEntity<TId> Derived SocketChannel SocketGuild SocketInvite SocketMessage SocketRole SocketUser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id 获取此实体的唯一标识符。 public TId Id { get; } Property Value TId"
  },
  "api/Kook.WebSocket.SocketGuild.html": {
    "href": "api/Kook.WebSocket.SocketGuild.html",
    "title": "Class SocketGuild | Kook.Net 文档",
    "keywords": "Class SocketGuild Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的服务器。 public class SocketGuild : SocketEntity<ulong>, IGuild, IEntity<ulong>, IDisposable, IUpdateable Inheritance object SocketEntity<ulong> SocketGuild Implements IGuild IEntity<ulong> IDisposable IUpdateable Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties ActiveBoostSubscriptions 获取此服务器内的所有生效中的服务器助力信息。 public ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>> ActiveBoostSubscriptions { get; } Property Value ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>> Remarks warning 当 AlwaysDownloadBoostSubscriptions 为 true 时，Bot 启动时会自动下载所有服务器的所有助力信息。否则，此属性将为 null。调用 DownloadBoostSubscriptionsAsync(RequestOptions?) 也可以立即下载服务器的所有助力信息，下载完成后，此属性值将被设定。 网关不会发布有关此属性值变更的事件，此属性值可能并不准确。要获取准确的服务器订阅信息，请调用 GetActiveBoostSubscriptionsAsync(RequestOptions?)。 AudioClient 获取在此服务内的语音频道上建立的语音客户端。 [Obsolete(\"Use AudioClients instead.\")] public IAudioClient? AudioClient { get; } Property Value IAudioClient See Also AudioClient AudioClients 获取在此服务内的语音频道上建立的所有语音客户端。 public IReadOnlyDictionary<ulong, IAudioClient> AudioClients { get; } Property Value IReadOnlyDictionary<ulong, IAudioClient> See Also AudioClient AutoDeleteTime TODO: To be documented. public string? AutoDeleteTime { get; } Property Value string Banner 获取此服务器横幅图像的 URL。 public string Banner { get; } Property Value string BoostLevel 获取此服务器的服务器助力等级。 public BoostLevel BoostLevel { get; } Property Value BoostLevel BoostSubscriptionCount 获取此服务器的服务器助力包的数量。 public int BoostSubscriptionCount { get; } Property Value int BoostSubscriptions 获取此服务器内的所有服务器助力信息。 public ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>> BoostSubscriptions { get; } Property Value ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>> Remarks warning 当 AlwaysDownloadBoostSubscriptions 为 true 时，Bot 启动时会自动下载所有服务器的所有助力信息。否则，此属性将为 null。调用 DownloadBoostSubscriptionsAsync(RequestOptions?) 也可以立即下载服务器的所有助力信息，下载完成后，此属性值将被设定。 网关不会发布有关此属性值变更的事件，此属性值可能并不准确。要获取准确的服务器订阅信息，请调用 GetBoostSubscriptionsAsync(RequestOptions?)。 BufferBoostSubscriptionCount 获取此服务器来自拥有 BUFF 会员的用的服务器助力包的数量。 public int BufferBoostSubscriptionCount { get; } Property Value int CategoryChannels 获取此服务器中的所有分组频道。 public IReadOnlyCollection<SocketCategoryChannel> CategoryChannels { get; } Property Value IReadOnlyCollection<SocketCategoryChannel> Channels 获取此服务器的所有频道。 public IReadOnlyCollection<SocketGuildChannel> Channels { get; } Property Value IReadOnlyCollection<SocketGuildChannel> CurrentUser 获取当前登录的用户。 public SocketGuildUser? CurrentUser { get; } Property Value SocketGuildUser DefaultChannel 获取此服务器的默认文字频道。 public SocketTextChannel? DefaultChannel { get; } Property Value SocketTextChannel DefaultChannelId 获取默认文字频道的 ID。 public ulong? DefaultChannelId { get; } Property Value ulong? DownloadedMemberCount 获取此服务器内已缓存的成员数量。 public int DownloadedMemberCount { get; } Property Value int Emotes 获取此服务器的所有自定义表情。 public IReadOnlyCollection<GuildEmote> Emotes { get; } Property Value IReadOnlyCollection<GuildEmote> EveryoneRole 获取此服务器中的 @全体成员 全体成员角色。 public SocketRole EveryoneRole { get; } Property Value SocketRole Features 获取此服务器的所有特性。 public GuildFeatures Features { get; } Property Value GuildFeatures HasAllMembers 获取是否已下载此服务器的所有成员至缓存。 public bool? HasAllMembers { get; } Property Value bool? Remarks 当如法确定是否已下载此服务器的所有成员，或者服务器的成员数量未知时，此属性将返回 null。 Icon 获取此服务器图标的 URL。 public string Icon { get; } Property Value string IsAvailable 确定此服务器实体是否已准备就绪以供用户代码访问。 public bool IsAvailable { get; } Property Value bool Remarks note 此属性仅对基于网关连接的客户端有意义。 此属性为 true 表示，此服务器实体已完整缓存基础数据，并与网关同步。 缓存基础数据包括服务器基本信息、频道、角色、频道权限重写、当前用户在服务器内的昵称。 IsConnected 获取此服务器是否已连接至网关。 public bool IsConnected { get; } Property Value bool IsOpenEnabled 获取此服务器是否为公开服务器。 public bool IsOpenEnabled { get; } Property Value bool MaxBitrate 获取此服务器中语音频道的最高比特率。 public int MaxBitrate { get; } Property Value int Remarks 此限制取决于服务器的助力状态。 MaxUploadLimit 获取此服务器的文件上传限制，以字节为单位。 public ulong MaxUploadLimit { get; } Property Value ulong Remarks 此限制取决于服务器的助力状态。 MemberCount 获取此服务器的成员数。 public int? MemberCount { get; } Property Value int? Remarks tip 在 Users 属性上计数的结果为所缓存用户的数量， 如果缓存不完整，统计结果可能会与此属性值不一致。 warning 当 AlwaysDownloadUsers 为 true 时。 Bot 启动后会自动下载服务器的所有用户，并设定此属性值。否则，此属性将为 null。调用 DownloadUsersAsync(RequestOptions?) 也可以立即下载服务器的所有用户，下载完成后，此属性值将被设定。 Name 获取此服务器的名称。 public string Name { get; } Property Value string NotifyType 获取此服务器的默认通知类型。 public NotifyType NotifyType { get; } Property Value NotifyType OpenId 获取此服务器的公开 ID。 public uint? OpenId { get; } Property Value uint? Remarks 当 IsOpenEnabled 为 true 时，此属性应该返回一个有效的公开服务器 ID； 如果 IsOpenEnabled 为 false，则此属性应该返回 null。 Owner 获取此服务器的所有者。 public SocketGuildUser? Owner { get; } Property Value SocketGuildUser Remarks warning 此属性尝试在缓存的用户列表中获取具有其用户 ID 为 OwnerId 的用户。如果该用户不在缓存中，则此属性将返回 null。 OwnerId 获取此服务器所有者的用户 ID。 public ulong OwnerId { get; } Property Value ulong RecommendInfo 获取此服务器的推荐信息。 public RecommendInfo? RecommendInfo { get; } Property Value RecommendInfo Region 获取此服务器的默认语音服务器区域。 public string Region { get; } Property Value string Remarks 语音服务器区域是指语音服务器所在的地理位置，各个语音服务器区域由一个唯一的字符串表示。 可用语音服务器区域参考列表： 区域 ID 区域名称 chengdu 西南(成都) beijing 华北(北京) shanghai 华东(上海) shenzhen 华南(深圳) hk 亚太(香港) vnga 国际专线(助力专享) 此列表仅供参考。 Roles 获取此服务器的所有角色。 public IReadOnlyCollection<SocketRole> Roles { get; } Property Value IReadOnlyCollection<SocketRole> Remarks warning 由于 KOOK 不会通过网关发布有关服务器角色重新排序的事件，此属性值可能并不准确。 要确保获取准确的服务器角色排序信息，请在使用此属性之前调用 UpdateAsync(RequestOptions?)。 Status TODO: To be documented. public int Status { get; } Property Value int TextChannels 获取此服务器中所有具有文字聊天能力的频道。 public IReadOnlyCollection<SocketTextChannel> TextChannels { get; } Property Value IReadOnlyCollection<SocketTextChannel> Remarks 语音频道也是一种文字频道，此属性本意用于获取所有具有文字聊天能力的频道，通过此方法获取到的文字频道列表中也包含了语音频道。 如需获取频道的实际类型，请参考 GetChannelType(IChannel)。 Topic 获取此服务器的介绍。 public string Topic { get; } Property Value string Users 获取此服务器内缓存的所有用户。 public IReadOnlyCollection<SocketGuildUser> Users { get; } Property Value IReadOnlyCollection<SocketGuildUser> Remarks 要获取服务器的总成员数量，请访问 MemberCount。 VoiceChannels 获取此服务器中所有具有语音聊天能力的频道。 public IReadOnlyCollection<SocketVoiceChannel> VoiceChannels { get; } Property Value IReadOnlyCollection<SocketVoiceChannel> WelcomeChannel 获取此服务器的欢迎通知频道。 public SocketTextChannel? WelcomeChannel { get; } Property Value SocketTextChannel WelcomeChannelId 获取欢迎通知频道的 ID。 public ulong? WelcomeChannelId { get; } Property Value ulong? Methods AddBanAsync(IUser, int, string?, RequestOptions?) 封禁服务器内的用户。 public Task AddBanAsync(IUser user, int pruneDays = 0, string? reason = null, RequestOptions? options = null) Parameters user IUser 要封禁的用户。 pruneDays int 要删除此服务器中来自此用户的最近几天的消息，范围为 0 至 7，0 表示不删除。 reason string 封禁原因。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步封禁操作的任务。 Exceptions ArgumentException pruneDays 超出了 0 至 7 的范围。 AddBanAsync(ulong, int, string?, RequestOptions?) 封禁服务器内的用户。 public Task AddBanAsync(ulong userId, int pruneDays = 0, string? reason = null, RequestOptions? options = null) Parameters userId ulong 要封禁的用户的 ID。 pruneDays int 要删除此服务器中来自此用户的最近几天的消息，范围为 0 至 7，0 表示不删除。 reason string 封禁原因。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步封禁操作的任务。 Exceptions ArgumentException pruneDays 超出了 0 至 7 的范围。 CreateCategoryChannelAsync(string, Action<CreateCategoryChannelProperties>?, RequestOptions?) 在此服务器内创建一个新的分组频道。 public Task<RestCategoryChannel> CreateCategoryChannelAsync(string name, Action<CreateCategoryChannelProperties>? func = null, RequestOptions? options = null) Parameters name string 频道的名称。 func Action<CreateCategoryChannelProperties> 一个包含要应用到新创建频道的配置的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestCategoryChannel> 一个表示异步创建操作的任务。任务的结果包含新创建的分组频道。 CreateEmoteAsync(string, Image, RequestOptions?) 在此服务器内创建一个新的自定义表情。 public Task<GuildEmote> CreateEmoteAsync(string name, Image image, RequestOptions? options = null) Parameters name string 新自定义表情的名称。 image Image 新自定义表情的图像信息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<GuildEmote> 一个表示异步创建操作的任务。任务的结果包含新创建的自定义表情。 CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions?) 创建一个到此服务器的新邀请。 public Task<IInvite> CreateInviteAsync(InviteMaxAge maxAge = InviteMaxAge._604800, InviteMaxUses maxUses = InviteMaxUses.Unlimited, RequestOptions? options = null) Parameters maxAge InviteMaxAge 邀请链接的有效时长，NeverExpires 表示永不过期。 maxUses InviteMaxUses 邀请链接的可用人次，Unlimited 表示无限制。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IInvite> 一个表示异步创建操作的任务。任务的结果包含新创建的邀请链接的元数据，其中包含有关邀请链接的信息。 CreateInviteAsync(int?, int?, RequestOptions?) 创建一个到此服务器的新邀请。 public Task<IInvite> CreateInviteAsync(int? maxAge = 604800, int? maxUses = null, RequestOptions? options = null) Parameters maxAge int? 邀请链接的有效时长，null 表示永不过期。 maxUses int? 邀请链接的可用人次，null 表示无限制。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IInvite> 一个表示异步创建操作的任务。任务的结果包含新创建的邀请链接的元数据，其中包含有关邀请链接的信息。 CreateRoleAsync(string, RequestOptions?) 在此服务器内创建一个新角色。 public Task<RestRole> CreateRoleAsync(string name, RequestOptions? options = null) Parameters name string 角色的名称。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestRole> 一个表示异步创建操作的任务。任务的结果包含新创建的角色。 CreateTextChannelAsync(string, Action<CreateTextChannelProperties>?, RequestOptions?) 在此服务器内创建一个新的文字频道。 public Task<RestTextChannel> CreateTextChannelAsync(string name, Action<CreateTextChannelProperties>? func = null, RequestOptions? options = null) Parameters name string 频道的名称。 func Action<CreateTextChannelProperties> 一个包含要应用到新创建频道的配置的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestTextChannel> 一个表示异步创建操作的任务。任务的结果包含新创建的文字频道。 CreateVoiceChannelAsync(string, Action<CreateVoiceChannelProperties>?, RequestOptions?) 在此服务器内创建一个新的语音频道。 public Task<RestVoiceChannel> CreateVoiceChannelAsync(string name, Action<CreateVoiceChannelProperties>? func = null, RequestOptions? options = null) Parameters name string 频道的名称。 func Action<CreateVoiceChannelProperties> 一个包含要应用到新创建频道的配置的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestVoiceChannel> 一个表示异步创建操作的任务。任务的结果包含新创建的语音频道。 DeleteEmoteAsync(GuildEmote, RequestOptions?) 删除此服务器内的现有自定义表情。 public Task DeleteEmoteAsync(GuildEmote emote, RequestOptions? options = null) Parameters emote GuildEmote 要删除的自定义表情。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步删除操作的任务。 DownloadBoostSubscriptionsAsync(RequestOptions?) 下载此服务器内的所有服务器助力信息。 public Task DownloadBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步下载操作的任务。 Remarks 此方法会通过网关下载此服务器内的所有服务器助力信息，并缓存它们。 要下载所有服务器助力信息，当前用户必须具有 ManageGuild 权限。 DownloadUsersAsync(RequestOptions?) 下载此服务器内的所有用户。 public Task DownloadUsersAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步下载操作的任务。 Remarks 此方法会下载所有加入到此服务器内的用户，并缓存它们。 DownloadVoiceStatesAsync(RequestOptions?) 下载此服务器内的所有语音状态。 public Task DownloadVoiceStatesAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步下载操作的任务。 Remarks 此方法会下载此服务器内的所有语音状态，并缓存它们。 GetActiveBoostSubscriptionsAsync(RequestOptions?) 获取此服务器所有生效中的服务器助力包。 public Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> GetActiveBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> 一个表示异步获取操作的任务。任务的结果是所有为此服务器助力的用户及所应用的生效中的服务器助力包。 GetBadgeAsync(BadgeStyle, RequestOptions?) 获取与此服务器关联的徽章。 public Task<Stream> GetBadgeAsync(BadgeStyle style = BadgeStyle.GuildName, RequestOptions? options = null) Parameters style BadgeStyle 要获取的徽章的样式。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Stream> 一个表示异步获取操作的任务。任务的结果包含与此服务器关联的徽章的流。 GetBanAsync(IUser, RequestOptions?) 获取指定用户在此服务器内当前的封禁信息。 public Task<RestBan?> GetBanAsync(IUser user, RequestOptions? options = null) Parameters user IUser 要获取封禁信息的用户。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestBan> 一个表示异步获取操作的任务。任务的结果包含该用户在此服务器内的封禁信息；如果该用户当前未被此服务器封禁，则返回 null。 GetBanAsync(ulong, RequestOptions?) 获取指定用户在此服务器内的封禁信息。 public Task<RestBan?> GetBanAsync(ulong userId, RequestOptions? options = null) Parameters userId ulong 要获取封禁信息的用户的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<RestBan> 一个表示异步获取操作的任务。任务的结果包含该用户在此服务器内的封禁信息；如果该用户未被此服务器封禁，或封禁已过期或解除，则返回 null。 GetBansAsync(RequestOptions?) 获取此服务器的所有封禁信息。 public Task<IReadOnlyCollection<RestBan>> GetBansAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<RestBan>> 一个表示异步获取操作的任务。任务的结果包含此服务器的所有封禁信息。 GetBoostSubscriptionsAsync(RequestOptions?) 所有此服务器的所有服务器助力包。 public Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> GetBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<ImmutableDictionary<IUser, IReadOnlyCollection<BoostSubscriptionMetadata>>> 一个表示异步获取操作的任务。任务的结果是所有为此服务器助力的用户及所应用的服务器助力包。 GetCategoryChannel(ulong) 获取此服务器内指定的分组频道 public SocketCategoryChannel? GetCategoryChannel(ulong id) Parameters id ulong 要获取的频道的 ID。 Returns SocketCategoryChannel 与指定的 id 关联的频道；如果未找到，则返回 null。 GetChannel(ulong) 获取此服务器内的频道。 public SocketGuildChannel? GetChannel(ulong id) Parameters id ulong 要获取的频道的 ID。 Returns SocketGuildChannel 与指定的 id 关联的频道；如果未找到，则返回 null。 GetEmote(string) 获取此服务器的指定自定义表情。 public GuildEmote? GetEmote(string id) Parameters id string 要获取的自定义表情的 ID。 Returns GuildEmote 与指定的 id 关联的自定义表情；如果未找到，则返回 null。 GetEmoteAsync(string, RequestOptions?) 获取此服务器的指定自定义表情。 public Task<GuildEmote?> GetEmoteAsync(string id, RequestOptions? options = null) Parameters id string 要获取的自定义表情的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<GuildEmote> 一个表示异步获取操作的任务。任务的结果包含与指定的 id 关联的自定义表情；如果未找到，则返回 null。 GetEmotesAsync(RequestOptions?) 获取此服务器的所有自定义表情。 public Task<IReadOnlyCollection<GuildEmote>> GetEmotesAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<GuildEmote>> 一个表示异步获取操作的任务。任务的结果包含此服务器的所有自定义表情。 GetInvitesAsync(RequestOptions?) 获取此服务器内的所有邀请信息。 public Task<IReadOnlyCollection<IInvite>> GetInvitesAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IInvite>> 一个表示异步获取操作的任务。任务的结果包含此服务器内的所有邀请信息。 GetRole(uint) 获取此服务器内的角色。 public SocketRole? GetRole(uint id) Parameters id uint 要获取的角色的 ID。 Returns SocketRole 一个表示异步获取操作的任务。任务的结果包含与指定的 id 关联的角色；如果未找到，则返回 null。 GetTextChannel(ulong) 获取此服务器中所有具有文字聊天能力的频道。 public SocketTextChannel? GetTextChannel(ulong id) Parameters id ulong 要获取的频道的 ID。 Returns SocketTextChannel 与指定的 id 关联的频道；如果未找到，则返回 null。 Remarks 语音频道也是一种文字频道，此方法本意用于获取具有文字聊天能力的频道。如果通过此方法传入的 ID 对应的频道是语音频道，那么也会返回对应的语音频道实体。 如需获取频道的实际类型，请参考 GetChannelType(IChannel)。 GetUser(ulong) 获取此服务器内的用户。 public SocketGuildUser? GetUser(ulong id) Parameters id ulong 要获取的用户的 ID。 Returns SocketGuildUser 与指定的 id 关联的用户；如果未找到，则返回 null。 Remarks 此方法可能返回 null，因为在大型服务器中，用户列表的缓存可能不完整。 GetUsersAsync(RequestOptions?) 获取此服务器内的所有用户。 public IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> GetUsersAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> 一个表示异步获取操作的任务。任务的结果包含此服务器内的所有用户。 GetVoiceChannel(ulong) 获取此服务器内指定具有语音聊天能力的频道。 public SocketVoiceChannel? GetVoiceChannel(ulong id) Parameters id ulong 要获取的频道的 ID。 Returns SocketVoiceChannel 一个表示异步获取操作的任务。任务的结果包含与指定的 id 关联的频道；如果未找到，则返回 null。 LeaveAsync(RequestOptions?) 退出此服务器。 public Task LeaveAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步退出操作的任务。 ModifyEmoteNameAsync(GuildEmote, string, RequestOptions?) 修改此服务器内的现有自定义表情。 public Task ModifyEmoteNameAsync(GuildEmote emote, string name, RequestOptions? options = null) Parameters emote GuildEmote 要修改的自定义表情。 name string 新的自定义表情名称。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。任务的结果包含修改后的自定义表情。 MoveUsersAsync(IEnumerable<IGuildUser>, IVoiceChannel, RequestOptions?) 移动用户到语音频道。 public Task MoveUsersAsync(IEnumerable<IGuildUser> users, IVoiceChannel targetChannel, RequestOptions? options = null) Parameters users IEnumerable<IGuildUser> 要移动的用户。 targetChannel IVoiceChannel 要移动用户到的语音频道。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步移动操作的任务。 PurgeUserCache() 清除此服务器的用户缓存。 public void PurgeUserCache() PurgeUserCache(Predicate<SocketGuildUser>) 清除此服务器的用户缓存。 public void PurgeUserCache(Predicate<SocketGuildUser> predicate) Parameters predicate Predicate<SocketGuildUser> 要清除的用户的筛选条件。 RemoveBanAsync(IUser, RequestOptions?) 解除服务器对用户的封禁。 public Task RemoveBanAsync(IUser user, RequestOptions? options = null) Parameters user IUser 要解除封禁的用户。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步封禁解除操作的任务。 RemoveBanAsync(ulong, RequestOptions?) 解除服务器对用户的封禁。 public Task RemoveBanAsync(ulong userId, RequestOptions? options = null) Parameters userId ulong 要解除封禁的用户的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步封禁解除操作的任务。 SearchUsersAsync(Action<SearchGuildMemberProperties>, int, RequestOptions?) 搜索加入到此服务器内匹配指定搜索条件的所有用户。 public IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> SearchUsersAsync(Action<SearchGuildMemberProperties> func, int limit = 50, RequestOptions? options = null) Parameters func Action<SearchGuildMemberProperties> 一个包含要搜索的用户属性及排序条件的委托。 limit int 搜索结果的最大数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> 一个表示异步获取操作的任务。任务的结果包含与提供的 func 中指定的属性匹配的服务器用户集合。 Remarks 此方法使用指定的属性搜索服务器用户。要查看可用的属性，请参考 SearchGuildMemberProperties。 ToString() 获取此服务器的名称。 public override string ToString() Returns string UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 public Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 KOOK REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 KOOK 服务端的数据。"
  },
  "api/Kook.WebSocket.SocketGuildChannel.html": {
    "href": "api/Kook.WebSocket.SocketGuildChannel.html",
    "title": "Class SocketGuildChannel | Kook.Net 文档",
    "keywords": "Class SocketGuildChannel Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的服务器频道。 public class SocketGuildChannel : SocketChannel, IUpdateable, IGuildChannel, IChannel, IEntity<ulong>, IDeletable Inheritance object SocketEntity<ulong> SocketChannel SocketGuildChannel Implements IUpdateable IGuildChannel IChannel IEntity<ulong> IDeletable Derived SocketCategoryChannel SocketTextChannel Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties Creator 获取创建此频道的用户。 public SocketGuildUser? Creator { get; } Property Value SocketGuildUser Remarks 此属性会尝试从缓存的用户列表中获取此频道的创建者。如果用户不是此服务器的成员，或该用户不在本地缓存的用户列表中，则此属性将返回 null。在这种情况下，可以尝试通过 GetUserAsync(ulong, CacheMode, RequestOptions?) 获取指定的用户信息。 CreatorId 获取创建此频道的用户的 ID。 public ulong? CreatorId { get; } Property Value ulong? Guild 获取此频道所属的服务器。 public SocketGuild Guild { get; } Property Value SocketGuild Name 获取此频道的名称。 public string Name { get; } Property Value string Position 获取此频道在服务器频道列表中的位置。 public int? Position { get; } Property Value int? Remarks 更小的数值表示更靠近列表顶部的位置。 RolePermissionOverwrites 获取此频道的角色的权限重写集合。 public IReadOnlyCollection<RolePermissionOverwrite> RolePermissionOverwrites { get; } Property Value IReadOnlyCollection<RolePermissionOverwrite> Type 获取此频道的类型。 public ChannelType Type { get; } Property Value ChannelType UserPermissionOverwrites 获取此频道的用户的权限重写集合。 public IReadOnlyCollection<UserPermissionOverwrite> UserPermissionOverwrites { get; } Property Value IReadOnlyCollection<UserPermissionOverwrite> Users 获取用户缓存列表中的可以访问此频道的所有用户。 public virtual IReadOnlyCollection<SocketGuildUser> Users { get; } Property Value IReadOnlyCollection<SocketGuildUser> Remarks 此属性仅会返回缓存中可以访问此频道的所有用户，如果未启用用户列表缓存，或者由于网关事件确实导致本地缓存不同步，此属性所返回的用户列表可能不准确。 Methods AddPermissionOverwriteAsync(IGuildUser, RequestOptions?) 添加给定用户的权限重写配置。 public Task AddPermissionOverwriteAsync(IGuildUser user, RequestOptions? options = null) Parameters user IGuildUser 要添加权限重写配置的用户。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步添加频道内用户权限重写配置操作的任务。 AddPermissionOverwriteAsync(IRole, RequestOptions?) 添加给定角色的权限重写配置。 public Task AddPermissionOverwriteAsync(IRole role, RequestOptions? options = null) Parameters role IRole 要添加权限重写配置的角色。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步添加频道内角色权限重写配置操作的任务。 DeleteAsync(RequestOptions?) 删除此对实体象及其所有子实体对象。 public Task DeleteAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task GetPermissionOverwrite(IRole) 获取给定角色的权限重写配置。 public virtual OverwritePermissions? GetPermissionOverwrite(IRole role) Parameters role IRole 要获取权限重写配置的角色。 Returns OverwritePermissions? 一个表示目标角色的权限重写配置；如果没有设置则为 null。 GetPermissionOverwrite(IUser) 获取给定用户的权限重写配置。 public virtual OverwritePermissions? GetPermissionOverwrite(IUser user) Parameters user IUser 要获取权限重写配置的用户。 Returns OverwritePermissions? 一个表示目标用户的权限重写配置；如果没有设置则为 null。 GetUser(ulong) 获取此频道中的一个服务器用户。 public virtual SocketGuildUser? GetUser(ulong id) Parameters id ulong 要获取的服务器用户的 ID。 Returns SocketGuildUser 如果找到了具有指定 ID 的服务器用户，则返回该用户；否则返回 null。 ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions?) 修改此服务器频道。 public Task ModifyAsync(Action<ModifyGuildChannelProperties> func, RequestOptions? options = null) Parameters func Action<ModifyGuildChannelProperties> 一个包含修改服务器频道属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示服务器频道属性修改操作的异步任务。 See Also ModifyGuildChannelProperties ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions?) 更新给定用户的权限重写配置。 public Task ModifyPermissionOverwriteAsync(IGuildUser user, Func<OverwritePermissions, OverwritePermissions> func, RequestOptions? options = null) Parameters user IGuildUser 要更新权限重写配置的用户。 func Func<OverwritePermissions, OverwritePermissions> 一个包含修改权限重写配置的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新频道内用户权限重写配置操作的任务。 ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions?) 更新给定角色的权限重写配置。 public Task ModifyPermissionOverwriteAsync(IRole role, Func<OverwritePermissions, OverwritePermissions> func, RequestOptions? options = null) Parameters role IRole 要更新权限重写配置的角色。 func Func<OverwritePermissions, OverwritePermissions> 一个包含修改权限重写配置的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新频道内角色权限重写配置操作的任务。 RemovePermissionOverwriteAsync(IGuildUser, RequestOptions?) 对于给定的用户，如果存在权限重写配置，则移除它。 public Task RemovePermissionOverwriteAsync(IGuildUser user, RequestOptions? options = null) Parameters user IGuildUser 要对其移除权限重写配置的用户。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步移除频道内用户权限重写配置操作的任务。 RemovePermissionOverwriteAsync(IRole, RequestOptions?) 对于给定的角色，如果存在权限重写配置，则移除它。 public Task RemovePermissionOverwriteAsync(IRole role, RequestOptions? options = null) Parameters role IRole 要对其移除权限重写配置的角色。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步移除频道内角色权限重写配置操作的任务。 ToString() 获取此频道的名称。 public override string ToString() Returns string UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 public override Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 KOOK REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 KOOK 服务端的数据。"
  },
  "api/Kook.WebSocket.SocketGuildUser.html": {
    "href": "api/Kook.WebSocket.SocketGuildUser.html",
    "title": "Class SocketGuildUser | Kook.Net 文档",
    "keywords": "Class SocketGuildUser Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的服务器用户。 public class SocketGuildUser : SocketUser, IGuildUser, IUser, IEntity<ulong>, IMentionable, IPresence, IVoiceState, IUpdateable Inheritance object SocketEntity<ulong> SocketUser SocketGuildUser Implements IGuildUser IUser IEntity<ulong> IMentionable IPresence IVoiceState IUpdateable Inherited Members SocketUser.IsSystemUser SocketUser.IdentifyNumber SocketUser.KMarkdownMention SocketUser.IsOnline SocketUser.ActiveClient SocketUser.CreateDMChannelAsync(RequestOptions) SocketUser.GetIntimacyAsync(RequestOptions) SocketUser.UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) SocketUser.BlockAsync(RequestOptions) SocketUser.UnblockAsync(RequestOptions) SocketUser.RequestFriendAsync(RequestOptions) SocketUser.RemoveFriendAsync(RequestOptions) SocketUser.ToString() SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods UserExtensions.BanAsync(IGuildUser, int, string?, RequestOptions?) Format.UsernameAndIdentifyNumber(IUser, bool) UserExtensions.SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendTextAsync(IUser, string, IQuote?, RequestOptions?) Properties ActiveAt 获取此用户在该服务器内的最近活跃时间。 public DateTimeOffset? ActiveAt { get; } Property Value DateTimeOffset? Avatar 获取此用户的头像图像的 URL。 public override string Avatar { get; } Property Value string Remarks 如果此用户为 BUFF 会员，且以 BUFF 会员权益设置了头像，则此属性返回的 URL 表示的是 BUFF 专属头像权益时效后的回退头像。 Banner 获取此用户的横幅图像的 URL。 public override string? Banner { get; } Property Value string Remarks 如果此用户不是 BUFF 会员，或未以 BUFF 会员权限设置横幅，则此属性返回 null。 BoostSubscriptions 获取此用户在该服务器内的所有服务器助力信息。 public IReadOnlyCollection<BoostSubscriptionMetadata> BoostSubscriptions { get; } Property Value IReadOnlyCollection<BoostSubscriptionMetadata> Remarks warning 当 AlwaysDownloadBoostSubscriptions 为 true 时，Bot 启动时会自动下载所有服务器的所有助力信息。否则，此属性将为 null。调用 DownloadBoostSubscriptionsAsync(RequestOptions?) 也可以立即下载服务器的所有助力信息，下载完成后，此属性值将被设定。 网关不会发布有关此属性值变更的事件，此属性值可能并不准确。要获取准确的服务器订阅信息，请调用 GetBoostSubscriptionsAsync(RequestOptions?)。 BuffAvatar 获取此用户以 BUFF 会员权益设置的头像图像的 URL。 public override string? BuffAvatar { get; } Property Value string Remarks 如果此用户不是 BUFF 会员，或未以 BUFF 会员权限设置头像，则此属性返回 null。 Color 获取此用户的显示名称的颜色。 public Color? Color { get; } Property Value Color? Remarks 如果此用户所拥有的最高角色的颜色类型为渐变色，则此属性返回的颜色是渐变色权益失效后的回退颜色。 warning 一个角色的颜色可能是纯色或渐变色，参见 ColorType。但由于服务器用户列表 API 及服务器用户详情 API 所返回的用户信息均不包含角色的颜色类型和渐变色信息，因此，如果用户的最高角色的颜色是渐变色， 则此属性的值可能是不正确的。如需获取该用户的准确的显示名称及颜色，请获取此用户的最高角色实体对象，访问其颜色类型及渐变色属性。 if (guildUser.RoleIds.Select(x => guildUser.Guild.GetRole(x)).OfType<IRole>().MinBy(x => x.Position) is { } topRole) { ColorType colorType = topRole.ColorType; GradientColor? gradientColor = topRole.GradientColor; } DisplayName 获取此用户的显示名称。 public string DisplayName { get; } Property Value string Remarks 如果此用户在该服务器内设置了昵称，则此属性返回昵称；否则返回用户名。 Guild 获取此服务器用户所属的服务器。 public SocketGuild Guild { get; } Property Value SocketGuild GuildPermissions 获取此用户在该服务器内的权限。 public GuildPermissions GuildPermissions { get; } Property Value GuildPermissions HasAnnualBuff 获取此用户是否订阅了年度 BUFF 会员。 public override bool? HasAnnualBuff { get; } Property Value bool? Remarks 如果未知此用户是否订阅了年度 BUFF 会员，则此属性返回 null。 HasBuff 获取此用户是否订阅了 BUFF 会员。 public override bool? HasBuff { get; } Property Value bool? Remarks 如果未知此用户是否订阅了 BUFF 会员，则此属性返回 null。 IdentifyNumberValue 获取此用户识别号的数值形式。 public override ushort IdentifyNumberValue { get; } Property Value ushort IsBanned 获取此用户是否被封禁。 public override bool? IsBanned { get; } Property Value bool? Remarks 如果未知此用户是否被封禁，则此属性返回 null。 IsBot 获取此用户是否为 Bot。 public override bool? IsBot { get; } Property Value bool? Remarks 如果未知此用户是否为 Bot，则此属性返回 null。 IsDeafened 获取此用户是否被服务器静音。 public bool? IsDeafened { get; } Property Value bool? Remarks 被服务器静音表示无法在语音频道内接收来自其他用户的语音。 IsDenoiseEnabled 获取此用户是否启用了降噪功能。 public override bool? IsDenoiseEnabled { get; } Property Value bool? Remarks 如果未知此用户是否启用了降噪功能，则此属性返回 null。 IsMobileVerified 获取此用户的手机号码是否已验证。 public bool? IsMobileVerified { get; } Property Value bool? IsMuted 获取此用户是否被服务器闭麦。 public bool? IsMuted { get; } Property Value bool? Remarks 被服务器闭麦表示无法在语音频道内发言。 IsOwner 获取此用户是否为当前服务器的所有者。 public bool? IsOwner { get; } Property Value bool? JoinedAt 获取此用户加入服务器的时间。 public DateTimeOffset? JoinedAt { get; } Property Value DateTimeOffset? LiveStreamStatus 获取用户的直播状态。 public LiveStreamStatus? LiveStreamStatus { get; } Property Value LiveStreamStatus? Nameplates 获取此用户设置展示的所有铭牌。 public override IReadOnlyCollection<Nameplate> Nameplates { get; } Property Value IReadOnlyCollection<Nameplate> Remarks 用户设置的首个铭牌会展示在该用户聊天消息的用户名的右侧，用户设置的所有铭牌会展示在个人信息面板内的用户名下方。 Nickname 获取此用户在该服务器内的昵称。 public string? Nickname { get; } Property Value string Remarks 如果此用户在该服务器内没有设置昵称，则此属性返回 null。 PlainTextMention 获取一个用于在纯文本格式文本中提及此对象的格式化字符串。 public string PlainTextMention { get; } Property Value string Roles 获取此用户在该服务器内拥有的所有角色。 public IReadOnlyCollection<SocketRole> Roles { get; } Property Value IReadOnlyCollection<SocketRole> Remarks warning 由于网关不会发布有关服务器用户角色变更的事件，此属性值可能并不准确。要获取准确的角色信息，请在使用此属性前调用 UpdateAsync(RequestOptions?)。 UserTag 获取此用户的标签信息。 public override UserTag? UserTag { get; } Property Value UserTag Remarks 用户的标签会显示在服务器用户列表、私信列表、私信消息页、好友列表、个人信息面板、聊天消息的用户名的右侧。 如果此用户没有标签，或未知此用户的标签信息，则此属性返回 null。 Username 获取此用户的用户名。 public override string Username { get; } Property Value string VoiceChannel 获取用户当前所在的语音频道；如果不在任何频道中则为 null。 public SocketVoiceChannel? VoiceChannel { get; } Property Value SocketVoiceChannel VoiceState 获取此用户的语音状态。 public SocketVoiceState? VoiceState { get; } Property Value SocketVoiceState? Methods AddRoleAsync(IRole, RequestOptions?) 在该服务器内授予此用户指定的角色。 public Task AddRoleAsync(IRole role, RequestOptions? options = null) Parameters role IRole 要在该服务器内为此用户授予的角色。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步授予操作的任务。 AddRoleAsync(uint, RequestOptions?) 在该服务器内授予此用户指定的角色。 public Task AddRoleAsync(uint roleId, RequestOptions? options = null) Parameters roleId uint 要在该服务器内为此用户授予的角色的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步授予操作的任务。 AddRolesAsync(IEnumerable<IRole>, RequestOptions?) 在该服务器内授予此用户指定的一些角色。 public Task AddRolesAsync(IEnumerable<IRole> roles, RequestOptions? options = null) Parameters roles IEnumerable<IRole> 要在该服务器内为此用户授予的所有角色。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步授予操作的任务。 AddRolesAsync(IEnumerable<uint>, RequestOptions?) 在该服务器内授予此用户指定的一些角色。 public Task AddRolesAsync(IEnumerable<uint> roleIds, RequestOptions? options = null) Parameters roleIds IEnumerable<uint> 要在该服务器内为此用户授予的所有角色的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步授予操作的任务。 DeafenAsync(RequestOptions?) 在该服务器内限制此用户的语音接收。 public Task DeafenAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步静音操作的任务。 Remarks 此操作会使此用户无法在该服务器内的语音频道中接收来自其他用户的语音。 GetBoostSubscriptionsAsync(RequestOptions?) 获取此用户在该服务器内的所有服务器助力包订阅信息。 public Task<IReadOnlyCollection<BoostSubscriptionMetadata>> GetBoostSubscriptionsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<BoostSubscriptionMetadata>> 一个表示异步获取操作的任务。任务的结果包含此用户在该服务器内的所有服务器助力包订阅信息。 GetConnectedVoiceChannelsAsync(RequestOptions?) 获取此用户当前所连接到的所有语音频道。 public Task<IReadOnlyCollection<SocketVoiceChannel>> GetConnectedVoiceChannelsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<SocketVoiceChannel>> 一个表示异步获取操作的任务。任务的结果包含此用户当前所连接到的所有语音频道。 GetPermissions(IGuildChannel) 获取此用户在指定频道内所拥有的权限。 public ChannelPermissions GetPermissions(IGuildChannel channel) Parameters channel IGuildChannel 要获取权限的频道。 Returns ChannelPermissions 一个表示此用户在指定频道内所拥有的频道权限的权限集。 KickAsync(RequestOptions?) 将此用户从此服务器中踢出。 public Task KickAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步踢出操作的任务。 ModifyNicknameAsync(string?, RequestOptions?) 修改此用户在该服务器内的昵称。 public Task ModifyNicknameAsync(string? name, RequestOptions? options = null) Parameters name string 要设置到此用户在该服务器内的新昵称。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 Remarks 此方法使用指定的属性修改当前用户在该服务器内的昵称。 如要清除此用户在该服务器内的昵称，请将 name 设置为 null。 warning 如果将昵称设置为与用户名相同，KOOK 也会将该用户在此服务器内的昵称清除，显示名称将跟随用户名，而不是固定为指定的昵称。 MuteAsync(RequestOptions?) 在该服务器内关闭此用户的语音输入。 public Task MuteAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步关闭操作的任务。 Remarks 此操作会使此用户无法在该服务器内的语音频道中发言。 RemoveRoleAsync(IRole, RequestOptions?) 在该服务器内撤销此用户指定的角色。 public Task RemoveRoleAsync(IRole role, RequestOptions? options = null) Parameters role IRole 要在该服务器内为此用户撤销的角色。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步撤销操作的任务。 RemoveRoleAsync(uint, RequestOptions?) 在该服务器内撤销此用户指定的角色。 public Task RemoveRoleAsync(uint roleId, RequestOptions? options = null) Parameters roleId uint 要在该服务器内为此用户撤销的角色的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步撤销操作的任务。 RemoveRolesAsync(IEnumerable<IRole>, RequestOptions?) 在该服务器内撤销此用户指定的一些角色。 public Task RemoveRolesAsync(IEnumerable<IRole> roles, RequestOptions? options = null) Parameters roles IEnumerable<IRole> 要在该服务器内为此用户撤销的所有角色。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步撤销操作的任务。 RemoveRolesAsync(IEnumerable<uint>, RequestOptions?) 在该服务器内撤销此用户指定的一些角色。 public Task RemoveRolesAsync(IEnumerable<uint> roleIds, RequestOptions? options = null) Parameters roleIds IEnumerable<uint> 要在该服务器内为此用户撤销的所有角色的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步撤销操作的任务。 UndeafenAsync(RequestOptions?) 在该服务器内恢复此用户的语音接收。 public Task UndeafenAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步恢复操作的任务。 Remarks 此操作会撤销由于服务器静音而导致的无法在语音频道中接收来自其他用户的语音的状态。 UnmuteAsync(RequestOptions?) 在该服务器内恢复此用户的语音输入。 public Task UnmuteAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步恢复操作的任务。 Remarks 此操作会撤销由于服务器闭麦而导致的在语音频道中无法发言状态。 UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 public Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 KOOK REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 KOOK 服务端的数据。"
  },
  "api/Kook.WebSocket.SocketInvite.html": {
    "href": "api/Kook.WebSocket.SocketInvite.html",
    "title": "Class SocketInvite | Kook.Net 文档",
    "keywords": "Class SocketInvite Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的邀请。 public class SocketInvite : SocketEntity<uint>, IInvite, IEntity<uint>, IDeletable Inheritance object SocketEntity<uint> SocketInvite Implements IInvite IEntity<uint> IDeletable Inherited Members SocketEntity<uint>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Channel 获取此邀请链接指向的频道。 public SocketGuildChannel Channel { get; } Property Value SocketGuildChannel ChannelId 获取此邀请链接指向的频道的 ID。 public ulong? ChannelId { get; } Property Value ulong? Code 获取此邀请的唯一代码。 public string Code { get; } Property Value string CreatedAt 获取此邀请的创建时间。 public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset ExpiresAt 获取此邀请的过期时间。 public DateTimeOffset? ExpiresAt { get; } Property Value DateTimeOffset? Remarks 如果此邀请永不过期，则此属性的值为 null。 Guild 获取此邀请链接指向的服务器。 public SocketGuild Guild { get; } Property Value SocketGuild GuildId 获取此邀请链接指向的服务器的 ID。 public ulong? GuildId { get; } Property Value ulong? InvitedUsersCount 获取已接受此邀请的用户数量。 public int InvitedUsersCount { get; } Property Value int Inviter 获取创建此邀请的用户。 public SocketGuildUser Inviter { get; } Property Value SocketGuildUser MaxAge 获取此邀请的有效时长。 public TimeSpan? MaxAge { get; } Property Value TimeSpan? Remarks 如果此邀请永不过期，则此属性的值为 null。 MaxUses 获取此邀请的可用人次。 public int? MaxUses { get; } Property Value int? Remarks 如果此邀请不限制可用人次，则此属性的值为 null。 RemainingUses 获取此邀请剩余可用次数。 public int? RemainingUses { get; } Property Value int? Remarks 如果此邀请不限制可用人次，则此属性的值为 null。 Url 获取用于接受此邀请的 URL，URL 的路径中包含 Code 属性的值。 public string Url { get; } Property Value string Uses 获取此邀请已被使用的次数。 public int? Uses { get; } Property Value int? Methods DeleteAsync(RequestOptions?) 删除此对实体象及其所有子实体对象。 public Task DeleteAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task ToString() 获取用于接受此邀请的 URL，URL 的路径中包含 Code 属性的值。 public override string ToString() Returns string"
  },
  "api/Kook.WebSocket.SocketMessage.html": {
    "href": "api/Kook.WebSocket.SocketMessage.html",
    "title": "Class SocketMessage | Kook.Net 文档",
    "keywords": "Class SocketMessage Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的消息。 public abstract class SocketMessage : SocketEntity<Guid>, IMessage, IEntity<Guid>, IDeletable, IUpdateable Inheritance object SocketEntity<Guid> SocketMessage Implements IMessage IEntity<Guid> IDeletable IUpdateable Derived SocketSystemMessage SocketUserMessage Inherited Members SocketEntity<Guid>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods MessageExtensions.GetJumpUrl(IMessage) Properties Attachments 获取此消息中包含的所有附件。 public virtual IReadOnlyCollection<Attachment> Attachments { get; } Property Value IReadOnlyCollection<Attachment> Remarks 此属性也会包含从卡片中解析出来的附件信息。 Author 获取此消息的作者。 public SocketUser Author { get; } Property Value SocketUser Cards 获取此消息中包含的所有卡片。 public virtual IReadOnlyCollection<ICard> Cards { get; } Property Value IReadOnlyCollection<ICard> Channel 获取此消息的来源频道。 public ISocketMessageChannel Channel { get; } Property Value ISocketMessageChannel CleanContent 获取此消息的纯净内容。 public string CleanContent { get; } Property Value string 此属性会对 Content 的内容进行两步操作： 使用 Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) 方法解析所有标签的完整名称； 使用 StripMarkdown(string) 清理所有 KMarkdown 格式字符。 See Also Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) StripMarkdown(string) Content 获取此消息的内容。 public string Content { get; } Property Value string Remarks 如果消息不是文本消息，则此属性可能为空或包含原始代码。 EditedTimestamp 获取此消息最后一次编辑的时间。 public DateTimeOffset? EditedTimestamp { get; } Property Value DateTimeOffset? Remarks 如果此消息从未被编辑过，则此属性的值为 null。 Embeds 获取此消息中包含的所有嵌入式内容。 public virtual IReadOnlyCollection<IEmbed> Embeds { get; } Property Value IReadOnlyCollection<IEmbed> IsPinned 获取此消息是否被置顶。 public virtual bool IsPinned { get; protected set; } Property Value bool MentionedEveryone 获取此消息是否提及了全体成员。 public virtual bool MentionedEveryone { get; } Property Value bool MentionedHere 获取此消息是否提及了在线成员。 public virtual bool MentionedHere { get; } Property Value bool MentionedRoles 获取此消息中提及的所有角色。 public virtual IReadOnlyCollection<SocketRole> MentionedRoles { get; } Property Value IReadOnlyCollection<SocketRole> MentionedUsers 获取此消息中提及的所有用户。 public IReadOnlyCollection<SocketUser> MentionedUsers { get; } Property Value IReadOnlyCollection<SocketUser> Pokes 获取此消息中包含的所有 POKE。 public virtual IReadOnlyCollection<SocketPokeAction> Pokes { get; } Property Value IReadOnlyCollection<SocketPokeAction> RawContent 获取消息的原始可读文本。 public string RawContent { get; } Property Value string Remarks 此属性值仅在从网关接收的消息中可用。 Reactions 获取此消息中包含的所有回应。 public IReadOnlyDictionary<IEmote, ReactionMetadata> Reactions { get; } Property Value IReadOnlyDictionary<IEmote, ReactionMetadata> Source 获取此消息的来源。 public MessageSource Source { get; } Property Value MessageSource Tags 获取此消息中解析出的所有标签。 public virtual IReadOnlyCollection<ITag> Tags { get; } Property Value IReadOnlyCollection<ITag> Timestamp 获取此消息的发送时间。 public DateTimeOffset Timestamp { get; } Property Value DateTimeOffset Type 获取此消息的类型。 public MessageType Type { get; } Property Value MessageType Methods AddReactionAsync(IEmote, RequestOptions?) 向此消息添加一个回应。 public Task AddReactionAsync(IEmote emote, RequestOptions? options = null) Parameters emote IEmote 要用于向此消息添加回应的表情符号。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示添加添加异步操作的任务。 DeleteAsync(RequestOptions?) 删除此对实体象及其所有子实体对象。 public Task DeleteAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task GetReactionUsersAsync(IEmote, RequestOptions?) 获取所有对消息使用给定表情符号进行回应的用户。 public Task<IReadOnlyCollection<IUser>> GetReactionUsersAsync(IEmote emote, RequestOptions? options = null) Parameters emote IEmote 要获取其回应用户的表情符号。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IUser>> 一个表示异步获取操作的任务。任务的结果包含对消息使用给定表情符号进行回应的所有用户。 RemoveReactionAsync(IEmote, IUser, RequestOptions?) 从此消息中移除一个回应。 public Task RemoveReactionAsync(IEmote emote, IUser user, RequestOptions? options = null) Parameters emote IEmote 要从此消息移除的回应的表情符号。 user IUser 要移除其回应的用户。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步移除操作的任务。 RemoveReactionAsync(IEmote, ulong, RequestOptions?) 从此消息中移除一个回应。 public Task RemoveReactionAsync(IEmote emote, ulong userId, RequestOptions? options = null) Parameters emote IEmote 要从此消息移除的回应的表情符号。 userId ulong 要移除其回应的用户的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步移除操作的任务。 ToString() 获取此消息的内容。 public override string ToString() Returns string Remarks 如果消息不是文本消息，则此属性可能为空或包含原始代码。 UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 public Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 KOOK REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 KOOK 服务端的数据。"
  },
  "api/Kook.WebSocket.SocketPokeAction.html": {
    "href": "api/Kook.WebSocket.SocketPokeAction.html",
    "title": "Class SocketPokeAction | Kook.Net 文档",
    "keywords": "Class SocketPokeAction Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的 POKE 动作。 public class SocketPokeAction : IPokeAction Inheritance object SocketPokeAction Implements IPokeAction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Operator 获取执行此动作的用户。 public SocketUser Operator { get; } Property Value SocketUser Poke 获取此动作关联的 POKE。 public Poke Poke { get; } Property Value Poke Targets 获取此动作的目标用户。 public IReadOnlyCollection<SocketUser> Targets { get; } Property Value IReadOnlyCollection<SocketUser>"
  },
  "api/Kook.WebSocket.SocketPresence.html": {
    "href": "api/Kook.WebSocket.SocketPresence.html",
    "title": "Class SocketPresence | Kook.Net 文档",
    "keywords": "Class SocketPresence Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的用户实时状态。 public class SocketPresence : IPresence Inheritance object SocketPresence Implements IPresence Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ActiveClient 获取此用于当前登录的客户端类型。 public ClientType? ActiveClient { get; } Property Value ClientType? IsOnline 获取此用户当前是否在线。 public bool? IsOnline { get; } Property Value bool?"
  },
  "api/Kook.WebSocket.SocketReaction.html": {
    "href": "api/Kook.WebSocket.SocketReaction.html",
    "title": "Class SocketReaction | Kook.Net 文档",
    "keywords": "Class SocketReaction Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的回应。 public class SocketReaction : IReaction Inheritance object SocketReaction Implements IReaction Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Channel 获取此回应所在的消息频道。 public ISocketMessageChannel? Channel { get; } Property Value ISocketMessageChannel Remarks 如果要获取的频道实体不存在于缓存中，则此属性将返回 null。 Emote 获取此回应所使用的表情符号。 public IEmote Emote { get; } Property Value IEmote Message 获取此回应所对应的消息。 public IMessage? Message { get; } Property Value IMessage Remarks 如果要获取的消息实体不存在于缓存中，则此属性将返回 null。 MessageId 获取此回应所对应的消息的 ID。 public Guid MessageId { get; } Property Value Guid User 获取添加此回应的用户。 public IUser? User { get; } Property Value IUser Remarks 如果要获取的用户实体不存在于缓存中，则此属性将返回 null。 UserId 获取添加此回应的用户的 ID。 public ulong UserId { get; } Property Value ulong Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/Kook.WebSocket.SocketRole.html": {
    "href": "api/Kook.WebSocket.SocketRole.html",
    "title": "Class SocketRole | Kook.Net 文档",
    "keywords": "Class SocketRole Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的可授予服务器用户的角色。 public class SocketRole : SocketEntity<uint>, IRole, IEntity<uint>, IDeletable, IMentionable, IComparable<IRole> Inheritance object SocketEntity<uint> SocketRole Implements IRole IEntity<uint> IDeletable IMentionable IComparable<IRole> Inherited Members SocketEntity<uint>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Color 获取此角色的颜色。 public Color Color { get; } Property Value Color Remarks 如果此用户所拥有的最高角色的颜色类型为渐变色，则此属性返回的颜色是渐变色权益失效后的回退颜色。 ColorType 获取此角色的颜色类型。 public ColorType ColorType { get; } Property Value ColorType GradientColor 获取此角色的渐变色。 public GradientColor? GradientColor { get; } Property Value GradientColor? Remarks 如果此角色的颜色类型 ColorType 不为 Gradient，则此属性会返回 null。 Guild 获取拥有此角色的服务器。 public SocketGuild Guild { get; } Property Value SocketGuild IsEveryone 获取此角色是否为 @全体成员 角色。 public bool IsEveryone { get; } Property Value bool IsHoisted 获取拥有此角色的用户是否在用户列表中与普通在线成员分开显示。 public bool IsHoisted { get; } Property Value bool IsMentionable 获取是否允许任何人提及此角色。 public bool IsMentionable { get; } Property Value bool KMarkdownMention 返回一个用于在 KMarkdown 格式文本中提及此对象的格式化字符串。 public string KMarkdownMention { get; } Property Value string Name 获取此角色的名称。 public string Name { get; } Property Value string Permissions 获取此角色拥有的权限。 public GuildPermissions Permissions { get; } Property Value GuildPermissions PlainTextMention 获取一个用于在纯文本格式文本中提及此对象的格式化字符串。 public string PlainTextMention { get; } Property Value string Position 获取此角色在服务器角色列表中的位置。 public int Position { get; } Property Value int Remarks 更小的数值表示更靠近列表顶部的位置。 Type 获取此角色的类型。 public RoleType Type { get; } Property Value RoleType Methods CompareTo(IRole?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(IRole? role) Parameters role IRole Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. DeleteAsync(RequestOptions?) 删除此对实体象及其所有子实体对象。 public Task DeleteAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task GetUsersAsync(RequestOptions?) 获取拥有此角色的用户的集合。 public IAsyncEnumerable<IReadOnlyCollection<SocketGuildUser>> GetUsersAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<SocketGuildUser>> 分页的用户集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取拥有此角色的所有服务器用户。此方法会根据 MaxUsersPerBatch 将请求拆分。换句话说，如果存在 500 个用户拥有此角色，而 MaxUsersPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 ModifyAsync(Action<RoleProperties>, RequestOptions?) 修改此角色。 public Task ModifyAsync(Action<RoleProperties> func, RequestOptions? options = null) Parameters func Action<RoleProperties> 一个包含修改角色属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 Remarks 此方法使用指定的属性修改当前角色信息。要查看可用的属性，请参考 RoleProperties。 ToString() 获取此角色的名称。 public override string ToString() Returns string"
  },
  "api/Kook.WebSocket.SocketSelfUser.html": {
    "href": "api/Kook.WebSocket.SocketSelfUser.html",
    "title": "Class SocketSelfUser | Kook.Net 文档",
    "keywords": "Class SocketSelfUser Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的当前登录的用户信息。 public class SocketSelfUser : SocketUser, ISelfUser, IUser, IEntity<ulong>, IMentionable, IPresence, IUpdateable Inheritance object SocketEntity<ulong> SocketUser SocketSelfUser Implements ISelfUser IUser IEntity<ulong> IMentionable IPresence IUpdateable Inherited Members SocketUser.IsSystemUser SocketUser.IdentifyNumber SocketUser.KMarkdownMention SocketUser.PlainTextMention SocketUser.IsOnline SocketUser.ActiveClient SocketUser.CreateDMChannelAsync(RequestOptions) SocketUser.GetIntimacyAsync(RequestOptions) SocketUser.UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) SocketUser.BlockAsync(RequestOptions) SocketUser.UnblockAsync(RequestOptions) SocketUser.RequestFriendAsync(RequestOptions) SocketUser.RemoveFriendAsync(RequestOptions) SocketUser.ToString() SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Format.UsernameAndIdentifyNumber(IUser, bool) UserExtensions.SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendTextAsync(IUser, string, IQuote?, RequestOptions?) Properties Avatar 获取此用户的头像图像的 URL。 public override string Avatar { get; } Property Value string Remarks 如果此用户为 BUFF 会员，且以 BUFF 会员权益设置了头像，则此属性返回的 URL 表示的是 BUFF 专属头像权益时效后的回退头像。 Banner 获取此用户的横幅图像的 URL。 public override string? Banner { get; } Property Value string Remarks 如果此用户不是 BUFF 会员，或未以 BUFF 会员权限设置横幅，则此属性返回 null。 BuffAvatar 获取此用户以 BUFF 会员权益设置的头像图像的 URL。 public override string? BuffAvatar { get; } Property Value string Remarks 如果此用户不是 BUFF 会员，或未以 BUFF 会员权限设置头像，则此属性返回 null。 HasAnnualBuff 获取此用户是否订阅了年度 BUFF 会员。 public override bool? HasAnnualBuff { get; } Property Value bool? Remarks 如果未知此用户是否订阅了年度 BUFF 会员，则此属性返回 null。 HasBuff 获取此用户是否订阅了 BUFF 会员。 public override bool? HasBuff { get; } Property Value bool? Remarks 如果未知此用户是否订阅了 BUFF 会员，则此属性返回 null。 IdentifyNumberValue 获取此用户识别号的数值形式。 public override ushort IdentifyNumberValue { get; } Property Value ushort InvitedCount 获取此用户的邀请用户数。 public int InvitedCount { get; } Property Value int IsBanned 获取此用户是否被封禁。 public override bool? IsBanned { get; } Property Value bool? Remarks 如果未知此用户是否被封禁，则此属性返回 null。 IsBot 获取此用户是否为 Bot。 public override bool? IsBot { get; } Property Value bool? Remarks 如果未知此用户是否为 Bot，则此属性返回 null。 IsDenoiseEnabled 获取此用户是否启用了降噪功能。 public override bool? IsDenoiseEnabled { get; } Property Value bool? Remarks 如果未知此用户是否启用了降噪功能，则此属性返回 null。 IsMobileVerified 获取此用户是否验证了手机号码。 public bool IsMobileVerified { get; } Property Value bool Mobile 获取此用户的手机号码。 public string? Mobile { get; } Property Value string MobilePrefix 获取此用户的手机号码前缀。 public string? MobilePrefix { get; } Property Value string Nameplates 获取此用户设置展示的所有铭牌。 public override IReadOnlyCollection<Nameplate> Nameplates { get; } Property Value IReadOnlyCollection<Nameplate> Remarks 用户设置的首个铭牌会展示在该用户聊天消息的用户名的右侧，用户设置的所有铭牌会展示在个人信息面板内的用户名下方。 UserTag 获取此用户的标签信息。 public override UserTag? UserTag { get; } Property Value UserTag Remarks 用户的标签会显示在服务器用户列表、私信列表、私信消息页、好友列表、个人信息面板、聊天消息的用户名的右侧。 如果此用户没有标签，或未知此用户的标签信息，则此属性返回 null。 Username 获取此用户的用户名。 public override string Username { get; } Property Value string Methods StartPlayingAsync(IGame, RequestOptions?) 开始一个新的游戏活动。 public Task StartPlayingAsync(IGame game, RequestOptions? options = null) Parameters game IGame 要显示的游戏。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步开始操作的任务。 Remarks 此操作会使当前用户的资料卡片上显式指定的游戏信息。 StartPlayingAsync(Music, RequestOptions?) 开始一个新的听音乐活动。 public Task StartPlayingAsync(Music music, RequestOptions? options = null) Parameters music Music 要播放的音乐。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步开始操作的任务。 Remarks 此操作会使当前用户的资料卡片上显式指定的音乐信息。 StopPlayingAsync(ActivityType, RequestOptions?) 停止活动。 public Task StopPlayingAsync(ActivityType type, RequestOptions? options = null) Parameters type ActivityType 要停止的活动类型。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步停止操作的任务。 Remarks 此操作会使当前用户的资料卡片上不再显示指定的活动信息。 UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 public Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 KOOK REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 KOOK 服务端的数据。"
  },
  "api/Kook.WebSocket.SocketSystemMessage.html": {
    "href": "api/Kook.WebSocket.SocketSystemMessage.html",
    "title": "Class SocketSystemMessage | Kook.Net 文档",
    "keywords": "Class SocketSystemMessage Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的系统消息。 public class SocketSystemMessage : SocketMessage, IUpdateable, ISystemMessage, IMessage, IEntity<Guid>, IDeletable Inheritance object SocketEntity<Guid> SocketMessage SocketSystemMessage Implements IUpdateable ISystemMessage IMessage IEntity<Guid> IDeletable Inherited Members SocketMessage.Author SocketMessage.Channel SocketMessage.Source SocketMessage.Content SocketMessage.RawContent SocketMessage.CleanContent SocketMessage.Timestamp SocketMessage.EditedTimestamp SocketMessage.IsPinned SocketMessage.MentionedEveryone SocketMessage.MentionedHere SocketMessage.Type SocketMessage.Attachments SocketMessage.Cards SocketMessage.Embeds SocketMessage.Pokes SocketMessage.MentionedRoles SocketMessage.MentionedUsers SocketMessage.Tags SocketMessage.Reactions SocketMessage.DeleteAsync(RequestOptions) SocketMessage.UpdateAsync(RequestOptions) SocketMessage.AddReactionAsync(IEmote, RequestOptions) SocketMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) SocketMessage.RemoveReactionAsync(IEmote, ulong, RequestOptions) SocketMessage.GetReactionUsersAsync(IEmote, RequestOptions) SocketMessage.ToString() SocketEntity<Guid>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods MessageExtensions.GetJumpUrl(IMessage) Remarks warning KOOK 未统一规范系统消息类型，此接口并未在 SocketMessage 之上封装更多的实用功能。 Properties SystemMessageType 获取此系统消息的类型。 public SystemMessageType SystemMessageType { get; } Property Value SystemMessageType"
  },
  "api/Kook.WebSocket.SocketTextChannel.html": {
    "href": "api/Kook.WebSocket.SocketTextChannel.html",
    "title": "Class SocketTextChannel | Kook.Net 文档",
    "keywords": "Class SocketTextChannel Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示服务器中一个基于网关的具有文字聊天能力的频道，可以发送和接收消息。 public class SocketTextChannel : SocketGuildChannel, IUpdateable, ITextChannel, INestedChannel, IGuildChannel, IDeletable, IMentionable, ISocketMessageChannel, IMessageChannel, IChannel, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketChannel SocketGuildChannel SocketTextChannel Implements IUpdateable ITextChannel INestedChannel IGuildChannel IDeletable IMentionable ISocketMessageChannel IMessageChannel IChannel IEntity<ulong> Derived SocketVoiceChannel Inherited Members SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Position SocketGuildChannel.Type SocketGuildChannel.CreatorId SocketGuildChannel.Creator SocketGuildChannel.RolePermissionOverwrites SocketGuildChannel.UserPermissionOverwrites SocketGuildChannel.UpdateAsync(RequestOptions) SocketGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) SocketGuildChannel.DeleteAsync(RequestOptions) SocketGuildChannel.GetPermissionOverwrite(IUser) SocketGuildChannel.GetPermissionOverwrite(IRole) SocketGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) SocketGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) SocketGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) SocketGuildChannel.ToString() SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties CachedMessages 获取此频道缓存的所有消息。 public IReadOnlyCollection<SocketMessage> CachedMessages { get; } Property Value IReadOnlyCollection<SocketMessage> Remarks warning 要想通过此属性获取缓存的消息，需要启用缓存功能，否则此属性将始终返回空集合。缓存功能是默认禁用的，要想启用缓存，请参考 MessageCacheSize。 此属性从本地的内存缓存中获取消息实体，不会向 KOOK 发送额外的 API 请求。所获取的消息也可能是已经被删除的消息。 Category 获取此嵌套频道在服务器频道列表中所属的分组频道的。 public ICategoryChannel? Category { get; } Property Value ICategoryChannel Remarks 如果当前频道不属于任何分组频道，则会返回 null。 CategoryId 获取此嵌套频道在服务器频道列表中所属的分组频道的 ID。 public ulong? CategoryId { get; } Property Value ulong? Remarks 如果当前频道不属于任何分组频道，则会返回 null。 IsPermissionSynced 指示此嵌套频道的权限是否与其所属分组频道同步。 public bool? IsPermissionSynced { get; } Property Value bool? Remarks 如果权限同步，则此属性返回 true；如果权限不同步，则返回 false；如果无法确定权限是否同步，则返回 null。 KMarkdownMention 返回一个用于在 KMarkdown 格式文本中提及此对象的格式化字符串。 public string KMarkdownMention { get; } Property Value string PlainTextMention 获取一个用于在纯文本格式文本中提及此对象的格式化字符串。 public string PlainTextMention { get; } Property Value string SlowModeInterval 获取此频道当前设置的慢速模式延迟。 public int SlowModeInterval { get; } Property Value int 一个 int，表示用户在可以发送另一条消息之前需要等待的时间（以秒为单位）；如果未启用，则为 0。 Remarks 拥有 ManageMessages 或 ManageChannels 权限的用户不受慢速模式延迟的限制。 Topic 获取此频道的说明。 public string Topic { get; } Property Value string Users 获取用户缓存列表中的可以访问此频道的所有用户。 public override IReadOnlyCollection<SocketGuildUser> Users { get; } Property Value IReadOnlyCollection<SocketGuildUser> Remarks 此属性仅会返回缓存中可以访问此频道的所有用户，如果未启用用户列表缓存，或者由于网关事件确实导致本地缓存不同步，此属性所返回的用户列表可能不准确。 Methods CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions?) 创建一个到此频道新邀请。 public Task<IInvite> CreateInviteAsync(InviteMaxAge maxAge = InviteMaxAge._604800, InviteMaxUses maxUses = InviteMaxUses.Unlimited, RequestOptions? options = null) Parameters maxAge InviteMaxAge 邀请链接的有效时长，NeverExpires 表示永不过期。 maxUses InviteMaxUses 邀请链接的可用人次，Unlimited 表示无限制。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IInvite> 一个表示异步邀请创建操作的任务。任务的结果包含所创建的邀请链接的元数据，其中包含有关邀请链接的信息。 CreateInviteAsync(int?, int?, RequestOptions?) 创建一个到此频道新邀请。 public Task<IInvite> CreateInviteAsync(int? maxAge = 604800, int? maxUses = null, RequestOptions? options = null) Parameters maxAge int? 邀请链接的有效时长，null 表示永不过期。 maxUses int? 邀请链接的可用人次，null 表示无限制。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IInvite> 一个表示异步邀请创建操作的任务。任务的结果包含所创建的邀请链接的元数据，其中包含有关邀请链接的信息。 DeleteMessageAsync(IMessage, RequestOptions?) 删除一条消息. public Task DeleteMessageAsync(IMessage message, RequestOptions? options = null) Parameters message IMessage 要删除的消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步删除操作的任务。 DeleteMessageAsync(Guid, RequestOptions?) 删除一条消息。 public Task DeleteMessageAsync(Guid messageId, RequestOptions? options = null) Parameters messageId Guid 要删除的消息的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步删除操作的任务。 GetCachedMessage(Guid) 获取此频道缓存的消息。 public SocketMessage? GetCachedMessage(Guid id) Parameters id Guid 消息的 ID。 Returns SocketMessage 如果获取到了缓存的消息，则返回该消息实体；否则返回 null。 Remarks warning 要想通过此方法获取缓存的消息，需要启用缓存功能，否则此方法将始终返回 null。缓存功能是默认禁用的，要想启用缓存，请参考 MessageCacheSize。 此方法从本地的内存缓存中获取消息实体，不会向 KOOK 发送额外的 API 请求。所获取的消息也可能是已经被删除的消息。 GetCachedMessages(IMessage, Direction, int) 获取此频道缓存的多条消息。 public IReadOnlyCollection<SocketMessage> GetCachedMessages(IMessage referenceMessage, Direction dir, int limit = 50) Parameters referenceMessage IMessage 要开始获取消息的参考位置的消息。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 Returns IReadOnlyCollection<SocketMessage> 获取到的多条缓存消息。 Remarks warning 要想通过此方法获取缓存的消息，需要启用缓存功能，否则此方法将始终返回空集合。缓存功能是默认禁用的，要想启用缓存，请参考 MessageCacheSize。 此方法从本地的内存缓存中获取消息实体，不会向 KOOK 发送额外的 API 请求。所获取的消息也可能是已经被删除的消息。 GetCachedMessages(Guid, Direction, int) 获取此频道缓存的多条消息。 public IReadOnlyCollection<SocketMessage> GetCachedMessages(Guid referenceMessageId, Direction dir, int limit = 50) Parameters referenceMessageId Guid 要开始获取消息的参考位置的消息的 ID。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 Returns IReadOnlyCollection<SocketMessage> 获取到的多条缓存消息。 Remarks warning 要想通过此方法获取缓存的消息，需要启用缓存功能，否则此方法将始终返回空集合。缓存功能是默认禁用的，要想启用缓存，请参考 MessageCacheSize。 此方法从本地的内存缓存中获取消息实体，不会向 KOOK 发送额外的 API 请求。所获取的消息也可能是已经被删除的消息。 GetCachedMessages(int) 获取此频道缓存的多条消息。 public IReadOnlyCollection<SocketMessage> GetCachedMessages(int limit = 50) Parameters limit int 要获取的缓存消息的数量。 Returns IReadOnlyCollection<SocketMessage> 此频道缓存的所有消息。 Remarks 此重载将会从缓存中获取最新的指定数量的缓存消息实体。 warning 要想通过此方法获取缓存的消息，需要启用缓存功能，否则此方法将始终返回空集合。缓存功能是默认禁用的，要想启用缓存，请参考 MessageCacheSize。 此方法从本地的内存缓存中获取消息实体，不会向 KOOK 发送额外的 API 请求。所获取的消息也可能是已经被删除的消息。 GetInvitesAsync(RequestOptions?) 获取此嵌套频道的所有邀请信息。 public Task<IReadOnlyCollection<IInvite>> GetInvitesAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<IInvite>> 一个表示异步获取操作的任务。任务的结果包含此频道中找到的所有邀请信息。 GetMessageAsync(Guid, RequestOptions?) 从此消息频道获取一条消息。 public Task<IMessage> GetMessageAsync(Guid id, RequestOptions? options = null) Parameters id Guid 消息的 ID。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IMessage> 一个表示异步获取操作的任务。任务结果包含检索到的消息；如果未找到具有指定 ID 的消息，则返回 null。 GetMessagesAsync(IMessage, Direction, int, RequestOptions?) 获取此消息频道中的一些消息。 public virtual IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessage IMessage 要开始获取消息的参考位置的消息。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 GetMessagesAsync(Guid, Direction, int, RequestOptions?) 获取此消息频道中的一些消息。 public virtual IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessageId Guid 要开始获取消息的参考位置的消息的 ID。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 GetMessagesAsync(int, RequestOptions?) 获取此消息频道中的最新的一些消息。 public virtual IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(int limit = 50, RequestOptions? options = null) Parameters limit int 要获取的消息数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 GetPinnedMessagesAsync(RequestOptions?) 获取此频道中的所有置顶消息。 public Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<RestMessage>> 一个表示异步获取操作的任务。任务的结果包含此频道中找到的所有置顶消息。 GetUser(ulong) 获取此频道中的一个服务器用户。 public override SocketGuildUser? GetUser(ulong id) Parameters id ulong 要获取的服务器用户的 ID。 Returns SocketGuildUser 如果找到了具有指定 ID 的服务器用户，则返回该用户；否则返回 null。 ModifyAsync(Action<ModifyTextChannelProperties>, RequestOptions?) 修改此频道有关文字聊天能力的属性。 public virtual Task ModifyAsync(Action<ModifyTextChannelProperties> func, RequestOptions? options = null) Parameters func Action<ModifyTextChannelProperties> 一个包含修改频道有关文字聊天能力的属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 See Also ModifyTextChannelProperties ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions?) 修改一条消息。 public Task ModifyMessageAsync(Guid messageId, Action<MessageProperties> func, RequestOptions? options = null) Parameters messageId Guid 要修改的消息的 ID。 func Action<MessageProperties> 一个包含修改消息属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 See Also MessageProperties SendCardAsync(ICard, IQuote?, IUser?, RequestOptions?) 发送卡片消息到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendCardAsync(ICard card, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters card ICard 要发送的卡片。 quote IQuote 消息引用，用于回复消息。 ephemeralUser IUser 临时消息的接收者。如果设置为指定的用户，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendCardsAsync(IEnumerable<ICard>, IQuote?, IUser?, RequestOptions?) 发送卡片消息到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendCardsAsync(IEnumerable<ICard> cards, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters cards IEnumerable<ICard> 要发送的卡片。 quote IQuote 消息引用，用于回复消息。 ephemeralUser IUser 临时消息的接收者。如果设置为指定的用户，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendFileAsync(FileAttachment, IQuote?, IUser?, RequestOptions?) 发送文件到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(FileAttachment attachment, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters attachment FileAttachment 文件的附件信息。 quote IQuote 消息引用，用于回复消息。 ephemeralUser IUser 临时消息的接收者。如果设置为指定的用户，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendFileAsync(Stream, string, AttachmentType, IQuote?, IUser?, RequestOptions?) 发送文件到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(Stream stream, string filename, AttachmentType type = AttachmentType.File, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters stream Stream 文件的流。 filename string 文件名。 type AttachmentType 文件的媒体类型。 quote IQuote 消息引用，用于回复消息。 ephemeralUser IUser 临时消息的接收者。如果设置为指定的用户，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendFileAsync(string, string?, AttachmentType, IQuote?, IUser?, RequestOptions?) 发送文件到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendFileAsync(string path, string? filename = null, AttachmentType type = AttachmentType.File, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters path string 文件的路径。 filename string 文件名。 type AttachmentType 文件的媒体类型。 quote IQuote 消息引用，用于回复消息。 ephemeralUser IUser 临时消息的接收者。如果设置为指定的用户，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SendTextAsync(string, IQuote?, IUser?, RequestOptions?) 发送文本消息到此消息频道。 public Task<Cacheable<IUserMessage, Guid>> SendTextAsync(string text, IQuote? quote = null, IUser? ephemeralUser = null, RequestOptions? options = null) Parameters text string 要发送的文本。 quote IQuote 消息引用，用于回复消息。 ephemeralUser IUser 临时消息的接收者。如果设置为指定的用户，则仅该用户可以看到此消息，否则所有人都可以看到此消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, Guid>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。 SyncPermissionsAsync(RequestOptions?) 同步此嵌套频道的权限配置与其所属分组频道一致，并保持同步。 public virtual Task SyncPermissionsAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步频道权限同步操作的任务。"
  },
  "api/Kook.WebSocket.SocketUnknownUser.html": {
    "href": "api/Kook.WebSocket.SocketUnknownUser.html",
    "title": "Class SocketUnknownUser | Kook.Net 文档",
    "keywords": "Class SocketUnknownUser Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的未知用户。 public class SocketUnknownUser : SocketUser, IUser, IEntity<ulong>, IMentionable, IPresence Inheritance object SocketEntity<ulong> SocketUser SocketUnknownUser Implements IUser IEntity<ulong> IMentionable IPresence Inherited Members SocketUser.IsSystemUser SocketUser.IdentifyNumber SocketUser.KMarkdownMention SocketUser.PlainTextMention SocketUser.IsOnline SocketUser.ActiveClient SocketUser.CreateDMChannelAsync(RequestOptions) SocketUser.GetIntimacyAsync(RequestOptions) SocketUser.UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions) SocketUser.BlockAsync(RequestOptions) SocketUser.UnblockAsync(RequestOptions) SocketUser.RequestFriendAsync(RequestOptions) SocketUser.RemoveFriendAsync(RequestOptions) SocketUser.ToString() SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Format.UsernameAndIdentifyNumber(IUser, bool) UserExtensions.SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendTextAsync(IUser, string, IQuote?, RequestOptions?) Remarks 如果用户未能被识别，或缓存中不存在该用户，则会使用此类型的用户实体设置需要用户实体的属性。 Properties Avatar 获取此用户的头像图像的 URL。 public override string Avatar { get; } Property Value string Remarks 如果此用户为 BUFF 会员，且以 BUFF 会员权益设置了头像，则此属性返回的 URL 表示的是 BUFF 专属头像权益时效后的回退头像。 Banner 获取此用户的横幅图像的 URL。 public override string? Banner { get; } Property Value string Remarks 如果此用户不是 BUFF 会员，或未以 BUFF 会员权限设置横幅，则此属性返回 null。 BuffAvatar 获取此用户以 BUFF 会员权益设置的头像图像的 URL。 public override string? BuffAvatar { get; } Property Value string Remarks 如果此用户不是 BUFF 会员，或未以 BUFF 会员权限设置头像，则此属性返回 null。 HasAnnualBuff 获取此用户是否订阅了年度 BUFF 会员。 public override bool? HasAnnualBuff { get; } Property Value bool? Remarks 如果未知此用户是否订阅了年度 BUFF 会员，则此属性返回 null。 HasBuff 获取此用户是否订阅了 BUFF 会员。 public override bool? HasBuff { get; } Property Value bool? Remarks 如果未知此用户是否订阅了 BUFF 会员，则此属性返回 null。 IdentifyNumberValue 获取此用户识别号的数值形式。 public override ushort IdentifyNumberValue { get; } Property Value ushort IsBanned 获取此用户是否被封禁。 public override bool? IsBanned { get; } Property Value bool? Remarks 如果未知此用户是否被封禁，则此属性返回 null。 IsBot 获取此用户是否为 Bot。 public override bool? IsBot { get; } Property Value bool? Remarks 如果未知此用户是否为 Bot，则此属性返回 null。 IsDenoiseEnabled 获取此用户是否启用了降噪功能。 public override bool? IsDenoiseEnabled { get; } Property Value bool? Remarks 如果未知此用户是否启用了降噪功能，则此属性返回 null。 Nameplates 获取此用户设置展示的所有铭牌。 public override IReadOnlyCollection<Nameplate> Nameplates { get; } Property Value IReadOnlyCollection<Nameplate> Remarks 用户设置的首个铭牌会展示在该用户聊天消息的用户名的右侧，用户设置的所有铭牌会展示在个人信息面板内的用户名下方。 UserTag 获取此用户的标签信息。 public override UserTag? UserTag { get; } Property Value UserTag Remarks 用户的标签会显示在服务器用户列表、私信列表、私信消息页、好友列表、个人信息面板、聊天消息的用户名的右侧。 如果此用户没有标签，或未知此用户的标签信息，则此属性返回 null。 Username 获取此用户的用户名。 public override string Username { get; } Property Value string"
  },
  "api/Kook.WebSocket.SocketUser.html": {
    "href": "api/Kook.WebSocket.SocketUser.html",
    "title": "Class SocketUser | Kook.Net 文档",
    "keywords": "Class SocketUser Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的用户。 public abstract class SocketUser : SocketEntity<ulong>, IUser, IEntity<ulong>, IMentionable, IPresence Inheritance object SocketEntity<ulong> SocketUser Implements IUser IEntity<ulong> IMentionable IPresence Derived SocketGuildUser SocketSelfUser SocketUnknownUser Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Format.UsernameAndIdentifyNumber(IUser, bool) UserExtensions.SendCardAsync(IUser, ICard, IQuote?, RequestOptions?) UserExtensions.SendCardsAsync(IUser, IEnumerable<ICard>, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, FileAttachment, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, Stream, string, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendFileAsync(IUser, string, string?, AttachmentType, IQuote?, RequestOptions?) UserExtensions.SendTextAsync(IUser, string, IQuote?, RequestOptions?) Properties ActiveClient 获取此用于当前登录的客户端类型。 public ClientType? ActiveClient { get; } Property Value ClientType? Avatar 获取此用户的头像图像的 URL。 public abstract string Avatar { get; } Property Value string Remarks 如果此用户为 BUFF 会员，且以 BUFF 会员权益设置了头像，则此属性返回的 URL 表示的是 BUFF 专属头像权益时效后的回退头像。 Banner 获取此用户的横幅图像的 URL。 public abstract string? Banner { get; } Property Value string Remarks 如果此用户不是 BUFF 会员，或未以 BUFF 会员权限设置横幅，则此属性返回 null。 BuffAvatar 获取此用户以 BUFF 会员权益设置的头像图像的 URL。 public abstract string? BuffAvatar { get; } Property Value string Remarks 如果此用户不是 BUFF 会员，或未以 BUFF 会员权限设置头像，则此属性返回 null。 HasAnnualBuff 获取此用户是否订阅了年度 BUFF 会员。 public abstract bool? HasAnnualBuff { get; } Property Value bool? Remarks 如果未知此用户是否订阅了年度 BUFF 会员，则此属性返回 null。 HasBuff 获取此用户是否订阅了 BUFF 会员。 public abstract bool? HasBuff { get; } Property Value bool? Remarks 如果未知此用户是否订阅了 BUFF 会员，则此属性返回 null。 IdentifyNumber 获取此用户的识别号。 public string IdentifyNumber { get; } Property Value string IdentifyNumberValue 获取此用户识别号的数值形式。 public abstract ushort IdentifyNumberValue { get; } Property Value ushort IsBanned 获取此用户是否被封禁。 public abstract bool? IsBanned { get; } Property Value bool? Remarks 如果未知此用户是否被封禁，则此属性返回 null。 IsBot 获取此用户是否为 Bot。 public abstract bool? IsBot { get; } Property Value bool? Remarks 如果未知此用户是否为 Bot，则此属性返回 null。 IsDenoiseEnabled 获取此用户是否启用了降噪功能。 public abstract bool? IsDenoiseEnabled { get; } Property Value bool? Remarks 如果未知此用户是否启用了降噪功能，则此属性返回 null。 IsOnline 获取此用户当前是否在线。 public bool? IsOnline { get; } Property Value bool? IsSystemUser 获取此用户是否为系统用户。 public bool IsSystemUser { get; } Property Value bool KMarkdownMention 返回一个用于在 KMarkdown 格式文本中提及此对象的格式化字符串。 public string KMarkdownMention { get; } Property Value string Nameplates 获取此用户设置展示的所有铭牌。 public abstract IReadOnlyCollection<Nameplate> Nameplates { get; } Property Value IReadOnlyCollection<Nameplate> Remarks 用户设置的首个铭牌会展示在该用户聊天消息的用户名的右侧，用户设置的所有铭牌会展示在个人信息面板内的用户名下方。 PlainTextMention 获取一个用于在纯文本格式文本中提及此对象的格式化字符串。 public string PlainTextMention { get; } Property Value string UserTag 获取此用户的标签信息。 public abstract UserTag? UserTag { get; } Property Value UserTag Remarks 用户的标签会显示在服务器用户列表、私信列表、私信消息页、好友列表、个人信息面板、聊天消息的用户名的右侧。 如果此用户没有标签，或未知此用户的标签信息，则此属性返回 null。 Username 获取此用户的用户名。 public abstract string Username { get; } Property Value string Methods BlockAsync(RequestOptions?) 屏蔽此用户。 public Task BlockAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步屏蔽操作的任务。 CreateDMChannelAsync(RequestOptions?) 创建一个用于与此用户收发私信的频道。 public Task<SocketDMChannel> CreateDMChannelAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<SocketDMChannel> 一个表示异步创建操作的任务。任务结果包含与此用户相关的私信频道。 GetIntimacyAsync(RequestOptions?) 获取与此用户的亲密度信息。 public Task<RestIntimacy> GetIntimacyAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task<RestIntimacy> 一个表示异步获取操作的任务。任务结果包含与此用户的亲密度信息。 RemoveFriendAsync(RequestOptions?) 移除与此用户的好友关系。 public Task RemoveFriendAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步移除操作的任务。 RequestFriendAsync(RequestOptions?) 向此用户发送好友请求。 public Task RequestFriendAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步发送操作的任务。 ToString() 获取此用户的包含用户名及识别号的格式化字符串。 public override string ToString() Returns string 一个表示此用户的包含用户名及识别号的格式化字符串。 See Also UsernameAndIdentifyNumber(IUser, bool) UnblockAsync(RequestOptions?) 取消屏蔽此用户。 public Task UnblockAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步取消操作的任务。 UpdateIntimacyAsync(Action<IntimacyProperties>, RequestOptions?) 修改与此用户的亲密度信息。 public Task UpdateIntimacyAsync(Action<IntimacyProperties> func, RequestOptions? options = null) Parameters func Action<IntimacyProperties> 一个用于修改亲密度信息的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 Remarks 此方法使用指定的属性修改与此用户的亲密度信息。要查看可用的属性，请参考 IntimacyProperties。"
  },
  "api/Kook.WebSocket.SocketUserMessage.html": {
    "href": "api/Kook.WebSocket.SocketUserMessage.html",
    "title": "Class SocketUserMessage | Kook.Net 文档",
    "keywords": "Class SocketUserMessage Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的用户消息。 public class SocketUserMessage : SocketMessage, IUpdateable, IUserMessage, IMessage, IEntity<Guid>, IDeletable Inheritance object SocketEntity<Guid> SocketMessage SocketUserMessage Implements IUpdateable IUserMessage IMessage IEntity<Guid> IDeletable Inherited Members SocketMessage.Author SocketMessage.Channel SocketMessage.Source SocketMessage.Content SocketMessage.RawContent SocketMessage.CleanContent SocketMessage.Timestamp SocketMessage.EditedTimestamp SocketMessage.Type SocketMessage.MentionedUsers SocketMessage.Reactions SocketMessage.DeleteAsync(RequestOptions) SocketMessage.UpdateAsync(RequestOptions) SocketMessage.AddReactionAsync(IEmote, RequestOptions) SocketMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) SocketMessage.RemoveReactionAsync(IEmote, ulong, RequestOptions) SocketMessage.GetReactionUsersAsync(IEmote, RequestOptions) SocketMessage.ToString() SocketEntity<Guid>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods MessageExtensions.GetJumpUrl(IMessage) MessageExtensions.HasCharPrefix(IUserMessage, char, ref int) MessageExtensions.HasMentionPrefix(IUserMessage, IUser, ref int) MessageExtensions.HasStringPrefix(IUserMessage, string, ref int, StringComparison) MessageExtensions.TryExpandCardContent(IUserMessage, out string?) MessageExtensions.AddReactionsAsync(IUserMessage, IEnumerable<IEmote>, RequestOptions?) MessageExtensions.MaybeTextImageMixedMessage(IUserMessage) MessageExtensions.RemoveReactionsAsync(IUserMessage, IUser, IEnumerable<IEmote>, RequestOptions?) MessageExtensions.ReplyCardAsync(IUserMessage, ICard, bool, bool, RequestOptions?) MessageExtensions.ReplyCardsAsync(IUserMessage, IEnumerable<ICard>, bool, bool, RequestOptions?) MessageExtensions.ReplyFileAsync(IUserMessage, FileAttachment, bool, bool, RequestOptions?) MessageExtensions.ReplyFileAsync(IUserMessage, Stream, string, AttachmentType, bool, bool, RequestOptions?) MessageExtensions.ReplyFileAsync(IUserMessage, string, string?, AttachmentType, bool, bool, RequestOptions?) MessageExtensions.ReplyTextAsync(IUserMessage, string, bool, bool, RequestOptions?) Properties Attachments 获取此消息中包含的所有附件。 public override IReadOnlyCollection<Attachment> Attachments { get; } Property Value IReadOnlyCollection<Attachment> Remarks 此属性也会包含从卡片中解析出来的附件信息。 Cards 获取此消息中包含的所有卡片。 public override IReadOnlyCollection<ICard> Cards { get; } Property Value IReadOnlyCollection<ICard> Embeds 获取此消息中包含的所有嵌入式内容。 public override IReadOnlyCollection<IEmbed> Embeds { get; } Property Value IReadOnlyCollection<IEmbed> Guild 获取此消息所属的服务器。 public SocketGuild? Guild { get; } Property Value SocketGuild IsPinned 获取此消息是否被置顶。 public override bool IsPinned { get; protected set; } Property Value bool MentionedChannels 获取此消息中提及的所有频道。 public IReadOnlyCollection<SocketGuildChannel> MentionedChannels { get; } Property Value IReadOnlyCollection<SocketGuildChannel> MentionedEveryone 获取此消息是否提及了全体成员。 public override bool MentionedEveryone { get; } Property Value bool MentionedHere 获取此消息是否提及了在线成员。 public override bool MentionedHere { get; } Property Value bool MentionedRoles 获取此消息中提及的所有角色。 public override IReadOnlyCollection<SocketRole> MentionedRoles { get; } Property Value IReadOnlyCollection<SocketRole> Pokes 获取此消息中包含的所有 POKE。 public override IReadOnlyCollection<SocketPokeAction> Pokes { get; } Property Value IReadOnlyCollection<SocketPokeAction> Quote 获取消息的引用。 public IQuote? Quote { get; } Property Value IQuote Tags 获取此消息中解析出的所有标签。 public override IReadOnlyCollection<ITag> Tags { get; } Property Value IReadOnlyCollection<ITag> Methods ModifyAsync(Action<MessageProperties>, RequestOptions?) 修改此消息。 public Task ModifyAsync(Action<MessageProperties> func, RequestOptions? options = null) Parameters func Action<MessageProperties> 一个包含修改消息属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 See Also MessageProperties Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) 转换消息文本中的提及与表情符号为可读形式。 public string Resolve(TagHandling userHandling = TagHandling.Name, TagHandling channelHandling = TagHandling.Name, TagHandling roleHandling = TagHandling.Name, TagHandling everyoneHandling = TagHandling.Name, TagHandling emojiHandling = TagHandling.Name) Parameters userHandling TagHandling 指定用户提及标签的处理方式。 channelHandling TagHandling 指定频道提及标签的处理方式。 roleHandling TagHandling 指定角色提及标签的处理方式。 everyoneHandling TagHandling 指定全体成员与在线成员提及标签的处理方式。 emojiHandling TagHandling 指定表情符号标签的处理方式。 Returns string 转换后的消息文本。 Resolve(int, TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) 转换消息文本中的提及与表情符号为可读形式。 public string Resolve(int startIndex, TagHandling userHandling = TagHandling.Name, TagHandling channelHandling = TagHandling.Name, TagHandling roleHandling = TagHandling.Name, TagHandling everyoneHandling = TagHandling.Name, TagHandling emojiHandling = TagHandling.Name) Parameters startIndex int 指定要开始解析的位置。 userHandling TagHandling 指定用户提及标签的处理方式。 channelHandling TagHandling 指定频道提及标签的处理方式。 roleHandling TagHandling 指定角色提及标签的处理方式。 everyoneHandling TagHandling 指定全体成员与在线成员提及标签的处理方式。 emojiHandling TagHandling 指定表情符号标签的处理方式。 Returns string 转换后的消息文本。"
  },
  "api/Kook.WebSocket.SocketVoiceChannel.html": {
    "href": "api/Kook.WebSocket.SocketVoiceChannel.html",
    "title": "Class SocketVoiceChannel | Kook.Net 文档",
    "keywords": "Class SocketVoiceChannel Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示服务器中的一个基于网关的具有语音聊天能力的频道。 public class SocketVoiceChannel : SocketTextChannel, IUpdateable, ISocketMessageChannel, IVoiceChannel, ITextChannel, INestedChannel, IGuildChannel, IDeletable, IMentionable, IMessageChannel, ISocketAudioChannel, IAudioChannel, IChannel, IEntity<ulong>, IDisposable Inheritance object SocketEntity<ulong> SocketChannel SocketGuildChannel SocketTextChannel SocketVoiceChannel Implements IUpdateable ISocketMessageChannel IVoiceChannel ITextChannel INestedChannel IGuildChannel IDeletable IMentionable IMessageChannel ISocketAudioChannel IAudioChannel IChannel IEntity<ulong> IDisposable Inherited Members SocketTextChannel.Topic SocketTextChannel.SlowModeInterval SocketTextChannel.CategoryId SocketTextChannel.Category SocketTextChannel.IsPermissionSynced SocketTextChannel.KMarkdownMention SocketTextChannel.PlainTextMention SocketTextChannel.CachedMessages SocketTextChannel.ModifyAsync(Action<ModifyTextChannelProperties>, RequestOptions) SocketTextChannel.SyncPermissionsAsync(RequestOptions) SocketTextChannel.GetCachedMessage(Guid) SocketTextChannel.GetMessageAsync(Guid, RequestOptions) SocketTextChannel.GetCachedMessages(int) SocketTextChannel.GetCachedMessages(Guid, Direction, int) SocketTextChannel.GetCachedMessages(IMessage, Direction, int) SocketTextChannel.GetPinnedMessagesAsync(RequestOptions) SocketTextChannel.SendFileAsync(string, string, AttachmentType, IQuote, IUser, RequestOptions) SocketTextChannel.SendFileAsync(Stream, string, AttachmentType, IQuote, IUser, RequestOptions) SocketTextChannel.SendFileAsync(FileAttachment, IQuote, IUser, RequestOptions) SocketTextChannel.SendTextAsync(string, IQuote, IUser, RequestOptions) SocketTextChannel.SendCardsAsync(IEnumerable<ICard>, IQuote, IUser, RequestOptions) SocketTextChannel.SendCardAsync(ICard, IQuote, IUser, RequestOptions) SocketTextChannel.ModifyMessageAsync(Guid, Action<MessageProperties>, RequestOptions) SocketTextChannel.DeleteMessageAsync(Guid, RequestOptions) SocketTextChannel.DeleteMessageAsync(IMessage, RequestOptions) SocketTextChannel.GetInvitesAsync(RequestOptions) SocketTextChannel.CreateInviteAsync(int?, int?, RequestOptions) SocketTextChannel.CreateInviteAsync(InviteMaxAge, InviteMaxUses, RequestOptions) SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Position SocketGuildChannel.Type SocketGuildChannel.CreatorId SocketGuildChannel.Creator SocketGuildChannel.RolePermissionOverwrites SocketGuildChannel.UserPermissionOverwrites SocketGuildChannel.UpdateAsync(RequestOptions) SocketGuildChannel.ModifyAsync(Action<ModifyGuildChannelProperties>, RequestOptions) SocketGuildChannel.DeleteAsync(RequestOptions) SocketGuildChannel.GetPermissionOverwrite(IUser) SocketGuildChannel.GetPermissionOverwrite(IRole) SocketGuildChannel.AddPermissionOverwriteAsync(IGuildUser, RequestOptions) SocketGuildChannel.AddPermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IGuildUser, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.ModifyPermissionOverwriteAsync(IGuildUser, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) SocketGuildChannel.ModifyPermissionOverwriteAsync(IRole, Func<OverwritePermissions, OverwritePermissions>, RequestOptions) SocketGuildChannel.ToString() SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) ChannelExtensions.GetJumpUrl(IChannel) Properties AudioClient 获取在此音频频道上建立的语音客户端。 public IAudioClient? AudioClient { get; } Property Value IAudioClient ConnectedUsers 获取当前连接到此语音频道的所有用户。 public IReadOnlyCollection<SocketGuildUser> ConnectedUsers { get; } Property Value IReadOnlyCollection<SocketGuildUser> Remarks warning 此属性可能不会始终返回连接到此语音频道的所有成员，因为用户可能在 Bot 连接到网关之前就连接到了此语音频道。 如需准确获取所有连接到此语音频道的成员，可能需要启用 AlwaysDownloadVoiceStates，这可以让 Bot 在启动连接到网关时获取完整的语音状态。也可以调用方法 GetConnectedUsersAsync(CacheMode, RequestOptions?) 访问 API 获取连接到此语音频道的用户。 HasPassword 获取此频道是否已被密码锁定。 public bool HasPassword { get; } Property Value bool IsVoiceRegionOverwritten 获取此音频频道的语音区域设置是否覆写了服务器的语音区域设置。 public bool? IsVoiceRegionOverwritten { get; } Property Value bool? ServerUrl 获取语音客户端连接到此语音频道的语音服务器 URL。 public string? ServerUrl { get; } Property Value string UserLimit 获取允许同时连接到此频道的最大用户数。 public int UserLimit { get; } Property Value int 一个 int，表示允许同时连接到此频道的最大用户数；如果没有限制，则为 0。 Users 获取用户缓存列表中的可以访问此频道的所有用户。 public override IReadOnlyCollection<SocketGuildUser> Users { get; } Property Value IReadOnlyCollection<SocketGuildUser> Remarks 此属性仅会返回缓存中可以访问此频道的所有用户，如果未启用用户列表缓存，或者由于网关事件确实导致本地缓存不同步，此属性所返回的用户列表可能不准确。 See Also ConnectedUsers VoiceQuality 获取要求此频道中的客户端使用的语音质量。 public VoiceQuality? VoiceQuality { get; } Property Value VoiceQuality? VoiceRegion 获取此音频频道所设置的语音服务器区域。 public string? VoiceRegion { get; } Property Value string Remarks warning 对于语音频道区域设置功能发布之前创建的语音频道，该属性可能为空。 See Also Region Methods ConnectAsync(bool, bool, string?) 连接到此音频频道。 public Task<IAudioClient?> ConnectAsync(bool external = false, bool disconnect = true, string? password = null) Parameters external bool 指定语音客户端是否是由外部管理的。当设置为 true 时，当前方法不会尝试连接到语音频道。 disconnect bool 指定语音客户端在连接到新的语音频道之前是否应调用断开连接。 password string 指定客户端连接到设置了密码的语音频道时所使用的密码。 Returns Task<IAudioClient> 一个表示音频连接操作的异步任务。任务的结果是一个负责音频连接的 IAudioClient 实例；如果 external 为 true，则会返回 null。 DisconnectAsync() 断开与此音频频道的连接。 public Task DisconnectAsync() Returns Task 一个表示音频断开连接操作的异步任务。 GetConnectedUsersAsync(CacheMode, RequestOptions?) 获取连接到此频道的用户。 public Task<IReadOnlyCollection<SocketGuildUser>> GetConnectedUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions? options = null) Parameters mode CacheMode 指示当前方法是否应该仅从缓存中获取结果，还是可以通过 API 请求获取数据。 options RequestOptions 发送请求时要使用的选项。 Returns Task<IReadOnlyCollection<SocketGuildUser>> 一个表示异步获取操作的任务。任务的结果包含连接到此频道的所有服务器用户。 GetMessagesAsync(IMessage, Direction, int, RequestOptions?) 获取此消息频道中的一些消息。 public override IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(IMessage referenceMessage, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessage IMessage 要开始获取消息的参考位置的消息。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 Exceptions NotSupportedException 不支持在语音频道中获取消息。 GetMessagesAsync(Guid, Direction, int, RequestOptions?) 获取此消息频道中的一些消息。 public override IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(Guid referenceMessageId, Direction dir, int limit = 50, RequestOptions? options = null) Parameters referenceMessageId Guid 要开始获取消息的参考位置的消息的 ID。 dir Direction 要以参考位置为基准，获取消息的方向。 limit int 要获取的消息数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 Exceptions NotSupportedException 不支持在语音频道中获取消息。 GetMessagesAsync(int, RequestOptions?) 获取此消息频道中的最新的一些消息。 public override IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(int limit = 50, RequestOptions? options = null) Parameters limit int 要获取的消息数量。 options RequestOptions 发送请求时要使用的选项。 Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> 分页的消息集合的异步可枚举对象。 Remarks important 返回的集合是一个异步可枚举对象；调用 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 可以异步枚举所有分页，并将其合并为一个集合。 warning 请勿一次性获取过多消息，这可能会导致抢占式速率限制，甚至触发实际的速率限制，从而导致 Bot 服务暂停。 此方法将尝试获取此频道最新的 limit 条消息。此方法会根据 MaxMessagesPerBatch 将请求拆分。换句话说，如果要获取 500 条消息，而 MaxMessagesPerBatch 的常量为 50，则请求将被拆分为 10 个单独请求，因此异步枚举器会异步枚举返回 10 个响应。 FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) 方法可以展开这 10 个响应返回的集合，并将其合并为一个集合。 Exceptions NotSupportedException 不支持在语音频道中获取消息。 GetUser(ulong) 获取此频道中的一个服务器用户。 public override SocketGuildUser? GetUser(ulong id) Parameters id ulong 要获取的服务器用户的 ID。 Returns SocketGuildUser 如果找到了具有指定 ID 的服务器用户，则返回该用户；否则返回 null。 ModifyAsync(Action<ModifyVoiceChannelProperties>, RequestOptions?) 修改此频道有关语音聊天能力的属性。 public Task ModifyAsync(Action<ModifyVoiceChannelProperties> func, RequestOptions? options = null) Parameters func Action<ModifyVoiceChannelProperties> 一个包含修改有关语音聊天能力的属性的委托。 options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步修改操作的任务。 See Also ModifyVoiceChannelProperties"
  },
  "api/Kook.WebSocket.SocketVoiceState.html": {
    "href": "api/Kook.WebSocket.SocketVoiceState.html",
    "title": "Struct SocketVoiceState | Kook.Net 文档",
    "keywords": "Struct SocketVoiceState Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示一个基于网关的用户的语音连接状态。 public struct SocketVoiceState : IVoiceState Implements IVoiceState Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors SocketVoiceState() 初始化一个 SocketVoiceState 结构的新实例。 public SocketVoiceState() Properties Default 初始化一个 SocketVoiceState 结构的新实例。 public static SocketVoiceState Default { get; } Property Value SocketVoiceState IsDeafened 获取此用户是否被服务器静音。 public readonly bool? IsDeafened { get; } Property Value bool? Remarks 被服务器静音表示无法在语音频道内接收来自其他用户的语音。 IsMuted 获取此用户是否被服务器闭麦。 public readonly bool? IsMuted { get; } Property Value bool? Remarks 被服务器闭麦表示无法在语音频道内发言。 LiveStreamStatus 获取用户的直播状态。 public readonly LiveStreamStatus? LiveStreamStatus { get; } Property Value LiveStreamStatus? VoiceChannel 获取用户当前所在的语音频道；如果不在任何频道中则为 null。 public SocketVoiceChannel? VoiceChannel { get; } Property Value SocketVoiceChannel VoiceChannels 获取用户连接到的所有语音频道。 public IReadOnlyCollection<SocketVoiceChannel> VoiceChannels { get; } Property Value IReadOnlyCollection<SocketVoiceChannel> Remarks 目前，KOOK 仅允许用户同时连接到一个语音频道，但允许 Bot 用户同时连接到多个语音频道。 Methods ToString() 获取此语音状态所属语音频道的名称。 public override string ToString() Returns string"
  },
  "api/Kook.WebSocket.StartupCacheFetchMode.html": {
    "href": "api/Kook.WebSocket.StartupCacheFetchMode.html",
    "title": "Enum StartupCacheFetchMode | Kook.Net 文档",
    "keywords": "Enum StartupCacheFetchMode Namespace Kook.WebSocket Assembly Kook.Net.WebSocket.dll 表示基于网关的客户端在启动时缓存基础数据的模式。 public enum StartupCacheFetchMode Fields Asynchronous = 2 异步主动获取。 Auto = 0 根据服务器数量自动选择最佳模式。 Lazy = 3 被动获取。 Synchronous = 1 同步主动获取。 Remarks 缓存基础数据包括服务器基本信息、频道、角色、频道权限重写、当前用户在服务器内的昵称。"
  },
  "api/Kook.WebSocket.html": {
    "href": "api/Kook.WebSocket.html",
    "title": "Namespace Kook.WebSocket | Kook.Net 文档",
    "keywords": "Namespace Kook.WebSocket Classes BaseSocketClient 表示一个基于网关的客户端的抽象基类。 GatewayReconnectException 当网关客户端被请求重新连接时引发的异常。 KookSocketClient 表示一个基于网关的 KOOK 客户端。 KookSocketConfig 表示一个用于 KookSocketClient 的配置类。 KookSocketRestClient 表示一个用于网关客户端内的 REST 客户端。 SocketCategoryChannel 表示一个基于网关的分组频道。 SocketChannel 表示一个基于网关的频道。 SocketDMChannel 表示一个基于网关的私聊频道。 SocketEntity<TId> 表示一个基于网关的具有唯一标识符的实体。 SocketGuild 表示一个基于网关的服务器。 SocketGuildChannel 表示一个基于网关的服务器频道。 SocketGuildUser 表示一个基于网关的服务器用户。 SocketInvite 表示一个基于网关的邀请。 SocketMessage 表示一个基于网关的消息。 SocketPokeAction 表示一个基于网关的 POKE 动作。 SocketPresence 表示一个基于网关的用户实时状态。 SocketReaction 表示一个基于网关的回应。 SocketRole 表示一个基于网关的可授予服务器用户的角色。 SocketSelfUser 表示一个基于网关的当前登录的用户信息。 SocketSystemMessage 表示一个基于网关的系统消息。 SocketTextChannel 表示服务器中一个基于网关的具有文字聊天能力的频道，可以发送和接收消息。 SocketUnknownUser 表示一个基于网关的未知用户。 SocketUser 表示一个基于网关的用户。 SocketUserMessage 表示一个基于网关的用户消息。 SocketVoiceChannel 表示服务器中的一个基于网关的具有语音聊天能力的频道。 Structs LiveStreamStatus 表示一个直播状态。 SocketVoiceState 表示一个基于网关的用户的语音连接状态。 Interfaces ISocketAudioChannel 表示一个基于网关的音频频道。 ISocketMessageChannel 表示一个基于网关的消息频道，可以用来发送和接收消息。 ISocketPrivateChannel 表示一个基于网关的私有频道，只有特定的用户可以访问。 Enums StartupCacheFetchMode 表示基于网关的客户端在启动时缓存基础数据的模式。"
  },
  "api/Kook.Webhook.AspNet.KookAspNetWebhookClient.html": {
    "href": "api/Kook.Webhook.AspNet.KookAspNetWebhookClient.html",
    "title": "Class KookAspNetWebhookClient | Kook.Net 文档",
    "keywords": "Class KookAspNetWebhookClient Namespace Kook.Webhook.AspNet Assembly Kook.Net.Webhook.AspNet.dll 表示一个使用 ASP.NET 的 KOOK Webhook 客户端。 public class KookAspNetWebhookClient : KookWebhookClient, IKookClient, IDisposable, IHostedService Inheritance object BaseKookClient BaseSocketClient KookSocketClient KookWebhookClient KookAspNetWebhookClient Implements IKookClient IDisposable IHostedService Inherited Members KookSocketClient.Rest KookSocketClient.ConnectionState KookSocketClient.Latency KookSocketClient.Guilds KookSocketClient.DMChannels KookSocketClient.GetGuild(ulong) KookSocketClient.GetChannel(ulong) KookSocketClient.GetDMChannel(Guid) KookSocketClient.GetDMChannel(ulong) KookSocketClient.GetChannelAsync(ulong, RequestOptions) KookSocketClient.GetDMChannelAsync(Guid, RequestOptions) KookSocketClient.GetDMChannelsAsync(RequestOptions) KookSocketClient.GetUserAsync(ulong, RequestOptions) KookSocketClient.GetUser(ulong) KookSocketClient.GetUser(string, string) KookSocketClient.DownloadUsersAsync(IEnumerable<IGuild>, RequestOptions) KookSocketClient.DownloadVoiceStatesAsync(IEnumerable<IGuild>, RequestOptions) KookSocketClient.DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>, RequestOptions) KookSocketClient.Connected KookSocketClient.Disconnected KookSocketClient.Ready KookSocketClient.LatencyUpdated BaseSocketClient.BaseConfig BaseSocketClient.CurrentUser BaseSocketClient.ChannelCreated BaseSocketClient.ChannelDestroyed BaseSocketClient.ChannelUpdated BaseSocketClient.ReactionAdded BaseSocketClient.ReactionRemoved BaseSocketClient.DirectReactionAdded BaseSocketClient.DirectReactionRemoved BaseSocketClient.MessageReceived BaseSocketClient.MessageDeleted BaseSocketClient.MessageUpdated BaseSocketClient.MessagePinned BaseSocketClient.MessageUnpinned BaseSocketClient.DirectMessageReceived BaseSocketClient.DirectMessageDeleted BaseSocketClient.DirectMessageUpdated BaseSocketClient.UserJoined BaseSocketClient.UserLeft BaseSocketClient.UserBanned BaseSocketClient.UserUnbanned BaseSocketClient.UserUpdated BaseSocketClient.CurrentUserUpdated BaseSocketClient.GuildMemberUpdated BaseSocketClient.GuildMemberOnline BaseSocketClient.GuildMemberOffline BaseSocketClient.UserVoiceStateUpdated BaseSocketClient.UserConnected BaseSocketClient.UserDisconnected BaseSocketClient.RoleCreated BaseSocketClient.RoleDeleted BaseSocketClient.RoleUpdated BaseSocketClient.EmoteCreated BaseSocketClient.EmoteDeleted BaseSocketClient.EmoteUpdated BaseSocketClient.JoinedGuild BaseSocketClient.LeftGuild BaseSocketClient.GuildUpdated BaseSocketClient.GuildAvailable BaseSocketClient.GuildUnavailable BaseSocketClient.MessageButtonClicked BaseSocketClient.DirectMessageButtonClicked BaseKookClient.Log BaseKookClient.LoggedIn BaseKookClient.LoggedOut BaseKookClient.SentRequest BaseKookClient.LoginState BaseKookClient.TokenType BaseKookClient.Dispose() BaseKookClient.LoginAsync(TokenType, string, bool) BaseKookClient.LogoutAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods StartAsync() 启动客户端与 KOOK 之间的连接。 public override Task StartAsync() Returns Task 一个表示异步启动操作的任务。 Remarks 当前方法会初始化客户端与 KOOK 之间的连接。 important 此方法会在调用后立即返回，因为它会在另一个线程上初始化连接。 Exceptions InvalidOperationException KOOK Webhook 客户端不支持手动启动。 StopAsync() 停止客户端与 KOOK 之间的连接。 public override Task StopAsync() Returns Task 一个表示异步停止操作的任务。 Exceptions InvalidOperationException KOOK Webhook 客户端不支持手动停止。"
  },
  "api/Kook.Webhook.AspNet.KookAspNetWebhookConfig.html": {
    "href": "api/Kook.Webhook.AspNet.KookAspNetWebhookConfig.html",
    "title": "Class KookAspNetWebhookConfig | Kook.Net 文档",
    "keywords": "Class KookAspNetWebhookConfig Namespace Kook.Webhook.AspNet Assembly Kook.Net.Webhook.AspNet.dll 表示一个用于 KookAspNetWebhookClient 的配置类。 public class KookAspNetWebhookConfig : KookWebhookConfig Inheritance object KookConfig KookRestConfig KookSocketConfig KookWebhookConfig KookAspNetWebhookConfig Inherited Members KookWebhookConfig.VerifyToken KookWebhookConfig.EncryptKey KookWebhookConfig.AutoLogin KookWebhookConfig.AutoLogout KookWebhookConfig.WebhookProvider KookWebhookConfig.HeartbeatIntervalMilliseconds KookSocketConfig.GatewayEncoding KookSocketConfig.GatewayHost KookSocketConfig.ConnectionTimeout KookSocketConfig.RtcpIntervalMilliseconds KookSocketConfig.HandlerTimeout KookSocketConfig.SmallNumberOfGuildsThreshold KookSocketConfig.LargeNumberOfGuildsThreshold KookSocketConfig.MessageCacheSize KookSocketConfig.WebSocketProvider KookSocketConfig.UdpSocketProvider KookSocketConfig.StartupCacheFetchMode KookSocketConfig.AudioClientIdleTimeout KookSocketConfig.AlwaysDownloadUsers KookSocketConfig.AlwaysDownloadVoiceStates KookSocketConfig.AlwaysDownloadBoostSubscriptions KookSocketConfig.MaxJoinedGuildDataFetchingRetryTimes KookSocketConfig.JoinedGuildDataFetchingRetryDelay KookSocketConfig.AutoUpdateRolePositions KookSocketConfig.AutoUpdateChannelPositions KookSocketConfig.MessageQueueProvider KookRestConfig.RestClientProvider KookConfig.APIVersion KookConfig.VoiceAPIVersion KookConfig.Version KookConfig.UserAgent KookConfig.AcceptLanguage KookConfig.APIUrl KookConfig.DefaultRequestTimeout KookConfig.MaxMessageSize KookConfig.MaxUsersPerBatch KookConfig.MaxMessagesPerBatch KookConfig.MaxItemsPerBatchByDefault KookConfig.MinNicknameSize KookConfig.MaxNicknameSize KookConfig.MinIntimacyScore KookConfig.MaxIntimacyScore KookConfig.BoostPackDuration KookConfig.DefaultRetryMode KookConfig.DefaultRatelimitCallback KookConfig.LogLevel KookConfig.FormatUsersInBidirectionalUnicode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 此配置基于 KookWebhookConfig，在与 Webhook 有关的配置的基础上，定义了有关在 ASP.NET 内继承 KOOK Webhook 的配置。 Constructors KookAspNetWebhookConfig() 初始化一个 KookAspNetWebhookConfig 类的新实例。 public KookAspNetWebhookConfig() Properties RoutePattern 获取或设置注册到 ASP.NET 的 KOOK Webhook 的路由模式。 public string RoutePattern { get; set; } Property Value string Token 获取或设置用于验证 KOOK API 的令牌。 public string? Token { get; set; } Property Value string TokenType 获取或设置用于验证 KOOK API 的令牌类型。 public TokenType? TokenType { get; set; } Property Value TokenType? ValidateToken 获取或设置是否在登录前应验证令牌。 public bool ValidateToken { get; set; } Property Value bool"
  },
  "api/Kook.Webhook.AspNet.KookWebhookClientExtension.html": {
    "href": "api/Kook.Webhook.AspNet.KookWebhookClientExtension.html",
    "title": "Class KookWebhookClientExtension | Kook.Net 文档",
    "keywords": "Class KookWebhookClientExtension Namespace Kook.Webhook.AspNet Assembly Kook.Net.Webhook.AspNet.dll 提供用于与 ASP.NET 集成，注册与配置 KookAspNetWebhookClient 的扩展方法。 public static class KookWebhookClientExtension Inheritance object KookWebhookClientExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddKookAspNetWebhookClient(IServiceCollection) 向指定的 IServiceCollection 添加 KOOK Webhook 客户端。 public static IServiceCollection AddKookAspNetWebhookClient(this IServiceCollection services) Parameters services IServiceCollection 要向其添加 KOOK ASP.NET Webhook 客户端的服务集合。 Returns IServiceCollection 添加了 KOOK ASP.NET Webhook 客户端的服务集合。 AddKookAspNetWebhookClient(IServiceCollection, KookAspNetWebhookConfig) 向指定的 IServiceCollection 添加 KookAspNetWebhookClient 客户端。 public static IServiceCollection AddKookAspNetWebhookClient(this IServiceCollection services, KookAspNetWebhookConfig config) Parameters services IServiceCollection 要向其添加 KOOK ASP.NET Webhook 客户端的服务集合。 config KookAspNetWebhookConfig 用于配置 KOOK ASP.NET Webhook 客户端的配置。 Returns IServiceCollection 添加了 KOOK ASP.NET Webhook 客户端的服务集合。 AddKookAspNetWebhookClient(IServiceCollection, Action<KookAspNetWebhookConfig>) 向指定的 IServiceCollection 添加 KookAspNetWebhookClient 客户端。 public static IServiceCollection AddKookAspNetWebhookClient(this IServiceCollection services, Action<KookAspNetWebhookConfig> configure) Parameters services IServiceCollection 要向其添加 KOOK ASP.NET Webhook 客户端的服务集合。 configure Action<KookAspNetWebhookConfig> 用于配置 KOOK ASP.NET Webhook 客户端的配置委托。 Returns IServiceCollection 添加了 KOOK ASP.NET Webhook 客户端的服务集合。 UseAspNetWebhookClient(IKookClientServiceConfigurator, Action<KookAspNetWebhookConfig>) 配置 KOOK 服务以使用 ASP.NET Webhook 客户端。 public static IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig> UseAspNetWebhookClient(this IKookClientServiceConfigurator configurator, Action<KookAspNetWebhookConfig> configure) Parameters configurator IKookClientServiceConfigurator KOOK 服务配置器。 configure Action<KookAspNetWebhookConfig> 用于配置 KOOK ASP.NET Webhook 客户端的配置委托。 Returns IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig> 配置了 KOOK ASP.NET Webhook 客户端的配置器。 UseHostedClient(IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig>, TokenType, string, bool) 配置 KOOK 服务以将 ASP.NET Webhook 客户端包装为 IHostedService。 [Obsolete(\"The KookAspNetWebhookClient itself is a hosted service, configure the token in the KookAspNetWebhookConfig.\")] public static IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig> UseHostedClient(this IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig> configurator, TokenType tokenType, string token, bool validateToken = true) Parameters configurator IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig> KOOK 服务配置器。 tokenType TokenType 令牌的类型。 token string 令牌。 validateToken bool 是否验证令牌。 Returns IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig> 配置了 ASP.NET Webhook 客户端的配置器。 UseHostedClient(IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig>, Func<IServiceProvider, TokenType>, Func<IServiceProvider, string>, Func<IServiceProvider, bool>?) 配置 KOOK 服务以将 ASP.NET Webhook 客户端包装为 IHostedService。 [Obsolete(\"The KookAspNetWebhookClient itself is a hosted service, configure the token in the KookAspNetWebhookConfig.\")] public static IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig> UseHostedClient(this IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig> configurator, Func<IServiceProvider, TokenType> tokenType, Func<IServiceProvider, string> token, Func<IServiceProvider, bool>? validateToken = null) Parameters configurator IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig> KOOK 服务配置器。 tokenType Func<IServiceProvider, TokenType> 令牌的类型。 token Func<IServiceProvider, string> 令牌。 validateToken Func<IServiceProvider, bool> 是否验证令牌。 Returns IKookClientConfigurator<KookAspNetWebhookClient, KookAspNetWebhookConfig> 配置了 ASP.NET Webhook 客户端的配置器。 UseKookEndpoint<T>(T, string?) 向 IApplicationBuilder 添加 KOOK Webhook 路由端点。 public static T UseKookEndpoint<T>(this T builder, string? routePattern = null) where T : IHost, IEndpointRouteBuilder Parameters builder T 要向其添加 KOOK Webhook 端点的应用程序构建器。 routePattern string 用于注册 KOOK Webhook 的路由模式。 Returns T 添加了 KOOK Webhook 端点的应用程序构建器。 Type Parameters T"
  },
  "api/Kook.Webhook.AspNet.html": {
    "href": "api/Kook.Webhook.AspNet.html",
    "title": "Namespace Kook.Webhook.AspNet | Kook.Net 文档",
    "keywords": "Namespace Kook.Webhook.AspNet Classes KookAspNetWebhookClient 表示一个使用 ASP.NET 的 KOOK Webhook 客户端。 KookAspNetWebhookConfig 表示一个用于 KookAspNetWebhookClient 的配置类。 KookWebhookClientExtension 提供用于与 ASP.NET 集成，注册与配置 KookAspNetWebhookClient 的扩展方法。"
  },
  "api/Kook.Webhook.HttpListener.KookHttpListenerWebhookClient.html": {
    "href": "api/Kook.Webhook.HttpListener.KookHttpListenerWebhookClient.html",
    "title": "Class KookHttpListenerWebhookClient | Kook.Net 文档",
    "keywords": "Class KookHttpListenerWebhookClient Namespace Kook.Webhook.HttpListener Assembly Kook.Net.Webhook.HttpListener.dll 表示一个使用 HTTP 监听器的 KOOK Webhook 客户端。 public class KookHttpListenerWebhookClient : KookWebhookClient, IKookClient, IDisposable Inheritance object BaseKookClient BaseSocketClient KookSocketClient KookWebhookClient KookHttpListenerWebhookClient Implements IKookClient IDisposable Inherited Members KookSocketClient.Rest KookSocketClient.ConnectionState KookSocketClient.Latency KookSocketClient.Guilds KookSocketClient.DMChannels KookSocketClient.GetGuild(ulong) KookSocketClient.GetChannel(ulong) KookSocketClient.GetDMChannel(Guid) KookSocketClient.GetDMChannel(ulong) KookSocketClient.GetChannelAsync(ulong, RequestOptions) KookSocketClient.GetDMChannelAsync(Guid, RequestOptions) KookSocketClient.GetDMChannelsAsync(RequestOptions) KookSocketClient.GetUserAsync(ulong, RequestOptions) KookSocketClient.GetUser(ulong) KookSocketClient.GetUser(string, string) KookSocketClient.DownloadUsersAsync(IEnumerable<IGuild>, RequestOptions) KookSocketClient.DownloadVoiceStatesAsync(IEnumerable<IGuild>, RequestOptions) KookSocketClient.DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>, RequestOptions) KookSocketClient.Connected KookSocketClient.Disconnected KookSocketClient.Ready KookSocketClient.LatencyUpdated BaseSocketClient.BaseConfig BaseSocketClient.CurrentUser BaseSocketClient.ChannelCreated BaseSocketClient.ChannelDestroyed BaseSocketClient.ChannelUpdated BaseSocketClient.ReactionAdded BaseSocketClient.ReactionRemoved BaseSocketClient.DirectReactionAdded BaseSocketClient.DirectReactionRemoved BaseSocketClient.MessageReceived BaseSocketClient.MessageDeleted BaseSocketClient.MessageUpdated BaseSocketClient.MessagePinned BaseSocketClient.MessageUnpinned BaseSocketClient.DirectMessageReceived BaseSocketClient.DirectMessageDeleted BaseSocketClient.DirectMessageUpdated BaseSocketClient.UserJoined BaseSocketClient.UserLeft BaseSocketClient.UserBanned BaseSocketClient.UserUnbanned BaseSocketClient.UserUpdated BaseSocketClient.CurrentUserUpdated BaseSocketClient.GuildMemberUpdated BaseSocketClient.GuildMemberOnline BaseSocketClient.GuildMemberOffline BaseSocketClient.UserVoiceStateUpdated BaseSocketClient.UserConnected BaseSocketClient.UserDisconnected BaseSocketClient.RoleCreated BaseSocketClient.RoleDeleted BaseSocketClient.RoleUpdated BaseSocketClient.EmoteCreated BaseSocketClient.EmoteDeleted BaseSocketClient.EmoteUpdated BaseSocketClient.JoinedGuild BaseSocketClient.LeftGuild BaseSocketClient.GuildUpdated BaseSocketClient.GuildAvailable BaseSocketClient.GuildUnavailable BaseSocketClient.MessageButtonClicked BaseSocketClient.DirectMessageButtonClicked BaseKookClient.Log BaseKookClient.LoggedIn BaseKookClient.LoggedOut BaseKookClient.SentRequest BaseKookClient.LoginState BaseKookClient.TokenType BaseKookClient.Dispose() BaseKookClient.LoginAsync(TokenType, string, bool) BaseKookClient.LogoutAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors KookHttpListenerWebhookClient(KookHttpListenerWebhookConfig) 初始化一个 KookHttpListenerWebhookClient 类的新实例。 public KookHttpListenerWebhookClient(KookHttpListenerWebhookConfig config) Parameters config KookHttpListenerWebhookConfig 用于配置 KOOK Webhook 客户端的 KookHttpListenerWebhookConfig。 Methods StartAsync() 启动客户端与 KOOK 之间的连接。 public override Task StartAsync() Returns Task 一个表示异步启动操作的任务。 Remarks 当前方法会初始化客户端与 KOOK 之间的连接。 important 此方法会在调用后立即返回，因为它会在另一个线程上初始化连接。 StopAsync() 停止客户端与 KOOK 之间的连接。 public override Task StopAsync() Returns Task 一个表示异步停止操作的任务。"
  },
  "api/Kook.Webhook.HttpListener.KookHttpListenerWebhookConfig.html": {
    "href": "api/Kook.Webhook.HttpListener.KookHttpListenerWebhookConfig.html",
    "title": "Class KookHttpListenerWebhookConfig | Kook.Net 文档",
    "keywords": "Class KookHttpListenerWebhookConfig Namespace Kook.Webhook.HttpListener Assembly Kook.Net.Webhook.HttpListener.dll 表示一个用于 KookHttpListenerWebhookClient 的配置类。 public class KookHttpListenerWebhookConfig : KookWebhookConfig Inheritance object KookConfig KookRestConfig KookSocketConfig KookWebhookConfig KookHttpListenerWebhookConfig Inherited Members KookWebhookConfig.VerifyToken KookWebhookConfig.EncryptKey KookWebhookConfig.AutoLogin KookWebhookConfig.AutoLogout KookWebhookConfig.WebhookProvider KookWebhookConfig.HeartbeatIntervalMilliseconds KookSocketConfig.GatewayEncoding KookSocketConfig.GatewayHost KookSocketConfig.ConnectionTimeout KookSocketConfig.RtcpIntervalMilliseconds KookSocketConfig.HandlerTimeout KookSocketConfig.SmallNumberOfGuildsThreshold KookSocketConfig.LargeNumberOfGuildsThreshold KookSocketConfig.MessageCacheSize KookSocketConfig.WebSocketProvider KookSocketConfig.UdpSocketProvider KookSocketConfig.StartupCacheFetchMode KookSocketConfig.AudioClientIdleTimeout KookSocketConfig.AlwaysDownloadUsers KookSocketConfig.AlwaysDownloadVoiceStates KookSocketConfig.AlwaysDownloadBoostSubscriptions KookSocketConfig.MaxJoinedGuildDataFetchingRetryTimes KookSocketConfig.JoinedGuildDataFetchingRetryDelay KookSocketConfig.AutoUpdateRolePositions KookSocketConfig.AutoUpdateChannelPositions KookSocketConfig.MessageQueueProvider KookRestConfig.RestClientProvider KookConfig.APIVersion KookConfig.VoiceAPIVersion KookConfig.Version KookConfig.UserAgent KookConfig.AcceptLanguage KookConfig.APIUrl KookConfig.DefaultRequestTimeout KookConfig.MaxMessageSize KookConfig.MaxUsersPerBatch KookConfig.MaxMessagesPerBatch KookConfig.MaxItemsPerBatchByDefault KookConfig.MinNicknameSize KookConfig.MaxNicknameSize KookConfig.MinIntimacyScore KookConfig.MaxIntimacyScore KookConfig.BoostPackDuration KookConfig.DefaultRetryMode KookConfig.DefaultRatelimitCallback KookConfig.LogLevel KookConfig.FormatUsersInBidirectionalUnicode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 此配置基于 KookWebhookConfig，在与 Webhook 有关的配置的基础上，定义了有关 HTTP 监听器的配置。 Constructors KookHttpListenerWebhookConfig() 初始化一个 KookHttpListenerWebhookConfig 类的新实例。 public KookHttpListenerWebhookConfig() Properties AutoRestartInterval 获取或设置在 HTTP 监听器关闭后等待重新启动的时间间隔。 public TimeSpan AutoRestartInterval { get; set; } Property Value TimeSpan Remarks 设置为与 InfiniteTimeSpan 相等的值表示客户端将在保持应用程序运行的情况下不重新启动；设置为其它任何负值将导致客户端在 HTTP 监听器关闭后退出应用程序；设置为 Zero 将导致客户端在 HTTP 监听器关闭后立即重新启动；设置为任何正值将导致客户端在指定的时间间隔后重新启动。 默认值为 5 秒，即在 HTTP 监听器关闭后 5 秒后重新启动。 UriPrefixes 获取或设置用于监听传入 Webhook 请求的 URI 前缀。 public IReadOnlyCollection<string>? UriPrefixes { get; set; } Property Value IReadOnlyCollection<string>"
  },
  "api/Kook.Webhook.HttpListener.html": {
    "href": "api/Kook.Webhook.HttpListener.html",
    "title": "Namespace Kook.Webhook.HttpListener | Kook.Net 文档",
    "keywords": "Namespace Kook.Webhook.HttpListener Classes KookHttpListenerWebhookClient 表示一个使用 HTTP 监听器的 KOOK Webhook 客户端。 KookHttpListenerWebhookConfig 表示一个用于 KookHttpListenerWebhookClient 的配置类。"
  },
  "api/Kook.Webhook.KookWebhookClient.html": {
    "href": "api/Kook.Webhook.KookWebhookClient.html",
    "title": "Class KookWebhookClient | Kook.Net 文档",
    "keywords": "Class KookWebhookClient Namespace Kook.Webhook Assembly Kook.Net.Webhook.dll 表示一个基于 Webhook 网关的 KOOK 客户端。 public abstract class KookWebhookClient : KookSocketClient, IKookClient, IDisposable Inheritance object BaseKookClient BaseSocketClient KookSocketClient KookWebhookClient Implements IKookClient IDisposable Derived KookAspNetWebhookClient KookHttpListenerWebhookClient Inherited Members KookSocketClient.Rest KookSocketClient.ConnectionState KookSocketClient.Latency KookSocketClient.Guilds KookSocketClient.DMChannels KookSocketClient.GetGuild(ulong) KookSocketClient.GetChannel(ulong) KookSocketClient.GetDMChannel(Guid) KookSocketClient.GetDMChannel(ulong) KookSocketClient.GetChannelAsync(ulong, RequestOptions) KookSocketClient.GetDMChannelAsync(Guid, RequestOptions) KookSocketClient.GetDMChannelsAsync(RequestOptions) KookSocketClient.GetUserAsync(ulong, RequestOptions) KookSocketClient.GetUser(ulong) KookSocketClient.GetUser(string, string) KookSocketClient.DownloadUsersAsync(IEnumerable<IGuild>, RequestOptions) KookSocketClient.DownloadVoiceStatesAsync(IEnumerable<IGuild>, RequestOptions) KookSocketClient.DownloadBoostSubscriptionsAsync(IEnumerable<IGuild>, RequestOptions) KookSocketClient.StartAsync() KookSocketClient.StopAsync() KookSocketClient.Connected KookSocketClient.Disconnected KookSocketClient.Ready KookSocketClient.LatencyUpdated BaseSocketClient.BaseConfig BaseSocketClient.CurrentUser BaseSocketClient.ChannelCreated BaseSocketClient.ChannelDestroyed BaseSocketClient.ChannelUpdated BaseSocketClient.ReactionAdded BaseSocketClient.ReactionRemoved BaseSocketClient.DirectReactionAdded BaseSocketClient.DirectReactionRemoved BaseSocketClient.MessageReceived BaseSocketClient.MessageDeleted BaseSocketClient.MessageUpdated BaseSocketClient.MessagePinned BaseSocketClient.MessageUnpinned BaseSocketClient.DirectMessageReceived BaseSocketClient.DirectMessageDeleted BaseSocketClient.DirectMessageUpdated BaseSocketClient.UserJoined BaseSocketClient.UserLeft BaseSocketClient.UserBanned BaseSocketClient.UserUnbanned BaseSocketClient.UserUpdated BaseSocketClient.CurrentUserUpdated BaseSocketClient.GuildMemberUpdated BaseSocketClient.GuildMemberOnline BaseSocketClient.GuildMemberOffline BaseSocketClient.UserVoiceStateUpdated BaseSocketClient.UserConnected BaseSocketClient.UserDisconnected BaseSocketClient.RoleCreated BaseSocketClient.RoleDeleted BaseSocketClient.RoleUpdated BaseSocketClient.EmoteCreated BaseSocketClient.EmoteDeleted BaseSocketClient.EmoteUpdated BaseSocketClient.JoinedGuild BaseSocketClient.LeftGuild BaseSocketClient.GuildUpdated BaseSocketClient.GuildAvailable BaseSocketClient.GuildUnavailable BaseSocketClient.MessageButtonClicked BaseSocketClient.DirectMessageButtonClicked BaseKookClient.Log BaseKookClient.LoggedIn BaseKookClient.LoggedOut BaseKookClient.SentRequest BaseKookClient.LoginState BaseKookClient.TokenType BaseKookClient.Dispose() BaseKookClient.LoginAsync(TokenType, string, bool) BaseKookClient.LogoutAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors KookWebhookClient(KookWebhookConfig) 初始化一个 KookWebhookClient 类的新实例。 protected KookWebhookClient(KookWebhookConfig config) Parameters config KookWebhookConfig Webhook 客户端的配置。"
  },
  "api/Kook.Webhook.KookWebhookConfig.html": {
    "href": "api/Kook.Webhook.KookWebhookConfig.html",
    "title": "Class KookWebhookConfig | Kook.Net 文档",
    "keywords": "Class KookWebhookConfig Namespace Kook.Webhook Assembly Kook.Net.Webhook.dll 表示一个用于 KookWebhookClient 的配置类。 public abstract class KookWebhookConfig : KookSocketConfig Inheritance object KookConfig KookRestConfig KookSocketConfig KookWebhookConfig Derived KookAspNetWebhookConfig KookHttpListenerWebhookConfig Inherited Members KookSocketConfig.GatewayEncoding KookSocketConfig.GatewayHost KookSocketConfig.ConnectionTimeout KookSocketConfig.RtcpIntervalMilliseconds KookSocketConfig.HandlerTimeout KookSocketConfig.SmallNumberOfGuildsThreshold KookSocketConfig.LargeNumberOfGuildsThreshold KookSocketConfig.MessageCacheSize KookSocketConfig.WebSocketProvider KookSocketConfig.UdpSocketProvider KookSocketConfig.StartupCacheFetchMode KookSocketConfig.AudioClientIdleTimeout KookSocketConfig.AlwaysDownloadUsers KookSocketConfig.AlwaysDownloadVoiceStates KookSocketConfig.AlwaysDownloadBoostSubscriptions KookSocketConfig.MaxJoinedGuildDataFetchingRetryTimes KookSocketConfig.JoinedGuildDataFetchingRetryDelay KookSocketConfig.AutoUpdateRolePositions KookSocketConfig.AutoUpdateChannelPositions KookSocketConfig.MessageQueueProvider KookRestConfig.RestClientProvider KookConfig.APIVersion KookConfig.VoiceAPIVersion KookConfig.Version KookConfig.UserAgent KookConfig.AcceptLanguage KookConfig.APIUrl KookConfig.DefaultRequestTimeout KookConfig.MaxMessageSize KookConfig.MaxUsersPerBatch KookConfig.MaxMessagesPerBatch KookConfig.MaxItemsPerBatchByDefault KookConfig.MinNicknameSize KookConfig.MaxNicknameSize KookConfig.MinIntimacyScore KookConfig.MaxIntimacyScore KookConfig.BoostPackDuration KookConfig.DefaultRetryMode KookConfig.DefaultRatelimitCallback KookConfig.LogLevel KookConfig.FormatUsersInBidirectionalUnicode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 此配置基于 KookSocketConfig，在与网关有关的配置的基础上，定义了有关 Webhook 的配置。 Constructors KookWebhookConfig(WebhookProvider) 初始化一个 KookWebhookConfig 类的新实例。 protected KookWebhookConfig(WebhookProvider webhookProvider) Parameters webhookProvider WebhookProvider 用于创建 Webhook 客户端的委托。 Properties AutoLogin 获取或设置客户端是否尝试自动登录。 public bool AutoLogin { get; set; } Property Value bool AutoLogout 获取或设置客户端是否尝试自动退出登录。 public bool AutoLogout { get; set; } Property Value bool EncryptKey 获取或设置用于解密 Webhook 负载的加密密钥。 public string? EncryptKey { get; set; } Property Value string HeartbeatIntervalMilliseconds 获取或设置网关发送心跳包的时间间隔（毫秒）。 public int HeartbeatIntervalMilliseconds { get; set; } Property Value int VerifyToken 获取或设置用于验证 Webhook 请求的验证令牌。 public string? VerifyToken { get; set; } Property Value string WebhookProvider 获取或设置用于创建 Webhook 客户端的委托。 public WebhookProvider WebhookProvider { get; set; } Property Value WebhookProvider"
  },
  "api/Kook.Webhook.html": {
    "href": "api/Kook.Webhook.html",
    "title": "Namespace Kook.Webhook | Kook.Net 文档",
    "keywords": "Namespace Kook.Webhook Classes KookWebhookClient 表示一个基于 Webhook 网关的 KOOK 客户端。 KookWebhookConfig 表示一个用于 KookWebhookClient 的配置类。"
  },
  "api/Kook.html": {
    "href": "api/Kook.html",
    "title": "Namespace Kook | Kook.Net 文档",
    "keywords": "Namespace Kook Classes ActionGroupModule 按钮组模块，可用于 ICard 中。 ActionGroupModuleBuilder 用来构建 ActionGroupModule 模块的构建器。 AsyncEnumerableExtensions 提供用于展开其异步可枚举成员是嵌套的 IEnumerable<T> 可枚举对象的 IAsyncEnumerable<T> 的扩展方法。 AudioModule 音频模块，可用于 ICard 中。 AudioModuleBuilder 用来构建 AudioModuleBuilder 模块的构建器。 BoostSubscriptionMetadata 表示一个包含服务器助力订阅信息的元数据。 ButtonElement 按钮元素，可用于 IModule 中。 ButtonElementBuilder 用来构建 ButtonElement 元素的构建器。 Card 表示一个卡片对象，可用于卡片消息。 CardBuilder 用来构建 Card 卡片的构建器。 CardExtensions 提供用于 IElement、IModule 和 ICard 等卡片相关对象的扩展方法。 ChannelExtensions 提供用于各种频道实体的扩展方法。 ContainerModule 容器模块，可用于 ICard 中。 ContainerModuleBuilder 用来构建 ContainerModule 模块的构建器。 ContextModule 备注模块，可用于 ICard 中。 ContextModuleBuilder 用来构建 ContextModule 模块的构建器。 CountdownModule 倒计时模块，可用于 ICard 中。 CountdownModuleBuilder 用来构建 CountdownModule 模块的构建器。 CreateCategoryChannelProperties 提供用于创建 ICategoryChannel 的属性。 CreateGuildChannelProperties 提供用于创建 IGuildChannel 的属性。 CreateTextChannelProperties 提供用于创建 ITextChannel 的属性。 CreateVoiceChannelProperties 提供用于创建 IVoiceChannel 的属性。 DividerModule 分割线模块，可用于 ICard 中。 DividerModuleBuilder 用来构建 DividerModule 模块的构建器。 Emoji 一个 Unicode 表情符号。 Emote 表示一个表情符号。 FileModule 文件模块，可用于 ICard 中。 FileModuleBuilder 用来构建 FileModule 模块的构建器。 Format 提供用于格式化字符的帮助类。 GameProperties 提供用于修改 IGame 的属性。 GuildCertification 表示一个服务器认证信息。 GuildEmote 表示一个附属于服务器的基于图片的表情符号。 HeaderModule 标题模块，可用于 ICard 中。 HeaderModuleBuilder 用来构建 HeaderModule 模块的构建器。 ImageElement 图片元素，可用于 IModule 中。 ImageElementBuilder 用来构建 ImageElement 元素的构建器。 ImageGroupModule 图片组模块，可用于 ICard 中。 ImageGroupModuleBuilder 用来构建 ImageGroupModule 模块的构建器。 IntimacyImage 表示一个亲密度的形象图像。 IntimacyProperties 提供用于修改 IIntimacy 的属性。 InviteModule 3 邀请模块，可用于 ICard 中。 InviteModuleBuilder 用来构建 InviteModule 模块的构建器。 KMarkdownElement KMarkdown 文本元素，可用于 IModule 中。 KMarkdownElementBuilder 用来构建 KMarkdownElement 元素的构建器。 KookComparers 用于比较 KOOK 各种实体的 IEqualityComparer<T>。 KookConfig 定义 Kook.Net 各种基础行为的配置项。 MentionUtils 提供一组用于生成与解析提及标签的辅助方法。 MessageExtensions 提供用于各种消息实体的扩展方法。 MessageProperties 提供用于修改 IUserMessage 的属性。 MessageReference 表示一个消息引用。 ModifyGuildChannelProperties 提供用于修改 IGuildChannel 的属性。 ModifyTextChannelProperties 提供用于修改 ITextChannel 的属性。 ModifyVoiceChannelProperties 提供用于修改 IVoiceChannel 的属性。 Music 表示音乐的信息。 Nameplate 表示一个用户的铭牌。 ParagraphStruct 区域文本结构，可用于 IModule 中。 ParagraphStructBuilder 用来构建 ParagraphStruct 元素的构建器。 PlainTextElement 纯文本元素，可用于 IModule 中。 PlainTextElementBuilder 用来构建 PlainTextElement 元素的构建器。 Quote 表示一个引用的消息。 RequestOptions 表示发送请求时要使用的选项。 RolePermissionOverwrite 表示一个为角色设置的频道权限重写设置。 RoleProperties 提供用于修改 IRole 的属性。 SearchGuildMemberProperties 提供用于搜索服务器用户的属性。 SectionModule 内容模块，可用于 ICard 中。 SectionModuleBuilder 用来构建 SectionModule 模块的构建器。 TagUtils 提供用于转换 ITag 为强类型实现类的工具方法。 Tag<TKey, TValue> Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. TokenUtils 提供一组用于处理 KOOK 登录令牌的辅助方法。 UserExtensions 提供用于各种用户实体的扩展方法。 UserPermissionOverwrite 表示一个为用户设置的频道权限重写设置。 UserTag 表示一个用户的标签。 VideoModule 视频模块，可用于 ICard 中。 VideoModuleBuilder 用来构建 SectionModule 模块的构建器。 Structs AlphaColor 表示 KOOK 中使用的带有不透明度通道的颜色。 BilibiliVideoEmbed 表示一个消息中解析出的哔哩哔哩视频嵌入式内容。 Cacheable<TEntity, TId> 表示一个可延迟加载的缓存实体。 Cacheable<TCachedEntity, TDownloadableEntity, TRelationship, TId> 表示一个可延迟加载的缓存实体。 CardEmbed 表示一个消息中解析出的卡片嵌入式内容。 ChannelPermissions 表示一个频道的权限集。 Color 表示 KOOK 中使用的颜色。 FileAttachment 表示一个文件附件。 GradientColor 表示一个渐变色。 GuildFeatures 表示一个服务器的所有特性。 GuildPermissions 表示一个服务器的权限集。 Image 表一个要上传到 KOOK 的图像。 ImageAnimationPokeResource 表示一个 POKE 的图像与动画的资源。 ImageEmbed 表示一个消息中解析出的图片嵌入式内容。 KookError 表示一个 KOOK 返回的错误。 KookJsonError 表示一个在执行 API 请求后从 KOOK 接收到的 JSON 数据中解析出的错误。 LinkEmbed 表示一个消息中解析出的网址链接嵌入式内容。 LogMessage 表示一个用于记录日志的消息对象。 NotImplementedEmbed 表示一个消息中未能被解析为已知的强类型的嵌入式内容。 NotImplementedPokeResource 表示一个未能被解析为已知的强类型的 POKE 资源。 OverwritePermissions 表示一组权限重写配置。 PokeIcon 表示一个 POKE 的图标。 PokeLabel 表示一个 POKE 的标签。 PokeQuality 表示一个 POKE 的品质。 ReactionMetadata 表示一个关于消息回应的元数据。 Interfaces IActivity 表示一个通用的用户活动。 IAttachment 表示一个消息内通用的附件。 IAudioChannel 表示一个通用的音频频道。 IBan 表示一个通用的封禁对象。 ICard 表示一个通用的卡片。 ICardBuilder 表示一个通用的卡片构建器，用于构建一个 ICard。 ICategoryChannel 表示一个通用的分组频道。 IChannel 表示一个通用的频道。 IDMChannel 表示一个通用的私聊频道。 IDeletable 表示实体对象可以被删除。 IElement 表示一个通用的用于模块内的元素。 IElementBuilder 表示一个通用的元素构建器，用于构建一个 IElement。 IEmbed 表示一个消息内解析出的通用的嵌入式内容。 IEmote 表示一个通用的表情符号。 IEntity<TId> 表示一个通用的具有唯一标识符的实体。 IFriendRequest 表示一个通用的好友请求。 IGame 表示一个通用的游戏信息。 IGuild 表示一个通用的服务器。 IGuildChannel 表示一个通用的服务器频道。 IGuildUser 表示一个通用的服务器用户。 IIntimacy 表示一个通用的亲密度。 IInvite 表示一个通用的邀请。 IKookClient 表示一个通用的 KOOK 客户端。 IMediaModule 表示一个通用的媒体模块，可用于 ICard 中。 IMentionable 表示一个可以被提及的实体对象。 IMessage 表示一个通用的消息。 IMessageChannel 表示一个通用的消息频道，可以用来发送和接收消息。 IModule 表示一个通用的模块，可用于 ICard 中。 IModuleBuilder 表示一个通用的模块构建器，用于构建一个 IModule。 INestedChannel 表示一个通用的嵌套频道，即可以嵌套在分组频道中的服务器频道。 IPermissionOverwrite<TTarget> 表示一个通用的频道权限重写设置。 IPoke 表示一个通用的 POKE。 IPokeAction 表示一个通用的 POKE 动作。 IPokeResource 表示一个通用的 POKE 资源。 IPresence 表示一个通用的用户实时状态。 IPrivateChannel 表示一个通用的私有频道，只有特定的用户可以访问。 IQuote 表示一个通用的消息引用。 IRateLimitInfo 表示一个通用的限速信息。 IReaction 表示一个通用的回应。 IRecommendInfo 获取一个通用的推荐信息。 IRole 表示一个通用的可授予服务器用户的角色。 ISelfUser 表示一个通用的当前登录的用户信息。 ISystemMessage 表示一个通用的系统消息。 ITag 表示一个消息中通用的标签。 ITextChannel 表示服务器中一个通用的具有文字聊天能力的频道，可以发送和接收消息。 IUpdateable 表示一个可以被更新的实体对象。 IUser 表示一个通用的用户。 IUserMessage 表示一个通用的用户消息。 IVoiceChannel 表示服务器中的一个通用的具有语音聊天能力的频道。 IVoiceState 表示一个通用的用户语音连接状态。 Enums ActivityType 表示活动的类型。 AttachmentType 表示附件的类型。 BadgeStyle 表示徽章的样式。 BoostLevel 表示一个服务器助力等级。 ButtonClickEventType 表示 ButtonElement 被点击时触发的事件类型。 ButtonTheme 表示 ButtonElement 的主题。 CacheMode 表示应该使用的缓存模式。 CardSize 表示卡片的大小。 CardTheme 表示卡片的主题。 CardType 表示一个 ICard 的类型。 ChannelPermission 表示可以为角色或用户设置的频道级别的权限。 ChannelType 表示服务器频道的类型。 ClientType 表示一个用户所登录的客户端类型。 ColorType 表示一个角色的颜色类型。 ConnectionState 指定客户端的连接状态。 CountdownMode 表示一个 CountdownModule 的倒计时显示模式。 CreateAttachmentMode 指示 FileAttachment 如何创建附件。 Direction 表示获取消息的方向。 ElementType 表示一个 IElement 的类型。 EmbedType 表示嵌入式内容的类型。 EmojiType 表示一个表情符号的类型。 FriendState 表示一个用户之间的好友关系状态。 GameCreationSource 表示游戏信息的创建来源。 GameType 表示游戏的类型。 GuildCertificationType 表示一个服务器认证的类型。 GuildFeature 表示一个服务器特性。 GuildPermission 表示可以为角色或用户设置的服务器级别的服务器权限。 ImageSize 表示 ImageElement 中的图像大小。 InviteMaxAge 表示一个邀请的最大有效时长。 InviteMaxUses 表示一个邀请的可用人次。 KookErrorCode 表示从 KOOK 接收到的错误代码。 LogSeverity 表示日志消息的严重性。 LoginState 表示客户端的登录状态。 MessageSource 表示消息的来源。 MessageType 表示一个消息的类型。 ModuleType 表示一个 IModule 的类型。 MusicProvider 表示音乐的提供来源。 NotifyType 表示服务器应如何通知用户。 PermValue 表示一个权限的重写配置的值。 PokeResourceType 表示一个 POKE 资源的类型。 RequestFriendSource 表示一个好友请求的来源。 RetryMode 表示请求在发生错误时应如何处理。 RoleType 表示角色的类型。 SectionAccessoryMode 表示 SectionModule 中的附加内容的位置。 SlowModeInterval 表示 ITextChannel 的慢速模式延迟时间秒数。 SortMode 表示排序模式。 SystemMessageType 表示一个系统消息的类型。 TagHandling 表示在转换标签时应进行的操作类型。 TagMode 表示标签的语法模式。 TagType 表示标签的类型。 TextTheme 表示卡片内 KMarkdown 文本的颜色。 TokenType 表示客户端所使用的令牌类型。 VoiceQuality 表示 IVoiceChannel 的语音质量。"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API 文档 | Kook.Net 文档",
    "keywords": "API 文档 用于浏览 Kook.Net 的全部公开 API 信息。 常见实体 Kook.WebSocket KookSocketClient SocketGuild SocketGuildChannel SocketRole SocketGuildUser SocketMessage"
  },
  "changelog/changelog.html": {
    "href": "changelog/changelog.html",
    "title": "变更日志 | Kook.Net 文档",
    "keywords": "变更日志 v0.9.2 [2024-10-18] 新增 支持发送无边主题 CardTheme.Invisible 卡片 DefaultRestClient 支持传入 IWebProxy 实例 为 Color、AlphaColor、GradientColor 实现 IEquatable<T> 接口 修复 修复部分 XML 文档中的符号引用错误 修复尝试通过发送消息方法返回的可缓存对象获取消息实体时返回 null 的问题 其它 启用 SourceLink v0.9.1 [2024-09-07] Fixed 修复频道创建者字段为空字符串导致的启动失败的问题 v0.9.0 [2024-08-30] 更新路线 本次更新增加了以下新的软件包： Kook.Net.Webhook：Webhook 支持包 Kook.Net.Webhook.HttpListener：HTTP Listener 的 Webhook 实现包 Kook.Net.Webhook.AspNet：与 ASP.NET 集成的 Webhook 实现包 Kook.Net.MessageQueue.InMemory：内存消息队列支持包 Kook.Net.MessageQueue.MassTransit：MassTransit 消息队列支持包 Kook.Net.DependencyInjection.Microsoft：Microsoft.Extensions.DependencyInjection 依赖注入扩展包 Kook.Net.Hosting：主机服务扩展包 Kook.Net 包新增了对 Kook.Net.Webhook 包的引用，移除了对 Kook.Net.CardMarkup 包的引用，如需继续使用有关通过标记语言构建卡片消息的功能，请单独引用 Kook.Net.CardMarkup 包。 语音连接与推流功能已变更为由受官方支持的方式实现，新增的接收语音数据流相关的 API 为实验性功能，不受官方支持。 Emote.Parse 在发生错误时会引发的异常从 ArgumentException 变更为 FormatException。Emote.ToString 的返回结果变更为等效于 ToKMarkdownString 的结果。MessageExtensions.GetJumpUrl 所提供的链接格式进行了调整。 SocketGuild.ValidBoostSubscriptions 变更为 SocketGuild.ActiveBoostSubscriptions。Tag<T> 变更为 Tag<TKey, TValue>。 新增 新增支持自定义消息队列，默认实现为同步消息处理，支持通过安装扩展 NuGet 包并配置 KookSocketConfig.MessageQueueProvider 来设置消息队列提供者。Kook.Net.MessageQueue.InMemory 为内存队列支持包，Kook.Net.MessageQueue.MassTransit 为 MassTransit 队列支持包。用法请参考示例。 新增支持 Webhook 模式，目前所实现的 Webhook 模式建立在 Socket 实现之上，Kook.Net 所集成的 Webhook 为抽象类 KookWebhookClient。Kook.Net.Webhook.HttpListener 为 HTTP Listener 的 Webhook 实现包，Kook.Net.Webhook.AspNet 为与 ASP.NET 集成的 Webhook 实现包。用法请参考示例。 新增对 Microsoft.Extensions.DependencyInjection 依赖注入框架的扩展方法包 Kook.Net.DependencyInjection.Microsoft ，用于支持快捷添加 Kook.Net 中各种客户端的服务，用法请参考示例。 新增基于 IHost 及 IHostedService 扩展的主机服务扩展包 Kook.Net.Hosting，用于支持快捷添加 Kook.Net 中各种客户端的主机服务，用法请参考示例。 新增支持接收语音数据流相关的 API。（实验性功能，不受官方支持） 文本命令框架新增内置支持对 DateOnly 与 TimeOnly 类型的参数解析，新增支持对 Uri 类型的参数解析，新增对图文混排消息的命令解析。 IUserMessage 上新增扩展方法 MaybeTextImageMixedMessage，用于判断是否可能为图文混排消息。 公开 Emote 的构造函数。 新增 KookComparers 类，用于支持 KOOK 实体按 ID 比较。 新增 Color 上的 Parse 与 TryParse 方法。 IKookClient 提供 LoginAsync 与 LogoutAsync 方法。 新增 TagUtil，用于转换 ITag 为 Tag<TKey, TValue>。 修复 修复 AudioClient.ClientDisconnected 事件未能被正确引发的问题。 修复 Rest/SocketGuildUser 上 IsOwner 可以被确定但值为 null 的问题。 修复 RequireRoleAttribute 可以被错误地添加到不恰当的目标的问题。 修复服务器成员更新事件未携带昵称参数时引发异常的问题。 修复 IGuild 上的实现未公开 IsAvailable 属性的问题。 修复 ITag 中的 EveryoneMention 和 HereMention 的值可能为 0 而非 0U 的问题。 变更 用户代码通过 API 操作服务器成员的角色后，框架会尝试更新缓存，以在不通过 API 更新用户角色信息时，可以通过缓存获得尽量准确的角色信息。 Emote.Parse 在发生错误时会引发的异常从 ArgumentException 变更为 FormatException。 Emote.ToString 的返回结果变更为等效于 ToKMarkdownString 的结果。 语音连接与推流功能已变更为由受官方支持的方式实现。 变更 MessageExtensions.GetJumpUrl 所提供的链接格式，服务器频道更改为官方新增支持的链接格式，私聊频道中的参数调整为使用聊天代码。 变更 Tag<T> 为 Tag<TKey, TValue>。 调整 IUserMessage.Resolve 的结果，使其更符合 KMarkdown 的格式。 ModuleBase.ReplyTextAsync 上的第一个参数重命名为 text。 重命名 SocketGuild.ValidBoostSubscriptions 为 SocketGuild.ActiveBoostSubscriptions。 Kook.Net 包不再包含对 Kook.Net.CardMarkup 的引用。 移除 由于大量非官方接口已被禁用，Kook.Net.Experimental 上的大部分 API 均已移除。 其它 XML 文档已重写为简体中文。 新增 MessageQueue、Webhook、OAuth 的用法示例。 新增简体中文 README。 v0.8.0 [2024-05-28] 更新路线 由于 KOOK API 变更，Bot 用户现已无法在启动时通过 /guild/index 接口一次性获取全部所需的服务器基础信息，而是需要通过 /guild/view 接口遍历各个服务器，这会导致加入过多服务器的 Bot 会在启动时消耗过长时间，并大量发起 API 请求。因此，当前版本引入 KookSocketConfig.StartupCacheFetchMode 配置项，用于定义 Bot 启动时加载服务器所需基础数据的方式。 Synchronous：同步模式。客户端启动时获取到服务器的简单列表后，会先通过 API 遍历获取所需服务器的基础数据，全部获取完成后再触发 Ready 事件。 Asynchronous：异步模式。客户端启动时在获取到服务器的简单列表后立即触发 Ready 事件，再在启动后台任务拉取所有服务器的基础数据。 Lazy：懒模式。客户端启动时在获取到服务器的简单列表后立即触发 Ready 事件，不主动拉取服务器基础数据，当网关下发涉及到服务器的事件时， 会对未获取基础数据的服务器对象通过 API 获取信息。 Auto：自动模式，默认值。客户端的启动模式根据 Bot 所加入的服务器数量自动判断，当服务器数量达到 LargeNumberOfGuildsThreshold（默认为 50）时为 Lazy ，否则若达到 SmallNumberOfGuildsThreshold（默认为 5）时为 Asynchronous，否则为 Synchronous。该判断将在每次 Bot 连接 WebSocket 时进行。 在未使用 Synchronous 模式时，在 Ready 事件之后，未经事件主动访问缓存的服务器实体时，可能会获取到未完整包含服务器基础数据的缓存实体，IsAvailable 属性指示该服务器实体是否已经通过 API 完整缓存基础数据。在这种情况下，请主动调用 UpdateAsync 方法来通过 API 更新缓存服务器实体。 上述的服务器基础数据主要指服务器的频道、角色、频道权限覆盖、当前用户在服务器内的昵称等信息。 已针对整个框架的代码添加了空引用静态分析诊断的特性，有关可为空引用类型的 C# 概念，请参阅 可为空引用类型 - C# | Microsoft Learn。更新至当前版本后，所有可能为空的类型都会被标记为可为空引用类型， 这可能会导致一些代码在编译时产生警告，这些警告应该被视为潜在的空引用异常，应该根据实际情况进行修复。 另外，IQuote 新增了一个实现 MessageReference，这仅包含要被引用的消息 ID，用于在用户代码调用 API 时传入。原有创建 Quote 的用户代码应尽快迁移至 MessageReference。 fileName 已重命名为 filename；事件参数 Cacheable<SocketMessage, Guid> 变更为 Cacheable<IMessage, Guid>；SectionAccessoryMode.Unspecified 现已由 null 代替；Format.StripMarkDown 被重命名为 StripMarkdown；SendFileAsync 中接收 Steam 类型的重载中的 filename 参数现在为必选参数。请注意这些变更可能会导致编译错误，应根据实际情况进行修复。 新增 KookSocketConfig 新增 StartupCacheFetchMode、LargeNumberOfGuildsThreshold 及 SmallNumberOfGuildsThreshold 配置项，用于自定义 Bot 的 Socket 客户端在启动时通过 API 获取缓存所需服务器基础数据的方式 KookSocketConfig 上新增两个配置项 AutoUpdateRolePositions 与 AutoUpdateChannelPositions，默认为 false 。当启用时，会在相关事件下发时自动通过 API 获取数据，以维护缓存中的角色排序信息与频道排序信息。 Embed 添加了 CardEmbed 卡片实体与构造器现在实现了 IEquatable<T> SocketSelfUser 现在实现了 IUpdateable 添加了 IGuild.RecommendInfo.Certifications IQuote 新增新的实现 MessageReference，这仅包含要被引用的消息 ID，用于在用户代码调用 API 时传入 添加了对事件类型 embeds_append、sort_channel、updated_server_type、batch_added_channel、batch_updated_channel、 batch_deleted_channel、live_status_changed、PERSON 类型的 updated_guild、add_guild_mute、delete_guild_mute、 unread_count_changed 的支持，但暂时无法确认这些事件是否会实际下发。 修复 修复私聊消息的作者不正确的问题 修复 SocketUserMessage.Quote.Author 可能为空的问题 修复消息中引用不存在的实体时，Tags 缺失对应值的问题 修复语音客户端未能正确处理未定义事件导致推流崩溃的问题 修复解析新引入的图文混排消息失败的问题 修正用户昵称更新行为不正确的问题 变更 启用可为空引用类型特性，有关可为空引用类型的 C# 概念，请参阅 可为空引用类型 - C# | Microsoft Learn 卡片构造器的各种验证已推迟到调用 Build 时进行 卡片内涉及到列表的属性的类型已变更为 IList<T> Quote.Empty 及其公开构造函数已标记 Obsolete 特性，应使用 MessageReference fileName 已重命名为 filename SendFileAsync 中接收 Steam 类型的重载中的 filename 参数现在为必选参数 BaseSocketClient._baseConfig 重命名为 BaseConfig 事件参数 Cacheable<SocketMessage, Guid> 变更为 Cacheable<IMessage, Guid>，以解决下载实体失败的问题 SectionAccessoryMode.Unspecified 现已移除，请使用 null 代替 Format.StripMarkDown 被重命名为 StripMarkdown，原方法已标记 Obsolete Format.StripMarkdown 现在会移除连字符 - 其它 在 .NET 7 及以前的目标框架上添加了对 PolySharp 的引用，以支持一些新特性在旧框架上的实现 新增部分 Socket 事件的集成测试 v0.7.0 [2024-04-02] 更新路线 KOOK 客户端现已支持在语音频道内发送消息，与此相关的以下 API 产生了变动： CreateVoiceChannelProperties 现已继承自 CreateTextChannelProperties ModifyVoiceChannelProperties 现已继承自 ModifyTextChannelProperties IVoiceChannel 现已继承自 ITextChannel ChannelPermissions.Voice 的值已附加文字频道的权限 SocketTextChannel.GetMessagesAsync 系列方法现已为虚方法，以供 SocketVoiceChannel 重写 需要注意的是，受限于 KOOK API，语音频道内不支持通过 API 获取历史消息，无置顶消息功能，因此，语音频道上不支持调用 IMessageChannel 的 GetMessagesAsync 与 GetPinnedMessagesAsync 方法。 另外，语音频道在 API 层面支持操作 Topic 及 SlowModeInterval，但 KOOK 客户端暂无相关表现。 创建频道时不支持立即指定 Topic，CreateTextChannelProperties 中的 Topic 属性不生效，现已移除， 请在创建频道后调用 ITextChannel.ModifyAsync 方法进行修改。 新增 新增支持通过 XML 定义卡片消息 IVoiceChannel 现已继承自 ITextChannel，相关实现已更新 BaseKookClient 新增 SentRequest 事件 为卡片消息解析相关的 Try* 方法添加非空结果提示诊断 修复 修正 ConnectionManager 引发 Disconnected 时 State 不正确的问题 变更 CreateTextChannelProperties 中的 Topic 属性已移除 其它 标记项目不支持 AOT 及程序集裁剪 新增示例项目 Kook.Net.Samples.CardMarkup 新增 XML 定义卡片消息的相关文档 新增 Logo v0.6.0 [2024-02-28] 更新路线 KOOK 内不支持在文本消息中提及语音频道，即 IVoiceChannel 不可被提及，现已不再派生自 IMentionable 接口。有关提及 IVoiceChannel 的错误用法应该予以移除或变更。 有关取消令牌的的名称已从 CancelToken 更改为 CancellationToken，现有关于取消用牌的方法、变量、属性、参数的名称都应该更新。 新增 新增语音频道的连接与推流 修复 修复 KookSocketClient 转换为 IKookClient 或 BaseKookClient 时 ConnectionState 不正确的问题 变更 IVoiceChannel 不再派生自的 IMentionable 接口 重命名方法、变量、属性、参数的名称 CancelToken 为 CancellationToken 其它 更改文档模板，新增示例项目页面，新增语音推流文档 v0.5.5 [2024-02-02] 更新路线 RequireUserAttribute 不再支持通过 IUser 参数构造，请改用 IUser.Id 作为参数。 新增 文本命令框架先决条件新增 RequireRoleAttribute 文本命令框架 CommandAttribute 新增 Aliases、Summary、Remarks 属性及可选参数 修复 修复了 Bot 启动时下载数据的异常没有被正确地输出到日志的问题 变更 移除了 RequireUserAttribute 上不切实际地接收 IUser 参数的构造函数 v0.5.4 [2024-01-06] 更新路线 KookRestApiClient 的 AuthTokenType 与 AuthToken 属性的 set 访问性已更改为 private，用户代码对这些属性的更改可能会导致框架运行异常，如需使用不同的身份认证登录 KOOK 网关，请在 LogoutAsync 后重新 LoginAsync。 新增 IUser 接口上新增 HasAnnualBuff、IsSystemUser、Nameplates 属性 UserTag 上新增 BackgroundColor 属性 新增支持解析互动表情 变更 KookRestApiClient 的 AuthTokenType 与 AuthToken 属性的 set 访问性已更改为 private v0.5.3 [2023-11-15] 更新路线 IVoiceChannel.ServerUrl 属性已移动至 IAudioChannel 接口，所有使用此属性的用法都需要更新。 新增 在 IAudioChannel 接口上新增语音区域相关属性 IVoiceChannel.ModifyAsync 方法参数新增支持修改语音区域相关属性 为卡片、模块、元素构造器相关类新增有参构造函数 变更 IVoiceChannel.ServerUrl 属性已移动至 IAudioChannel 接口 移除了部分属性上的意外提供的公开 set 访问器 修复 修复了 SectionModuleBuild 的构建校验条件不正确的问题 其它 替换测试 Mock 框架 Moq 为 NSubstitute 新增 Docker 使用示例 新增面向 .NET 8 的目标框架构建 v0.5.2 [2023-08-18] 更新路线 ModifyEmoteNameAsync 方法的参数 Action<string> 已变更为 string，所有使用此方法的用法都需要更新。 修复 修复了 SocketReaction 的比较不正确导致的回应移除时缓存中的消息的回应未能被正确移除的问题 修复了 Socket 客户端断开连接时未能正确发送关闭代码的问题 修复了 GetMessagesAsync 方法查询参考消息之后的消息时结果不正确的问题 修复了 ModifyEmoteNameAsync 方法未能正确重命名服务器表情的问题 其它 补全了快速参考指南 为示例程序 SimpleBot 加入实际的功能，能够响应一个简单的命令，回复按钮，并对按钮点击事件进行响应 新增了 Visual Basic 及 F# 的调用示例 v0.5.1 [2023-07-29] 新增 添加了 SocketGuild.GetCategoryChannel 和 RestGuild.GetCategoryChannelAsync 方法 修复 修复了 GetJumpUrl 方法返回结果不正确的问题 修复了 KookConfig.MaxMessagesPerBatch 设置不正确的问题 修复了已删除引用的反序列化不正确的问题 修复了 MoveUsersAsync 方法的 RequestOptions 参数不为可选参数的问题 修复了 MoveUsersAsync 方法的失败问题 修复了在 SocketGuildChannel 上创建频道权限复写后立即修改可能会导致失败且无错误信息的问题 优化 优化了 GetDirectMessageAsync 方法的内部实现 统一了注释中 langword 的字符串表示方式 v0.5.0 [2023-05-21] 更新路线 出于便利性原因，此版本对 BaseSocketClient 中的部分事件所传递的参数类型进行了调整，事件参数所发生的具体变更可参阅文末的附录， 对涉及到的事件的应用都需要进行相应的更新。 GuildFeature 与 GuildFeatures 中表示重要客户的枚举值与属性已被重命名为更准确的名称；GuildPermissions 已被重构为结构体，RoleProperties.Permissions 属性的类型也已被相应变更；RestGuild.Channels 的类型被错误地声明为值的类型为 RestChannel 的字典，已被修正为值的类型为 RestGuildChannel 的字典；KookSocketClient 上的部分方法的返回类型为 ValueTask，现已统一为 Task。涉及到以上 API 的用法都需要进行相应的更新。 新增 新增 GuildFeature.Partner 枚举值及 GuildFeatures.IsPartner 属性 新增 IGuild.Banner 属性 新增 RestGuild 上的 CurrentUserNickname、CurrentUserDisplayName 与 CurrentUserRoles 属性 新增 INestedChannel.SyncPermissionsAsync 方法 新增 BaseSocketClient 上的 DownloadVoiceStatesAsync 与 DownloadBoostSubscriptionsAsync 抽象方法 新增 RestGuild 上的 TextChannels、VoiceChannels 与 CategoryChannels 属性 变更 重命名 GuildFeature.Ka 为 GuildFeature.KeyAccount，GuildFeatures.IsKa 为 GuildFeatures.IsKeyAccount 变更 GuildPermissions 为结构体，变更 RoleProperties.Permissions 为 GuildPermissions? 类型 出于便利性目的，为部分 BaseSocketClient 中的事件变更或新增了事件参数，变更详情参见文末的附录 变更 BaseSocketClient 上的 DownloadBoostSubscriptionsAsync 方法参数都为可选参数 变更 RestGuild.Channels 的类型为 ImmutableDictionary<ulong, RestGuildChannel> 变更 KookSocketClient 上的 GetChannelAsync、GetDMChannelAsync、GetDMChannelsAsync 与 GetUserAsync 的方法返回类型为 Task<*> 修复 修复部分 API 对 bool 类型返回字符串 1 或 0 时未能正确解析的问题 修复 IGuild.DefaultChannelId 未能正确设置为服务器实际配置的默认文字频道的问题 修复为下载服务器用户列表时 SocketGuild.CurrentUser 为 null 的问题 修复 SocketUser 上的 IsOnline 与 ActiveClient 可能会抛出空引用异常的问题 修复 MessageType.Poke 类型的消息未被正确解析的问题 修复请求桶未能对 HTTP 429 Too Many Requests 错误进行正确处理的问题 优化 优化 Cacheable 的调试器显示文本 FileAttachment.Stream 现已可以复用 SendFileAsync 与 ReplyFileAsync 方法对通过文件或流创建的 FileAttachment 附件进行多次发送前所创建的资产地址将会被缓存，以避免重复上传相同的文件 其它 修正了一些奇怪的代码缩进 变更文档主题 新增依赖于 doc 分支的文档更新独立工作流 新增 API 快速参考文档 补充权限相关单元测试中缺失的权限值 附录 BaseSocketClient 中变更参数的事件列表： ReactionAdded 与 ReactionRemoved ISocketMessageChannel → SocketTextChannel 新增 Cacheable<SocketGuildUser, ulong> 参数表示添加或取消回应的服务器用户 DirectReactionAdded 与 DirectReactionRemoved 新增 Cacheable<SocketUser, ulong> 参数表示添加或取消回应的用户 MessageReceived 新增 SocketGuildUser 表示发送消息的服务器用户 新增 SocketTextChannel 表示消息所在的服务器文字频道 MessageDeleted、MessageUpdated、MessagePinned 与 MessageUnpinned ISocketMessageChannel → SocketTextChannel DirectMessageReceived 新增 SocketUser 表示发送消息的用户 新增 SocketDMChannel 表示消息所在的私聊频道 DirectMessageDeleted Cacheable<IDMChannel, Guid> → Cacheable<SocketDMChannel, ulong> 新增 Cacheable<SocketUser, ulong> 表示消息的发送者 DirectMessageUpdated IDMChannel → Cacheable<SocketDMChannel, ulong> 新增 Cacheable<SocketUser, ulong> 表示消息的发送者 v0.4.1 [2023-04-05] 修复 修复用户离开服务器或角色被删除时，SocketGuildChannel.UserPermissionOverwrites 与 SocketGuildChannel.RolePermissionOverwrites 属性未移除对应的权限覆盖项的问题 v0.4.0 [2023-04-03] 更新路线 出于以下几项原因，此版本对 BaseSocketClient 中的部分事件所传递的参数类型进行了调整： 部分参数必定可取，无需使用 Cacheable 进行封装，例如 MessageDeleted 与 UserConnected； 网关所下发的数据不完整，导致部分事件传递的参数存在缺失的情况，此类事件参数已调整为 Cacheable 封装的实体，修复实体 ID 未知无法通过 Rest 客户端发起 API 请求获取完整数据的问题； 网关所下发的数据不完整，原处理逻辑为通过 Rest 客户端发起 API 请求获取完整数据，在大型服务器内可能会导致性能不佳或超速等问题，例如 GuildMemberOnline 与 GuildMemberOffline，此类事件参数已调整为 Cacheable 封装的实体，可通过 GetOrDownloadAsync 方法按需获取完整数据； 部分事件所传递的参数类型过于具体，导致类型不匹配而传递空值，例如 ReactionAdded； 部分事件所传递的参数类型过于宽泛，例如 MessageDeleted 与 UserConnected，可以避免不必要的模式匹配 部分事件传递参数缺失，例如 UserBanned 部分事件传递了过度冗余的参数，例如 MessageButtonClicked 事件参数所发生的具体变更可参阅文末的附录，对涉及到的事件的应用都需要进行相应的更新。 KMarkdown 格式化帮助类 Format 中的各格式化方法皆已变更为扩展方法，并新增可选参数 sanitize，以支持是否对文本内的特殊字符进行转义，默认为 true。扩展方法的调用方式仍然兼容原有的静态方法调用方式。 默认情况下，各格式化方法会对文本内与 KMarkdown 语法冲突的特殊字符进行转义，以避免 KMarkdown 语法解析错误。 此特性默认启用，可通过 sanitize 参数禁用。所有涉及到传入此方法的文本参数如已对特殊字符进行转义， 则应将 sanitize 参数设置为 false，或调整传入参数为未转义的原始文本。另外，Format.Quote 与 Format.BlockQuote 方法的逻辑已调整，现在会在文本内按需插入换行符与零宽连字符，以保持文本在 KOOK 客户端中的显示效果。其中，Format.BlockQuote 方法的格式化结果可以保证整段文本在 KOOK 客户端中的显示为一段引用块，而 Format.Quote 方法的格式化结果则将文本按空行分割为多个引用块， 空行不会包括在引用块内。 CardJsonExtension 类中的 Parse 与 TryParse 方法已重命名为 ParseSingle 与 TryParseSingle， 以避免与解析多个卡片时使用的 ParseMany 与 TryParseMany 方法产生冲突。所有涉及到此方法的调用都需要进行相应的更新。 IGuild 及 IRecommendInfo 的 Features 属性类型原为 object[]，现已实现为 GuildFeatures 类型，所有涉及到此属性的调用都需要进行相应的更新。 RestPresence 命名空间已修正为 Kook.Rest。所有涉及到 RestPresence 的调用都需要进行命名空间引用的更新。 新增 新增好友管理与用户屏蔽管理相关方法，变更详情参见文末的附录 为 Cacheable 与 Quote 类新增调试显示文本 KookSocketConfig 新增 MaxJoinedGuildDataFetchingRetryTimes 与 JoinedGuildDataFetchingRetryDelay 属性，控制加入服务器时的数据获取重试次数与重试间隔 CardJsonExtension 新增 ParseMany 与 TryParseMany 方法 （实验性功能）新增 IVoiceRegion.MinimumBoostLevel 属性 （实验性功能）KookRestClient 新增 ValidateCardAsync 与 ValidateCardsAsync 方法 变更 变更 BaseSocketClient 中的部分事件所传递的参数类型，变更详情参见文末的附录 Format 帮助类各格式化方法已变更为扩展方法，并新增可选参数 sanitize，以支持是否对文本内的特殊字符进行转义，默认为 true 重命名 CardJsonExtension 的 Parse 与 TryParse 为 ParseSingle 与 TryParseSingle 实现 IGuild 及 IRecommendInfo 的 Features 属性为 GuildFeatures 类型 修正 RestPresence 命名空间为 Kook.Rest （实验性功能）KookRestClient.GetAdminGuildsAsync 方法现已支持 Bot 类型认证 修复 修复 Format.Quote 与 Format.BlockQuote 方法结果在 KOOK 中显示异常的问题 修复 CountdownModuleBuilder.Build 抛出异常时的错误信息错误的问题 修复 BaseSocketClient.DirectMessageUpdated 可能会传递错误的用户实体的问题 修复 BaseSocketClient 与消息相关的事件在传递包含引用的消息实体时 Author 属性在用户未缓存时为空的问题 修复 IGuild.OwnerId 为 0 的问题 修复 BaseSocketClient.Pinned 与 BaseSocketClient.Unpinned 事件所传递的消息未正确设置 IsPinned 属性的问题 修复 IPresence.ActiveClient 属性可能会被意外清空的问题 修复 IPresence 的调试显示信息格式不正确的问题 修复 IRestClient 的默认实现在源代码启用 DEBUG_REST 预处理器指令调试高并发请求时可能会抛出异常的问题 修复 Quote.Empty 不为静态属性的问题 优化 修复 KookRestApiClient 缺失预处理器指令的问题 优化 SocketUser.UpdateIntimacyAsync 方法对 IUser 接口的实现 优化 NumberBooleanConverter 的使用 KookSocketClient 接收乱序报文或对所接收的事件报文处理不正确时将报文内容到日志 KookSocketClient 打印异常报文时将使用传入的 serializerOptions 序列化选项 完善 BaseSocketClient 事件的 XML 文档 其他 由于 KOOK 服务端已修复创建角色时部分字段值缺失的问题，相关提交已还原 修正部分文档内容错误 修正集成测试所创建的测试服务器未被正确删除的问题 附录 新增接口列表： 获取所有好友：IKookClient.GetFriendsAsync 请求添加好友：IUser.RequestFriendAsync 删除好友：IUser.RemoveFriendAsync 获取所有好友请求：IKookClient.GetFriendRequestsAsync 接受好友请求：IFriendRequest.AcceptAsync 拒绝好友请求：IFriendRequest.DeclineAsync 获取所有被屏蔽用户：IKookClient.GetBlockedUsersAsync 屏蔽用户：IUser.BlockAsync 取消屏蔽用户：IUser.UnblockAsync BaseSocketClient 中变更参数的事件列表： ReactionAdded 与 ReactionRemoved Cacheable<IUserMessage, Guid> → Cacheable<IMessage, ulong> Cacheable<IMessageChannel, ulong> → ISocketMessageChannel DirectReactionAdded 与 DirectReactionRemoved Cacheable<IUserMessage, Guid> → Cacheable<IMessage, ulong> MessageDeleted Cacheable<IMessageChannel, ulong> → ISocketMessageChannel MessageUpdated Cacheable<IMessage, Guid> → Cacheable<SocketMessage, Guid> SocketMessage → Cacheable<SocketMessage, Guid> MessagePinned 与 MessageUnpinned Cacheable<IMessage, Guid> → Cacheable<SocketMessage, Guid> SocketMessage → Cacheable<SocketMessage, Guid> SocketGuildUser → Cacheable<SocketGuildUser, ulong> DirectMessageUpdated SocketMessage → Cacheable<SocketMessage, Guid> UserLeft SocketUser → Cacheable<SocketUser, ulong> UserBanned IReadOnlyCollection<SocketUser> → IReadOnlyCollection<Cacheable<SocketUser, ulong>> SocketUser → Cacheable<SocketUser, ulong> 新增 string 参数表示加入黑名单的原因 UserUnbanned IReadOnlyCollection<SocketUser> → IReadOnlyCollection<Cacheable<SocketUser, ulong>> SocketUser → Cacheable<SocketUser, ulong> UserUpdated SocketUser → Cacheable<SocketUser, ulong> GuildMemberUpdated SocketGuildUser → Cacheable<SocketGuildUser, ulong> GuildMemberOnline 与 GuildMemberOffline IReadOnlyCollection<SocketGuildUser> → IReadOnlyCollection<Cacheable<SocketGuildUser, ulong>> UserConnected 与 UserDisconnected SocketUser → Cacheable<SocketGuildUser, ulong> 移除 SocketGuild 参数，请从 SocketVoiceChannel.Guild 获取 MessageButtonClicked SocketUser → Cacheable<SocketGuildUser, ulong> IMessage → Cacheable<IMessage, Guid> 移除 SocketGuild 参数，请从 SocketTextChannel.Guild 获取 DirectMessageButtonClicked SocketUser → Cacheable<SocketUser, ulong> IMessage → Cacheable<IMessage, Guid> v0.3.1 [2023-03-19] 新增 新增 ICard.ToJsonString 及 ICardBuilder.ToJsonString 以支持卡片 JSON 序列化，新增 CardJsonExtension.Parse 及 CardJsonExtension.TryParse 以支持卡片 JSON 反序列化 v0.3.0 [2023-03-19] 更新路线 此版本将 IUserMessage.Resolve 中的默认参数 everyoneHandling 变更为 TagHandling.Name，所有使用此方法的用法都需要留意此变更。 新增 IKookClient 接口新增方法重载 GetUserAsync，并为 BaseSocketClient 实现接口 IKookClient 新增支持通过 KookConfig.FormatUsersInBidirectionalUnicode 禁用针对双向 Unicode 格式化用户名字符串 修复 修复 IUserMessage.Resolve 对全体成员与在线成员标签文本化不正确的问题 修复 IGuild.CreateRoleAsync 反序列化结果失败的问题 （实验性功能）修复 BaseKookClient.CreateGuildAsync 及 KookSocketClient.CreateGuildAsync 返回所创建的服务器信息不完整的问题 其它 为全部公共 API 添加 XML 文档 应用代码样式 v0.2.5 [2023-03-16] 更新路线 此版本为 KookRestClient.GetGamesAsync 方法签名新增了可选可空参数 GameCreationSource，以支持获取指定创建来源的游戏信息。所有在向此方法传递位置实参 RequestOptions 的用法都需要更新。 新增 为方法 KookRestClient.GetGamesAsync 新增可选可空参数 GameCreationSource v0.2.4 [2023-03-09] 新增 新增支持解析角色 IRole 的颜色类型 ColorType 及渐变色信息 GradientColor v0.2.3 [2023-01-19] 新增 为 Bearer 类型认证新增支持 KookRestClient.GetAdminGuildsAsync 新增 Format.Colorize 用于 KMarkdown 文本颜色格式化 修复 修复 KookRestClient.GetGuildsAsync 在服务器数量较大时下载数据过慢的问题 （实验性功能）修复 KookRestClient.GetGuildsAsync 在 Bearer 类型认证下构造对象失败的问题 修复 Color 部分值不正确的问题 v0.2.2 [2022-12-30] 修复 修复了 SocketTextChannel.SendCardAsync 与 SocketTextChannel.SendCardsAsync 设置 ephemeralUser 参数不生效的问题 v0.2.1 [2022-12-25] 修复 修复了导致启动失败的 JSON 转换器错误 v0.2.0 [2022-12-25] 更新路线 此版本将非官方列出的接口实现分离到单独的包中，即 INestedChannel.SyncPermissionsAsync 等，使用此接口的开发者现在应该安装 Kook.Net.Experimental 包。 移除 移除了接口定义上的方法 INestedChannel.SyncPermissionsAsync，接口的实现现已移动至 Kook.Net.Experimental 包中 新增 新增 Kook.Net.Experimental 包，用于实现非官方列出的接口 修复 修复了 IGuild.OpenId 为空时可能导致的空引用异常 其它 修正了不正确的代码缩进 v0.1.2 [2022-12-18] 更新路线 此版本将 SocketGuild.MemberCount 的类型从 int 更改为 int?，其中 null 值表示未知的服务器成员数量。此外，类似的更改发生也在 SocketGuild.HasAllMembers 上。所有依赖这两个属性的用法都需要更新。 变更 KookSocketConfig.AlwaysDownloadUsers 也将定义是否在启动时加载服务器成员数量 修复 修复了修改语音频道时应用的不正确的先决条件 修复了不正确的文档 v0.1.1 [2022-11-20] 新增 新增 IGuild.GetActiveBoostSubscriptionsAsync JSON 反序列化失败时将输出报文本体至日志管理器 修复 修复 BaseSocketClient.UserUnbanned 未能正常触发的问题 修复 BaseSocketClient.GuildAvailable 事件触发时 DownloadVoiceStatesAsync 与 DownloadBoostSubscriptionsAsync 被意外绕过的问题 v0.1.0 [2022-11-15] 首次发布。"
  },
  "demos/demos-community.html": {
    "href": "demos/demos-community.html",
    "title": "社区示例项目 | Kook.Net 文档",
    "keywords": "社区示例项目"
  },
  "demos/demos.html": {
    "href": "demos/demos.html",
    "title": "示例项目 | Kook.Net 文档",
    "keywords": "示例项目 基础 Kook.Net.Samples.SimpleBot 该项目演示了创建并启动 Bot 的基本方法，并实现了一个简单的 !ping 命令。 当用户调用该命令时，Bot 回复一条包含按钮的卡片消息，用户点击该按钮，Bot 会再回复一条消息。 该示例项目还罗列了 Kook.Net 所公开的所有事件。 Kook.Net.Samples.ReactionRoleBot 该示例项目演示了如何通过订阅到 Kook.Net 中的多个事件，来完成不同的操作。 当用户在指定的消息上添加或撤销回应时，Bot 会为该用户添加或撤销服务器的角色。 Webhook Kook.Net.Samples.Webhook.AspNet 该示例项目演示了如何使用 ASP.NET Core 来创建一个 Webhook 服务，以接收来自 Kook.Net 的事件。 Kook.Net.Samples.Webhook.HttpListener 该示例项目演示了如何使用 HttpListener 来创建一个 Webhook 服务，以接收来自 Kook.Net 的事件。 文本命令框架 Kook.Net.Samples.TextCommands 该示例项目演示了如何使用 Kook.Net 中的文本命令框架，来构建一个易于扩展与维护的基于文本的命令交互 Bot。 XML 卡片消息 Kook.Net.Samples.CardMarkup 该示例项目显示了如何使用 Kook.Net 中的 XML 卡片消息功能，使用 XML 标记语言来构建卡片消息，以及配合使用 Liquid 模版引擎，使用 Fluid.Core 库来在运行时通过模版构建卡片消息。 消息队列 [Kook.Net.Samples.MessageQueue]((https://github.com/gehongyan/Kook.Net/tree/master/samples/Kook.Net.Samples.MessageQueue) 该示例项目演示了如何使用 Kook.Net 所提供的消息队列扩展，利用消息队列来实现 KOOK 网关事件的异步处理。 语音 Kook.Net.Samples.Audio 该示例项目演示了如何使用 Kook.Net 中的语音功能，来构建一个点歌 Bot。 OAuth Kook.Net.Samples.OAuth 该示例项目演示了如何使用 AspNet.Security.OAuth.Providers 库来添加 OAuth 认证功能，以及如何使用 Kook.Net 获取所认证用户的信息。 语言变体 Kook.Net.Samples.FSharp 该示例项目演示了如何使用 F# 构建基于 Kook.Net 的 Bot 的方法。 Kook.Net.Samples.VisualBasic 该示例项目演示了如何使用 Visual Basic 构建基于 Kook.Net 的 Bot 的方法。 部署 Kook.Net.Samples.Docker 该示例项目演示了如何编写 Dockerfile 来创建封装 Bot 能力的镜像。"
  },
  "guides/card_markup/card.html": {
    "href": "guides/card_markup/card.html",
    "title": "卡片 | Kook.Net 文档",
    "keywords": "卡片 属性 属性 类型 默认值 必需 说明 theme string null 卡片主题，可选值为 primary success danger warning info secondary none size string null 卡片尺寸，可选值为 small large color string null 卡片颜色，十六进制 RGB 色彩，以 # 开头 元素 每一个卡片需要包含一个 <modules> 元素，<modules> 元素包含卡片的组件。 <card> <modules> <!-- 卡片组件 --> </modules> </card> 示例 1 使用默认主题、尺寸、颜色的卡片，并包含一个 标题模块。 <card> <modules> <header> <plain>测试卡片</plain> </header> </modules> </card> 示例 2 使用 warning 主题、small 尺寸、#aaaaaa 颜色的卡片，并包含一个 标题模块、一个 图片组模块。 <card theme=\"warning\" color=\"#aaaaaa\" size=\"small\"> <modules> <header> <plain>测试卡片</plain> </header> <images> <image src=\"https://img.kaiheila.cn/assets/2021-01/pWsmcLsPJq08c08c.jpeg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/YIfHfnvxaV0dw0dw.jpg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/YevTY6eGJa0fk0f2.jpeg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/r2K9RjHZ4s0xc0xc.jpeg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/klosFRTVy90jz0k0.jpg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/veHnEhzu6c0dw0dv.jpg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/tiVWPIuTrf0dw0dw.jpg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/wExzRIrTeR0j60j7.jpeg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/AybvLWYQgA0dw0dw.jpg\" /> </images> </modules> </card> 示例 3 KOOK 消息编辑器中的投票消息模版。 <card theme=\"warning\"> <modules> <header> <plain>朋友们，今晚开黑玩什么游戏？</plain> </header> <divider /> <section mode=\"right\"> <text> <kmarkdown> **英雄联盟** 艾欧尼亚，昂扬不灭。 </kmarkdown> </text> <accessory> <button theme=\"primary\" value=\"123\"> <plain>+1</plain> </button> </accessory> </section> <context> <image src=\"https://img.kaiheila.cn/avatars/2020-09/ov2wQ8r2qZ0dc07i.gif/icon\" circle=\"true\"/> <image src=\"https://img.kaiheila.cn/avatars/2020-11/LjtEMkmH3U0hs0hs.jpg/icon\" circle=\"true\"/> <image src=\"https://img.kaiheila.cn/avatars/2021-01/YaJKS70ClV04g04g.png/icon\" circle=\"true\"/> <kmarkdown> 等12人把票投给了英雄联盟 </kmarkdown> </context> <section mode=\"right\"> <text> <kmarkdown> **Warframe** &lt;&lt;网络连接无响应&gt;&gt;。 </kmarkdown> </text> <accessory> <button theme=\"primary\" value=\"123\"> <plain>+1</plain> </button> </accessory> </section> <context> <image src=\"https://img.kaiheila.cn/avatars/2020-11/reWIJpyTQt05k05k.png/icon\" circle=\"true\"/> <image src=\"https://img.kaiheila.cn/assets/2021-01/qcU601U2IH0xc0pn.png/icon\" circle=\"true\"/> <image src=\"https://img.kaiheila.cn/avatars/2020-12/MKUoDHdTVK0u00u0.jpg/icon\" circle=\"true\"/> <kmarkdown> 等12人把票投给了Warframe </kmarkdown> </context> <section mode=\"right\"> <text> <kmarkdown> **CSGO** 不听不听，无甲沙鹰。 </kmarkdown> </text> <accessory> <button theme=\"primary\" value=\"123\"> <plain>+1</plain> </button> </accessory> </section> <context> <image src=\"https://img.kaiheila.cn/avatars/2020-06/q4hNJU6KhU02s02s.jpg/icon\" circle=\"true\"/> <image src=\"https://img.kaiheila.cn/avatars/2020-11/acXV4jRb4A08c08c.jpg/icon\" circle=\"true\"/> <image src=\"https://img.kaiheila.cn/avatars/2020-06/SbFPjoBb5202s02s.jpg/icon\" circle=\"true\"/> <kmarkdown> 等12人把票投给了CSGO </kmarkdown> </context> </modules> </card>"
  },
  "guides/card_markup/elements.html": {
    "href": "guides/card_markup/elements.html",
    "title": "元素 | Kook.Net 文档",
    "keywords": "元素 KOOK 开发者文档 - 卡片消息 - 元素 普通文本 plain 属性 类型 默认值 必需 说明 emoji bool true 如果为 true，会把 emoji 的 shortcut 转为 emoji <plain emoji=\"false\">Some text</plain> KMarkdown kmarkdown <kmarkdown>**hello**</kmarkdown> 图片 image 属性 类型 默认值 必需 说明 src anyURI null ✅ 图片 URL，必须以 https:// 开头 alt string null 图片的替代文本 size string null 图片的尺寸，可选值为 small large circle bool false 是否显示为圆形 <image src=\"https://img.kaiheila.cn/assets/2021-01/pWsmcLsPJq08c08c.jpeg\" alt=\"Alt message\" size=\"large\" circle=\"true\" /> 按钮 button 属性 类型 默认值 必需 说明 theme string null 按钮主题，可选值为 primary success danger warning info secondary value string null 按钮需要传递的 value click string null 按钮事件类型，可选值为 link return-val 元素 数量 说明 plain 1，与 kmarkdown 互斥 按钮文本 kmarkdown 1，与 plain 互斥 按钮文本 <button theme=\"danger\" click=\"return-val\" value=\"TEST_VALUE\"> <kmarkdown>**测试按钮**</kmarkdown> </button>"
  },
  "guides/card_markup/intro.html": {
    "href": "guides/card_markup/intro.html",
    "title": "XML 卡片消息入门 | Kook.Net 文档",
    "keywords": "XML 卡片消息 Kook.CardMarkup 命名空间提供了将使用 XML 标记语言定义的卡片消息反序列化为 ICard 对象的方法。 入门 下面的示例中，我们创建一个简单的，由标题、分割线和 9 张图片组成的一个卡片消息。 XML 标记 创建一个 XML 文件，定义卡片消息的内容： <?xml version=\"1.0\" encoding=\"UTF-8\"?> <card-message xmlns=\"https://kooknet.dev\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"https://kooknet.dev https://kooknet.dev/card-message.xsd\"> <card> <modules> <header> <plain>KOOK：一款出色的文字、语音与组队工具</plain> </header> <divider /> <images> <image src=\"https://img.kaiheila.cn/assets/2021-01/pWsmcLsPJq08c08c.jpeg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/YIfHfnvxaV0dw0dw.jpg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/YevTY6eGJa0fk0f2.jpeg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/r2K9RjHZ4s0xc0xc.jpeg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/klosFRTVy90jz0k0.jpg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/veHnEhzu6c0dw0dv.jpg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/tiVWPIuTrf0dw0dw.jpg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/wExzRIrTeR0j60j7.jpeg\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/AybvLWYQgA0dw0dw.jpg\" /> </images> </modules> </card> </card-message> XML 声明 文件第一行为 XML 声明，指定 XML 版本和字符编码： Warning 字符编码必须是 UTF-8。 XML 版本必须是 1.0。 <?xml version=\"1.0\" encoding=\"UTF-8\"?> 卡片消息 XML 根元素为 <card-message>，代表一个卡片消息，每一个 <card-message> 元素可以包含多个 <card> 元素。 <card-message> 元素上需要指定 XML 命名空间，以及 XML Schema 文件的位置： <card-message xmlns=\"https://kooknet.dev\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"https://kooknet.dev https://kooknet.dev/card-message.xsd\"> xmlns=https://kooknet.dev 指定了默认 XML 命名空间，卡片消息所有的元素均在该命名空间下。 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" 指定了 XML Schema 实例命名空间，并设置命名空间前缀为 xsi。 xsi:schemaLocation=\"https://kooknet.dev https://kooknet.dev/card-message.xsd\" 调用了 xsi 命名空间下的 schemaLocation 属性，指定了 https://kooknet.dev 命名空间下的 XML Schema 文件位置在 https://kooknet.dev/card-message.xsd。 卡片 <card> 元素代表一个卡片，每一个 <card> 元素包含一个 <modules> 元素，用于包含卡片的组件。 关于卡片，请参阅 卡片。 反序列化 使用 Kook.CardMarkup.CardMarkupSerializer 将 XML 卡片消息反序列化为 ICard 对象： Warning Try... 方法只适用于同步调用。 Note 此示例传入参数为 XML 文件的 FileInfo 类实例。 所有方法均有传入参数为 Stream 或 string 的重载。 传出参数的类型均为 IEnumerable<ICard> 或 Task<IEnumerable<ICard>>。 var xmlFile = new FileInfo(\"sample-card.xml\"); // 同步调用 var cards = CardMarkupSerializer.Deserialize(xmlFile); // 同步调用，使用 Try... 方法 var canDeserialize = CardMarkupSerializer.TryDeserialize(xmlFile, out var cards); // 异步调用 var cards = await CardMarkupSerializer.DeserializeAsync(xmlFile); // 异步调用，传入 CancellationToken var cts = new CancellationTokenSource(); var cards = await CardMarkupSerializer.DeserializeAsync(xmlFile, cts.Token); 渲染效果 该 XML 卡片消息等效于以下 JSON 格式的卡片消息： [ { \"type\": \"card\", \"theme\": \"secondary\", \"size\": \"lg\", \"modules\": [ { \"type\": \"header\", \"text\": { \"type\": \"plain-text\", \"content\": \"KOOK：一款出色的文字、语音与组队工具\" } }, { \"type\": \"divider\" }, { \"type\": \"image-group\", \"elements\": [ { \"type\": \"image\", \"src\": \"https://img.kaiheila.cn/assets/2021-01/pWsmcLsPJq08c08c.jpeg\" }, { \"type\": \"image\", \"src\": \"https://img.kaiheila.cn/assets/2021-01/YIfHfnvxaV0dw0dw.jpg\" }, { \"type\": \"image\", \"src\": \"https://img.kaiheila.cn/assets/2021-01/YevTY6eGJa0fk0f2.jpeg\" }, { \"type\": \"image\", \"src\": \"https://img.kaiheila.cn/assets/2021-01/r2K9RjHZ4s0xc0xc.jpeg\" }, { \"type\": \"image\", \"src\": \"https://img.kaiheila.cn/assets/2021-01/klosFRTVy90jz0k0.jpg\" }, { \"type\": \"image\", \"src\": \"https://img.kaiheila.cn/assets/2021-01/veHnEhzu6c0dw0dv.jpg\" }, { \"type\": \"image\", \"src\": \"https://img.kaiheila.cn/assets/2021-01/tiVWPIuTrf0dw0dw.jpg\" }, { \"type\": \"image\", \"src\": \"https://img.kaiheila.cn/assets/2021-01/wExzRIrTeR0j60j7.jpeg\" }, { \"type\": \"image\", \"src\": \"https://img.kaiheila.cn/assets/2021-01/AybvLWYQgA0dw0dw.jpg\" } ] } ] } ] 渲染效果如下："
  },
  "guides/card_markup/modules.html": {
    "href": "guides/card_markup/modules.html",
    "title": "模块 | Kook.Net 文档",
    "keywords": "模块 KOOK 开发者文档 - 卡片消息 - 模块 标题 header 元素 数量 说明 plain 1 标题文本 <header> <plain>这是标题</plain> </header> 内容 section 属性 类型 默认值 必需 说明 mode string right 其它元素的放置位置 元素 数量 说明 text 1 内容模块的文本元素 text/plain 1，与 text/markdown 互斥 内容模块的文本元素（纯文本） text/kmarkdown 1，与 text/plain 互斥 内容模块的文本元素（KMarkdown） accessory 0-1 内容模块的其它元素 accessory/image 1，与 accessory/button 互斥 内容模块的其它元素（图片） accessory/button 1，与 accessory/image 互斥 内容模块的其它元素（按钮） <section mode=\"right\"> <text> <kmarkdown>内容模块，**使用 KMarkdown**</kmarkdown> </text> <accessory> <button theme=\"danger\" click=\"return-val\" value=\"TEST_VALUE\"> <kmarkdown>**测试按钮**</kmarkdown> </button> </accessory> </section> 图片组 images 元素 数量 说明 image 1-9 图片 <images> <image src=\"https://img.kaiheila.cn/assets/2021-01/V3zmettTwN0j608y.png\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/V3zmettTwN0j608y.png\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/V3zmettTwN0j608y.png\" /> </images> 容器 container 元素 数量 说明 image 1-9 图片 <container> <image src=\"https://img.kaiheila.cn/assets/2021-01/V3zmettTwN0j608y.png\" /> <image src=\"https://img.kaiheila.cn/assets/2021-01/V3zmettTwN0j608y.png\" /> </container> 交互 actions 元素 数量 说明 button 1-4 按钮 <actions> <button theme=\"success\"> <plain>测试按钮</plain> </button> </actions> 备注 context 元素 数量 说明 plain 与 kmarkdown image 合计至多 10，至少 1 纯文本 kmarkdown 与 plain image 合计至多 10，至少 1 KMarkdown image 与 plain kmarkdown 合计至多 10，至少 1 图片 <context> <image src=\"https://img.kaiheila.cn/assets/2021-01/bUZJOyqnMG0d30d3.png/ld\" size=\"small\" /> <plain>测试 Context</plain> <kmarkdown>~~KMarkdown~~ 测试(spl)内容(spl)</kmarkdown> </context> 分割线 divider <divider /> 文件 (文件/视频) file video 属性 类型 默认值 必需 说明 src anyURI null ✅ 文件 URL，必须以 https:// 开头 title string null 文件标题 <file src=\"https://img.kaiheila.cn/attachments/2021-01/21/600972b5d0d31.txt\" title=\"KOOK 介绍\" /> <video src=\"https://img.kaiheila.cn/attachments/2021-01/20/6008127e8c8de.mp4\" title=\"测试视频\" /> 文件 (音频) audio 属性 类型 默认值 必需 说明 src anyURI null ✅ 文件 URL，必须以 https:// 开头 title string null 文件标题 cover anyURI null 封面 URL，必须以 https:// 开头 <audio src=\"https://img.kaiheila.cn/attachments/2021-01/21/600975671b9ab.mp3\" cover=\"https://img.kaiheila.cn/assets/2021-01/rcdqa8fAOO0hs0mc.jpg\" title=\"命运\" /> 倒计时 countdown 属性 类型 默认值 必需 说明 start ulong null ⚠️ 起始的毫秒时间戳，仅 mode=\"second\" 时需要 end ulong null ✅ 到期的毫秒时间戳 mode string null ✅ 显示模式，可选值为 day hour second <countdown end=\"4080251224000\" start=\"4077572824000\" mode=\"second\" /> 邀请 invite 属性 类型 默认值 必需 说明 code string null ✅ 邀请链接或者邀请码 <invite code=\"EvxnOb\"/>"
  },
  "guides/card_markup/structures.html": {
    "href": "guides/card_markup/structures.html",
    "title": "结构体 | Kook.Net 文档",
    "keywords": "结构体 KOOK 开发者文档 - 卡片消息 - 结构体 区域文本 paragraph 属性 类型 默认值 必需 说明 cols integer null ✅ 区域文本的列数，范围为 1-3 元素 数量 说明 plain 与 kmarkdown 合计至多 50，至少 1 区域文本的内容 kmarkdown 与 plain 合计至多 50，至少 1 区域文本的内容 <paragraph cols=\"3\"> <plain>Header 1</plain> <plain>Header 2</plain> <plain>Header 3</plain> <kmarkdown>Value 1</kmarkdown> <kmarkdown>Value 2</kmarkdown> <kmarkdown>Value 3</kmarkdown> </paragraph>"
  },
  "guides/concepts/connections.html": {
    "href": "guides/concepts/connections.html",
    "title": "管理连接 | Kook.Net 文档",
    "keywords": "管理 Kook.Net 中的连接 在 Kook.Net 中，一旦客户端启动，除非客户端被手动关闭， 否则其与 KOOK 网关之间将会尝试一直保持连接。 用法 要启动连接，请在客户端上调用 StartAsync 方法，这会启动一个 WebSocket 连接。 要终止连接，请在客户端上调用 StopAsync 方法，这会关闭任何已经打开的 WebSocket 连接。 由于启动/终止方法仅向底层连接管理器发送信号，指示其启动/终止连接， 启动/终止连接的操作是异步执行的，因此这些方法会在启动/终止操作真正被执行前返回。 因此，您需要订阅基于连接状态的事件，来准确地了解客户端何时启动/终止了连接。 所有的客户端都提供了 Connected 和 Disconnected 事件， 分别在连接启动或关闭时触发。需要注意的是，在 KookSocketClient 中， Connected 并不代表客户端完成了初始化以供业务逻辑进行调用。 KookSocketClient 上提供了一个单独的事件 Ready， 仅当客户端下载完成所有必要的数据（如：服务器频道信息等），且拥有了完整了数据缓存， 该事件才会被触发。 重连 Tip 避免在网关线程上运行耗时代码！如果网关发生了如事件章节中所描述的死锁， 连接管理器将无法恢复并重新连接。 假设客户端由于网络波动、KOOK 服务端的重连请求或错误导致客户端断开连接， 而不是业务逻辑代码造成的死锁，客户端将会一直尝试重连并继续之前的会话。 不必担心如何维护连接，连接管理器的设计保证了重连机制的正常运行。 如果您的客户端没能成功地重连，或许这是一个 Bug，快来 KOOK Kook.Net 社区 找我反馈吧！"
  },
  "guides/concepts/events.html": {
    "href": "guides/concepts/events.html",
    "title": "事件 | Kook.Net 文档",
    "keywords": "Kook.Net 中的事件 Kook.Net 中的事件采用与标准 .NET 事件模式类似的方式实现， 不同的是，Kook.Net 中的事件类型都为 Task， 事件参数传递不使用 EventArgs，而是直接传递到事件处理程序中。 这使得事件处理程序可以直接在异步上下文中执行，事件返回类型为 Task，而不是 async void。 用法 要从事件中接收数据，只需通过 C# 委托的事件模式进行订阅。 订阅事件支持命名函数，也支持匿名函数（Lambda 表达式）。 线程安全性 所有的事件都被设计为线程安全的，所有的事件都拥有与网关线程相同的上下文， 在网关线程之外的任务上同步运行， 但这样做也会存在副作用，这可能会导致网关现成死锁并终止连接。 经验之谈，任何耗时超过 3 秒的任务都不应该直接在事件上下文中等待， 而是应该包装在 Task.Run 中执行，或是卸载到另外一个任务中。 这意味着您不应该在与事件相同的上下文中通过 KOOK 网关请求数据， 由于网关线程将等待所有被调用的事件处理程序完成，然后才会处理所有来自网关的任何其它数据， 这将导致一个无法恢复的死锁。 Warning 如果您需要在网关线程之外的上下文中（下以事件处理线程指代）访问 Kook.Net 的缓存实体，可能会遇到线程安全性问题。 例如，当您在事件处理线程中访问缓存中的某频道实体时，与此同时，如果网关线程正在处理频道删除事件， 则可能会导致频道实体在缓存中被删除，从而导致事件处理线程中在访问频道实体时可能会抛出异常。 又如，当您在时间处理线程中访问频道消息时，与此同时，如果消息的作者编辑了该消息文本，网关线程可能会更新该消息实体， 从而导致事件处理线程中在访问消息实体时可能会取到不正确的消息文本。 因此建议您在开启不在网关线程中等待的、可能会访问缓存实体中的数据的事件处理线程前，先将必要数据取值为局部变量，再进行后续操作。 相同的问题在队列模式或发布订阅模式下也可能会出现，因此，这些可能会被网关线程更新的数据都应包装为队列或发布订阅事件的参数。 Note 等待任务完成：await Task.Run(() => { /* ... */ }); 或 await Task.Run(async () => { /* ... await ... */ }); 此时，异常将会被正确地传播到事件上下文中，但这样做也会导致网关线程等待任务完成。 不等待任务完成：_ = Task.Run(() => { /* ... */ }); 或 _ = Task.Run(async () => { /* ... await ... */ }); 此时，异常不会被传播到事件上下文中，您需要在事件处理线程正确地捕获处理异常。 额外要注意的是，如果异常被抛出到 async void 所标记的方法中，如果异常没有被正确地处理，将会导致程序退出。 常见模式 Kook.Net 中的事件签名都是形如 Func<T1, ..., Task> 的模式，没有额外定义名称， 因此，有关方法签名的详细信息，请参考 IntelliSense 智能提示，或直接浏览 API 文档。 不过，Kook.Net 中的事件签名大多遵循类似的模式，还是可以让您从中推断参数定义。 实体变更 具有 Func<Entity, Entity, Task> 签名的事件处理程序通常表示一个实体中的信息发生了变更， 两个实体中，前者为发生变更前实体的副本，后者为变更执行完成后的实体。 此模式通常仅在 EntityUpdated 事件中出现。 缓存实体 具有 Func<Cacheable, Entity, Task> 签名的事件处理程序则通常表示 API 或网关并未提供实体发生变更前的状态，因此它可以从客户端的缓存中提取或从 API 中下载。 有关此对象的更多信息，请参阅 Cacheable 文档。 Note 许多与消息相关的实体（例如：MessageUpdated 和 ReactionAdded）依赖于客户端的消息缓存， 该特性默认不启用，因此，如果您需要使用它，请在 KookSocketConfig 中通过设置 MessageCacheSize 的值来启用该消息缓存。 示例 using Kook; using Kook.WebSocket; public class Program { private KookSocketClient _client; public static Task Main(string[] args) => new Program().MainAsync(); public async Task MainAsync() { // 如需使用事件中的 Cacheable<IMessage, Guid> 实体， // 您可能需要在客户端配置中启用消息缓存。 var _config = new KookSocketConfig { MessageCacheSize = 100 }; _client = new KookSocketClient(_config); await _client.LoginAsync(TokenType.Bot, Environment.GetEnvironmentVariable(\"KookToken\")); await _client.StartAsync(); _client.MessageUpdated += MessageUpdated; _client.Ready += () => { Console.WriteLine(\"Bot is connected!\"); return Task.CompletedTask; } await Task.Delay(Timeout.Infinite); } private async Task MessageUpdated(Cacheable<IMessage, Guid> before, SocketMessage after, ISocketMessageChannel channel) { // 如果没有启用消息缓存，消息下载方法可能会获得与 `after` 完全相同的实体 var message = await before.GetOrDownloadAsync(); Console.WriteLine($\"{message} -> {after}\"); } }"
  },
  "guides/concepts/logging.html": {
    "href": "guides/concepts/logging.html",
    "title": "日志 | Kook.Net 文档",
    "keywords": "在 Kook.Net 中记录日志 Kook.Net 中提供了一个日志事件，所有的日志消息都会通过此事件传递。 有关 Kook.Net 中的事件，请参阅 事件 章节。 Warning Kook.Net 中所有的日志实现处理程序都将在网关线程上同步执行， 如果您要将日志消息输出到 Web API 中（例如：Sentry、Stackdriver、KOOK 频道等）， 建议将输出程序包装在 Task.Run 中，以避免网关线程在等待数据日志输出时阻塞。 更多有关网关线程的信息，请参阅 事件 章节。 在客户端中记录日志 要处理日志，只需将日志处理程序订阅至 Log 事件， 日志处理程序需接收一个 LogMessage 对象，返回 Task 对象。 在命令中记录日志 Kook.Net 的 CommandService 也提供了 Log 事件，其签名与其它日志事件相同。 通过日志事件记录的数据往往与 CommandException 相结合使用，其中包含了命令上下文与异常信息。 示例 using Kook; using Kook.WebSocket; public class LoggingService { public LoggingService(KookSocketClient client, CommandService command) { client.Log += LogAsync; command.Log += LogAsync; } private Task LogAsync(LogMessage message) { if (message.Exception is CommandException cmdException) { Console.WriteLine($\"[Command/{message.Severity}] {cmdException.Command.Aliases.First()}\" + $\" failed to execute in {cmdException.Context.Channel}.\"); Console.WriteLine(cmdException); } else Console.WriteLine($\"[General/{message.Severity}] {message}\"); return Task.CompletedTask; } }"
  },
  "guides/dependency_injection/basics.html": {
    "href": "guides/dependency_injection/basics.html",
    "title": "概述 | Kook.Net 文档",
    "keywords": "依赖注入 依赖注入并不是 Discord.Net 中必要的功能，但它可以让框架的使用更为简便。与许多其他库相结合使用，可以更好地控制应用程序。 按照 依赖注入不是 .NET 的原生功能。您需要将扩展包安装到项目中才能使用它： Microsoft.Extensions.DependencyInjection Microsoft.Extensions.DependencyInjection.Abstractions Warning 仅下载 Abstractions 包不包含使用依赖注入所需的一些必要类，请确保同时安装两个包，或选择仅安装 Microsoft.Extensions.DependencyInjection 包来隐式同时安装两个包。 Visual Studio 程序包管理控制台 PM> Install-Package Microsoft.Extensions.DependencyInjection. Rider 命令行 dotnet add package Microsoft.Extensions.DependencyInjection Tip ASP.NET 已经在其框架中包含了所有必要的程序集，要在 ASP.NET 中使用依赖注入完整功能，不需要安装任何额外的 NuGet 包。 开始 首先，您需要创建一个基于依赖注入的应用程序，这样就可以在整个项目中访问并注入它们。 public class Program { private readonly IServiceProvider _serviceProvider; public Program() { _serviceProvider = CreateProvider(); } static void Main(string[] args) => new Program().RunAsync(args).GetAwaiter().GetResult(); static IServiceProvider CreateProvider() { var collection = new ServiceCollection(); //... return collection.BuildServiceProvider(); } async Task RunAsync(string[] args) { //... } } 要在不同的类中自由传递依赖项，您需要将它们注册到新的 ServiceCollection 中，并将它们构建到 IServiceProvider 中，如上所示。 然后需要通过启动文件访问 IServiceProvider，以便您可以访问您的提供程序并对其进行管理。 static IServiceProvider CreateServices() { var config = new KookSocketConfig() { //... }; var collection = new ServiceCollection() .AddSingleton(config) .AddSingleton<KookSocketClient>(); return collection.BuildServiceProvider(); } 如上所示，这里创建了一个 KookSocketConfig 的实例，并在添加客户端本身之前将其添加到了服务容器中。 服务容器会优先选择已经存在的服务来填充构造函数，且你已经将配置类注册到服务容器中，因此，带有配置参数的构造函数重载会被优先调用。 使用依赖项 在 Program 类的构造函数中构建服务容器提供程序后，现在可以在您正在使用的实例中使用它了。 通过提供程序，我们可以请求我们之前所注册的 KookSocketClient。 async Task RunAsync(string[] args) { // 从客户端请求实例。 // 我们在这里首先请求它，因此其目标构造函数将会调用，我们会得到一个客户端的实例。 var client = _services.GetRequiredService<KookSocketClient>(); client.Log += async (msg) => { await Task.CompletedTask; Console.WriteLine(msg); } await client.LoginAsync(TokenType.Bot, \"\"); await client.StartAsync(); await Task.Delay(Timeout.Infinite); } Warning 服务实例的构造函数在被首次请求之前不会被调用。要想实例化服务容器里的服务，需要先从提供程序中请求服务。 如果所请求的服务有依赖项，那么在实例化服务本身之前，其未被实例化的依赖项会被实例化。 注入依赖项 您不仅可以直接从字段或属性中访问提供程序，还可以将实例传递给在提供程序中注册的类。有多种方法可以实现这一点。请参考 注入实例 了解更多信息。"
  },
  "guides/dependency_injection/injection.html": {
    "href": "guides/dependency_injection/injection.html",
    "title": "注入实例 | Kook.Net 文档",
    "keywords": "注入实例 在 IServiceProvider 中注册的服务后可以注入到任何注册的类中，这可以通过属性或构造函数来实现。 Note 如上所述，依赖项和目标类必须都进行注册，服务提供程序才可以解析它。 通过构造函数注入 服务可以从类的构造函数中注入。 这是首选的方法，因为这可以将只读字段与提供的服务关联在一起，且在类的外部不可访问。 public class ClientHandler { private readonly KookSocketClient _client; public ClientHandler(KookSocketClient client) { _client = client; } public async Task ConfigureAsync() { //... } } 通过属性注入 也可以通过属性进行注入。 public class ClientHandler { public KookSocketClient Client { get; set; } public async Task ConfigureAsync() { //... } } Warning 依赖项注入不会解析属性注入中缺少的服务，也不会选择构造函数作为替代。如果尝试注入公共可访问属性时其服务缺失，应用程序将抛出错误。 使用提供程序本身 也可以将提供程序本身注入到类中，可用于以下多种用例： 允许库（如 Kook.Net）在内部访问提供程序 注入可选依赖项 如有必要，可以直接在提供程序上调用方法，这通常用于创建作用域 public class UtilizingProvider { private readonly IServiceProvider _provider; private readonly AnyService _service; // 服务可为 null，因为它只有在提供程序中实际可用时才会填充 private readonly AnyOtherService? _otherService; // 该构造函数仅注入服务提供程序，并使用它来填充其他依赖项 public UtilizingProvider(IServiceProvider provider) { _provider = provider; _service = provider.GetRequiredService<AnyService>(); _otherService = provider.GetService<AnyOtherService>(); } // 该构造函数注入服务提供程序和 AnyService，这样无需调用 GetRequiredService页可以确保 AnyService 不为 null public UtilizingProvider(IServiceProvider provider, AnyService service) { _provider = provider; _service = service; _otherService = provider.GetService<AnyOtherService>(); } } Note 请记住，提供程序将选择“最大”的可用构造函数。 如果选择引入多个构造函数，请记住，如在某一个构造函数中缺失了某项服务，提供程序可能会选择另一个可用的构造函数，而不是抛出异常。"
  },
  "guides/dependency_injection/scaling.html": {
    "href": "guides/dependency_injection/scaling.html",
    "title": "隐式注入 | Kook.Net 文档",
    "keywords": "隐式注入 依赖注入有很多用例，并且非常适合大规模应用程序。有几种方法可以使大量服务的注册和使用更加容易。 使用一系列服务 如果您有许多服务都具有相同的用途，例如处理事件或服务模块，您可以通过一些要求一次注册和注入它们： 所有类都需要继承单个接口或抽象类型 虽然不是必需的，但最好是接口和类型在调用时具有相同的方法签名 您需要注册一个所有类型都可以注入的类 隐式注册 通过获取程序集中的所有类型，并检查它们是否实现了指定接口，来进行服务的注册。 public static ServiceCollection RegisterImplicitServices(this ServiceCollection collection, Type interfaceType, Type activatorType) { // 获取当前程序集中的所有类型。有很多方法可以做到这一点，但这是最快的。 foreach (var type in typeof(Program).Assembly.GetTypes()) { if (interfaceType.IsAssignableFrom(type) && !type.IsAbstract) collection.AddSingleton(interfaceType, type); } // 注册可以激活这些实例的类，以便您可以激活这些实例。 collection.AddSingleton(activatorType); } Note 如上所示，interfaceType 和 activatorType 未定义。对于下面的用例，这些是 IService 和 ServiceActivator。 使用隐式依赖 为了使用隐式依赖，您必须访问您之前注册的激活器类。 async Task RunAsync() { //... await _serviceProvider.GetRequiredService<ServiceActivator>() .ActivateAsync(); //... } 当访问并调用激活器类的 ActivateAsync() 方法时，将执行以下代码： public class ServiceActivator { // 这包含了所有已注册的服务类型为 IService 的服务 private readonly IEnumerable<IService> _services; public ServiceActivator(IEnumerable<IService> services) { _services = services; } public async Task ActivateAsync() { foreach(var service in _services) { await service.StartAsync(); } } } 至此，所有通过实现 IService 接口被注册的类上的自动代码都会被执行并启动。"
  },
  "guides/dependency_injection/services.html": {
    "href": "guides/dependency_injection/services.html",
    "title": "命令框架中的依赖注入 | Kook.Net 文档",
    "keywords": "命令框架中的依赖注入 在文本命令框架服务模块中，依赖注入的非常简单。 您可以将任何服务注入到模块中，而无需将模块注册到提供程序中。Kook.Net会在内部解析您的依赖项。 注册服务 前文描述的行为允许已注册的成员作为可用构造函数的参数，因此 Socket 客户端和配置类将会被自动解析，并使用 CommandService(client, config) 重载。 static IServiceProvider CreateServices() { var config = new KookSocketConfig() { //... }; var servConfig = new CommandServiceConfig() { //... } var collection = new ServiceCollection() .AddSingleton(config) .AddSingleton<KookSocketClient>() .AddSingleton(servConfig) .AddSingleton<CommandService>(); return collection.BuildServiceProvider(); } 模块内的用法 在模块的构造函数中，任何参数都将被你所传入的 IServiceProvider 填充。 任何公共可设置属性也将以相同的方式填充。 public class MyModule : InteractionModuleBase { private readonly MyService _service; public MyModule(MyService service) { _service = service; } [Command(\"things\")] public async Task ThingsAsync() { var str = string.Join(\"\\n\", _service.Things) await ReplyTextAsync(str); } } 如果你接受 CommandService 或 IServiceProvider 作为构造函数的参数或可注入的属性，这些条目将会被模块所加载的 CommandService 和传入的 IServiceProvider 填充。 Note 在属性上标记 [DontInjectAttribute] 特性将会阻止该属性被注入。 服务 模块是瞬态的，会在每次请求时重新实例化，因此如果需要在多个命令执行之间保持值，建议创建单例服务来包装。 public class MyService { public List<string> Things { get; } public MyService() { Things = new(); } }"
  },
  "guides/dependency_injection/types.html": {
    "href": "guides/dependency_injection/types.html",
    "title": "生命周期 | Kook.Net 文档",
    "keywords": "生命周期 依赖项可以有三种生命周期。每种生命周期都有不同的用例。 Warning 当使用接口 IServiceType 和类 ImplementationType 注册类型时，只有 IServiceType 可用于注入，而 ImplementationType 将用于底层实例。 单例 单例服务在首次请求时创建单个实例，并应用程序在整个生命周期中维护该单一实例。 在单例中更改的任何值都将在依赖于它的所有实例中更改，因为它们都具有对这一单例服务的相同引用。 注册 // 带有服务接口类型 collection.AddSingleton<ISingletonService, SingletonService>(); // 不带有服务接口类型 collection.AddSingleton<SingletonService>(); Note KOOK 客户端和命令服务等类型都是单例的，因为它们应该在整个应用程序中持续存在，并与对该对象的所有引用共享其状态。 作用域 作用域服务在每次请求时创建一个新实例，但在“作用域”范围内保留。 只要服务在创建的作用域中可见，就会为该类型的所有引用重用同一实例。 这意味着您可以在执行期间重用同一实例，并在请求处于活动状态时保持服务的状态。 注册 // 带有服务接口类型 collection.AddScoped<IScopedService, ScopedService>(); // 不带有服务接口类型 collection.AddScoped<ScopedService>(); Note 在不使用 HTTP 或类似 EF Core 等库的情况下，作用域在 KOOK Bot 中不常见。 瞬时 瞬时服务在每次请求时创建一个新实例，并且不在目标服务的引用之间共享其状态。 它适用于需要很少状态的轻量级类型，以便在执行后快速释放。 注册 // 带有服务接口类型 collection.AddTransient<ITransientService, TransientService>(); // 不带有服务接口类型 collection.AddTransient<TransientService>(); Note Kook.Net 模块的行为与瞬时类型完全相同，并且仅在命令执行所需的时间内存在。 这就是为什么建议应用程序使用单例服务来跟踪跨命令执行的数据。"
  },
  "guides/emoji/emoji-list.html": {
    "href": "guides/emoji/emoji-list.html",
    "title": "受支持的表情符号列表 | Kook.Net 文档",
    "keywords": "受支持的表情符号列表 此列表数据源于 KOOK API。 Emoji 短代码 Unicode 😀 :grinning: \\ud83d\\ude00 😃 :smiley: \\ud83d\\ude03 😄 :smile: \\ud83d\\ude04 😁 :grin: \\ud83d\\ude01 😆 :laughing: \\ud83d\\ude06 😅 :sweat_smile: \\ud83d\\ude05 🤣 :rofl: \\ud83e\\udd23 😂 :joy: \\ud83d\\ude02 🙂 :slightly_smiling_face: \\ud83d\\ude42 🙃 :upside_down_face: \\ud83d\\ude43 😉 :wink: \\ud83d\\ude09 😊 :blush: \\ud83d\\ude0a 😇 :innocent: \\ud83d\\ude07 🥰 :smiling_face_with_hearts: \\ud83e\\udd70 😍 :heart_eyes: \\ud83d\\ude0d 🤩 :star_struck: \\ud83e\\udd29 😘 :kissing_heart: \\ud83d\\ude18 😗 :kissing: \\ud83d\\ude17 ☺ :relaxed: \\u263a 😚 :kissing_closed_eyes: \\ud83d\\ude1a 😙 :kissing_smiling_eyes: \\ud83d\\ude19 😋 :yum: \\ud83d\\ude0b 😛 :stuck_out_tongue: \\ud83d\\ude1b 😜 :stuck_out_tongue_winking_eye: \\ud83d\\ude1c 🤪 :zany_face: \\ud83e\\udd2a 😝 :stuck_out_tongue_closed_eyes: \\ud83d\\ude1d 🤑 :money_mouth_face: \\ud83e\\udd11 🤗 :hugging_face: \\ud83e\\udd17 🤭 :face_with_hand_over_mouth: \\ud83e\\udd2d 🤫 :shushing_face: \\ud83e\\udd2b 🤔 :thinking_face: \\ud83e\\udd14 🤐 :zipper_mouth_face: \\ud83e\\udd10 🤨 :face_with_raised_eyebrow: \\ud83e\\udd28 😐 :neutral_face: \\ud83d\\ude10 😑 :expressionless: \\ud83d\\ude11 😶 :no_mouth: \\ud83d\\ude36 😏 :smirk: \\ud83d\\ude0f 😒 :unamused: \\ud83d\\ude12 🙄 :roll_eyes: \\ud83d\\ude44 😬 :grimacing: \\ud83d\\ude2c 🤥 :lying_face: \\ud83e\\udd25 😌 :relieved: \\ud83d\\ude0c 😔 :pensive: \\ud83d\\ude14 😪 :sleepy: \\ud83d\\ude2a 🤤 :drooling_face: \\ud83e\\udd24 😴 :sleeping: \\ud83d\\ude34 😷 :mask: \\ud83d\\ude37 🤒 :face_with_thermometer: \\ud83e\\udd12 🤕 :face_with_head_bandage: \\ud83e\\udd15 🤢 :nauseated_face: \\ud83e\\udd22 🤮 :face_vomiting: \\ud83e\\udd2e 🤧 :sneezing_face: \\ud83e\\udd27 🥵 :hot_face: \\ud83e\\udd75 🥶 :cold_face: \\ud83e\\udd76 🥴 :woozy_face: \\ud83e\\udd74 😵 :dizzy_face: \\ud83d\\ude35 🤯 :exploding_head: \\ud83e\\udd2f 🤠 :cowboy_hat_face: \\ud83e\\udd20 🥳 :partying_face: \\ud83e\\udd73 😎 :sunglasses: \\ud83d\\ude0e 🤓 :nerd_face: \\ud83e\\udd13 🧐 :face_with_monocle: \\ud83e\\uddd0 😕 :confused: \\ud83d\\ude15 😟 :worried: \\ud83d\\ude1f 🙁 :slightly_frowning_face: \\ud83d\\ude41 ☹ :frowning_face: \\u2639 😮 :open_mouth: \\ud83d\\ude2e 😯 :hushed: \\ud83d\\ude2f 😲 :astonished: \\ud83d\\ude32 😳 :flushed: \\ud83d\\ude33 🥺 :pleading_face: \\ud83e\\udd7a 😦 :frowning: \\ud83d\\ude26 😧 :anguished: \\ud83d\\ude27 😨 :fearful: \\ud83d\\ude28 😰 :cold_sweat: \\ud83d\\ude30 😥 :disappointed_relieved: \\ud83d\\ude25 😢 :cry: \\ud83d\\ude22 😭 :sob: \\ud83d\\ude2d 😱 :scream: \\ud83d\\ude31 😖 :confounded: \\ud83d\\ude16 😣 :persevere: \\ud83d\\ude23 😞 :disappointed: \\ud83d\\ude1e 😓 :sweat: \\ud83d\\ude13 😩 :weary: \\ud83d\\ude29 😫 :tired_face: \\ud83d\\ude2b 🥱 :yawning_face: \\ud83e\\udd71 😤 :triumph: \\ud83d\\ude24 😡 :rage: \\ud83d\\ude21 😠 :angry: \\ud83d\\ude20 🤬 :cursing_face: \\ud83e\\udd2c 😈 :smiling_imp: \\ud83d\\ude08 👿 :imp: \\ud83d\\udc7f 💀 :skull: \\ud83d\\udc80 ☠ :skull_and_crossbones: \\u2620 💩 :poop: \\ud83d\\udca9 🤡 :clown_face: \\ud83e\\udd21 👹 :japanese_ogre: \\ud83d\\udc79 👺 :japanese_goblin: \\ud83d\\udc7a 👻 :ghost: \\ud83d\\udc7b 👽 :alien: \\ud83d\\udc7d 👾 :space_invader: \\ud83d\\udc7e 🤖 :robot: \\ud83e\\udd16 😺 :smiley_cat: \\ud83d\\ude3a 😸 :smile_cat: \\ud83d\\ude38 😹 :joy_cat: \\ud83d\\ude39 😻 :heart_eyes_cat: \\ud83d\\ude3b 😼 :smirk_cat: \\ud83d\\ude3c 😽 :kissing_cat: \\ud83d\\ude3d 🙀 :scream_cat: \\ud83d\\ude40 😿 :crying_cat_face: \\ud83d\\ude3f 😾 :pouting_cat: \\ud83d\\ude3e 💋 :kiss: \\ud83d\\udc8b 👋 :wave: \\ud83d\\udc4b 🤚 :raised_back_of_hand: \\ud83e\\udd1a 🖐 :raised_hand_with_fingers_splayed: \\ud83d\\udd90 ✋ :raised_hand: \\u270b 🖖 :vulcan_salute: \\ud83d\\udd96 👌 :ok_hand: \\ud83d\\udc4c 🤏 :pinching_hand: \\ud83e\\udd0f ✌ :v: \\u270c 🤞 :crossed_fingers: \\ud83e\\udd1e 🤟 :love_you_gesture: \\ud83e\\udd1f 🤘 :metal: \\ud83e\\udd18 🤙 :call_me_hand: \\ud83e\\udd19 👈 :point_left: \\ud83d\\udc48 👉 :point_right: \\ud83d\\udc49 👆 :point_up_2: \\ud83d\\udc46 🖕 :middle_finger: \\ud83d\\udd95 👇 :point_down: \\ud83d\\udc47 ☝ :point_up: \\u261d 👍 👍 \\ud83d\\udc4d 👎 :-1: \\ud83d\\udc4e ✊ :fist: \\u270a 👊 :punch: \\ud83d\\udc4a 🤛 :fist_left: \\ud83e\\udd1b 🤜 :fist_right: \\ud83e\\udd1c 👏 :clap: \\ud83d\\udc4f 🙌 :raised_hands: \\ud83d\\ude4c 👐 :open_hands: \\ud83d\\udc50 🤲 :palms_up_together: \\ud83e\\udd32 🤝 :handshake: \\ud83e\\udd1d 🙏 :pray: \\ud83d\\ude4f ✍ :writing_hand: \\u270d 💅 :nail_care: \\ud83d\\udc85 🤳 :selfie: \\ud83e\\udd33 💪 :muscle: \\ud83d\\udcaa 🦾 :mechanical_arm: \\ud83e\\uddbe 🦿 :mechanical_leg: \\ud83e\\uddbf 🦵 :leg: \\ud83e\\uddb5 🦶 :foot: \\ud83e\\uddb6 👂 :ear: \\ud83d\\udc42 🦻 :ear_with_hearing_aid: \\ud83e\\uddbb 👃 :nose: \\ud83d\\udc43 🧠 :brain: \\ud83e\\udde0 🦷 :tooth: \\ud83e\\uddb7 🦴 :bone: \\ud83e\\uddb4 👀 :eyes: \\ud83d\\udc40 👁 :eye: \\ud83d\\udc41 👅 :tongue: \\ud83d\\udc45 👄 :lips: \\ud83d\\udc44 👶 :baby: \\ud83d\\udc76 🧒 :child: \\ud83e\\uddd2 👦 :boy: \\ud83d\\udc66 👧 :girl: \\ud83d\\udc67 🧑 :adult: \\ud83e\\uddd1 👱 :person_blond_hair: \\ud83d\\udc71 👨 :man: \\ud83d\\udc68 🧔 :bearded_person: \\ud83e\\uddd4 👨‍🦰 :red_haired_man: \\ud83d\\udc68\\u200d\\ud83e\\uddb0 👨‍🦱 :curly_haired_man: \\ud83d\\udc68\\u200d\\ud83e\\uddb1 👨‍🦳 :white_haired_man: \\ud83d\\udc68\\u200d\\ud83e\\uddb3 👨‍🦲 :bald_man: \\ud83d\\udc68\\u200d\\ud83e\\uddb2 👩 :woman: \\ud83d\\udc69 👩‍🦰 :red_haired_woman: \\ud83d\\udc69\\u200d\\ud83e\\uddb0 🧑‍🦰 :person_red_hair: \\ud83e\\uddd1\\u200d\\ud83e\\uddb0 👩‍🦱 :curly_haired_woman: \\ud83d\\udc69\\u200d\\ud83e\\uddb1 🧑‍🦱 :person_curly_hair: \\ud83e\\uddd1\\u200d\\ud83e\\uddb1 👩‍🦳 :white_haired_woman: \\ud83d\\udc69\\u200d\\ud83e\\uddb3 🧑‍🦳 :person_white_hair: \\ud83e\\uddd1\\u200d\\ud83e\\uddb3 👩‍🦲 :bald_woman: \\ud83d\\udc69\\u200d\\ud83e\\uddb2 🧑‍🦲 :person_bald: \\ud83e\\uddd1\\u200d\\ud83e\\uddb2 👱‍♀️ :blonde_woman: \\ud83d\\udc71\\u200d\\u2640\\ufe0f 👱‍♂️ :man_blond_hair: \\ud83d\\udc71\\u200d\\u2642\\ufe0f 🧓 :older_adult: \\ud83e\\uddd3 👴 :older_man: \\ud83d\\udc74 👵 :older_woman: \\ud83d\\udc75 🙍 :person_frowning: \\ud83d\\ude4d 🙍‍♂️ :frowning_man: \\ud83d\\ude4d\\u200d\\u2642\\ufe0f 🙍‍♀️ :frowning_woman: \\ud83d\\ude4d\\u200d\\u2640\\ufe0f 🙎 :pouting_face: \\ud83d\\ude4e 🙎‍♂️ :man_pouting: \\ud83d\\ude4e\\u200d\\u2642\\ufe0f 🙎‍♀️ :pouting_woman: \\ud83d\\ude4e\\u200d\\u2640\\ufe0f 🙅 :no_good: \\ud83d\\ude45 🙅‍♂️ :ng_man: \\ud83d\\ude45\\u200d\\u2642\\ufe0f 🙅‍♀️ :ng_woman: \\ud83d\\ude45\\u200d\\u2640\\ufe0f 🙆 :ok_woman: \\ud83d\\ude46 🙆‍♂️ :ok_man: \\ud83d\\ude46\\u200d\\u2642\\ufe0f 🙆‍♀️ :woman_gesturing_ok: \\ud83d\\ude46\\u200d\\u2640\\ufe0f 💁 :information_desk_person: \\ud83d\\udc81 💁‍♂️ :sassy_man: \\ud83d\\udc81\\u200d\\u2642\\ufe0f 💁‍♀️ :sassy_woman: \\ud83d\\udc81\\u200d\\u2640\\ufe0f 🙋 :raising_hand: \\ud83d\\ude4b 🙋‍♂️ :man_raising_hand: \\ud83d\\ude4b\\u200d\\u2642\\ufe0f 🙋‍♀️ :raising_hand_woman: \\ud83d\\ude4b\\u200d\\u2640\\ufe0f 🧏 :deaf_person: \\ud83e\\uddcf 🧏‍♂️ :deaf_man: \\ud83e\\uddcf\\u200d\\u2642\\ufe0f 🧏‍♀️ :deaf_woman: \\ud83e\\uddcf\\u200d\\u2640\\ufe0f 🙇 :bow: \\ud83d\\ude47 🙇‍♂️ :bowing_man: \\ud83d\\ude47\\u200d\\u2642\\ufe0f 🙇‍♀️ :bowing_woman: \\ud83d\\ude47\\u200d\\u2640\\ufe0f 🤦 :facepalm: \\ud83e\\udd26 🤦‍♂️ :man_facepalming: \\ud83e\\udd26\\u200d\\u2642\\ufe0f 🤦‍♀️ :woman_facepalming: \\ud83e\\udd26\\u200d\\u2640\\ufe0f 🤷 :shrug: \\ud83e\\udd37 🤷‍♂️ :man_shrugging: \\ud83e\\udd37\\u200d\\u2642\\ufe0f 🤷‍♀️ :woman_shrugging: \\ud83e\\udd37\\u200d\\u2640\\ufe0f 🧑‍⚕️ :health_worker: \\ud83e\\uddd1\\u200d\\u2695\\ufe0f 👨‍⚕️ :man_health_worker: \\ud83d\\udc68\\u200d\\u2695\\ufe0f 👩‍⚕️ :woman_health_worker: \\ud83d\\udc69\\u200d\\u2695\\ufe0f 🧑‍🎓 :student: \\ud83e\\uddd1\\u200d\\ud83c\\udf93 👨‍🎓 :man_student: \\ud83d\\udc68\\u200d\\ud83c\\udf93 👩‍🎓 :woman_student: \\ud83d\\udc69\\u200d\\ud83c\\udf93 🧑‍🏫 :teacher: \\ud83e\\uddd1\\u200d\\ud83c\\udfeb 👨‍🏫 :man_teacher: \\ud83d\\udc68\\u200d\\ud83c\\udfeb 👩‍🏫 :woman_teacher: \\ud83d\\udc69\\u200d\\ud83c\\udfeb 🧑‍⚖️ :judge: \\ud83e\\uddd1\\u200d\\u2696\\ufe0f 👨‍⚖️ :man_judge: \\ud83d\\udc68\\u200d\\u2696\\ufe0f 👩‍⚖️ :woman_judge: \\ud83d\\udc69\\u200d\\u2696\\ufe0f 🧑‍🌾 :farmer: \\ud83e\\uddd1\\u200d\\ud83c\\udf3e 👨‍🌾 :man_farmer: \\ud83d\\udc68\\u200d\\ud83c\\udf3e 👩‍🌾 :woman_farmer: \\ud83d\\udc69\\u200d\\ud83c\\udf3e 🧑‍🍳 :cook: \\ud83e\\uddd1\\u200d\\ud83c\\udf73 👨‍🍳 :man_cook: \\ud83d\\udc68\\u200d\\ud83c\\udf73 👩‍🍳 :woman_cook: \\ud83d\\udc69\\u200d\\ud83c\\udf73 🧑‍🔧 :mechanic: \\ud83e\\uddd1\\u200d\\ud83d\\udd27 👨‍🔧 :man_mechanic: \\ud83d\\udc68\\u200d\\ud83d\\udd27 👩‍🔧 :woman_mechanic: \\ud83d\\udc69\\u200d\\ud83d\\udd27 🧑‍🏭 :factory_worker: \\ud83e\\uddd1\\u200d\\ud83c\\udfed 👨‍🏭 :man_factory_worker: \\ud83d\\udc68\\u200d\\ud83c\\udfed 👩‍🏭 :woman_factory_worker: \\ud83d\\udc69\\u200d\\ud83c\\udfed 🧑‍💼 :office_worker: \\ud83e\\uddd1\\u200d\\ud83d\\udcbc 👨‍💼 :man_office_worker: \\ud83d\\udc68\\u200d\\ud83d\\udcbc 👩‍💼 :woman_office_worker: \\ud83d\\udc69\\u200d\\ud83d\\udcbc 🧑‍🔬 :scientist: \\ud83e\\uddd1\\u200d\\ud83d\\udd2c 👨‍🔬 :man_scientist: \\ud83d\\udc68\\u200d\\ud83d\\udd2c 👩‍🔬 :woman_scientist: \\ud83d\\udc69\\u200d\\ud83d\\udd2c 🧑‍💻 :technologist: \\ud83e\\uddd1\\u200d\\ud83d\\udcbb 👨‍💻 :man_technologist: \\ud83d\\udc68\\u200d\\ud83d\\udcbb 👩‍💻 :woman_technologist: \\ud83d\\udc69\\u200d\\ud83d\\udcbb 🧑‍🎤 :singer: \\ud83e\\uddd1\\u200d\\ud83c\\udfa4 👨‍🎤 :man_singer: \\ud83d\\udc68\\u200d\\ud83c\\udfa4 👩‍🎤 :woman_singer: \\ud83d\\udc69\\u200d\\ud83c\\udfa4 🧑‍🎨 :artist: \\ud83e\\uddd1\\u200d\\ud83c\\udfa8 👨‍🎨 :man_artist: \\ud83d\\udc68\\u200d\\ud83c\\udfa8 👩‍🎨 :woman_artist: \\ud83d\\udc69\\u200d\\ud83c\\udfa8 🧑‍✈️ :pilot: \\ud83e\\uddd1\\u200d\\u2708\\ufe0f 👨‍✈️ :man_pilot: \\ud83d\\udc68\\u200d\\u2708\\ufe0f 👩‍✈️ :woman_pilot: \\ud83d\\udc69\\u200d\\u2708\\ufe0f 🧑‍🚀 :astronaut: \\ud83e\\uddd1\\u200d\\ud83d\\ude80 👨‍🚀 :man_astronaut: \\ud83d\\udc68\\u200d\\ud83d\\ude80 👩‍🚀 :woman_astronaut: \\ud83d\\udc69\\u200d\\ud83d\\ude80 🧑‍🚒 :firefighter: \\ud83e\\uddd1\\u200d\\ud83d\\ude92 👨‍🚒 :man_firefighter: \\ud83d\\udc68\\u200d\\ud83d\\ude92 👩‍🚒 :woman_firefighter: \\ud83d\\udc69\\u200d\\ud83d\\ude92 👮 :cop: \\ud83d\\udc6e 👮‍♂️ :policeman: \\ud83d\\udc6e\\u200d\\u2642\\ufe0f 👮‍♀️ :policewoman: \\ud83d\\udc6e\\u200d\\u2640\\ufe0f 🕵 :detective: \\ud83d\\udd75 🕵️‍♂️ :man_detective: \\ud83d\\udd75\\ufe0f\\u200d\\u2642\\ufe0f 🕵️‍♀️ :woman_detective: \\ud83d\\udd75\\ufe0f\\u200d\\u2640\\ufe0f 💂 :guard: \\ud83d\\udc82 💂‍♂️ :guardsman: \\ud83d\\udc82\\u200d\\u2642\\ufe0f 💂‍♀️ :guardswoman: \\ud83d\\udc82\\u200d\\u2640\\ufe0f 👷 :construction_worker: \\ud83d\\udc77 👷‍♂️ :construction_worker_man: \\ud83d\\udc77\\u200d\\u2642\\ufe0f 👷‍♀️ :construction_worker_woman: \\ud83d\\udc77\\u200d\\u2640\\ufe0f 🤴 :prince: \\ud83e\\udd34 👸 :princess: \\ud83d\\udc78 👳 :man_with_turban: \\ud83d\\udc73 👳‍♂️ :man_wearing_turban: \\ud83d\\udc73\\u200d\\u2642\\ufe0f 👳‍♀️ :woman_with_turban: \\ud83d\\udc73\\u200d\\u2640\\ufe0f 👲 :man_with_gua_pi_mao: \\ud83d\\udc72 🧕 :woman_with_headscarf: \\ud83e\\uddd5 🤵 :man_in_tuxedo: \\ud83e\\udd35 👰 :bride_with_veil: \\ud83d\\udc70 🤰 :pregnant_woman: \\ud83e\\udd30 🤱 :breast_feeding: \\ud83e\\udd31 👼 :angel: \\ud83d\\udc7c 🎅 :santa: \\ud83c\\udf85 🤶 :mrs_claus: \\ud83e\\udd36 🦸 :superhero: \\ud83e\\uddb8 🦸‍♂️ :man_superhero: \\ud83e\\uddb8\\u200d\\u2642\\ufe0f 🦸‍♀️ :superhero_woman: \\ud83e\\uddb8\\u200d\\u2640\\ufe0f 🦹 :supervillain: \\ud83e\\uddb9 🦹‍♂️ :man_supervillain: \\ud83e\\uddb9\\u200d\\u2642\\ufe0f 🦹‍♀️ :supervillain_woman: \\ud83e\\uddb9\\u200d\\u2640\\ufe0f 🧙 :mage: \\ud83e\\uddd9 🧙‍♂️ :mage_man: \\ud83e\\uddd9\\u200d\\u2642\\ufe0f 🧙‍♀️ :mage_woman: \\ud83e\\uddd9\\u200d\\u2640\\ufe0f 🧚 :fairy: \\ud83e\\uddda 🧚‍♂️ :fairy_man: \\ud83e\\uddda\\u200d\\u2642\\ufe0f 🧚‍♀️ :fairy_woman: \\ud83e\\uddda\\u200d\\u2640\\ufe0f 🧛 :vampire: \\ud83e\\udddb 🧛‍♂️ :man_vampire: \\ud83e\\udddb\\u200d\\u2642\\ufe0f 🧛‍♀️ :vampire_woman: \\ud83e\\udddb\\u200d\\u2640\\ufe0f 🧜 :merperson: \\ud83e\\udddc 🧜‍♂️ :merman: \\ud83e\\udddc\\u200d\\u2642\\ufe0f 🧜‍♀️ :mermaid: \\ud83e\\udddc\\u200d\\u2640\\ufe0f 🧝 :elf: \\ud83e\\udddd 🧝‍♂️ :elf_man: \\ud83e\\udddd\\u200d\\u2642\\ufe0f 🧝‍♀️ :elf_woman: \\ud83e\\udddd\\u200d\\u2640\\ufe0f 🧞 :genie: \\ud83e\\uddde 🧞‍♂️ :genie_man: \\ud83e\\uddde\\u200d\\u2642\\ufe0f 🧞‍♀️ :genie_woman: \\ud83e\\uddde\\u200d\\u2640\\ufe0f 🧟 :zombie: \\ud83e\\udddf 🧟‍♂️ :man_zombie: \\ud83e\\udddf\\u200d\\u2642\\ufe0f 🧟‍♀️ :woman_zombie: \\ud83e\\udddf\\u200d\\u2640\\ufe0f 💆 :massage: \\ud83d\\udc86 💆‍♂️ :massage_man: \\ud83d\\udc86\\u200d\\u2642\\ufe0f 💆‍♀️ :massage_woman: \\ud83d\\udc86\\u200d\\u2640\\ufe0f 💇 :haircut: \\ud83d\\udc87 💇‍♂️ :haircut_man: \\ud83d\\udc87\\u200d\\u2642\\ufe0f 💇‍♀️ :haircut_woman: \\ud83d\\udc87\\u200d\\u2640\\ufe0f 🚶 :walking: \\ud83d\\udeb6 🚶‍♂️ :man_walking: \\ud83d\\udeb6\\u200d\\u2642\\ufe0f 🚶‍♀️ :walking_woman: \\ud83d\\udeb6\\u200d\\u2640\\ufe0f 🧍 :standing_person: \\ud83e\\uddcd 🧍‍♂️ :man_standing: \\ud83e\\uddcd\\u200d\\u2642\\ufe0f 🧍‍♀️ :woman_standing: \\ud83e\\uddcd\\u200d\\u2640\\ufe0f 🧎 :kneeling_person: \\ud83e\\uddce 🧎‍♂️ :man_kneeling: \\ud83e\\uddce\\u200d\\u2642\\ufe0f 🧎‍♀️ :woman_kneeling: \\ud83e\\uddce\\u200d\\u2640\\ufe0f 🧑‍🦯 :person_with_probing_cane: \\ud83e\\uddd1\\u200d\\ud83e\\uddaf 👨‍🦯 :man_with_probing_cane: \\ud83d\\udc68\\u200d\\ud83e\\uddaf 👩‍🦯 :woman_with_probing_cane: \\ud83d\\udc69\\u200d\\ud83e\\uddaf 🧑‍🦼 :person_in_motorized_wheelchair: \\ud83e\\uddd1\\u200d\\ud83e\\uddbc 👨‍🦼 :man_in_motorized_wheelchair: \\ud83d\\udc68\\u200d\\ud83e\\uddbc 👩‍🦼 :woman_in_motorized_wheelchair: \\ud83d\\udc69\\u200d\\ud83e\\uddbc 🧑‍🦽 :person_in_manual_wheelchair: \\ud83e\\uddd1\\u200d\\ud83e\\uddbd 👨‍🦽 :man_in_manual_wheelchair: \\ud83d\\udc68\\u200d\\ud83e\\uddbd 👩‍🦽 :woman_in_manual_wheelchair: \\ud83d\\udc69\\u200d\\ud83e\\uddbd 🏃 :runner: \\ud83c\\udfc3 🏃‍♂️ :man_running: \\ud83c\\udfc3\\u200d\\u2642\\ufe0f 🏃‍♀️ :running_woman: \\ud83c\\udfc3\\u200d\\u2640\\ufe0f 💃 :dancer: \\ud83d\\udc83 🕺 :man_dancing: \\ud83d\\udd7a 🕴 :business_suit_levitating: \\ud83d\\udd74 👯 :dancers: \\ud83d\\udc6f 👯‍♂️ :dancing_men: \\ud83d\\udc6f\\u200d\\u2642\\ufe0f 👯‍♀️ :dancing_women: \\ud83d\\udc6f\\u200d\\u2640\\ufe0f 🧖 :person_in_steamy_room: \\ud83e\\uddd6 🧖‍♂️ :man_in_steamy_room: \\ud83e\\uddd6\\u200d\\u2642\\ufe0f 🧖‍♀️ :woman_in_steamy_room: \\ud83e\\uddd6\\u200d\\u2640\\ufe0f 🧘 :lotus_position: \\ud83e\\uddd8 🧑‍🤝‍🧑 :people_holding_hands: \\ud83e\\uddd1\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1 👭 :women_holding_hands: \\ud83d\\udc6d 👫 :couple: \\ud83d\\udc6b 👬 :men_holding_hands: \\ud83d\\udc6c 💏 :couplekiss: \\ud83d\\udc8f 👨‍❤️‍💋‍👨 :kiss_man_man: \\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68 👩‍❤️‍💋‍👩 :kiss_woman_woman: \\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69 💑 :couple_with_heart: \\ud83d\\udc91 👨‍❤️‍👨 :man-heart-man: \\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68 👩‍❤️‍👩 :woman-heart-woman: \\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69 👪 :family: \\ud83d\\udc6a 👨‍👩‍👦 :family_man_woman_boy: \\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66 👨‍👩‍👧 :family_man_woman_girl: \\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67 👨‍👩‍👧‍👦 :family_man_woman_girl_boy: \\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc66 👨‍👩‍👦‍👦 :family_man_woman_boy_boy: \\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66 👨‍👩‍👧‍👧 :family_man_woman_girl_girl: \\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc67 👨‍👨‍👦 :family_man_man_boy: \\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc66 👨‍👨‍👧 :family_man_man_girl: \\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc67 👨‍👨‍👧‍👦 :family_man_man_girl_boy: \\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc66 👨‍👨‍👦‍👦 :family_man_man_boy_boy: \\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66 👨‍👨‍👧‍👧 :family_man_man_girl_girl: \\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc67 👩‍👩‍👦 :family_woman_woman_boy: \\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66 👩‍👩‍👧 :family_woman_woman_girl: \\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67 👩‍👩‍👧‍👦 :family_woman_woman_girl_boy: \\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc66 👩‍👩‍👦‍👦 :family_woman_woman_boy_boy: \\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66 👩‍👩‍👧‍👧 :family_woman_woman_girl_girl: \\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc67 👨‍👦 :family_man_boy: \\ud83d\\udc68\\u200d\\ud83d\\udc66 👨‍👦‍👦 :family_man_boy_boy: \\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66 👨‍👧 :family_man_girl: \\ud83d\\udc68\\u200d\\ud83d\\udc67 👨‍👧‍👦 :family_man_girl_boy: \\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc66 👨‍👧‍👧 :family_man_girl_girl: \\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc67 👩‍👦 :family_woman_boy: \\ud83d\\udc69\\u200d\\ud83d\\udc66 👩‍👦‍👦 :family_woman_boy_boy: \\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66 👩‍👧 :family_woman_girl: \\ud83d\\udc69\\u200d\\ud83d\\udc67 👩‍👧‍👦 :family_woman_girl_boy: \\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc66 👩‍👧‍👧 :woman-girl-girl: \\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d\\udc67 🗣 :speaking_head: \\ud83d\\udde3 👤 :bust_in_silhouette: \\ud83d\\udc64 👥 :busts_in_silhouette: \\ud83d\\udc65 👣 :footprints: \\ud83d\\udc63 🧳 :luggage: \\ud83e\\uddf3 🌂 :closed_umbrella: \\ud83c\\udf02 ☂ :umbrella: \\u2602 🎃 :jack_o_lantern: \\ud83c\\udf83 🧵 :thread: \\ud83e\\uddf5 🧶 :yarn: \\ud83e\\uddf6 👓 :eyeglasses: \\ud83d\\udc53 🕶 :dark_sunglasses: \\ud83d\\udd76 🥽 :goggles: \\ud83e\\udd7d 🥼 :lab_coat: \\ud83e\\udd7c 🦺 :safety_vest: \\ud83e\\uddba 👔 :necktie: \\ud83d\\udc54 👕 :shirt: \\ud83d\\udc55 👖 :jeans: \\ud83d\\udc56 🧣 :scarf: \\ud83e\\udde3 🧤 :gloves: \\ud83e\\udde4 🧥 :coat: \\ud83e\\udde5 🧦 :socks: \\ud83e\\udde6 👗 :dress: \\ud83d\\udc57 👘 :kimono: \\ud83d\\udc58 🥻 :sari: \\ud83e\\udd7b 🩱 :one_piece_swimsuit: \\ud83e\\ude71 🩲 :briefs: \\ud83e\\ude72 🩳 :shorts: \\ud83e\\ude73 👙 :bikini: \\ud83d\\udc59 👚 :womans_clothes: \\ud83d\\udc5a 👛 :purse: \\ud83d\\udc5b 👜 :handbag: \\ud83d\\udc5c 👝 :pouch: \\ud83d\\udc5d 🎒 :school_satchel: \\ud83c\\udf92 👞 :mans_shoe: \\ud83d\\udc5e 👟 :athletic_shoe: \\ud83d\\udc5f 🥾 :hiking_boot: \\ud83e\\udd7e 🥿 :flat_shoe: \\ud83e\\udd7f 👠 :high_heel: \\ud83d\\udc60 👡 :sandal: \\ud83d\\udc61 🩰 :ballet_shoes: \\ud83e\\ude70 👢 :boot: \\ud83d\\udc62 👑 :crown: \\ud83d\\udc51 👒 :womans_hat: \\ud83d\\udc52 🎩 :tophat: \\ud83c\\udfa9 🎓 :mortar_board: \\ud83c\\udf93 🧢 :billed_cap: \\ud83e\\udde2 ⛑ :rescue_worker_helmet: \\u26d1 💄 :lipstick: \\ud83d\\udc84 💍 :ring: \\ud83d\\udc8d 💼 :briefcase: \\ud83d\\udcbc 🩸 :drop_of_blood: \\ud83e\\ude78 🙈 :see_no_evil: \\ud83d\\ude48 🙉 :hear_no_evil: \\ud83d\\ude49 🙊 :speak_no_evil: \\ud83d\\ude4a 💥 :collision: \\ud83d\\udca5 💫 :dizzy: \\ud83d\\udcab 💦 :sweat_drops: \\ud83d\\udca6 💨 :dash: \\ud83d\\udca8 🐵 :monkey_face: \\ud83d\\udc35 🐒 :monkey: \\ud83d\\udc12 🦍 :gorilla: \\ud83e\\udd8d 🦧 :orangutan: \\ud83e\\udda7 🐶 :dog: \\ud83d\\udc36 🐕 :dog2: \\ud83d\\udc15 🦮 :guide_dog: \\ud83e\\uddae 🐕‍🦺 :service_dog: \\ud83d\\udc15\\u200d\\ud83e\\uddba 🐩 :poodle: \\ud83d\\udc29 🐺 :wolf: \\ud83d\\udc3a 🦊 :fox_face: \\ud83e\\udd8a 🦝 :raccoon: \\ud83e\\udd9d 🐱 :cat: \\ud83d\\udc31 🐈 :cat2: \\ud83d\\udc08 🦁 :lion: \\ud83e\\udd81 🐯 :tiger: \\ud83d\\udc2f 🐅 :tiger2: \\ud83d\\udc05 🐆 :leopard: \\ud83d\\udc06 🐴 :horse: \\ud83d\\udc34 🐎 :racehorse: \\ud83d\\udc0e 🦄 :unicorn: \\ud83e\\udd84 🦓 :zebra: \\ud83e\\udd93 🦌 :deer: \\ud83e\\udd8c 🐮 :cow: \\ud83d\\udc2e 🐂 :ox: \\ud83d\\udc02 🐃 :water_buffalo: \\ud83d\\udc03 🐄 :cow2: \\ud83d\\udc04 🐷 :pig: \\ud83d\\udc37 🐖 :pig2: \\ud83d\\udc16 🐗 :boar: \\ud83d\\udc17 🐽 :pig_nose: \\ud83d\\udc3d 🐏 :ram: \\ud83d\\udc0f 🐑 :sheep: \\ud83d\\udc11 🐐 :goat: \\ud83d\\udc10 🐪 :camel: \\ud83d\\udc2a 🐫 :two_hump_camel: \\ud83d\\udc2b 🦙 :llama: \\ud83e\\udd99 🦒 :giraffe: \\ud83e\\udd92 🐘 :elephant: \\ud83d\\udc18 🦏 :rhinoceros: \\ud83e\\udd8f 🦛 :hippopotamus: \\ud83e\\udd9b 🐭 :mouse: \\ud83d\\udc2d 🐁 :mouse2: \\ud83d\\udc01 🐀 :rat: \\ud83d\\udc00 🐹 :hamster: \\ud83d\\udc39 🐰 :rabbit: \\ud83d\\udc30 🐇 :rabbit2: \\ud83d\\udc07 🐿 :chipmunk: \\ud83d\\udc3f 🦔 :hedgehog: \\ud83e\\udd94 🦇 :bat: \\ud83e\\udd87 🐻 :bear: \\ud83d\\udc3b 🐨 :koala: \\ud83d\\udc28 🐼 :panda_face: \\ud83d\\udc3c 🦥 :sloth: \\ud83e\\udda5 🦦 :otter: \\ud83e\\udda6 🦨 :skunk: \\ud83e\\udda8 🦘 :kangaroo: \\ud83e\\udd98 🦡 :badger: \\ud83e\\udda1 🐾 :paw_prints: \\ud83d\\udc3e 🦃 :turkey: \\ud83e\\udd83 🐔 :chicken: \\ud83d\\udc14 🐓 :rooster: \\ud83d\\udc13 🐣 :hatching_chick: \\ud83d\\udc23 🐤 :baby_chick: \\ud83d\\udc24 🐥 :hatched_chick: \\ud83d\\udc25 🐦 :bird: \\ud83d\\udc26 🐧 :penguin: \\ud83d\\udc27 🕊 :dove: \\ud83d\\udd4a 🦅 :eagle: \\ud83e\\udd85 🦆 :duck: \\ud83e\\udd86 🦢 :swan: \\ud83e\\udda2 🦉 :owl: \\ud83e\\udd89 🦩 :flamingo: \\ud83e\\udda9 🦚 :peacock: \\ud83e\\udd9a 🦜 :parrot: \\ud83e\\udd9c 🐸 :frog: \\ud83d\\udc38 🐊 :crocodile: \\ud83d\\udc0a 🐢 :turtle: \\ud83d\\udc22 🦎 :lizard: \\ud83e\\udd8e 🐍 :snake: \\ud83d\\udc0d 🐲 :dragon_face: \\ud83d\\udc32 🐉 :dragon: \\ud83d\\udc09 🦕 :sauropod: \\ud83e\\udd95 🦖 :t-rex: \\ud83e\\udd96 🐳 :whale: \\ud83d\\udc33 🐋 :whale2: \\ud83d\\udc0b 🐬 :dolphin: \\ud83d\\udc2c 🐟 :fish: \\ud83d\\udc1f 🐠 :tropical_fish: \\ud83d\\udc20 🐡 :blowfish: \\ud83d\\udc21 🦈 :shark: \\ud83e\\udd88 🐙 :octopus: \\ud83d\\udc19 🐚 :shell: \\ud83d\\udc1a 🐌 :snail: \\ud83d\\udc0c 🦋 :butterfly: \\ud83e\\udd8b 🐛 :bug: \\ud83d\\udc1b 🐜 :ant: \\ud83d\\udc1c 🐝 :honeybee: \\ud83d\\udc1d 🐞 :beetle: \\ud83d\\udc1e 🦗 :cricket: \\ud83e\\udd97 🕷 :spider: \\ud83d\\udd77 🕸 :spider_web: \\ud83d\\udd78 🦂 :scorpion: \\ud83e\\udd82 🦟 :mosquito: \\ud83e\\udd9f 🦠 :microbe: \\ud83e\\udda0 💐 :bouquet: \\ud83d\\udc90 🌸 :cherry_blossom: \\ud83c\\udf38 💮 :white_flower: \\ud83d\\udcae 🏵 :rosette: \\ud83c\\udff5 🌹 :rose: \\ud83c\\udf39 🥀 :wilted_flower: \\ud83e\\udd40 🌺 :hibiscus: \\ud83c\\udf3a 🌻 :sunflower: \\ud83c\\udf3b 🌼 :blossom: \\ud83c\\udf3c 🌷 :tulip: \\ud83c\\udf37 🌱 :seedling: \\ud83c\\udf31 🌲 :evergreen_tree: \\ud83c\\udf32 🌳 :deciduous_tree: \\ud83c\\udf33 🌴 :palm_tree: \\ud83c\\udf34 🌵 :cactus: \\ud83c\\udf35 🌾 :ear_of_rice: \\ud83c\\udf3e 🌿 :herb: \\ud83c\\udf3f ☘ :shamrock: \\u2618 🍀 :four_leaf_clover: \\ud83c\\udf40 🍁 :maple_leaf: \\ud83c\\udf41 🍂 :fallen_leaf: \\ud83c\\udf42 🍃 :leaves: \\ud83c\\udf43 🍄 :mushroom: \\ud83c\\udf44 🌰 :chestnut: \\ud83c\\udf30 🦀 :crab: \\ud83e\\udd80 🦞 :lobster: \\ud83e\\udd9e 🦐 :shrimp: \\ud83e\\udd90 🦑 :squid: \\ud83e\\udd91 🌍 :earth_africa: \\ud83c\\udf0d 🌎 :earth_americas: \\ud83c\\udf0e 🌏 :earth_asia: \\ud83c\\udf0f 🌐 :globe_with_meridians: \\ud83c\\udf10 🌑 :new_moon: \\ud83c\\udf11 🌒 :waxing_crescent_moon: \\ud83c\\udf12 🌓 :first_quarter_moon: \\ud83c\\udf13 🌔 :moon: \\ud83c\\udf14 🌕 :full_moon: \\ud83c\\udf15 🌖 :waning_gibbous_moon: \\ud83c\\udf16 🌗 :last_quarter_moon: \\ud83c\\udf17 🌘 :waning_crescent_moon: \\ud83c\\udf18 🌙 :crescent_moon: \\ud83c\\udf19 🌚 :new_moon_with_face: \\ud83c\\udf1a 🌛 :first_quarter_moon_with_face: \\ud83c\\udf1b 🌜 :last_quarter_moon_with_face: \\ud83c\\udf1c ☀ :sunny: \\u2600 🌝 :full_moon_with_face: \\ud83c\\udf1d 🌞 :sun_with_face: \\ud83c\\udf1e ⭐ :star: \\u2b50 🌟 :star2: \\ud83c\\udf1f 🌠 :stars: \\ud83c\\udf20 ☁ :cloud: \\u2601 ⛅ :partly_sunny: \\u26c5 ⛈ :cloud_with_lightning_and_rain: \\u26c8 🌤 :mostly_sunny: \\ud83c\\udf24 🌥 :barely_sunny: \\ud83c\\udf25 🌦 :sun_behind_rain_cloud: \\ud83c\\udf26 🌧 :cloud_with_rain: \\ud83c\\udf27 🌨 :cloud_with_snow: \\ud83c\\udf28 🌩 :lightning: \\ud83c\\udf29 🌪 :tornado: \\ud83c\\udf2a 🌫 :fog: \\ud83c\\udf2b 🌬 :wind_face: \\ud83c\\udf2c 🌈 :rainbow: \\ud83c\\udf08 ☔ :umbrella_with_rain_drops: \\u2614 ⚡ :zap: \\u26a1 ❄ :snowflake: \\u2744 ☃ :snowman: \\u2603 ⛄ :snowman_without_snow: \\u26c4 ☄ :comet: \\u2604 🔥 :fire: \\ud83d\\udd25 💧 :droplet: \\ud83d\\udca7 🌊 :ocean: \\ud83c\\udf0a 🎄 :christmas_tree: \\ud83c\\udf84 ✨ :sparkles: \\u2728 🎋 :tanabata_tree: \\ud83c\\udf8b 🎍 :bamboo: \\ud83c\\udf8d 🍇 :grapes: \\ud83c\\udf47 🍈 :melon: \\ud83c\\udf48 🍉 :watermelon: \\ud83c\\udf49 🍊 :tangerine: \\ud83c\\udf4a 🍋 :lemon: \\ud83c\\udf4b 🍌 :banana: \\ud83c\\udf4c 🍍 :pineapple: \\ud83c\\udf4d 🥭 :mango: \\ud83e\\udd6d 🍎 :apple: \\ud83c\\udf4e 🍏 :green_apple: \\ud83c\\udf4f 🍐 :pear: \\ud83c\\udf50 🍑 :peach: \\ud83c\\udf51 🍒 :cherries: \\ud83c\\udf52 🍓 :strawberry: \\ud83c\\udf53 🥝 :kiwi_fruit: \\ud83e\\udd5d 🍅 :tomato: \\ud83c\\udf45 🥥 :coconut: \\ud83e\\udd65 🥑 :avocado: \\ud83e\\udd51 🍆 :eggplant: \\ud83c\\udf46 🥔 :potato: \\ud83e\\udd54 🥕 :carrot: \\ud83e\\udd55 🌽 :corn: \\ud83c\\udf3d 🌶 :hot_pepper: \\ud83c\\udf36 🥒 :cucumber: \\ud83e\\udd52 🥬 :leafy_green: \\ud83e\\udd6c 🥦 :broccoli: \\ud83e\\udd66 🧄 :garlic: \\ud83e\\uddc4 🧅 :onion: \\ud83e\\uddc5 🥜 :peanuts: \\ud83e\\udd5c 🍞 :bread: \\ud83c\\udf5e 🥐 :croissant: \\ud83e\\udd50 🥖 :baguette_bread: \\ud83e\\udd56 🥨 :pretzel: \\ud83e\\udd68 🥯 :bagel: \\ud83e\\udd6f 🥞 :pancakes: \\ud83e\\udd5e 🧇 :waffle: \\ud83e\\uddc7 🧀 :cheese_wedge: \\ud83e\\uddc0 🍖 :meat_on_bone: \\ud83c\\udf56 🍗 :poultry_leg: \\ud83c\\udf57 🥩 :cut_of_meat: \\ud83e\\udd69 🥓 :bacon: \\ud83e\\udd53 🍔 :hamburger: \\ud83c\\udf54 🍟 :fries: \\ud83c\\udf5f 🍕 :pizza: \\ud83c\\udf55 🌭 :hotdog: \\ud83c\\udf2d 🥪 :sandwich: \\ud83e\\udd6a 🌮 :taco: \\ud83c\\udf2e 🌯 :burrito: \\ud83c\\udf2f 🥙 :stuffed_flatbread: \\ud83e\\udd59 🧆 :falafel: \\ud83e\\uddc6 🍳 :cooking: \\ud83c\\udf73 🥘 :shallow_pan_of_food: \\ud83e\\udd58 🍲 :stew: \\ud83c\\udf72 🥣 :bowl_with_spoon: \\ud83e\\udd63 🥗 :green_salad: \\ud83e\\udd57 🍿 :popcorn: \\ud83c\\udf7f 🧈 :butter: \\ud83e\\uddc8 🧂 :salt: \\ud83e\\uddc2 🥫 :canned_food: \\ud83e\\udd6b 🍱 :bento: \\ud83c\\udf71 🍘 :rice_cracker: \\ud83c\\udf58 🍙 :rice_ball: \\ud83c\\udf59 🍚 :rice: \\ud83c\\udf5a 🍛 :curry: \\ud83c\\udf5b 🍜 :ramen: \\ud83c\\udf5c 🍝 :spaghetti: \\ud83c\\udf5d 🍠 :sweet_potato: \\ud83c\\udf60 🍢 :oden: \\ud83c\\udf62 🍣 :sushi: \\ud83c\\udf63 🍤 :fried_shrimp: \\ud83c\\udf64 🍥 :fish_cake: \\ud83c\\udf65 🥮 :moon_cake: \\ud83e\\udd6e 🍡 :dango: \\ud83c\\udf61 🥟 :dumpling: \\ud83e\\udd5f 🥠 :fortune_cookie: \\ud83e\\udd60 🥡 :takeout_box: \\ud83e\\udd61 🦪 :oyster: \\ud83e\\uddaa 🍦 :icecream: \\ud83c\\udf66 🍧 :shaved_ice: \\ud83c\\udf67 🍨 :ice_cream: \\ud83c\\udf68 🍩 :doughnut: \\ud83c\\udf69 🍪 :cookie: \\ud83c\\udf6a 🎂 :birthday: \\ud83c\\udf82 🍰 :cake: \\ud83c\\udf70 🧁 :cupcake: \\ud83e\\uddc1 🥧 :pie: \\ud83e\\udd67 🍫 :chocolate_bar: \\ud83c\\udf6b 🍬 :candy: \\ud83c\\udf6c 🍭 :lollipop: \\ud83c\\udf6d 🍮 :custard: \\ud83c\\udf6e 🍯 :honey_pot: \\ud83c\\udf6f 🍼 :baby_bottle: \\ud83c\\udf7c 🥛 :glass_of_milk: \\ud83e\\udd5b ☕ :coffee: \\u2615 🍵 :tea: \\ud83c\\udf75 🍶 :sake: \\ud83c\\udf76 🍾 :champagne: \\ud83c\\udf7e 🍷 :wine_glass: \\ud83c\\udf77 🍸 :cocktail: \\ud83c\\udf78 🍹 :tropical_drink: \\ud83c\\udf79 🍺 :beer: \\ud83c\\udf7a 🍻 :beers: \\ud83c\\udf7b 🥂 :clinking_glasses: \\ud83e\\udd42 🥃 :tumbler_glass: \\ud83e\\udd43 🥤 :cup_with_straw: \\ud83e\\udd64 🧃 :beverage_box: \\ud83e\\uddc3 🧉 :mate: \\ud83e\\uddc9 🧊 :ice_cube: \\ud83e\\uddca 🥢 :chopsticks: \\ud83e\\udd62 🍽 :knife_fork_plate: \\ud83c\\udf7d 🍴 :fork_and_knife: \\ud83c\\udf74 🥄 :spoon: \\ud83e\\udd44 🧗 :person_climbing: \\ud83e\\uddd7 🧗‍♂️ :man_climbing: \\ud83e\\uddd7\\u200d\\u2642\\ufe0f 🧗‍♀️ :woman_climbing: \\ud83e\\uddd7\\u200d\\u2640\\ufe0f 🤺 :person_fencing: \\ud83e\\udd3a 🏇 :horse_racing: \\ud83c\\udfc7 ⛷ :skier: \\u26f7 🏂 :snowboarder: \\ud83c\\udfc2 🏌 :golfer: \\ud83c\\udfcc 🏌️‍♂️ :golfing_man: \\ud83c\\udfcc\\ufe0f\\u200d\\u2642\\ufe0f 🏌️‍♀️ :golfing_woman: \\ud83c\\udfcc\\ufe0f\\u200d\\u2640\\ufe0f 🏄 :surfer: \\ud83c\\udfc4 🏄‍♂️ :man_surfing: \\ud83c\\udfc4\\u200d\\u2642\\ufe0f 🏄‍♀️ :surfing_woman: \\ud83c\\udfc4\\u200d\\u2640\\ufe0f 🚣 :rowboat: \\ud83d\\udea3 🚣‍♂️ :rowing_man: \\ud83d\\udea3\\u200d\\u2642\\ufe0f 🚣‍♀️ :rowing_woman: \\ud83d\\udea3\\u200d\\u2640\\ufe0f 🏊 :swimmer: \\ud83c\\udfca 🏊‍♂️ :man_swimming: \\ud83c\\udfca\\u200d\\u2642\\ufe0f 🏊‍♀️ :swimming_woman: \\ud83c\\udfca\\u200d\\u2640\\ufe0f ⛹ :person_with_ball: \\u26f9 ⛹️‍♂️ :basketball_man: \\u26f9\\ufe0f\\u200d\\u2642\\ufe0f ⛹️‍♀️ :basketball_woman: \\u26f9\\ufe0f\\u200d\\u2640\\ufe0f 🏋 :weight_lifter: \\ud83c\\udfcb 🏋️‍♂️ :weight_lifting_man: \\ud83c\\udfcb\\ufe0f\\u200d\\u2642\\ufe0f 🏋️‍♀️ :weight_lifting_woman: \\ud83c\\udfcb\\ufe0f\\u200d\\u2640\\ufe0f 🚴 :bicyclist: \\ud83d\\udeb4 🚴‍♂️ :biking_man: \\ud83d\\udeb4\\u200d\\u2642\\ufe0f 🚴‍♀️ :biking_woman: \\ud83d\\udeb4\\u200d\\u2640\\ufe0f 🚵 :mountain_bicyclist: \\ud83d\\udeb5 🚵‍♂️ :man_mountain_biking: \\ud83d\\udeb5\\u200d\\u2642\\ufe0f 🚵‍♀️ :mountain_biking_woman: \\ud83d\\udeb5\\u200d\\u2640\\ufe0f 🤸 :cartwheeling: \\ud83e\\udd38 🤸‍♂️ :man_cartwheeling: \\ud83e\\udd38\\u200d\\u2642\\ufe0f 🤸‍♀️ :woman_cartwheeling: \\ud83e\\udd38\\u200d\\u2640\\ufe0f 🤼 :wrestlers: \\ud83e\\udd3c 🤼‍♂️ :men_wrestling: \\ud83e\\udd3c\\u200d\\u2642\\ufe0f 🤼‍♀️ :women_wrestling: \\ud83e\\udd3c\\u200d\\u2640\\ufe0f 🤽 :water_polo: \\ud83e\\udd3d 🤽‍♂️ :man_playing_water_polo: \\ud83e\\udd3d\\u200d\\u2642\\ufe0f 🤽‍♀️ :woman_playing_water_polo: \\ud83e\\udd3d\\u200d\\u2640\\ufe0f 🤾 :handball: \\ud83e\\udd3e 🤾‍♂️ :man_playing_handball: \\ud83e\\udd3e\\u200d\\u2642\\ufe0f 🤾‍♀️ :woman_playing_handball: \\ud83e\\udd3e\\u200d\\u2640\\ufe0f 🤹 :juggling: \\ud83e\\udd39 🤹‍♂️ :man_juggling: \\ud83e\\udd39\\u200d\\u2642\\ufe0f 🤹‍♀️ :woman_juggling: \\ud83e\\udd39\\u200d\\u2640\\ufe0f 🧘‍♂️ :man_in_lotus_position: \\ud83e\\uddd8\\u200d\\u2642\\ufe0f 🧘‍♀️ :woman_in_lotus_position: \\ud83e\\uddd8\\u200d\\u2640\\ufe0f 🎪 :circus_tent: \\ud83c\\udfaa 🛹 :skateboard: \\ud83d\\udef9 🛶 :canoe: \\ud83d\\udef6 🎗 :reminder_ribbon: \\ud83c\\udf97 🎟 :admission_tickets: \\ud83c\\udf9f 🎫 :ticket: \\ud83c\\udfab 🎖 :medal: \\ud83c\\udf96 🏆 :trophy: \\ud83c\\udfc6 🏅 :sports_medal: \\ud83c\\udfc5 🥇 :1st_place_medal: \\ud83e\\udd47 🥈 :2nd_place_medal: \\ud83e\\udd48 🥉 :3rd_place_medal: \\ud83e\\udd49 ⚽ :soccer: \\u26bd ⚾ :baseball: \\u26be 🥎 :softball: \\ud83e\\udd4e 🏀 :basketball: \\ud83c\\udfc0 🏐 :volleyball: \\ud83c\\udfd0 🏈 :football: \\ud83c\\udfc8 🏉 :rugby_football: \\ud83c\\udfc9 🎾 :tennis: \\ud83c\\udfbe 🥏 :flying_disc: \\ud83e\\udd4f 🎳 :bowling: \\ud83c\\udfb3 🏏 :cricket_game: \\ud83c\\udfcf 🏑 :field_hockey: \\ud83c\\udfd1 🏒 :ice_hockey: \\ud83c\\udfd2 🥍 :lacrosse: \\ud83e\\udd4d 🏓 :ping_pong: \\ud83c\\udfd3 🏸 :badminton: \\ud83c\\udff8 🥊 :boxing_glove: \\ud83e\\udd4a 🥋 :martial_arts_uniform: \\ud83e\\udd4b 🥅 :goal_net: \\ud83e\\udd45 ⛳ :golf: \\u26f3 ⛸ :ice_skate: \\u26f8 🎣 :fishing_pole_and_fish: \\ud83c\\udfa3 🎽 :running_shirt: \\ud83c\\udfbd 🎿 :ski: \\ud83c\\udfbf 🛷 :sled: \\ud83d\\udef7 🥌 :curling_stone: \\ud83e\\udd4c 🎯 :dart: \\ud83c\\udfaf 🎱 :8ball: \\ud83c\\udfb1 🎮 :video_game: \\ud83c\\udfae 🎰 :slot_machine: \\ud83c\\udfb0 🎲 :game_die: \\ud83c\\udfb2 🧩 :jigsaw: \\ud83e\\udde9 ♟ :chess_pawn: \\u265f 🎭 :performing_arts: \\ud83c\\udfad 🎨 :art: \\ud83c\\udfa8 🎼 :musical_score: \\ud83c\\udfbc 🎤 :microphone: \\ud83c\\udfa4 🎧 :headphones: \\ud83c\\udfa7 🎷 :saxophone: \\ud83c\\udfb7 🎸 :guitar: \\ud83c\\udfb8 🎹 :musical_keyboard: \\ud83c\\udfb9 🎺 :trumpet: \\ud83c\\udfba 🎻 :violin: \\ud83c\\udfbb 🥁 :drum: \\ud83e\\udd41 🎬 :clapper: \\ud83c\\udfac 🏹 :bow_and_arrow: \\ud83c\\udff9 🗾 :japan: \\ud83d\\uddfe 🏔 :snow_capped_mountain: \\ud83c\\udfd4 ⛰ :mountain: \\u26f0 🌋 :volcano: \\ud83c\\udf0b 🗻 :mount_fuji: \\ud83d\\uddfb 🏕 :camping: \\ud83c\\udfd5 🏖 :beach_with_umbrella: \\ud83c\\udfd6 🏜 :desert: \\ud83c\\udfdc 🏝 :desert_island: \\ud83c\\udfdd 🏞 :national_park: \\ud83c\\udfde 🏟 :stadium: \\ud83c\\udfdf 🏛 :classical_building: \\ud83c\\udfdb 🏗 :building_construction: \\ud83c\\udfd7 🏘 :houses: \\ud83c\\udfd8 🏚 :derelict_house: \\ud83c\\udfda 🏠 :house: \\ud83c\\udfe0 🏡 :house_with_garden: \\ud83c\\udfe1 🏢 :office: \\ud83c\\udfe2 🏣 :post_office: \\ud83c\\udfe3 🏤 :european_post_office: \\ud83c\\udfe4 🏥 :hospital: \\ud83c\\udfe5 🏦 :bank: \\ud83c\\udfe6 🏨 :hotel: \\ud83c\\udfe8 🏩 :love_hotel: \\ud83c\\udfe9 🏪 :convenience_store: \\ud83c\\udfea 🏫 :school: \\ud83c\\udfeb 🏬 :department_store: \\ud83c\\udfec 🏭 :factory: \\ud83c\\udfed 🏯 :japanese_castle: \\ud83c\\udfef 🏰 :european_castle: \\ud83c\\udff0 💒 :wedding: \\ud83d\\udc92 🗼 :tokyo_tower: \\ud83d\\uddfc 🗽 :statue_of_liberty: \\ud83d\\uddfd ⛪ :church: \\u26ea 🕌 :mosque: \\ud83d\\udd4c 🛕 :hindu_temple: \\ud83d\\uded5 🕍 :synagogue: \\ud83d\\udd4d ⛩ :shinto_shrine: \\u26e9 🕋 :kaaba: \\ud83d\\udd4b ⛲ :fountain: \\u26f2 ⛺ :tent: \\u26fa 🌁 :foggy: \\ud83c\\udf01 🌃 :night_with_stars: \\ud83c\\udf03 🏙 :cityscape: \\ud83c\\udfd9 🌄 :sunrise_over_mountains: \\ud83c\\udf04 🌅 :sunrise: \\ud83c\\udf05 🌆 :city_sunset: \\ud83c\\udf06 🌇 :city_sunrise: \\ud83c\\udf07 🌉 :bridge_at_night: \\ud83c\\udf09 🎠 :carousel_horse: \\ud83c\\udfa0 🎡 :ferris_wheel: \\ud83c\\udfa1 🎢 :roller_coaster: \\ud83c\\udfa2 🚂 :steam_locomotive: \\ud83d\\ude82 🚃 :railway_car: \\ud83d\\ude83 🚄 :bullettrain_side: \\ud83d\\ude84 🚅 :bullettrain_front: \\ud83d\\ude85 🚆 :train2: \\ud83d\\ude86 🚇 :metro: \\ud83d\\ude87 🚈 :light_rail: \\ud83d\\ude88 🚉 :station: \\ud83d\\ude89 🚊 :tram: \\ud83d\\ude8a 🚝 :monorail: \\ud83d\\ude9d 🚞 :mountain_railway: \\ud83d\\ude9e 🚋 :train: \\ud83d\\ude8b 🚌 :bus: \\ud83d\\ude8c 🚍 :oncoming_bus: \\ud83d\\ude8d 🚎 :trolleybus: \\ud83d\\ude8e 🚐 :minibus: \\ud83d\\ude90 🚑 :ambulance: \\ud83d\\ude91 🚒 :fire_engine: \\ud83d\\ude92 🚓 :police_car: \\ud83d\\ude93 🚔 :oncoming_police_car: \\ud83d\\ude94 🚕 :taxi: \\ud83d\\ude95 🚖 :oncoming_taxi: \\ud83d\\ude96 🚗 :car: \\ud83d\\ude97 🚘 :oncoming_automobile: \\ud83d\\ude98 🚚 :truck: \\ud83d\\ude9a 🚛 :articulated_lorry: \\ud83d\\ude9b 🚜 :tractor: \\ud83d\\ude9c 🏎 :racing_car: \\ud83c\\udfce 🏍 :motorcycle: \\ud83c\\udfcd 🛵 :motor_scooter: \\ud83d\\udef5 🛺 :auto_rickshaw: \\ud83d\\udefa 🚲 :bike: \\ud83d\\udeb2 🛴 :kick_scooter: \\ud83d\\udef4 🚏 :busstop: \\ud83d\\ude8f 🛣 :motorway: \\ud83d\\udee3 🛤 :railway_track: \\ud83d\\udee4 ⛽ :fuelpump: \\u26fd 🚨 :rotating_light: \\ud83d\\udea8 🚥 :traffic_light: \\ud83d\\udea5 🚦 :vertical_traffic_light: \\ud83d\\udea6 🚧 :construction: \\ud83d\\udea7 ⚓ :anchor: \\u2693 ⛵ :sailboat: \\u26f5 🚤 :speedboat: \\ud83d\\udea4 🛳 :passenger_ship: \\ud83d\\udef3 ⛴ :ferry: \\u26f4 🛥 :motor_boat: \\ud83d\\udee5 🚢 :ship: \\ud83d\\udea2 ✈ :airplane: \\u2708 🛩 :small_airplane: \\ud83d\\udee9 🛫 :airplane_departure: \\ud83d\\udeeb 🛬 :flight_arrival: \\ud83d\\udeec 🪂 :parachute: \\ud83e\\ude82 💺 :seat: \\ud83d\\udcba 🚁 :helicopter: \\ud83d\\ude81 🚟 :suspension_railway: \\ud83d\\ude9f 🚠 :mountain_cableway: \\ud83d\\udea0 🚡 :aerial_tramway: \\ud83d\\udea1 🛰 :satellite: \\ud83d\\udef0 🚀 :rocket: \\ud83d\\ude80 🛸 :flying_saucer: \\ud83d\\udef8 🪐 :ringed_planet: \\ud83e\\ude90 🌌 :milky_way: \\ud83c\\udf0c ⛱ :umbrella_on_ground: \\u26f1 🎆 :fireworks: \\ud83c\\udf86 🎇 :sparkler: \\ud83c\\udf87 🎑 :rice_scene: \\ud83c\\udf91 💴 :yen: \\ud83d\\udcb4 💵 :dollar: \\ud83d\\udcb5 💶 :euro: \\ud83d\\udcb6 💷 :pound: \\ud83d\\udcb7 🗿 :moyai: \\ud83d\\uddff 🛂 :passport_control: \\ud83d\\udec2 🛃 :customs: \\ud83d\\udec3 🛄 :baggage_claim: \\ud83d\\udec4 🛅 :left_luggage: \\ud83d\\udec5 💌 :love_letter: \\ud83d\\udc8c 🕳 :hole: \\ud83d\\udd73 💣 :bomb: \\ud83d\\udca3 🛀 :bath: \\ud83d\\udec0 🛌 :sleeping_bed: \\ud83d\\udecc 🔪 :hocho: \\ud83d\\udd2a 🏺 :amphora: \\ud83c\\udffa 🗺 :world_map: \\ud83d\\uddfa 🧭 :compass: \\ud83e\\udded 🧱 :bricks: \\ud83e\\uddf1 💈 :barber: \\ud83d\\udc88 🦽 :manual_wheelchair: \\ud83e\\uddbd 🦼 :motorized_wheelchair: \\ud83e\\uddbc 🛢 :oil_drum: \\ud83d\\udee2 🛎 :bellhop_bell: \\ud83d\\udece ⌛ :hourglass: \\u231b ⏳ :hourglass_flowing_sand: \\u23f3 ⌚ :watch: \\u231a ⏰ :alarm_clock: \\u23f0 ⏱ :stopwatch: \\u23f1 ⏲ :timer_clock: \\u23f2 🕰 :mantelpiece_clock: \\ud83d\\udd70 🌡 :thermometer: \\ud83c\\udf21 🧨 :firecracker: \\ud83e\\udde8 🎈 :balloon: \\ud83c\\udf88 🎉 :tada: \\ud83c\\udf89 🎊 :confetti_ball: \\ud83c\\udf8a 🎎 :dolls: \\ud83c\\udf8e 🎏 :flags: \\ud83c\\udf8f 🎐 :wind_chime: \\ud83c\\udf90 🧧 :red_envelope: \\ud83e\\udde7 🎀 :ribbon: \\ud83c\\udf80 🎁 :gift: \\ud83c\\udf81 🤿 :diving_mask: \\ud83e\\udd3f 🪀 :yo_yo: \\ud83e\\ude80 🪁 :kite: \\ud83e\\ude81 🔮 :crystal_ball: \\ud83d\\udd2e 🧿 :nazar_amulet: \\ud83e\\uddff 🕹 :joystick: \\ud83d\\udd79 🧸 :teddy_bear: \\ud83e\\uddf8 🖼 :framed_picture: \\ud83d\\uddbc 🛍 :shopping_bags: \\ud83d\\udecd 📿 :prayer_beads: \\ud83d\\udcff 💎 :gem: \\ud83d\\udc8e 📯 :postal_horn: \\ud83d\\udcef 🎙 :studio_microphone: \\ud83c\\udf99 🎚 :level_slider: \\ud83c\\udf9a 🎛 :control_knobs: \\ud83c\\udf9b 📻 :radio: \\ud83d\\udcfb 🪕 :banjo: \\ud83e\\ude95 📱 :iphone: \\ud83d\\udcf1 📲 :calling: \\ud83d\\udcf2 ☎ :telephone: \\u260e 📞 :telephone_receiver: \\ud83d\\udcde 📟 :pager: \\ud83d\\udcdf 📠 :fax: \\ud83d\\udce0 🔋 :battery: \\ud83d\\udd0b 🔌 :electric_plug: \\ud83d\\udd0c 💻 :computer: \\ud83d\\udcbb 🖥 :desktop_computer: \\ud83d\\udda5 🖨 :printer: \\ud83d\\udda8 ⌨ :keyboard: \\u2328 🖱 :computer_mouse: \\ud83d\\uddb1 🖲 :trackball: \\ud83d\\uddb2 💽 :minidisc: \\ud83d\\udcbd 💾 :floppy_disk: \\ud83d\\udcbe 💿 :cd: \\ud83d\\udcbf 📀 :dvd: \\ud83d\\udcc0 🧮 :abacus: \\ud83e\\uddee 🎥 :movie_camera: \\ud83c\\udfa5 🎞 :film_frames: \\ud83c\\udf9e 📽 :film_projector: \\ud83d\\udcfd 📺 :tv: \\ud83d\\udcfa 📷 :camera: \\ud83d\\udcf7 📸 :camera_with_flash: \\ud83d\\udcf8 📹 :video_camera: \\ud83d\\udcf9 📼 :vhs: \\ud83d\\udcfc 🔍 :mag: \\ud83d\\udd0d 🔎 :mag_right: \\ud83d\\udd0e 🕯 :candle: \\ud83d\\udd6f 💡 :bulb: \\ud83d\\udca1 🔦 :flashlight: \\ud83d\\udd26 🏮 :lantern: \\ud83c\\udfee 🪔 :diya_lamp: \\ud83e\\ude94 📔 :notebook_with_decorative_cover: \\ud83d\\udcd4 📕 :closed_book: \\ud83d\\udcd5 📖 :open_book: \\ud83d\\udcd6 📗 :green_book: \\ud83d\\udcd7 📘 :blue_book: \\ud83d\\udcd8 📙 :orange_book: \\ud83d\\udcd9 📚 :books: \\ud83d\\udcda 📓 :notebook: \\ud83d\\udcd3 📃 :page_with_curl: \\ud83d\\udcc3 📜 :scroll: \\ud83d\\udcdc 📄 :page_facing_up: \\ud83d\\udcc4 📰 :newspaper: \\ud83d\\udcf0 🗞 :rolled_up_newspaper: \\ud83d\\uddde 📑 :bookmark_tabs: \\ud83d\\udcd1 🔖 :bookmark: \\ud83d\\udd16 🏷 :label: \\ud83c\\udff7 💰 :moneybag: \\ud83d\\udcb0 💸 :money_with_wings: \\ud83d\\udcb8 💳 :credit_card: \\ud83d\\udcb3 🧾 :receipt: \\ud83e\\uddfe ✉ :envelope: \\u2709 📧 :e-mail: \\ud83d\\udce7 📨 :incoming_envelope: \\ud83d\\udce8 📩 :envelope_with_arrow: \\ud83d\\udce9 📤 :outbox_tray: \\ud83d\\udce4 📥 :inbox_tray: \\ud83d\\udce5 📦 :package: \\ud83d\\udce6 📫 :mailbox: \\ud83d\\udceb 📪 :mailbox_closed: \\ud83d\\udcea 📬 :mailbox_with_mail: \\ud83d\\udcec 📭 :mailbox_with_no_mail: \\ud83d\\udced 📮 :postbox: \\ud83d\\udcee 🗳 :ballot_box: \\ud83d\\uddf3 ✏ :pencil2: \\u270f ✒ :black_nib: \\u2712 🖋 :fountain_pen: \\ud83d\\udd8b 🖊 :pen: \\ud83d\\udd8a 🖌 :paintbrush: \\ud83d\\udd8c 🖍 :crayon: \\ud83d\\udd8d 📝 :memo: \\ud83d\\udcdd 📁 :file_folder: \\ud83d\\udcc1 📂 :open_file_folder: \\ud83d\\udcc2 🗂 :card_index_dividers: \\ud83d\\uddc2 📅 :date: \\ud83d\\udcc5 📆 :calendar: \\ud83d\\udcc6 🗒 :spiral_notepad: \\ud83d\\uddd2 🗓 :spiral_calendar: \\ud83d\\uddd3 📇 :card_index: \\ud83d\\udcc7 📈 :chart_with_upwards_trend: \\ud83d\\udcc8 📉 :chart_decreasing: \\ud83d\\udcc9 📊 :bar_chart: \\ud83d\\udcca 📋 :clipboard: \\ud83d\\udccb 📌 :pushpin: \\ud83d\\udccc 📍 :round_pushpin: \\ud83d\\udccd 📎 :paperclip: \\ud83d\\udcce 🖇 :linked_paperclips: \\ud83d\\udd87 📏 :straight_ruler: \\ud83d\\udccf 📐 :triangular_ruler: \\ud83d\\udcd0 ✂ :scissors: \\u2702 🗃 :card_file_box: \\ud83d\\uddc3 🗄 :file_cabinet: \\ud83d\\uddc4 🗑 :wastebasket: \\ud83d\\uddd1 🔒 :lock: \\ud83d\\udd12 🔓 :unlock: \\ud83d\\udd13 🔏 :lock_with_ink_pen: \\ud83d\\udd0f 🔐 :closed_lock_with_key: \\ud83d\\udd10 🔑 :key: \\ud83d\\udd11 🗝 :old_key: \\ud83d\\udddd 🔨 :hammer: \\ud83d\\udd28 🪓 :axe: \\ud83e\\ude93 ⛏ :pick: \\u26cf ⚒ :hammer_and_pick: \\u2692 🛠 :hammer_and_wrench: \\ud83d\\udee0 🗡 :dagger: \\ud83d\\udde1 ⚔ :crossed_swords: \\u2694 🔫 :gun: \\ud83d\\udd2b 🛡 :shield: \\ud83d\\udee1 🔧 :wrench: \\ud83d\\udd27 🔩 :nut_and_bolt: \\ud83d\\udd29 ⚙ :gear: \\u2699 🗜 :clamp: \\ud83d\\udddc ⚖ :balance_scale: \\u2696 🦯 :probing_cane: \\ud83e\\uddaf 🔗 :link: \\ud83d\\udd17 ⛓ :chains: \\u26d3 🧰 :toolbox: \\ud83e\\uddf0 🧲 :magnet: \\ud83e\\uddf2 ⚗ :alembic: \\u2697 🧪 :test_tube: \\ud83e\\uddea 🧫 :petri_dish: \\ud83e\\uddeb 🧬 :dna: \\ud83e\\uddec 🔬 :microscope: \\ud83d\\udd2c 🔭 :telescope: \\ud83d\\udd2d 📡 :satellite_antenna: \\ud83d\\udce1 💉 :syringe: \\ud83d\\udc89 💊 :pill: \\ud83d\\udc8a 🩹 :adhesive_bandage: \\ud83e\\ude79 🩺 :stethoscope: \\ud83e\\ude7a 🚪 :door: \\ud83d\\udeaa 🛏 :bed: \\ud83d\\udecf 🛋 :couch_and_lamp: \\ud83d\\udecb 🪑 :chair: \\ud83e\\ude91 🚽 :toilet: \\ud83d\\udebd 🚿 :shower: \\ud83d\\udebf 🛁 :bathtub: \\ud83d\\udec1 🪒 :razor: \\ud83e\\ude92 🧴 :lotion_bottle: \\ud83e\\uddf4 🧷 :safety_pin: \\ud83e\\uddf7 🧹 :broom: \\ud83e\\uddf9 🧺 :basket: \\ud83e\\uddfa 🧻 :roll_of_paper: \\ud83e\\uddfb 🧼 :soap: \\ud83e\\uddfc 🧽 :sponge: \\ud83e\\uddfd 🧯 :fire_extinguisher: \\ud83e\\uddef 🛒 :shopping_cart: \\ud83d\\uded2 🚬 :smoking: \\ud83d\\udeac ⚰ :coffin: \\u26b0 ⚱ :funeral_urn: \\u26b1 🚰 :potable_water: \\ud83d\\udeb0 💘 :cupid: \\ud83d\\udc98 💝 :gift_heart: \\ud83d\\udc9d 💖 :sparkling_heart: \\ud83d\\udc96 💗 :heartpulse: \\ud83d\\udc97 💓 :heartbeat: \\ud83d\\udc93 💞 :revolving_hearts: \\ud83d\\udc9e 💕 :two_hearts: \\ud83d\\udc95 💟 :heart_decoration: \\ud83d\\udc9f ❣ :heart_exclamation: \\u2763 💔 :broken_heart: \\ud83d\\udc94 ❤ :heart: \\u2764 🧡 :orange_heart: \\ud83e\\udde1 💛 :yellow_heart: \\ud83d\\udc9b 💚 :green_heart: \\ud83d\\udc9a 💙 :blue_heart: \\ud83d\\udc99 💜 :purple_heart: \\ud83d\\udc9c 🤎 :brown_heart: \\ud83e\\udd0e 🖤 :black_heart: \\ud83d\\udda4 🤍 :white_heart: \\ud83e\\udd0d 💯 :100: \\ud83d\\udcaf 💢 :anger: \\ud83d\\udca2 💬 :speech_balloon: \\ud83d\\udcac 👁️‍🗨️ :eye_speech_bubble: \\ud83d\\udc41\\ufe0f\\u200d\\ud83d\\udde8\\ufe0f 🗨 :left_speech_bubble: \\ud83d\\udde8 🗯 :right_anger_bubble: \\ud83d\\uddef 💭 :thought_balloon: \\ud83d\\udcad 💤 :zzz: \\ud83d\\udca4 ♨ :hotsprings: \\u2668 🛑 :stop_sign: \\ud83d\\uded1 🕛 :clock12: \\ud83d\\udd5b 🕧 :clock1230: \\ud83d\\udd67 🕐 :clock1: \\ud83d\\udd50 🕜 :clock130: \\ud83d\\udd5c 🕑 :clock2: \\ud83d\\udd51 🕝 :clock230: \\ud83d\\udd5d 🕒 :clock3: \\ud83d\\udd52 🕞 :clock330: \\ud83d\\udd5e 🕓 :clock4: \\ud83d\\udd53 🕟 :clock430: \\ud83d\\udd5f 🕔 :clock5: \\ud83d\\udd54 🕠 :clock530: \\ud83d\\udd60 🕕 :clock6: \\ud83d\\udd55 🕡 :clock630: \\ud83d\\udd61 🕖 :clock7: \\ud83d\\udd56 🕢 :clock730: \\ud83d\\udd62 🕗 :clock8: \\ud83d\\udd57 🕣 :clock830: \\ud83d\\udd63 🕘 :clock9: \\ud83d\\udd58 🕤 :clock930: \\ud83d\\udd64 🕙 :clock10: \\ud83d\\udd59 🕥 :clock1030: \\ud83d\\udd65 🕚 :clock11: \\ud83d\\udd5a 🕦 :clock1130: \\ud83d\\udd66 🌀 :cyclone: \\ud83c\\udf00 ♠ :spades: \\u2660 ♥ :hearts: \\u2665 ♦ :diamonds: \\u2666 ♣ :clubs: \\u2663 🃏 :black_joker: \\ud83c\\udccf 🀄 :mahjong: \\ud83c\\udc04 🎴 :flower_playing_cards: \\ud83c\\udfb4 🔇 :mute: \\ud83d\\udd07 🔈 :speaker: \\ud83d\\udd08 🔉 :sound: \\ud83d\\udd09 🔊 :loud_sound: \\ud83d\\udd0a 📢 :loudspeaker: \\ud83d\\udce2 📣 :mega: \\ud83d\\udce3 🔔 :bell: \\ud83d\\udd14 🔕 :no_bell: \\ud83d\\udd15 🎵 :musical_note: \\ud83c\\udfb5 🎶 :notes: \\ud83c\\udfb6 💹 :chart: \\ud83d\\udcb9 🏧 :atm: \\ud83c\\udfe7 🚮 :put_litter_in_its_place: \\ud83d\\udeae ♿ :wheelchair: \\u267f 🚹 :mens: \\ud83d\\udeb9 🚺 :womens: \\ud83d\\udeba 🚻 :restroom: \\ud83d\\udebb 🚼 :baby_symbol: \\ud83d\\udebc 🚾 :wc: \\ud83d\\udebe ⚠ :warning: \\u26a0 🚸 :children_crossing: \\ud83d\\udeb8 ⛔ :no_entry: \\u26d4 🚫 :no_entry_sign: \\ud83d\\udeab 🚳 :no_bicycles: \\ud83d\\udeb3 🚭 :no_smoking: \\ud83d\\udead 🚯 :do_not_litter: \\ud83d\\udeaf 🚱 :non-potable_water: \\ud83d\\udeb1 🚷 :no_pedestrians: \\ud83d\\udeb7 📵 :no_mobile_phones: \\ud83d\\udcf5 🔞 :underage: \\ud83d\\udd1e ☢ :radioactive: \\u2622 ☣ :biohazard: \\u2623 ⬆ :arrow_up: \\u2b06 ↗ :arrow_upper_right: \\u2197 ➡ :arrow_right: \\u27a1 ↘ :arrow_lower_right: \\u2198 ⬇ :arrow_down: \\u2b07 ↙ :arrow_lower_left: \\u2199 ⬅ :arrow_left: \\u2b05 ↖ :arrow_upper_left: \\u2196 ↕ :arrow_up_down: \\u2195 ↔ :left_right_arrow: \\u2194 ↩ :leftwards_arrow_with_hook: \\u21a9 ↪ :arrow_right_hook: \\u21aa ⤴ :arrow_heading_up: \\u2934 ⤵ :arrow_heading_down: \\u2935 🔃 :arrows_clockwise: \\ud83d\\udd03 🔄 :arrows_counterclockwise: \\ud83d\\udd04 🔙 :back: \\ud83d\\udd19 🔚 :end: \\ud83d\\udd1a 🔛 :on: \\ud83d\\udd1b 🔜 :soon: \\ud83d\\udd1c 🔝 :top: \\ud83d\\udd1d 🛐 :place_of_worship: \\ud83d\\uded0 ⚛ :atom_symbol: \\u269b 🕉 :om: \\ud83d\\udd49 ✡ :star_of_david: \\u2721 ☸ :wheel_of_dharma: \\u2638 ☯ :yin_yang: \\u262f ✝ :latin_cross: \\u271d ☦ :orthodox_cross: \\u2626 ☪ :star_and_crescent: \\u262a ☮ :peace_symbol: \\u262e 🕎 :menorah: \\ud83d\\udd4e 🔯 :six_pointed_star: \\ud83d\\udd2f ♈ :aries: \\u2648 ♉ :taurus: \\u2649 ♊ :gemini: \\u264a ♋ :cancer: \\u264b ♌ :leo: \\u264c ♍ :virgo: \\u264d ♎ :libra: \\u264e ♏ :scorpius: \\u264f ♐ :sagittarius: \\u2650 ♑ :capricorn: \\u2651 ♒ :aquarius: \\u2652 ♓ :pisces: \\u2653 ⛎ :ophiuchus: \\u26ce 🔀 :twisted_rightwards_arrows: \\ud83d\\udd00 🔁 :repeat: \\ud83d\\udd01 🔂 :repeat_one: \\ud83d\\udd02 ▶ :arrow_forward: \\u25b6 ⏩ :fast_forward: \\u23e9 ◀ :arrow_backward: \\u25c0 ⏪ :rewind: \\u23ea 🔼 :arrow_up_small: \\ud83d\\udd3c ⏫ :arrow_double_up: \\u23eb 🔽 :arrow_down_small: \\ud83d\\udd3d ⏬ :arrow_double_down: \\u23ec ⏹ :stop_button: \\u23f9 ⏏ :eject_button: \\u23cf 🎦 :cinema: \\ud83c\\udfa6 🔅 :low_brightness: \\ud83d\\udd05 🔆 :high_brightness: \\ud83d\\udd06 📶 :signal_strength: \\ud83d\\udcf6 📳 :vibration_mode: \\ud83d\\udcf3 📴 :mobile_phone_off: \\ud83d\\udcf4 ✖ :multiply: \\u2716 ➕ :plus: \\u2795 ➖ :minus: \\u2796 ➗ :divide: \\u2797 ♾ :infinity: \\u267e ‼ :bangbang: \\u203c ⁉ :interrobang: \\u2049 ❓ :question: \\u2753 ❔ :grey_question: \\u2754 ❕ :grey_exclamation: \\u2755 ❗ :exclamation: \\u2757 〰 :wavy_dash: \\u3030 💱 :currency_exchange: \\ud83d\\udcb1 💲 :heavy_dollar_sign: \\ud83d\\udcb2 ⚕ :medical_symbol: \\u2695 ♻ :recycle: \\u267b ⚜ :fleur_de_lis: \\u269c 🔱 :trident: \\ud83d\\udd31 📛 :name_badge: \\ud83d\\udcdb 🔰 :beginner: \\ud83d\\udd30 ⭕ :o: \\u2b55 ✅ :white_check_mark: \\u2705 ☑ :ballot_box_with_check: \\u2611 ✔ :heavy_check_mark: \\u2714 ❌ :x: \\u274c ❎ :cross_mark_button: \\u274e ➰ :curly_loop: \\u27b0 ➿ :loop: \\u27bf 〽 :part_alternation_mark: \\u303d ✳ :eight_spoked_asterisk: \\u2733 ✴ :eight_pointed_black_star: \\u2734 ❇ :sparkle: \\u2747 © :copyright: \\u00a9 ® :registered: \\u00ae ™ :tm: \\u2122 #️⃣ :hash: \\u0023\\ufe0f\\u20e3 0️⃣ :zero: \\u0030\\ufe0f\\u20e3 1️⃣ :one: \\u0031\\ufe0f\\u20e3 2️⃣ :two: \\u0032\\ufe0f\\u20e3 3️⃣ :three: \\u0033\\ufe0f\\u20e3 4️⃣ :four: \\u0034\\ufe0f\\u20e3 5️⃣ :five: \\u0035\\ufe0f\\u20e3 6️⃣ :six: \\u0036\\ufe0f\\u20e3 7️⃣ :seven: \\u0037\\ufe0f\\u20e3 8️⃣ :eight: \\u0038\\ufe0f\\u20e3 9️⃣ :nine: \\u0039\\ufe0f\\u20e3 🔟 :keycap_ten: \\ud83d\\udd1f 🔠 :capital_abcd: \\ud83d\\udd20 🔡 :abcd: \\ud83d\\udd21 🔢 :1234: \\ud83d\\udd22 🔣 :symbols: \\ud83d\\udd23 🔤 :abc: \\ud83d\\udd24 🅰 :a: \\ud83c\\udd70 🆎 :ab: \\ud83c\\udd8e 🅱 :b: \\ud83c\\udd71 🆑 :cl: \\ud83c\\udd91 🆒 :cool: \\ud83c\\udd92 🆓 :free: \\ud83c\\udd93 ℹ :information_source: \\u2139 🆔 :id: \\ud83c\\udd94 Ⓜ :m: \\u24c2 🆕 :new: \\ud83c\\udd95 🆖 :ng: \\ud83c\\udd96 🅾 :o2: \\ud83c\\udd7e 🆗 :ok: \\ud83c\\udd97 🅿 :parking: \\ud83c\\udd7f 🆘 :sos: \\ud83c\\udd98 🆙 :up: \\ud83c\\udd99 🆚 :vs: \\ud83c\\udd9a 🈁 :koko: \\ud83c\\ude01 🈂 :sa: \\ud83c\\ude02 🈷 :u6708: \\ud83c\\ude37 🈶 :u6709: \\ud83c\\ude36 🈯 :u6307: \\ud83c\\ude2f 🉐 :ideograph_advantage: \\ud83c\\ude50 🈹 :u5272: \\ud83c\\ude39 🈚 :u7121: \\ud83c\\ude1a 🈲 :u7981: \\ud83c\\ude32 🉑 :accept: \\ud83c\\ude51 🈸 :u7533: \\ud83c\\ude38 🈴 :u5408: \\ud83c\\ude34 🈳 :u7a7a: \\ud83c\\ude33 ㊗ :congratulations: \\u3297 ㊙ :secret: \\u3299 🈺 :u55b6: \\ud83c\\ude3a 🈵 :u6e80: \\ud83c\\ude35 🔴 :red_circle: \\ud83d\\udd34 🟠 :orange_circle: \\ud83d\\udfe0 🟡 :yellow_circle: \\ud83d\\udfe1 🟢 :green_circle: \\ud83d\\udfe2 🔵 :large_blue_circle: \\ud83d\\udd35 🟣 :purple_circle: \\ud83d\\udfe3 🟤 :brown_circle: \\ud83d\\udfe4 ⚫ :black_circle: \\u26ab ⚪ :white_circle: \\u26aa 🟥 :red_square: \\ud83d\\udfe5 🟧 :orange_square: \\ud83d\\udfe7 🟨 :yellow_square: \\ud83d\\udfe8 🟩 :green_square: \\ud83d\\udfe9 🟦 :blue_square: \\ud83d\\udfe6 🟪 :purple_square: \\ud83d\\udfea 🟫 :brown_square: \\ud83d\\udfeb ⬛ :black_large_square: \\u2b1b ⬜ :white_large_square: \\u2b1c ◼ :black_medium_square: \\u25fc ◻ :white_medium_square: \\u25fb ◾ :black_medium_small_square: \\u25fe ◽ :white_medium_small_square: \\u25fd ▪ :black_small_square: \\u25aa ▫ :white_small_square: \\u25ab 🔶 :large_orange_diamond: \\ud83d\\udd36 🔷 :large_blue_diamond: \\ud83d\\udd37 🔸 :small_orange_diamond: \\ud83d\\udd38 🔹 :small_blue_diamond: \\ud83d\\udd39 🔺 :small_red_triangle: \\ud83d\\udd3a 🔻 :small_red_triangle_down: \\ud83d\\udd3b 💠 :diamond_with_a_dot: \\ud83d\\udca0 🔘 :radio_button: \\ud83d\\udd18 🔳 :white_square_button: \\ud83d\\udd33 🔲 :black_square_button: \\ud83d\\udd32 🏁 :checkered_flag: \\ud83c\\udfc1 🚩 :triangular_flag_on_post: \\ud83d\\udea9 🎌 :crossed_flags: \\ud83c\\udf8c 🏴 :black_flag: \\ud83c\\udff4 🏳 :white_flag: \\ud83c\\udff3 🏳️‍🌈 :rainbow_flag: \\ud83c\\udff3\\ufe0f\\u200d\\ud83c\\udf08 🏳️‍⚧️ :transgender_flag: \\ud83c\\udff3\\ufe0f\\u200d\\u26a7\\ufe0f 🏴‍☠️ :pirate_flag: \\ud83c\\udff4\\u200d\\u2620\\ufe0f 🇦🇩 :andorra: \\ud83c\\udde6\\ud83c\\udde9 🇦🇪 :flag-ae: \\ud83c\\udde6\\ud83c\\uddea 🇦🇫 :flag-af: \\ud83c\\udde6\\ud83c\\uddeb 🇦🇬 :flag-ag: \\ud83c\\udde6\\ud83c\\uddec 🇦🇮 :flag-ai: \\ud83c\\udde6\\ud83c\\uddee 🇦🇱 :albania: \\ud83c\\udde6\\ud83c\\uddf1 🇦🇲 :armenia: \\ud83c\\udde6\\ud83c\\uddf2 🇦🇴 :angola: \\ud83c\\udde6\\ud83c\\uddf4 🇦🇶 :flag-aq: \\ud83c\\udde6\\ud83c\\uddf6 🇦🇷 :flag-ar: \\ud83c\\udde6\\ud83c\\uddf7 🇦🇸 :flag-as: \\ud83c\\udde6\\ud83c\\uddf8 🇦🇹 :austria: \\ud83c\\udde6\\ud83c\\uddf9 🇦🇺 :flag-au: \\ud83c\\udde6\\ud83c\\uddfa 🇦🇼 :aruba: \\ud83c\\udde6\\ud83c\\uddfc 🇦🇽 :flag-ax: \\ud83c\\udde6\\ud83c\\uddfd 🇦🇿 :flag-az: \\ud83c\\udde6\\ud83c\\uddff 🇧🇦 :flag-ba: \\ud83c\\udde7\\ud83c\\udde6 🇧🇧 :flag-bb: \\ud83c\\udde7\\ud83c\\udde7 🇧🇩 :flag-bd: \\ud83c\\udde7\\ud83c\\udde9 🇧🇪 :belgium: \\ud83c\\udde7\\ud83c\\uddea 🇧🇫 :flag-bf: \\ud83c\\udde7\\ud83c\\uddeb 🇧🇬 :flag-bg: \\ud83c\\udde7\\ud83c\\uddec 🇧🇭 :bahrain: \\ud83c\\udde7\\ud83c\\udded 🇧🇮 :burundi: \\ud83c\\udde7\\ud83c\\uddee 🇧🇯 :benin: \\ud83c\\udde7\\ud83c\\uddef 🇧🇱 :flag-bl: \\ud83c\\udde7\\ud83c\\uddf1 🇧🇲 :bermuda: \\ud83c\\udde7\\ud83c\\uddf2 🇧🇳 :brunei: \\ud83c\\udde7\\ud83c\\uddf3 🇧🇴 :bolivia: \\ud83c\\udde7\\ud83c\\uddf4 🇧🇶 :flag-bq: \\ud83c\\udde7\\ud83c\\uddf6 🇧🇷 :brazil: \\ud83c\\udde7\\ud83c\\uddf7 🇧🇸 :bahamas: \\ud83c\\udde7\\ud83c\\uddf8 🇧🇹 :bhutan: \\ud83c\\udde7\\ud83c\\uddf9 🇧🇼 :flag-bw: \\ud83c\\udde7\\ud83c\\uddfc 🇧🇾 :belarus: \\ud83c\\udde7\\ud83c\\uddfe 🇧🇿 :belize: \\ud83c\\udde7\\ud83c\\uddff 🇨🇦 :canada: \\ud83c\\udde8\\ud83c\\udde6 🇨🇨 :flag-cc: \\ud83c\\udde8\\ud83c\\udde8 🇨🇩 :flag-cd: \\ud83c\\udde8\\ud83c\\udde9 🇨🇫 :flag-cf: \\ud83c\\udde8\\ud83c\\uddeb 🇨🇬 :flag-cg: \\ud83c\\udde8\\ud83c\\uddec 🇨🇭 :flag-ch: \\ud83c\\udde8\\ud83c\\udded 🇨🇮 :flag-ci: \\ud83c\\udde8\\ud83c\\uddee 🇨🇰 :flag-ck: \\ud83c\\udde8\\ud83c\\uddf0 🇨🇱 :chile: \\ud83c\\udde8\\ud83c\\uddf1 🇨🇲 :flag-cm: \\ud83c\\udde8\\ud83c\\uddf2 🇨🇳 :cn: \\ud83c\\udde8\\ud83c\\uddf3 🇨🇴 :flag-co: \\ud83c\\udde8\\ud83c\\uddf4 🇨🇷 :flag-cr: \\ud83c\\udde8\\ud83c\\uddf7 🇨🇺 :cuba: \\ud83c\\udde8\\ud83c\\uddfa 🇨🇻 :flag-cv: \\ud83c\\udde8\\ud83c\\uddfb 🇨🇼 :curacao: \\ud83c\\udde8\\ud83c\\uddfc 🇨🇽 :flag-cx: \\ud83c\\udde8\\ud83c\\uddfd 🇨🇾 :cyprus: \\ud83c\\udde8\\ud83c\\uddfe 🇨🇿 :flag-cz: \\ud83c\\udde8\\ud83c\\uddff 🇩🇪 :de: \\ud83c\\udde9\\ud83c\\uddea 🇩🇯 :flag-dj: \\ud83c\\udde9\\ud83c\\uddef 🇩🇰 :denmark: \\ud83c\\udde9\\ud83c\\uddf0 🇩🇲 :flag-dm: \\ud83c\\udde9\\ud83c\\uddf2 🇩🇴 :flag-do: \\ud83c\\udde9\\ud83c\\uddf4 🇩🇿 :algeria: \\ud83c\\udde9\\ud83c\\uddff 🇪🇨 :ecuador: \\ud83c\\uddea\\ud83c\\udde8 🇪🇪 :estonia: \\ud83c\\uddea\\ud83c\\uddea 🇪🇬 :egypt: \\ud83c\\uddea\\ud83c\\uddec 🇪🇭 :flag-eh: \\ud83c\\uddea\\ud83c\\udded 🇪🇷 :eritrea: \\ud83c\\uddea\\ud83c\\uddf7 🇪🇸 :es: \\ud83c\\uddea\\ud83c\\uddf8 🇪🇹 :flag-et: \\ud83c\\uddea\\ud83c\\uddf9 🇪🇺 :eu: \\ud83c\\uddea\\ud83c\\uddfa 🇫🇮 :finland: \\ud83c\\uddeb\\ud83c\\uddee 🇫🇯 :fiji: \\ud83c\\uddeb\\ud83c\\uddef 🇫🇰 :flag-fk: \\ud83c\\uddeb\\ud83c\\uddf0 🇫🇲 :flag-fm: \\ud83c\\uddeb\\ud83c\\uddf2 🇫🇴 :flag-fo: \\ud83c\\uddeb\\ud83c\\uddf4 🇫🇷 :fr: \\ud83c\\uddeb\\ud83c\\uddf7 🇬🇦 :gabon: \\ud83c\\uddec\\ud83c\\udde6 🇬🇧 :gb: \\ud83c\\uddec\\ud83c\\udde7 🇬🇩 :flag-gd: \\ud83c\\uddec\\ud83c\\udde9 🇬🇪 :flag-ge: \\ud83c\\uddec\\ud83c\\uddea 🇬🇫 :flag-gf: \\ud83c\\uddec\\ud83c\\uddeb 🇬🇬 :flag-gg: \\ud83c\\uddec\\ud83c\\uddec 🇬🇭 :ghana: \\ud83c\\uddec\\ud83c\\udded 🇬🇮 :flag-gi: \\ud83c\\uddec\\ud83c\\uddee 🇬🇱 :flag-gl: \\ud83c\\uddec\\ud83c\\uddf1 🇬🇲 :gambia: \\ud83c\\uddec\\ud83c\\uddf2 🇬🇳 :guinea: \\ud83c\\uddec\\ud83c\\uddf3 🇬🇵 :flag-gp: \\ud83c\\uddec\\ud83c\\uddf5 🇬🇶 :flag-gq: \\ud83c\\uddec\\ud83c\\uddf6 🇬🇷 :greece: \\ud83c\\uddec\\ud83c\\uddf7 🇬🇸 :flag-gs: \\ud83c\\uddec\\ud83c\\uddf8 🇬🇹 :flag-gt: \\ud83c\\uddec\\ud83c\\uddf9 🇬🇺 :guam: \\ud83c\\uddec\\ud83c\\uddfa 🇬🇼 :flag-gw: \\ud83c\\uddec\\ud83c\\uddfc 🇬🇾 :guyana: \\ud83c\\uddec\\ud83c\\uddfe 🇭🇰 :flag-hk: \\ud83c\\udded\\ud83c\\uddf0 🇭🇳 :flag-hn: \\ud83c\\udded\\ud83c\\uddf3 🇭🇷 :croatia: \\ud83c\\udded\\ud83c\\uddf7 🇭🇹 :haiti: \\ud83c\\udded\\ud83c\\uddf9 🇭🇺 :flag-hu: \\ud83c\\udded\\ud83c\\uddfa 🇮🇨 :flag-ic: \\ud83c\\uddee\\ud83c\\udde8 🇮🇩 :flag-id: \\ud83c\\uddee\\ud83c\\udde9 🇮🇪 :flag-ie: \\ud83c\\uddee\\ud83c\\uddea 🇮🇱 :israel: \\ud83c\\uddee\\ud83c\\uddf1 🇮🇲 :flag-im: \\ud83c\\uddee\\ud83c\\uddf2 🇮🇳 :india: \\ud83c\\uddee\\ud83c\\uddf3 🇮🇴 :flag-io: \\ud83c\\uddee\\ud83c\\uddf4 🇮🇶 :iraq: \\ud83c\\uddee\\ud83c\\uddf6 🇮🇷 :iran: \\ud83c\\uddee\\ud83c\\uddf7 🇮🇸 :flag-is: \\ud83c\\uddee\\ud83c\\uddf8 🇮🇹 :it: \\ud83c\\uddee\\ud83c\\uddf9 🇯🇪 :jersey: \\ud83c\\uddef\\ud83c\\uddea 🇯🇲 :flag-jm: \\ud83c\\uddef\\ud83c\\uddf2 🇯🇴 :jordan: \\ud83c\\uddef\\ud83c\\uddf4 🇯🇵 :jp: \\ud83c\\uddef\\ud83c\\uddf5 🇰🇪 :kenya: \\ud83c\\uddf0\\ud83c\\uddea 🇰🇬 :flag-kg: \\ud83c\\uddf0\\ud83c\\uddec 🇰🇭 :flag-kh: \\ud83c\\uddf0\\ud83c\\udded 🇰🇮 :flag-ki: \\ud83c\\uddf0\\ud83c\\uddee 🇰🇲 :comoros: \\ud83c\\uddf0\\ud83c\\uddf2 🇰🇳 :flag-kn: \\ud83c\\uddf0\\ud83c\\uddf3 🇰🇵 :flag-kp: \\ud83c\\uddf0\\ud83c\\uddf5 🇰🇷 :kr: \\ud83c\\uddf0\\ud83c\\uddf7 🇰🇼 :kuwait: \\ud83c\\uddf0\\ud83c\\uddfc 🇰🇾 :flag-ky: \\ud83c\\uddf0\\ud83c\\uddfe 🇰🇿 :flag-kz: \\ud83c\\uddf0\\ud83c\\uddff 🇱🇦 :laos: \\ud83c\\uddf1\\ud83c\\udde6 🇱🇧 :flag-lb: \\ud83c\\uddf1\\ud83c\\udde7 🇱🇨 :flag-lc: \\ud83c\\uddf1\\ud83c\\udde8 🇱🇮 :flag-li: \\ud83c\\uddf1\\ud83c\\uddee 🇱🇰 :flag-lk: \\ud83c\\uddf1\\ud83c\\uddf0 🇱🇷 :flag-lr: \\ud83c\\uddf1\\ud83c\\uddf7 🇱🇸 :flag-ls: \\ud83c\\uddf1\\ud83c\\uddf8 🇱🇹 :flag-lt: \\ud83c\\uddf1\\ud83c\\uddf9 🇱🇺 :flag-lu: \\ud83c\\uddf1\\ud83c\\uddfa 🇱🇻 :latvia: \\ud83c\\uddf1\\ud83c\\uddfb 🇱🇾 :libya: \\ud83c\\uddf1\\ud83c\\uddfe 🇲🇦 :flag-ma: \\ud83c\\uddf2\\ud83c\\udde6 🇲🇨 :monaco: \\ud83c\\uddf2\\ud83c\\udde8 🇲🇩 :flag-md: \\ud83c\\uddf2\\ud83c\\udde9 🇲🇪 :flag-me: \\ud83c\\uddf2\\ud83c\\uddea 🇲🇬 :flag-mg: \\ud83c\\uddf2\\ud83c\\uddec 🇲🇭 :flag-mh: \\ud83c\\uddf2\\ud83c\\udded 🇲🇰 :flag-mk: \\ud83c\\uddf2\\ud83c\\uddf0 🇲🇱 :mali: \\ud83c\\uddf2\\ud83c\\uddf1 🇲🇳 :flag-mn: \\ud83c\\uddf2\\ud83c\\uddf3 🇲🇴 :macau: \\ud83c\\uddf2\\ud83c\\uddf4 🇲🇵 :flag-mp: \\ud83c\\uddf2\\ud83c\\uddf5 🇲🇶 :flag-mq: \\ud83c\\uddf2\\ud83c\\uddf6 🇲🇷 :flag-mr: \\ud83c\\uddf2\\ud83c\\uddf7 🇲🇸 :flag-ms: \\ud83c\\uddf2\\ud83c\\uddf8 🇲🇹 :malta: \\ud83c\\uddf2\\ud83c\\uddf9 🇲🇺 :flag-mu: \\ud83c\\uddf2\\ud83c\\uddfa 🇲🇻 :flag-mv: \\ud83c\\uddf2\\ud83c\\uddfb 🇲🇼 :malawi: \\ud83c\\uddf2\\ud83c\\uddfc 🇲🇽 :mexico: \\ud83c\\uddf2\\ud83c\\uddfd 🇲🇾 :flag-my: \\ud83c\\uddf2\\ud83c\\uddfe 🇲🇿 :flag-mz: \\ud83c\\uddf2\\ud83c\\uddff 🇳🇦 :flag-na: \\ud83c\\uddf3\\ud83c\\udde6 🇳🇨 :flag-nc: \\ud83c\\uddf3\\ud83c\\udde8 🇳🇪 :niger: \\ud83c\\uddf3\\ud83c\\uddea 🇳🇫 :flag-nf: \\ud83c\\uddf3\\ud83c\\uddeb 🇳🇬 :flag-ng: \\ud83c\\uddf3\\ud83c\\uddec 🇳🇮 :flag-ni: \\ud83c\\uddf3\\ud83c\\uddee 🇳🇱 :flag-nl: \\ud83c\\uddf3\\ud83c\\uddf1 🇳🇴 :norway: \\ud83c\\uddf3\\ud83c\\uddf4 🇳🇵 :nepal: \\ud83c\\uddf3\\ud83c\\uddf5 🇳🇷 :nauru: \\ud83c\\uddf3\\ud83c\\uddf7 🇳🇺 :niue: \\ud83c\\uddf3\\ud83c\\uddfa 🇳🇿 :flag-nz: \\ud83c\\uddf3\\ud83c\\uddff 🇴🇲 :oman: \\ud83c\\uddf4\\ud83c\\uddf2 🇵🇦 :panama: \\ud83c\\uddf5\\ud83c\\udde6 🇵🇪 :peru: \\ud83c\\uddf5\\ud83c\\uddea 🇵🇫 :flag-pf: \\ud83c\\uddf5\\ud83c\\uddeb 🇵🇬 :flag-pg: \\ud83c\\uddf5\\ud83c\\uddec 🇵🇭 :flag-ph: \\ud83c\\uddf5\\ud83c\\udded 🇵🇰 :flag-pk: \\ud83c\\uddf5\\ud83c\\uddf0 🇵🇱 :poland: \\ud83c\\uddf5\\ud83c\\uddf1 🇵🇲 :flag-pm: \\ud83c\\uddf5\\ud83c\\uddf2 🇵🇳 :flag-pn: \\ud83c\\uddf5\\ud83c\\uddf3 🇵🇷 :flag-pr: \\ud83c\\uddf5\\ud83c\\uddf7 🇵🇸 :flag-ps: \\ud83c\\uddf5\\ud83c\\uddf8 🇵🇹 :flag-pt: \\ud83c\\uddf5\\ud83c\\uddf9 🇵🇼 :palau: \\ud83c\\uddf5\\ud83c\\uddfc 🇵🇾 :flag-py: \\ud83c\\uddf5\\ud83c\\uddfe 🇶🇦 :qatar: \\ud83c\\uddf6\\ud83c\\udde6 🇷🇪 :flag-re: \\ud83c\\uddf7\\ud83c\\uddea 🇷🇴 :flag-ro: \\ud83c\\uddf7\\ud83c\\uddf4 🇷🇸 :serbia: \\ud83c\\uddf7\\ud83c\\uddf8 🇷🇺 :ru: \\ud83c\\uddf7\\ud83c\\uddfa 🇷🇼 :rwanda: \\ud83c\\uddf7\\ud83c\\uddfc 🇸🇦 :flag-sa: \\ud83c\\uddf8\\ud83c\\udde6 🇸🇧 :flag-sb: \\ud83c\\uddf8\\ud83c\\udde7 🇸🇨 :flag-sc: \\ud83c\\uddf8\\ud83c\\udde8 🇸🇩 :sudan: \\ud83c\\uddf8\\ud83c\\udde9 🇸🇪 :sweden: \\ud83c\\uddf8\\ud83c\\uddea 🇸🇬 :flag-sg: \\ud83c\\uddf8\\ud83c\\uddec 🇸🇭 :flag-sh: \\ud83c\\uddf8\\ud83c\\udded 🇸🇮 :flag-si: \\ud83c\\uddf8\\ud83c\\uddee 🇸🇰 :flag-sk: \\ud83c\\uddf8\\ud83c\\uddf0 🇸🇱 :flag-sl: \\ud83c\\uddf8\\ud83c\\uddf1 🇸🇲 :flag-sm: \\ud83c\\uddf8\\ud83c\\uddf2 🇸🇳 :flag-sn: \\ud83c\\uddf8\\ud83c\\uddf3 🇸🇴 :flag-so: \\ud83c\\uddf8\\ud83c\\uddf4 🇸🇷 :flag-sr: \\ud83c\\uddf8\\ud83c\\uddf7 🇸🇸 :flag-ss: \\ud83c\\uddf8\\ud83c\\uddf8 🇸🇹 :flag-st: \\ud83c\\uddf8\\ud83c\\uddf9 🇸🇻 :flag-sv: \\ud83c\\uddf8\\ud83c\\uddfb 🇸🇽 :flag-sx: \\ud83c\\uddf8\\ud83c\\uddfd 🇸🇾 :syria: \\ud83c\\uddf8\\ud83c\\uddfe 🇸🇿 :flag-sz: \\ud83c\\uddf8\\ud83c\\uddff 🇹🇨 :flag-tc: \\ud83c\\uddf9\\ud83c\\udde8 🇹🇩 :chad: \\ud83c\\uddf9\\ud83c\\udde9 🇹🇫 :flag-tf: \\ud83c\\uddf9\\ud83c\\uddeb 🇹🇬 :togo: \\ud83c\\uddf9\\ud83c\\uddec 🇹🇭 :flag-th: \\ud83c\\uddf9\\ud83c\\udded 🇹🇯 :flag-tj: \\ud83c\\uddf9\\ud83c\\uddef 🇹🇰 :flag-tk: \\ud83c\\uddf9\\ud83c\\uddf0 🇹🇱 :flag-tl: \\ud83c\\uddf9\\ud83c\\uddf1 🇹🇲 :flag-tm: \\ud83c\\uddf9\\ud83c\\uddf2 🇹🇳 :flag-tn: \\ud83c\\uddf9\\ud83c\\uddf3 🇹🇴 :tonga: \\ud83c\\uddf9\\ud83c\\uddf4 🇹🇷 :tr: \\ud83c\\uddf9\\ud83c\\uddf7 🇹🇹 :flag-tt: \\ud83c\\uddf9\\ud83c\\uddf9 🇹🇻 :tuvalu: \\ud83c\\uddf9\\ud83c\\uddfb 🇹🇿 :flag-tz: \\ud83c\\uddf9\\ud83c\\uddff 🇺🇦 :flag-ua: \\ud83c\\uddfa\\ud83c\\udde6 🇺🇬 :uganda: \\ud83c\\uddfa\\ud83c\\uddec 🇺🇸 :us: \\ud83c\\uddfa\\ud83c\\uddf8 🇺🇾 :flag-uy: \\ud83c\\uddfa\\ud83c\\uddfe 🇺🇿 :flag-uz: \\ud83c\\uddfa\\ud83c\\uddff 🇻🇦 :flag-va: \\ud83c\\uddfb\\ud83c\\udde6 🇻🇨 :flag-vc: \\ud83c\\uddfb\\ud83c\\udde8 🇻🇪 :flag-ve: \\ud83c\\uddfb\\ud83c\\uddea 🇻🇬 :flag-vg: \\ud83c\\uddfb\\ud83c\\uddec 🇻🇮 :flag-vi: \\ud83c\\uddfb\\ud83c\\uddee 🇻🇳 :flag-vn: \\ud83c\\uddfb\\ud83c\\uddf3 🇻🇺 :flag-vu: \\ud83c\\uddfb\\ud83c\\uddfa 🇼🇫 :flag-wf: \\ud83c\\uddfc\\ud83c\\uddeb 🇼🇸 :samoa: \\ud83c\\uddfc\\ud83c\\uddf8 🇽🇰 :kosovo: \\ud83c\\uddfd\\ud83c\\uddf0 🇾🇪 :yemen: \\ud83c\\uddfe\\ud83c\\uddea 🇾🇹 :flag-yt: \\ud83c\\uddfe\\ud83c\\uddf9 🇿🇦 :flag-za: \\ud83c\\uddff\\ud83c\\udde6 🇿🇲 :zambia: \\ud83c\\uddff\\ud83c\\uddf2 🇿🇼 :flag-zw: \\ud83c\\uddff\\ud83c\\uddfc 🏴󠁧󠁢󠁥󠁮󠁧󠁿 :england: \\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc65\\udb40\\udc6e\\udb40\\udc67\\udb40\\udc7f 🏴󠁧󠁢󠁳󠁣󠁴󠁿 :scotland: \\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc73\\udb40\\udc63\\udb40\\udc74\\udb40\\udc7f 🏴󠁧󠁢󠁷󠁬󠁳󠁿 :wales: \\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc77\\udb40\\udc6c\\udb40\\udc73\\udb40\\udc7f"
  },
  "guides/emoji/emoji.html": {
    "href": "guides/emoji/emoji.html",
    "title": "表情符号 | Kook.Net 文档",
    "keywords": "Kook.Net 中的表情符号 KOOK 中的表情符号包含两种形式，即 Emoji 表情与服务器自定义表情，在 Kook.Net 中分别以 Emoji 与 Emote 表示，这两个类都实现了 IEmote 接口。 Emoji Emoji 是一种通用的表情符号，是 Unicode 标准中的一部分，可以在任何支持 Unicode 标准的平台上使用。因此，诸如 👌、♥、👀 等的字符串都会被 KOOK 解析为 Emoji 表情符号。 每个被 KOOK 所支持的 Emoji 表情符号都有其对应的短代码，其为由两个冒号及其所包围的别名组成，例如 👌、♥、👀 可分别被表示为 :ok_hand:、:heart:、:eyes:。KOOK API 处理有关 Emoji 表情符号的消息时会自动将短代码转换为对应的 Emoji 表情符号。 有关 KOOK 所受支持的短代码，可参考此页面。 声明 Emoji 要创建 Emoji 对象，可将 Emoji 表情符号或其 Unicode 传入 Emoji 的构造函数中，例如 new Emoji(\"👌\"); 或 new Emoji(\"\\uD83D\\uDC4C\");，也可以通过使用 Parse 或 TryParse 解析 Emoji 表情符号或其短代码的方式创建 Emoji 对象，例如 Emoji.Parse(\"👌\")、Emoji.Parse(\":ok_hand:\")、Emoji.TryParse(\":ok_hand:\", out var emoji)。 为消息添加 Emoji 表情符号的代码示例： public async Task ReactAsync(SocketUserMessage userMsg) { // 使用表情符号本身 await userMsg.AddReactionAsync(new Emoji(\"👌\")); // 使用 Unicode await userMsg.AddReactionAsync(new Emoji(\"\\uD83D\\uDC4C\")); // 使用短代码 await userMsg.AddReactionAsync(Emoji.Parse(\":ok_hand:\")); } Emote Kook.Net 中的 Emote 指代 KOOK 中添加到服务器内的自定义表情符号，其在 KMarkdown 中的完全限定形式形如： (emj)kook-logo(emj)[1591057729615250/9nG5PxHkZE074074]。 其中，kook-logo 为表情符号的别名，1591057729615250/9nG5PxHkZE074074 为表情符号的 ID。 目前 KOOK 中尚未提供便捷获取自定义表情符号的完全限定形式的方法，要获取自定义表情符号的完全限定形式，可通过一下几种方式： Kook.Net 对消息体中的表情符号部分进行了解析，可通过 Tags 获取 Type 为 Emoji 的 Emote 对象，通过 ToKMarkdownString 方法获取完全限定形式。 通过 Emotes 属性获取服务器中的全部自定义表情符号，从而获取其完全限定形式。 通过 GetEmotesAsync 方法获取服务器中的全部自定义表情符号，从而获取其完全限定形式。 在 KOOK 网页端或桌面客户端中启用开发者工具 (Ctrl+Alt+Shift+O)，通过跟踪与表情符号相关的网络请求负载或响应， 或选中通过元素查看器选择并检查聊天消息中的表情符号元素的源码 (Ctrl+Shift+C)，获取其完全限定形式。 声明 Emote 要通过服务器自定义表情符号的完全限定形式创建 Emote 对象，请使用 Parse 或 TryParse 方法，例如 Emote.Parse(\"(emj)kook-logo(emj)[1591057729615250/9nG5PxHkZE074074]\")。 public async Task ReactAsync(SocketUserMessage userMsg) { if (Emote.TryParse(emoteString, out var emote)) { await userMsg.AddReactionAsync(emote); } } Tip 要在 Socket 客户端中通过表情符号名称获取指定的表情符号，可以访问 Emotes 属性。 private readonly KookSocketClient _client; public async Task ReactAsync(SocketUserMessage userMsg, string emoteName) { var emote = _client.Guilds .SelectMany(x => x.Emotes) .FirstOrDefault(x => x.Name.IndexOf( emoteName, StringComparison.OrdinalIgnoreCase) != -1); if (emote is null) return; await userMsg.AddReactionAsync(emote); } Tip KOOK 中，激活 BUFF 的用户可以跨服务器使用表情符号，因此，Bot 可能会收到来自 Bot 自身并未加入的服务器的表情符号。 虽然 KOOK Bot API 允许 Bot 跨服务器使用表情符号，但不能使用未加入的服务器的表情符号。 为了安全起见，若在 Socket 客户端中要在消息中引用、或添加新回应时采用未知来源的表情符号，应当访问所有服务器的 Emotes 属性来确定表情符号是否存在于 Bot 所加入的服务器中，或捕获可能的异常。 更多信息 要进一步了解如何使用 Emoji 和 Emote，请参阅 IEmote 文档。"
  },
  "guides/entities/casting.html": {
    "href": "guides/entities/casting.html",
    "title": "类型转换 | Kook.Net 文档",
    "keywords": "类型转换 通过类型转换，实体可以转换为其它定义下的实体，但这种转换仅能在有继承关系的变体间进行。 例如：IUser 可以转换为 IGuildUser，但不能转换为 IMessage。 Note 如果两个接口之间存在继承关系，它们便可以进行互相的转换。 将实体类转换为其所实现的接口也可以合法的。 向上类型转换 通过向上类型转换，实体可以被转换为更通用的变体，例如：将 IGuildUser 转换为 IUser。 尽管向上类型转换的结果往往具有更简化的信息，但由于多态性，基类类型的变量可以保存派生类型。 向上类型转换一般是隐式进行的。 通过向下类型转换，实体可以转换为包含更详细信息的变体，例如：将 IUser 转换为 IGuildUser， 这样便可以访问原始无法直接访问的信息。 向下类型转换 向下类型转换是访问实体的实际定义最直接的方式，如果要访问派生类型的实例成员， 可以直接进行向下类型转换。向下类型转换一般是显式进行的。 IUser user; // 这里使用了内联的向下类型转换来一次性获取字段数据 // 需要注意的是，如果类型转换的结果实体为 null，则会抛出 NullReferenceException 异常 Console.WriteLine(((IGuildUser)user).Nickname); // 如果可以保证转换是合法且结果非空的，则可以为类型转换结果赋值到另一个变量中 IGuildUser guildUser = (IGuildUser)user; Warning 作为一种强制类型转换操作，如果两种类型之间不兼容，向下类型转换可能会在执行时抛出 InvalidCastException 异常，在这种情况下，通过模式匹配来进行类型转换可以有效地避免这种异常。 更一般的类型转换 更一般情况下的类型转换往往使用 as 运算符来向将对象转换为给定的类型。 如果实体确实能被转换为给定的类型，运算结果会返回转换后的类型，来让属性可以为访问。 IChannel channel; // 如果要将通用频道接口 IChannel 转换为服务器文字频道接口 ITextChannel // 来访问 ITextChannel 中存在而 IChannel 中不存在的属性和方法 // 则可进行如下的转换 ITextChannel textChannel = channel as ITextChannel; await textChannel.DoSomethingICantWithIChannelAsync(); Warning 如果类型转换的结果可能为 null，在访问其属性或方法时则会抛出 NullReferenceException 异常， 在这种情况下，通过模式匹配进行安全类型转换则更为实用，这可以阻止此异常的抛出。 安全类型转换 安全类型转换在转换前会进行模式匹配检查，因此可以保证转换结果类型永不为 null。 C# 提供了三种语法来进行安全类型转换： 类型检查 要进行安全类型转换，需要使用 is 运算符来检查值是否属于给定地类型。 如果检查不通过，条件判断语句可以绕过代码，来保证程序不会访问 null 对象的属性。 IUser user; // 这里检查了该用户实体是否为一个 IGuildUser 实体 // 如果检查不通过，条件判断语句可以绕过可能会导致 null 对象访问的代码 if (user is IGuildUser) { Console.WriteLine(\"This user is in a guild!\"); } else { // 检查不通过 } 结合声明的初始化赋值 这里，类型检查、类型声明、初始化赋值组合在一起，可以简化代码， 这样，在类型检查通过后，对象将会被立即转换并赋值到一个新的变量中。 IUser user; // 假设这里的 user 变量内事实上存储的是一个 IGuildUser 对象 // 那么在类型检查通过后，此处的代码可以直接将 user 转换为 IGuildUser // 并赋值到 guildUser 变量中 // 这样就不用再在后面的代码中再次进行类型转换了 if (user is IGuildUser guildUser) { Console.WriteLine(guildUser.JoinedAt); } else { // 检查不通过 } 结合逻辑模式 在之前的示例中，我们通过类型检查来避免程序在进行不正确的类型转换后抛出异常， 在此实例中，代码会在类型转换检查不通过时忽略后续代码来结束整个方法返回结果， 如类型转换成功，其所一并声明的变量也可以在后续的代码中被使用。 private void MyFunction(IMessage message) { // 这里的类型检查与逻辑模式中的 not 相结合 // 当 message 不为 IUserMessage 时，方法会直接返回 if (message is not IUserMessage userMessage) return; // 由于以上代码进行的类型检查是内联的 // 类型转换结果 userMessage 变量在判断语句外也可以访问 Console.WriteLine(userMessage.Author); } Note 在类型转换或类型检查时需使用 is、as 和 not 关键字。 ==、!= 和 = 适用于变量或实例化对象之间，而非它们与类型之间， 如要获取变量或实例化对象的类型，请使用 Object.GetType 方法或 typeof 运算符。"
  },
  "guides/entities/glossary.html": {
    "href": "guides/entities/glossary.html",
    "title": "实体词汇表与图表 | Kook.Net 文档",
    "keywords": "实体类型 所有 Kook.Net 实体的列表及其之间的继承关系，来表示哪些类型之间可以进行相互转换。 Note Socket 和 Rest 实体的所有接口都具有相同的继承树，其中，图中被标记为红色的实体是其所在工程所独有的。 频道 IChannel 消息频道 服务器文字频道 (ITextChannel)：服务器内的消息频道 私聊频道 (IDMChannel)：私信聊天会话频道 Kook.Net 中的私信聊天会话也被抽象为一个频道 私有频道 (IPrivateChannel)：非服务器内的消息频道 由于 KOOK 暂不支持讨论组，所以目前私有频道也只有私聊频道 消息频道 (IMessageChannel)：可以发送文字消息的频道 其它频道 服务器频道 (IGuildChannel)：服务器内的频道 这可以是能出现在服务器内的任何一种频道类型 音频频道 (IAudioChannel)：音频频道 语音频道 (IVoiceChannel)：服务器内的语音频道 分组频道 (ICategoryChannel)：服务器内的分组频道，可以包含多个子频道 嵌套频道 (INestedChannel)：可以出现在分组频道下的频道 消息 IMessage 用户消息 (IUserMessage)：用户所发送的消息 系统消息 (ISystemMessage)：KOOK 系统用户发送的消息 消息 (IMessage)：所有消息的基本类型接口 用户 IUser 用户状态 (IPresence)：用户的状态信息 服务器用户 (IGuildUser)：服务器内的用户 Bot 登录用户 (ISelfUser)：当前客户端登录到 KOOK 的机器人用户 用户 (IUser)：所有用户的基本类型接口 其它类型 表情符号 IEmote Emote (Emote)：服务器内创建的自定义表情 Example: (emj)kaiheila-logo(emj)[1990044438283387/8BZCdG49cL069069] Emoji (Emoji)：Unicode 表示的 Emoji 表情符号 Example: 👍 用户动态 IActivity 游戏 (IGame)：代表用户的游戏活动"
  },
  "guides/entities/introduction.html": {
    "href": "guides/entities/introduction.html",
    "title": "实体简介 | Kook.Net 文档",
    "keywords": "Kook.Net 中的实体 Kook.Net 提供了一系列多用途的实体类，来表示来自 KOOK API 或网关的数据。 Tip 在使用 Get*** 系列方法来获取包含详细信息的实例实体时，需要为方法指定正确的 ID， 因此，建议您启用 KOOK 的开发者模式，以便于获取实体的 ID，开发者模式可在 “用户设置 - 高级设置 - 开发者模式” 处启用。 实体的变体与继承 由于同一对象可能会在 KOOK API 或网关不同的接口或事件中出现， 在不同的数据上下文中包含不同的字段，因此，Kook.Net 中的部分实体拥有多种变体， 例如：IUser 和 IGuildUser 分别表示通用的用户实体和服务器内的用户实体。 尽管部分实体包含的信息很简略，但所有的实体模型都有一个包含尽可能详细的信息的实体变体与之对应。 Socket 与 REST REST 实体通过 HTTP API 获取，其在被使用后会被销毁释放。每一个 REST 实体的获取都会引起一次 API 请求，短时间内发起大量 API 请求可能会触发速率限制， 因此，请尽可能少地通过 REST 获取实体。 有关 REST 的更多信息 Socket 实体中的大多数都是通过 KookSocketClient 的网关连接中的各种事件创建的， 仅当客户端初始化或事件包含的数据过于简略时，客户端才会进一步通过 API 获取的 REST 实体补全信息。 这些 Socket 实体都会进入到客户端的全局缓存中，以在业务逻辑中使用。 以 MessageReceived 事件为例，事件所传递的数据为 SocketMessage 实体， 实体内指示消息所来源的频道的属性为 SocketMessageChannel 实体。 所有的消息都来源于支持发送消息的频道类型， 因此，频道的这种实体变体可以覆盖全部需要发送消息的频道的情况。 但这并不是说消息不能来源于 SocketTextChannel（SocketTextChannel 表示服务器内的文本频道）， 如果要从一个消息实体获取消息所在服务器的信息，则需要将其频道实体类型转换为 SocketTextChannel。 Note 有关各种实体的继承关系及其定义，请参阅 实体词汇表。 导航属性 多数 Socket 实体都有一个内部的导航属性，以便于实体向其父类或派生类的转换与访问。 访问 Socket 实体 实体最基本的形式形如 SocketGuild、SocketUser、SocketChannel 等， 这些实体可以从 KookSocketClient 的全局缓存中获取， 也可以在 KookSocketClient 上通过相应的 Get*** 方法获取。 在这些实体上进一步调用 Get*** 方法可以获得包含更多信息的实体变体，例如： SocketGuild.GetUser 可以获得 SocketGuildUser 实体， SocketGuild.GetChannel 可以获得 SocketGuildChannel 实体。 按业务逻辑的需要，将这些实体进行进一步的类型转换便可获得实体的其它变体。 示例 public string GetChannelTopic(ulong id) { var channel = _client.GetChannel(8708013346475345) as SocketTextChannel; return channel?.Topic; } public SocketGuildUser GetGuildOwner(SocketChannel channel) { var guild = (channel as SocketGuildChannel)?.Guild; return guild?.Owner; } 访问 REST 实体 REST 实体的工作方式几乎与 Socket 实体相同，只是在每一次获取时都会发起一次 API 请求，因此较少使用。 访问 REST 实体需要通过 KookRestClient 的 Rest 属性进行， 或是创建一个新的 KookRestClient 实例，可以独立于网关线程。 示例 // 在 GetUserAsync 的结果中，RestUser 实体包含了用户登录 KOOK 的连接方式， // 而在 RestGuild 上的 GetUsersAsync 结果中的 RestUser 不包含此信息。 // Socket 建立连接后，如果配置指示客户端始终下载全部用户信息， // 客户端则会通过 RestGuild.GetUsersAsync 所实际调用的 API 获取服务器用户信息， // 尽管如此，全局缓存中也不会包含可靠的用户连接方式的信息。 // 在这种少数情况下，则需要通过访问 GetUserAsync 返回的 RestUser 才能获取所需要的连接方式信息。 public static async Task<ClientType?> GetUserClientType(IUser user, KookRestClient restClient) { var restUser = await restClient.GetUserAsync(user.Id); return restUser.ActiveClient; }"
  },
  "guides/getting_started/first-bot.html": {
    "href": "guides/getting_started/first-bot.html",
    "title": "从零开始 | Kook.Net 文档",
    "keywords": "使用 Kook.Net 构建你的第一个 Bot 本指南将引导您使用 Kook.Net 构建一个简单的 Bot。在此之前，请先确保您已参与 KOOK 开发者，并获得开发权限。 创建一个 KOOK 应用 在开始编写代码前，您需要通过 KOOK 开发者中心创建一个 Bot。 访问并登录到 KOOK 开发者中心； 点击 新建应用； 填写应用名称； 点击刚刚创建好的应用； 点击左侧的 机器人； 确保机器人的连接模式为 WebSocket； (可选) 如果要创建公共 Bot，开启 开启公共机器人 开关。 将 Bot 添加到服务器 Bot 无法通过访问服务器的邀请链接进入频道，因此需要 Bot 的邀请链接将 Bot 添加到服务器。 在 KOOK 开发者中心 中访问要添加到服务器的 Bot 应用； 点击左侧的 邀请链接； 在右侧的 角色权限设置 中勾选要在 Bot 进入服务器后直接拥有的权限； Note 这将会在服务器内创建一个仅可授予给该 Bot 的托管角色，该 Bot 将会在进入服务器后自动获得该角色。 如需在进入服务器后变更权限，可通过 服务器设置 中的 角色权限 进行修改。 打开上方生成的邀请链接； 选择要将 Bot 添加到的服务器； 点击邀请。 Note 列表中仅显示您拥有 管理服务器 权限的服务器。 将 Bot 连接至 KOOK 如果您已创建工程，并安装了 Kook.Net，可参考以下步骤， 否则，请参考 安装 Kook.Net 。 异步启动 Kook.Net 广泛采用 .NET 的 异步编程模型，绝大多数操作都是以异步方式完成， 请尽可能地在异步上下文中等待这些操作。 C# 9.0 引入了顶级语句，可以在不显式创建 Program 类和 Main 方法的情况下编写代码， 顶级语句中使用 await 来调用异步方法，会自动建立一个在异步上下文中启动的程序。 Warning 应用程序中异步上下文抛出的任何异常都会被持续向上层抛出直到首个同步方法， 抛出至顶级语句的所有未经处理的异常将导致程序退出。 Kook.Net 会捕获事件处理函数中发生的异常，以避免该异常导致程序退出， 但需要注意的是，如果异常发生在 async void 所标记的方法中， 尽管异常发生在异步上下文中，但该异常仍会导致程序退出。 因此，请合理使用 async Task 与 await 的组合。 创建日志方法 在创建并配置 KOOK Bot 客户端程序前，我们需要创建一个事件处理程序来订阅 Kook.Net 的日志事件。 为了尽可能地广泛支持各种日志提供程序，Kook.Net 通过 Log 事件来记录日志信息， 其事件参数为 LogMessage。有关该事件地详细信息，可参考 API 文档。 如需要使用自己的日志记录框架，请在此该事件行调用。此处，为了简单起见，我们仅将日志记录到控制台中。 // Log 事件，此处以直接输出到控制台为例 Task LogAsync(LogMessage log) { Console.WriteLine(log.ToString()); return Task.CompletedTask; } 创建 KOOK Bot 客户端程序 为了编写一个能与 KOOK 服务端实时互动的 Bot，请使用 KookSocketClient 作为客户端， 使用 Socket 实体，如您不了解 Kook.Net 的多种实现，请参考 术语 。 在异步入口点中创建一个 KookSocketClient 的实例，用于与 KOOK 服务端建立连接， 如有需要，也可向构造函数中传递一个 KookSocketConfig 的可选参数， 多数情况下，默认值即可。 在连接前，将刚刚创建的日志事件处理程序订阅到客户端的 Log 事件中。 Kook.Net 中的事件与 C# 中的任何其他事件的工作机制类似。 使用 LoginAsync 方法登录到 KOOK 服务端，登录过程采用的身份认证信息为机器人的 Token。 通过调用客户端的 StartAsync 方法，客户端启动与服务端的连接/重连机制， 该方法会在连接/重连机制启动后立刻返回，因此，任何依赖于客户端状态的方法 都应以事件处理程序的形式执行。 为了阻止程序在运行期间的异步入口点返回，请在 MainAsync 方法退出前等待一个无限时长的延迟， 获取其它可以阻止程序继续运行的方法，例如，等待控制台中输入信息。 Important Token 可允许您获得对 Bot 的所有访问权限，因此，不要与任何无关人员共享 Token！ 如您要公开 Bot 的源代码，请将该 Token 存储在外部源中。 在下面的示例中，我们从预定义的变量中获取变量，这是极其不安全的， 尤其是在有计划将应用程序以任何形式发布的情况下。 为了能够安全地处理该机密信息，建议以 环境变量、配置文件、机密管理 等形式存储 Token。 using KookSocketClient client = new(); client.Log += LogAsync; // 将 Token 写入字符串变量，用于 Bot 登录过程的身份认证 // 这很不安全，尤其是在有公开源代码的情况下，不应该这么做 string token = \"token\"; // 一些其它存储 Token 的方案，如环境变量、文件等 // string token = Environment.GetEnvironmentVariable(\"NameOfYourEnvironmentVariable\"); // string token = File.ReadAllText(\"token.txt\"); // string token = JsonConvert.DeserializeObject<AConfigurationClass>(File.ReadAllText(\"config.json\")).Token; await client.LoginAsync(TokenType.Bot, token); await client.StartAsync(); // 阻塞程序直到关闭 await Task.Delay(Timeout.Infinite); 到这里，客户端应该可以连接到 KOOK 服务端，运行程序，等待片刻，应该可以在 KOOK 客户端中看到 Bot 上线。"
  },
  "guides/getting_started/installing.html": {
    "href": "guides/getting_started/installing.html",
    "title": "安装 Kook.Net | Kook.Net 文档",
    "keywords": "安装 Kook.Net Kook.Net 通过 NuGet 分发，推荐通过 NuGet 包管理工具安装， 如有需要，也可从源代码进行编译。 支持的平台 Kook.Net 目前支持的目标框架包括 .NET 8.0 .NET 7.0 .NET 6.0 .NET Standard 2.1 .NET Standard 2.0 .NET Framework 4.6.2 通过 NuGet 包管理器安装 支持的 NuGet 源有： NuGet Gallery GitHub Packages 使用 Visual Studio 找到 解决方案资源管理器 窗口，在 Bot 项目下找到 依赖项 右键点击 依赖项，选择 管理 NuGet 程序包 在 浏览 选项卡中，搜索 Kook.Net Note 如要安装预览版 Kook.Net，请勾选 包括预发行版，否则，预览版搜索结果无法展示在列表中。 选择 Kook.Net，点击 安装 使用 JetBrains Rider 找到 Explorer 窗口，在 Bot 项目下找到 Dependencies 右键点击 Dependencies，选择 Manage NuGet Packages 在 Packages 选项卡中，搜索 Kook.Net Note 如要安装预览版 Kook.Net，请勾选 Prerelease ，否则，预览版搜索结果无法展示在列表中。 右键点击 Kook.Net，点击 Install Kook.Net ... 使用 Visual Studio Code 找到 Bot 项目的 *.csproj 文件 添加 Kook.Net 到 *.csproj 中 <Project Sdk=\"Microsoft.NET.Sdk\"> <!-- The following may differ depending on the latest version of .NET Core or Discord.Net. --> <PropertyGroup> <OutputType>Exe</OutputType> <TargetFramework>net8.0</TargetFramework> </PropertyGroup> <ItemGroup> <PackageReference Include=\"Kook.Net\" Version=\"0.6.0\" /> </ItemGroup> </Project> 使用 dotnet CLI 启动终端 导航至 Bot 项目中 *.csproj 文件的所在目录 执行 dotnet add package Kook.Net Note 如要安装预览版 Kook.Net，使用 dotnet CLI 添加 Kook.Net 时需附加 --prerelease 选项， 否则，dotnet CLI 将只尝试为项目添加稳定版本的 NuGet 包。 从源代码编译 要从源代码编译 Kook.Net，请参考： 使用 Visual Studio Visual Studio 2022 或更新版本。 .NET 8 SDK 安装 Visual Studio 期间需选择 .NET 8 工作负载。 使用 JetBrains Rider JetBrains 2021.3 或更新版本。 .NET 8 SDK 使用 Command Line .NET 8 SDK"
  },
  "guides/getting_started/terminology.html": {
    "href": "guides/getting_started/terminology.html",
    "title": "术语 | Kook.Net 文档",
    "keywords": "术语 实现指定实体类 Kook.Net 分为核心库与两个不同的实现：Kook.Net.Core、 Kook.Net.Rest 和 Kook.Net.WebSocket。作为 Bot 的开发者， 您只需要了解如何使用 Kook.Net.WebSocket ，但也需要了解它们之间的区别。 Kook.Net.Core 提供了一组抽象化 KOOK API 的接口，这些接口保证了 Kook.Net 中的所有实现都保持一致。如果您正在编写与实现无关的库，可仅依赖 核心库来确保您的库能够与 Kook.Net 一起在任何类型的实现中都能正常工作。 Kook.Net.Rest 提供了一组具体的类，用于实现 KOOK API 中的 HTTP 接口部分。 该实现中的实体以 Rest 为前缀，例如 RestChannel。 Kook.Net.WebSocket 提供了一组具体的类，用于实现 KOOK API 中的 WebSocket 接口部分， 并支持实体的缓存。开发 Bot 时，您应使用此实现。该实现中的实体以 Socket 为前缀， 例如 SocketChannel。"
  },
  "guides/introduction/intro.html": {
    "href": "guides/introduction/intro.html",
    "title": "Kook.Net 简介 | Kook.Net 文档",
    "keywords": "简介 要准备使用 Kook.Net？ 欢迎！在开始使用本类库前，请先确认您应了解如何开发 .NET 应用程序， 并对 C# 语言有一定的了解，包括 异步编程、多态、接口 等关键内容。 如果想与使用本类库的开发者交流、获取帮助、反馈问题，请访问我们的 KOOK Kook.Net 社区。 Note 请注意，本文档中的代码片段仅为示例，请不要盲目地直接复制使用。 还不熟悉 .NET 与 C#？ 本类库的样例、代码片段、文档都是以 .NET 和 C# 开发的，如有需要，可参考以下文档： C# 编程指南 C# 文档 C# 语言参考 .NET API"
  },
  "guides/other_libs/efcore.html": {
    "href": "guides/other_libs/efcore.html",
    "title": "Entity Framework Core | Kook.Net 文档",
    "keywords": "对象关系映射框架 Entity Framework Core 本向导可以指引您配置并基于 SQL Server 数据库使用 Entity Framework Core，本文末尾罗列了其它数据库的信息。 先决条件 配置好依赖注入服务的 Bot 客户端程序 SQL Server 数据库实例 EF Core CLI 工具 安装所需类库 可通过集成开发环境的用户界面或 dotnet CLI 安装以下类库： 名称 链接 Microsoft.EntityFrameworkCore 链接 Microsoft.EntityFrameworkCore.SqlServer 链接 配置 DbContext EF Core 中的 DbContext 是一个抽象类，它提供了一系列方法来操作数据库。数据库上下文及其包装的实体示例如下： // ApplicationDbContext.cs using Microsoft.EntityFrameworkCore; public class ApplicationDbContext : DbContext { public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { } public DbSet<UserEntity> Users { get; set; } } // UserEntity.cs public class UserEntity { public ulong Id { get; set; } public string Name { get; set; } } Note 有关创建用于 EF Core 的实体模型，请参阅 EF Core 文档。 将数据库上下文添加到依赖注入服务容器中 要将此数据库上下文添加到依赖注入服务容器中，只需调用 EF Core 中所提供的扩展方法，示例如下： private static ServiceProvider ConfigureServices() { return new ServiceCollection() .AddDbContext<ApplicationDbContext>( optionsBuilder => optionsBuilder.UseSqlServer(\"数据库连接字符串\") ) // ... .BuildServiceProvider(); } Note 有关如何书写数据库连接字符串，可参考 EF Core 文档。 迁移 在使用数据库上下文前，需要将代码中的更改迁移到实际的数据库中。有关迁移的更多信息，请参阅 EF Core 文档。 使用数据库上下文 要使用数据库上下文，请通过依赖注入服务将其注入到要使用的类中，示例如下： using Kook.Commands; public class DatabaseModule : ModuleBase<SocketCommandContext> { private readonly ApplicationDbContext _dbContext; public SampleModule(ApplicationDbContext dbContext) { _dbContext = dbContext; } [Command(\"sample\")] public async Task Sample() { // 在命令的业务逻辑中使用所注入的数据库上下文 var user = _dbContext.Users.SingleOrDefault(x => x.Id == Context.User.Id); // ... } } 使用其它数据库提供程序 此处有一些 EF Core 可用的主流的数据库提供程序，及其相关的文档，通常来说，与上文示例代码中不同的仅有 DbContextOptions / DbContextOptionsBuilder 中进行配置的部分。 名称 链接 MySQL 链接 SQLite 链接 PostgreSQL 链接"
  },
  "guides/other_libs/mediatr.html": {
    "href": "guides/other_libs/mediatr.html",
    "title": "MediatR | Kook.Net 文档",
    "keywords": "中介者模式 MediatR 先决条件 配置好依赖注入服务的 Bot 客户端程序 安装所需类库 可通过集成开发环境的用户界面或 dotnet CLI 安装以下类库： 名称 链接 MediatR 链接 MediatR.Extensions.Microsoft.DependencyInjection 链接 将 MediatR 添加到依赖注入服务容器中 MediatR.Extensions.Microsoft.DependencyInjection 提供了方法 .AddMediatR() 允许您以将 MediatR 便捷地添加到依赖注入服务容器中，其参数可以是事件处理程序中将会用到地任何类型，代码示例片段如下： .AddMediatR(typeof(Bot)) 创建消息通知 MediatR 基于消息通知和其处理程序传递事件。下面的示例创建了一个消息通知来处理 KookSocketClient 中的 MessageReceived 事件。 // MessageReceivedNotification.cs using Kook.WebSocket; using MediatR; namespace MediatRSample.Notifications; public class MessageReceivedNotification : INotification { public MessageReceivedNotification(SocketMessage message) { Message = message ?? throw new ArgumentNullException(nameof(message)); } public SocketMessage Message { get; } } 创建事件发布者与订阅者 在 MediatR 中，事件发布者所发布的事件需要通过订阅者的监听来使用，下面的示例创建了一个事件订阅者来监听 KookSocketClient 中的 MessageReceived 事件： // KookEventListener.cs using Kook.WebSocket; using MediatR; using MediatRSample.Notifications; using Microsoft.Extensions.DependencyInjection; using System.Threading; using System.Threading.Tasks; namespace MediatRSample; public class KookEventListener { private readonly CancellationToken _cancellationToken; private readonly KookSocketClient _client; private readonly IServiceScopeFactory _serviceScope; public KookEventListener(KookSocketClient client, IServiceScopeFactory serviceScope) { _client = client; _serviceScope = serviceScope; _cancellationToken = new CancellationTokenSource().Token; } private IMediator Mediator { get { var scope = _serviceScope.CreateScope(); return scope.ServiceProvider.GetRequiredService<IMediator>(); } } public async Task StartAsync() { _client.MessageReceived += OnMessageReceivedAsync; await Task.CompletedTask; } private Task OnMessageReceivedAsync(SocketMessage arg) { return Mediator.Publish(new MessageReceivedNotification(arg), _cancellationToken); } } 此示例代码中，KookEventListener 首先从依赖注入服务中接收 KookSocketClient 实例用于订阅事件，本示例仅演示了 MessageReceived，其他事件也可以使用同样的方式， 但事件处理程序使用了 MediatR 将事件发布到所有监听此事件的的消息通知处理程序。 添加事件订阅者添加到依赖注入服务容器中 要开始监听事件，需在入口点函数内调用 KookEventListener 类的 StartAsync() 方法，在此之前，需在依赖注入容器中注册 KookEventListener 类，并在入口点函数中获取对它的引用。 // Program.cs var listener = services.GetRequiredService<KookEventListener>(); await listener.StartAsync(); 创建消息通知处理程序 MediatR 将消息通知发布到所有监听此消息通知的事件订阅者，下面的示例创建了一个消息通知处理程序： // MessageReceivedHandler.cs using System; using MediatR; using MediatRSample.Notifications; namespace MediatRSample; public class MessageReceivedHandler : INotificationHandler<MessageReceivedNotification> { public async Task Handle(MessageReceivedNotification notification, CancellationToken cancellationToken) { Console.WriteLine($\"MediatR works! (Received a message by {notification.Message.Author.Username})\"); // ... } } 此示例代码实现了 MediatR 提供的 INotificationHandler<> 接口，这告知了 MediatR 需要将 MessageReceivedNotification 通知发送到此消息通知处理程序类。 Note 您可根据需要为同一消息通知创建任意数量的消息通知处理程序。 测试 要测试 MediatR 是否正常工作，可以启动此 Bot 客户端，并在 KOOK 客户端中向此 Bot 可访问的文字频道内发送消息，应该能看到之前在 MessageReceivedHandler 中定义的输出信息： 添加更多的事件类型 要添加更多的事件类型，可遵循以下步骤： 为事件创建消息通知类，其应包含该事件所传递的所有参数（例如：MessageReceived 事件接收一个 SocketMessage 对象作为参数，则消息通知类也应该映射此参数） 将此事件注册到 KookEventListener 类 创建消息通知处理程序来处理此消息通知"
  },
  "guides/other_libs/serilog.html": {
    "href": "guides/other_libs/serilog.html",
    "title": "Serilog | Kook.Net 文档",
    "keywords": "日志框架 Serilog 先决条件 如 使用 Kook.Net 构建你的第一个 Bot 中所描述的带有日志处理方法的 Bot 客户端程序。 安装 Serilog 类库 可通过集成开发环境的用户界面或 dotnet CLI 安装以下类库： 名称 链接 Serilog.Extensions.Logging 链接 Serilog.Sinks.Console 链接 配置 Serilog Serilog 需在异步函数入口点的顶部进行配置： using Kook; using Serilog; using Serilog.Events; public class Program { private KookSocketClient _client; public static Task Main(string[] args) => new Program().MainAsync(); public async Task MainAsync() { Log.Logger = new LoggerConfiguration() .MinimumLevel.Verbose() .Enrich.FromLogContext() .WriteTo.Console() .CreateLogger(); _client = new KookSocketClient(); _client.Log += LogAsync; // 将 Token 写入字符串变量，用于 Bot 登录过程的身份认证 // 这很不安全，尤其是在有公开源代码的情况下，不应该这么做 var token = \"token\"; // 一些其它存储 Token 的方案，如环境变量、文件等 // var token = Environment.GetEnvironmentVariable(\"NameOfYourEnvironmentVariable\"); // var token = File.ReadAllText(\"token.txt\"); // var token = JsonConvert.DeserializeObject<AConfigurationClass>(File.ReadAllText(\"config.json\")).Token; await _client.LoginAsync(TokenType.Bot, token); await _client.StartAsync(); // Block this task until the program is closed. await Task.Delay(Timeout.Infinite); } } 修改日志方法 要想让 Serilog 能够正确地记录 KOOK 的日志，需要将 Kook.Net 的 LogSeverity 映射到 Serilog 的 LogEventLevel，映射的示例如下： private static async Task LogAsync(LogMessage message) { var severity = message.Severity switch { LogSeverity.Critical => LogEventLevel.Fatal, LogSeverity.Error => LogEventLevel.Error, LogSeverity.Warning => LogEventLevel.Warning, LogSeverity.Info => LogEventLevel.Information, // Serilog 中，LogEventLevel.Verbose 相比 LogEventLevel.Debug 会输出更多的信息 LogSeverity.Verbose => LogEventLevel.Debug, LogSeverity.Debug => LogEventLevel.Verbose, _ => LogEventLevel.Information }; Log.Write(severity, message.Exception, \"[{Source}] {Message}\", message.Source, message.Message); await Task.CompletedTask; } 测试 如果现在运行程序，应该会看到以下输出： 在其它位置使用此日志记录器 至此，Serilog 已配置完毕，要想使用此日志记录器，只需按如下方式调用： Log.Debug(\"Your log message, with {Variables}!\", 10); // 这将输出信息：\"[20:36:00 DBG] Your log message, with 10!\" Note 根据所配置的日志级别，部分日志消息可能不会输出。有关日志级别的更多信息，请参见 Serilog 文档。 Note Kook.Net 与 Serilog 对日志级别的定义不完全一致，要简化最低输出日志级别控制，有两种可选策略： 将 Serilog 的 MinimumLevel 配置为 Verbose，转而在 Kook.Net 的 KookConfig 中配置 LogLevel 在 Kook.Net 的 KookConfig 中配置 LogLevel 为 Debug，转而在 Serilog 中配置 MinimumLevel 同时配置两侧的最低日志级别可能会导致预期之外的最低日志级别控制结果。"
  },
  "guides/text_commands/intro.html": {
    "href": "guides/text_commands/intro.html",
    "title": "文本命令框架入门 | Kook.Net 文档",
    "keywords": "文本命令框架 Kook.Commands 命名空间提供了一组基于特性标签的文本命令服务。 入门 要使用文本命令框架，需要先创建 CommandService 及命令处理程序。 下面的代码演示了如何创建命令服务和命令处理程序的最小程序，可在此基础上扩展功能模块。 Note CommandService 可接收一个 CommandServiceConfig 类型的可选参数用于命令服务的配置， 如果不提供此参数，则使用默认配置。建议在使用配置时，通过 IDE 的自动提示与代码注释 浏览并了解各项属性与默认参数值，并在需要时修改。 public class CommandHandler { private readonly KookSocketClient _client; private readonly CommandService _commands; // 从构造函数中获取 KookSocketClient 与 CommandService 的示例 public CommandHandler(KookSocketClient client, CommandService commands) { _commands = commands; _client = client; } public async Task InstallCommandsAsync() { // 将命令服务处理程序订阅至 MessageReceived 事件 _client.MessageReceived += HandleCommandAsync; // 通过反射查找所有命令模块并加载至命令服务 // 如不使用依赖注入，services 参数传 null // 如有需要可参考依赖注入指南 await _commands.AddModulesAsync(assembly: Assembly.GetEntryAssembly(), services: null); } private async Task HandleCommandAsync(SocketMessage messageParam) { // 过滤系统信息 var message = messageParam as SocketUserMessage; if (message == null) return; // 追踪消息前缀结束即文本命令开始的位置 int argPos = 0; // 过滤来自 Bot 的消息，过滤前缀不合命令触发规则的消息 if (!(message.HasCharPrefix('!', ref argPos) || message.HasMentionPrefix(_client.CurrentUser, ref argPos)) || message.Author.IsBot) return; // 基于此消息创建命令上下文 var context = new SocketCommandContext(_client, message); // 执行命令 await _commands.ExecuteAsync( context: context, argPos: argPos, services: null); } } 使用特性 文本命令框架支持通过特性标签来预先定义命令，也可以在运行时通过命令构建类来定义命令。 绝大多数情况下，Bot 的命令服务的确定的，因此推荐使用特性标签来定义命令。 模块 命令的功能由模块定义，在不同的类中可以分别定义不同的命令功能，在启动时可以一并加载。 要使模块能够被自动发现，模块需要满足： 公开 继承自 ModuleBase 则模块类的声明形如： using Kook.Commands; // 模块类 **必须** 为公开类，且继承自 ModuleBase // 否则，AddModulesAsync 将无法发现此模块 public class InfoModule : ModuleBase<SocketCommandContext> { } Note ModuleBase 是一个抽象类，可根据需要进行派生或重写。 模块可以继承自 ModuleBase 的任何派生类。 添加/创建命令 Warning 尽量避免模型内代码运行耗时过长，这可能会导致网关线程的阻塞，进而中断 Bot 与 KOOK 服务端的连接。 创建命令的处理程序，方法的返回类型必须是 Task 或 Task<RuntimeResult>，按需标记 async 关键字。 对该方法标记 [CommandAttribute] 特性标签，并指定命令的名称。 如该方法是 模块组 中的命令，名称可以留空。 命令参数 命令处理函数的参数即为命令的参数，例如： 整型作为参数：int num 用户作为参数：IUser user 命令参数几乎可以是任何类型的，默认支持读取的类型列表参见 类型解析 。 可选参数 默认地，命令参数为必选参数，要设置为可选参数，需为其指定默认值，例如：int num = 0。 参数中的空格 如要接收一个以空格分隔的列表，可指定可变参数关键字 params，例如：params int[]。 如果实参包含空格，在调用命令时，该实参应以双引号进行包装， 例如：对于参数 string food，可通过 !favoritefood \"Key Lime Pie\" 的形式进行调用。 如果某个参数可以包含空格地持续读取到命令末尾，可以为该参数标记 RemainderAttribute， 用户在调用时便不必将实参包装在双引号中。 命令重载 命令处理函数支持重载，命令解析过程将自动地选择类型匹配的方法。 如果两个命令处理函数间在调用时会存在不明确的引用， 可为应优先尝试进行类型匹配的重载标记 PriorityAttribute 。 命令上下文 每个命令都可以通过 ModuleBase 上的 [Context] 属性访问执行上下文。 ICommandContext 支持访问消息、频道、服务器、用户、以及调用命令的底层 KOOK 客户端。 使用 ModuleBase 的派生类可以指定不同类型的上下文。 例如，[SocketCommandContext] 中的上下文中的属性为是 Socket 实体，不再需要进行强制类型转换。 回复消息也可通过调用以 Reply 为前缀的方法完成，无需调用上下文中频道内发送消息的方法来回复命令。 Warning 上下文的类型不应该混合使用，使用 CommandContext 上下文的模块与使用 SocketCommandContext 的模块不可同时使用。 Tip 模块的完整代码示例： // 无前缀的模块 public class InfoModule : ModuleBase<SocketCommandContext> { // !say hello world -> hello world [Command(\"say\")] [Summary(\"回显消息\")] public Task SayAsync([Remainder] [Summary(\"要回显的消息\")] string echo) => ReplyTextAsync(echo); // ReplyTextAsync 为 ModuleBase 上的方法 } // 创建前缀为 'sample' 的模块 [Group(\"sample\")] public class SampleModule : ModuleBase<SocketCommandContext> { // !sample square 20 -> 400 [Command(\"square\")] [Summary(\"计算给定数字的平方\")] public async Task SquareAsync( [Summary(\"要计算的数字\")]) int num) { // 也可通过命令上下文访问频道属性 await Context.Channel.SendTextAsync($\"{num}^2 = {Math.Pow(num, 2)}\"); } // !sample userinfo --> 戈小荷#0439 // !sample userinfo @戈小荷 --> 戈小荷#0439 // !sample userinfo 戈小荷#0439 --> 戈小荷#0439 // !sample userinfo 戈小荷 --> 戈小荷#0439 // !sample userinfo 2810246202 --> 戈小荷#0439 // !sample whois 2810246202 --> 戈小荷#0439 [Command(\"userinfo\")] [Summary(\"打印当前用户的信息，或用户参数指定的用户信息\")] [Alias(\"user\", \"whois\")] public async Task UserInfoAsync( [Summary(\"要获取信息的用户\")] SocketUser user = null) { var userInfo = user ?? Context.Client.CurrentUser; await ReplyTextAsync($\"{userInfo.Username}#{userInfo.IdentifyNumber}\"); } } 自动加载模块 命令服务可以自动发现并加载程序集内继承自 ModuleBase 的类，调用 CommandService.AddModulesAsync 可以进行自动发现与模块加载。如果要指定某个模块跳过自动加载，可对其标记特性 DontAutoLoadAttribute。 手动加载模块 要手动加载模块，可调用 CommandService.AddModuleAsync，模块的类通过泛型传递。 如有需要，也可以向该方法传入 IServiceProvider. 模块构造函数 模块通过 依赖注入 进行构造， 构造函数内的任何参数都应先注入服务容器中。 Tip 模块构造函数也可以将 IServiceProvider 作为参数，并从中手动抽取所需服务，但并不推荐。 模块属性 具有公共 set 访问器属性的模块在模块构造后会被依赖服务注入，详细信息可参考 @Guides.TextCommands.DI 。 模块组 模块组为一组具有相同名称前缀的命令，要声明模块组，可标记特性 GroupAttribute 。 在模块组内，如果命令的 CommandAttribute 特性标签中不传入名称参数，则为创建以该组名称作为命令名称的命令。 子模块 子模块是模块内的模块，可用于创建嵌套组。 [Group(\"admin\")] public class AdminModule : ModuleBase<SocketCommandContext> { [Group(\"ban\")] public class CleanModule : ModuleBase<SocketCommandContext> { // !admin ban @戈小荷 [Command] public Task BanAsync(IGuildUser user) => Context.Guild.AddBanAsync(user); // !admin ban clean @戈小荷 7 [Command(\"clean\")] public Task BanAsync(IGuildUser user, int pruneDays) => Context.Guild.AddBanAsync(user, pruneDays); // !admin ban list [Command(\"list\")] public async Task ListBansAsync() { var bans = await Context.Guild.GetBansAsync(); var banInfo = bans.Select(ban => $\"> {ban.User.Username}#{ban.User.IdentifyNumber} \" + $\"({ban.CreatedAt:yyyy'/'M'/'d HH':'mm}, {ban.Reason})\") .Aggregate((a, b) => $\"{a}\\n{b}\"); await ReplyTextAsync($\"{bans.Count} 条封禁：\\n{banInfo}\"); } } // !admin kick @戈小荷 [Command(\"kick\")] public Task KickAsync(IGuildUser user) => user.KickAsync(); }"
  },
  "guides/text_commands/namedarguments.html": {
    "href": "guides/text_commands/namedarguments.html",
    "title": "命名参数 | Kook.Net 文档",
    "keywords": "命名参数 默认情况下，命令中的参数是按照顺序逐个解析的，位置决定了参数的对应。 如果定义了多个可选参数，对于用户来说，只设置想要传入的可选参数而不全部一一写出会更加方便。 设置参数名称 要想用户能够通过指定参数名称来设置对应的参数，您需要创建一个可选参数容器类， 其中需包含了命令会用到的所有可选参数，并为其添加 NamedArgumentTypeAttribute 特性标签。 示例 [NamedArgumentType] public class NamableArguments { public string First { get; set; } public string Second { get; set; } public string Third { get; set; } public string Fourth { get; set; } } 用法 要使用这些可选参数的命令可以通过如下的方式定义： [Command(\"act\")] public async Task Act(int requiredArg, NamableArguments namedArgs) 该命令则可以按如下方式调用： .act 42 first: Hello fourth: \"A string with spaces must be wrapped in quotes\" second: World 可选参数容器类的类型解析是自动注册的，无需对该容器类创建并注册自定义类型解析。 Important 一个命令只能有用一个被 NamedArgumentTypeAttribute 特性标注的可选参数容器类，且必须位于参数列表的末位。 被该特性标注的类会在解析参数时自动应用 RemainderAttribute 特性的效果。 复杂类型 可选参数容器类中的每个属性在进行匹配时，所有注册到文本命令服务内的类型解析都会如以往正常匹配。 如果要将多个相同类型的值读入单个属性中，则可以将属性声明为形如 IEnumerable<T> 的类型。 例如：如果可选参数容器类中包含了一个这样的属性： public IEnumerable<int> Numbers { get; set; } 那么该命令可以以如下的方式调用： .cmd numbers: \"1, 2, 4, 8, 16, 32\" 补充说明 可选参数容器类中的属性也可以使用 OverrideTypeReader。"
  },
  "guides/text_commands/post-execution.html": {
    "href": "guides/text_commands/post-execution.html",
    "title": "后处理程序 | Kook.Net 文档",
    "keywords": "文本命令执行的后处理程序 在开发命令时，您可能想要在执行命令后执行一些操作，Kook.Net 提供了一些命令执行后处理工作流来实现这个目的。 文本命令框架入门 中展示了下面的示例来执行并处理命令及其内的数据： public class CommandHandler { private readonly KookSocketClient _client; private readonly CommandService _commands; // 从构造函数中获取 KookSocketClient 与 CommandService 的示例 public CommandHandler(KookSocketClient client, CommandService commands) { _commands = commands; _client = client; } public async Task InstallCommandsAsync() { // 将命令服务处理程序订阅至 MessageReceived 事件 _client.MessageReceived += HandleCommandAsync; // 通过反射查找所有命令模块并加载至命令服务 // 如不使用依赖注入，services 参数传 null // 如有需要可参考依赖注入指南 await _commands.AddModulesAsync(assembly: Assembly.GetEntryAssembly(), services: null); } private async Task HandleCommandAsync(SocketMessage messageParam) { // 过滤系统信息 var message = messageParam as SocketUserMessage; if (message == null) return; // 追踪消息前缀结束即文本命令开始的位置 int argPos = 0; // 过滤来自 Bot 的消息，过滤前缀不合命令触发规则的消息 if (!(message.HasCharPrefix('!', ref argPos) || message.HasMentionPrefix(_client.CurrentUser, ref argPos)) || message.Author.IsBot) return; // 基于此消息创建命令上下文 var context = new SocketCommandContext(_client, message); // 执行命令 await _commands.ExecuteAsync( context: context, argPos: argPos, services: null); } } 示例中，ExecuteAsync 方法的运行结果会返回一个 Task<IResult> 对象，要将结果打印到聊天中，可以采用以下的代码示例： // 此部分代码处理命令直接结果的方式不受推荐 // 请不要盲目赋值本示例的代码 IResult result = await _commands.ExecuteAsync(context, argPos, _services); if (result.Error != null) switch (result.Error) { case CommandError.BadArgCount: await context.Channel.SendTextAsync( \"Parameter count does not match any command's.\"); break; default: await context.Channel.SendTextAsync( $\"An error has occurred {result.ErrorReason}\"); break; } 然而，这种处理方式中，命令执行后处理程序被嵌入到了基本的命令执行逻辑中， 这样会导致命令执行逻辑部分的代码更混乱，且可能违反了单一职责原则（SRP），不受推荐。 另一个主要的问题是，如果命令的处理程序被 RunMode.Async 标记为异步模式运行，ExecuteAsync 将总是返回包含执行成功信息的 ExecuteResult，而非真正的执行结果。 CommandExecuted 事件 当命令执行完成时，无论其结果如何，都会触发 CommandExecuted 事件。 该事件可以简化前面示例中混乱的结构，且可以避免 RunMode.Async 模式的问题。 采用事件模式的代码示例如下： public async Task SetupAsync() { await _commands.AddModulesAsync(Assembly.GetEntryAssembly(), _services); // 订阅命令执行后处理程序 _commands.CommandExecuted += OnCommandExecutedAsync; // 订阅命令执行处理程序 _client.MessageReceived += HandleCommandAsync; } public async Task OnCommandExecutedAsync(Optional<CommandInfo> command, ICommandContext context, IResult result) { // CommandExecuted 提供三个参数：所执行的命令、命令执行上下文、命令执行结果 // 可以告知命令调用者异常信息 if (!string.IsNullOrEmpty(result?.ErrorReason)) { await context.Channel.SendTextAsync(result.ErrorReason); } // 或者可以将结果记入日志系统 var commandName = command.IsSpecified ? command.Value.Name : \"A command\"; await _log.LogAsync(new LogMessage(LogSeverity.Info, \"CommandExecution\", $\"{commandName} was executed at {DateTime.UtcNow}.\")); } public async Task HandleCommandAsync(SocketMessage msg) { var message = msg as SocketUserMessage; if (message == null) return; int argPos = 0; if (!(message.HasCharPrefix('!', ref argPos) || message.HasMentionPrefix(_client.CurrentUser, ref argPos)) || (message.Author.IsBot ?? false)) return; var context = new SocketCommandContext(_client, message); await _commands.ExecuteAsync(context, argPos, _services); } RuntimeResult 命令执行完成后可以返回 RuntimeResult 对象，RuntimeResult 是一个结果类，可以用来表示命令执行结果的逻辑。 由于 ExecuteAsync 中异步执行的命令始终无法返回错误信息，RuntimeResult 往往不应与 ExecuteResult 共同使用，而应在 CommandExecuted 事件处理程序中使用。 在实践中，您可以基于 RuntimeResult 派生自定义的结果类，以记录更多的结果信息及逻辑。 下面的示例创建了一个 RuntimeResult 的最小派生类： public class MyCustomResult : RuntimeResult { public MyCustomResult(CommandError? error, string reason) : base(error, reason) { } } 派生类中的信息及逻辑没有什么特殊的限制，您可以添加有关执行结果的任何其他信息。 例如，可能根据命令的执行结果添加更多的方法、字段或属性， 或是一些静态方法来更容易地创建该结果类。 public class MyCustomResult : RuntimeResult { public string Hint { get; set; } public MyCustomResult(CommandError? error, string reason, string hint) : base(error, reason) { Hint = hint; } public static MyCustomResult FromError(string reason, string hint = null) => new MyCustomResult(CommandError.Unsuccessful, reason, hint); public static MyCustomResult FromSuccess(string reason = null) => new MyCustomResult(null, reason); } 要想在命令执行后返回该结果类，请将方法前面的返回类型更改为 Task<RuntimeResult>。 Note 方法签名中的返回类型必须是 Task<RuntimeResult> 而不应是 Task<MyCustomResult>，后者无法被自动模块加载发现并加载。 下面的示例展示了如何使用该自定义结果类： public class MyModule : ModuleBase<SocketCommandContext> { [Command(\"eat\")] public async Task<RuntimeResult> ChooseAsync(string food) { if (food == \"salad\") return MyCustomResult.FromError(\"No, I don't want that!\", \"Give me something others!\"); return MyCustomResult.FromSuccess($\"Give me the {food}!\"). } } 进而可以在 CommandExecuted 的事件处理程序中使用该结果类： public async Task OnCommandExecutedAsync(Optional<CommandInfo> command, ICommandContext context, IResult result) { switch(result) { case MyCustomResult customResult: // 提取自定义结果类中的信息进行进一步的处理 break; default: if (!string.IsNullOrEmpty(result.ErrorReason)) await context.Channel.SendMessageAsync(result.ErrorReason); break; } } CommandService.Log 事件 CommandService.Log 事件可以记录命令执行过程中发生的异常信息, 而这些信息由于业务逻辑抛出异常而中断执行，无法被传递到正常的命令执行后处理程序中。 所有命令执行过程中发生的异常信息都会被捕获并传入 CommandException 类内的 LogMessage.Exception 属性中，CommandException 类记录了抛出的异常及命令执行的上下文。 public async Task LogAsync(LogMessage logMessage) { if (logMessage.Exception is CommandException cmdException) { // 可以告知命令调用者所发生的异常 await cmdException.Context.Channel.SendMessageAsync(\"Something went catastrophically wrong!\"); // 也可以将此异常记入日志系统 Console.WriteLine($\"{cmdException.Context.User} failed to execute '{cmdException.Command.Name}' in {cmdException.Context.Channel}.\"); Console.WriteLine(cmdException.ToString()); } }"
  },
  "guides/text_commands/preconditions.html": {
    "href": "guides/text_commands/preconditions.html",
    "title": "先决条件 | Kook.Net 文档",
    "keywords": "先决条件 先决条件可以被用作为命令服务中的权限系统，但其能力也不仅限于权限， 您也可以通过创建自定义先决条件实现更复杂的先决条件逻辑。 有两种可供使用的先决条件： PreconditionAttribute 可以被应用于模块、组、命令上 ParameterPreconditionAttribute 可以被应用于参数上 有关这两种先决条件的详细信息，请参阅各自的 API 文档。 内置的先决条件 Kook.Commands 提供了几个内置的先决条件。 RequireContextAttribute RequireUserAttribute RequireRoleAttribute RequireBotPermissionAttribute RequireUserPermissionAttribute 用法 要使用先决条件，只需将先决条件特性标记于命令的方法签名上。 示例 [RequireBotPermission(ChannelPermission.SendMessages)] [Command(\"echo\")] public Task EchoAsync(string input) => ReplyTextAsync(input); 先决条件的析取 命令的先决条件可以存在多个，如果想要其中的部分先决条件满足任一即可被是作为先决条件校验通过， 则需要为先决条件进行分组来表示先决条件的析取。 PreconditionAttribute 提供了一个可选的 Group 属性，如果为两个或多个先决条件制定了相同的 Group 属性，则命令系统在进行先决条件检查时，这些条件中的任何一个满足时，分组内的其他先决条件都将被忽略。 示例 // 该示例展示了先决条件的析取的声明方式 // 将 RequireUserPermission 与 RequireUser 中的 Group 属性都设置为 \"Permission\" // 则该命令调用者在当前服务器内拥有管理员权限或其用户 ID 为 2810246202 时都可以通过先决条件检查 [RequireUserPermission(GuildPermission.Administrator, Group = \"Permission\")] [RequireUser(2810246202, Group = \"Permission\")] public class AdminModule : ModuleBase<SocketCommandContext> { [Command(\"ban\")] public Task BanAsync(IUser user) => Context.Guild.AddBanAsync(user); } 自定义先决条件 要创建自定义先决条件，请根据用途创建一个继承自 PreconditionAttribute 或 ParameterPreconditionAttribute 的类。 要实现函数上的先决条件，请重写 CheckPermissionsAsync 方法。 如果命令调用上下文满足条件，则返回 PreconditionResult.FromSuccess 创建的对象，否则，请返回 PreconditionResult.FromError 创建的对象，如有需要，请在返回的对象中添加错误消息。 Note Visual Studio、JetBrains Rider 等集成开发环境中的 IntelliSense 智能提示可以帮助您添加抽象类的实现中缺失的成员。 示例 using System; using System.Linq; using System.Threading.Tasks; using Kook.Commands; using Kook.WebSocket; // 继承自 PreconditionAttribute public class RequireTimeAttribute : PreconditionAttribute { // 创建字段存储指定的时间范围 private readonly TimeOnly _from; private readonly TimeOnly _to; // 创建构造函数，用来在使用时接收时间范围作为参数 public RequireTimeAttribute(TimeOnly from, TimeOnly to) { _from = from; _to = to; } // 重写 CheckPermissions 方法 public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) { // 检查当前时间是否在指定的时间范围内 if ((_from < _to && TimeOnly.FromDateTime(DateTime.Now) >= _from && TimeOnly.FromDateTime(DateTime.Now) <= _to) || (_from > _to && (TimeOnly.FromDateTime(DateTime.Now) >= _from || TimeOnly.FromDateTime(DateTime.Now) <= _to))) // 如果在指定时间范围内，则返回成功 // 由于方法内没有异步代码，要返回的结果需要包装在 `Task.FromResult` 中来避免编译错误 return Task.FromResult(PreconditionResult.FromSuccess()); // 如果不在指定时间范围内，则返回失败及错误信息 return Task.FromResult(PreconditionResult.FromError($\"You can only run this command between {_from} and {_to}\")); } }"
  },
  "guides/text_commands/typereaders.html": {
    "href": "guides/text_commands/typereaders.html",
    "title": "类型解析 | Kook.Net 文档",
    "keywords": "类型解析 通过类型解析，命令中传入的各种参数可以被自动转换为各种类型。 默认支持的类型解析包括： bool char sbyte/byte ushort/short uint/int ulong/long float, double, decimal string enum DateTime/DateTimeOffset/TimeSpan 任何可空的值类型 (例如：int?, bool?) 任何 IChannel/IMessage/IUser/IRole 的实现类 自定义类型解析 要自定义类型解析，可以创建一个类，引入 Kook 和 Kook.Commands 命名空间，继承 @Kook.Commands.TypeReader，并重写 ReadAsync 方法， 该方法内为将输入的字符串解析为指定类型的逻辑。 如果类型解析成功，请将解析结果传入 TypeReaderResult.FromSuccess 返回； 如果类型解析失败，请将错误信息传入 TypeReaderResult.FromError 返回。 Note Visual Studio、JetBrains Rider 等集成开发环境中的 IntelliSense 智能提示可以帮助您添加抽象类的实现中缺失的成员。 示例 // 本类库已对多数基本类型的类型解析进行了实现 // 本示例仅用来展示如何创建一个简单的自定义类型解析 using Kook; using Kook.Commands; public class BooleanTypeReader : TypeReader { public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) { bool result; if (bool.TryParse(input, out result)) return Task.FromResult(TypeReaderResult.FromSuccess(result)); return Task.FromResult(TypeReaderResult.FromError(CommandError.ParseFailed, \"Input could not be parsed as a boolean.\")); } } 注册自定义类型解析 自定义类型解析无法被文本命令服务自动发现，需要显式注册。 要添加自定义类型解析，请调用 CommandService.AddTypeReader 方法。 Important 自定义类型解析注册需要在模块发现前进行，否则自定义类型接解析无法正常工作。 示例 public class CommandHandler { private readonly CommandService _commands; private readonly KookSocketClient _client; private readonly IServiceProvider _services; public CommandHandler(CommandService commands, KookSocketClient client, IServiceProvider services) { _commands = commands; _client = client; _services = services; } public async Task SetupAsync() { _client.MessageReceived += CommandHandleAsync; // 添加 BooleanTypeReader 来解析 `bool` 类型的参数 _commands.AddTypeReader(typeof(bool), new BooleanTypeReader()); // 注册模块 await _commands.AddModulesAsync(Assembly.GetEntryAssembly(), _services); } public async Task CommandHandleAsync(SocketMessage msg) { // ... } }"
  },
  "guides/voice/sending-voice.html": {
    "href": "guides/voice/sending-voice.html",
    "title": "语音推流 | Kook.Net 文档",
    "keywords": "安装 语音推流需要 Opus 编码器的支持，要使用语音功能，请将 opus 原生库放在 Bot 运行目录内。 .NET Framework 中，请将该原生库放在编译或发布的输出目录中，例如 bin/Debug；.NET (Core) 中，该目录应为 csporj 文件所在目录。 Windows 开发者可以在此处 下载预编译的二进制文件。 Linux 开发者需要从源码编译 Opus，或通过包管理器进行安装。 加入语音频道 语音推流前需要先加入语音频道，调用 IAudioChannel 上的 ConnectAsync，该异步操作会返回一个 IAudioClient 对象，用于后续的语音推流操作。 // The command's Run Mode MUST be set to RunMode.Async, otherwise, being connected to a voice channel will block the gateway thread. [Command(\"join\", RunMode = RunMode.Async)] public async Task JoinChannel(IVoiceChannel channel = null) { // Get the audio channel channel ??= (Context.User as IGuildUser)?.VoiceChannel; // If you need to ensure the user's connected voice channel via Rest // if (Context.User is IGuildUser guildUser) // channel ??= (await guildUser.GetConnectedVoiceChannelsAsync()).FirstOrDefault(); if (channel == null) { await Context.Channel.SendTextAsync(\"User must be in a voice channel, or a voice channel must be passed as an argument.\"); return; } // For the next step with transmitting audio, you would want to pass this Audio Client in to a service. _audioClient = await channel.ConnectAsync(); } Warning 改变语音状态的命令，例如加入或离开音频频道、推流时，应该使用 RunMode.Async，这可以防止在客户端的默认配置中产生死锁的反馈循环。 如果你能确保你的命令在与网关任务不同的任务中运行，那么也可以不需要 RunMode.Async。 加入语音频道后，客户端将保持与此频道的连接，直到被踢出频道、掉线、或其它被服务端通知需主动断开连接。 应注意的是，语音连接是基于每个语音频道创建的，对多个语音频道分别调用 ConnectAsync，会创建多个 IAudioClient 的实例。 语音推流 通过 FFmpeg 转码 FFmpeg 是一个开源的、高度多功能的音视频混合工具。这是传输音频前进行转码的推荐方式。 在这之前，你需要安装 FFmpeg CLI，通常的做法是下载一个 FFmpeg 的版本，并将其放置在你的环境变量的 PATH 中（或者与 Bot 在同一位置，与 opus 在同一位置），参见 FFmpeg 的下载页面，或使用操作系统相应的包管理器。 首先，创建一个启动 FFmpeg 的 Process 进程对象，来将输入音频以 PCM 方式转码为 48kHz 采样率的字节流。 using Process ffmpeg = Process.Start(new ProcessStartInfo { FileName = \"ffmpeg\", Arguments = $\"\"\"-hide_banner -loglevel panic -i \"{source}\" -ac 2 -f s16le -ar 48000 pipe:1\"\"\", UseShellExecute = false, RedirectStandardOutput = true, }); 该 ffmpeg 命令的参数中： -hide_banner：用于隐藏启动时的版权和版本信息。 -loglevel panic：设置日志级别为 panic，只有最严重的错误才会被记录。 -i {source}：指定输入文件或流，{source} 是输入的变量，表示具体的文件路径或网络地址。 -ac 2：设置音频通道数量为 2，即立体声。 -f s16le：设置输出格式为 16 位有符号小端（Signed 16-bit Little-Endian）PCM（脉冲编码调制）音频。 -ar 48000：设置音频采样率为 48kHz。 pipe:1：将输出重定向到标准输出，以便在接下来的操作中由程序读取。 由 Kook.Net 进行编码推流 接下来，要向 KOOK 传输音频，需要由 IAudioClient 创建一个 AudioOutStream，由于 ffmpeg 命令输出了 PCM 音频，因此使用 IAudioClient.CreatePcmStream。 最后，音频需要从 FFmpeg 的标准输出流传输到你的 AudioOutStream 对象中。 根据你的业务需要，这个步骤中间可能会进行某些处理，但在大多数情况下，使用 Stream.CopyToAsync 即可。 如果你正在实现一个点歌机，你可能会希望等待音频停止播放后再继续播放下一首歌，等待 AudioOutStream.FlushAsync 可以等待音频客户端的内部缓冲区清空。 await using var output = ffmpeg.StandardOutput.BaseStream; await using var kook = _audioClient.CreatePcmStream(AudioApplication.Voice); try { await output.CopyToAsync(kook, cancellationToken); } finally { await kook.FlushAsync(cancellationToken); }"
  },
  "index.html": {
    "href": "index.html",
    "title": "首页 | Kook.Net 文档",
    "keywords": "本文档是 Kook.Net 的官方文档，包含了 Kook.Net 的使用指南、API 文档以及其他相关信息。文档的源码托管在 GitHub 上，欢迎您为文档做出贡献。 什么是 Kook.Net？ Kook.Net 是一个对 KOOK（原开黑啦）API 进行功能封装的类库，以 C# 编写，编译所采用的目标框架包括 .NET 8.0 .NET 7.0 .NET 6.0 .NET Standard 2.1 .NET Standard 2.0 .NET Framework 4.6.2 Tip 除 .NET 8.0 外的其他目标框架未经完全测试。 我应该从哪里开始？ 如果您是初次使用 Kook.Net，请参考 用户指南。 如果您熟悉 KOOK 开发者文档，想快速了解如何在 Kook.Net 中访问这些接口与事件，请参考 快速参考指南。 如果您想浏览完整的 Kook.Net API，请参考 API 文档。 寻求帮助？ 如果您在开发中遇到无法解决的问题，请访问我们的 KOOK Kook.Net 社区 寻求帮助。"
  },
  "quick_reference/event/channel.html": {
    "href": "quick_reference/event/channel.html",
    "title": "频道相关事件 | Kook.Net 文档",
    "keywords": "频道相关事件 预声明变量 readonly KookSocketClient _client = null; 频道内用户添加 reaction _client.ReactionAdded += (message, channel, user, reaction) => Task.CompletedTask; 频道内用户取消 reaction _client.ReactionRemoved += (message, channel, user, reaction) => Task.CompletedTask; 频道消息更新 _client.MessageUpdated += (before, after, channel) => Task.CompletedTask; 频道消息被删除 _client.MessageDeleted += (message, channel) => Task.CompletedTask; 新增频道 _client.ChannelCreated += channel => Task.CompletedTask; 修改频道信息 _client.ChannelUpdated += (before, after) => Task.CompletedTask; 删除频道 _client.ChannelDestroyed += channel => Task.CompletedTask; 新的频道置顶消息 _client.MessagePinned += (before, after, channel, @operator) => Task.CompletedTask; 取消频道置顶消息 _client.MessageUnpinned += (before, after, channel, @operator) => Task.CompletedTask;"
  },
  "quick_reference/event/direct-message.html": {
    "href": "quick_reference/event/direct-message.html",
    "title": "私聊消息事件 | Kook.Net 文档",
    "keywords": "私聊消息事件 预声明变量 readonly KookSocketClient _client = null; 私聊消息更新 _client.DirectMessageUpdated += (before, after, author, channel) => Task.CompletedTask; 私聊消息被删除 _client.DirectMessageDeleted += (message, author, channel) => Task.CompletedTask; 私聊内用户添加 reaction _client.DirectReactionAdded += (message, channel, user, reaction) => Task.CompletedTask; 私聊内用户取消 reaction _client.DirectReactionRemoved += (message, channel, user, reaction) => Task.CompletedTask;"
  },
  "quick_reference/event/guild-member.html": {
    "href": "quick_reference/event/guild-member.html",
    "title": "服务器成员相关事件 | Kook.Net 文档",
    "keywords": "服务器成员相关事件 预声明变量 readonly KookSocketClient _client = null; 新成员加入服务器 _client.UserJoined += (user, time) => Task.CompletedTask; 服务器成员退出 _client.UserLeft += (guild, user, time) => Task.CompletedTask; 服务器成员信息更新 _client.GuildMemberUpdated += (before, after) => Task.CompletedTask; 服务器成员上线 _client.GuildMemberOnline += (users, time) => Task.CompletedTask; 服务器成员下线 _client.GuildMemberOffline += (users, time) => Task.CompletedTask;"
  },
  "quick_reference/event/guild-role.html": {
    "href": "quick_reference/event/guild-role.html",
    "title": "服务器角色相关事件 | Kook.Net 文档",
    "keywords": "服务器角色相关事件 预声明变量 readonly KookSocketClient _client = null; 服务器角色增加 _client.RoleCreated += role => Task.CompletedTask; 服务器角色删除 _client.RoleDeleted += role => Task.CompletedTask; 服务器角色更新 _client.RoleUpdated += (before, after) => Task.CompletedTask;"
  },
  "quick_reference/event/guild.html": {
    "href": "quick_reference/event/guild.html",
    "title": "服务器相关事件 | Kook.Net 文档",
    "keywords": "服务器相关事件 预声明变量 readonly KookSocketClient _client = null; 服务器信息更新 _client.GuildUpdated += (before, after) => Task.CompletedTask; 服务器删除 视同 自己退出服务器 _client.LeftGuild += guild => Task.CompletedTask; 服务器封禁用户 _client.UserBanned += (users, @operator, guild, reason) => Task.CompletedTask; 服务器取消封禁用户 _client.UserUnbanned += (users, @operator, guild) => Task.CompletedTask; 服务器添加新表情 _client.EmoteCreated += (emote, guild) => Task.CompletedTask; 服务器删除表情 _client.EmoteDeleted += (emote, guild) => Task.CompletedTask; 服务器更新表情 _client.EmoteUpdated += (before, after, guild) => Task.CompletedTask;"
  },
  "quick_reference/event/message.html": {
    "href": "quick_reference/event/message.html",
    "title": "消息相关事件列表 | Kook.Net 文档",
    "keywords": "消息相关事件列表 预声明变量 readonly KookSocketClient _client = null; 本页结构与 KOOK 文档不完全一致，如需浏览 KOOK 文档，请参考： https://developer.kookapp.cn/doc/event/message 接收服务器频道消息 _client.MessageReceived += (message, user, channel) => Task.CompletedTask; 接收私聊消息 _client.DirectMessageReceived += (message, author, channel) => Task.CompletedTask;"
  },
  "quick_reference/event/user.html": {
    "href": "quick_reference/event/user.html",
    "title": "用户相关事件列表 | Kook.Net 文档",
    "keywords": "用户相关事件列表 预声明变量 readonly KookSocketClient _client = null; 用户加入语音频道 _client.UserConnected += (user, channel, time) => Task.CompletedTask; 用户退出语音频道 _client.UserDisconnected += (user, channel, time) => Task.CompletedTask; 用户信息更新 _client.UserUpdated += (before, after) => Task.CompletedTask; _client.CurrentUserUpdated += (before, after) => Task.CompletedTask; 自己新加入服务器 _client.JoinedGuild += guild => Task.CompletedTask; 自己退出服务器 _client.LeftGuild += guild => Task.CompletedTask; Card 消息中的 Button 点击事件 _client.MessageButtonClicked += (value, user, message, channel) => Task.CompletedTask; _client.DirectMessageButtonClicked += (value, user, message, channel) => Task.CompletedTask;"
  },
  "quick_reference/http_api/asset.html": {
    "href": "quick_reference/http_api/asset.html",
    "title": "媒体接口 | Kook.Net 文档",
    "keywords": "媒体接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; 上传文件/图片 POST /api/v3/asset/create Stream stream = null; // 文件流 string path = null; // 文件路径 string filename = null; // 文件名 // API 请求 string assertUri = await _socketClient.Rest.CreateAssetAsync(stream, filename); string assertUri = await _socketClient.Rest.CreateAssetAsync(path, filename); string assertUri = await _restClient.CreateAssetAsync(stream, filename); string assertUri = await _restClient.CreateAssetAsync(path, filename);"
  },
  "quick_reference/http_api/badge.html": {
    "href": "quick_reference/http_api/badge.html",
    "title": "Badge 相关接口 | Kook.Net 文档",
    "keywords": "Badge 相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; IGuild guild = null; 获取服务器 Badge GET /api/v3/badge/guild BadgeStyle style = default; // 样式 // API 请求 Stream badge = await guild.GetBadgeAsync(style);"
  },
  "quick_reference/http_api/blacklist.html": {
    "href": "quick_reference/http_api/blacklist.html",
    "title": "黑名单相关接口 | Kook.Net 文档",
    "keywords": "黑名单相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketGuild socketGuild = null; RestGuild restGuild = null; IGuild guild = null; 获取黑名单列表 GET /api/v3/blacklist/list IUser user = null; // 用户 ulong userId = default; // 用户 ID // API 请求 IReadOnlyCollection<RestBan> restBansFromSocket = await socketGuild.GetBansAsync(); IReadOnlyCollection<RestBan> restBansFromRest = await restGuild.GetBansAsync(); IReadOnlyCollection<IBan> bans = await guild.GetBansAsync(); // API 请求，获取指定用户的封禁信息 IReadOnlyCollection<IBan> bans = await guild.GetBansAsync(); RestBan ban = await socketGuild.GetBanAsync(user); RestBan ban = await socketGuild.GetBanAsync(userId); RestBan ban = await restGuild.GetBanAsync(user); RestBan ban = await restGuild.GetBanAsync(userId); IBan ban = await guild.GetBanAsync(user); IBan ban = await guild.GetBanAsync(userId); 加入黑名单 POST /api/v3/blacklist/create IUser user = null; // 用户 ulong userId = default; // 用户 ID int pruneDays = default; // 清理消息天数 string reason = null; // 理由 // API 请求 await guild.AddBanAsync(user, pruneDays, reason); await guild.AddBanAsync(userId, pruneDays, reason); 移除黑名单 POST /api/v3/blacklist/delete IUser user = null; // 用户 ulong userId = default; // 用户 ID // API 请求 await guild.RemoveBanAsync(user); await guild.RemoveBanAsync(userId);"
  },
  "quick_reference/http_api/channel-user.html": {
    "href": "quick_reference/http_api/channel-user.html",
    "title": "频道用户相关接口 | Kook.Net 文档",
    "keywords": "频道用户相关 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; 根据用户 ID 和服务器 ID 获取用户所在语音频道 GET /api/v3/channel-user/get-joined-channel SocketGuildUser socketGuildUser = null; IGuildUser guildUser = null; // 要支持获取程序连接至 KOOK 网关前加入的语音频道信息，请设置 AlwaysDownloadVoiceStates = true // 缓存获取用户所在语音频道 SocketVoiceChannel socketVoiceChannel = socketGuildUser.VoiceChannel; // API 请求 IVoiceChannel voiceChannel = (await guildUser.GetConnectedVoiceChannelsAsync()).FirstOrDefault();"
  },
  "quick_reference/http_api/channel.html": {
    "href": "quick_reference/http_api/channel.html",
    "title": "频道相关接口 | Kook.Net 文档",
    "keywords": "频道相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketGuild socketGuild = null; SocketVoiceChannel socketVoiceChannel = null; SocketCategoryChannel socketCategoryChannel = null; RestGuild restGuild = null; IGuild guild = null; IGuildUser guildUser = null; IGuildChannel guildChannel = null; ITextChannel textChannel = null; IVoiceChannel voiceChannel = null; INestedChannel nestedChannel = null; ICategoryChannel categoryChannel = null; 获取频道列表 GET /api/v3/channel/list // 缓存获取指定服务器的全部频道 IReadOnlyCollection<SocketGuildChannel> socketGuildChannels = socketGuild.Channels; IReadOnlyCollection<RestGuildChannel> restGuildChannels = restGuild.Channels; // 缓存获取指定服务器的全部文字频道 IReadOnlyCollection<SocketTextChannel> socketTextChannels = socketGuild.TextChannels; IReadOnlyCollection<RestTextChannel> restTextChannels = restGuild.TextChannels; // 缓存获取指定服务器的全部语音频道 IReadOnlyCollection<SocketVoiceChannel> socketVoiceChannels = socketGuild.VoiceChannels; IReadOnlyCollection<RestVoiceChannel> restVoiceChannels = restGuild.VoiceChannels; // 缓存获取指定服务器的全部分组频道 IReadOnlyCollection<SocketCategoryChannel> socketCategoryChannels = socketGuild.CategoryChannels; IReadOnlyCollection<RestCategoryChannel> restCategoryChannels = restGuild.CategoryChannels; // 缓存获取指定服务器分组频道下的全部频道 IReadOnlyCollection<SocketGuildChannel> socketChannelsInCategory = socketCategoryChannel.Channels; // API 请求 IReadOnlyCollection<RestGuildChannel> restGuildChannels = await restGuild.GetChannelsAsync(); IReadOnlyCollection<RestTextChannel> restTextChannels = await restGuild.GetTextChannelsAsync(); IReadOnlyCollection<RestVoiceChannel> restVoiceChannels = await restGuild.GetVoiceChannelsAsync(); IReadOnlyCollection<RestCategoryChannel> restCategoryChannels = await restGuild.GetCategoryChannelsAsync(); // 如果 IGuild 对象是 SocketGuild，则直接返回缓存的频道列表，否则会发起 API 请求获取全部频道信息 IReadOnlyCollection<IGuildChannel> guildChannels = await guild.GetChannelsAsync(); IReadOnlyCollection<ITextChannel> textChannels = await guild.GetTextChannelAsyncs(); IReadOnlyCollection<IVoiceChannel> voiceChannels = await guild.GetVoiceChannelAsyncs(); IReadOnlyCollection<ICategoryChannel> categoryChannels = await guild.GetCategoryChannelAsyncs(); 获取频道详情 GET /api/v3/channel/view ulong channelId = default; // 频道 ID // 缓存获取指定的服务器频道 SocketChannel socketChannel = _socketClient.GetChannel(channelId); SocketChannel socketChannel = socketGuild.GetChannel(channelId); RestGuildChannel restGuildChannel = restGuild.Channels.FirstOrDefault(x => x.Id == channelId); // 缓存获取指定的服务器文字频道 SocketTextChannel socketTextChannel = socketGuild.GetTextChannel(channelId); RestTextChannel restTextChannel = restGuild.TextChannels.FirstOrDefault(x => x.Id == channelId); // 缓存获取指定的服务器语音频道 SocketVoiceChannel socketVoiceChannel = socketGuild.GetVoiceChannel(channelId); RestVoiceChannel restVoiceChannel = restGuild.VoiceChannels.FirstOrDefault(x => x.Id == channelId); // 缓存获取指定的服务器分组频道 SocketCategoryChannel socketCategoryChannel = socketGuild.GetCategoryChannel(channelId); RestCategoryChannel restCategoryChannel = restGuild.CategoryChannels.FirstOrDefault(x => x.Id == channelId); // API 请求 RestChannel restChannel = await _restClient.GetChannelAsync(channelId); RestGuildChannel restGuildChannel = await restGuild.GetChannelAsync(channelId); RestTextChannel restTestChannel = await restGuild.GetTextChannelAsync(channelId); RestVoiceChannel restVoiceChannel = await restGuild.GetVoiceChannelAsync(channelId); RestCategoryChannel restCategoryChannel = await restGuild.GetCategoryChannelAsync(channelId); // 如果 IGuild 对象是 SocketGuild，则直接返回缓存的频道，否则会发起 API 请求获取指定的频道信息 IChannel channel = await _socketClient.GetChannelAsync(channelId); IGuildChannel guildChannel = await guild.GetChannelAsync(channelId); ITextChannel textChannel = await guild.GetTextChannelAsync(channelId); IVoiceChannel voiceChannel = await guild.GetVoiceChannelAsync(channelId); ICategoryChannel categoryChannel = await guild.GetCategoryChannelAsync(channelId); 创建频道 POST /api/v3/channel/create string name = null; // 频道名称 ulong categoryChannelId = default; // 分组频道 ID string topic = null; // 文字频道主题 int userLimit = default; // 语音频道用户数上限 VoiceQuality voiceQuality = default; // 语音频道语音质量 // API 请求，创建文字频道 ITextChannel textChannel = await guild.CreateTextChannelAsync(name); ITextChannel textChannel = await guild.CreateTextChannelAsync(name, x => { x.CategoryId = categoryChannelId; x.Topic = topic; }); // API 请求，创建语音频道 IVoiceChannel voiceChannel = await guild.CreateVoiceChannelAsync(name); IVoiceChannel voiceChannel = await guild.CreateVoiceChannelAsync(name, x => { x.CategoryId = categoryChannelId; x.UserLimit = userLimit; x.VoiceQuality = voiceQuality; }); // API 请求，创建分组频道 ICategoryChannel categoryChannel = await guild.CreateCategoryChannelAsync(name); 编辑频道 POST /api/v3/channel/update string name = null; // 频道名称 ulong categoryChannelId = default; // 分组频道 ID int position = default; // 频道排序位置 string topic = null; // 文字频道主题 SlowModeInterval slowModeInterval = default; // 文字频道慢速模式间隔 int userLimit = default; // 语音频道用户数上限 VoiceQuality voiceQuality = default; // 语音频道语音质量 string password = null; // 语音频道密码 // API 请求，修改频道 guildChannel.ModifyAsync(x => { x.Name = name; x.CategoryId = categoryChannelId; x.Position = position; }); // API 请求，修改文字频道 textChannel.ModifyAsync(x => { x.Name = name; x.CategoryId = categoryChannelId; x.Position = position; x.Topic = topic; x.SlowModeInterval = slowModeInterval; }); // API 请求，修改语音频道 voiceChannel.ModifyAsync(x => { x.Name = name; x.CategoryId = categoryChannelId; x.Position = position; x.VoiceQuality = voiceQuality; x.UserLimit = userLimit; x.Password = password; }); // API 请求，修改分组频道 categoryChannel.ModifyAsync(x => { x.Name = name; x.CategoryId = categoryChannelId; x.Position = position; }); 删除频道 POST /api/v3/channel/delete // API 请求 await guildChannel.DeleteAsync(); 语音频道用户列表 GET /api/v3/channel/user-list // 要在启动时缓存语音状态信息，请设置 AlwaysDownloadVoiceStates = true // 主动更新所有服务器语音状态信息缓存 await _socketClient.DownloadVoiceStatesAsync(); // 缓存获取 IReadOnlyCollection<SocketGuildUser> connectedGuildUsers = socketVoiceChannel.ConnectedUsers; // API 请求 IReadOnlyCollection<IUser> connectedUsers = await voiceChannel.GetConnectedUsersAsync(); 语音频道之间移动用户 POST /api/v3/channel/move-user // 要移动的服务器用户列表 IEnumerable<IGuildUser> guildUsers = null; // API 请求 await guild.MoveUsersAsync(guildUsers, voiceChannel); 获取频道角色权限详情 GET /api/v3/channel-role/index IRole role = null; // 要获取在该频道的权限覆盖配置的角色 IUser user = null; // 要获取在该频道的权限覆盖配置的用户 // 缓存获取频道的角色或用户权限覆盖配置 IReadOnlyCollection<RolePermissionOverwrite> rolePermissionOverwrites = guildChannel.RolePermissionOverwrites; IReadOnlyCollection<UserPermissionOverwrite> userPermissionOverwrites = guildChannel.UserPermissionOverwrites; // 缓存获取频道的指定角色或用户的权限覆盖配置 OverwritePermissions? rolePermissionOverwrite = guildChannel.GetPermissionOverwrite(role); OverwritePermissions? userPermissionOverwrite = guildChannel.GetPermissionOverwrite(user); 创建频道角色权限 POST /api/v3/channel-role/create IRole role = null; // 要在该频道创建权限覆盖配置的角色 IGuildUser guildUser = null; // 要在该频道创建权限覆盖配置的服务器用户 // API 请求 await guildChannel.AddPermissionOverwriteAsync(role); await guildChannel.AddPermissionOverwriteAsync(guildUser); 更新频道角色权限 POST /api/v3/channel-role/update IRole role = null; // 要在该频道修改权限覆盖配置的角色 IGuildUser guildUser = null; // 要在该频道修改权限覆盖配置的服务器用户 // API 请求 await guildChannel.ModifyPermissionOverwriteAsync(role, x => x.Modify()); await guildChannel.ModifyPermissionOverwriteAsync(role, x => x.Modify()); 同步频道角色权限 POST /api/v3/channel-role/sync // API 请求 await nestedChannel.SyncPermissionsAsync(); 删除频道角色权限 POST /api/v3/channel-role/delete // API 请求 await guildChannel.RemovePermissionOverwriteAsync(role); await guildChannel.RemovePermissionOverwriteAsync(guildUser);"
  },
  "quick_reference/http_api/direct-message.html": {
    "href": "quick_reference/http_api/direct-message.html",
    "title": "用户私聊消息接口 | Kook.Net 文档",
    "keywords": "用户私聊消息接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketDMChannel socketDmChannel = null; RestDMChannel restDmChannel = null; IDMChannel dmChannel = null; IUserMessage userMessage = null; 获取私信聊天消息列表 GET /api/v3/direct-message/list IMessage referenceMessage = null; // 获取消息列表所根据的参考消息位置的 Guid referenceMessageId = default; // 获取消息列表所根据的参考消息位置的 ID Direction direction = default; // 获取消息列表的方向 int limit = default; // 获取消息列表的数量 // 要缓存文字频道聊天消息，请设置 MessageCacheSize 的值 // 缓存获取文字频道的聊天消息列表 IReadOnlyCollection<SocketMessage> cachedMessages = socketDmChannel.CachedMessages; IReadOnlyCollection<SocketMessage> conditionalCachedMessages = socketDmChannel.GetCachedMessages(referenceMessage, direction, limit); IReadOnlyCollection<SocketMessage> conditionalCachedMessagesById = socketDmChannel.GetCachedMessages(referenceMessageId, direction, limit); // API 请求 IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessages = socketDmChannel.GetMessagesAsync(referenceMessage, direction, limit); IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessagesById = socketDmChannel.GetMessagesAsync(referenceMessageId, direction, limit); IAsyncEnumerable<IReadOnlyCollection<RestMessage>> pagedRestMessages = restDmChannel.GetMessagesAsync(referenceMessage, direction, limit); IAsyncEnumerable<IReadOnlyCollection<RestMessage>> pagedRestMessagesById = restDmChannel.GetMessagesAsync(referenceMessageId, direction, limit); // 在 ITextChannel 上进行调用 IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessages = dmChannel.GetMessagesAsync(referenceMessage, direction, limit); IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessagesById = dmChannel.GetMessagesAsync(referenceMessageId, direction, limit); 获取私信聊天会话详情 POST /api/v3/user-chat/view // 要缓存文字频道聊天消息，请设置 MessageCacheSize 的值 // 缓存获取文字频道的聊天消息详情 SocketMessage cachedMessage = socketDmChannel.GetCachedMessage(messageId); // 调用异步方法获取消息详情，在缓存中包含指定的消息对象的情况下，直接返回缓存的消息对象，否则会发起 API 请求获取消息对象 IMessage messageAsync = await socketDmChannel.GetMessageAsync(messageId); // API 请求 IMessage message = await restDmChannel.GetMessageAsync(messageId); // 在 IDMChannel 上进行调用 IMessage message = await dmChannel.GetMessageAsync(messageId); 发送私信聊天消息 POST /api/v3/direct-message/create string text = null; // 要发送的文字消息 IQuote quote = null; // 被引用的消息 string filePath = null; // 要发送的文件的路径 string fileName = null; // 要发送的文件的名称 AttachmentType fileType = default; // 要发送的文件的类型 Stream stream = null; // 要发送的文件的流 FileAttachment attachment = default; // 要发送的文件的附件 ICard card = null; // 要发送的卡片 IEnumerable<ICard> cards = null; // 要发送的卡片列表 // API 请求，发送文本消息 Cacheable<IUserMessage,Guid> textMessage = await dmChannel.SendTextAsync(text, quote); // API 请求，发送文件消息 Cacheable<IUserMessage,Guid> fileMessageFromPath = await dmChannel.SendFileAsync(filePath, fileName, fileType, quote); Cacheable<IUserMessage,Guid> fileMessageFromStream = await dmChannel.SendFileAsync(stream, fileName, fileType, quote); Cacheable<IUserMessage,Guid> fileMessageFromAttachment = await dmChannel.SendFileAsync(attachment, quote); // API 请求，发送单卡片消息 Cacheable<IUserMessage,Guid> cardMessage = await dmChannel.SendCardAsync(card, quote); // API 请求，发送多卡片消息 Cacheable<IUserMessage,Guid> cardsMessage = await dmChannel.SendCardsAsync(cards, quote); 更新私信聊天消息 POST /api/v3/direct-message/update string content = null; // 要更新的消息的文本 IEnumerable<ICard> cards = null; // 要更新的消息的卡片 IQuote quote = null; // 要更新的消息的引用 // API 请求 await userMessage.ModifyAsync(x => { x.Content = content; x.Cards = cards; x.Quote = quote; // 要清除引用，请设置为 Quote.Empty }); 删除私信聊天消息 POST /api/v3/direct-message/delete // API 请求 await userMessage.DeleteAsync(); 获取频道消息某回应的用户列表 GET /api/v3/direct-message/reaction-list IEmote emoji = null; // 要获取用户列表的回应的表情 // 缓存获取消息的回应概要，但不包含用户列表 IReadOnlyDictionary<IEmote,ReactionMetadata> cachedReactions = socketUserMessage.Reactions; // API 请求 IReadOnlyCollection<IUser> reactionUsers = await userMessage.GetReactionUsersAsync(emoji); 给某个消息添加回应 POST /api/v3/direct-message/add-reaction 有关如何构造 Emoji，请参考 表情符号。 IEmote emoji = null; // 要添加的回应的表情 IEnumerable<IEmote> emojis = null; // 要添加的回应的表情列表 // API 请求 await userMessage.AddReactionAsync(emoji); await userMessage.AddReactionsAsync(emojis); 删除消息的某个回应 POST /api/v3/direct-message/delete-reaction IEmote emoji = null; IEnumerable<IEmote> emojis = null; IUser user = null; // API 请求 await userMessage.RemoveReactionAsync(emoji, user); await userMessage.RemoveReactionsAsync(user, emojis);"
  },
  "quick_reference/http_api/friend.html": {
    "href": "quick_reference/http_api/friend.html",
    "title": "好友相关接口 | Kook.Net 文档",
    "keywords": "好友相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; IUser user = null; 好友列表 GET /api/v3/friend // API 请求，获取好友列表 IReadOnlyCollection<RestUser> friends = await _restClient.GetFriendsAsync(); // API 请求，获取好友请求列表 IReadOnlyCollection<RestFriendRequest> friendRequests = await _restClient.GetFriendRequestsAsync(); // API 请求，获取屏蔽用户列表 IReadOnlyCollection<RestUser> blockedUsers = await _restClient.GetBlockedUsersAsync(); 好友申请 POST /api/v3/friend/request // API 请求 await user.RequestFriendAsync(); 处理好友申请 POST /api/v3/friend/handle-request // 好友申请 RestFriendRequest friendRequest = null; // API 请求，接受好友申请 await friendRequest.AcceptAsync(); // API 请求，拒绝好友申请 await friendRequest.DeclineAsync(); 删除好友 POST /api/v3/friend/delete // API 请求 await user.RemoveFriendAsync(); 屏蔽用户 POST /api/v3/friend/block // API 请求 await user.BlockAsync(); 取消屏蔽用户 POST /api/v3/friend/unblock // API 请求 await user.UnblockAsync();"
  },
  "quick_reference/http_api/game.html": {
    "href": "quick_reference/http_api/game.html",
    "title": "用户动态相关接口 | Kook.Net 文档",
    "keywords": "用户动态相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; 游戏列表 GET /api/v3/game GameCreationSource source = default; // 游戏创建来源 // API 请求 IAsyncEnumerable<IReadOnlyCollection<RestGame>> pagedGames = _socketClient.Rest.GetGamesAsync(source); IAsyncEnumerable<IReadOnlyCollection<RestGame>> pagedGames = _restClient.GetGamesAsync(source); 添加游戏 POST /api/v3/game/create string name = null; // 游戏名称 string processName = null; // 游戏进程名称 string iconUrl = null; // 图标地址 // API 请求 RestGame game = await _socketClient.Rest.CreateGameAsync(name, processName, iconUrl); RestGame game = await _restClient.CreateGameAsync(name, processName, iconUrl); 更新游戏 POST /api/v3/game/update RestGame game = null; // 游戏 string name = null; // 游戏名称 string iconUrl = null; // 图标地址 // API 请求 RestGame modifiedGame = await game.ModifyAsync(x => { x.Name = name; x.IconUrl = iconUrl; }); 删除游戏 POST /api/v3/game/delete RestGame game = null; // 游戏 // API 请求 await game.DeleteAsync(); 添加游戏/音乐记录(开始玩/听) POST /api/v3/game/activity RestGame game = null; // 游戏 Music music = null; // 音乐 // API 请求 await _socketClient.Rest.CurrentUser.StartPlayingAsync(game); await _socketClient.Rest.CurrentUser.StartPlayingAsync(music); await _restClient.CurrentUser.StartPlayingAsync(game); await _restClient.CurrentUser.StartPlayingAsync(music); 删除游戏/音乐记录(结束玩/听) POST /api/v3/game/delete-activity ActivityType type = default; // 活动类型 // API 请求 await _socketClient.Rest.CurrentUser.StopPlayingAsync(type); await _restClient.CurrentUser.StopPlayingAsync(type);"
  },
  "quick_reference/http_api/gateway.html": {
    "href": "quick_reference/http_api/gateway.html",
    "title": "Gateway 相关接口 | Kook.Net 文档",
    "keywords": "Gateway 相关接口 获取网关连接地址 GET /api/v3/gateway/index 无公开 API"
  },
  "quick_reference/http_api/guild-emoji.html": {
    "href": "quick_reference/http_api/guild-emoji.html",
    "title": "服务器表情相关接口 | Kook.Net 文档",
    "keywords": "服务器表情相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketGuild socketGuild = null; RestGuild restGuild = null; IGuild guild = null; 获取服务器表情列表 GET /api/v3/guild-emoji/list string emoteId = null; // 表情符号 ID // 缓存中获取表情符号列表 IReadOnlyCollection<GuildEmote> cachedGuildEmotes = guild.Emotes; // 缓存获取指定 ID 的表情符号 GuildEmote cachedGuildEmote = socketGuild.GetEmote(emoteId); // API 请求获取表情符号列表 IReadOnlyCollection<GuildEmote> guildEmotes = await guild.GetEmotesAsync(); GuildEmote guildEmote = await guild.GetEmoteAsync(emoteId); 创建服务器表情 POST /api/v3/guild-emoji/create string name = null; // 表情符号名称 Image image = default; // 表情符号图片 // API 请求 GuildEmote emote = await guild.CreateEmoteAsync(name, image); 更新服务器表情 POST /api/v3/guild-emoji/update GuildEmote emote = null; // 表情符号 string name = null; // 表情符号名称 // API 请求 await guild.ModifyEmoteNameAsync(emote, name); 删除服务器表情 POST /api/v3/guild-emoji/delete GuildEmote emote = null; // 表情符号 // API 请求 await guild.DeleteEmoteAsync(emote);"
  },
  "quick_reference/http_api/guild-role.html": {
    "href": "quick_reference/http_api/guild-role.html",
    "title": "服务器角色权限相关接口 | Kook.Net 文档",
    "keywords": "服务器角色权限相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketGuild socketGuild = null; RestGuild restGuild = null; IGuild guild = null; IRole role = null; 获取服务器角色列表 GET /api/v3/guild-role/list // 获取服务器的角色列表 IReadOnlyCollection<SocketRole> socketRoles = socketGuild.Roles; IReadOnlyCollection<RestRole> restRoles = restGuild.Roles; IReadOnlyCollection<IRole> roles = guild.Roles; // 获取服务器的指定角色 ID 的信息 SocketRole socketRole = socketGuild.GetRole(roleId); RestRole restRole = restGuild.GetRole(roleId); IRole role = guild.GetRole(roleId); 创建服务器角色 POST /api/v3/guild-role/create string roleName = null; // 角色名称 // API 请求 RestRole restRoleFromSocket = await socketGuild.CreateRoleAsync(roleName); RestRole restRoleFromRest = await restGuild.CreateRoleAsync(roleName); IRole role = await guild.CreateRoleAsync(roleName); 更新服务器角色 POST /api/v3/guild-role/update string roleName = null; // 角色名称 Color color = default; // 角色颜色 bool hoist = default; // 是否分离显示 bool mentionable = default; // 是否可被提及 GuildPermissions permissions = default; // 角色权限 // API 请求 await role.ModifyAsync(x => { x.Name = roleName; x.Color = color; x.Hoist = hoist; x.Mentionable = mentionable; x.Permissions = permissions; }); 删除服务器角色 POST /api/v3/guild-role/delete // API 请求 await role.DeleteAsync(); 赋予用户角色 POST /api/v3/guild-role/grant ulong guildId = default; // 服务器 ID IRole role = null; // 角色 uint roleId = default; // 角色 ID IEnumerable<IRole> roles = null; // 多个角色 IEnumerable<uint> roleIds = null; // 多个角色 ID ulong userId = default; // 用户 ID // API 请求赋予角色 await guildUser.AddRoleAsync(role); await guildUser.AddRoleAsync(roleId); // API 请求批量赋予角色 await guildUser.AddRolesAsync(roles); await guildUser.AddRolesAsync(roleIds); // API 请求，无实体操作 await _socketClient.Rest.AddRoleAsync(guildId, userId, roleId); 删除用户角色 POST /api/v3/guild-role/revoke ulong guildId = default; // 服务器 ID IRole role = null; // 角色 uint roleId = default; // 角色 ID IEnumerable<IRole> roles = null; // 多个角色 IEnumerable<uint> roleIds = null; // 多个角色 ID ulong userId = default; // 用户 ID // API 请求赋予角色 await guildUser.RemoveRoleAsync(role); await guildUser.RemoveRoleAsync(roleId); // API 请求批量赋予角色 await guildUser.RemoveRolesAsync(roles); await guildUser.RemoveRolesAsync(roleIds); // API 请求，无实体操作 await _socketClient.Rest.RemoveRoleAsync(guildId, userId, roleId);"
  },
  "quick_reference/http_api/guild.html": {
    "href": "quick_reference/http_api/guild.html",
    "title": "服务器相关接口 | Kook.Net 文档",
    "keywords": "服务器相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketGuild socketGuild = null; RestGuild restGuild = null; IGuild guild = null; IGuildUser guildUser = null; 获取当前用户加入的服务器列表 GET /api/v3/guild/list // 缓存获取加入的所有服务器 IReadOnlyCollection<SocketGuild> socketGuilds = _socketClient.Guilds; // API 请求 IReadOnlyCollection<RestGuild> restGuilds = await _socketClient.Rest.GetGuildsAsync(); IReadOnlyCollection<RestGuild> restGuilds = await _restClient.GetGuildsAsync(); 获取服务器详情 GET /api/v3/guild/view ulong guildId = default; // 服务器 ID // 缓存获取指定服务器 SocketGuild socketGuild = _socketClient.GetGuild(guildId); // API 请求 RestGuild restGuild = await _socketClient.Rest.GetGuildAsync(guildId); RestGuild restGuild = await _restClient.GetGuildAsync(guildId); 获取服务器中的用户列表 GET /api/v3/guild/user-list ulong guildId = default; // 服务器 ID // 要在启动时缓存服务器用户列表，请设置 AlwaysDownloadUsers = true // 主动更新所有服务器用户列表缓存 await _socketClient.DownloadUsersAsync(); // 主动更新部分服务器用户列表缓存 IEnumerable<IGuild> guilds = Enumerable.Empty<IGuild>(); await _socketClient.DownloadUsersAsync(guilds); // 主动更新指定服务器用户列表缓存 await socketGuild.DownloadUsersAsync(); // 缓存获取 SocketGuild 对象 SocketGuild socketGuild = _socketClient.GetGuild(guildId); // 缓存获取用户列表 IReadOnlyCollection<SocketGuildUser> socketUsers = socketGuild.Users; // 调用异步方法获取用户列表，在缓存中包含所有用户的情况下，直接返回缓存的用户列表，否则会发起 API 请求获取分页结果 IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> pagedGuildUsers = socketGuild.GetUsersAsync(); // 合并分页结果 IEnumerable<IGuildUser> guildUsers = await pagedGuildUsers.FlattenAsync(); // API 请求 IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> pagedRestGuildUsers = restGuild.GetUsersAsync(); // 合并分页结果 IEnumerable<RestGuildUser> restGuildUsers = await pagedRestGuildUsers.FlattenAsync(); // 如果 IGuild 对象是 SocketGuild，且缓存中包含所有用户，则直接返回缓存的用户列表，否则会发起 API 请求获取全部用户信息 IReadOnlyCollection<IGuildUser> guildUsers = await guild.GetUsersAsync(); 修改服务器中用户的昵称 POST /api/v3/guild/nickname // 要设置的昵称，如要清空昵称，请传入 `null`、`string.Empty` 或该用户的 `IUser.Username` string nickname = null; // API 请求 await guildUser.ModifyNicknameAsync(nickname); 离开服务器 POST /api/v3/guild/leave // API 请求 await guild.LeaveAsync(); 踢出服务器 POST /api/v3/guild/kickout // API 请求 await guildUser.KickAsync(); 服务器静音闭麦列表 GET /api/v3/guild-mute/list // 要在启动时缓存语音状态信息，请设置 AlwaysDownloadVoiceStates = true // 主动更新所有服务器语音状态信息缓存 await _socketClient.DownloadVoiceStatesAsync(); // 主动更新部分服务器语音状态信息缓存 IEnumerable<IGuild> guilds = Enumerable.Empty<IGuild>(); await _socketClient.DownloadVoiceStatesAsync(guilds); // 主动更新指定服务器语音状态信息缓存 await socketGuild.DownloadVoiceStatesAsync(); // 缓存获取服务器内的所有语音状态信息 Dictionary<SocketGuildUser, SocketVoiceState?> voiceStates = socketGuild.Users.ToDictionary(x => x, x => x.VoiceState); // 缓存获取被服务器闭麦的用户列表 IEnumerable<SocketGuildUser> mutedUsers = socketGuild.Users.Where(x => x.VoiceState?.IsMuted == true); // 缓存获取被服务器静音的用户列表 IEnumerable<SocketGuildUser> deafenedUsers = socketGuild.Users.Where(x => x.VoiceState?.IsDeafened == true); 添加服务器静音或闭麦 POST /api/v3/guild-mute/create // API 请求 await guildUser.MuteAsync(); await guildUser.DeafenAsync(); 删除服务器静音或闭麦 POST /api/v3/guild-mute/delete // API 请求 await guildUser.UnmuteAsync(); await guildUser.UndeafenAsync(); 服务器助力历史 GET /api/v3/guild-boost/history // 要在启动时缓存服务器助力信息，请设置 AlwaysDownloadBoostSubscriptions = true // 主动更新所有服务器服务器助力信息缓存 await _socketClient.DownloadBoostSubscriptionsAsync(); // 主动更新部分服务器服务器助力信息缓存 IEnumerable<IGuild> guilds = Enumerable.Empty<IGuild>(); await _socketClient.DownloadBoostSubscriptionsAsync(guilds); // 主动更新指定服务器服务器助力信息缓存 await socketGuild.DownloadBoostSubscriptionsAsync(); // 缓存获取服务器内的所有服务器助力信息 ImmutableDictionary<IUser,IReadOnlyCollection<BoostSubscriptionMetadata>> boostSubscriptions = socketGuild.BoostSubscriptions; ImmutableDictionary<IUser,IReadOnlyCollection<BoostSubscriptionMetadata>> validBoostSubscriptions = socketGuild.ValidBoostSubscriptions; // 缓存获取服务器用户的服务器服务器助力信息 IReadOnlyCollection<BoostSubscriptionMetadata> boostSubscriptions = socketGuildUser.BoostSubscriptions; // API 请求，获取服务器内的助力信息 ImmutableDictionary<IUser,IReadOnlyCollection<BoostSubscriptionMetadata>> boostSubscriptions = await guild.GetBoostSubscriptionsAsync(); ImmutableDictionary<IUser,IReadOnlyCollection<BoostSubscriptionMetadata>> boostSubscriptions = await guild.GetActiveBoostSubscriptionsAsync(); // API 请求，获取服务器用户的助力信息 IReadOnlyCollection<BoostSubscriptionMetadata> boostSubscriptions = await guildUser.GetBoostSubscriptionsAsync();"
  },
  "quick_reference/http_api/intimacy.html": {
    "href": "quick_reference/http_api/intimacy.html",
    "title": "亲密度相关接口 | Kook.Net 文档",
    "keywords": "亲密度相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketUser socketUser = null; RestUser restUser = null; IUser user = null; 获取用户的亲密度 GET /api/v3/intimacy/index // API 请求 RestIntimacy intimacyFromSocket = await socketUser.GetIntimacyAsync(); RestIntimacy intimacyFromRest = await restUser.GetIntimacyAsync(); IIntimacy intimacy = await user.GetIntimacyAsync(); 更新用户的亲密度 POST /api/v3/intimacy/update string socialInfo = null; // 社交信息 uint imageId = default; // 形象图片 ID int score = default; // 亲密度 // API 请求 await user.UpdateIntimacyAsync(x => { x.SocialInfo = socialInfo; x.ImageId = imageId; x.Score = score; });"
  },
  "quick_reference/http_api/invite.html": {
    "href": "quick_reference/http_api/invite.html",
    "title": "邀请相关接口 | Kook.Net 文档",
    "keywords": "邀请相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; IGuild guild = null; 获取邀请列表 GET /api/v3/invite/list // API 请求 IReadOnlyCollection<IInvite> invites = await guild.GetInvitesAsync(); 创建邀请链接 POST /api/v3/invite/create InviteMaxAge maxAge = default; // 有效期 InviteMaxUses maxUses = default; // 最大使用次数 // API 请求 IInvite invite = await guild.CreateInviteAsync(maxAge, maxUses); 删除邀请链接 POST /api/v3/invite/delete IInvite invite = null; // 邀请 // API 请求 await invite.DeleteAsync();"
  },
  "quick_reference/http_api/message.html": {
    "href": "quick_reference/http_api/message.html",
    "title": "消息相关接口 | Kook.Net 文档",
    "keywords": "消息相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; SocketTextChannel socketTextChannel = null; RestTextChannel restTextChannel = null; ITextChannel textChannel = null; IUserMessage userMessage = null; 获取频道聊天消息列表 GET /api/v3/message/list IMessage referenceMessage = null; // 获取消息列表所根据的参考消息位置的 Guid referenceMessageId = default; // 获取消息列表所根据的参考消息位置的 ID Direction direction = default; // 获取消息列表的方向 int limit = default; // 获取消息列表的数量 // 要缓存文字频道聊天消息，请设置 MessageCacheSize 的值 // 缓存获取文字频道的聊天消息列表 IReadOnlyCollection<SocketMessage> cachedMessages = socketTextChannel.CachedMessages; IReadOnlyCollection<SocketMessage> conditionalCachedMessages = socketTextChannel.GetCachedMessages(referenceMessage, direction, limit); IReadOnlyCollection<SocketMessage> conditionalCachedMessagesById = socketTextChannel.GetCachedMessages(referenceMessageId, direction, limit); // API 请求 IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessages = socketTextChannel.GetMessagesAsync(referenceMessage, direction, limit); IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessagesById = socketTextChannel.GetMessagesAsync(referenceMessageId, direction, limit); IAsyncEnumerable<IReadOnlyCollection<RestMessage>> pagedRestMessages = restTextChannel.GetMessagesAsync(referenceMessage, direction, limit); IAsyncEnumerable<IReadOnlyCollection<RestMessage>> pagedRestMessagesById = restTextChannel.GetMessagesAsync(referenceMessageId, direction, limit); // 在 ITextChannel 上进行调用 IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessages = textChannel.GetMessagesAsync(referenceMessage, direction, limit); IAsyncEnumerable<IReadOnlyCollection<IMessage>> pagedMessagesById = textChannel.GetMessagesAsync(referenceMessageId, direction, limit); 获取频道聊天消息详情 GET /api/v3/message/view Guid messageId = default; // 要获取详情的消息 ID // 要缓存文字频道聊天消息，请设置 MessageCacheSize 的值 // 缓存获取文字频道的聊天消息详情 SocketMessage cachedMessage = socketTextChannel.GetCachedMessage(messageId); // 调用异步方法获取消息详情，在缓存中包含指定的消息对象的情况下，直接返回缓存的消息对象，否则会发起 API 请求获取消息对象 IMessage messageAsync = await socketTextChannel.GetMessageAsync(messageId); // API 请求 IMessage message = await restTextChannel.GetMessageAsync(messageId); // 在 ITextChannel 上进行调用 IMessage message = await textChannel.GetMessageAsync(messageId); 发送频道聊天消息 POST /api/v3/message/create string text = null; // 要发送的文字消息 IQuote quote = null; // 被引用的消息 IUser ephemeralUser = null; // 瞬态消息的可见用户 string filePath = null; // 要发送的文件的路径 string fileName = null; // 要发送的文件的名称 AttachmentType fileType = default; // 要发送的文件的类型 Stream stream = null; // 要发送的文件的流 FileAttachment attachment = default; // 要发送的文件的附件 ICard card = null; // 要发送的卡片 IEnumerable<ICard> cards = null; // 要发送的卡片列表 // API 请求，发送文本消息 Cacheable<IUserMessage,Guid> textMessage = await textChannel.SendTextAsync(text, quote, ephemeralUser); // API 请求，发送文件消息 Cacheable<IUserMessage,Guid> fileMessageFromPath = await textChannel.SendFileAsync(filePath, fileName, fileType, quote, ephemeralUser); Cacheable<IUserMessage,Guid> fileMessageFromStream = await textChannel.SendFileAsync(stream, fileName, fileType, quote, ephemeralUser); Cacheable<IUserMessage,Guid> fileMessageFromAttachment = await textChannel.SendFileAsync(attachment, quote, ephemeralUser); // API 请求，发送单卡片消息 Cacheable<IUserMessage,Guid> cardMessage = await textChannel.SendCardAsync(card, quote, ephemeralUser); // API 请求，发送多卡片消息 Cacheable<IUserMessage,Guid> cardsMessage = await textChannel.SendCardsAsync(cards, quote, ephemeralUser); 更新频道聊天消息 POST /api/v3/message/update string content = null; // 要更新的消息的文本 IEnumerable<ICard> cards = null; // 要更新的消息的卡片 IQuote quote = null; // 要更新的消息的引用 IUser ephemeralUser = null; // 要更新的瞬态消息的可见用户 // API 请求 await userMessage.ModifyAsync(x => { x.Content = content; x.Cards = cards; x.Quote = quote; // 要清除引用，请设置为 Quote.Empty x.EphemeralUser = ephemeralUser; }); 删除频道聊天消息 POST /api/v3/message/delete // API 请求 await userMessage.DeleteAsync(); 获取频道消息某回应的用户列表 GET /api/v3/message/reaction-list IEmote emoji = null; // 要获取用户列表的回应的表情 // 缓存获取消息的回应概要，但不包含用户列表 IReadOnlyDictionary<IEmote,ReactionMetadata> cachedReactions = socketUserMessage.Reactions; // API 请求 IReadOnlyCollection<IUser> reactionUsers = await userMessage.GetReactionUsersAsync(emoji); 给某个消息添加回应 POST /api/v3/message/add-reaction 有关如何构造 Emoji，请参考 表情符号。 IEmote emoji = null; // 要添加的回应的表情 IEnumerable<IEmote> emojis = null; // 要添加的回应的表情列表 // API 请求 await userMessage.AddReactionAsync(emoji); await userMessage.AddReactionsAsync(emojis); 删除消息的某个回应 POST /api/v3/message/delete-reaction IEmote emoji = null; IEnumerable<IEmote> emojis = null; IUser user = null; // API 请求 await userMessage.RemoveReactionAsync(emoji, user); await userMessage.RemoveReactionsAsync(user, emojis);"
  },
  "quick_reference/http_api/oauth.html": {
    "href": "quick_reference/http_api/oauth.html",
    "title": "OAuth 2.0 相关接口 | Kook.Net 文档",
    "keywords": "OAuth 2.0 相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; 获取 AccessToken POST /api/oauth2/token 无公开 API。可参考以下类库： AspNet.Security.OAuth.Kook：NuGet，GitHub，文档 OpenIddict：NuGet，GitHub，文档"
  },
  "quick_reference/http_api/user-chat.html": {
    "href": "quick_reference/http_api/user-chat.html",
    "title": "私信聊天会话接口 | Kook.Net 文档",
    "keywords": "私信聊天会话接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; readonly IKookClient _client = null; 获取私信聊天会话列表 GET /api/v3/user-chat/list // 缓存获取私信聊天会话列表 IReadOnlyCollection<SocketDMChannel> cachedDmChannels = _socketClient.DMChannels; // API 请求 IReadOnlyCollection<IDMChannel> dmChannels = await _client.GetDMChannelsAsync(); 获取私信聊天会话详情 GET /api/v3/user-chat/view Guid chatCode = default; // 要获取详情的私信聊天会话的 ChatCode ulong userId = default; // 要获取详情的私信聊天会话的 UserId // 缓存获取私信聊天会话详情 SocketDMChannel dmChannelByChatCode = _socketClient.GetDMChannel(chatCode); SocketDMChannel dmChannelByUserId = _socketClient.GetDMChannel(userId); // API 请求 IDMChannel dmChannel = await _client.GetDMChannelAsync(chatCode); 创建私信聊天会话 POST /api/v3/user-chat/create IUser user = null; // 要创建私信聊天会话的用户 // API 请求 IDMChannel dmChannel = await user.CreateDMChannelAsync(); 删除私信聊天会话 POST /api/v3/user-chat/delete IDMChannel dmChannel = null; // 要删除的私信聊天会话 // API 请求 await dmChannel.CloseAsync()"
  },
  "quick_reference/http_api/user.html": {
    "href": "quick_reference/http_api/user.html",
    "title": "用户相关接口 | Kook.Net 文档",
    "keywords": "用户相关接口 预声明变量 readonly KookSocketClient _socketClient = null; readonly KookRestClient _restClient = null; IKookClient _client = null; 获取当前用户信息 GET /api/v3/user/me IGuild guild = null; // 服务器 // 缓存获取当前用户信息 SocketSelfUser socketCurrentUser = _socketClient.CurrentUser; RestSelfUser restCurrentUser = _restClient.CurrentUser; // 缓存获取当前用户在服务器中的用户信息 SocketGuildUser socketGuildCurrentUser = _socketGuild.CurrentUser; // API 请求 IUser currentUser = await _client.GetUserAsync(_client.CurrentUser.Id); IGuildUser currentGuildUser = await guild.GetCurrentUserAsync(); 获取目标用户信息 GET /api/v3/user/view ulong userId = default; // 用户 ID string username = null; // 用户名 string identifyNumber = null; // 用户标识码 IGuild guild = null; // 服务器 // 缓存获取目标用户信息 SocketUser socketUserById = _socketClient.GetUser(userId); SocketUser socketUserByNameNumber = _socketClient.GetUser(username, identifyNumber); // 缓存获取用户在服务器中的用户信息 SocketGuildUser socketGuildUser = socketGuild.GetUser(userId); // API 请求 IUser user = await _client.GetUserAsync(userId); IGuildUser user = await guild.GetUserAsync(userId) 下线机器人 POST /api/v3/user/offline _socketClient.LogoutAsync(); _restClient.LogoutAsync();"
  },
  "quick_reference/index.html": {
    "href": "quick_reference/index.html",
    "title": "快速参考指南 | Kook.Net 文档",
    "keywords": "快速参考指南 快速参考指南将会介绍 KOOK 开发者平台 中所列出的 HTTP 接口与事件在 Kook.Net 中的使用方法。 登录与启动 Rest 客户端 WebSocket 客户端 Webhook 客户端 HTTP 接口 服务器相关接口 频道相关接口 消息相关接口 频道用户相关接口 私信聊天会话接口 用户私聊消息接口 好友相关接口 Gateway 相关接口 用户相关接口 媒体接口 服务器角色权限相关接口 亲密度相关接口 服务器表情相关接口 邀请相关接口 黑名单相关接口 Badge 相关接口 用户动态相关接口 OAuth 2.0 相关接口 网关事件 频道相关事件 私聊消息事件 服务器成员相关事件 服务器角色相关事件 服务器相关事件 消息相关事件列表 用户相关事件列表"
  },
  "quick_reference/startup/rest.html": {
    "href": "quick_reference/startup/rest.html",
    "title": "Rest 客户端 | Kook.Net 文档",
    "keywords": "Rest 客户端 预声明变量 readonly KookRestClient _restClient; // 使用默认配置创建 Rest 客户端 _restClient = new KookRestClient(); // 使用自定义配置创建 Rest 客户端 _restClient = new KookRestClient(new KookRestConfig() { // 请求头 Accept-Language AcceptLanguage = \"zh-CN\", // 默认重试模式 DefaultRetryMode = RetryMode.AlwaysRetry, // 默认超速回调 DefaultRatelimitCallback = info => Task.CompletedTask, // 日志级别 LogLevel = LogSeverity.Info, // 双向文稿格式化用户名 FormatUsersInBidirectionalUnicode = true, // Rest 客户端提供程序 RestClientProvider = DefaultRestClientProvider.Instance }); // Token string token = null; // 登录 await _restClient.LoginAsync(TokenType.Bot, token); // 登出 await _restClient.LogoutAsync();"
  },
  "quick_reference/startup/webhook.html": {
    "href": "quick_reference/startup/webhook.html",
    "title": "Webhook 客户端 | Kook.Net 文档",
    "keywords": "Webhook 客户端 Webhook 客户端的抽象类是 KookWebhookClient。 ASP.NET 实现 // 创建服务主机构建器 WebApplicationBuilder builder = WebApplication.CreateBuilder(args); // 添加 KookAspNetWebhookClient 服务并进行必要的配置 builder.Services.AddKookAspNetWebhookClient(config => { // 包含 KookRestConfig 及 KookSocketConfig 的全部配置项，此处略 // 由 KookWebhookConfig 提供的配置项 // Webhook 负载验证令牌 config.VerifyToken = default; // Webhook 负载解密密钥 config.EncryptKey = default; // 启动时是否等待 Webhook 验证挑战后再开始启动 Bot 服务 config.StartupWaitForChallenge = false; // Webhook 提供程序，此处为由 KookAspNetWebhookConfig 设置的默认值 config.WebhookProvider = DefaultAspNetWebhookProvider.Instance; // 由 KookAspNetWebhookConfig 提供的配置项 // 令牌类型 config.TokenType = TokenType.Bot; // 令牌 config.Token = default; // 是否验证令牌格式 config.ValidateToken = true; // 请求的路由终结点 config.RouteEndpoint = \"kook\"; // 配置 KookAspNetWebhookClient config.ConfigureKookClient = (serviceProvider, client) => { }; }); // 构建服务主机 WebApplication app = builder.Build(); // 配置 Webhook 终结点 app.UseKookEndpoint(); // 启动服务主机 await app.RunAsync(); HTTP Listener 实现 // 使用默认配置创建 WebSocket 客户端 KookHttpListenerWebhookClient webhookClient = new KookHttpListenerWebhookClient(); // 使用自定义配置创建 WebSocket 客户端 KookHttpListenerWebhookClient webhookClient = new KookHttpListenerWebhookClient(new KookHttpListenerWebhookConfig { // 包含 KookRestConfig 及 KookSocketConfig 的全部配置项，此处略 // 由 KookWebhookConfig 提供的配置项 // Webhook 负载验证令牌 VerifyToken = default, // Webhook 负载解密密钥 EncryptKey = default, // 启动时是否等待 Webhook 验证挑战后再开始启动 Bot 服务 StartupWaitForChallenge = false, // Webhook 提供程序，此处为由 KookAspNetWebhookConfig 设置的默认值 WebhookProvider = DefaultAspNetWebhookProvider.Instance, // 由 KookHttpListenerWebhookConfig 提供的配置项 // 用于 HttpListener 的 URI 前缀列表 UriPrefixes = [ \"http://localhost:5043/\", \"http://127.0.0.1:5043/\" ], // HttpListener 崩溃后自动重启的时间间隔 // Timeout.InfiniteTimeSpan 表示终止服务但不终止进程 // 其它小于 0 的时间间隔表示不自动重启并终止进程 // TimeSpan.Zero 表示立即重启 HttpListener // 其它大于 0 的时间间隔表示等待指定的时间间隔后重启 HttpListener AutoRestartInterval = TimeSpan.FromSeconds(5), }); // Token string token = null; // 登录 await webhookClient.LoginAsync(TokenType.Bot, token); // 启动 await webhookClient.StartAsync(); // 停止 await webhookClient.StopAsync(); // 登出 await webhookClient.LogoutAsync();"
  },
  "quick_reference/startup/websocket.html": {
    "href": "quick_reference/startup/websocket.html",
    "title": "WebSocket 客户端 | Kook.Net 文档",
    "keywords": "WebSocket 客户端 预声明变量 readonly KookSocketClient _socketClient; // 使用默认配置创建 WebSocket 客户端 _socketClient = new KookRestClient(); // 使用自定义配置创建 WebSocket 客户端 _socketClient = new KookSocketClient(new KookSocketConfig() { // 包含 KookRestConfig 的全部配置项，此处略 // 显示指定网关地址 GatewayHost = null, // 连接超时（毫秒） ConnectionTimeout = 6000, // 小型 Bot 服务器数量阈值 SmallNumberOfGuildsThreshold = 5, // 大型 Bot 服务器数量阈值 LargeNumberOfGuildsThreshold = 50, // 处理程序警告耗时阈值（毫秒） HandlerTimeout = 3000, // 消息缓存数量 MessageCacheSize = 10, // WebSocket 客户端提供程序 WebSocketProvider = DefaultWebSocketProvider.Instance, // UDP 客户端提供程序 UdpSocketProvider = DefaultUdpSocketProvider.Instance, // 启动缓存数据获取模式 StartupCacheFetchMode = StartupCacheFetchMode.Auto, // 自动下载服务器用户信息 AlwaysDownloadUsers = false, // 自动下载服务器用户语音状态信息 AlwaysDownloadVoiceStates = false, // 自动下载服务器助力信息 AlwaysDownloadBoostSubscriptions = false, // 等待服务器可用状态超时（毫秒） MaxWaitBetweenGuildAvailablesBeforeReady = 10000, // 最大获取新加入服务器信息重试次数 MaxJoinedGuildDataFetchingRetryTimes = 10, // 获取新加入服务器信息重试延迟（毫秒） JoinedGuildDataFetchingRetryDelay = 500 }); // Token string token = null; // 登录 await _socketClient.LoginAsync(TokenType.Bot, token); // 启动 await _socketClient.StartAsync(); // 停止 await _socketClient.StopAsync(); // 登出 await _socketClient.LogoutAsync();"
  }
}